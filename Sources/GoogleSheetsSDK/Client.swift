// Generated by swift-openapi-generator, do not modify.
@_spi(Generated) import OpenAPIRuntime
#if os(Linux)
@preconcurrency import struct Foundation.URL
@preconcurrency import struct Foundation.Data
@preconcurrency import struct Foundation.Date
#else
import struct Foundation.URL
import struct Foundation.Data
import struct Foundation.Date
#endif
import HTTPTypes
/// Reads and writes Google Sheets.
public struct Client: APIProtocol {
    /// The underlying HTTP client.
    private let client: UniversalClient
    /// Creates a new client.
    /// - Parameters:
    ///   - serverURL: The server URL that the client connects to. Any server
    ///   URLs defined in the OpenAPI document are available as static methods
    ///   on the ``Servers`` type.
    ///   - configuration: A set of configuration values for the client.
    ///   - transport: A transport that performs HTTP operations.
    ///   - middlewares: A list of middlewares to call before the transport.
    public init(
        serverURL: Foundation.URL,
        configuration: Configuration = .init(),
        transport: any ClientTransport,
        middlewares: [any ClientMiddleware] = []
    ) {
        self.client = .init(
            serverURL: serverURL,
            configuration: configuration,
            transport: transport,
            middlewares: middlewares
        )
    }
    private var converter: Converter {
        client.converter
    }
    /// Creates a spreadsheet, returning the newly created spreadsheet.
    ///
    /// - Remark: HTTP `POST /v4/spreadsheets`.
    /// - Remark: Generated from `#/paths//v4/spreadsheets/post(sheets.spreadsheets.create)`.
    public func sheets_spreadsheets_create(_ input: Operations.Sheets_spreadsheets_create.Input) async throws -> Operations.Sheets_spreadsheets_create.Output {
        try await client.send(
            input: input,
            forOperation: Operations.Sheets_spreadsheets_create.id,
            serializer: { input in
                let path = try converter.renderedPath(
                    template: "/v4/spreadsheets",
                    parameters: []
                )
                var request: HTTPTypes.HTTPRequest = .init(
                    soar_path: path,
                    method: .post
                )
                suppressMutabilityWarning(&request)
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "$.xgafv",
                    value: input.query._dollar__xgafv
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "access_token",
                    value: input.query.accessToken
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "alt",
                    value: input.query.alt
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "callback",
                    value: input.query.callback
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "fields",
                    value: input.query.fields
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "key",
                    value: input.query.key
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "oauth_token",
                    value: input.query.oauthToken
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "prettyPrint",
                    value: input.query.prettyPrint
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "quotaUser",
                    value: input.query.quotaUser
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "upload_protocol",
                    value: input.query.uploadProtocol
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "uploadType",
                    value: input.query.uploadType
                )
                converter.setAcceptHeader(
                    in: &request.headerFields,
                    contentTypes: input.headers.accept
                )
                let body: OpenAPIRuntime.HTTPBody?
                switch input.body {
                case .none:
                    body = nil
                case let .json(value):
                    body = try converter.setOptionalRequestBodyAsJSON(
                        value,
                        headerFields: &request.headerFields,
                        contentType: "application/json; charset=utf-8"
                    )
                }
                return (request, body)
            },
            deserializer: { response, responseBody in
                switch response.status.code {
                case 200:
                    let contentType = converter.extractContentTypeIfPresent(in: response.headerFields)
                    let body: Operations.Sheets_spreadsheets_create.Output.Ok.Body
                    let chosenContentType = try converter.bestContentType(
                        received: contentType,
                        options: [
                            "application/json"
                        ]
                    )
                    switch chosenContentType {
                    case "application/json":
                        body = try await converter.getResponseBodyAsJSON(
                            Components.Schemas.Spreadsheet.self,
                            from: responseBody,
                            transforming: { value in
                                .json(value)
                            }
                        )
                    default:
                        preconditionFailure("bestContentType chose an invalid content type.")
                    }
                    return .ok(.init(body: body))
                default:
                    return .undocumented(
                        statusCode: response.status.code,
                        .init(
                            headerFields: response.headerFields,
                            body: responseBody
                        )
                    )
                }
            }
        )
    }
    /// Returns the spreadsheet at the given ID. The caller must specify the spreadsheet ID. By default, data within grids is not returned. You can include grid data in one of 2 ways: * Specify a [field mask](https://developers.google.com/sheets/api/guides/field-masks) listing your desired fields using the `fields` URL parameter in HTTP * Set the includeGridData URL parameter to true. If a field mask is set, the `includeGridData` parameter is ignored For large spreadsheets, as a best practice, retrieve only the specific spreadsheet fields that you want. To retrieve only subsets of spreadsheet data, use the ranges URL parameter. Ranges are specified using [A1 notation](/sheets/api/guides/concepts#cell). You can define a single cell (for example, `A1`) or multiple cells (for example, `A1:D5`). You can also get cells from other sheets within the same spreadsheet (for example, `Sheet2!A1:C4`) or retrieve multiple ranges at once (for example, `?ranges=A1:D5&ranges=Sheet2!A1:C4`). Limiting the range returns only the portions of the spreadsheet that intersect the requested ranges.
    ///
    /// - Remark: HTTP `GET /v4/spreadsheets/{spreadsheetId}`.
    /// - Remark: Generated from `#/paths//v4/spreadsheets/{spreadsheetId}/get(sheets.spreadsheets.get)`.
    public func sheets_spreadsheets_get(_ input: Operations.Sheets_spreadsheets_get.Input) async throws -> Operations.Sheets_spreadsheets_get.Output {
        try await client.send(
            input: input,
            forOperation: Operations.Sheets_spreadsheets_get.id,
            serializer: { input in
                let path = try converter.renderedPath(
                    template: "/v4/spreadsheets/{}",
                    parameters: [
                        input.path.spreadsheetId
                    ]
                )
                var request: HTTPTypes.HTTPRequest = .init(
                    soar_path: path,
                    method: .get
                )
                suppressMutabilityWarning(&request)
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "$.xgafv",
                    value: input.query._dollar__xgafv
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "access_token",
                    value: input.query.accessToken
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "alt",
                    value: input.query.alt
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "callback",
                    value: input.query.callback
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "fields",
                    value: input.query.fields
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "key",
                    value: input.query.key
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "oauth_token",
                    value: input.query.oauthToken
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "prettyPrint",
                    value: input.query.prettyPrint
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "quotaUser",
                    value: input.query.quotaUser
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "upload_protocol",
                    value: input.query.uploadProtocol
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "uploadType",
                    value: input.query.uploadType
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "includeGridData",
                    value: input.query.includeGridData
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "ranges",
                    value: input.query.ranges
                )
                converter.setAcceptHeader(
                    in: &request.headerFields,
                    contentTypes: input.headers.accept
                )
                return (request, nil)
            },
            deserializer: { response, responseBody in
                switch response.status.code {
                case 200:
                    let contentType = converter.extractContentTypeIfPresent(in: response.headerFields)
                    let body: Operations.Sheets_spreadsheets_get.Output.Ok.Body
                    let chosenContentType = try converter.bestContentType(
                        received: contentType,
                        options: [
                            "application/json"
                        ]
                    )
                    switch chosenContentType {
                    case "application/json":
                        body = try await converter.getResponseBodyAsJSON(
                            Components.Schemas.Spreadsheet.self,
                            from: responseBody,
                            transforming: { value in
                                .json(value)
                            }
                        )
                    default:
                        preconditionFailure("bestContentType chose an invalid content type.")
                    }
                    return .ok(.init(body: body))
                default:
                    return .undocumented(
                        statusCode: response.status.code,
                        .init(
                            headerFields: response.headerFields,
                            body: responseBody
                        )
                    )
                }
            }
        )
    }
    /// Returns the developer metadata with the specified ID. The caller must specify the spreadsheet ID and the developer metadata's unique metadataId.
    ///
    /// - Remark: HTTP `GET /v4/spreadsheets/{spreadsheetId}/developerMetadata/{metadataId}`.
    /// - Remark: Generated from `#/paths//v4/spreadsheets/{spreadsheetId}/developerMetadata/{metadataId}/get(sheets.spreadsheets.developerMetadata.get)`.
    public func sheets_spreadsheets_developerMetadata_get(_ input: Operations.Sheets_spreadsheets_developerMetadata_get.Input) async throws -> Operations.Sheets_spreadsheets_developerMetadata_get.Output {
        try await client.send(
            input: input,
            forOperation: Operations.Sheets_spreadsheets_developerMetadata_get.id,
            serializer: { input in
                let path = try converter.renderedPath(
                    template: "/v4/spreadsheets/{}/developerMetadata/{}",
                    parameters: [
                        input.path.spreadsheetId,
                        input.path.metadataId
                    ]
                )
                var request: HTTPTypes.HTTPRequest = .init(
                    soar_path: path,
                    method: .get
                )
                suppressMutabilityWarning(&request)
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "$.xgafv",
                    value: input.query._dollar__xgafv
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "access_token",
                    value: input.query.accessToken
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "alt",
                    value: input.query.alt
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "callback",
                    value: input.query.callback
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "fields",
                    value: input.query.fields
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "key",
                    value: input.query.key
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "oauth_token",
                    value: input.query.oauthToken
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "prettyPrint",
                    value: input.query.prettyPrint
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "quotaUser",
                    value: input.query.quotaUser
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "upload_protocol",
                    value: input.query.uploadProtocol
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "uploadType",
                    value: input.query.uploadType
                )
                converter.setAcceptHeader(
                    in: &request.headerFields,
                    contentTypes: input.headers.accept
                )
                return (request, nil)
            },
            deserializer: { response, responseBody in
                switch response.status.code {
                case 200:
                    let contentType = converter.extractContentTypeIfPresent(in: response.headerFields)
                    let body: Operations.Sheets_spreadsheets_developerMetadata_get.Output.Ok.Body
                    let chosenContentType = try converter.bestContentType(
                        received: contentType,
                        options: [
                            "application/json"
                        ]
                    )
                    switch chosenContentType {
                    case "application/json":
                        body = try await converter.getResponseBodyAsJSON(
                            Components.Schemas.DeveloperMetadata.self,
                            from: responseBody,
                            transforming: { value in
                                .json(value)
                            }
                        )
                    default:
                        preconditionFailure("bestContentType chose an invalid content type.")
                    }
                    return .ok(.init(body: body))
                default:
                    return .undocumented(
                        statusCode: response.status.code,
                        .init(
                            headerFields: response.headerFields,
                            body: responseBody
                        )
                    )
                }
            }
        )
    }
    /// Returns all developer metadata matching the specified DataFilter. If the provided DataFilter represents a DeveloperMetadataLookup object, this will return all DeveloperMetadata entries selected by it. If the DataFilter represents a location in a spreadsheet, this will return all developer metadata associated with locations intersecting that region.
    ///
    /// - Remark: HTTP `POST /v4/spreadsheets/{spreadsheetId}/developerMetadata:search`.
    /// - Remark: Generated from `#/paths//v4/spreadsheets/{spreadsheetId}/developerMetadata:search/post(sheets.spreadsheets.developerMetadata.search)`.
    public func sheets_spreadsheets_developerMetadata_search(_ input: Operations.Sheets_spreadsheets_developerMetadata_search.Input) async throws -> Operations.Sheets_spreadsheets_developerMetadata_search.Output {
        try await client.send(
            input: input,
            forOperation: Operations.Sheets_spreadsheets_developerMetadata_search.id,
            serializer: { input in
                let path = try converter.renderedPath(
                    template: "/v4/spreadsheets/{}/developerMetadata:search",
                    parameters: [
                        input.path.spreadsheetId
                    ]
                )
                var request: HTTPTypes.HTTPRequest = .init(
                    soar_path: path,
                    method: .post
                )
                suppressMutabilityWarning(&request)
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "$.xgafv",
                    value: input.query._dollar__xgafv
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "access_token",
                    value: input.query.accessToken
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "alt",
                    value: input.query.alt
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "callback",
                    value: input.query.callback
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "fields",
                    value: input.query.fields
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "key",
                    value: input.query.key
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "oauth_token",
                    value: input.query.oauthToken
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "prettyPrint",
                    value: input.query.prettyPrint
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "quotaUser",
                    value: input.query.quotaUser
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "upload_protocol",
                    value: input.query.uploadProtocol
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "uploadType",
                    value: input.query.uploadType
                )
                converter.setAcceptHeader(
                    in: &request.headerFields,
                    contentTypes: input.headers.accept
                )
                let body: OpenAPIRuntime.HTTPBody?
                switch input.body {
                case .none:
                    body = nil
                case let .json(value):
                    body = try converter.setOptionalRequestBodyAsJSON(
                        value,
                        headerFields: &request.headerFields,
                        contentType: "application/json; charset=utf-8"
                    )
                }
                return (request, body)
            },
            deserializer: { response, responseBody in
                switch response.status.code {
                case 200:
                    let contentType = converter.extractContentTypeIfPresent(in: response.headerFields)
                    let body: Operations.Sheets_spreadsheets_developerMetadata_search.Output.Ok.Body
                    let chosenContentType = try converter.bestContentType(
                        received: contentType,
                        options: [
                            "application/json"
                        ]
                    )
                    switch chosenContentType {
                    case "application/json":
                        body = try await converter.getResponseBodyAsJSON(
                            Components.Schemas.SearchDeveloperMetadataResponse.self,
                            from: responseBody,
                            transforming: { value in
                                .json(value)
                            }
                        )
                    default:
                        preconditionFailure("bestContentType chose an invalid content type.")
                    }
                    return .ok(.init(body: body))
                default:
                    return .undocumented(
                        statusCode: response.status.code,
                        .init(
                            headerFields: response.headerFields,
                            body: responseBody
                        )
                    )
                }
            }
        )
    }
    /// Copies a single sheet from a spreadsheet to another spreadsheet. Returns the properties of the newly created sheet.
    ///
    /// - Remark: HTTP `POST /v4/spreadsheets/{spreadsheetId}/sheets/{sheetId}:copyTo`.
    /// - Remark: Generated from `#/paths//v4/spreadsheets/{spreadsheetId}/sheets/{sheetId}:copyTo/post(sheets.spreadsheets.sheets.copyTo)`.
    public func sheets_spreadsheets_sheets_copyTo(_ input: Operations.Sheets_spreadsheets_sheets_copyTo.Input) async throws -> Operations.Sheets_spreadsheets_sheets_copyTo.Output {
        try await client.send(
            input: input,
            forOperation: Operations.Sheets_spreadsheets_sheets_copyTo.id,
            serializer: { input in
                let path = try converter.renderedPath(
                    template: "/v4/spreadsheets/{}/sheets/{}:copyTo",
                    parameters: [
                        input.path.spreadsheetId,
                        input.path.sheetId
                    ]
                )
                var request: HTTPTypes.HTTPRequest = .init(
                    soar_path: path,
                    method: .post
                )
                suppressMutabilityWarning(&request)
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "$.xgafv",
                    value: input.query._dollar__xgafv
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "access_token",
                    value: input.query.accessToken
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "alt",
                    value: input.query.alt
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "callback",
                    value: input.query.callback
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "fields",
                    value: input.query.fields
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "key",
                    value: input.query.key
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "oauth_token",
                    value: input.query.oauthToken
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "prettyPrint",
                    value: input.query.prettyPrint
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "quotaUser",
                    value: input.query.quotaUser
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "upload_protocol",
                    value: input.query.uploadProtocol
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "uploadType",
                    value: input.query.uploadType
                )
                converter.setAcceptHeader(
                    in: &request.headerFields,
                    contentTypes: input.headers.accept
                )
                let body: OpenAPIRuntime.HTTPBody?
                switch input.body {
                case .none:
                    body = nil
                case let .json(value):
                    body = try converter.setOptionalRequestBodyAsJSON(
                        value,
                        headerFields: &request.headerFields,
                        contentType: "application/json; charset=utf-8"
                    )
                }
                return (request, body)
            },
            deserializer: { response, responseBody in
                switch response.status.code {
                case 200:
                    let contentType = converter.extractContentTypeIfPresent(in: response.headerFields)
                    let body: Operations.Sheets_spreadsheets_sheets_copyTo.Output.Ok.Body
                    let chosenContentType = try converter.bestContentType(
                        received: contentType,
                        options: [
                            "application/json"
                        ]
                    )
                    switch chosenContentType {
                    case "application/json":
                        body = try await converter.getResponseBodyAsJSON(
                            Components.Schemas.SheetProperties.self,
                            from: responseBody,
                            transforming: { value in
                                .json(value)
                            }
                        )
                    default:
                        preconditionFailure("bestContentType chose an invalid content type.")
                    }
                    return .ok(.init(body: body))
                default:
                    return .undocumented(
                        statusCode: response.status.code,
                        .init(
                            headerFields: response.headerFields,
                            body: responseBody
                        )
                    )
                }
            }
        )
    }
    /// Returns a range of values from a spreadsheet. The caller must specify the spreadsheet ID and a range.
    ///
    /// - Remark: HTTP `GET /v4/spreadsheets/{spreadsheetId}/values/{range}`.
    /// - Remark: Generated from `#/paths//v4/spreadsheets/{spreadsheetId}/values/{range}/get(sheets.spreadsheets.values.get)`.
    public func sheets_spreadsheets_values_get(_ input: Operations.Sheets_spreadsheets_values_get.Input) async throws -> Operations.Sheets_spreadsheets_values_get.Output {
        try await client.send(
            input: input,
            forOperation: Operations.Sheets_spreadsheets_values_get.id,
            serializer: { input in
                let path = try converter.renderedPath(
                    template: "/v4/spreadsheets/{}/values/{}",
                    parameters: [
                        input.path.spreadsheetId,
                        input.path.range
                    ]
                )
                var request: HTTPTypes.HTTPRequest = .init(
                    soar_path: path,
                    method: .get
                )
                suppressMutabilityWarning(&request)
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "$.xgafv",
                    value: input.query._dollar__xgafv
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "access_token",
                    value: input.query.accessToken
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "alt",
                    value: input.query.alt
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "callback",
                    value: input.query.callback
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "fields",
                    value: input.query.fields
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "key",
                    value: input.query.key
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "oauth_token",
                    value: input.query.oauthToken
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "prettyPrint",
                    value: input.query.prettyPrint
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "quotaUser",
                    value: input.query.quotaUser
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "upload_protocol",
                    value: input.query.uploadProtocol
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "uploadType",
                    value: input.query.uploadType
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "dateTimeRenderOption",
                    value: input.query.dateTimeRenderOption
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "majorDimension",
                    value: input.query.majorDimension
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "valueRenderOption",
                    value: input.query.valueRenderOption
                )
                converter.setAcceptHeader(
                    in: &request.headerFields,
                    contentTypes: input.headers.accept
                )
                return (request, nil)
            },
            deserializer: { response, responseBody in
                switch response.status.code {
                case 200:
                    let contentType = converter.extractContentTypeIfPresent(in: response.headerFields)
                    let body: Operations.Sheets_spreadsheets_values_get.Output.Ok.Body
                    let chosenContentType = try converter.bestContentType(
                        received: contentType,
                        options: [
                            "application/json"
                        ]
                    )
                    switch chosenContentType {
                    case "application/json":
                        body = try await converter.getResponseBodyAsJSON(
                            Components.Schemas.ValueRange.self,
                            from: responseBody,
                            transforming: { value in
                                .json(value)
                            }
                        )
                    default:
                        preconditionFailure("bestContentType chose an invalid content type.")
                    }
                    return .ok(.init(body: body))
                default:
                    return .undocumented(
                        statusCode: response.status.code,
                        .init(
                            headerFields: response.headerFields,
                            body: responseBody
                        )
                    )
                }
            }
        )
    }
    /// Sets values in a range of a spreadsheet. The caller must specify the spreadsheet ID, range, and a valueInputOption.
    ///
    /// - Remark: HTTP `PUT /v4/spreadsheets/{spreadsheetId}/values/{range}`.
    /// - Remark: Generated from `#/paths//v4/spreadsheets/{spreadsheetId}/values/{range}/put(sheets.spreadsheets.values.update)`.
    public func sheets_spreadsheets_values_update(_ input: Operations.Sheets_spreadsheets_values_update.Input) async throws -> Operations.Sheets_spreadsheets_values_update.Output {
        try await client.send(
            input: input,
            forOperation: Operations.Sheets_spreadsheets_values_update.id,
            serializer: { input in
                let path = try converter.renderedPath(
                    template: "/v4/spreadsheets/{}/values/{}",
                    parameters: [
                        input.path.spreadsheetId,
                        input.path.range
                    ]
                )
                var request: HTTPTypes.HTTPRequest = .init(
                    soar_path: path,
                    method: .put
                )
                suppressMutabilityWarning(&request)
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "$.xgafv",
                    value: input.query._dollar__xgafv
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "access_token",
                    value: input.query.accessToken
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "alt",
                    value: input.query.alt
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "callback",
                    value: input.query.callback
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "fields",
                    value: input.query.fields
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "key",
                    value: input.query.key
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "oauth_token",
                    value: input.query.oauthToken
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "prettyPrint",
                    value: input.query.prettyPrint
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "quotaUser",
                    value: input.query.quotaUser
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "upload_protocol",
                    value: input.query.uploadProtocol
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "uploadType",
                    value: input.query.uploadType
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "includeValuesInResponse",
                    value: input.query.includeValuesInResponse
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "responseDateTimeRenderOption",
                    value: input.query.responseDateTimeRenderOption
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "responseValueRenderOption",
                    value: input.query.responseValueRenderOption
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "valueInputOption",
                    value: input.query.valueInputOption
                )
                converter.setAcceptHeader(
                    in: &request.headerFields,
                    contentTypes: input.headers.accept
                )
                let body: OpenAPIRuntime.HTTPBody?
                switch input.body {
                case .none:
                    body = nil
                case let .json(value):
                    body = try converter.setOptionalRequestBodyAsJSON(
                        value,
                        headerFields: &request.headerFields,
                        contentType: "application/json; charset=utf-8"
                    )
                }
                return (request, body)
            },
            deserializer: { response, responseBody in
                switch response.status.code {
                case 200:
                    let contentType = converter.extractContentTypeIfPresent(in: response.headerFields)
                    let body: Operations.Sheets_spreadsheets_values_update.Output.Ok.Body
                    let chosenContentType = try converter.bestContentType(
                        received: contentType,
                        options: [
                            "application/json"
                        ]
                    )
                    switch chosenContentType {
                    case "application/json":
                        body = try await converter.getResponseBodyAsJSON(
                            Components.Schemas.UpdateValuesResponse.self,
                            from: responseBody,
                            transforming: { value in
                                .json(value)
                            }
                        )
                    default:
                        preconditionFailure("bestContentType chose an invalid content type.")
                    }
                    return .ok(.init(body: body))
                default:
                    return .undocumented(
                        statusCode: response.status.code,
                        .init(
                            headerFields: response.headerFields,
                            body: responseBody
                        )
                    )
                }
            }
        )
    }
    /// Appends values to a spreadsheet. The input range is used to search for existing data and find a "table" within that range. Values will be appended to the next row of the table, starting with the first column of the table. See the [guide](/sheets/api/guides/values#appending_values) and [sample code](/sheets/api/samples/writing#append_values) for specific details of how tables are detected and data is appended. The caller must specify the spreadsheet ID, range, and a valueInputOption. The `valueInputOption` only controls how the input data will be added to the sheet (column-wise or row-wise), it does not influence what cell the data starts being written to.
    ///
    /// - Remark: HTTP `POST /v4/spreadsheets/{spreadsheetId}/values/{range}:append`.
    /// - Remark: Generated from `#/paths//v4/spreadsheets/{spreadsheetId}/values/{range}:append/post(sheets.spreadsheets.values.append)`.
    public func sheets_spreadsheets_values_append(_ input: Operations.Sheets_spreadsheets_values_append.Input) async throws -> Operations.Sheets_spreadsheets_values_append.Output {
        try await client.send(
            input: input,
            forOperation: Operations.Sheets_spreadsheets_values_append.id,
            serializer: { input in
                let path = try converter.renderedPath(
                    template: "/v4/spreadsheets/{}/values/{}:append",
                    parameters: [
                        input.path.spreadsheetId,
                        input.path.range
                    ]
                )
                var request: HTTPTypes.HTTPRequest = .init(
                    soar_path: path,
                    method: .post
                )
                suppressMutabilityWarning(&request)
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "$.xgafv",
                    value: input.query._dollar__xgafv
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "access_token",
                    value: input.query.accessToken
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "alt",
                    value: input.query.alt
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "callback",
                    value: input.query.callback
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "fields",
                    value: input.query.fields
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "key",
                    value: input.query.key
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "oauth_token",
                    value: input.query.oauthToken
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "prettyPrint",
                    value: input.query.prettyPrint
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "quotaUser",
                    value: input.query.quotaUser
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "upload_protocol",
                    value: input.query.uploadProtocol
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "uploadType",
                    value: input.query.uploadType
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "includeValuesInResponse",
                    value: input.query.includeValuesInResponse
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "insertDataOption",
                    value: input.query.insertDataOption
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "responseDateTimeRenderOption",
                    value: input.query.responseDateTimeRenderOption
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "responseValueRenderOption",
                    value: input.query.responseValueRenderOption
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "valueInputOption",
                    value: input.query.valueInputOption
                )
                converter.setAcceptHeader(
                    in: &request.headerFields,
                    contentTypes: input.headers.accept
                )
                let body: OpenAPIRuntime.HTTPBody?
                switch input.body {
                case .none:
                    body = nil
                case let .json(value):
                    body = try converter.setOptionalRequestBodyAsJSON(
                        value,
                        headerFields: &request.headerFields,
                        contentType: "application/json; charset=utf-8"
                    )
                }
                return (request, body)
            },
            deserializer: { response, responseBody in
                switch response.status.code {
                case 200:
                    let contentType = converter.extractContentTypeIfPresent(in: response.headerFields)
                    let body: Operations.Sheets_spreadsheets_values_append.Output.Ok.Body
                    let chosenContentType = try converter.bestContentType(
                        received: contentType,
                        options: [
                            "application/json"
                        ]
                    )
                    switch chosenContentType {
                    case "application/json":
                        body = try await converter.getResponseBodyAsJSON(
                            Components.Schemas.AppendValuesResponse.self,
                            from: responseBody,
                            transforming: { value in
                                .json(value)
                            }
                        )
                    default:
                        preconditionFailure("bestContentType chose an invalid content type.")
                    }
                    return .ok(.init(body: body))
                default:
                    return .undocumented(
                        statusCode: response.status.code,
                        .init(
                            headerFields: response.headerFields,
                            body: responseBody
                        )
                    )
                }
            }
        )
    }
    /// Clears values from a spreadsheet. The caller must specify the spreadsheet ID and range. Only values are cleared -- all other properties of the cell (such as formatting, data validation, etc..) are kept.
    ///
    /// - Remark: HTTP `POST /v4/spreadsheets/{spreadsheetId}/values/{range}:clear`.
    /// - Remark: Generated from `#/paths//v4/spreadsheets/{spreadsheetId}/values/{range}:clear/post(sheets.spreadsheets.values.clear)`.
    public func sheets_spreadsheets_values_clear(_ input: Operations.Sheets_spreadsheets_values_clear.Input) async throws -> Operations.Sheets_spreadsheets_values_clear.Output {
        try await client.send(
            input: input,
            forOperation: Operations.Sheets_spreadsheets_values_clear.id,
            serializer: { input in
                let path = try converter.renderedPath(
                    template: "/v4/spreadsheets/{}/values/{}:clear",
                    parameters: [
                        input.path.spreadsheetId,
                        input.path.range
                    ]
                )
                var request: HTTPTypes.HTTPRequest = .init(
                    soar_path: path,
                    method: .post
                )
                suppressMutabilityWarning(&request)
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "$.xgafv",
                    value: input.query._dollar__xgafv
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "access_token",
                    value: input.query.accessToken
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "alt",
                    value: input.query.alt
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "callback",
                    value: input.query.callback
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "fields",
                    value: input.query.fields
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "key",
                    value: input.query.key
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "oauth_token",
                    value: input.query.oauthToken
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "prettyPrint",
                    value: input.query.prettyPrint
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "quotaUser",
                    value: input.query.quotaUser
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "upload_protocol",
                    value: input.query.uploadProtocol
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "uploadType",
                    value: input.query.uploadType
                )
                converter.setAcceptHeader(
                    in: &request.headerFields,
                    contentTypes: input.headers.accept
                )
                let body: OpenAPIRuntime.HTTPBody?
                switch input.body {
                case .none:
                    body = nil
                case let .json(value):
                    body = try converter.setOptionalRequestBodyAsJSON(
                        value,
                        headerFields: &request.headerFields,
                        contentType: "application/json; charset=utf-8"
                    )
                }
                return (request, body)
            },
            deserializer: { response, responseBody in
                switch response.status.code {
                case 200:
                    let contentType = converter.extractContentTypeIfPresent(in: response.headerFields)
                    let body: Operations.Sheets_spreadsheets_values_clear.Output.Ok.Body
                    let chosenContentType = try converter.bestContentType(
                        received: contentType,
                        options: [
                            "application/json"
                        ]
                    )
                    switch chosenContentType {
                    case "application/json":
                        body = try await converter.getResponseBodyAsJSON(
                            Components.Schemas.ClearValuesResponse.self,
                            from: responseBody,
                            transforming: { value in
                                .json(value)
                            }
                        )
                    default:
                        preconditionFailure("bestContentType chose an invalid content type.")
                    }
                    return .ok(.init(body: body))
                default:
                    return .undocumented(
                        statusCode: response.status.code,
                        .init(
                            headerFields: response.headerFields,
                            body: responseBody
                        )
                    )
                }
            }
        )
    }
    /// Clears one or more ranges of values from a spreadsheet. The caller must specify the spreadsheet ID and one or more ranges. Only values are cleared -- all other properties of the cell (such as formatting and data validation) are kept.
    ///
    /// - Remark: HTTP `POST /v4/spreadsheets/{spreadsheetId}/values:batchClear`.
    /// - Remark: Generated from `#/paths//v4/spreadsheets/{spreadsheetId}/values:batchClear/post(sheets.spreadsheets.values.batchClear)`.
    public func sheets_spreadsheets_values_batchClear(_ input: Operations.Sheets_spreadsheets_values_batchClear.Input) async throws -> Operations.Sheets_spreadsheets_values_batchClear.Output {
        try await client.send(
            input: input,
            forOperation: Operations.Sheets_spreadsheets_values_batchClear.id,
            serializer: { input in
                let path = try converter.renderedPath(
                    template: "/v4/spreadsheets/{}/values:batchClear",
                    parameters: [
                        input.path.spreadsheetId
                    ]
                )
                var request: HTTPTypes.HTTPRequest = .init(
                    soar_path: path,
                    method: .post
                )
                suppressMutabilityWarning(&request)
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "$.xgafv",
                    value: input.query._dollar__xgafv
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "access_token",
                    value: input.query.accessToken
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "alt",
                    value: input.query.alt
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "callback",
                    value: input.query.callback
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "fields",
                    value: input.query.fields
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "key",
                    value: input.query.key
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "oauth_token",
                    value: input.query.oauthToken
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "prettyPrint",
                    value: input.query.prettyPrint
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "quotaUser",
                    value: input.query.quotaUser
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "upload_protocol",
                    value: input.query.uploadProtocol
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "uploadType",
                    value: input.query.uploadType
                )
                converter.setAcceptHeader(
                    in: &request.headerFields,
                    contentTypes: input.headers.accept
                )
                let body: OpenAPIRuntime.HTTPBody?
                switch input.body {
                case .none:
                    body = nil
                case let .json(value):
                    body = try converter.setOptionalRequestBodyAsJSON(
                        value,
                        headerFields: &request.headerFields,
                        contentType: "application/json; charset=utf-8"
                    )
                }
                return (request, body)
            },
            deserializer: { response, responseBody in
                switch response.status.code {
                case 200:
                    let contentType = converter.extractContentTypeIfPresent(in: response.headerFields)
                    let body: Operations.Sheets_spreadsheets_values_batchClear.Output.Ok.Body
                    let chosenContentType = try converter.bestContentType(
                        received: contentType,
                        options: [
                            "application/json"
                        ]
                    )
                    switch chosenContentType {
                    case "application/json":
                        body = try await converter.getResponseBodyAsJSON(
                            Components.Schemas.BatchClearValuesResponse.self,
                            from: responseBody,
                            transforming: { value in
                                .json(value)
                            }
                        )
                    default:
                        preconditionFailure("bestContentType chose an invalid content type.")
                    }
                    return .ok(.init(body: body))
                default:
                    return .undocumented(
                        statusCode: response.status.code,
                        .init(
                            headerFields: response.headerFields,
                            body: responseBody
                        )
                    )
                }
            }
        )
    }
    /// Clears one or more ranges of values from a spreadsheet. The caller must specify the spreadsheet ID and one or more DataFilters. Ranges matching any of the specified data filters will be cleared. Only values are cleared -- all other properties of the cell (such as formatting, data validation, etc..) are kept.
    ///
    /// - Remark: HTTP `POST /v4/spreadsheets/{spreadsheetId}/values:batchClearByDataFilter`.
    /// - Remark: Generated from `#/paths//v4/spreadsheets/{spreadsheetId}/values:batchClearByDataFilter/post(sheets.spreadsheets.values.batchClearByDataFilter)`.
    public func sheets_spreadsheets_values_batchClearByDataFilter(_ input: Operations.Sheets_spreadsheets_values_batchClearByDataFilter.Input) async throws -> Operations.Sheets_spreadsheets_values_batchClearByDataFilter.Output {
        try await client.send(
            input: input,
            forOperation: Operations.Sheets_spreadsheets_values_batchClearByDataFilter.id,
            serializer: { input in
                let path = try converter.renderedPath(
                    template: "/v4/spreadsheets/{}/values:batchClearByDataFilter",
                    parameters: [
                        input.path.spreadsheetId
                    ]
                )
                var request: HTTPTypes.HTTPRequest = .init(
                    soar_path: path,
                    method: .post
                )
                suppressMutabilityWarning(&request)
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "$.xgafv",
                    value: input.query._dollar__xgafv
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "access_token",
                    value: input.query.accessToken
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "alt",
                    value: input.query.alt
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "callback",
                    value: input.query.callback
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "fields",
                    value: input.query.fields
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "key",
                    value: input.query.key
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "oauth_token",
                    value: input.query.oauthToken
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "prettyPrint",
                    value: input.query.prettyPrint
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "quotaUser",
                    value: input.query.quotaUser
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "upload_protocol",
                    value: input.query.uploadProtocol
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "uploadType",
                    value: input.query.uploadType
                )
                converter.setAcceptHeader(
                    in: &request.headerFields,
                    contentTypes: input.headers.accept
                )
                let body: OpenAPIRuntime.HTTPBody?
                switch input.body {
                case .none:
                    body = nil
                case let .json(value):
                    body = try converter.setOptionalRequestBodyAsJSON(
                        value,
                        headerFields: &request.headerFields,
                        contentType: "application/json; charset=utf-8"
                    )
                }
                return (request, body)
            },
            deserializer: { response, responseBody in
                switch response.status.code {
                case 200:
                    let contentType = converter.extractContentTypeIfPresent(in: response.headerFields)
                    let body: Operations.Sheets_spreadsheets_values_batchClearByDataFilter.Output.Ok.Body
                    let chosenContentType = try converter.bestContentType(
                        received: contentType,
                        options: [
                            "application/json"
                        ]
                    )
                    switch chosenContentType {
                    case "application/json":
                        body = try await converter.getResponseBodyAsJSON(
                            Components.Schemas.BatchClearValuesByDataFilterResponse.self,
                            from: responseBody,
                            transforming: { value in
                                .json(value)
                            }
                        )
                    default:
                        preconditionFailure("bestContentType chose an invalid content type.")
                    }
                    return .ok(.init(body: body))
                default:
                    return .undocumented(
                        statusCode: response.status.code,
                        .init(
                            headerFields: response.headerFields,
                            body: responseBody
                        )
                    )
                }
            }
        )
    }
    /// Returns one or more ranges of values from a spreadsheet. The caller must specify the spreadsheet ID and one or more ranges.
    ///
    /// - Remark: HTTP `GET /v4/spreadsheets/{spreadsheetId}/values:batchGet`.
    /// - Remark: Generated from `#/paths//v4/spreadsheets/{spreadsheetId}/values:batchGet/get(sheets.spreadsheets.values.batchGet)`.
    public func sheets_spreadsheets_values_batchGet(_ input: Operations.Sheets_spreadsheets_values_batchGet.Input) async throws -> Operations.Sheets_spreadsheets_values_batchGet.Output {
        try await client.send(
            input: input,
            forOperation: Operations.Sheets_spreadsheets_values_batchGet.id,
            serializer: { input in
                let path = try converter.renderedPath(
                    template: "/v4/spreadsheets/{}/values:batchGet",
                    parameters: [
                        input.path.spreadsheetId
                    ]
                )
                var request: HTTPTypes.HTTPRequest = .init(
                    soar_path: path,
                    method: .get
                )
                suppressMutabilityWarning(&request)
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "$.xgafv",
                    value: input.query._dollar__xgafv
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "access_token",
                    value: input.query.accessToken
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "alt",
                    value: input.query.alt
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "callback",
                    value: input.query.callback
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "fields",
                    value: input.query.fields
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "key",
                    value: input.query.key
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "oauth_token",
                    value: input.query.oauthToken
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "prettyPrint",
                    value: input.query.prettyPrint
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "quotaUser",
                    value: input.query.quotaUser
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "upload_protocol",
                    value: input.query.uploadProtocol
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "uploadType",
                    value: input.query.uploadType
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "dateTimeRenderOption",
                    value: input.query.dateTimeRenderOption
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "majorDimension",
                    value: input.query.majorDimension
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "ranges",
                    value: input.query.ranges
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "valueRenderOption",
                    value: input.query.valueRenderOption
                )
                converter.setAcceptHeader(
                    in: &request.headerFields,
                    contentTypes: input.headers.accept
                )
                return (request, nil)
            },
            deserializer: { response, responseBody in
                switch response.status.code {
                case 200:
                    let contentType = converter.extractContentTypeIfPresent(in: response.headerFields)
                    let body: Operations.Sheets_spreadsheets_values_batchGet.Output.Ok.Body
                    let chosenContentType = try converter.bestContentType(
                        received: contentType,
                        options: [
                            "application/json"
                        ]
                    )
                    switch chosenContentType {
                    case "application/json":
                        body = try await converter.getResponseBodyAsJSON(
                            Components.Schemas.BatchGetValuesResponse.self,
                            from: responseBody,
                            transforming: { value in
                                .json(value)
                            }
                        )
                    default:
                        preconditionFailure("bestContentType chose an invalid content type.")
                    }
                    return .ok(.init(body: body))
                default:
                    return .undocumented(
                        statusCode: response.status.code,
                        .init(
                            headerFields: response.headerFields,
                            body: responseBody
                        )
                    )
                }
            }
        )
    }
    /// Returns one or more ranges of values that match the specified data filters. The caller must specify the spreadsheet ID and one or more DataFilters. Ranges that match any of the data filters in the request will be returned.
    ///
    /// - Remark: HTTP `POST /v4/spreadsheets/{spreadsheetId}/values:batchGetByDataFilter`.
    /// - Remark: Generated from `#/paths//v4/spreadsheets/{spreadsheetId}/values:batchGetByDataFilter/post(sheets.spreadsheets.values.batchGetByDataFilter)`.
    public func sheets_spreadsheets_values_batchGetByDataFilter(_ input: Operations.Sheets_spreadsheets_values_batchGetByDataFilter.Input) async throws -> Operations.Sheets_spreadsheets_values_batchGetByDataFilter.Output {
        try await client.send(
            input: input,
            forOperation: Operations.Sheets_spreadsheets_values_batchGetByDataFilter.id,
            serializer: { input in
                let path = try converter.renderedPath(
                    template: "/v4/spreadsheets/{}/values:batchGetByDataFilter",
                    parameters: [
                        input.path.spreadsheetId
                    ]
                )
                var request: HTTPTypes.HTTPRequest = .init(
                    soar_path: path,
                    method: .post
                )
                suppressMutabilityWarning(&request)
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "$.xgafv",
                    value: input.query._dollar__xgafv
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "access_token",
                    value: input.query.accessToken
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "alt",
                    value: input.query.alt
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "callback",
                    value: input.query.callback
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "fields",
                    value: input.query.fields
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "key",
                    value: input.query.key
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "oauth_token",
                    value: input.query.oauthToken
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "prettyPrint",
                    value: input.query.prettyPrint
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "quotaUser",
                    value: input.query.quotaUser
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "upload_protocol",
                    value: input.query.uploadProtocol
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "uploadType",
                    value: input.query.uploadType
                )
                converter.setAcceptHeader(
                    in: &request.headerFields,
                    contentTypes: input.headers.accept
                )
                let body: OpenAPIRuntime.HTTPBody?
                switch input.body {
                case .none:
                    body = nil
                case let .json(value):
                    body = try converter.setOptionalRequestBodyAsJSON(
                        value,
                        headerFields: &request.headerFields,
                        contentType: "application/json; charset=utf-8"
                    )
                }
                return (request, body)
            },
            deserializer: { response, responseBody in
                switch response.status.code {
                case 200:
                    let contentType = converter.extractContentTypeIfPresent(in: response.headerFields)
                    let body: Operations.Sheets_spreadsheets_values_batchGetByDataFilter.Output.Ok.Body
                    let chosenContentType = try converter.bestContentType(
                        received: contentType,
                        options: [
                            "application/json"
                        ]
                    )
                    switch chosenContentType {
                    case "application/json":
                        body = try await converter.getResponseBodyAsJSON(
                            Components.Schemas.BatchGetValuesByDataFilterResponse.self,
                            from: responseBody,
                            transforming: { value in
                                .json(value)
                            }
                        )
                    default:
                        preconditionFailure("bestContentType chose an invalid content type.")
                    }
                    return .ok(.init(body: body))
                default:
                    return .undocumented(
                        statusCode: response.status.code,
                        .init(
                            headerFields: response.headerFields,
                            body: responseBody
                        )
                    )
                }
            }
        )
    }
    /// Sets values in one or more ranges of a spreadsheet. The caller must specify the spreadsheet ID, a valueInputOption, and one or more ValueRanges.
    ///
    /// - Remark: HTTP `POST /v4/spreadsheets/{spreadsheetId}/values:batchUpdate`.
    /// - Remark: Generated from `#/paths//v4/spreadsheets/{spreadsheetId}/values:batchUpdate/post(sheets.spreadsheets.values.batchUpdate)`.
    public func sheets_spreadsheets_values_batchUpdate(_ input: Operations.Sheets_spreadsheets_values_batchUpdate.Input) async throws -> Operations.Sheets_spreadsheets_values_batchUpdate.Output {
        try await client.send(
            input: input,
            forOperation: Operations.Sheets_spreadsheets_values_batchUpdate.id,
            serializer: { input in
                let path = try converter.renderedPath(
                    template: "/v4/spreadsheets/{}/values:batchUpdate",
                    parameters: [
                        input.path.spreadsheetId
                    ]
                )
                var request: HTTPTypes.HTTPRequest = .init(
                    soar_path: path,
                    method: .post
                )
                suppressMutabilityWarning(&request)
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "$.xgafv",
                    value: input.query._dollar__xgafv
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "access_token",
                    value: input.query.accessToken
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "alt",
                    value: input.query.alt
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "callback",
                    value: input.query.callback
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "fields",
                    value: input.query.fields
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "key",
                    value: input.query.key
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "oauth_token",
                    value: input.query.oauthToken
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "prettyPrint",
                    value: input.query.prettyPrint
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "quotaUser",
                    value: input.query.quotaUser
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "upload_protocol",
                    value: input.query.uploadProtocol
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "uploadType",
                    value: input.query.uploadType
                )
                converter.setAcceptHeader(
                    in: &request.headerFields,
                    contentTypes: input.headers.accept
                )
                let body: OpenAPIRuntime.HTTPBody?
                switch input.body {
                case .none:
                    body = nil
                case let .json(value):
                    body = try converter.setOptionalRequestBodyAsJSON(
                        value,
                        headerFields: &request.headerFields,
                        contentType: "application/json; charset=utf-8"
                    )
                }
                return (request, body)
            },
            deserializer: { response, responseBody in
                switch response.status.code {
                case 200:
                    let contentType = converter.extractContentTypeIfPresent(in: response.headerFields)
                    let body: Operations.Sheets_spreadsheets_values_batchUpdate.Output.Ok.Body
                    let chosenContentType = try converter.bestContentType(
                        received: contentType,
                        options: [
                            "application/json"
                        ]
                    )
                    switch chosenContentType {
                    case "application/json":
                        body = try await converter.getResponseBodyAsJSON(
                            Components.Schemas.BatchUpdateValuesResponse.self,
                            from: responseBody,
                            transforming: { value in
                                .json(value)
                            }
                        )
                    default:
                        preconditionFailure("bestContentType chose an invalid content type.")
                    }
                    return .ok(.init(body: body))
                default:
                    return .undocumented(
                        statusCode: response.status.code,
                        .init(
                            headerFields: response.headerFields,
                            body: responseBody
                        )
                    )
                }
            }
        )
    }
    /// Sets values in one or more ranges of a spreadsheet. The caller must specify the spreadsheet ID, a valueInputOption, and one or more DataFilterValueRanges.
    ///
    /// - Remark: HTTP `POST /v4/spreadsheets/{spreadsheetId}/values:batchUpdateByDataFilter`.
    /// - Remark: Generated from `#/paths//v4/spreadsheets/{spreadsheetId}/values:batchUpdateByDataFilter/post(sheets.spreadsheets.values.batchUpdateByDataFilter)`.
    public func sheets_spreadsheets_values_batchUpdateByDataFilter(_ input: Operations.Sheets_spreadsheets_values_batchUpdateByDataFilter.Input) async throws -> Operations.Sheets_spreadsheets_values_batchUpdateByDataFilter.Output {
        try await client.send(
            input: input,
            forOperation: Operations.Sheets_spreadsheets_values_batchUpdateByDataFilter.id,
            serializer: { input in
                let path = try converter.renderedPath(
                    template: "/v4/spreadsheets/{}/values:batchUpdateByDataFilter",
                    parameters: [
                        input.path.spreadsheetId
                    ]
                )
                var request: HTTPTypes.HTTPRequest = .init(
                    soar_path: path,
                    method: .post
                )
                suppressMutabilityWarning(&request)
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "$.xgafv",
                    value: input.query._dollar__xgafv
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "access_token",
                    value: input.query.accessToken
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "alt",
                    value: input.query.alt
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "callback",
                    value: input.query.callback
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "fields",
                    value: input.query.fields
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "key",
                    value: input.query.key
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "oauth_token",
                    value: input.query.oauthToken
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "prettyPrint",
                    value: input.query.prettyPrint
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "quotaUser",
                    value: input.query.quotaUser
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "upload_protocol",
                    value: input.query.uploadProtocol
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "uploadType",
                    value: input.query.uploadType
                )
                converter.setAcceptHeader(
                    in: &request.headerFields,
                    contentTypes: input.headers.accept
                )
                let body: OpenAPIRuntime.HTTPBody?
                switch input.body {
                case .none:
                    body = nil
                case let .json(value):
                    body = try converter.setOptionalRequestBodyAsJSON(
                        value,
                        headerFields: &request.headerFields,
                        contentType: "application/json; charset=utf-8"
                    )
                }
                return (request, body)
            },
            deserializer: { response, responseBody in
                switch response.status.code {
                case 200:
                    let contentType = converter.extractContentTypeIfPresent(in: response.headerFields)
                    let body: Operations.Sheets_spreadsheets_values_batchUpdateByDataFilter.Output.Ok.Body
                    let chosenContentType = try converter.bestContentType(
                        received: contentType,
                        options: [
                            "application/json"
                        ]
                    )
                    switch chosenContentType {
                    case "application/json":
                        body = try await converter.getResponseBodyAsJSON(
                            Components.Schemas.BatchUpdateValuesByDataFilterResponse.self,
                            from: responseBody,
                            transforming: { value in
                                .json(value)
                            }
                        )
                    default:
                        preconditionFailure("bestContentType chose an invalid content type.")
                    }
                    return .ok(.init(body: body))
                default:
                    return .undocumented(
                        statusCode: response.status.code,
                        .init(
                            headerFields: response.headerFields,
                            body: responseBody
                        )
                    )
                }
            }
        )
    }
    /// Applies one or more updates to the spreadsheet. Each request is validated before being applied. If any request is not valid then the entire request will fail and nothing will be applied. Some requests have replies to give you some information about how they are applied. The replies will mirror the requests. For example, if you applied 4 updates and the 3rd one had a reply, then the response will have 2 empty replies, the actual reply, and another empty reply, in that order. Due to the collaborative nature of spreadsheets, it is not guaranteed that the spreadsheet will reflect exactly your changes after this completes, however it is guaranteed that the updates in the request will be applied together atomically. Your changes may be altered with respect to collaborator changes. If there are no collaborators, the spreadsheet should reflect your changes.
    ///
    /// - Remark: HTTP `POST /v4/spreadsheets/{spreadsheetId}:batchUpdate`.
    /// - Remark: Generated from `#/paths//v4/spreadsheets/{spreadsheetId}:batchUpdate/post(sheets.spreadsheets.batchUpdate)`.
    public func sheets_spreadsheets_batchUpdate(_ input: Operations.Sheets_spreadsheets_batchUpdate.Input) async throws -> Operations.Sheets_spreadsheets_batchUpdate.Output {
        try await client.send(
            input: input,
            forOperation: Operations.Sheets_spreadsheets_batchUpdate.id,
            serializer: { input in
                let path = try converter.renderedPath(
                    template: "/v4/spreadsheets/{}:batchUpdate",
                    parameters: [
                        input.path.spreadsheetId
                    ]
                )
                var request: HTTPTypes.HTTPRequest = .init(
                    soar_path: path,
                    method: .post
                )
                suppressMutabilityWarning(&request)
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "$.xgafv",
                    value: input.query._dollar__xgafv
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "access_token",
                    value: input.query.accessToken
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "alt",
                    value: input.query.alt
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "callback",
                    value: input.query.callback
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "fields",
                    value: input.query.fields
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "key",
                    value: input.query.key
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "oauth_token",
                    value: input.query.oauthToken
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "prettyPrint",
                    value: input.query.prettyPrint
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "quotaUser",
                    value: input.query.quotaUser
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "upload_protocol",
                    value: input.query.uploadProtocol
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "uploadType",
                    value: input.query.uploadType
                )
                converter.setAcceptHeader(
                    in: &request.headerFields,
                    contentTypes: input.headers.accept
                )
                let body: OpenAPIRuntime.HTTPBody?
                switch input.body {
                case .none:
                    body = nil
                case let .json(value):
                    body = try converter.setOptionalRequestBodyAsJSON(
                        value,
                        headerFields: &request.headerFields,
                        contentType: "application/json; charset=utf-8"
                    )
                }
                return (request, body)
            },
            deserializer: { response, responseBody in
                switch response.status.code {
                case 200:
                    let contentType = converter.extractContentTypeIfPresent(in: response.headerFields)
                    let body: Operations.Sheets_spreadsheets_batchUpdate.Output.Ok.Body
                    let chosenContentType = try converter.bestContentType(
                        received: contentType,
                        options: [
                            "application/json"
                        ]
                    )
                    switch chosenContentType {
                    case "application/json":
                        body = try await converter.getResponseBodyAsJSON(
                            Components.Schemas.BatchUpdateSpreadsheetResponse.self,
                            from: responseBody,
                            transforming: { value in
                                .json(value)
                            }
                        )
                    default:
                        preconditionFailure("bestContentType chose an invalid content type.")
                    }
                    return .ok(.init(body: body))
                default:
                    return .undocumented(
                        statusCode: response.status.code,
                        .init(
                            headerFields: response.headerFields,
                            body: responseBody
                        )
                    )
                }
            }
        )
    }
    /// Returns the spreadsheet at the given ID. The caller must specify the spreadsheet ID. This method differs from GetSpreadsheet in that it allows selecting which subsets of spreadsheet data to return by specifying a dataFilters parameter. Multiple DataFilters can be specified. Specifying one or more data filters returns the portions of the spreadsheet that intersect ranges matched by any of the filters. By default, data within grids is not returned. You can include grid data one of 2 ways: * Specify a [field mask](https://developers.google.com/sheets/api/guides/field-masks) listing your desired fields using the `fields` URL parameter in HTTP * Set the includeGridData parameter to true. If a field mask is set, the `includeGridData` parameter is ignored For large spreadsheets, as a best practice, retrieve only the specific spreadsheet fields that you want.
    ///
    /// - Remark: HTTP `POST /v4/spreadsheets/{spreadsheetId}:getByDataFilter`.
    /// - Remark: Generated from `#/paths//v4/spreadsheets/{spreadsheetId}:getByDataFilter/post(sheets.spreadsheets.getByDataFilter)`.
    public func sheets_spreadsheets_getByDataFilter(_ input: Operations.Sheets_spreadsheets_getByDataFilter.Input) async throws -> Operations.Sheets_spreadsheets_getByDataFilter.Output {
        try await client.send(
            input: input,
            forOperation: Operations.Sheets_spreadsheets_getByDataFilter.id,
            serializer: { input in
                let path = try converter.renderedPath(
                    template: "/v4/spreadsheets/{}:getByDataFilter",
                    parameters: [
                        input.path.spreadsheetId
                    ]
                )
                var request: HTTPTypes.HTTPRequest = .init(
                    soar_path: path,
                    method: .post
                )
                suppressMutabilityWarning(&request)
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "$.xgafv",
                    value: input.query._dollar__xgafv
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "access_token",
                    value: input.query.accessToken
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "alt",
                    value: input.query.alt
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "callback",
                    value: input.query.callback
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "fields",
                    value: input.query.fields
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "key",
                    value: input.query.key
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "oauth_token",
                    value: input.query.oauthToken
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "prettyPrint",
                    value: input.query.prettyPrint
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "quotaUser",
                    value: input.query.quotaUser
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "upload_protocol",
                    value: input.query.uploadProtocol
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "uploadType",
                    value: input.query.uploadType
                )
                converter.setAcceptHeader(
                    in: &request.headerFields,
                    contentTypes: input.headers.accept
                )
                let body: OpenAPIRuntime.HTTPBody?
                switch input.body {
                case .none:
                    body = nil
                case let .json(value):
                    body = try converter.setOptionalRequestBodyAsJSON(
                        value,
                        headerFields: &request.headerFields,
                        contentType: "application/json; charset=utf-8"
                    )
                }
                return (request, body)
            },
            deserializer: { response, responseBody in
                switch response.status.code {
                case 200:
                    let contentType = converter.extractContentTypeIfPresent(in: response.headerFields)
                    let body: Operations.Sheets_spreadsheets_getByDataFilter.Output.Ok.Body
                    let chosenContentType = try converter.bestContentType(
                        received: contentType,
                        options: [
                            "application/json"
                        ]
                    )
                    switch chosenContentType {
                    case "application/json":
                        body = try await converter.getResponseBodyAsJSON(
                            Components.Schemas.Spreadsheet.self,
                            from: responseBody,
                            transforming: { value in
                                .json(value)
                            }
                        )
                    default:
                        preconditionFailure("bestContentType chose an invalid content type.")
                    }
                    return .ok(.init(body: body))
                default:
                    return .undocumented(
                        statusCode: response.status.code,
                        .init(
                            headerFields: response.headerFields,
                            body: responseBody
                        )
                    )
                }
            }
        )
    }
}
