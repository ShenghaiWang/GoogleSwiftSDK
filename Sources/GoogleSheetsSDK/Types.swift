// Generated by swift-openapi-generator, do not modify.
@_spi(Generated) import OpenAPIRuntime
#if os(Linux)
@preconcurrency import struct Foundation.URL
@preconcurrency import struct Foundation.Data
@preconcurrency import struct Foundation.Date
#else
import struct Foundation.URL
import struct Foundation.Data
import struct Foundation.Date
#endif
/// A type that performs HTTP operations defined by the OpenAPI document.
public protocol APIProtocol: Sendable {
    /// Creates a spreadsheet, returning the newly created spreadsheet.
    ///
    /// - Remark: HTTP `POST /v4/spreadsheets`.
    /// - Remark: Generated from `#/paths//v4/spreadsheets/post(sheets.spreadsheets.create)`.
    func sheets_spreadsheets_create(_ input: Operations.Sheets_spreadsheets_create.Input) async throws -> Operations.Sheets_spreadsheets_create.Output
    /// Returns the spreadsheet at the given ID. The caller must specify the spreadsheet ID. By default, data within grids is not returned. You can include grid data in one of 2 ways: * Specify a [field mask](https://developers.google.com/sheets/api/guides/field-masks) listing your desired fields using the `fields` URL parameter in HTTP * Set the includeGridData URL parameter to true. If a field mask is set, the `includeGridData` parameter is ignored For large spreadsheets, as a best practice, retrieve only the specific spreadsheet fields that you want. To retrieve only subsets of spreadsheet data, use the ranges URL parameter. Ranges are specified using [A1 notation](/sheets/api/guides/concepts#cell). You can define a single cell (for example, `A1`) or multiple cells (for example, `A1:D5`). You can also get cells from other sheets within the same spreadsheet (for example, `Sheet2!A1:C4`) or retrieve multiple ranges at once (for example, `?ranges=A1:D5&ranges=Sheet2!A1:C4`). Limiting the range returns only the portions of the spreadsheet that intersect the requested ranges.
    ///
    /// - Remark: HTTP `GET /v4/spreadsheets/{spreadsheetId}`.
    /// - Remark: Generated from `#/paths//v4/spreadsheets/{spreadsheetId}/get(sheets.spreadsheets.get)`.
    func sheets_spreadsheets_get(_ input: Operations.Sheets_spreadsheets_get.Input) async throws -> Operations.Sheets_spreadsheets_get.Output
    /// Returns the developer metadata with the specified ID. The caller must specify the spreadsheet ID and the developer metadata's unique metadataId.
    ///
    /// - Remark: HTTP `GET /v4/spreadsheets/{spreadsheetId}/developerMetadata/{metadataId}`.
    /// - Remark: Generated from `#/paths//v4/spreadsheets/{spreadsheetId}/developerMetadata/{metadataId}/get(sheets.spreadsheets.developerMetadata.get)`.
    func sheets_spreadsheets_developerMetadata_get(_ input: Operations.Sheets_spreadsheets_developerMetadata_get.Input) async throws -> Operations.Sheets_spreadsheets_developerMetadata_get.Output
    /// Returns all developer metadata matching the specified DataFilter. If the provided DataFilter represents a DeveloperMetadataLookup object, this will return all DeveloperMetadata entries selected by it. If the DataFilter represents a location in a spreadsheet, this will return all developer metadata associated with locations intersecting that region.
    ///
    /// - Remark: HTTP `POST /v4/spreadsheets/{spreadsheetId}/developerMetadata:search`.
    /// - Remark: Generated from `#/paths//v4/spreadsheets/{spreadsheetId}/developerMetadata:search/post(sheets.spreadsheets.developerMetadata.search)`.
    func sheets_spreadsheets_developerMetadata_search(_ input: Operations.Sheets_spreadsheets_developerMetadata_search.Input) async throws -> Operations.Sheets_spreadsheets_developerMetadata_search.Output
    /// Copies a single sheet from a spreadsheet to another spreadsheet. Returns the properties of the newly created sheet.
    ///
    /// - Remark: HTTP `POST /v4/spreadsheets/{spreadsheetId}/sheets/{sheetId}:copyTo`.
    /// - Remark: Generated from `#/paths//v4/spreadsheets/{spreadsheetId}/sheets/{sheetId}:copyTo/post(sheets.spreadsheets.sheets.copyTo)`.
    func sheets_spreadsheets_sheets_copyTo(_ input: Operations.Sheets_spreadsheets_sheets_copyTo.Input) async throws -> Operations.Sheets_spreadsheets_sheets_copyTo.Output
    /// Returns a range of values from a spreadsheet. The caller must specify the spreadsheet ID and a range.
    ///
    /// - Remark: HTTP `GET /v4/spreadsheets/{spreadsheetId}/values/{range}`.
    /// - Remark: Generated from `#/paths//v4/spreadsheets/{spreadsheetId}/values/{range}/get(sheets.spreadsheets.values.get)`.
    func sheets_spreadsheets_values_get(_ input: Operations.Sheets_spreadsheets_values_get.Input) async throws -> Operations.Sheets_spreadsheets_values_get.Output
    /// Sets values in a range of a spreadsheet. The caller must specify the spreadsheet ID, range, and a valueInputOption.
    ///
    /// - Remark: HTTP `PUT /v4/spreadsheets/{spreadsheetId}/values/{range}`.
    /// - Remark: Generated from `#/paths//v4/spreadsheets/{spreadsheetId}/values/{range}/put(sheets.spreadsheets.values.update)`.
    func sheets_spreadsheets_values_update(_ input: Operations.Sheets_spreadsheets_values_update.Input) async throws -> Operations.Sheets_spreadsheets_values_update.Output
    /// Appends values to a spreadsheet. The input range is used to search for existing data and find a "table" within that range. Values will be appended to the next row of the table, starting with the first column of the table. See the [guide](/sheets/api/guides/values#appending_values) and [sample code](/sheets/api/samples/writing#append_values) for specific details of how tables are detected and data is appended. The caller must specify the spreadsheet ID, range, and a valueInputOption. The `valueInputOption` only controls how the input data will be added to the sheet (column-wise or row-wise), it does not influence what cell the data starts being written to.
    ///
    /// - Remark: HTTP `POST /v4/spreadsheets/{spreadsheetId}/values/{range}:append`.
    /// - Remark: Generated from `#/paths//v4/spreadsheets/{spreadsheetId}/values/{range}:append/post(sheets.spreadsheets.values.append)`.
    func sheets_spreadsheets_values_append(_ input: Operations.Sheets_spreadsheets_values_append.Input) async throws -> Operations.Sheets_spreadsheets_values_append.Output
    /// Clears values from a spreadsheet. The caller must specify the spreadsheet ID and range. Only values are cleared -- all other properties of the cell (such as formatting, data validation, etc..) are kept.
    ///
    /// - Remark: HTTP `POST /v4/spreadsheets/{spreadsheetId}/values/{range}:clear`.
    /// - Remark: Generated from `#/paths//v4/spreadsheets/{spreadsheetId}/values/{range}:clear/post(sheets.spreadsheets.values.clear)`.
    func sheets_spreadsheets_values_clear(_ input: Operations.Sheets_spreadsheets_values_clear.Input) async throws -> Operations.Sheets_spreadsheets_values_clear.Output
    /// Clears one or more ranges of values from a spreadsheet. The caller must specify the spreadsheet ID and one or more ranges. Only values are cleared -- all other properties of the cell (such as formatting and data validation) are kept.
    ///
    /// - Remark: HTTP `POST /v4/spreadsheets/{spreadsheetId}/values:batchClear`.
    /// - Remark: Generated from `#/paths//v4/spreadsheets/{spreadsheetId}/values:batchClear/post(sheets.spreadsheets.values.batchClear)`.
    func sheets_spreadsheets_values_batchClear(_ input: Operations.Sheets_spreadsheets_values_batchClear.Input) async throws -> Operations.Sheets_spreadsheets_values_batchClear.Output
    /// Clears one or more ranges of values from a spreadsheet. The caller must specify the spreadsheet ID and one or more DataFilters. Ranges matching any of the specified data filters will be cleared. Only values are cleared -- all other properties of the cell (such as formatting, data validation, etc..) are kept.
    ///
    /// - Remark: HTTP `POST /v4/spreadsheets/{spreadsheetId}/values:batchClearByDataFilter`.
    /// - Remark: Generated from `#/paths//v4/spreadsheets/{spreadsheetId}/values:batchClearByDataFilter/post(sheets.spreadsheets.values.batchClearByDataFilter)`.
    func sheets_spreadsheets_values_batchClearByDataFilter(_ input: Operations.Sheets_spreadsheets_values_batchClearByDataFilter.Input) async throws -> Operations.Sheets_spreadsheets_values_batchClearByDataFilter.Output
    /// Returns one or more ranges of values from a spreadsheet. The caller must specify the spreadsheet ID and one or more ranges.
    ///
    /// - Remark: HTTP `GET /v4/spreadsheets/{spreadsheetId}/values:batchGet`.
    /// - Remark: Generated from `#/paths//v4/spreadsheets/{spreadsheetId}/values:batchGet/get(sheets.spreadsheets.values.batchGet)`.
    func sheets_spreadsheets_values_batchGet(_ input: Operations.Sheets_spreadsheets_values_batchGet.Input) async throws -> Operations.Sheets_spreadsheets_values_batchGet.Output
    /// Returns one or more ranges of values that match the specified data filters. The caller must specify the spreadsheet ID and one or more DataFilters. Ranges that match any of the data filters in the request will be returned.
    ///
    /// - Remark: HTTP `POST /v4/spreadsheets/{spreadsheetId}/values:batchGetByDataFilter`.
    /// - Remark: Generated from `#/paths//v4/spreadsheets/{spreadsheetId}/values:batchGetByDataFilter/post(sheets.spreadsheets.values.batchGetByDataFilter)`.
    func sheets_spreadsheets_values_batchGetByDataFilter(_ input: Operations.Sheets_spreadsheets_values_batchGetByDataFilter.Input) async throws -> Operations.Sheets_spreadsheets_values_batchGetByDataFilter.Output
    /// Sets values in one or more ranges of a spreadsheet. The caller must specify the spreadsheet ID, a valueInputOption, and one or more ValueRanges.
    ///
    /// - Remark: HTTP `POST /v4/spreadsheets/{spreadsheetId}/values:batchUpdate`.
    /// - Remark: Generated from `#/paths//v4/spreadsheets/{spreadsheetId}/values:batchUpdate/post(sheets.spreadsheets.values.batchUpdate)`.
    func sheets_spreadsheets_values_batchUpdate(_ input: Operations.Sheets_spreadsheets_values_batchUpdate.Input) async throws -> Operations.Sheets_spreadsheets_values_batchUpdate.Output
    /// Sets values in one or more ranges of a spreadsheet. The caller must specify the spreadsheet ID, a valueInputOption, and one or more DataFilterValueRanges.
    ///
    /// - Remark: HTTP `POST /v4/spreadsheets/{spreadsheetId}/values:batchUpdateByDataFilter`.
    /// - Remark: Generated from `#/paths//v4/spreadsheets/{spreadsheetId}/values:batchUpdateByDataFilter/post(sheets.spreadsheets.values.batchUpdateByDataFilter)`.
    func sheets_spreadsheets_values_batchUpdateByDataFilter(_ input: Operations.Sheets_spreadsheets_values_batchUpdateByDataFilter.Input) async throws -> Operations.Sheets_spreadsheets_values_batchUpdateByDataFilter.Output
    /// Applies one or more updates to the spreadsheet. Each request is validated before being applied. If any request is not valid then the entire request will fail and nothing will be applied. Some requests have replies to give you some information about how they are applied. The replies will mirror the requests. For example, if you applied 4 updates and the 3rd one had a reply, then the response will have 2 empty replies, the actual reply, and another empty reply, in that order. Due to the collaborative nature of spreadsheets, it is not guaranteed that the spreadsheet will reflect exactly your changes after this completes, however it is guaranteed that the updates in the request will be applied together atomically. Your changes may be altered with respect to collaborator changes. If there are no collaborators, the spreadsheet should reflect your changes.
    ///
    /// - Remark: HTTP `POST /v4/spreadsheets/{spreadsheetId}:batchUpdate`.
    /// - Remark: Generated from `#/paths//v4/spreadsheets/{spreadsheetId}:batchUpdate/post(sheets.spreadsheets.batchUpdate)`.
    func sheets_spreadsheets_batchUpdate(_ input: Operations.Sheets_spreadsheets_batchUpdate.Input) async throws -> Operations.Sheets_spreadsheets_batchUpdate.Output
    /// Returns the spreadsheet at the given ID. The caller must specify the spreadsheet ID. This method differs from GetSpreadsheet in that it allows selecting which subsets of spreadsheet data to return by specifying a dataFilters parameter. Multiple DataFilters can be specified. Specifying one or more data filters returns the portions of the spreadsheet that intersect ranges matched by any of the filters. By default, data within grids is not returned. You can include grid data one of 2 ways: * Specify a [field mask](https://developers.google.com/sheets/api/guides/field-masks) listing your desired fields using the `fields` URL parameter in HTTP * Set the includeGridData parameter to true. If a field mask is set, the `includeGridData` parameter is ignored For large spreadsheets, as a best practice, retrieve only the specific spreadsheet fields that you want.
    ///
    /// - Remark: HTTP `POST /v4/spreadsheets/{spreadsheetId}:getByDataFilter`.
    /// - Remark: Generated from `#/paths//v4/spreadsheets/{spreadsheetId}:getByDataFilter/post(sheets.spreadsheets.getByDataFilter)`.
    func sheets_spreadsheets_getByDataFilter(_ input: Operations.Sheets_spreadsheets_getByDataFilter.Input) async throws -> Operations.Sheets_spreadsheets_getByDataFilter.Output
}

/// Convenience overloads for operation inputs.
extension APIProtocol {
    /// Creates a spreadsheet, returning the newly created spreadsheet.
    ///
    /// - Remark: HTTP `POST /v4/spreadsheets`.
    /// - Remark: Generated from `#/paths//v4/spreadsheets/post(sheets.spreadsheets.create)`.
    public func sheets_spreadsheets_create(
        query: Operations.Sheets_spreadsheets_create.Input.Query = .init(),
        headers: Operations.Sheets_spreadsheets_create.Input.Headers = .init(),
        body: Operations.Sheets_spreadsheets_create.Input.Body? = nil
    ) async throws -> Operations.Sheets_spreadsheets_create.Output {
        try await sheets_spreadsheets_create(Operations.Sheets_spreadsheets_create.Input(
            query: query,
            headers: headers,
            body: body
        ))
    }
    /// Returns the spreadsheet at the given ID. The caller must specify the spreadsheet ID. By default, data within grids is not returned. You can include grid data in one of 2 ways: * Specify a [field mask](https://developers.google.com/sheets/api/guides/field-masks) listing your desired fields using the `fields` URL parameter in HTTP * Set the includeGridData URL parameter to true. If a field mask is set, the `includeGridData` parameter is ignored For large spreadsheets, as a best practice, retrieve only the specific spreadsheet fields that you want. To retrieve only subsets of spreadsheet data, use the ranges URL parameter. Ranges are specified using [A1 notation](/sheets/api/guides/concepts#cell). You can define a single cell (for example, `A1`) or multiple cells (for example, `A1:D5`). You can also get cells from other sheets within the same spreadsheet (for example, `Sheet2!A1:C4`) or retrieve multiple ranges at once (for example, `?ranges=A1:D5&ranges=Sheet2!A1:C4`). Limiting the range returns only the portions of the spreadsheet that intersect the requested ranges.
    ///
    /// - Remark: HTTP `GET /v4/spreadsheets/{spreadsheetId}`.
    /// - Remark: Generated from `#/paths//v4/spreadsheets/{spreadsheetId}/get(sheets.spreadsheets.get)`.
    public func sheets_spreadsheets_get(
        path: Operations.Sheets_spreadsheets_get.Input.Path,
        query: Operations.Sheets_spreadsheets_get.Input.Query = .init(),
        headers: Operations.Sheets_spreadsheets_get.Input.Headers = .init()
    ) async throws -> Operations.Sheets_spreadsheets_get.Output {
        try await sheets_spreadsheets_get(Operations.Sheets_spreadsheets_get.Input(
            path: path,
            query: query,
            headers: headers
        ))
    }
    /// Returns the developer metadata with the specified ID. The caller must specify the spreadsheet ID and the developer metadata's unique metadataId.
    ///
    /// - Remark: HTTP `GET /v4/spreadsheets/{spreadsheetId}/developerMetadata/{metadataId}`.
    /// - Remark: Generated from `#/paths//v4/spreadsheets/{spreadsheetId}/developerMetadata/{metadataId}/get(sheets.spreadsheets.developerMetadata.get)`.
    public func sheets_spreadsheets_developerMetadata_get(
        path: Operations.Sheets_spreadsheets_developerMetadata_get.Input.Path,
        query: Operations.Sheets_spreadsheets_developerMetadata_get.Input.Query = .init(),
        headers: Operations.Sheets_spreadsheets_developerMetadata_get.Input.Headers = .init()
    ) async throws -> Operations.Sheets_spreadsheets_developerMetadata_get.Output {
        try await sheets_spreadsheets_developerMetadata_get(Operations.Sheets_spreadsheets_developerMetadata_get.Input(
            path: path,
            query: query,
            headers: headers
        ))
    }
    /// Returns all developer metadata matching the specified DataFilter. If the provided DataFilter represents a DeveloperMetadataLookup object, this will return all DeveloperMetadata entries selected by it. If the DataFilter represents a location in a spreadsheet, this will return all developer metadata associated with locations intersecting that region.
    ///
    /// - Remark: HTTP `POST /v4/spreadsheets/{spreadsheetId}/developerMetadata:search`.
    /// - Remark: Generated from `#/paths//v4/spreadsheets/{spreadsheetId}/developerMetadata:search/post(sheets.spreadsheets.developerMetadata.search)`.
    public func sheets_spreadsheets_developerMetadata_search(
        path: Operations.Sheets_spreadsheets_developerMetadata_search.Input.Path,
        query: Operations.Sheets_spreadsheets_developerMetadata_search.Input.Query = .init(),
        headers: Operations.Sheets_spreadsheets_developerMetadata_search.Input.Headers = .init(),
        body: Operations.Sheets_spreadsheets_developerMetadata_search.Input.Body? = nil
    ) async throws -> Operations.Sheets_spreadsheets_developerMetadata_search.Output {
        try await sheets_spreadsheets_developerMetadata_search(Operations.Sheets_spreadsheets_developerMetadata_search.Input(
            path: path,
            query: query,
            headers: headers,
            body: body
        ))
    }
    /// Copies a single sheet from a spreadsheet to another spreadsheet. Returns the properties of the newly created sheet.
    ///
    /// - Remark: HTTP `POST /v4/spreadsheets/{spreadsheetId}/sheets/{sheetId}:copyTo`.
    /// - Remark: Generated from `#/paths//v4/spreadsheets/{spreadsheetId}/sheets/{sheetId}:copyTo/post(sheets.spreadsheets.sheets.copyTo)`.
    public func sheets_spreadsheets_sheets_copyTo(
        path: Operations.Sheets_spreadsheets_sheets_copyTo.Input.Path,
        query: Operations.Sheets_spreadsheets_sheets_copyTo.Input.Query = .init(),
        headers: Operations.Sheets_spreadsheets_sheets_copyTo.Input.Headers = .init(),
        body: Operations.Sheets_spreadsheets_sheets_copyTo.Input.Body? = nil
    ) async throws -> Operations.Sheets_spreadsheets_sheets_copyTo.Output {
        try await sheets_spreadsheets_sheets_copyTo(Operations.Sheets_spreadsheets_sheets_copyTo.Input(
            path: path,
            query: query,
            headers: headers,
            body: body
        ))
    }
    /// Returns a range of values from a spreadsheet. The caller must specify the spreadsheet ID and a range.
    ///
    /// - Remark: HTTP `GET /v4/spreadsheets/{spreadsheetId}/values/{range}`.
    /// - Remark: Generated from `#/paths//v4/spreadsheets/{spreadsheetId}/values/{range}/get(sheets.spreadsheets.values.get)`.
    public func sheets_spreadsheets_values_get(
        path: Operations.Sheets_spreadsheets_values_get.Input.Path,
        query: Operations.Sheets_spreadsheets_values_get.Input.Query = .init(),
        headers: Operations.Sheets_spreadsheets_values_get.Input.Headers = .init()
    ) async throws -> Operations.Sheets_spreadsheets_values_get.Output {
        try await sheets_spreadsheets_values_get(Operations.Sheets_spreadsheets_values_get.Input(
            path: path,
            query: query,
            headers: headers
        ))
    }
    /// Sets values in a range of a spreadsheet. The caller must specify the spreadsheet ID, range, and a valueInputOption.
    ///
    /// - Remark: HTTP `PUT /v4/spreadsheets/{spreadsheetId}/values/{range}`.
    /// - Remark: Generated from `#/paths//v4/spreadsheets/{spreadsheetId}/values/{range}/put(sheets.spreadsheets.values.update)`.
    public func sheets_spreadsheets_values_update(
        path: Operations.Sheets_spreadsheets_values_update.Input.Path,
        query: Operations.Sheets_spreadsheets_values_update.Input.Query = .init(),
        headers: Operations.Sheets_spreadsheets_values_update.Input.Headers = .init(),
        body: Operations.Sheets_spreadsheets_values_update.Input.Body? = nil
    ) async throws -> Operations.Sheets_spreadsheets_values_update.Output {
        try await sheets_spreadsheets_values_update(Operations.Sheets_spreadsheets_values_update.Input(
            path: path,
            query: query,
            headers: headers,
            body: body
        ))
    }
    /// Appends values to a spreadsheet. The input range is used to search for existing data and find a "table" within that range. Values will be appended to the next row of the table, starting with the first column of the table. See the [guide](/sheets/api/guides/values#appending_values) and [sample code](/sheets/api/samples/writing#append_values) for specific details of how tables are detected and data is appended. The caller must specify the spreadsheet ID, range, and a valueInputOption. The `valueInputOption` only controls how the input data will be added to the sheet (column-wise or row-wise), it does not influence what cell the data starts being written to.
    ///
    /// - Remark: HTTP `POST /v4/spreadsheets/{spreadsheetId}/values/{range}:append`.
    /// - Remark: Generated from `#/paths//v4/spreadsheets/{spreadsheetId}/values/{range}:append/post(sheets.spreadsheets.values.append)`.
    public func sheets_spreadsheets_values_append(
        path: Operations.Sheets_spreadsheets_values_append.Input.Path,
        query: Operations.Sheets_spreadsheets_values_append.Input.Query = .init(),
        headers: Operations.Sheets_spreadsheets_values_append.Input.Headers = .init(),
        body: Operations.Sheets_spreadsheets_values_append.Input.Body? = nil
    ) async throws -> Operations.Sheets_spreadsheets_values_append.Output {
        try await sheets_spreadsheets_values_append(Operations.Sheets_spreadsheets_values_append.Input(
            path: path,
            query: query,
            headers: headers,
            body: body
        ))
    }
    /// Clears values from a spreadsheet. The caller must specify the spreadsheet ID and range. Only values are cleared -- all other properties of the cell (such as formatting, data validation, etc..) are kept.
    ///
    /// - Remark: HTTP `POST /v4/spreadsheets/{spreadsheetId}/values/{range}:clear`.
    /// - Remark: Generated from `#/paths//v4/spreadsheets/{spreadsheetId}/values/{range}:clear/post(sheets.spreadsheets.values.clear)`.
    public func sheets_spreadsheets_values_clear(
        path: Operations.Sheets_spreadsheets_values_clear.Input.Path,
        query: Operations.Sheets_spreadsheets_values_clear.Input.Query = .init(),
        headers: Operations.Sheets_spreadsheets_values_clear.Input.Headers = .init(),
        body: Operations.Sheets_spreadsheets_values_clear.Input.Body? = nil
    ) async throws -> Operations.Sheets_spreadsheets_values_clear.Output {
        try await sheets_spreadsheets_values_clear(Operations.Sheets_spreadsheets_values_clear.Input(
            path: path,
            query: query,
            headers: headers,
            body: body
        ))
    }
    /// Clears one or more ranges of values from a spreadsheet. The caller must specify the spreadsheet ID and one or more ranges. Only values are cleared -- all other properties of the cell (such as formatting and data validation) are kept.
    ///
    /// - Remark: HTTP `POST /v4/spreadsheets/{spreadsheetId}/values:batchClear`.
    /// - Remark: Generated from `#/paths//v4/spreadsheets/{spreadsheetId}/values:batchClear/post(sheets.spreadsheets.values.batchClear)`.
    public func sheets_spreadsheets_values_batchClear(
        path: Operations.Sheets_spreadsheets_values_batchClear.Input.Path,
        query: Operations.Sheets_spreadsheets_values_batchClear.Input.Query = .init(),
        headers: Operations.Sheets_spreadsheets_values_batchClear.Input.Headers = .init(),
        body: Operations.Sheets_spreadsheets_values_batchClear.Input.Body? = nil
    ) async throws -> Operations.Sheets_spreadsheets_values_batchClear.Output {
        try await sheets_spreadsheets_values_batchClear(Operations.Sheets_spreadsheets_values_batchClear.Input(
            path: path,
            query: query,
            headers: headers,
            body: body
        ))
    }
    /// Clears one or more ranges of values from a spreadsheet. The caller must specify the spreadsheet ID and one or more DataFilters. Ranges matching any of the specified data filters will be cleared. Only values are cleared -- all other properties of the cell (such as formatting, data validation, etc..) are kept.
    ///
    /// - Remark: HTTP `POST /v4/spreadsheets/{spreadsheetId}/values:batchClearByDataFilter`.
    /// - Remark: Generated from `#/paths//v4/spreadsheets/{spreadsheetId}/values:batchClearByDataFilter/post(sheets.spreadsheets.values.batchClearByDataFilter)`.
    public func sheets_spreadsheets_values_batchClearByDataFilter(
        path: Operations.Sheets_spreadsheets_values_batchClearByDataFilter.Input.Path,
        query: Operations.Sheets_spreadsheets_values_batchClearByDataFilter.Input.Query = .init(),
        headers: Operations.Sheets_spreadsheets_values_batchClearByDataFilter.Input.Headers = .init(),
        body: Operations.Sheets_spreadsheets_values_batchClearByDataFilter.Input.Body? = nil
    ) async throws -> Operations.Sheets_spreadsheets_values_batchClearByDataFilter.Output {
        try await sheets_spreadsheets_values_batchClearByDataFilter(Operations.Sheets_spreadsheets_values_batchClearByDataFilter.Input(
            path: path,
            query: query,
            headers: headers,
            body: body
        ))
    }
    /// Returns one or more ranges of values from a spreadsheet. The caller must specify the spreadsheet ID and one or more ranges.
    ///
    /// - Remark: HTTP `GET /v4/spreadsheets/{spreadsheetId}/values:batchGet`.
    /// - Remark: Generated from `#/paths//v4/spreadsheets/{spreadsheetId}/values:batchGet/get(sheets.spreadsheets.values.batchGet)`.
    public func sheets_spreadsheets_values_batchGet(
        path: Operations.Sheets_spreadsheets_values_batchGet.Input.Path,
        query: Operations.Sheets_spreadsheets_values_batchGet.Input.Query = .init(),
        headers: Operations.Sheets_spreadsheets_values_batchGet.Input.Headers = .init()
    ) async throws -> Operations.Sheets_spreadsheets_values_batchGet.Output {
        try await sheets_spreadsheets_values_batchGet(Operations.Sheets_spreadsheets_values_batchGet.Input(
            path: path,
            query: query,
            headers: headers
        ))
    }
    /// Returns one or more ranges of values that match the specified data filters. The caller must specify the spreadsheet ID and one or more DataFilters. Ranges that match any of the data filters in the request will be returned.
    ///
    /// - Remark: HTTP `POST /v4/spreadsheets/{spreadsheetId}/values:batchGetByDataFilter`.
    /// - Remark: Generated from `#/paths//v4/spreadsheets/{spreadsheetId}/values:batchGetByDataFilter/post(sheets.spreadsheets.values.batchGetByDataFilter)`.
    public func sheets_spreadsheets_values_batchGetByDataFilter(
        path: Operations.Sheets_spreadsheets_values_batchGetByDataFilter.Input.Path,
        query: Operations.Sheets_spreadsheets_values_batchGetByDataFilter.Input.Query = .init(),
        headers: Operations.Sheets_spreadsheets_values_batchGetByDataFilter.Input.Headers = .init(),
        body: Operations.Sheets_spreadsheets_values_batchGetByDataFilter.Input.Body? = nil
    ) async throws -> Operations.Sheets_spreadsheets_values_batchGetByDataFilter.Output {
        try await sheets_spreadsheets_values_batchGetByDataFilter(Operations.Sheets_spreadsheets_values_batchGetByDataFilter.Input(
            path: path,
            query: query,
            headers: headers,
            body: body
        ))
    }
    /// Sets values in one or more ranges of a spreadsheet. The caller must specify the spreadsheet ID, a valueInputOption, and one or more ValueRanges.
    ///
    /// - Remark: HTTP `POST /v4/spreadsheets/{spreadsheetId}/values:batchUpdate`.
    /// - Remark: Generated from `#/paths//v4/spreadsheets/{spreadsheetId}/values:batchUpdate/post(sheets.spreadsheets.values.batchUpdate)`.
    public func sheets_spreadsheets_values_batchUpdate(
        path: Operations.Sheets_spreadsheets_values_batchUpdate.Input.Path,
        query: Operations.Sheets_spreadsheets_values_batchUpdate.Input.Query = .init(),
        headers: Operations.Sheets_spreadsheets_values_batchUpdate.Input.Headers = .init(),
        body: Operations.Sheets_spreadsheets_values_batchUpdate.Input.Body? = nil
    ) async throws -> Operations.Sheets_spreadsheets_values_batchUpdate.Output {
        try await sheets_spreadsheets_values_batchUpdate(Operations.Sheets_spreadsheets_values_batchUpdate.Input(
            path: path,
            query: query,
            headers: headers,
            body: body
        ))
    }
    /// Sets values in one or more ranges of a spreadsheet. The caller must specify the spreadsheet ID, a valueInputOption, and one or more DataFilterValueRanges.
    ///
    /// - Remark: HTTP `POST /v4/spreadsheets/{spreadsheetId}/values:batchUpdateByDataFilter`.
    /// - Remark: Generated from `#/paths//v4/spreadsheets/{spreadsheetId}/values:batchUpdateByDataFilter/post(sheets.spreadsheets.values.batchUpdateByDataFilter)`.
    public func sheets_spreadsheets_values_batchUpdateByDataFilter(
        path: Operations.Sheets_spreadsheets_values_batchUpdateByDataFilter.Input.Path,
        query: Operations.Sheets_spreadsheets_values_batchUpdateByDataFilter.Input.Query = .init(),
        headers: Operations.Sheets_spreadsheets_values_batchUpdateByDataFilter.Input.Headers = .init(),
        body: Operations.Sheets_spreadsheets_values_batchUpdateByDataFilter.Input.Body? = nil
    ) async throws -> Operations.Sheets_spreadsheets_values_batchUpdateByDataFilter.Output {
        try await sheets_spreadsheets_values_batchUpdateByDataFilter(Operations.Sheets_spreadsheets_values_batchUpdateByDataFilter.Input(
            path: path,
            query: query,
            headers: headers,
            body: body
        ))
    }
    /// Applies one or more updates to the spreadsheet. Each request is validated before being applied. If any request is not valid then the entire request will fail and nothing will be applied. Some requests have replies to give you some information about how they are applied. The replies will mirror the requests. For example, if you applied 4 updates and the 3rd one had a reply, then the response will have 2 empty replies, the actual reply, and another empty reply, in that order. Due to the collaborative nature of spreadsheets, it is not guaranteed that the spreadsheet will reflect exactly your changes after this completes, however it is guaranteed that the updates in the request will be applied together atomically. Your changes may be altered with respect to collaborator changes. If there are no collaborators, the spreadsheet should reflect your changes.
    ///
    /// - Remark: HTTP `POST /v4/spreadsheets/{spreadsheetId}:batchUpdate`.
    /// - Remark: Generated from `#/paths//v4/spreadsheets/{spreadsheetId}:batchUpdate/post(sheets.spreadsheets.batchUpdate)`.
    public func sheets_spreadsheets_batchUpdate(
        path: Operations.Sheets_spreadsheets_batchUpdate.Input.Path,
        query: Operations.Sheets_spreadsheets_batchUpdate.Input.Query = .init(),
        headers: Operations.Sheets_spreadsheets_batchUpdate.Input.Headers = .init(),
        body: Operations.Sheets_spreadsheets_batchUpdate.Input.Body? = nil
    ) async throws -> Operations.Sheets_spreadsheets_batchUpdate.Output {
        try await sheets_spreadsheets_batchUpdate(Operations.Sheets_spreadsheets_batchUpdate.Input(
            path: path,
            query: query,
            headers: headers,
            body: body
        ))
    }
    /// Returns the spreadsheet at the given ID. The caller must specify the spreadsheet ID. This method differs from GetSpreadsheet in that it allows selecting which subsets of spreadsheet data to return by specifying a dataFilters parameter. Multiple DataFilters can be specified. Specifying one or more data filters returns the portions of the spreadsheet that intersect ranges matched by any of the filters. By default, data within grids is not returned. You can include grid data one of 2 ways: * Specify a [field mask](https://developers.google.com/sheets/api/guides/field-masks) listing your desired fields using the `fields` URL parameter in HTTP * Set the includeGridData parameter to true. If a field mask is set, the `includeGridData` parameter is ignored For large spreadsheets, as a best practice, retrieve only the specific spreadsheet fields that you want.
    ///
    /// - Remark: HTTP `POST /v4/spreadsheets/{spreadsheetId}:getByDataFilter`.
    /// - Remark: Generated from `#/paths//v4/spreadsheets/{spreadsheetId}:getByDataFilter/post(sheets.spreadsheets.getByDataFilter)`.
    public func sheets_spreadsheets_getByDataFilter(
        path: Operations.Sheets_spreadsheets_getByDataFilter.Input.Path,
        query: Operations.Sheets_spreadsheets_getByDataFilter.Input.Query = .init(),
        headers: Operations.Sheets_spreadsheets_getByDataFilter.Input.Headers = .init(),
        body: Operations.Sheets_spreadsheets_getByDataFilter.Input.Body? = nil
    ) async throws -> Operations.Sheets_spreadsheets_getByDataFilter.Output {
        try await sheets_spreadsheets_getByDataFilter(Operations.Sheets_spreadsheets_getByDataFilter.Input(
            path: path,
            query: query,
            headers: headers,
            body: body
        ))
    }
}

/// Server URLs defined in the OpenAPI document.
public enum Servers {
    public enum Server1 {
        public static func url() throws -> Foundation.URL {
            try Foundation.URL(
                validatingOpenAPIServerURL: "https://sheets.googleapis.com/",
                variables: []
            )
        }
    }
    @available(*, deprecated, renamed: "Servers.Server1.url")
    public static func server1() throws -> Foundation.URL {
        try Foundation.URL(
            validatingOpenAPIServerURL: "https://sheets.googleapis.com/",
            variables: []
        )
    }
}

/// Types generated from the components section of the OpenAPI document.
public enum Components {
    /// Types generated from the `#/components/schemas` section of the OpenAPI document.
    public enum Schemas {
        /// Adds a new banded range to the spreadsheet.
        ///
        /// - Remark: Generated from `#/components/schemas/AddBandingRequest`.
        public struct AddBandingRequest: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/AddBandingRequest/bandedRange`.
            public var bandedRange: Components.Schemas.BandedRange?
            /// Creates a new `AddBandingRequest`.
            ///
            /// - Parameters:
            ///   - bandedRange:
            public init(bandedRange: Components.Schemas.BandedRange? = nil) {
                self.bandedRange = bandedRange
            }
            public enum CodingKeys: String, CodingKey {
                case bandedRange
            }
        }
        /// The result of adding a banded range.
        ///
        /// - Remark: Generated from `#/components/schemas/AddBandingResponse`.
        public struct AddBandingResponse: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/AddBandingResponse/bandedRange`.
            public var bandedRange: Components.Schemas.BandedRange?
            /// Creates a new `AddBandingResponse`.
            ///
            /// - Parameters:
            ///   - bandedRange:
            public init(bandedRange: Components.Schemas.BandedRange? = nil) {
                self.bandedRange = bandedRange
            }
            public enum CodingKeys: String, CodingKey {
                case bandedRange
            }
        }
        /// Adds a chart to a sheet in the spreadsheet.
        ///
        /// - Remark: Generated from `#/components/schemas/AddChartRequest`.
        public struct AddChartRequest: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/AddChartRequest/chart`.
            public var chart: Components.Schemas.EmbeddedChart?
            /// Creates a new `AddChartRequest`.
            ///
            /// - Parameters:
            ///   - chart:
            public init(chart: Components.Schemas.EmbeddedChart? = nil) {
                self.chart = chart
            }
            public enum CodingKeys: String, CodingKey {
                case chart
            }
        }
        /// The result of adding a chart to a spreadsheet.
        ///
        /// - Remark: Generated from `#/components/schemas/AddChartResponse`.
        public struct AddChartResponse: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/AddChartResponse/chart`.
            public var chart: Components.Schemas.EmbeddedChart?
            /// Creates a new `AddChartResponse`.
            ///
            /// - Parameters:
            ///   - chart:
            public init(chart: Components.Schemas.EmbeddedChart? = nil) {
                self.chart = chart
            }
            public enum CodingKeys: String, CodingKey {
                case chart
            }
        }
        /// Adds a new conditional format rule at the given index. All subsequent rules' indexes are incremented.
        ///
        /// - Remark: Generated from `#/components/schemas/AddConditionalFormatRuleRequest`.
        public struct AddConditionalFormatRuleRequest: Codable, Hashable, Sendable {
            /// The zero-based index where the rule should be inserted.
            ///
            /// - Remark: Generated from `#/components/schemas/AddConditionalFormatRuleRequest/index`.
            public var index: Swift.Int32?
            /// - Remark: Generated from `#/components/schemas/AddConditionalFormatRuleRequest/rule`.
            public var rule: Components.Schemas.ConditionalFormatRule?
            /// Creates a new `AddConditionalFormatRuleRequest`.
            ///
            /// - Parameters:
            ///   - index: The zero-based index where the rule should be inserted.
            ///   - rule:
            public init(
                index: Swift.Int32? = nil,
                rule: Components.Schemas.ConditionalFormatRule? = nil
            ) {
                self.index = index
                self.rule = rule
            }
            public enum CodingKeys: String, CodingKey {
                case index
                case rule
            }
        }
        /// Adds a data source. After the data source is added successfully, an associated DATA_SOURCE sheet is created and an execution is triggered to refresh the sheet to read data from the data source. The request requires an additional `bigquery.readonly` OAuth scope.
        ///
        /// - Remark: Generated from `#/components/schemas/AddDataSourceRequest`.
        public struct AddDataSourceRequest: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/AddDataSourceRequest/dataSource`.
            public var dataSource: Components.Schemas.DataSource?
            /// Creates a new `AddDataSourceRequest`.
            ///
            /// - Parameters:
            ///   - dataSource:
            public init(dataSource: Components.Schemas.DataSource? = nil) {
                self.dataSource = dataSource
            }
            public enum CodingKeys: String, CodingKey {
                case dataSource
            }
        }
        /// The result of adding a data source.
        ///
        /// - Remark: Generated from `#/components/schemas/AddDataSourceResponse`.
        public struct AddDataSourceResponse: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/AddDataSourceResponse/dataExecutionStatus`.
            public var dataExecutionStatus: Components.Schemas.DataExecutionStatus?
            /// - Remark: Generated from `#/components/schemas/AddDataSourceResponse/dataSource`.
            public var dataSource: Components.Schemas.DataSource?
            /// Creates a new `AddDataSourceResponse`.
            ///
            /// - Parameters:
            ///   - dataExecutionStatus:
            ///   - dataSource:
            public init(
                dataExecutionStatus: Components.Schemas.DataExecutionStatus? = nil,
                dataSource: Components.Schemas.DataSource? = nil
            ) {
                self.dataExecutionStatus = dataExecutionStatus
                self.dataSource = dataSource
            }
            public enum CodingKeys: String, CodingKey {
                case dataExecutionStatus
                case dataSource
            }
        }
        /// Creates a group over the specified range. If the requested range is a superset of the range of an existing group G, then the depth of G is incremented and this new group G' has the depth of that group. For example, a group [C:D, depth 1] + [B:E] results in groups [B:E, depth 1] and [C:D, depth 2]. If the requested range is a subset of the range of an existing group G, then the depth of the new group G' becomes one greater than the depth of G. For example, a group [B:E, depth 1] + [C:D] results in groups [B:E, depth 1] and [C:D, depth 2]. If the requested range starts before and ends within, or starts within and ends after, the range of an existing group G, then the range of the existing group G becomes the union of the ranges, and the new group G' has depth one greater than the depth of G and range as the intersection of the ranges. For example, a group [B:D, depth 1] + [C:E] results in groups [B:E, depth 1] and [C:D, depth 2].
        ///
        /// - Remark: Generated from `#/components/schemas/AddDimensionGroupRequest`.
        public struct AddDimensionGroupRequest: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/AddDimensionGroupRequest/range`.
            public var range: Components.Schemas.DimensionRange?
            /// Creates a new `AddDimensionGroupRequest`.
            ///
            /// - Parameters:
            ///   - range:
            public init(range: Components.Schemas.DimensionRange? = nil) {
                self.range = range
            }
            public enum CodingKeys: String, CodingKey {
                case range
            }
        }
        /// The result of adding a group.
        ///
        /// - Remark: Generated from `#/components/schemas/AddDimensionGroupResponse`.
        public struct AddDimensionGroupResponse: Codable, Hashable, Sendable {
            /// All groups of a dimension after adding a group to that dimension.
            ///
            /// - Remark: Generated from `#/components/schemas/AddDimensionGroupResponse/dimensionGroups`.
            public var dimensionGroups: [Components.Schemas.DimensionGroup]?
            /// Creates a new `AddDimensionGroupResponse`.
            ///
            /// - Parameters:
            ///   - dimensionGroups: All groups of a dimension after adding a group to that dimension.
            public init(dimensionGroups: [Components.Schemas.DimensionGroup]? = nil) {
                self.dimensionGroups = dimensionGroups
            }
            public enum CodingKeys: String, CodingKey {
                case dimensionGroups
            }
        }
        /// Adds a filter view.
        ///
        /// - Remark: Generated from `#/components/schemas/AddFilterViewRequest`.
        public struct AddFilterViewRequest: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/AddFilterViewRequest/filter`.
            public var filter: Components.Schemas.FilterView?
            /// Creates a new `AddFilterViewRequest`.
            ///
            /// - Parameters:
            ///   - filter:
            public init(filter: Components.Schemas.FilterView? = nil) {
                self.filter = filter
            }
            public enum CodingKeys: String, CodingKey {
                case filter
            }
        }
        /// The result of adding a filter view.
        ///
        /// - Remark: Generated from `#/components/schemas/AddFilterViewResponse`.
        public struct AddFilterViewResponse: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/AddFilterViewResponse/filter`.
            public var filter: Components.Schemas.FilterView?
            /// Creates a new `AddFilterViewResponse`.
            ///
            /// - Parameters:
            ///   - filter:
            public init(filter: Components.Schemas.FilterView? = nil) {
                self.filter = filter
            }
            public enum CodingKeys: String, CodingKey {
                case filter
            }
        }
        /// Adds a named range to the spreadsheet.
        ///
        /// - Remark: Generated from `#/components/schemas/AddNamedRangeRequest`.
        public struct AddNamedRangeRequest: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/AddNamedRangeRequest/namedRange`.
            public var namedRange: Components.Schemas.NamedRange?
            /// Creates a new `AddNamedRangeRequest`.
            ///
            /// - Parameters:
            ///   - namedRange:
            public init(namedRange: Components.Schemas.NamedRange? = nil) {
                self.namedRange = namedRange
            }
            public enum CodingKeys: String, CodingKey {
                case namedRange
            }
        }
        /// The result of adding a named range.
        ///
        /// - Remark: Generated from `#/components/schemas/AddNamedRangeResponse`.
        public struct AddNamedRangeResponse: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/AddNamedRangeResponse/namedRange`.
            public var namedRange: Components.Schemas.NamedRange?
            /// Creates a new `AddNamedRangeResponse`.
            ///
            /// - Parameters:
            ///   - namedRange:
            public init(namedRange: Components.Schemas.NamedRange? = nil) {
                self.namedRange = namedRange
            }
            public enum CodingKeys: String, CodingKey {
                case namedRange
            }
        }
        /// Adds a new protected range.
        ///
        /// - Remark: Generated from `#/components/schemas/AddProtectedRangeRequest`.
        public struct AddProtectedRangeRequest: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/AddProtectedRangeRequest/protectedRange`.
            public var protectedRange: Components.Schemas.ProtectedRange?
            /// Creates a new `AddProtectedRangeRequest`.
            ///
            /// - Parameters:
            ///   - protectedRange:
            public init(protectedRange: Components.Schemas.ProtectedRange? = nil) {
                self.protectedRange = protectedRange
            }
            public enum CodingKeys: String, CodingKey {
                case protectedRange
            }
        }
        /// The result of adding a new protected range.
        ///
        /// - Remark: Generated from `#/components/schemas/AddProtectedRangeResponse`.
        public struct AddProtectedRangeResponse: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/AddProtectedRangeResponse/protectedRange`.
            public var protectedRange: Components.Schemas.ProtectedRange?
            /// Creates a new `AddProtectedRangeResponse`.
            ///
            /// - Parameters:
            ///   - protectedRange:
            public init(protectedRange: Components.Schemas.ProtectedRange? = nil) {
                self.protectedRange = protectedRange
            }
            public enum CodingKeys: String, CodingKey {
                case protectedRange
            }
        }
        /// Adds a new sheet. When a sheet is added at a given index, all subsequent sheets' indexes are incremented. To add an object sheet, use AddChartRequest instead and specify EmbeddedObjectPosition.sheetId or EmbeddedObjectPosition.newSheet.
        ///
        /// - Remark: Generated from `#/components/schemas/AddSheetRequest`.
        public struct AddSheetRequest: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/AddSheetRequest/properties`.
            public var properties: Components.Schemas.SheetProperties?
            /// Creates a new `AddSheetRequest`.
            ///
            /// - Parameters:
            ///   - properties:
            public init(properties: Components.Schemas.SheetProperties? = nil) {
                self.properties = properties
            }
            public enum CodingKeys: String, CodingKey {
                case properties
            }
        }
        /// The result of adding a sheet.
        ///
        /// - Remark: Generated from `#/components/schemas/AddSheetResponse`.
        public struct AddSheetResponse: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/AddSheetResponse/properties`.
            public var properties: Components.Schemas.SheetProperties?
            /// Creates a new `AddSheetResponse`.
            ///
            /// - Parameters:
            ///   - properties:
            public init(properties: Components.Schemas.SheetProperties? = nil) {
                self.properties = properties
            }
            public enum CodingKeys: String, CodingKey {
                case properties
            }
        }
        /// Adds a slicer to a sheet in the spreadsheet.
        ///
        /// - Remark: Generated from `#/components/schemas/AddSlicerRequest`.
        public struct AddSlicerRequest: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/AddSlicerRequest/slicer`.
            public var slicer: Components.Schemas.Slicer?
            /// Creates a new `AddSlicerRequest`.
            ///
            /// - Parameters:
            ///   - slicer:
            public init(slicer: Components.Schemas.Slicer? = nil) {
                self.slicer = slicer
            }
            public enum CodingKeys: String, CodingKey {
                case slicer
            }
        }
        /// The result of adding a slicer to a spreadsheet.
        ///
        /// - Remark: Generated from `#/components/schemas/AddSlicerResponse`.
        public struct AddSlicerResponse: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/AddSlicerResponse/slicer`.
            public var slicer: Components.Schemas.Slicer?
            /// Creates a new `AddSlicerResponse`.
            ///
            /// - Parameters:
            ///   - slicer:
            public init(slicer: Components.Schemas.Slicer? = nil) {
                self.slicer = slicer
            }
            public enum CodingKeys: String, CodingKey {
                case slicer
            }
        }
        /// Adds new cells after the last row with data in a sheet, inserting new rows into the sheet if necessary.
        ///
        /// - Remark: Generated from `#/components/schemas/AppendCellsRequest`.
        public struct AppendCellsRequest: Codable, Hashable, Sendable {
            /// The fields of CellData that should be updated. At least one field must be specified. The root is the CellData; 'row.values.' should not be specified. A single `"*"` can be used as short-hand for listing every field.
            ///
            /// - Remark: Generated from `#/components/schemas/AppendCellsRequest/fields`.
            public var fields: Swift.String?
            /// The data to append.
            ///
            /// - Remark: Generated from `#/components/schemas/AppendCellsRequest/rows`.
            public var rows: [Components.Schemas.RowData]?
            /// The sheet ID to append the data to.
            ///
            /// - Remark: Generated from `#/components/schemas/AppendCellsRequest/sheetId`.
            public var sheetId: Swift.Int32?
            /// Creates a new `AppendCellsRequest`.
            ///
            /// - Parameters:
            ///   - fields: The fields of CellData that should be updated. At least one field must be specified. The root is the CellData; 'row.values.' should not be specified. A single `"*"` can be used as short-hand for listing every field.
            ///   - rows: The data to append.
            ///   - sheetId: The sheet ID to append the data to.
            public init(
                fields: Swift.String? = nil,
                rows: [Components.Schemas.RowData]? = nil,
                sheetId: Swift.Int32? = nil
            ) {
                self.fields = fields
                self.rows = rows
                self.sheetId = sheetId
            }
            public enum CodingKeys: String, CodingKey {
                case fields
                case rows
                case sheetId
            }
        }
        /// Appends rows or columns to the end of a sheet.
        ///
        /// - Remark: Generated from `#/components/schemas/AppendDimensionRequest`.
        public struct AppendDimensionRequest: Codable, Hashable, Sendable {
            /// Whether rows or columns should be appended.
            ///
            /// - Remark: Generated from `#/components/schemas/AppendDimensionRequest/dimension`.
            @frozen public enum DimensionPayload: String, Codable, Hashable, Sendable, CaseIterable {
                case dimensionUnspecified = "DIMENSION_UNSPECIFIED"
                case rows = "ROWS"
                case columns = "COLUMNS"
            }
            /// Whether rows or columns should be appended.
            ///
            /// - Remark: Generated from `#/components/schemas/AppendDimensionRequest/dimension`.
            public var dimension: Components.Schemas.AppendDimensionRequest.DimensionPayload?
            /// The number of rows or columns to append.
            ///
            /// - Remark: Generated from `#/components/schemas/AppendDimensionRequest/length`.
            public var length: Swift.Int32?
            /// The sheet to append rows or columns to.
            ///
            /// - Remark: Generated from `#/components/schemas/AppendDimensionRequest/sheetId`.
            public var sheetId: Swift.Int32?
            /// Creates a new `AppendDimensionRequest`.
            ///
            /// - Parameters:
            ///   - dimension: Whether rows or columns should be appended.
            ///   - length: The number of rows or columns to append.
            ///   - sheetId: The sheet to append rows or columns to.
            public init(
                dimension: Components.Schemas.AppendDimensionRequest.DimensionPayload? = nil,
                length: Swift.Int32? = nil,
                sheetId: Swift.Int32? = nil
            ) {
                self.dimension = dimension
                self.length = length
                self.sheetId = sheetId
            }
            public enum CodingKeys: String, CodingKey {
                case dimension
                case length
                case sheetId
            }
        }
        /// The response when updating a range of values in a spreadsheet.
        ///
        /// - Remark: Generated from `#/components/schemas/AppendValuesResponse`.
        public struct AppendValuesResponse: Codable, Hashable, Sendable {
            /// The spreadsheet the updates were applied to.
            ///
            /// - Remark: Generated from `#/components/schemas/AppendValuesResponse/spreadsheetId`.
            public var spreadsheetId: Swift.String?
            /// The range (in A1 notation) of the table that values are being appended to (before the values were appended). Empty if no table was found.
            ///
            /// - Remark: Generated from `#/components/schemas/AppendValuesResponse/tableRange`.
            public var tableRange: Swift.String?
            /// - Remark: Generated from `#/components/schemas/AppendValuesResponse/updates`.
            public var updates: Components.Schemas.UpdateValuesResponse?
            /// Creates a new `AppendValuesResponse`.
            ///
            /// - Parameters:
            ///   - spreadsheetId: The spreadsheet the updates were applied to.
            ///   - tableRange: The range (in A1 notation) of the table that values are being appended to (before the values were appended). Empty if no table was found.
            ///   - updates:
            public init(
                spreadsheetId: Swift.String? = nil,
                tableRange: Swift.String? = nil,
                updates: Components.Schemas.UpdateValuesResponse? = nil
            ) {
                self.spreadsheetId = spreadsheetId
                self.tableRange = tableRange
                self.updates = updates
            }
            public enum CodingKeys: String, CodingKey {
                case spreadsheetId
                case tableRange
                case updates
            }
        }
        /// Fills in more data based on existing data.
        ///
        /// - Remark: Generated from `#/components/schemas/AutoFillRequest`.
        public struct AutoFillRequest: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/AutoFillRequest/range`.
            public var range: Components.Schemas.GridRange?
            /// - Remark: Generated from `#/components/schemas/AutoFillRequest/sourceAndDestination`.
            public var sourceAndDestination: Components.Schemas.SourceAndDestination?
            /// True if we should generate data with the "alternate" series. This differs based on the type and amount of source data.
            ///
            /// - Remark: Generated from `#/components/schemas/AutoFillRequest/useAlternateSeries`.
            public var useAlternateSeries: Swift.Bool?
            /// Creates a new `AutoFillRequest`.
            ///
            /// - Parameters:
            ///   - range:
            ///   - sourceAndDestination:
            ///   - useAlternateSeries: True if we should generate data with the "alternate" series. This differs based on the type and amount of source data.
            public init(
                range: Components.Schemas.GridRange? = nil,
                sourceAndDestination: Components.Schemas.SourceAndDestination? = nil,
                useAlternateSeries: Swift.Bool? = nil
            ) {
                self.range = range
                self.sourceAndDestination = sourceAndDestination
                self.useAlternateSeries = useAlternateSeries
            }
            public enum CodingKeys: String, CodingKey {
                case range
                case sourceAndDestination
                case useAlternateSeries
            }
        }
        /// Automatically resizes one or more dimensions based on the contents of the cells in that dimension.
        ///
        /// - Remark: Generated from `#/components/schemas/AutoResizeDimensionsRequest`.
        public struct AutoResizeDimensionsRequest: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/AutoResizeDimensionsRequest/dataSourceSheetDimensions`.
            public var dataSourceSheetDimensions: Components.Schemas.DataSourceSheetDimensionRange?
            /// - Remark: Generated from `#/components/schemas/AutoResizeDimensionsRequest/dimensions`.
            public var dimensions: Components.Schemas.DimensionRange?
            /// Creates a new `AutoResizeDimensionsRequest`.
            ///
            /// - Parameters:
            ///   - dataSourceSheetDimensions:
            ///   - dimensions:
            public init(
                dataSourceSheetDimensions: Components.Schemas.DataSourceSheetDimensionRange? = nil,
                dimensions: Components.Schemas.DimensionRange? = nil
            ) {
                self.dataSourceSheetDimensions = dataSourceSheetDimensions
                self.dimensions = dimensions
            }
            public enum CodingKeys: String, CodingKey {
                case dataSourceSheetDimensions
                case dimensions
            }
        }
        /// A banded (alternating colors) range in a sheet.
        ///
        /// - Remark: Generated from `#/components/schemas/BandedRange`.
        public struct BandedRange: Codable, Hashable, Sendable {
            /// The ID of the banded range.
            ///
            /// - Remark: Generated from `#/components/schemas/BandedRange/bandedRangeId`.
            public var bandedRangeId: Swift.Int32?
            /// - Remark: Generated from `#/components/schemas/BandedRange/columnProperties`.
            public var columnProperties: Components.Schemas.BandingProperties?
            /// - Remark: Generated from `#/components/schemas/BandedRange/range`.
            public var range: Components.Schemas.GridRange?
            /// - Remark: Generated from `#/components/schemas/BandedRange/rowProperties`.
            public var rowProperties: Components.Schemas.BandingProperties?
            /// Creates a new `BandedRange`.
            ///
            /// - Parameters:
            ///   - bandedRangeId: The ID of the banded range.
            ///   - columnProperties:
            ///   - range:
            ///   - rowProperties:
            public init(
                bandedRangeId: Swift.Int32? = nil,
                columnProperties: Components.Schemas.BandingProperties? = nil,
                range: Components.Schemas.GridRange? = nil,
                rowProperties: Components.Schemas.BandingProperties? = nil
            ) {
                self.bandedRangeId = bandedRangeId
                self.columnProperties = columnProperties
                self.range = range
                self.rowProperties = rowProperties
            }
            public enum CodingKeys: String, CodingKey {
                case bandedRangeId
                case columnProperties
                case range
                case rowProperties
            }
        }
        /// Properties referring a single dimension (either row or column). If both BandedRange.row_properties and BandedRange.column_properties are set, the fill colors are applied to cells according to the following rules: * header_color and footer_color take priority over band colors. * first_band_color takes priority over second_band_color. * row_properties takes priority over column_properties. For example, the first row color takes priority over the first column color, but the first column color takes priority over the second row color. Similarly, the row header takes priority over the column header in the top left cell, but the column header takes priority over the first row color if the row header is not set.
        ///
        /// - Remark: Generated from `#/components/schemas/BandingProperties`.
        public struct BandingProperties: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/BandingProperties/firstBandColor`.
            public var firstBandColor: Components.Schemas.Color?
            /// - Remark: Generated from `#/components/schemas/BandingProperties/firstBandColorStyle`.
            public var firstBandColorStyle: Components.Schemas.ColorStyle?
            /// - Remark: Generated from `#/components/schemas/BandingProperties/footerColor`.
            public var footerColor: Components.Schemas.Color?
            /// - Remark: Generated from `#/components/schemas/BandingProperties/footerColorStyle`.
            public var footerColorStyle: Components.Schemas.ColorStyle?
            /// - Remark: Generated from `#/components/schemas/BandingProperties/headerColor`.
            public var headerColor: Components.Schemas.Color?
            /// - Remark: Generated from `#/components/schemas/BandingProperties/headerColorStyle`.
            public var headerColorStyle: Components.Schemas.ColorStyle?
            /// - Remark: Generated from `#/components/schemas/BandingProperties/secondBandColor`.
            public var secondBandColor: Components.Schemas.Color?
            /// - Remark: Generated from `#/components/schemas/BandingProperties/secondBandColorStyle`.
            public var secondBandColorStyle: Components.Schemas.ColorStyle?
            /// Creates a new `BandingProperties`.
            ///
            /// - Parameters:
            ///   - firstBandColor:
            ///   - firstBandColorStyle:
            ///   - footerColor:
            ///   - footerColorStyle:
            ///   - headerColor:
            ///   - headerColorStyle:
            ///   - secondBandColor:
            ///   - secondBandColorStyle:
            public init(
                firstBandColor: Components.Schemas.Color? = nil,
                firstBandColorStyle: Components.Schemas.ColorStyle? = nil,
                footerColor: Components.Schemas.Color? = nil,
                footerColorStyle: Components.Schemas.ColorStyle? = nil,
                headerColor: Components.Schemas.Color? = nil,
                headerColorStyle: Components.Schemas.ColorStyle? = nil,
                secondBandColor: Components.Schemas.Color? = nil,
                secondBandColorStyle: Components.Schemas.ColorStyle? = nil
            ) {
                self.firstBandColor = firstBandColor
                self.firstBandColorStyle = firstBandColorStyle
                self.footerColor = footerColor
                self.footerColorStyle = footerColorStyle
                self.headerColor = headerColor
                self.headerColorStyle = headerColorStyle
                self.secondBandColor = secondBandColor
                self.secondBandColorStyle = secondBandColorStyle
            }
            public enum CodingKeys: String, CodingKey {
                case firstBandColor
                case firstBandColorStyle
                case footerColor
                case footerColorStyle
                case headerColor
                case headerColorStyle
                case secondBandColor
                case secondBandColorStyle
            }
        }
        /// Formatting options for baseline value.
        ///
        /// - Remark: Generated from `#/components/schemas/BaselineValueFormat`.
        public struct BaselineValueFormat: Codable, Hashable, Sendable {
            /// The comparison type of key value with baseline value.
            ///
            /// - Remark: Generated from `#/components/schemas/BaselineValueFormat/comparisonType`.
            @frozen public enum ComparisonTypePayload: String, Codable, Hashable, Sendable, CaseIterable {
                case comparisonTypeUndefined = "COMPARISON_TYPE_UNDEFINED"
                case absoluteDifference = "ABSOLUTE_DIFFERENCE"
                case percentageDifference = "PERCENTAGE_DIFFERENCE"
            }
            /// The comparison type of key value with baseline value.
            ///
            /// - Remark: Generated from `#/components/schemas/BaselineValueFormat/comparisonType`.
            public var comparisonType: Components.Schemas.BaselineValueFormat.ComparisonTypePayload?
            /// Description which is appended after the baseline value. This field is optional.
            ///
            /// - Remark: Generated from `#/components/schemas/BaselineValueFormat/description`.
            public var description: Swift.String?
            /// - Remark: Generated from `#/components/schemas/BaselineValueFormat/negativeColor`.
            public var negativeColor: Components.Schemas.Color?
            /// - Remark: Generated from `#/components/schemas/BaselineValueFormat/negativeColorStyle`.
            public var negativeColorStyle: Components.Schemas.ColorStyle?
            /// - Remark: Generated from `#/components/schemas/BaselineValueFormat/position`.
            public var position: Components.Schemas.TextPosition?
            /// - Remark: Generated from `#/components/schemas/BaselineValueFormat/positiveColor`.
            public var positiveColor: Components.Schemas.Color?
            /// - Remark: Generated from `#/components/schemas/BaselineValueFormat/positiveColorStyle`.
            public var positiveColorStyle: Components.Schemas.ColorStyle?
            /// - Remark: Generated from `#/components/schemas/BaselineValueFormat/textFormat`.
            public var textFormat: Components.Schemas.TextFormat?
            /// Creates a new `BaselineValueFormat`.
            ///
            /// - Parameters:
            ///   - comparisonType: The comparison type of key value with baseline value.
            ///   - description: Description which is appended after the baseline value. This field is optional.
            ///   - negativeColor:
            ///   - negativeColorStyle:
            ///   - position:
            ///   - positiveColor:
            ///   - positiveColorStyle:
            ///   - textFormat:
            public init(
                comparisonType: Components.Schemas.BaselineValueFormat.ComparisonTypePayload? = nil,
                description: Swift.String? = nil,
                negativeColor: Components.Schemas.Color? = nil,
                negativeColorStyle: Components.Schemas.ColorStyle? = nil,
                position: Components.Schemas.TextPosition? = nil,
                positiveColor: Components.Schemas.Color? = nil,
                positiveColorStyle: Components.Schemas.ColorStyle? = nil,
                textFormat: Components.Schemas.TextFormat? = nil
            ) {
                self.comparisonType = comparisonType
                self.description = description
                self.negativeColor = negativeColor
                self.negativeColorStyle = negativeColorStyle
                self.position = position
                self.positiveColor = positiveColor
                self.positiveColorStyle = positiveColorStyle
                self.textFormat = textFormat
            }
            public enum CodingKeys: String, CodingKey {
                case comparisonType
                case description
                case negativeColor
                case negativeColorStyle
                case position
                case positiveColor
                case positiveColorStyle
                case textFormat
            }
        }
        /// An axis of the chart. A chart may not have more than one axis per axis position.
        ///
        /// - Remark: Generated from `#/components/schemas/BasicChartAxis`.
        public struct BasicChartAxis: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/BasicChartAxis/format`.
            public var format: Components.Schemas.TextFormat?
            /// The position of this axis.
            ///
            /// - Remark: Generated from `#/components/schemas/BasicChartAxis/position`.
            @frozen public enum PositionPayload: String, Codable, Hashable, Sendable, CaseIterable {
                case basicChartAxisPositionUnspecified = "BASIC_CHART_AXIS_POSITION_UNSPECIFIED"
                case bottomAxis = "BOTTOM_AXIS"
                case leftAxis = "LEFT_AXIS"
                case rightAxis = "RIGHT_AXIS"
            }
            /// The position of this axis.
            ///
            /// - Remark: Generated from `#/components/schemas/BasicChartAxis/position`.
            public var position: Components.Schemas.BasicChartAxis.PositionPayload?
            /// The title of this axis. If set, this overrides any title inferred from headers of the data.
            ///
            /// - Remark: Generated from `#/components/schemas/BasicChartAxis/title`.
            public var title: Swift.String?
            /// - Remark: Generated from `#/components/schemas/BasicChartAxis/titleTextPosition`.
            public var titleTextPosition: Components.Schemas.TextPosition?
            /// - Remark: Generated from `#/components/schemas/BasicChartAxis/viewWindowOptions`.
            public var viewWindowOptions: Components.Schemas.ChartAxisViewWindowOptions?
            /// Creates a new `BasicChartAxis`.
            ///
            /// - Parameters:
            ///   - format:
            ///   - position: The position of this axis.
            ///   - title: The title of this axis. If set, this overrides any title inferred from headers of the data.
            ///   - titleTextPosition:
            ///   - viewWindowOptions:
            public init(
                format: Components.Schemas.TextFormat? = nil,
                position: Components.Schemas.BasicChartAxis.PositionPayload? = nil,
                title: Swift.String? = nil,
                titleTextPosition: Components.Schemas.TextPosition? = nil,
                viewWindowOptions: Components.Schemas.ChartAxisViewWindowOptions? = nil
            ) {
                self.format = format
                self.position = position
                self.title = title
                self.titleTextPosition = titleTextPosition
                self.viewWindowOptions = viewWindowOptions
            }
            public enum CodingKeys: String, CodingKey {
                case format
                case position
                case title
                case titleTextPosition
                case viewWindowOptions
            }
        }
        /// The domain of a chart. For example, if charting stock prices over time, this would be the date.
        ///
        /// - Remark: Generated from `#/components/schemas/BasicChartDomain`.
        public struct BasicChartDomain: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/BasicChartDomain/domain`.
            public var domain: Components.Schemas.ChartData?
            /// True to reverse the order of the domain values (horizontal axis).
            ///
            /// - Remark: Generated from `#/components/schemas/BasicChartDomain/reversed`.
            public var reversed: Swift.Bool?
            /// Creates a new `BasicChartDomain`.
            ///
            /// - Parameters:
            ///   - domain:
            ///   - reversed: True to reverse the order of the domain values (horizontal axis).
            public init(
                domain: Components.Schemas.ChartData? = nil,
                reversed: Swift.Bool? = nil
            ) {
                self.domain = domain
                self.reversed = reversed
            }
            public enum CodingKeys: String, CodingKey {
                case domain
                case reversed
            }
        }
        /// A single series of data in a chart. For example, if charting stock prices over time, multiple series may exist, one for the "Open Price", "High Price", "Low Price" and "Close Price".
        ///
        /// - Remark: Generated from `#/components/schemas/BasicChartSeries`.
        public struct BasicChartSeries: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/BasicChartSeries/color`.
            public var color: Components.Schemas.Color?
            /// - Remark: Generated from `#/components/schemas/BasicChartSeries/colorStyle`.
            public var colorStyle: Components.Schemas.ColorStyle?
            /// - Remark: Generated from `#/components/schemas/BasicChartSeries/dataLabel`.
            public var dataLabel: Components.Schemas.DataLabel?
            /// - Remark: Generated from `#/components/schemas/BasicChartSeries/lineStyle`.
            public var lineStyle: Components.Schemas.LineStyle?
            /// - Remark: Generated from `#/components/schemas/BasicChartSeries/pointStyle`.
            public var pointStyle: Components.Schemas.PointStyle?
            /// - Remark: Generated from `#/components/schemas/BasicChartSeries/series`.
            public var series: Components.Schemas.ChartData?
            /// Style override settings for series data points.
            ///
            /// - Remark: Generated from `#/components/schemas/BasicChartSeries/styleOverrides`.
            public var styleOverrides: [Components.Schemas.BasicSeriesDataPointStyleOverride]?
            /// The minor axis that will specify the range of values for this series. For example, if charting stocks over time, the "Volume" series may want to be pinned to the right with the prices pinned to the left, because the scale of trading volume is different than the scale of prices. It is an error to specify an axis that isn't a valid minor axis for the chart's type.
            ///
            /// - Remark: Generated from `#/components/schemas/BasicChartSeries/targetAxis`.
            @frozen public enum TargetAxisPayload: String, Codable, Hashable, Sendable, CaseIterable {
                case basicChartAxisPositionUnspecified = "BASIC_CHART_AXIS_POSITION_UNSPECIFIED"
                case bottomAxis = "BOTTOM_AXIS"
                case leftAxis = "LEFT_AXIS"
                case rightAxis = "RIGHT_AXIS"
            }
            /// The minor axis that will specify the range of values for this series. For example, if charting stocks over time, the "Volume" series may want to be pinned to the right with the prices pinned to the left, because the scale of trading volume is different than the scale of prices. It is an error to specify an axis that isn't a valid minor axis for the chart's type.
            ///
            /// - Remark: Generated from `#/components/schemas/BasicChartSeries/targetAxis`.
            public var targetAxis: Components.Schemas.BasicChartSeries.TargetAxisPayload?
            /// The type of this series. Valid only if the chartType is COMBO. Different types will change the way the series is visualized. Only LINE, AREA, and COLUMN are supported.
            ///
            /// - Remark: Generated from `#/components/schemas/BasicChartSeries/type`.
            @frozen public enum _TypePayload: String, Codable, Hashable, Sendable, CaseIterable {
                case basicChartTypeUnspecified = "BASIC_CHART_TYPE_UNSPECIFIED"
                case bar = "BAR"
                case line = "LINE"
                case area = "AREA"
                case column = "COLUMN"
                case scatter = "SCATTER"
                case combo = "COMBO"
                case steppedArea = "STEPPED_AREA"
            }
            /// The type of this series. Valid only if the chartType is COMBO. Different types will change the way the series is visualized. Only LINE, AREA, and COLUMN are supported.
            ///
            /// - Remark: Generated from `#/components/schemas/BasicChartSeries/type`.
            public var _type: Components.Schemas.BasicChartSeries._TypePayload?
            /// Creates a new `BasicChartSeries`.
            ///
            /// - Parameters:
            ///   - color:
            ///   - colorStyle:
            ///   - dataLabel:
            ///   - lineStyle:
            ///   - pointStyle:
            ///   - series:
            ///   - styleOverrides: Style override settings for series data points.
            ///   - targetAxis: The minor axis that will specify the range of values for this series. For example, if charting stocks over time, the "Volume" series may want to be pinned to the right with the prices pinned to the left, because the scale of trading volume is different than the scale of prices. It is an error to specify an axis that isn't a valid minor axis for the chart's type.
            ///   - _type: The type of this series. Valid only if the chartType is COMBO. Different types will change the way the series is visualized. Only LINE, AREA, and COLUMN are supported.
            public init(
                color: Components.Schemas.Color? = nil,
                colorStyle: Components.Schemas.ColorStyle? = nil,
                dataLabel: Components.Schemas.DataLabel? = nil,
                lineStyle: Components.Schemas.LineStyle? = nil,
                pointStyle: Components.Schemas.PointStyle? = nil,
                series: Components.Schemas.ChartData? = nil,
                styleOverrides: [Components.Schemas.BasicSeriesDataPointStyleOverride]? = nil,
                targetAxis: Components.Schemas.BasicChartSeries.TargetAxisPayload? = nil,
                _type: Components.Schemas.BasicChartSeries._TypePayload? = nil
            ) {
                self.color = color
                self.colorStyle = colorStyle
                self.dataLabel = dataLabel
                self.lineStyle = lineStyle
                self.pointStyle = pointStyle
                self.series = series
                self.styleOverrides = styleOverrides
                self.targetAxis = targetAxis
                self._type = _type
            }
            public enum CodingKeys: String, CodingKey {
                case color
                case colorStyle
                case dataLabel
                case lineStyle
                case pointStyle
                case series
                case styleOverrides
                case targetAxis
                case _type = "type"
            }
        }
        /// The specification for a basic chart. See BasicChartType for the list of charts this supports.
        ///
        /// - Remark: Generated from `#/components/schemas/BasicChartSpec`.
        public struct BasicChartSpec: Codable, Hashable, Sendable {
            /// The axis on the chart.
            ///
            /// - Remark: Generated from `#/components/schemas/BasicChartSpec/axis`.
            public var axis: [Components.Schemas.BasicChartAxis]?
            /// The type of the chart.
            ///
            /// - Remark: Generated from `#/components/schemas/BasicChartSpec/chartType`.
            @frozen public enum ChartTypePayload: String, Codable, Hashable, Sendable, CaseIterable {
                case basicChartTypeUnspecified = "BASIC_CHART_TYPE_UNSPECIFIED"
                case bar = "BAR"
                case line = "LINE"
                case area = "AREA"
                case column = "COLUMN"
                case scatter = "SCATTER"
                case combo = "COMBO"
                case steppedArea = "STEPPED_AREA"
            }
            /// The type of the chart.
            ///
            /// - Remark: Generated from `#/components/schemas/BasicChartSpec/chartType`.
            public var chartType: Components.Schemas.BasicChartSpec.ChartTypePayload?
            /// The behavior of tooltips and data highlighting when hovering on data and chart area.
            ///
            /// - Remark: Generated from `#/components/schemas/BasicChartSpec/compareMode`.
            @frozen public enum CompareModePayload: String, Codable, Hashable, Sendable, CaseIterable {
                case basicChartCompareModeUnspecified = "BASIC_CHART_COMPARE_MODE_UNSPECIFIED"
                case datum = "DATUM"
                case category = "CATEGORY"
            }
            /// The behavior of tooltips and data highlighting when hovering on data and chart area.
            ///
            /// - Remark: Generated from `#/components/schemas/BasicChartSpec/compareMode`.
            public var compareMode: Components.Schemas.BasicChartSpec.CompareModePayload?
            /// The domain of data this is charting. Only a single domain is supported.
            ///
            /// - Remark: Generated from `#/components/schemas/BasicChartSpec/domains`.
            public var domains: [Components.Schemas.BasicChartDomain]?
            /// The number of rows or columns in the data that are "headers". If not set, Google Sheets will guess how many rows are headers based on the data. (Note that BasicChartAxis.title may override the axis title inferred from the header values.)
            ///
            /// - Remark: Generated from `#/components/schemas/BasicChartSpec/headerCount`.
            public var headerCount: Swift.Int32?
            /// If some values in a series are missing, gaps may appear in the chart (e.g, segments of lines in a line chart will be missing). To eliminate these gaps set this to true. Applies to Line, Area, and Combo charts.
            ///
            /// - Remark: Generated from `#/components/schemas/BasicChartSpec/interpolateNulls`.
            public var interpolateNulls: Swift.Bool?
            /// The position of the chart legend.
            ///
            /// - Remark: Generated from `#/components/schemas/BasicChartSpec/legendPosition`.
            @frozen public enum LegendPositionPayload: String, Codable, Hashable, Sendable, CaseIterable {
                case basicChartLegendPositionUnspecified = "BASIC_CHART_LEGEND_POSITION_UNSPECIFIED"
                case bottomLegend = "BOTTOM_LEGEND"
                case leftLegend = "LEFT_LEGEND"
                case rightLegend = "RIGHT_LEGEND"
                case topLegend = "TOP_LEGEND"
                case noLegend = "NO_LEGEND"
            }
            /// The position of the chart legend.
            ///
            /// - Remark: Generated from `#/components/schemas/BasicChartSpec/legendPosition`.
            public var legendPosition: Components.Schemas.BasicChartSpec.LegendPositionPayload?
            /// Gets whether all lines should be rendered smooth or straight by default. Applies to Line charts.
            ///
            /// - Remark: Generated from `#/components/schemas/BasicChartSpec/lineSmoothing`.
            public var lineSmoothing: Swift.Bool?
            /// The data this chart is visualizing.
            ///
            /// - Remark: Generated from `#/components/schemas/BasicChartSpec/series`.
            public var series: [Components.Schemas.BasicChartSeries]?
            /// The stacked type for charts that support vertical stacking. Applies to Area, Bar, Column, Combo, and Stepped Area charts.
            ///
            /// - Remark: Generated from `#/components/schemas/BasicChartSpec/stackedType`.
            @frozen public enum StackedTypePayload: String, Codable, Hashable, Sendable, CaseIterable {
                case basicChartStackedTypeUnspecified = "BASIC_CHART_STACKED_TYPE_UNSPECIFIED"
                case notStacked = "NOT_STACKED"
                case stacked = "STACKED"
                case percentStacked = "PERCENT_STACKED"
            }
            /// The stacked type for charts that support vertical stacking. Applies to Area, Bar, Column, Combo, and Stepped Area charts.
            ///
            /// - Remark: Generated from `#/components/schemas/BasicChartSpec/stackedType`.
            public var stackedType: Components.Schemas.BasicChartSpec.StackedTypePayload?
            /// True to make the chart 3D. Applies to Bar and Column charts.
            ///
            /// - Remark: Generated from `#/components/schemas/BasicChartSpec/threeDimensional`.
            public var threeDimensional: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/BasicChartSpec/totalDataLabel`.
            public var totalDataLabel: Components.Schemas.DataLabel?
            /// Creates a new `BasicChartSpec`.
            ///
            /// - Parameters:
            ///   - axis: The axis on the chart.
            ///   - chartType: The type of the chart.
            ///   - compareMode: The behavior of tooltips and data highlighting when hovering on data and chart area.
            ///   - domains: The domain of data this is charting. Only a single domain is supported.
            ///   - headerCount: The number of rows or columns in the data that are "headers". If not set, Google Sheets will guess how many rows are headers based on the data. (Note that BasicChartAxis.title may override the axis title inferred from the header values.)
            ///   - interpolateNulls: If some values in a series are missing, gaps may appear in the chart (e.g, segments of lines in a line chart will be missing). To eliminate these gaps set this to true. Applies to Line, Area, and Combo charts.
            ///   - legendPosition: The position of the chart legend.
            ///   - lineSmoothing: Gets whether all lines should be rendered smooth or straight by default. Applies to Line charts.
            ///   - series: The data this chart is visualizing.
            ///   - stackedType: The stacked type for charts that support vertical stacking. Applies to Area, Bar, Column, Combo, and Stepped Area charts.
            ///   - threeDimensional: True to make the chart 3D. Applies to Bar and Column charts.
            ///   - totalDataLabel:
            public init(
                axis: [Components.Schemas.BasicChartAxis]? = nil,
                chartType: Components.Schemas.BasicChartSpec.ChartTypePayload? = nil,
                compareMode: Components.Schemas.BasicChartSpec.CompareModePayload? = nil,
                domains: [Components.Schemas.BasicChartDomain]? = nil,
                headerCount: Swift.Int32? = nil,
                interpolateNulls: Swift.Bool? = nil,
                legendPosition: Components.Schemas.BasicChartSpec.LegendPositionPayload? = nil,
                lineSmoothing: Swift.Bool? = nil,
                series: [Components.Schemas.BasicChartSeries]? = nil,
                stackedType: Components.Schemas.BasicChartSpec.StackedTypePayload? = nil,
                threeDimensional: Swift.Bool? = nil,
                totalDataLabel: Components.Schemas.DataLabel? = nil
            ) {
                self.axis = axis
                self.chartType = chartType
                self.compareMode = compareMode
                self.domains = domains
                self.headerCount = headerCount
                self.interpolateNulls = interpolateNulls
                self.legendPosition = legendPosition
                self.lineSmoothing = lineSmoothing
                self.series = series
                self.stackedType = stackedType
                self.threeDimensional = threeDimensional
                self.totalDataLabel = totalDataLabel
            }
            public enum CodingKeys: String, CodingKey {
                case axis
                case chartType
                case compareMode
                case domains
                case headerCount
                case interpolateNulls
                case legendPosition
                case lineSmoothing
                case series
                case stackedType
                case threeDimensional
                case totalDataLabel
            }
        }
        /// The default filter associated with a sheet.
        ///
        /// - Remark: Generated from `#/components/schemas/BasicFilter`.
        public struct BasicFilter: Codable, Hashable, Sendable {
            /// The criteria for showing/hiding values per column. The map's key is the column index, and the value is the criteria for that column. This field is deprecated in favor of filter_specs.
            ///
            /// - Remark: Generated from `#/components/schemas/BasicFilter/criteria`.
            @available(*, deprecated)
            public struct CriteriaPayload: Codable, Hashable, Sendable {
                /// A container of undocumented properties.
                public var additionalProperties: [String: Components.Schemas.FilterCriteria]
                /// Creates a new `CriteriaPayload`.
                ///
                /// - Parameters:
                ///   - additionalProperties: A container of undocumented properties.
                public init(additionalProperties: [String: Components.Schemas.FilterCriteria] = .init()) {
                    self.additionalProperties = additionalProperties
                }
                public init(from decoder: any Decoder) throws {
                    additionalProperties = try decoder.decodeAdditionalProperties(knownKeys: [])
                }
                public func encode(to encoder: any Encoder) throws {
                    try encoder.encodeAdditionalProperties(additionalProperties)
                }
            }
            /// The criteria for showing/hiding values per column. The map's key is the column index, and the value is the criteria for that column. This field is deprecated in favor of filter_specs.
            ///
            /// - Remark: Generated from `#/components/schemas/BasicFilter/criteria`.
            @available(*, deprecated)
            public var criteria: Components.Schemas.BasicFilter.CriteriaPayload?
            /// The filter criteria per column. Both criteria and filter_specs are populated in responses. If both fields are specified in an update request, this field takes precedence.
            ///
            /// - Remark: Generated from `#/components/schemas/BasicFilter/filterSpecs`.
            public var filterSpecs: [Components.Schemas.FilterSpec]?
            /// - Remark: Generated from `#/components/schemas/BasicFilter/range`.
            public var range: Components.Schemas.GridRange?
            /// The sort order per column. Later specifications are used when values are equal in the earlier specifications.
            ///
            /// - Remark: Generated from `#/components/schemas/BasicFilter/sortSpecs`.
            public var sortSpecs: [Components.Schemas.SortSpec]?
            /// Creates a new `BasicFilter`.
            ///
            /// - Parameters:
            ///   - criteria: The criteria for showing/hiding values per column. The map's key is the column index, and the value is the criteria for that column. This field is deprecated in favor of filter_specs.
            ///   - filterSpecs: The filter criteria per column. Both criteria and filter_specs are populated in responses. If both fields are specified in an update request, this field takes precedence.
            ///   - range:
            ///   - sortSpecs: The sort order per column. Later specifications are used when values are equal in the earlier specifications.
            public init(
                criteria: Components.Schemas.BasicFilter.CriteriaPayload? = nil,
                filterSpecs: [Components.Schemas.FilterSpec]? = nil,
                range: Components.Schemas.GridRange? = nil,
                sortSpecs: [Components.Schemas.SortSpec]? = nil
            ) {
                self.criteria = criteria
                self.filterSpecs = filterSpecs
                self.range = range
                self.sortSpecs = sortSpecs
            }
            public enum CodingKeys: String, CodingKey {
                case criteria
                case filterSpecs
                case range
                case sortSpecs
            }
        }
        /// Style override settings for a single series data point.
        ///
        /// - Remark: Generated from `#/components/schemas/BasicSeriesDataPointStyleOverride`.
        public struct BasicSeriesDataPointStyleOverride: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/BasicSeriesDataPointStyleOverride/color`.
            public var color: Components.Schemas.Color?
            /// - Remark: Generated from `#/components/schemas/BasicSeriesDataPointStyleOverride/colorStyle`.
            public var colorStyle: Components.Schemas.ColorStyle?
            /// The zero-based index of the series data point.
            ///
            /// - Remark: Generated from `#/components/schemas/BasicSeriesDataPointStyleOverride/index`.
            public var index: Swift.Int32?
            /// - Remark: Generated from `#/components/schemas/BasicSeriesDataPointStyleOverride/pointStyle`.
            public var pointStyle: Components.Schemas.PointStyle?
            /// Creates a new `BasicSeriesDataPointStyleOverride`.
            ///
            /// - Parameters:
            ///   - color:
            ///   - colorStyle:
            ///   - index: The zero-based index of the series data point.
            ///   - pointStyle:
            public init(
                color: Components.Schemas.Color? = nil,
                colorStyle: Components.Schemas.ColorStyle? = nil,
                index: Swift.Int32? = nil,
                pointStyle: Components.Schemas.PointStyle? = nil
            ) {
                self.color = color
                self.colorStyle = colorStyle
                self.index = index
                self.pointStyle = pointStyle
            }
            public enum CodingKeys: String, CodingKey {
                case color
                case colorStyle
                case index
                case pointStyle
            }
        }
        /// The request for clearing more than one range selected by a DataFilter in a spreadsheet.
        ///
        /// - Remark: Generated from `#/components/schemas/BatchClearValuesByDataFilterRequest`.
        public struct BatchClearValuesByDataFilterRequest: Codable, Hashable, Sendable {
            /// The DataFilters used to determine which ranges to clear.
            ///
            /// - Remark: Generated from `#/components/schemas/BatchClearValuesByDataFilterRequest/dataFilters`.
            public var dataFilters: [Components.Schemas.DataFilter]?
            /// Creates a new `BatchClearValuesByDataFilterRequest`.
            ///
            /// - Parameters:
            ///   - dataFilters: The DataFilters used to determine which ranges to clear.
            public init(dataFilters: [Components.Schemas.DataFilter]? = nil) {
                self.dataFilters = dataFilters
            }
            public enum CodingKeys: String, CodingKey {
                case dataFilters
            }
        }
        /// The response when clearing a range of values selected with DataFilters in a spreadsheet.
        ///
        /// - Remark: Generated from `#/components/schemas/BatchClearValuesByDataFilterResponse`.
        public struct BatchClearValuesByDataFilterResponse: Codable, Hashable, Sendable {
            /// The ranges that were cleared, in [A1 notation](/sheets/api/guides/concepts#cell). If the requests are for an unbounded range or a ranger larger than the bounds of the sheet, this is the actual ranges that were cleared, bounded to the sheet's limits.
            ///
            /// - Remark: Generated from `#/components/schemas/BatchClearValuesByDataFilterResponse/clearedRanges`.
            public var clearedRanges: [Swift.String]?
            /// The spreadsheet the updates were applied to.
            ///
            /// - Remark: Generated from `#/components/schemas/BatchClearValuesByDataFilterResponse/spreadsheetId`.
            public var spreadsheetId: Swift.String?
            /// Creates a new `BatchClearValuesByDataFilterResponse`.
            ///
            /// - Parameters:
            ///   - clearedRanges: The ranges that were cleared, in [A1 notation](/sheets/api/guides/concepts#cell). If the requests are for an unbounded range or a ranger larger than the bounds of the sheet, this is the actual ranges that were cleared, bounded to the sheet's limits.
            ///   - spreadsheetId: The spreadsheet the updates were applied to.
            public init(
                clearedRanges: [Swift.String]? = nil,
                spreadsheetId: Swift.String? = nil
            ) {
                self.clearedRanges = clearedRanges
                self.spreadsheetId = spreadsheetId
            }
            public enum CodingKeys: String, CodingKey {
                case clearedRanges
                case spreadsheetId
            }
        }
        /// The request for clearing more than one range of values in a spreadsheet.
        ///
        /// - Remark: Generated from `#/components/schemas/BatchClearValuesRequest`.
        public struct BatchClearValuesRequest: Codable, Hashable, Sendable {
            /// The ranges to clear, in [A1 notation or R1C1 notation](/sheets/api/guides/concepts#cell).
            ///
            /// - Remark: Generated from `#/components/schemas/BatchClearValuesRequest/ranges`.
            public var ranges: [Swift.String]?
            /// Creates a new `BatchClearValuesRequest`.
            ///
            /// - Parameters:
            ///   - ranges: The ranges to clear, in [A1 notation or R1C1 notation](/sheets/api/guides/concepts#cell).
            public init(ranges: [Swift.String]? = nil) {
                self.ranges = ranges
            }
            public enum CodingKeys: String, CodingKey {
                case ranges
            }
        }
        /// The response when clearing a range of values in a spreadsheet.
        ///
        /// - Remark: Generated from `#/components/schemas/BatchClearValuesResponse`.
        public struct BatchClearValuesResponse: Codable, Hashable, Sendable {
            /// The ranges that were cleared, in A1 notation. If the requests are for an unbounded range or a ranger larger than the bounds of the sheet, this is the actual ranges that were cleared, bounded to the sheet's limits.
            ///
            /// - Remark: Generated from `#/components/schemas/BatchClearValuesResponse/clearedRanges`.
            public var clearedRanges: [Swift.String]?
            /// The spreadsheet the updates were applied to.
            ///
            /// - Remark: Generated from `#/components/schemas/BatchClearValuesResponse/spreadsheetId`.
            public var spreadsheetId: Swift.String?
            /// Creates a new `BatchClearValuesResponse`.
            ///
            /// - Parameters:
            ///   - clearedRanges: The ranges that were cleared, in A1 notation. If the requests are for an unbounded range or a ranger larger than the bounds of the sheet, this is the actual ranges that were cleared, bounded to the sheet's limits.
            ///   - spreadsheetId: The spreadsheet the updates were applied to.
            public init(
                clearedRanges: [Swift.String]? = nil,
                spreadsheetId: Swift.String? = nil
            ) {
                self.clearedRanges = clearedRanges
                self.spreadsheetId = spreadsheetId
            }
            public enum CodingKeys: String, CodingKey {
                case clearedRanges
                case spreadsheetId
            }
        }
        /// The request for retrieving a range of values in a spreadsheet selected by a set of DataFilters.
        ///
        /// - Remark: Generated from `#/components/schemas/BatchGetValuesByDataFilterRequest`.
        public struct BatchGetValuesByDataFilterRequest: Codable, Hashable, Sendable {
            /// The data filters used to match the ranges of values to retrieve. Ranges that match any of the specified data filters are included in the response.
            ///
            /// - Remark: Generated from `#/components/schemas/BatchGetValuesByDataFilterRequest/dataFilters`.
            public var dataFilters: [Components.Schemas.DataFilter]?
            /// How dates, times, and durations should be represented in the output. This is ignored if value_render_option is FORMATTED_VALUE. The default dateTime render option is SERIAL_NUMBER.
            ///
            /// - Remark: Generated from `#/components/schemas/BatchGetValuesByDataFilterRequest/dateTimeRenderOption`.
            @frozen public enum DateTimeRenderOptionPayload: String, Codable, Hashable, Sendable, CaseIterable {
                case serialNumber = "SERIAL_NUMBER"
                case formattedString = "FORMATTED_STRING"
            }
            /// How dates, times, and durations should be represented in the output. This is ignored if value_render_option is FORMATTED_VALUE. The default dateTime render option is SERIAL_NUMBER.
            ///
            /// - Remark: Generated from `#/components/schemas/BatchGetValuesByDataFilterRequest/dateTimeRenderOption`.
            public var dateTimeRenderOption: Components.Schemas.BatchGetValuesByDataFilterRequest.DateTimeRenderOptionPayload?
            /// The major dimension that results should use. For example, if the spreadsheet data is: `A1=1,B1=2,A2=3,B2=4`, then a request that selects that range and sets `majorDimension=ROWS` returns `[[1,2],[3,4]]`, whereas a request that sets `majorDimension=COLUMNS` returns `[[1,3],[2,4]]`.
            ///
            /// - Remark: Generated from `#/components/schemas/BatchGetValuesByDataFilterRequest/majorDimension`.
            @frozen public enum MajorDimensionPayload: String, Codable, Hashable, Sendable, CaseIterable {
                case dimensionUnspecified = "DIMENSION_UNSPECIFIED"
                case rows = "ROWS"
                case columns = "COLUMNS"
            }
            /// The major dimension that results should use. For example, if the spreadsheet data is: `A1=1,B1=2,A2=3,B2=4`, then a request that selects that range and sets `majorDimension=ROWS` returns `[[1,2],[3,4]]`, whereas a request that sets `majorDimension=COLUMNS` returns `[[1,3],[2,4]]`.
            ///
            /// - Remark: Generated from `#/components/schemas/BatchGetValuesByDataFilterRequest/majorDimension`.
            public var majorDimension: Components.Schemas.BatchGetValuesByDataFilterRequest.MajorDimensionPayload?
            /// How values should be represented in the output. The default render option is FORMATTED_VALUE.
            ///
            /// - Remark: Generated from `#/components/schemas/BatchGetValuesByDataFilterRequest/valueRenderOption`.
            @frozen public enum ValueRenderOptionPayload: String, Codable, Hashable, Sendable, CaseIterable {
                case formattedValue = "FORMATTED_VALUE"
                case unformattedValue = "UNFORMATTED_VALUE"
                case formula = "FORMULA"
            }
            /// How values should be represented in the output. The default render option is FORMATTED_VALUE.
            ///
            /// - Remark: Generated from `#/components/schemas/BatchGetValuesByDataFilterRequest/valueRenderOption`.
            public var valueRenderOption: Components.Schemas.BatchGetValuesByDataFilterRequest.ValueRenderOptionPayload?
            /// Creates a new `BatchGetValuesByDataFilterRequest`.
            ///
            /// - Parameters:
            ///   - dataFilters: The data filters used to match the ranges of values to retrieve. Ranges that match any of the specified data filters are included in the response.
            ///   - dateTimeRenderOption: How dates, times, and durations should be represented in the output. This is ignored if value_render_option is FORMATTED_VALUE. The default dateTime render option is SERIAL_NUMBER.
            ///   - majorDimension: The major dimension that results should use. For example, if the spreadsheet data is: `A1=1,B1=2,A2=3,B2=4`, then a request that selects that range and sets `majorDimension=ROWS` returns `[[1,2],[3,4]]`, whereas a request that sets `majorDimension=COLUMNS` returns `[[1,3],[2,4]]`.
            ///   - valueRenderOption: How values should be represented in the output. The default render option is FORMATTED_VALUE.
            public init(
                dataFilters: [Components.Schemas.DataFilter]? = nil,
                dateTimeRenderOption: Components.Schemas.BatchGetValuesByDataFilterRequest.DateTimeRenderOptionPayload? = nil,
                majorDimension: Components.Schemas.BatchGetValuesByDataFilterRequest.MajorDimensionPayload? = nil,
                valueRenderOption: Components.Schemas.BatchGetValuesByDataFilterRequest.ValueRenderOptionPayload? = nil
            ) {
                self.dataFilters = dataFilters
                self.dateTimeRenderOption = dateTimeRenderOption
                self.majorDimension = majorDimension
                self.valueRenderOption = valueRenderOption
            }
            public enum CodingKeys: String, CodingKey {
                case dataFilters
                case dateTimeRenderOption
                case majorDimension
                case valueRenderOption
            }
        }
        /// The response when retrieving more than one range of values in a spreadsheet selected by DataFilters.
        ///
        /// - Remark: Generated from `#/components/schemas/BatchGetValuesByDataFilterResponse`.
        public struct BatchGetValuesByDataFilterResponse: Codable, Hashable, Sendable {
            /// The ID of the spreadsheet the data was retrieved from.
            ///
            /// - Remark: Generated from `#/components/schemas/BatchGetValuesByDataFilterResponse/spreadsheetId`.
            public var spreadsheetId: Swift.String?
            /// The requested values with the list of data filters that matched them.
            ///
            /// - Remark: Generated from `#/components/schemas/BatchGetValuesByDataFilterResponse/valueRanges`.
            public var valueRanges: [Components.Schemas.MatchedValueRange]?
            /// Creates a new `BatchGetValuesByDataFilterResponse`.
            ///
            /// - Parameters:
            ///   - spreadsheetId: The ID of the spreadsheet the data was retrieved from.
            ///   - valueRanges: The requested values with the list of data filters that matched them.
            public init(
                spreadsheetId: Swift.String? = nil,
                valueRanges: [Components.Schemas.MatchedValueRange]? = nil
            ) {
                self.spreadsheetId = spreadsheetId
                self.valueRanges = valueRanges
            }
            public enum CodingKeys: String, CodingKey {
                case spreadsheetId
                case valueRanges
            }
        }
        /// The response when retrieving more than one range of values in a spreadsheet.
        ///
        /// - Remark: Generated from `#/components/schemas/BatchGetValuesResponse`.
        public struct BatchGetValuesResponse: Codable, Hashable, Sendable {
            /// The ID of the spreadsheet the data was retrieved from.
            ///
            /// - Remark: Generated from `#/components/schemas/BatchGetValuesResponse/spreadsheetId`.
            public var spreadsheetId: Swift.String?
            /// The requested values. The order of the ValueRanges is the same as the order of the requested ranges.
            ///
            /// - Remark: Generated from `#/components/schemas/BatchGetValuesResponse/valueRanges`.
            public var valueRanges: [Components.Schemas.ValueRange]?
            /// Creates a new `BatchGetValuesResponse`.
            ///
            /// - Parameters:
            ///   - spreadsheetId: The ID of the spreadsheet the data was retrieved from.
            ///   - valueRanges: The requested values. The order of the ValueRanges is the same as the order of the requested ranges.
            public init(
                spreadsheetId: Swift.String? = nil,
                valueRanges: [Components.Schemas.ValueRange]? = nil
            ) {
                self.spreadsheetId = spreadsheetId
                self.valueRanges = valueRanges
            }
            public enum CodingKeys: String, CodingKey {
                case spreadsheetId
                case valueRanges
            }
        }
        /// The request for updating any aspect of a spreadsheet.
        ///
        /// - Remark: Generated from `#/components/schemas/BatchUpdateSpreadsheetRequest`.
        public struct BatchUpdateSpreadsheetRequest: Codable, Hashable, Sendable {
            /// Determines if the update response should include the spreadsheet resource.
            ///
            /// - Remark: Generated from `#/components/schemas/BatchUpdateSpreadsheetRequest/includeSpreadsheetInResponse`.
            public var includeSpreadsheetInResponse: Swift.Bool?
            /// A list of updates to apply to the spreadsheet. Requests will be applied in the order they are specified. If any request is not valid, no requests will be applied.
            ///
            /// - Remark: Generated from `#/components/schemas/BatchUpdateSpreadsheetRequest/requests`.
            public var requests: [Components.Schemas.Request]?
            /// True if grid data should be returned. Meaningful only if include_spreadsheet_in_response is 'true'. This parameter is ignored if a field mask was set in the request.
            ///
            /// - Remark: Generated from `#/components/schemas/BatchUpdateSpreadsheetRequest/responseIncludeGridData`.
            public var responseIncludeGridData: Swift.Bool?
            /// Limits the ranges included in the response spreadsheet. Meaningful only if include_spreadsheet_in_response is 'true'.
            ///
            /// - Remark: Generated from `#/components/schemas/BatchUpdateSpreadsheetRequest/responseRanges`.
            public var responseRanges: [Swift.String]?
            /// Creates a new `BatchUpdateSpreadsheetRequest`.
            ///
            /// - Parameters:
            ///   - includeSpreadsheetInResponse: Determines if the update response should include the spreadsheet resource.
            ///   - requests: A list of updates to apply to the spreadsheet. Requests will be applied in the order they are specified. If any request is not valid, no requests will be applied.
            ///   - responseIncludeGridData: True if grid data should be returned. Meaningful only if include_spreadsheet_in_response is 'true'. This parameter is ignored if a field mask was set in the request.
            ///   - responseRanges: Limits the ranges included in the response spreadsheet. Meaningful only if include_spreadsheet_in_response is 'true'.
            public init(
                includeSpreadsheetInResponse: Swift.Bool? = nil,
                requests: [Components.Schemas.Request]? = nil,
                responseIncludeGridData: Swift.Bool? = nil,
                responseRanges: [Swift.String]? = nil
            ) {
                self.includeSpreadsheetInResponse = includeSpreadsheetInResponse
                self.requests = requests
                self.responseIncludeGridData = responseIncludeGridData
                self.responseRanges = responseRanges
            }
            public enum CodingKeys: String, CodingKey {
                case includeSpreadsheetInResponse
                case requests
                case responseIncludeGridData
                case responseRanges
            }
        }
        /// The reply for batch updating a spreadsheet.
        ///
        /// - Remark: Generated from `#/components/schemas/BatchUpdateSpreadsheetResponse`.
        public struct BatchUpdateSpreadsheetResponse: Codable, Hashable, Sendable {
            /// The reply of the updates. This maps 1:1 with the updates, although replies to some requests may be empty.
            ///
            /// - Remark: Generated from `#/components/schemas/BatchUpdateSpreadsheetResponse/replies`.
            public var replies: [Components.Schemas.Response]?
            /// The spreadsheet the updates were applied to.
            ///
            /// - Remark: Generated from `#/components/schemas/BatchUpdateSpreadsheetResponse/spreadsheetId`.
            public var spreadsheetId: Swift.String?
            /// - Remark: Generated from `#/components/schemas/BatchUpdateSpreadsheetResponse/updatedSpreadsheet`.
            public var updatedSpreadsheet: Components.Schemas.Spreadsheet?
            /// Creates a new `BatchUpdateSpreadsheetResponse`.
            ///
            /// - Parameters:
            ///   - replies: The reply of the updates. This maps 1:1 with the updates, although replies to some requests may be empty.
            ///   - spreadsheetId: The spreadsheet the updates were applied to.
            ///   - updatedSpreadsheet:
            public init(
                replies: [Components.Schemas.Response]? = nil,
                spreadsheetId: Swift.String? = nil,
                updatedSpreadsheet: Components.Schemas.Spreadsheet? = nil
            ) {
                self.replies = replies
                self.spreadsheetId = spreadsheetId
                self.updatedSpreadsheet = updatedSpreadsheet
            }
            public enum CodingKeys: String, CodingKey {
                case replies
                case spreadsheetId
                case updatedSpreadsheet
            }
        }
        /// The request for updating more than one range of values in a spreadsheet.
        ///
        /// - Remark: Generated from `#/components/schemas/BatchUpdateValuesByDataFilterRequest`.
        public struct BatchUpdateValuesByDataFilterRequest: Codable, Hashable, Sendable {
            /// The new values to apply to the spreadsheet. If more than one range is matched by the specified DataFilter the specified values are applied to all of those ranges.
            ///
            /// - Remark: Generated from `#/components/schemas/BatchUpdateValuesByDataFilterRequest/data`.
            public var data: [Components.Schemas.DataFilterValueRange]?
            /// Determines if the update response should include the values of the cells that were updated. By default, responses do not include the updated values. The `updatedData` field within each of the BatchUpdateValuesResponse.responses contains the updated values. If the range to write was larger than the range actually written, the response includes all values in the requested range (excluding trailing empty rows and columns).
            ///
            /// - Remark: Generated from `#/components/schemas/BatchUpdateValuesByDataFilterRequest/includeValuesInResponse`.
            public var includeValuesInResponse: Swift.Bool?
            /// Determines how dates, times, and durations in the response should be rendered. This is ignored if response_value_render_option is FORMATTED_VALUE. The default dateTime render option is SERIAL_NUMBER.
            ///
            /// - Remark: Generated from `#/components/schemas/BatchUpdateValuesByDataFilterRequest/responseDateTimeRenderOption`.
            @frozen public enum ResponseDateTimeRenderOptionPayload: String, Codable, Hashable, Sendable, CaseIterable {
                case serialNumber = "SERIAL_NUMBER"
                case formattedString = "FORMATTED_STRING"
            }
            /// Determines how dates, times, and durations in the response should be rendered. This is ignored if response_value_render_option is FORMATTED_VALUE. The default dateTime render option is SERIAL_NUMBER.
            ///
            /// - Remark: Generated from `#/components/schemas/BatchUpdateValuesByDataFilterRequest/responseDateTimeRenderOption`.
            public var responseDateTimeRenderOption: Components.Schemas.BatchUpdateValuesByDataFilterRequest.ResponseDateTimeRenderOptionPayload?
            /// Determines how values in the response should be rendered. The default render option is FORMATTED_VALUE.
            ///
            /// - Remark: Generated from `#/components/schemas/BatchUpdateValuesByDataFilterRequest/responseValueRenderOption`.
            @frozen public enum ResponseValueRenderOptionPayload: String, Codable, Hashable, Sendable, CaseIterable {
                case formattedValue = "FORMATTED_VALUE"
                case unformattedValue = "UNFORMATTED_VALUE"
                case formula = "FORMULA"
            }
            /// Determines how values in the response should be rendered. The default render option is FORMATTED_VALUE.
            ///
            /// - Remark: Generated from `#/components/schemas/BatchUpdateValuesByDataFilterRequest/responseValueRenderOption`.
            public var responseValueRenderOption: Components.Schemas.BatchUpdateValuesByDataFilterRequest.ResponseValueRenderOptionPayload?
            /// How the input data should be interpreted.
            ///
            /// - Remark: Generated from `#/components/schemas/BatchUpdateValuesByDataFilterRequest/valueInputOption`.
            @frozen public enum ValueInputOptionPayload: String, Codable, Hashable, Sendable, CaseIterable {
                case inputValueOptionUnspecified = "INPUT_VALUE_OPTION_UNSPECIFIED"
                case raw = "RAW"
                case userEntered = "USER_ENTERED"
            }
            /// How the input data should be interpreted.
            ///
            /// - Remark: Generated from `#/components/schemas/BatchUpdateValuesByDataFilterRequest/valueInputOption`.
            public var valueInputOption: Components.Schemas.BatchUpdateValuesByDataFilterRequest.ValueInputOptionPayload?
            /// Creates a new `BatchUpdateValuesByDataFilterRequest`.
            ///
            /// - Parameters:
            ///   - data: The new values to apply to the spreadsheet. If more than one range is matched by the specified DataFilter the specified values are applied to all of those ranges.
            ///   - includeValuesInResponse: Determines if the update response should include the values of the cells that were updated. By default, responses do not include the updated values. The `updatedData` field within each of the BatchUpdateValuesResponse.responses contains the updated values. If the range to write was larger than the range actually written, the response includes all values in the requested range (excluding trailing empty rows and columns).
            ///   - responseDateTimeRenderOption: Determines how dates, times, and durations in the response should be rendered. This is ignored if response_value_render_option is FORMATTED_VALUE. The default dateTime render option is SERIAL_NUMBER.
            ///   - responseValueRenderOption: Determines how values in the response should be rendered. The default render option is FORMATTED_VALUE.
            ///   - valueInputOption: How the input data should be interpreted.
            public init(
                data: [Components.Schemas.DataFilterValueRange]? = nil,
                includeValuesInResponse: Swift.Bool? = nil,
                responseDateTimeRenderOption: Components.Schemas.BatchUpdateValuesByDataFilterRequest.ResponseDateTimeRenderOptionPayload? = nil,
                responseValueRenderOption: Components.Schemas.BatchUpdateValuesByDataFilterRequest.ResponseValueRenderOptionPayload? = nil,
                valueInputOption: Components.Schemas.BatchUpdateValuesByDataFilterRequest.ValueInputOptionPayload? = nil
            ) {
                self.data = data
                self.includeValuesInResponse = includeValuesInResponse
                self.responseDateTimeRenderOption = responseDateTimeRenderOption
                self.responseValueRenderOption = responseValueRenderOption
                self.valueInputOption = valueInputOption
            }
            public enum CodingKeys: String, CodingKey {
                case data
                case includeValuesInResponse
                case responseDateTimeRenderOption
                case responseValueRenderOption
                case valueInputOption
            }
        }
        /// The response when updating a range of values in a spreadsheet.
        ///
        /// - Remark: Generated from `#/components/schemas/BatchUpdateValuesByDataFilterResponse`.
        public struct BatchUpdateValuesByDataFilterResponse: Codable, Hashable, Sendable {
            /// The response for each range updated.
            ///
            /// - Remark: Generated from `#/components/schemas/BatchUpdateValuesByDataFilterResponse/responses`.
            public var responses: [Components.Schemas.UpdateValuesByDataFilterResponse]?
            /// The spreadsheet the updates were applied to.
            ///
            /// - Remark: Generated from `#/components/schemas/BatchUpdateValuesByDataFilterResponse/spreadsheetId`.
            public var spreadsheetId: Swift.String?
            /// The total number of cells updated.
            ///
            /// - Remark: Generated from `#/components/schemas/BatchUpdateValuesByDataFilterResponse/totalUpdatedCells`.
            public var totalUpdatedCells: Swift.Int32?
            /// The total number of columns where at least one cell in the column was updated.
            ///
            /// - Remark: Generated from `#/components/schemas/BatchUpdateValuesByDataFilterResponse/totalUpdatedColumns`.
            public var totalUpdatedColumns: Swift.Int32?
            /// The total number of rows where at least one cell in the row was updated.
            ///
            /// - Remark: Generated from `#/components/schemas/BatchUpdateValuesByDataFilterResponse/totalUpdatedRows`.
            public var totalUpdatedRows: Swift.Int32?
            /// The total number of sheets where at least one cell in the sheet was updated.
            ///
            /// - Remark: Generated from `#/components/schemas/BatchUpdateValuesByDataFilterResponse/totalUpdatedSheets`.
            public var totalUpdatedSheets: Swift.Int32?
            /// Creates a new `BatchUpdateValuesByDataFilterResponse`.
            ///
            /// - Parameters:
            ///   - responses: The response for each range updated.
            ///   - spreadsheetId: The spreadsheet the updates were applied to.
            ///   - totalUpdatedCells: The total number of cells updated.
            ///   - totalUpdatedColumns: The total number of columns where at least one cell in the column was updated.
            ///   - totalUpdatedRows: The total number of rows where at least one cell in the row was updated.
            ///   - totalUpdatedSheets: The total number of sheets where at least one cell in the sheet was updated.
            public init(
                responses: [Components.Schemas.UpdateValuesByDataFilterResponse]? = nil,
                spreadsheetId: Swift.String? = nil,
                totalUpdatedCells: Swift.Int32? = nil,
                totalUpdatedColumns: Swift.Int32? = nil,
                totalUpdatedRows: Swift.Int32? = nil,
                totalUpdatedSheets: Swift.Int32? = nil
            ) {
                self.responses = responses
                self.spreadsheetId = spreadsheetId
                self.totalUpdatedCells = totalUpdatedCells
                self.totalUpdatedColumns = totalUpdatedColumns
                self.totalUpdatedRows = totalUpdatedRows
                self.totalUpdatedSheets = totalUpdatedSheets
            }
            public enum CodingKeys: String, CodingKey {
                case responses
                case spreadsheetId
                case totalUpdatedCells
                case totalUpdatedColumns
                case totalUpdatedRows
                case totalUpdatedSheets
            }
        }
        /// The request for updating more than one range of values in a spreadsheet.
        ///
        /// - Remark: Generated from `#/components/schemas/BatchUpdateValuesRequest`.
        public struct BatchUpdateValuesRequest: Codable, Hashable, Sendable {
            /// The new values to apply to the spreadsheet.
            ///
            /// - Remark: Generated from `#/components/schemas/BatchUpdateValuesRequest/data`.
            public var data: [Components.Schemas.ValueRange]?
            /// Determines if the update response should include the values of the cells that were updated. By default, responses do not include the updated values. The `updatedData` field within each of the BatchUpdateValuesResponse.responses contains the updated values. If the range to write was larger than the range actually written, the response includes all values in the requested range (excluding trailing empty rows and columns).
            ///
            /// - Remark: Generated from `#/components/schemas/BatchUpdateValuesRequest/includeValuesInResponse`.
            public var includeValuesInResponse: Swift.Bool?
            /// Determines how dates, times, and durations in the response should be rendered. This is ignored if response_value_render_option is FORMATTED_VALUE. The default dateTime render option is SERIAL_NUMBER.
            ///
            /// - Remark: Generated from `#/components/schemas/BatchUpdateValuesRequest/responseDateTimeRenderOption`.
            @frozen public enum ResponseDateTimeRenderOptionPayload: String, Codable, Hashable, Sendable, CaseIterable {
                case serialNumber = "SERIAL_NUMBER"
                case formattedString = "FORMATTED_STRING"
            }
            /// Determines how dates, times, and durations in the response should be rendered. This is ignored if response_value_render_option is FORMATTED_VALUE. The default dateTime render option is SERIAL_NUMBER.
            ///
            /// - Remark: Generated from `#/components/schemas/BatchUpdateValuesRequest/responseDateTimeRenderOption`.
            public var responseDateTimeRenderOption: Components.Schemas.BatchUpdateValuesRequest.ResponseDateTimeRenderOptionPayload?
            /// Determines how values in the response should be rendered. The default render option is FORMATTED_VALUE.
            ///
            /// - Remark: Generated from `#/components/schemas/BatchUpdateValuesRequest/responseValueRenderOption`.
            @frozen public enum ResponseValueRenderOptionPayload: String, Codable, Hashable, Sendable, CaseIterable {
                case formattedValue = "FORMATTED_VALUE"
                case unformattedValue = "UNFORMATTED_VALUE"
                case formula = "FORMULA"
            }
            /// Determines how values in the response should be rendered. The default render option is FORMATTED_VALUE.
            ///
            /// - Remark: Generated from `#/components/schemas/BatchUpdateValuesRequest/responseValueRenderOption`.
            public var responseValueRenderOption: Components.Schemas.BatchUpdateValuesRequest.ResponseValueRenderOptionPayload?
            /// How the input data should be interpreted.
            ///
            /// - Remark: Generated from `#/components/schemas/BatchUpdateValuesRequest/valueInputOption`.
            @frozen public enum ValueInputOptionPayload: String, Codable, Hashable, Sendable, CaseIterable {
                case inputValueOptionUnspecified = "INPUT_VALUE_OPTION_UNSPECIFIED"
                case raw = "RAW"
                case userEntered = "USER_ENTERED"
            }
            /// How the input data should be interpreted.
            ///
            /// - Remark: Generated from `#/components/schemas/BatchUpdateValuesRequest/valueInputOption`.
            public var valueInputOption: Components.Schemas.BatchUpdateValuesRequest.ValueInputOptionPayload?
            /// Creates a new `BatchUpdateValuesRequest`.
            ///
            /// - Parameters:
            ///   - data: The new values to apply to the spreadsheet.
            ///   - includeValuesInResponse: Determines if the update response should include the values of the cells that were updated. By default, responses do not include the updated values. The `updatedData` field within each of the BatchUpdateValuesResponse.responses contains the updated values. If the range to write was larger than the range actually written, the response includes all values in the requested range (excluding trailing empty rows and columns).
            ///   - responseDateTimeRenderOption: Determines how dates, times, and durations in the response should be rendered. This is ignored if response_value_render_option is FORMATTED_VALUE. The default dateTime render option is SERIAL_NUMBER.
            ///   - responseValueRenderOption: Determines how values in the response should be rendered. The default render option is FORMATTED_VALUE.
            ///   - valueInputOption: How the input data should be interpreted.
            public init(
                data: [Components.Schemas.ValueRange]? = nil,
                includeValuesInResponse: Swift.Bool? = nil,
                responseDateTimeRenderOption: Components.Schemas.BatchUpdateValuesRequest.ResponseDateTimeRenderOptionPayload? = nil,
                responseValueRenderOption: Components.Schemas.BatchUpdateValuesRequest.ResponseValueRenderOptionPayload? = nil,
                valueInputOption: Components.Schemas.BatchUpdateValuesRequest.ValueInputOptionPayload? = nil
            ) {
                self.data = data
                self.includeValuesInResponse = includeValuesInResponse
                self.responseDateTimeRenderOption = responseDateTimeRenderOption
                self.responseValueRenderOption = responseValueRenderOption
                self.valueInputOption = valueInputOption
            }
            public enum CodingKeys: String, CodingKey {
                case data
                case includeValuesInResponse
                case responseDateTimeRenderOption
                case responseValueRenderOption
                case valueInputOption
            }
        }
        /// The response when updating a range of values in a spreadsheet.
        ///
        /// - Remark: Generated from `#/components/schemas/BatchUpdateValuesResponse`.
        public struct BatchUpdateValuesResponse: Codable, Hashable, Sendable {
            /// One UpdateValuesResponse per requested range, in the same order as the requests appeared.
            ///
            /// - Remark: Generated from `#/components/schemas/BatchUpdateValuesResponse/responses`.
            public var responses: [Components.Schemas.UpdateValuesResponse]?
            /// The spreadsheet the updates were applied to.
            ///
            /// - Remark: Generated from `#/components/schemas/BatchUpdateValuesResponse/spreadsheetId`.
            public var spreadsheetId: Swift.String?
            /// The total number of cells updated.
            ///
            /// - Remark: Generated from `#/components/schemas/BatchUpdateValuesResponse/totalUpdatedCells`.
            public var totalUpdatedCells: Swift.Int32?
            /// The total number of columns where at least one cell in the column was updated.
            ///
            /// - Remark: Generated from `#/components/schemas/BatchUpdateValuesResponse/totalUpdatedColumns`.
            public var totalUpdatedColumns: Swift.Int32?
            /// The total number of rows where at least one cell in the row was updated.
            ///
            /// - Remark: Generated from `#/components/schemas/BatchUpdateValuesResponse/totalUpdatedRows`.
            public var totalUpdatedRows: Swift.Int32?
            /// The total number of sheets where at least one cell in the sheet was updated.
            ///
            /// - Remark: Generated from `#/components/schemas/BatchUpdateValuesResponse/totalUpdatedSheets`.
            public var totalUpdatedSheets: Swift.Int32?
            /// Creates a new `BatchUpdateValuesResponse`.
            ///
            /// - Parameters:
            ///   - responses: One UpdateValuesResponse per requested range, in the same order as the requests appeared.
            ///   - spreadsheetId: The spreadsheet the updates were applied to.
            ///   - totalUpdatedCells: The total number of cells updated.
            ///   - totalUpdatedColumns: The total number of columns where at least one cell in the column was updated.
            ///   - totalUpdatedRows: The total number of rows where at least one cell in the row was updated.
            ///   - totalUpdatedSheets: The total number of sheets where at least one cell in the sheet was updated.
            public init(
                responses: [Components.Schemas.UpdateValuesResponse]? = nil,
                spreadsheetId: Swift.String? = nil,
                totalUpdatedCells: Swift.Int32? = nil,
                totalUpdatedColumns: Swift.Int32? = nil,
                totalUpdatedRows: Swift.Int32? = nil,
                totalUpdatedSheets: Swift.Int32? = nil
            ) {
                self.responses = responses
                self.spreadsheetId = spreadsheetId
                self.totalUpdatedCells = totalUpdatedCells
                self.totalUpdatedColumns = totalUpdatedColumns
                self.totalUpdatedRows = totalUpdatedRows
                self.totalUpdatedSheets = totalUpdatedSheets
            }
            public enum CodingKeys: String, CodingKey {
                case responses
                case spreadsheetId
                case totalUpdatedCells
                case totalUpdatedColumns
                case totalUpdatedRows
                case totalUpdatedSheets
            }
        }
        /// The specification of a BigQuery data source that's connected to a sheet.
        ///
        /// - Remark: Generated from `#/components/schemas/BigQueryDataSourceSpec`.
        public struct BigQueryDataSourceSpec: Codable, Hashable, Sendable {
            /// The ID of a BigQuery enabled Google Cloud project with a billing account attached. For any queries executed against the data source, the project is charged.
            ///
            /// - Remark: Generated from `#/components/schemas/BigQueryDataSourceSpec/projectId`.
            public var projectId: Swift.String?
            /// - Remark: Generated from `#/components/schemas/BigQueryDataSourceSpec/querySpec`.
            public var querySpec: Components.Schemas.BigQueryQuerySpec?
            /// - Remark: Generated from `#/components/schemas/BigQueryDataSourceSpec/tableSpec`.
            public var tableSpec: Components.Schemas.BigQueryTableSpec?
            /// Creates a new `BigQueryDataSourceSpec`.
            ///
            /// - Parameters:
            ///   - projectId: The ID of a BigQuery enabled Google Cloud project with a billing account attached. For any queries executed against the data source, the project is charged.
            ///   - querySpec:
            ///   - tableSpec:
            public init(
                projectId: Swift.String? = nil,
                querySpec: Components.Schemas.BigQueryQuerySpec? = nil,
                tableSpec: Components.Schemas.BigQueryTableSpec? = nil
            ) {
                self.projectId = projectId
                self.querySpec = querySpec
                self.tableSpec = tableSpec
            }
            public enum CodingKeys: String, CodingKey {
                case projectId
                case querySpec
                case tableSpec
            }
        }
        /// Specifies a custom BigQuery query.
        ///
        /// - Remark: Generated from `#/components/schemas/BigQueryQuerySpec`.
        public struct BigQueryQuerySpec: Codable, Hashable, Sendable {
            /// The raw query string.
            ///
            /// - Remark: Generated from `#/components/schemas/BigQueryQuerySpec/rawQuery`.
            public var rawQuery: Swift.String?
            /// Creates a new `BigQueryQuerySpec`.
            ///
            /// - Parameters:
            ///   - rawQuery: The raw query string.
            public init(rawQuery: Swift.String? = nil) {
                self.rawQuery = rawQuery
            }
            public enum CodingKeys: String, CodingKey {
                case rawQuery
            }
        }
        /// Specifies a BigQuery table definition. Only [native tables](https://cloud.google.com/bigquery/docs/tables-intro) are allowed.
        ///
        /// - Remark: Generated from `#/components/schemas/BigQueryTableSpec`.
        public struct BigQueryTableSpec: Codable, Hashable, Sendable {
            /// The BigQuery dataset id.
            ///
            /// - Remark: Generated from `#/components/schemas/BigQueryTableSpec/datasetId`.
            public var datasetId: Swift.String?
            /// The BigQuery table id.
            ///
            /// - Remark: Generated from `#/components/schemas/BigQueryTableSpec/tableId`.
            public var tableId: Swift.String?
            /// The ID of a BigQuery project the table belongs to. If not specified, the project_id is assumed.
            ///
            /// - Remark: Generated from `#/components/schemas/BigQueryTableSpec/tableProjectId`.
            public var tableProjectId: Swift.String?
            /// Creates a new `BigQueryTableSpec`.
            ///
            /// - Parameters:
            ///   - datasetId: The BigQuery dataset id.
            ///   - tableId: The BigQuery table id.
            ///   - tableProjectId: The ID of a BigQuery project the table belongs to. If not specified, the project_id is assumed.
            public init(
                datasetId: Swift.String? = nil,
                tableId: Swift.String? = nil,
                tableProjectId: Swift.String? = nil
            ) {
                self.datasetId = datasetId
                self.tableId = tableId
                self.tableProjectId = tableProjectId
            }
            public enum CodingKeys: String, CodingKey {
                case datasetId
                case tableId
                case tableProjectId
            }
        }
        /// A condition that can evaluate to true or false. BooleanConditions are used by conditional formatting, data validation, and the criteria in filters.
        ///
        /// - Remark: Generated from `#/components/schemas/BooleanCondition`.
        public struct BooleanCondition: Codable, Hashable, Sendable {
            /// The type of condition.
            ///
            /// - Remark: Generated from `#/components/schemas/BooleanCondition/type`.
            @frozen public enum _TypePayload: String, Codable, Hashable, Sendable, CaseIterable {
                case conditionTypeUnspecified = "CONDITION_TYPE_UNSPECIFIED"
                case numberGreater = "NUMBER_GREATER"
                case numberGreaterThanEq = "NUMBER_GREATER_THAN_EQ"
                case numberLess = "NUMBER_LESS"
                case numberLessThanEq = "NUMBER_LESS_THAN_EQ"
                case numberEq = "NUMBER_EQ"
                case numberNotEq = "NUMBER_NOT_EQ"
                case numberBetween = "NUMBER_BETWEEN"
                case numberNotBetween = "NUMBER_NOT_BETWEEN"
                case textContains = "TEXT_CONTAINS"
                case textNotContains = "TEXT_NOT_CONTAINS"
                case textStartsWith = "TEXT_STARTS_WITH"
                case textEndsWith = "TEXT_ENDS_WITH"
                case textEq = "TEXT_EQ"
                case textIsEmail = "TEXT_IS_EMAIL"
                case textIsUrl = "TEXT_IS_URL"
                case dateEq = "DATE_EQ"
                case dateBefore = "DATE_BEFORE"
                case dateAfter = "DATE_AFTER"
                case dateOnOrBefore = "DATE_ON_OR_BEFORE"
                case dateOnOrAfter = "DATE_ON_OR_AFTER"
                case dateBetween = "DATE_BETWEEN"
                case dateNotBetween = "DATE_NOT_BETWEEN"
                case dateIsValid = "DATE_IS_VALID"
                case oneOfRange = "ONE_OF_RANGE"
                case oneOfList = "ONE_OF_LIST"
                case blank = "BLANK"
                case notBlank = "NOT_BLANK"
                case customFormula = "CUSTOM_FORMULA"
                case boolean = "BOOLEAN"
                case textNotEq = "TEXT_NOT_EQ"
                case dateNotEq = "DATE_NOT_EQ"
                case filterExpression = "FILTER_EXPRESSION"
            }
            /// The type of condition.
            ///
            /// - Remark: Generated from `#/components/schemas/BooleanCondition/type`.
            public var _type: Components.Schemas.BooleanCondition._TypePayload?
            /// The values of the condition. The number of supported values depends on the condition type. Some support zero values, others one or two values, and ConditionType.ONE_OF_LIST supports an arbitrary number of values.
            ///
            /// - Remark: Generated from `#/components/schemas/BooleanCondition/values`.
            public var values: [Components.Schemas.ConditionValue]?
            /// Creates a new `BooleanCondition`.
            ///
            /// - Parameters:
            ///   - _type: The type of condition.
            ///   - values: The values of the condition. The number of supported values depends on the condition type. Some support zero values, others one or two values, and ConditionType.ONE_OF_LIST supports an arbitrary number of values.
            public init(
                _type: Components.Schemas.BooleanCondition._TypePayload? = nil,
                values: [Components.Schemas.ConditionValue]? = nil
            ) {
                self._type = _type
                self.values = values
            }
            public enum CodingKeys: String, CodingKey {
                case _type = "type"
                case values
            }
        }
        /// A rule that may or may not match, depending on the condition.
        ///
        /// - Remark: Generated from `#/components/schemas/BooleanRule`.
        public struct BooleanRule: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/BooleanRule/condition`.
            public var condition: Components.Schemas.BooleanCondition?
            /// - Remark: Generated from `#/components/schemas/BooleanRule/format`.
            public var format: Components.Schemas.CellFormat?
            /// Creates a new `BooleanRule`.
            ///
            /// - Parameters:
            ///   - condition:
            ///   - format:
            public init(
                condition: Components.Schemas.BooleanCondition? = nil,
                format: Components.Schemas.CellFormat? = nil
            ) {
                self.condition = condition
                self.format = format
            }
            public enum CodingKeys: String, CodingKey {
                case condition
                case format
            }
        }
        /// A border along a cell.
        ///
        /// - Remark: Generated from `#/components/schemas/Border`.
        public struct Border: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/Border/color`.
            public var color: Components.Schemas.Color?
            /// - Remark: Generated from `#/components/schemas/Border/colorStyle`.
            public var colorStyle: Components.Schemas.ColorStyle?
            /// The style of the border.
            ///
            /// - Remark: Generated from `#/components/schemas/Border/style`.
            @frozen public enum StylePayload: String, Codable, Hashable, Sendable, CaseIterable {
                case styleUnspecified = "STYLE_UNSPECIFIED"
                case dotted = "DOTTED"
                case dashed = "DASHED"
                case solid = "SOLID"
                case solidMedium = "SOLID_MEDIUM"
                case solidThick = "SOLID_THICK"
                case none = "NONE"
                case double = "DOUBLE"
            }
            /// The style of the border.
            ///
            /// - Remark: Generated from `#/components/schemas/Border/style`.
            public var style: Components.Schemas.Border.StylePayload?
            /// The width of the border, in pixels. Deprecated; the width is determined by the "style" field.
            ///
            /// - Remark: Generated from `#/components/schemas/Border/width`.
            @available(*, deprecated)
            public var width: Swift.Int32?
            /// Creates a new `Border`.
            ///
            /// - Parameters:
            ///   - color:
            ///   - colorStyle:
            ///   - style: The style of the border.
            ///   - width: The width of the border, in pixels. Deprecated; the width is determined by the "style" field.
            public init(
                color: Components.Schemas.Color? = nil,
                colorStyle: Components.Schemas.ColorStyle? = nil,
                style: Components.Schemas.Border.StylePayload? = nil,
                width: Swift.Int32? = nil
            ) {
                self.color = color
                self.colorStyle = colorStyle
                self.style = style
                self.width = width
            }
            public enum CodingKeys: String, CodingKey {
                case color
                case colorStyle
                case style
                case width
            }
        }
        /// The borders of the cell.
        ///
        /// - Remark: Generated from `#/components/schemas/Borders`.
        public struct Borders: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/Borders/bottom`.
            public var bottom: Components.Schemas.Border?
            /// - Remark: Generated from `#/components/schemas/Borders/left`.
            public var left: Components.Schemas.Border?
            /// - Remark: Generated from `#/components/schemas/Borders/right`.
            public var right: Components.Schemas.Border?
            /// - Remark: Generated from `#/components/schemas/Borders/top`.
            public var top: Components.Schemas.Border?
            /// Creates a new `Borders`.
            ///
            /// - Parameters:
            ///   - bottom:
            ///   - left:
            ///   - right:
            ///   - top:
            public init(
                bottom: Components.Schemas.Border? = nil,
                left: Components.Schemas.Border? = nil,
                right: Components.Schemas.Border? = nil,
                top: Components.Schemas.Border? = nil
            ) {
                self.bottom = bottom
                self.left = left
                self.right = right
                self.top = top
            }
            public enum CodingKeys: String, CodingKey {
                case bottom
                case left
                case right
                case top
            }
        }
        /// A bubble chart.
        ///
        /// - Remark: Generated from `#/components/schemas/BubbleChartSpec`.
        public struct BubbleChartSpec: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/BubbleChartSpec/bubbleBorderColor`.
            public var bubbleBorderColor: Components.Schemas.Color?
            /// - Remark: Generated from `#/components/schemas/BubbleChartSpec/bubbleBorderColorStyle`.
            public var bubbleBorderColorStyle: Components.Schemas.ColorStyle?
            /// - Remark: Generated from `#/components/schemas/BubbleChartSpec/bubbleLabels`.
            public var bubbleLabels: Components.Schemas.ChartData?
            /// The max radius size of the bubbles, in pixels. If specified, the field must be a positive value.
            ///
            /// - Remark: Generated from `#/components/schemas/BubbleChartSpec/bubbleMaxRadiusSize`.
            public var bubbleMaxRadiusSize: Swift.Int32?
            /// The minimum radius size of the bubbles, in pixels. If specific, the field must be a positive value.
            ///
            /// - Remark: Generated from `#/components/schemas/BubbleChartSpec/bubbleMinRadiusSize`.
            public var bubbleMinRadiusSize: Swift.Int32?
            /// The opacity of the bubbles between 0 and 1.0. 0 is fully transparent and 1 is fully opaque.
            ///
            /// - Remark: Generated from `#/components/schemas/BubbleChartSpec/bubbleOpacity`.
            public var bubbleOpacity: Swift.Float?
            /// - Remark: Generated from `#/components/schemas/BubbleChartSpec/bubbleSizes`.
            public var bubbleSizes: Components.Schemas.ChartData?
            /// - Remark: Generated from `#/components/schemas/BubbleChartSpec/bubbleTextStyle`.
            public var bubbleTextStyle: Components.Schemas.TextFormat?
            /// - Remark: Generated from `#/components/schemas/BubbleChartSpec/domain`.
            public var domain: Components.Schemas.ChartData?
            /// - Remark: Generated from `#/components/schemas/BubbleChartSpec/groupIds`.
            public var groupIds: Components.Schemas.ChartData?
            /// Where the legend of the chart should be drawn.
            ///
            /// - Remark: Generated from `#/components/schemas/BubbleChartSpec/legendPosition`.
            @frozen public enum LegendPositionPayload: String, Codable, Hashable, Sendable, CaseIterable {
                case bubbleChartLegendPositionUnspecified = "BUBBLE_CHART_LEGEND_POSITION_UNSPECIFIED"
                case bottomLegend = "BOTTOM_LEGEND"
                case leftLegend = "LEFT_LEGEND"
                case rightLegend = "RIGHT_LEGEND"
                case topLegend = "TOP_LEGEND"
                case noLegend = "NO_LEGEND"
                case insideLegend = "INSIDE_LEGEND"
            }
            /// Where the legend of the chart should be drawn.
            ///
            /// - Remark: Generated from `#/components/schemas/BubbleChartSpec/legendPosition`.
            public var legendPosition: Components.Schemas.BubbleChartSpec.LegendPositionPayload?
            /// - Remark: Generated from `#/components/schemas/BubbleChartSpec/series`.
            public var series: Components.Schemas.ChartData?
            /// Creates a new `BubbleChartSpec`.
            ///
            /// - Parameters:
            ///   - bubbleBorderColor:
            ///   - bubbleBorderColorStyle:
            ///   - bubbleLabels:
            ///   - bubbleMaxRadiusSize: The max radius size of the bubbles, in pixels. If specified, the field must be a positive value.
            ///   - bubbleMinRadiusSize: The minimum radius size of the bubbles, in pixels. If specific, the field must be a positive value.
            ///   - bubbleOpacity: The opacity of the bubbles between 0 and 1.0. 0 is fully transparent and 1 is fully opaque.
            ///   - bubbleSizes:
            ///   - bubbleTextStyle:
            ///   - domain:
            ///   - groupIds:
            ///   - legendPosition: Where the legend of the chart should be drawn.
            ///   - series:
            public init(
                bubbleBorderColor: Components.Schemas.Color? = nil,
                bubbleBorderColorStyle: Components.Schemas.ColorStyle? = nil,
                bubbleLabels: Components.Schemas.ChartData? = nil,
                bubbleMaxRadiusSize: Swift.Int32? = nil,
                bubbleMinRadiusSize: Swift.Int32? = nil,
                bubbleOpacity: Swift.Float? = nil,
                bubbleSizes: Components.Schemas.ChartData? = nil,
                bubbleTextStyle: Components.Schemas.TextFormat? = nil,
                domain: Components.Schemas.ChartData? = nil,
                groupIds: Components.Schemas.ChartData? = nil,
                legendPosition: Components.Schemas.BubbleChartSpec.LegendPositionPayload? = nil,
                series: Components.Schemas.ChartData? = nil
            ) {
                self.bubbleBorderColor = bubbleBorderColor
                self.bubbleBorderColorStyle = bubbleBorderColorStyle
                self.bubbleLabels = bubbleLabels
                self.bubbleMaxRadiusSize = bubbleMaxRadiusSize
                self.bubbleMinRadiusSize = bubbleMinRadiusSize
                self.bubbleOpacity = bubbleOpacity
                self.bubbleSizes = bubbleSizes
                self.bubbleTextStyle = bubbleTextStyle
                self.domain = domain
                self.groupIds = groupIds
                self.legendPosition = legendPosition
                self.series = series
            }
            public enum CodingKeys: String, CodingKey {
                case bubbleBorderColor
                case bubbleBorderColorStyle
                case bubbleLabels
                case bubbleMaxRadiusSize
                case bubbleMinRadiusSize
                case bubbleOpacity
                case bubbleSizes
                case bubbleTextStyle
                case domain
                case groupIds
                case legendPosition
                case series
            }
        }
        /// A candlestick chart.
        ///
        /// - Remark: Generated from `#/components/schemas/CandlestickChartSpec`.
        public struct CandlestickChartSpec: Codable, Hashable, Sendable {
            /// The Candlestick chart data. Only one CandlestickData is supported.
            ///
            /// - Remark: Generated from `#/components/schemas/CandlestickChartSpec/data`.
            public var data: [Components.Schemas.CandlestickData]?
            /// - Remark: Generated from `#/components/schemas/CandlestickChartSpec/domain`.
            public var domain: Components.Schemas.CandlestickDomain?
            /// Creates a new `CandlestickChartSpec`.
            ///
            /// - Parameters:
            ///   - data: The Candlestick chart data. Only one CandlestickData is supported.
            ///   - domain:
            public init(
                data: [Components.Schemas.CandlestickData]? = nil,
                domain: Components.Schemas.CandlestickDomain? = nil
            ) {
                self.data = data
                self.domain = domain
            }
            public enum CodingKeys: String, CodingKey {
                case data
                case domain
            }
        }
        /// The Candlestick chart data, each containing the low, open, close, and high values for a series.
        ///
        /// - Remark: Generated from `#/components/schemas/CandlestickData`.
        public struct CandlestickData: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/CandlestickData/closeSeries`.
            public var closeSeries: Components.Schemas.CandlestickSeries?
            /// - Remark: Generated from `#/components/schemas/CandlestickData/highSeries`.
            public var highSeries: Components.Schemas.CandlestickSeries?
            /// - Remark: Generated from `#/components/schemas/CandlestickData/lowSeries`.
            public var lowSeries: Components.Schemas.CandlestickSeries?
            /// - Remark: Generated from `#/components/schemas/CandlestickData/openSeries`.
            public var openSeries: Components.Schemas.CandlestickSeries?
            /// Creates a new `CandlestickData`.
            ///
            /// - Parameters:
            ///   - closeSeries:
            ///   - highSeries:
            ///   - lowSeries:
            ///   - openSeries:
            public init(
                closeSeries: Components.Schemas.CandlestickSeries? = nil,
                highSeries: Components.Schemas.CandlestickSeries? = nil,
                lowSeries: Components.Schemas.CandlestickSeries? = nil,
                openSeries: Components.Schemas.CandlestickSeries? = nil
            ) {
                self.closeSeries = closeSeries
                self.highSeries = highSeries
                self.lowSeries = lowSeries
                self.openSeries = openSeries
            }
            public enum CodingKeys: String, CodingKey {
                case closeSeries
                case highSeries
                case lowSeries
                case openSeries
            }
        }
        /// The domain of a CandlestickChart.
        ///
        /// - Remark: Generated from `#/components/schemas/CandlestickDomain`.
        public struct CandlestickDomain: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/CandlestickDomain/data`.
            public var data: Components.Schemas.ChartData?
            /// True to reverse the order of the domain values (horizontal axis).
            ///
            /// - Remark: Generated from `#/components/schemas/CandlestickDomain/reversed`.
            public var reversed: Swift.Bool?
            /// Creates a new `CandlestickDomain`.
            ///
            /// - Parameters:
            ///   - data:
            ///   - reversed: True to reverse the order of the domain values (horizontal axis).
            public init(
                data: Components.Schemas.ChartData? = nil,
                reversed: Swift.Bool? = nil
            ) {
                self.data = data
                self.reversed = reversed
            }
            public enum CodingKeys: String, CodingKey {
                case data
                case reversed
            }
        }
        /// The series of a CandlestickData.
        ///
        /// - Remark: Generated from `#/components/schemas/CandlestickSeries`.
        public struct CandlestickSeries: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/CandlestickSeries/data`.
            public var data: Components.Schemas.ChartData?
            /// Creates a new `CandlestickSeries`.
            ///
            /// - Parameters:
            ///   - data:
            public init(data: Components.Schemas.ChartData? = nil) {
                self.data = data
            }
            public enum CodingKeys: String, CodingKey {
                case data
            }
        }
        /// Data about a specific cell.
        ///
        /// - Remark: Generated from `#/components/schemas/CellData`.
        public struct CellData: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/CellData/dataSourceFormula`.
            public var dataSourceFormula: Components.Schemas.DataSourceFormula?
            /// - Remark: Generated from `#/components/schemas/CellData/dataSourceTable`.
            public var dataSourceTable: Components.Schemas.DataSourceTable?
            /// - Remark: Generated from `#/components/schemas/CellData/dataValidation`.
            public var dataValidation: Components.Schemas.DataValidationRule?
            /// - Remark: Generated from `#/components/schemas/CellData/effectiveFormat`.
            public var effectiveFormat: Components.Schemas.CellFormat?
            /// - Remark: Generated from `#/components/schemas/CellData/effectiveValue`.
            public var effectiveValue: Components.Schemas.ExtendedValue?
            /// The formatted value of the cell. This is the value as it's shown to the user. This field is read-only.
            ///
            /// - Remark: Generated from `#/components/schemas/CellData/formattedValue`.
            public var formattedValue: Swift.String?
            /// A hyperlink this cell points to, if any. If the cell contains multiple hyperlinks, this field will be empty. This field is read-only. To set it, use a `=HYPERLINK` formula in the userEnteredValue.formulaValue field. A cell-level link can also be set from the userEnteredFormat.textFormat field. Alternatively, set a hyperlink in the textFormatRun.format.link field that spans the entire cell.
            ///
            /// - Remark: Generated from `#/components/schemas/CellData/hyperlink`.
            public var hyperlink: Swift.String?
            /// Any note on the cell.
            ///
            /// - Remark: Generated from `#/components/schemas/CellData/note`.
            public var note: Swift.String?
            /// - Remark: Generated from `#/components/schemas/CellData/pivotTable`.
            public var pivotTable: Components.Schemas.PivotTable?
            /// Runs of rich text applied to subsections of the cell. Runs are only valid on user entered strings, not formulas, bools, or numbers. Properties of a run start at a specific index in the text and continue until the next run. Runs will inherit the properties of the cell unless explicitly changed. When writing, the new runs will overwrite any prior runs. When writing a new user_entered_value, previous runs are erased.
            ///
            /// - Remark: Generated from `#/components/schemas/CellData/textFormatRuns`.
            public var textFormatRuns: [Components.Schemas.TextFormatRun]?
            /// - Remark: Generated from `#/components/schemas/CellData/userEnteredFormat`.
            public var userEnteredFormat: Components.Schemas.CellFormat?
            /// - Remark: Generated from `#/components/schemas/CellData/userEnteredValue`.
            public var userEnteredValue: Components.Schemas.ExtendedValue?
            /// Creates a new `CellData`.
            ///
            /// - Parameters:
            ///   - dataSourceFormula:
            ///   - dataSourceTable:
            ///   - dataValidation:
            ///   - effectiveFormat:
            ///   - effectiveValue:
            ///   - formattedValue: The formatted value of the cell. This is the value as it's shown to the user. This field is read-only.
            ///   - hyperlink: A hyperlink this cell points to, if any. If the cell contains multiple hyperlinks, this field will be empty. This field is read-only. To set it, use a `=HYPERLINK` formula in the userEnteredValue.formulaValue field. A cell-level link can also be set from the userEnteredFormat.textFormat field. Alternatively, set a hyperlink in the textFormatRun.format.link field that spans the entire cell.
            ///   - note: Any note on the cell.
            ///   - pivotTable:
            ///   - textFormatRuns: Runs of rich text applied to subsections of the cell. Runs are only valid on user entered strings, not formulas, bools, or numbers. Properties of a run start at a specific index in the text and continue until the next run. Runs will inherit the properties of the cell unless explicitly changed. When writing, the new runs will overwrite any prior runs. When writing a new user_entered_value, previous runs are erased.
            ///   - userEnteredFormat:
            ///   - userEnteredValue:
            public init(
                dataSourceFormula: Components.Schemas.DataSourceFormula? = nil,
                dataSourceTable: Components.Schemas.DataSourceTable? = nil,
                dataValidation: Components.Schemas.DataValidationRule? = nil,
                effectiveFormat: Components.Schemas.CellFormat? = nil,
                effectiveValue: Components.Schemas.ExtendedValue? = nil,
                formattedValue: Swift.String? = nil,
                hyperlink: Swift.String? = nil,
                note: Swift.String? = nil,
                pivotTable: Components.Schemas.PivotTable? = nil,
                textFormatRuns: [Components.Schemas.TextFormatRun]? = nil,
                userEnteredFormat: Components.Schemas.CellFormat? = nil,
                userEnteredValue: Components.Schemas.ExtendedValue? = nil
            ) {
                self.dataSourceFormula = dataSourceFormula
                self.dataSourceTable = dataSourceTable
                self.dataValidation = dataValidation
                self.effectiveFormat = effectiveFormat
                self.effectiveValue = effectiveValue
                self.formattedValue = formattedValue
                self.hyperlink = hyperlink
                self.note = note
                self.pivotTable = pivotTable
                self.textFormatRuns = textFormatRuns
                self.userEnteredFormat = userEnteredFormat
                self.userEnteredValue = userEnteredValue
            }
            public enum CodingKeys: String, CodingKey {
                case dataSourceFormula
                case dataSourceTable
                case dataValidation
                case effectiveFormat
                case effectiveValue
                case formattedValue
                case hyperlink
                case note
                case pivotTable
                case textFormatRuns
                case userEnteredFormat
                case userEnteredValue
            }
        }
        /// The format of a cell.
        ///
        /// - Remark: Generated from `#/components/schemas/CellFormat`.
        public struct CellFormat: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/CellFormat/backgroundColor`.
            public var backgroundColor: Components.Schemas.Color?
            /// - Remark: Generated from `#/components/schemas/CellFormat/backgroundColorStyle`.
            public var backgroundColorStyle: Components.Schemas.ColorStyle?
            /// - Remark: Generated from `#/components/schemas/CellFormat/borders`.
            public var borders: Components.Schemas.Borders?
            /// The horizontal alignment of the value in the cell.
            ///
            /// - Remark: Generated from `#/components/schemas/CellFormat/horizontalAlignment`.
            @frozen public enum HorizontalAlignmentPayload: String, Codable, Hashable, Sendable, CaseIterable {
                case horizontalAlignUnspecified = "HORIZONTAL_ALIGN_UNSPECIFIED"
                case left = "LEFT"
                case center = "CENTER"
                case right = "RIGHT"
            }
            /// The horizontal alignment of the value in the cell.
            ///
            /// - Remark: Generated from `#/components/schemas/CellFormat/horizontalAlignment`.
            public var horizontalAlignment: Components.Schemas.CellFormat.HorizontalAlignmentPayload?
            /// If one exists, how a hyperlink should be displayed in the cell.
            ///
            /// - Remark: Generated from `#/components/schemas/CellFormat/hyperlinkDisplayType`.
            @frozen public enum HyperlinkDisplayTypePayload: String, Codable, Hashable, Sendable, CaseIterable {
                case hyperlinkDisplayTypeUnspecified = "HYPERLINK_DISPLAY_TYPE_UNSPECIFIED"
                case linked = "LINKED"
                case plainText = "PLAIN_TEXT"
            }
            /// If one exists, how a hyperlink should be displayed in the cell.
            ///
            /// - Remark: Generated from `#/components/schemas/CellFormat/hyperlinkDisplayType`.
            public var hyperlinkDisplayType: Components.Schemas.CellFormat.HyperlinkDisplayTypePayload?
            /// - Remark: Generated from `#/components/schemas/CellFormat/numberFormat`.
            public var numberFormat: Components.Schemas.NumberFormat?
            /// - Remark: Generated from `#/components/schemas/CellFormat/padding`.
            public var padding: Components.Schemas.Padding?
            /// The direction of the text in the cell.
            ///
            /// - Remark: Generated from `#/components/schemas/CellFormat/textDirection`.
            @frozen public enum TextDirectionPayload: String, Codable, Hashable, Sendable, CaseIterable {
                case textDirectionUnspecified = "TEXT_DIRECTION_UNSPECIFIED"
                case leftToRight = "LEFT_TO_RIGHT"
                case rightToLeft = "RIGHT_TO_LEFT"
            }
            /// The direction of the text in the cell.
            ///
            /// - Remark: Generated from `#/components/schemas/CellFormat/textDirection`.
            public var textDirection: Components.Schemas.CellFormat.TextDirectionPayload?
            /// - Remark: Generated from `#/components/schemas/CellFormat/textFormat`.
            public var textFormat: Components.Schemas.TextFormat?
            /// - Remark: Generated from `#/components/schemas/CellFormat/textRotation`.
            public var textRotation: Components.Schemas.TextRotation?
            /// The vertical alignment of the value in the cell.
            ///
            /// - Remark: Generated from `#/components/schemas/CellFormat/verticalAlignment`.
            @frozen public enum VerticalAlignmentPayload: String, Codable, Hashable, Sendable, CaseIterable {
                case verticalAlignUnspecified = "VERTICAL_ALIGN_UNSPECIFIED"
                case top = "TOP"
                case middle = "MIDDLE"
                case bottom = "BOTTOM"
            }
            /// The vertical alignment of the value in the cell.
            ///
            /// - Remark: Generated from `#/components/schemas/CellFormat/verticalAlignment`.
            public var verticalAlignment: Components.Schemas.CellFormat.VerticalAlignmentPayload?
            /// The wrap strategy for the value in the cell.
            ///
            /// - Remark: Generated from `#/components/schemas/CellFormat/wrapStrategy`.
            @frozen public enum WrapStrategyPayload: String, Codable, Hashable, Sendable, CaseIterable {
                case wrapStrategyUnspecified = "WRAP_STRATEGY_UNSPECIFIED"
                case overflowCell = "OVERFLOW_CELL"
                case legacyWrap = "LEGACY_WRAP"
                case clip = "CLIP"
                case wrap = "WRAP"
            }
            /// The wrap strategy for the value in the cell.
            ///
            /// - Remark: Generated from `#/components/schemas/CellFormat/wrapStrategy`.
            public var wrapStrategy: Components.Schemas.CellFormat.WrapStrategyPayload?
            /// Creates a new `CellFormat`.
            ///
            /// - Parameters:
            ///   - backgroundColor:
            ///   - backgroundColorStyle:
            ///   - borders:
            ///   - horizontalAlignment: The horizontal alignment of the value in the cell.
            ///   - hyperlinkDisplayType: If one exists, how a hyperlink should be displayed in the cell.
            ///   - numberFormat:
            ///   - padding:
            ///   - textDirection: The direction of the text in the cell.
            ///   - textFormat:
            ///   - textRotation:
            ///   - verticalAlignment: The vertical alignment of the value in the cell.
            ///   - wrapStrategy: The wrap strategy for the value in the cell.
            public init(
                backgroundColor: Components.Schemas.Color? = nil,
                backgroundColorStyle: Components.Schemas.ColorStyle? = nil,
                borders: Components.Schemas.Borders? = nil,
                horizontalAlignment: Components.Schemas.CellFormat.HorizontalAlignmentPayload? = nil,
                hyperlinkDisplayType: Components.Schemas.CellFormat.HyperlinkDisplayTypePayload? = nil,
                numberFormat: Components.Schemas.NumberFormat? = nil,
                padding: Components.Schemas.Padding? = nil,
                textDirection: Components.Schemas.CellFormat.TextDirectionPayload? = nil,
                textFormat: Components.Schemas.TextFormat? = nil,
                textRotation: Components.Schemas.TextRotation? = nil,
                verticalAlignment: Components.Schemas.CellFormat.VerticalAlignmentPayload? = nil,
                wrapStrategy: Components.Schemas.CellFormat.WrapStrategyPayload? = nil
            ) {
                self.backgroundColor = backgroundColor
                self.backgroundColorStyle = backgroundColorStyle
                self.borders = borders
                self.horizontalAlignment = horizontalAlignment
                self.hyperlinkDisplayType = hyperlinkDisplayType
                self.numberFormat = numberFormat
                self.padding = padding
                self.textDirection = textDirection
                self.textFormat = textFormat
                self.textRotation = textRotation
                self.verticalAlignment = verticalAlignment
                self.wrapStrategy = wrapStrategy
            }
            public enum CodingKeys: String, CodingKey {
                case backgroundColor
                case backgroundColorStyle
                case borders
                case horizontalAlignment
                case hyperlinkDisplayType
                case numberFormat
                case padding
                case textDirection
                case textFormat
                case textRotation
                case verticalAlignment
                case wrapStrategy
            }
        }
        /// The options that define a "view window" for a chart (such as the visible values in an axis).
        ///
        /// - Remark: Generated from `#/components/schemas/ChartAxisViewWindowOptions`.
        public struct ChartAxisViewWindowOptions: Codable, Hashable, Sendable {
            /// The maximum numeric value to be shown in this view window. If unset, will automatically determine a maximum value that looks good for the data.
            ///
            /// - Remark: Generated from `#/components/schemas/ChartAxisViewWindowOptions/viewWindowMax`.
            public var viewWindowMax: Swift.Double?
            /// The minimum numeric value to be shown in this view window. If unset, will automatically determine a minimum value that looks good for the data.
            ///
            /// - Remark: Generated from `#/components/schemas/ChartAxisViewWindowOptions/viewWindowMin`.
            public var viewWindowMin: Swift.Double?
            /// The view window's mode.
            ///
            /// - Remark: Generated from `#/components/schemas/ChartAxisViewWindowOptions/viewWindowMode`.
            @frozen public enum ViewWindowModePayload: String, Codable, Hashable, Sendable, CaseIterable {
                case defaultViewWindowMode = "DEFAULT_VIEW_WINDOW_MODE"
                case viewWindowModeUnsupported = "VIEW_WINDOW_MODE_UNSUPPORTED"
                case explicit = "EXPLICIT"
                case pretty = "PRETTY"
            }
            /// The view window's mode.
            ///
            /// - Remark: Generated from `#/components/schemas/ChartAxisViewWindowOptions/viewWindowMode`.
            public var viewWindowMode: Components.Schemas.ChartAxisViewWindowOptions.ViewWindowModePayload?
            /// Creates a new `ChartAxisViewWindowOptions`.
            ///
            /// - Parameters:
            ///   - viewWindowMax: The maximum numeric value to be shown in this view window. If unset, will automatically determine a maximum value that looks good for the data.
            ///   - viewWindowMin: The minimum numeric value to be shown in this view window. If unset, will automatically determine a minimum value that looks good for the data.
            ///   - viewWindowMode: The view window's mode.
            public init(
                viewWindowMax: Swift.Double? = nil,
                viewWindowMin: Swift.Double? = nil,
                viewWindowMode: Components.Schemas.ChartAxisViewWindowOptions.ViewWindowModePayload? = nil
            ) {
                self.viewWindowMax = viewWindowMax
                self.viewWindowMin = viewWindowMin
                self.viewWindowMode = viewWindowMode
            }
            public enum CodingKeys: String, CodingKey {
                case viewWindowMax
                case viewWindowMin
                case viewWindowMode
            }
        }
        /// Custom number formatting options for chart attributes.
        ///
        /// - Remark: Generated from `#/components/schemas/ChartCustomNumberFormatOptions`.
        public struct ChartCustomNumberFormatOptions: Codable, Hashable, Sendable {
            /// Custom prefix to be prepended to the chart attribute. This field is optional.
            ///
            /// - Remark: Generated from `#/components/schemas/ChartCustomNumberFormatOptions/prefix`.
            public var prefix: Swift.String?
            /// Custom suffix to be appended to the chart attribute. This field is optional.
            ///
            /// - Remark: Generated from `#/components/schemas/ChartCustomNumberFormatOptions/suffix`.
            public var suffix: Swift.String?
            /// Creates a new `ChartCustomNumberFormatOptions`.
            ///
            /// - Parameters:
            ///   - prefix: Custom prefix to be prepended to the chart attribute. This field is optional.
            ///   - suffix: Custom suffix to be appended to the chart attribute. This field is optional.
            public init(
                prefix: Swift.String? = nil,
                suffix: Swift.String? = nil
            ) {
                self.prefix = prefix
                self.suffix = suffix
            }
            public enum CodingKeys: String, CodingKey {
                case prefix
                case suffix
            }
        }
        /// The data included in a domain or series.
        ///
        /// - Remark: Generated from `#/components/schemas/ChartData`.
        public struct ChartData: Codable, Hashable, Sendable {
            /// The aggregation type for the series of a data source chart. Only supported for data source charts.
            ///
            /// - Remark: Generated from `#/components/schemas/ChartData/aggregateType`.
            @frozen public enum AggregateTypePayload: String, Codable, Hashable, Sendable, CaseIterable {
                case chartAggregateTypeUnspecified = "CHART_AGGREGATE_TYPE_UNSPECIFIED"
                case average = "AVERAGE"
                case count = "COUNT"
                case max = "MAX"
                case median = "MEDIAN"
                case min = "MIN"
                case sum = "SUM"
            }
            /// The aggregation type for the series of a data source chart. Only supported for data source charts.
            ///
            /// - Remark: Generated from `#/components/schemas/ChartData/aggregateType`.
            public var aggregateType: Components.Schemas.ChartData.AggregateTypePayload?
            /// - Remark: Generated from `#/components/schemas/ChartData/columnReference`.
            public var columnReference: Components.Schemas.DataSourceColumnReference?
            /// - Remark: Generated from `#/components/schemas/ChartData/groupRule`.
            public var groupRule: Components.Schemas.ChartGroupRule?
            /// - Remark: Generated from `#/components/schemas/ChartData/sourceRange`.
            public var sourceRange: Components.Schemas.ChartSourceRange?
            /// Creates a new `ChartData`.
            ///
            /// - Parameters:
            ///   - aggregateType: The aggregation type for the series of a data source chart. Only supported for data source charts.
            ///   - columnReference:
            ///   - groupRule:
            ///   - sourceRange:
            public init(
                aggregateType: Components.Schemas.ChartData.AggregateTypePayload? = nil,
                columnReference: Components.Schemas.DataSourceColumnReference? = nil,
                groupRule: Components.Schemas.ChartGroupRule? = nil,
                sourceRange: Components.Schemas.ChartSourceRange? = nil
            ) {
                self.aggregateType = aggregateType
                self.columnReference = columnReference
                self.groupRule = groupRule
                self.sourceRange = sourceRange
            }
            public enum CodingKeys: String, CodingKey {
                case aggregateType
                case columnReference
                case groupRule
                case sourceRange
            }
        }
        /// Allows you to organize the date-time values in a source data column into buckets based on selected parts of their date or time values.
        ///
        /// - Remark: Generated from `#/components/schemas/ChartDateTimeRule`.
        public struct ChartDateTimeRule: Codable, Hashable, Sendable {
            /// The type of date-time grouping to apply.
            ///
            /// - Remark: Generated from `#/components/schemas/ChartDateTimeRule/type`.
            @frozen public enum _TypePayload: String, Codable, Hashable, Sendable, CaseIterable {
                case chartDateTimeRuleTypeUnspecified = "CHART_DATE_TIME_RULE_TYPE_UNSPECIFIED"
                case second = "SECOND"
                case minute = "MINUTE"
                case hour = "HOUR"
                case hourMinute = "HOUR_MINUTE"
                case hourMinuteAmpm = "HOUR_MINUTE_AMPM"
                case dayOfWeek = "DAY_OF_WEEK"
                case dayOfYear = "DAY_OF_YEAR"
                case dayOfMonth = "DAY_OF_MONTH"
                case dayMonth = "DAY_MONTH"
                case month = "MONTH"
                case quarter = "QUARTER"
                case year = "YEAR"
                case yearMonth = "YEAR_MONTH"
                case yearQuarter = "YEAR_QUARTER"
                case yearMonthDay = "YEAR_MONTH_DAY"
            }
            /// The type of date-time grouping to apply.
            ///
            /// - Remark: Generated from `#/components/schemas/ChartDateTimeRule/type`.
            public var _type: Components.Schemas.ChartDateTimeRule._TypePayload?
            /// Creates a new `ChartDateTimeRule`.
            ///
            /// - Parameters:
            ///   - _type: The type of date-time grouping to apply.
            public init(_type: Components.Schemas.ChartDateTimeRule._TypePayload? = nil) {
                self._type = _type
            }
            public enum CodingKeys: String, CodingKey {
                case _type = "type"
            }
        }
        /// An optional setting on the ChartData of the domain of a data source chart that defines buckets for the values in the domain rather than breaking out each individual value. For example, when plotting a data source chart, you can specify a histogram rule on the domain (it should only contain numeric values), grouping its values into buckets. Any values of a chart series that fall into the same bucket are aggregated based on the aggregate_type.
        ///
        /// - Remark: Generated from `#/components/schemas/ChartGroupRule`.
        public struct ChartGroupRule: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/ChartGroupRule/dateTimeRule`.
            public var dateTimeRule: Components.Schemas.ChartDateTimeRule?
            /// - Remark: Generated from `#/components/schemas/ChartGroupRule/histogramRule`.
            public var histogramRule: Components.Schemas.ChartHistogramRule?
            /// Creates a new `ChartGroupRule`.
            ///
            /// - Parameters:
            ///   - dateTimeRule:
            ///   - histogramRule:
            public init(
                dateTimeRule: Components.Schemas.ChartDateTimeRule? = nil,
                histogramRule: Components.Schemas.ChartHistogramRule? = nil
            ) {
                self.dateTimeRule = dateTimeRule
                self.histogramRule = histogramRule
            }
            public enum CodingKeys: String, CodingKey {
                case dateTimeRule
                case histogramRule
            }
        }
        /// Allows you to organize numeric values in a source data column into buckets of constant size.
        ///
        /// - Remark: Generated from `#/components/schemas/ChartHistogramRule`.
        public struct ChartHistogramRule: Codable, Hashable, Sendable {
            /// The size of the buckets that are created. Must be positive.
            ///
            /// - Remark: Generated from `#/components/schemas/ChartHistogramRule/intervalSize`.
            public var intervalSize: Swift.Double?
            /// The maximum value at which items are placed into buckets. Values greater than the maximum are grouped into a single bucket. If omitted, it is determined by the maximum item value.
            ///
            /// - Remark: Generated from `#/components/schemas/ChartHistogramRule/maxValue`.
            public var maxValue: Swift.Double?
            /// The minimum value at which items are placed into buckets. Values that are less than the minimum are grouped into a single bucket. If omitted, it is determined by the minimum item value.
            ///
            /// - Remark: Generated from `#/components/schemas/ChartHistogramRule/minValue`.
            public var minValue: Swift.Double?
            /// Creates a new `ChartHistogramRule`.
            ///
            /// - Parameters:
            ///   - intervalSize: The size of the buckets that are created. Must be positive.
            ///   - maxValue: The maximum value at which items are placed into buckets. Values greater than the maximum are grouped into a single bucket. If omitted, it is determined by the maximum item value.
            ///   - minValue: The minimum value at which items are placed into buckets. Values that are less than the minimum are grouped into a single bucket. If omitted, it is determined by the minimum item value.
            public init(
                intervalSize: Swift.Double? = nil,
                maxValue: Swift.Double? = nil,
                minValue: Swift.Double? = nil
            ) {
                self.intervalSize = intervalSize
                self.maxValue = maxValue
                self.minValue = minValue
            }
            public enum CodingKeys: String, CodingKey {
                case intervalSize
                case maxValue
                case minValue
            }
        }
        /// Source ranges for a chart.
        ///
        /// - Remark: Generated from `#/components/schemas/ChartSourceRange`.
        public struct ChartSourceRange: Codable, Hashable, Sendable {
            /// The ranges of data for a series or domain. Exactly one dimension must have a length of 1, and all sources in the list must have the same dimension with length 1. The domain (if it exists) & all series must have the same number of source ranges. If using more than one source range, then the source range at a given offset must be in order and contiguous across the domain and series. For example, these are valid configurations: domain sources: A1:A5 series1 sources: B1:B5 series2 sources: D6:D10 domain sources: A1:A5, C10:C12 series1 sources: B1:B5, D10:D12 series2 sources: C1:C5, E10:E12
            ///
            /// - Remark: Generated from `#/components/schemas/ChartSourceRange/sources`.
            public var sources: [Components.Schemas.GridRange]?
            /// Creates a new `ChartSourceRange`.
            ///
            /// - Parameters:
            ///   - sources: The ranges of data for a series or domain. Exactly one dimension must have a length of 1, and all sources in the list must have the same dimension with length 1. The domain (if it exists) & all series must have the same number of source ranges. If using more than one source range, then the source range at a given offset must be in order and contiguous across the domain and series. For example, these are valid configurations: domain sources: A1:A5 series1 sources: B1:B5 series2 sources: D6:D10 domain sources: A1:A5, C10:C12 series1 sources: B1:B5, D10:D12 series2 sources: C1:C5, E10:E12
            public init(sources: [Components.Schemas.GridRange]? = nil) {
                self.sources = sources
            }
            public enum CodingKeys: String, CodingKey {
                case sources
            }
        }
        /// The specifications of a chart.
        ///
        /// - Remark: Generated from `#/components/schemas/ChartSpec`.
        public struct ChartSpec: Codable, Hashable, Sendable {
            /// The alternative text that describes the chart. This is often used for accessibility.
            ///
            /// - Remark: Generated from `#/components/schemas/ChartSpec/altText`.
            public var altText: Swift.String?
            /// - Remark: Generated from `#/components/schemas/ChartSpec/backgroundColor`.
            public var backgroundColor: Components.Schemas.Color?
            /// - Remark: Generated from `#/components/schemas/ChartSpec/backgroundColorStyle`.
            public var backgroundColorStyle: Components.Schemas.ColorStyle?
            /// - Remark: Generated from `#/components/schemas/ChartSpec/basicChart`.
            public var basicChart: Components.Schemas.BasicChartSpec?
            /// - Remark: Generated from `#/components/schemas/ChartSpec/bubbleChart`.
            public var bubbleChart: Components.Schemas.BubbleChartSpec?
            /// - Remark: Generated from `#/components/schemas/ChartSpec/candlestickChart`.
            public var candlestickChart: Components.Schemas.CandlestickChartSpec?
            /// - Remark: Generated from `#/components/schemas/ChartSpec/dataSourceChartProperties`.
            public var dataSourceChartProperties: Components.Schemas.DataSourceChartProperties?
            /// The filters applied to the source data of the chart. Only supported for data source charts.
            ///
            /// - Remark: Generated from `#/components/schemas/ChartSpec/filterSpecs`.
            public var filterSpecs: [Components.Schemas.FilterSpec]?
            /// The name of the font to use by default for all chart text (e.g. title, axis labels, legend). If a font is specified for a specific part of the chart it will override this font name.
            ///
            /// - Remark: Generated from `#/components/schemas/ChartSpec/fontName`.
            public var fontName: Swift.String?
            /// Determines how the charts will use hidden rows or columns.
            ///
            /// - Remark: Generated from `#/components/schemas/ChartSpec/hiddenDimensionStrategy`.
            @frozen public enum HiddenDimensionStrategyPayload: String, Codable, Hashable, Sendable, CaseIterable {
                case chartHiddenDimensionStrategyUnspecified = "CHART_HIDDEN_DIMENSION_STRATEGY_UNSPECIFIED"
                case skipHiddenRowsAndColumns = "SKIP_HIDDEN_ROWS_AND_COLUMNS"
                case skipHiddenRows = "SKIP_HIDDEN_ROWS"
                case skipHiddenColumns = "SKIP_HIDDEN_COLUMNS"
                case showAll = "SHOW_ALL"
            }
            /// Determines how the charts will use hidden rows or columns.
            ///
            /// - Remark: Generated from `#/components/schemas/ChartSpec/hiddenDimensionStrategy`.
            public var hiddenDimensionStrategy: Components.Schemas.ChartSpec.HiddenDimensionStrategyPayload?
            /// - Remark: Generated from `#/components/schemas/ChartSpec/histogramChart`.
            public var histogramChart: Components.Schemas.HistogramChartSpec?
            /// True to make a chart fill the entire space in which it's rendered with minimum padding. False to use the default padding. (Not applicable to Geo and Org charts.)
            ///
            /// - Remark: Generated from `#/components/schemas/ChartSpec/maximized`.
            public var maximized: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/ChartSpec/orgChart`.
            public var orgChart: Components.Schemas.OrgChartSpec?
            /// - Remark: Generated from `#/components/schemas/ChartSpec/pieChart`.
            public var pieChart: Components.Schemas.PieChartSpec?
            /// - Remark: Generated from `#/components/schemas/ChartSpec/scorecardChart`.
            public var scorecardChart: Components.Schemas.ScorecardChartSpec?
            /// The order to sort the chart data by. Only a single sort spec is supported. Only supported for data source charts.
            ///
            /// - Remark: Generated from `#/components/schemas/ChartSpec/sortSpecs`.
            public var sortSpecs: [Components.Schemas.SortSpec]?
            /// The subtitle of the chart.
            ///
            /// - Remark: Generated from `#/components/schemas/ChartSpec/subtitle`.
            public var subtitle: Swift.String?
            /// - Remark: Generated from `#/components/schemas/ChartSpec/subtitleTextFormat`.
            public var subtitleTextFormat: Components.Schemas.TextFormat?
            /// - Remark: Generated from `#/components/schemas/ChartSpec/subtitleTextPosition`.
            public var subtitleTextPosition: Components.Schemas.TextPosition?
            /// The title of the chart.
            ///
            /// - Remark: Generated from `#/components/schemas/ChartSpec/title`.
            public var title: Swift.String?
            /// - Remark: Generated from `#/components/schemas/ChartSpec/titleTextFormat`.
            public var titleTextFormat: Components.Schemas.TextFormat?
            /// - Remark: Generated from `#/components/schemas/ChartSpec/titleTextPosition`.
            public var titleTextPosition: Components.Schemas.TextPosition?
            /// - Remark: Generated from `#/components/schemas/ChartSpec/treemapChart`.
            public var treemapChart: Components.Schemas.TreemapChartSpec?
            /// - Remark: Generated from `#/components/schemas/ChartSpec/waterfallChart`.
            public var waterfallChart: Components.Schemas.WaterfallChartSpec?
            /// Creates a new `ChartSpec`.
            ///
            /// - Parameters:
            ///   - altText: The alternative text that describes the chart. This is often used for accessibility.
            ///   - backgroundColor:
            ///   - backgroundColorStyle:
            ///   - basicChart:
            ///   - bubbleChart:
            ///   - candlestickChart:
            ///   - dataSourceChartProperties:
            ///   - filterSpecs: The filters applied to the source data of the chart. Only supported for data source charts.
            ///   - fontName: The name of the font to use by default for all chart text (e.g. title, axis labels, legend). If a font is specified for a specific part of the chart it will override this font name.
            ///   - hiddenDimensionStrategy: Determines how the charts will use hidden rows or columns.
            ///   - histogramChart:
            ///   - maximized: True to make a chart fill the entire space in which it's rendered with minimum padding. False to use the default padding. (Not applicable to Geo and Org charts.)
            ///   - orgChart:
            ///   - pieChart:
            ///   - scorecardChart:
            ///   - sortSpecs: The order to sort the chart data by. Only a single sort spec is supported. Only supported for data source charts.
            ///   - subtitle: The subtitle of the chart.
            ///   - subtitleTextFormat:
            ///   - subtitleTextPosition:
            ///   - title: The title of the chart.
            ///   - titleTextFormat:
            ///   - titleTextPosition:
            ///   - treemapChart:
            ///   - waterfallChart:
            public init(
                altText: Swift.String? = nil,
                backgroundColor: Components.Schemas.Color? = nil,
                backgroundColorStyle: Components.Schemas.ColorStyle? = nil,
                basicChart: Components.Schemas.BasicChartSpec? = nil,
                bubbleChart: Components.Schemas.BubbleChartSpec? = nil,
                candlestickChart: Components.Schemas.CandlestickChartSpec? = nil,
                dataSourceChartProperties: Components.Schemas.DataSourceChartProperties? = nil,
                filterSpecs: [Components.Schemas.FilterSpec]? = nil,
                fontName: Swift.String? = nil,
                hiddenDimensionStrategy: Components.Schemas.ChartSpec.HiddenDimensionStrategyPayload? = nil,
                histogramChart: Components.Schemas.HistogramChartSpec? = nil,
                maximized: Swift.Bool? = nil,
                orgChart: Components.Schemas.OrgChartSpec? = nil,
                pieChart: Components.Schemas.PieChartSpec? = nil,
                scorecardChart: Components.Schemas.ScorecardChartSpec? = nil,
                sortSpecs: [Components.Schemas.SortSpec]? = nil,
                subtitle: Swift.String? = nil,
                subtitleTextFormat: Components.Schemas.TextFormat? = nil,
                subtitleTextPosition: Components.Schemas.TextPosition? = nil,
                title: Swift.String? = nil,
                titleTextFormat: Components.Schemas.TextFormat? = nil,
                titleTextPosition: Components.Schemas.TextPosition? = nil,
                treemapChart: Components.Schemas.TreemapChartSpec? = nil,
                waterfallChart: Components.Schemas.WaterfallChartSpec? = nil
            ) {
                self.altText = altText
                self.backgroundColor = backgroundColor
                self.backgroundColorStyle = backgroundColorStyle
                self.basicChart = basicChart
                self.bubbleChart = bubbleChart
                self.candlestickChart = candlestickChart
                self.dataSourceChartProperties = dataSourceChartProperties
                self.filterSpecs = filterSpecs
                self.fontName = fontName
                self.hiddenDimensionStrategy = hiddenDimensionStrategy
                self.histogramChart = histogramChart
                self.maximized = maximized
                self.orgChart = orgChart
                self.pieChart = pieChart
                self.scorecardChart = scorecardChart
                self.sortSpecs = sortSpecs
                self.subtitle = subtitle
                self.subtitleTextFormat = subtitleTextFormat
                self.subtitleTextPosition = subtitleTextPosition
                self.title = title
                self.titleTextFormat = titleTextFormat
                self.titleTextPosition = titleTextPosition
                self.treemapChart = treemapChart
                self.waterfallChart = waterfallChart
            }
            public enum CodingKeys: String, CodingKey {
                case altText
                case backgroundColor
                case backgroundColorStyle
                case basicChart
                case bubbleChart
                case candlestickChart
                case dataSourceChartProperties
                case filterSpecs
                case fontName
                case hiddenDimensionStrategy
                case histogramChart
                case maximized
                case orgChart
                case pieChart
                case scorecardChart
                case sortSpecs
                case subtitle
                case subtitleTextFormat
                case subtitleTextPosition
                case title
                case titleTextFormat
                case titleTextPosition
                case treemapChart
                case waterfallChart
            }
        }
        /// Clears the basic filter, if any exists on the sheet.
        ///
        /// - Remark: Generated from `#/components/schemas/ClearBasicFilterRequest`.
        public struct ClearBasicFilterRequest: Codable, Hashable, Sendable {
            /// The sheet ID on which the basic filter should be cleared.
            ///
            /// - Remark: Generated from `#/components/schemas/ClearBasicFilterRequest/sheetId`.
            public var sheetId: Swift.Int32?
            /// Creates a new `ClearBasicFilterRequest`.
            ///
            /// - Parameters:
            ///   - sheetId: The sheet ID on which the basic filter should be cleared.
            public init(sheetId: Swift.Int32? = nil) {
                self.sheetId = sheetId
            }
            public enum CodingKeys: String, CodingKey {
                case sheetId
            }
        }
        /// The request for clearing a range of values in a spreadsheet.
        ///
        /// - Remark: Generated from `#/components/schemas/ClearValuesRequest`.
        public typealias ClearValuesRequest = OpenAPIRuntime.OpenAPIObjectContainer
        /// The response when clearing a range of values in a spreadsheet.
        ///
        /// - Remark: Generated from `#/components/schemas/ClearValuesResponse`.
        public struct ClearValuesResponse: Codable, Hashable, Sendable {
            /// The range (in A1 notation) that was cleared. (If the request was for an unbounded range or a ranger larger than the bounds of the sheet, this will be the actual range that was cleared, bounded to the sheet's limits.)
            ///
            /// - Remark: Generated from `#/components/schemas/ClearValuesResponse/clearedRange`.
            public var clearedRange: Swift.String?
            /// The spreadsheet the updates were applied to.
            ///
            /// - Remark: Generated from `#/components/schemas/ClearValuesResponse/spreadsheetId`.
            public var spreadsheetId: Swift.String?
            /// Creates a new `ClearValuesResponse`.
            ///
            /// - Parameters:
            ///   - clearedRange: The range (in A1 notation) that was cleared. (If the request was for an unbounded range or a ranger larger than the bounds of the sheet, this will be the actual range that was cleared, bounded to the sheet's limits.)
            ///   - spreadsheetId: The spreadsheet the updates were applied to.
            public init(
                clearedRange: Swift.String? = nil,
                spreadsheetId: Swift.String? = nil
            ) {
                self.clearedRange = clearedRange
                self.spreadsheetId = spreadsheetId
            }
            public enum CodingKeys: String, CodingKey {
                case clearedRange
                case spreadsheetId
            }
        }
        /// Represents a color in the RGBA color space. This representation is designed for simplicity of conversion to and from color representations in various languages over compactness. For example, the fields of this representation can be trivially provided to the constructor of `java.awt.Color` in Java; it can also be trivially provided to UIColor's `+colorWithRed:green:blue:alpha` method in iOS; and, with just a little work, it can be easily formatted into a CSS `rgba()` string in JavaScript. This reference page doesn't have information about the absolute color space that should be used to interpret the RGB value—for example, sRGB, Adobe RGB, DCI-P3, and BT.2020. By default, applications should assume the sRGB color space. When color equality needs to be decided, implementations, unless documented otherwise, treat two colors as equal if all their red, green, blue, and alpha values each differ by at most `1e-5`. Example (Java): import com.google.type.Color; // ... public static java.awt.Color fromProto(Color protocolor) { float alpha = protocolor.hasAlpha() ? protocolor.getAlpha().getValue() : 1.0; return new java.awt.Color( protocolor.getRed(), protocolor.getGreen(), protocolor.getBlue(), alpha); } public static Color toProto(java.awt.Color color) { float red = (float) color.getRed(); float green = (float) color.getGreen(); float blue = (float) color.getBlue(); float denominator = 255.0; Color.Builder resultBuilder = Color .newBuilder() .setRed(red / denominator) .setGreen(green / denominator) .setBlue(blue / denominator); int alpha = color.getAlpha(); if (alpha != 255) { result.setAlpha( FloatValue .newBuilder() .setValue(((float) alpha) / denominator) .build()); } return resultBuilder.build(); } // ... Example (iOS / Obj-C): // ... static UIColor* fromProto(Color* protocolor) { float red = [protocolor red]; float green = [protocolor green]; float blue = [protocolor blue]; FloatValue* alpha_wrapper = [protocolor alpha]; float alpha = 1.0; if (alpha_wrapper != nil) { alpha = [alpha_wrapper value]; } return [UIColor colorWithRed:red green:green blue:blue alpha:alpha]; } static Color* toProto(UIColor* color) { CGFloat red, green, blue, alpha; if (![color getRed:&red green:&green blue:&blue alpha:&alpha]) { return nil; } Color* result = [[Color alloc] init]; [result setRed:red]; [result setGreen:green]; [result setBlue:blue]; if (alpha <= 0.9999) { [result setAlpha:floatWrapperWithValue(alpha)]; } [result autorelease]; return result; } // ... Example (JavaScript): // ... var protoToCssColor = function(rgb_color) { var redFrac = rgb_color.red || 0.0; var greenFrac = rgb_color.green || 0.0; var blueFrac = rgb_color.blue || 0.0; var red = Math.floor(redFrac * 255); var green = Math.floor(greenFrac * 255); var blue = Math.floor(blueFrac * 255); if (!('alpha' in rgb_color)) { return rgbToCssColor(red, green, blue); } var alphaFrac = rgb_color.alpha.value || 0.0; var rgbParams = [red, green, blue].join(','); return ['rgba(', rgbParams, ',', alphaFrac, ')'].join(''); }; var rgbToCssColor = function(red, green, blue) { var rgbNumber = new Number((red << 16) | (green << 8) | blue); var hexString = rgbNumber.toString(16); var missingZeros = 6 - hexString.length; var resultBuilder = ['#']; for (var i = 0; i < missingZeros; i++) { resultBuilder.push('0'); } resultBuilder.push(hexString); return resultBuilder.join(''); }; // ...
        ///
        /// - Remark: Generated from `#/components/schemas/Color`.
        public struct Color: Codable, Hashable, Sendable {
            /// The fraction of this color that should be applied to the pixel. That is, the final pixel color is defined by the equation: `pixel color = alpha * (this color) + (1.0 - alpha) * (background color)` This means that a value of 1.0 corresponds to a solid color, whereas a value of 0.0 corresponds to a completely transparent color. This uses a wrapper message rather than a simple float scalar so that it is possible to distinguish between a default value and the value being unset. If omitted, this color object is rendered as a solid color (as if the alpha value had been explicitly given a value of 1.0).
            ///
            /// - Remark: Generated from `#/components/schemas/Color/alpha`.
            public var alpha: Swift.Float?
            /// The amount of blue in the color as a value in the interval [0, 1].
            ///
            /// - Remark: Generated from `#/components/schemas/Color/blue`.
            public var blue: Swift.Float?
            /// The amount of green in the color as a value in the interval [0, 1].
            ///
            /// - Remark: Generated from `#/components/schemas/Color/green`.
            public var green: Swift.Float?
            /// The amount of red in the color as a value in the interval [0, 1].
            ///
            /// - Remark: Generated from `#/components/schemas/Color/red`.
            public var red: Swift.Float?
            /// Creates a new `Color`.
            ///
            /// - Parameters:
            ///   - alpha: The fraction of this color that should be applied to the pixel. That is, the final pixel color is defined by the equation: `pixel color = alpha * (this color) + (1.0 - alpha) * (background color)` This means that a value of 1.0 corresponds to a solid color, whereas a value of 0.0 corresponds to a completely transparent color. This uses a wrapper message rather than a simple float scalar so that it is possible to distinguish between a default value and the value being unset. If omitted, this color object is rendered as a solid color (as if the alpha value had been explicitly given a value of 1.0).
            ///   - blue: The amount of blue in the color as a value in the interval [0, 1].
            ///   - green: The amount of green in the color as a value in the interval [0, 1].
            ///   - red: The amount of red in the color as a value in the interval [0, 1].
            public init(
                alpha: Swift.Float? = nil,
                blue: Swift.Float? = nil,
                green: Swift.Float? = nil,
                red: Swift.Float? = nil
            ) {
                self.alpha = alpha
                self.blue = blue
                self.green = green
                self.red = red
            }
            public enum CodingKeys: String, CodingKey {
                case alpha
                case blue
                case green
                case red
            }
        }
        /// A color value.
        ///
        /// - Remark: Generated from `#/components/schemas/ColorStyle`.
        public struct ColorStyle: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/ColorStyle/rgbColor`.
            public var rgbColor: Components.Schemas.Color?
            /// Theme color.
            ///
            /// - Remark: Generated from `#/components/schemas/ColorStyle/themeColor`.
            @frozen public enum ThemeColorPayload: String, Codable, Hashable, Sendable, CaseIterable {
                case themeColorTypeUnspecified = "THEME_COLOR_TYPE_UNSPECIFIED"
                case text = "TEXT"
                case background = "BACKGROUND"
                case accent1 = "ACCENT1"
                case accent2 = "ACCENT2"
                case accent3 = "ACCENT3"
                case accent4 = "ACCENT4"
                case accent5 = "ACCENT5"
                case accent6 = "ACCENT6"
                case link = "LINK"
            }
            /// Theme color.
            ///
            /// - Remark: Generated from `#/components/schemas/ColorStyle/themeColor`.
            public var themeColor: Components.Schemas.ColorStyle.ThemeColorPayload?
            /// Creates a new `ColorStyle`.
            ///
            /// - Parameters:
            ///   - rgbColor:
            ///   - themeColor: Theme color.
            public init(
                rgbColor: Components.Schemas.Color? = nil,
                themeColor: Components.Schemas.ColorStyle.ThemeColorPayload? = nil
            ) {
                self.rgbColor = rgbColor
                self.themeColor = themeColor
            }
            public enum CodingKeys: String, CodingKey {
                case rgbColor
                case themeColor
            }
        }
        /// The value of the condition.
        ///
        /// - Remark: Generated from `#/components/schemas/ConditionValue`.
        public struct ConditionValue: Codable, Hashable, Sendable {
            /// A relative date (based on the current date). Valid only if the type is DATE_BEFORE, DATE_AFTER, DATE_ON_OR_BEFORE or DATE_ON_OR_AFTER. Relative dates are not supported in data validation. They are supported only in conditional formatting and conditional filters.
            ///
            /// - Remark: Generated from `#/components/schemas/ConditionValue/relativeDate`.
            @frozen public enum RelativeDatePayload: String, Codable, Hashable, Sendable, CaseIterable {
                case relativeDateUnspecified = "RELATIVE_DATE_UNSPECIFIED"
                case pastYear = "PAST_YEAR"
                case pastMonth = "PAST_MONTH"
                case pastWeek = "PAST_WEEK"
                case yesterday = "YESTERDAY"
                case today = "TODAY"
                case tomorrow = "TOMORROW"
            }
            /// A relative date (based on the current date). Valid only if the type is DATE_BEFORE, DATE_AFTER, DATE_ON_OR_BEFORE or DATE_ON_OR_AFTER. Relative dates are not supported in data validation. They are supported only in conditional formatting and conditional filters.
            ///
            /// - Remark: Generated from `#/components/schemas/ConditionValue/relativeDate`.
            public var relativeDate: Components.Schemas.ConditionValue.RelativeDatePayload?
            /// A value the condition is based on. The value is parsed as if the user typed into a cell. Formulas are supported (and must begin with an `=` or a '+').
            ///
            /// - Remark: Generated from `#/components/schemas/ConditionValue/userEnteredValue`.
            public var userEnteredValue: Swift.String?
            /// Creates a new `ConditionValue`.
            ///
            /// - Parameters:
            ///   - relativeDate: A relative date (based on the current date). Valid only if the type is DATE_BEFORE, DATE_AFTER, DATE_ON_OR_BEFORE or DATE_ON_OR_AFTER. Relative dates are not supported in data validation. They are supported only in conditional formatting and conditional filters.
            ///   - userEnteredValue: A value the condition is based on. The value is parsed as if the user typed into a cell. Formulas are supported (and must begin with an `=` or a '+').
            public init(
                relativeDate: Components.Schemas.ConditionValue.RelativeDatePayload? = nil,
                userEnteredValue: Swift.String? = nil
            ) {
                self.relativeDate = relativeDate
                self.userEnteredValue = userEnteredValue
            }
            public enum CodingKeys: String, CodingKey {
                case relativeDate
                case userEnteredValue
            }
        }
        /// A rule describing a conditional format.
        ///
        /// - Remark: Generated from `#/components/schemas/ConditionalFormatRule`.
        public struct ConditionalFormatRule: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/ConditionalFormatRule/booleanRule`.
            public var booleanRule: Components.Schemas.BooleanRule?
            /// - Remark: Generated from `#/components/schemas/ConditionalFormatRule/gradientRule`.
            public var gradientRule: Components.Schemas.GradientRule?
            /// The ranges that are formatted if the condition is true. All the ranges must be on the same grid.
            ///
            /// - Remark: Generated from `#/components/schemas/ConditionalFormatRule/ranges`.
            public var ranges: [Components.Schemas.GridRange]?
            /// Creates a new `ConditionalFormatRule`.
            ///
            /// - Parameters:
            ///   - booleanRule:
            ///   - gradientRule:
            ///   - ranges: The ranges that are formatted if the condition is true. All the ranges must be on the same grid.
            public init(
                booleanRule: Components.Schemas.BooleanRule? = nil,
                gradientRule: Components.Schemas.GradientRule? = nil,
                ranges: [Components.Schemas.GridRange]? = nil
            ) {
                self.booleanRule = booleanRule
                self.gradientRule = gradientRule
                self.ranges = ranges
            }
            public enum CodingKeys: String, CodingKey {
                case booleanRule
                case gradientRule
                case ranges
            }
        }
        /// Copies data from the source to the destination.
        ///
        /// - Remark: Generated from `#/components/schemas/CopyPasteRequest`.
        public struct CopyPasteRequest: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/CopyPasteRequest/destination`.
            public var destination: Components.Schemas.GridRange?
            /// How that data should be oriented when pasting.
            ///
            /// - Remark: Generated from `#/components/schemas/CopyPasteRequest/pasteOrientation`.
            @frozen public enum PasteOrientationPayload: String, Codable, Hashable, Sendable, CaseIterable {
                case normal = "NORMAL"
                case transpose = "TRANSPOSE"
            }
            /// How that data should be oriented when pasting.
            ///
            /// - Remark: Generated from `#/components/schemas/CopyPasteRequest/pasteOrientation`.
            public var pasteOrientation: Components.Schemas.CopyPasteRequest.PasteOrientationPayload?
            /// What kind of data to paste.
            ///
            /// - Remark: Generated from `#/components/schemas/CopyPasteRequest/pasteType`.
            @frozen public enum PasteTypePayload: String, Codable, Hashable, Sendable, CaseIterable {
                case pasteNormal = "PASTE_NORMAL"
                case pasteValues = "PASTE_VALUES"
                case pasteFormat = "PASTE_FORMAT"
                case pasteNoBorders = "PASTE_NO_BORDERS"
                case pasteFormula = "PASTE_FORMULA"
                case pasteDataValidation = "PASTE_DATA_VALIDATION"
                case pasteConditionalFormatting = "PASTE_CONDITIONAL_FORMATTING"
            }
            /// What kind of data to paste.
            ///
            /// - Remark: Generated from `#/components/schemas/CopyPasteRequest/pasteType`.
            public var pasteType: Components.Schemas.CopyPasteRequest.PasteTypePayload?
            /// - Remark: Generated from `#/components/schemas/CopyPasteRequest/source`.
            public var source: Components.Schemas.GridRange?
            /// Creates a new `CopyPasteRequest`.
            ///
            /// - Parameters:
            ///   - destination:
            ///   - pasteOrientation: How that data should be oriented when pasting.
            ///   - pasteType: What kind of data to paste.
            ///   - source:
            public init(
                destination: Components.Schemas.GridRange? = nil,
                pasteOrientation: Components.Schemas.CopyPasteRequest.PasteOrientationPayload? = nil,
                pasteType: Components.Schemas.CopyPasteRequest.PasteTypePayload? = nil,
                source: Components.Schemas.GridRange? = nil
            ) {
                self.destination = destination
                self.pasteOrientation = pasteOrientation
                self.pasteType = pasteType
                self.source = source
            }
            public enum CodingKeys: String, CodingKey {
                case destination
                case pasteOrientation
                case pasteType
                case source
            }
        }
        /// The request to copy a sheet across spreadsheets.
        ///
        /// - Remark: Generated from `#/components/schemas/CopySheetToAnotherSpreadsheetRequest`.
        public struct CopySheetToAnotherSpreadsheetRequest: Codable, Hashable, Sendable {
            /// The ID of the spreadsheet to copy the sheet to.
            ///
            /// - Remark: Generated from `#/components/schemas/CopySheetToAnotherSpreadsheetRequest/destinationSpreadsheetId`.
            public var destinationSpreadsheetId: Swift.String?
            /// Creates a new `CopySheetToAnotherSpreadsheetRequest`.
            ///
            /// - Parameters:
            ///   - destinationSpreadsheetId: The ID of the spreadsheet to copy the sheet to.
            public init(destinationSpreadsheetId: Swift.String? = nil) {
                self.destinationSpreadsheetId = destinationSpreadsheetId
            }
            public enum CodingKeys: String, CodingKey {
                case destinationSpreadsheetId
            }
        }
        /// A request to create developer metadata.
        ///
        /// - Remark: Generated from `#/components/schemas/CreateDeveloperMetadataRequest`.
        public struct CreateDeveloperMetadataRequest: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/CreateDeveloperMetadataRequest/developerMetadata`.
            public var developerMetadata: Components.Schemas.DeveloperMetadata?
            /// Creates a new `CreateDeveloperMetadataRequest`.
            ///
            /// - Parameters:
            ///   - developerMetadata:
            public init(developerMetadata: Components.Schemas.DeveloperMetadata? = nil) {
                self.developerMetadata = developerMetadata
            }
            public enum CodingKeys: String, CodingKey {
                case developerMetadata
            }
        }
        /// The response from creating developer metadata.
        ///
        /// - Remark: Generated from `#/components/schemas/CreateDeveloperMetadataResponse`.
        public struct CreateDeveloperMetadataResponse: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/CreateDeveloperMetadataResponse/developerMetadata`.
            public var developerMetadata: Components.Schemas.DeveloperMetadata?
            /// Creates a new `CreateDeveloperMetadataResponse`.
            ///
            /// - Parameters:
            ///   - developerMetadata:
            public init(developerMetadata: Components.Schemas.DeveloperMetadata? = nil) {
                self.developerMetadata = developerMetadata
            }
            public enum CodingKeys: String, CodingKey {
                case developerMetadata
            }
        }
        /// Moves data from the source to the destination.
        ///
        /// - Remark: Generated from `#/components/schemas/CutPasteRequest`.
        public struct CutPasteRequest: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/CutPasteRequest/destination`.
            public var destination: Components.Schemas.GridCoordinate?
            /// What kind of data to paste. All the source data will be cut, regardless of what is pasted.
            ///
            /// - Remark: Generated from `#/components/schemas/CutPasteRequest/pasteType`.
            @frozen public enum PasteTypePayload: String, Codable, Hashable, Sendable, CaseIterable {
                case pasteNormal = "PASTE_NORMAL"
                case pasteValues = "PASTE_VALUES"
                case pasteFormat = "PASTE_FORMAT"
                case pasteNoBorders = "PASTE_NO_BORDERS"
                case pasteFormula = "PASTE_FORMULA"
                case pasteDataValidation = "PASTE_DATA_VALIDATION"
                case pasteConditionalFormatting = "PASTE_CONDITIONAL_FORMATTING"
            }
            /// What kind of data to paste. All the source data will be cut, regardless of what is pasted.
            ///
            /// - Remark: Generated from `#/components/schemas/CutPasteRequest/pasteType`.
            public var pasteType: Components.Schemas.CutPasteRequest.PasteTypePayload?
            /// - Remark: Generated from `#/components/schemas/CutPasteRequest/source`.
            public var source: Components.Schemas.GridRange?
            /// Creates a new `CutPasteRequest`.
            ///
            /// - Parameters:
            ///   - destination:
            ///   - pasteType: What kind of data to paste. All the source data will be cut, regardless of what is pasted.
            ///   - source:
            public init(
                destination: Components.Schemas.GridCoordinate? = nil,
                pasteType: Components.Schemas.CutPasteRequest.PasteTypePayload? = nil,
                source: Components.Schemas.GridRange? = nil
            ) {
                self.destination = destination
                self.pasteType = pasteType
                self.source = source
            }
            public enum CodingKeys: String, CodingKey {
                case destination
                case pasteType
                case source
            }
        }
        /// The data execution status. A data execution is created to sync a data source object with the latest data from a DataSource. It is usually scheduled to run at background, you can check its state to tell if an execution completes There are several scenarios where a data execution is triggered to run: * Adding a data source creates an associated data source sheet as well as a data execution to sync the data from the data source to the sheet. * Updating a data source creates a data execution to refresh the associated data source sheet similarly. * You can send refresh request to explicitly refresh one or multiple data source objects.
        ///
        /// - Remark: Generated from `#/components/schemas/DataExecutionStatus`.
        public struct DataExecutionStatus: Codable, Hashable, Sendable {
            /// The error code.
            ///
            /// - Remark: Generated from `#/components/schemas/DataExecutionStatus/errorCode`.
            @frozen public enum ErrorCodePayload: String, Codable, Hashable, Sendable, CaseIterable {
                case dataExecutionErrorCodeUnspecified = "DATA_EXECUTION_ERROR_CODE_UNSPECIFIED"
                case timedOut = "TIMED_OUT"
                case tooManyRows = "TOO_MANY_ROWS"
                case tooManyColumns = "TOO_MANY_COLUMNS"
                case tooManyCells = "TOO_MANY_CELLS"
                case engine = "ENGINE"
                case parameterInvalid = "PARAMETER_INVALID"
                case unsupportedDataType = "UNSUPPORTED_DATA_TYPE"
                case duplicateColumnNames = "DUPLICATE_COLUMN_NAMES"
                case interrupted = "INTERRUPTED"
                case concurrentQuery = "CONCURRENT_QUERY"
                case other = "OTHER"
                case tooManyCharsPerCell = "TOO_MANY_CHARS_PER_CELL"
                case dataNotFound = "DATA_NOT_FOUND"
                case permissionDenied = "PERMISSION_DENIED"
                case missingColumnAlias = "MISSING_COLUMN_ALIAS"
                case objectNotFound = "OBJECT_NOT_FOUND"
                case objectInErrorState = "OBJECT_IN_ERROR_STATE"
                case objectSpecInvalid = "OBJECT_SPEC_INVALID"
            }
            /// The error code.
            ///
            /// - Remark: Generated from `#/components/schemas/DataExecutionStatus/errorCode`.
            public var errorCode: Components.Schemas.DataExecutionStatus.ErrorCodePayload?
            /// The error message, which may be empty.
            ///
            /// - Remark: Generated from `#/components/schemas/DataExecutionStatus/errorMessage`.
            public var errorMessage: Swift.String?
            /// Gets the time the data last successfully refreshed.
            ///
            /// - Remark: Generated from `#/components/schemas/DataExecutionStatus/lastRefreshTime`.
            public var lastRefreshTime: Swift.String?
            /// The state of the data execution.
            ///
            /// - Remark: Generated from `#/components/schemas/DataExecutionStatus/state`.
            @frozen public enum StatePayload: String, Codable, Hashable, Sendable, CaseIterable {
                case dataExecutionStateUnspecified = "DATA_EXECUTION_STATE_UNSPECIFIED"
                case notStarted = "NOT_STARTED"
                case running = "RUNNING"
                case succeeded = "SUCCEEDED"
                case failed = "FAILED"
            }
            /// The state of the data execution.
            ///
            /// - Remark: Generated from `#/components/schemas/DataExecutionStatus/state`.
            public var state: Components.Schemas.DataExecutionStatus.StatePayload?
            /// Creates a new `DataExecutionStatus`.
            ///
            /// - Parameters:
            ///   - errorCode: The error code.
            ///   - errorMessage: The error message, which may be empty.
            ///   - lastRefreshTime: Gets the time the data last successfully refreshed.
            ///   - state: The state of the data execution.
            public init(
                errorCode: Components.Schemas.DataExecutionStatus.ErrorCodePayload? = nil,
                errorMessage: Swift.String? = nil,
                lastRefreshTime: Swift.String? = nil,
                state: Components.Schemas.DataExecutionStatus.StatePayload? = nil
            ) {
                self.errorCode = errorCode
                self.errorMessage = errorMessage
                self.lastRefreshTime = lastRefreshTime
                self.state = state
            }
            public enum CodingKeys: String, CodingKey {
                case errorCode
                case errorMessage
                case lastRefreshTime
                case state
            }
        }
        /// Filter that describes what data should be selected or returned from a request.
        ///
        /// - Remark: Generated from `#/components/schemas/DataFilter`.
        public struct DataFilter: Codable, Hashable, Sendable {
            /// Selects data that matches the specified A1 range.
            ///
            /// - Remark: Generated from `#/components/schemas/DataFilter/a1Range`.
            public var a1Range: Swift.String?
            /// - Remark: Generated from `#/components/schemas/DataFilter/developerMetadataLookup`.
            public var developerMetadataLookup: Components.Schemas.DeveloperMetadataLookup?
            /// - Remark: Generated from `#/components/schemas/DataFilter/gridRange`.
            public var gridRange: Components.Schemas.GridRange?
            /// Creates a new `DataFilter`.
            ///
            /// - Parameters:
            ///   - a1Range: Selects data that matches the specified A1 range.
            ///   - developerMetadataLookup:
            ///   - gridRange:
            public init(
                a1Range: Swift.String? = nil,
                developerMetadataLookup: Components.Schemas.DeveloperMetadataLookup? = nil,
                gridRange: Components.Schemas.GridRange? = nil
            ) {
                self.a1Range = a1Range
                self.developerMetadataLookup = developerMetadataLookup
                self.gridRange = gridRange
            }
            public enum CodingKeys: String, CodingKey {
                case a1Range
                case developerMetadataLookup
                case gridRange
            }
        }
        /// A range of values whose location is specified by a DataFilter.
        ///
        /// - Remark: Generated from `#/components/schemas/DataFilterValueRange`.
        public struct DataFilterValueRange: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/DataFilterValueRange/dataFilter`.
            public var dataFilter: Components.Schemas.DataFilter?
            /// The major dimension of the values.
            ///
            /// - Remark: Generated from `#/components/schemas/DataFilterValueRange/majorDimension`.
            @frozen public enum MajorDimensionPayload: String, Codable, Hashable, Sendable, CaseIterable {
                case dimensionUnspecified = "DIMENSION_UNSPECIFIED"
                case rows = "ROWS"
                case columns = "COLUMNS"
            }
            /// The major dimension of the values.
            ///
            /// - Remark: Generated from `#/components/schemas/DataFilterValueRange/majorDimension`.
            public var majorDimension: Components.Schemas.DataFilterValueRange.MajorDimensionPayload?
            /// The data to be written. If the provided values exceed any of the ranges matched by the data filter then the request fails. If the provided values are less than the matched ranges only the specified values are written, existing values in the matched ranges remain unaffected.
            ///
            /// - Remark: Generated from `#/components/schemas/DataFilterValueRange/values`.
            public var values: [[OpenAPIRuntime.OpenAPIValueContainer]]?
            /// Creates a new `DataFilterValueRange`.
            ///
            /// - Parameters:
            ///   - dataFilter:
            ///   - majorDimension: The major dimension of the values.
            ///   - values: The data to be written. If the provided values exceed any of the ranges matched by the data filter then the request fails. If the provided values are less than the matched ranges only the specified values are written, existing values in the matched ranges remain unaffected.
            public init(
                dataFilter: Components.Schemas.DataFilter? = nil,
                majorDimension: Components.Schemas.DataFilterValueRange.MajorDimensionPayload? = nil,
                values: [[OpenAPIRuntime.OpenAPIValueContainer]]? = nil
            ) {
                self.dataFilter = dataFilter
                self.majorDimension = majorDimension
                self.values = values
            }
            public enum CodingKeys: String, CodingKey {
                case dataFilter
                case majorDimension
                case values
            }
        }
        /// Settings for one set of data labels. Data labels are annotations that appear next to a set of data, such as the points on a line chart, and provide additional information about what the data represents, such as a text representation of the value behind that point on the graph.
        ///
        /// - Remark: Generated from `#/components/schemas/DataLabel`.
        public struct DataLabel: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/DataLabel/customLabelData`.
            public var customLabelData: Components.Schemas.ChartData?
            /// The placement of the data label relative to the labeled data.
            ///
            /// - Remark: Generated from `#/components/schemas/DataLabel/placement`.
            @frozen public enum PlacementPayload: String, Codable, Hashable, Sendable, CaseIterable {
                case dataLabelPlacementUnspecified = "DATA_LABEL_PLACEMENT_UNSPECIFIED"
                case center = "CENTER"
                case left = "LEFT"
                case right = "RIGHT"
                case above = "ABOVE"
                case below = "BELOW"
                case insideEnd = "INSIDE_END"
                case insideBase = "INSIDE_BASE"
                case outsideEnd = "OUTSIDE_END"
            }
            /// The placement of the data label relative to the labeled data.
            ///
            /// - Remark: Generated from `#/components/schemas/DataLabel/placement`.
            public var placement: Components.Schemas.DataLabel.PlacementPayload?
            /// - Remark: Generated from `#/components/schemas/DataLabel/textFormat`.
            public var textFormat: Components.Schemas.TextFormat?
            /// The type of the data label.
            ///
            /// - Remark: Generated from `#/components/schemas/DataLabel/type`.
            @frozen public enum _TypePayload: String, Codable, Hashable, Sendable, CaseIterable {
                case dataLabelTypeUnspecified = "DATA_LABEL_TYPE_UNSPECIFIED"
                case none = "NONE"
                case data = "DATA"
                case custom = "CUSTOM"
            }
            /// The type of the data label.
            ///
            /// - Remark: Generated from `#/components/schemas/DataLabel/type`.
            public var _type: Components.Schemas.DataLabel._TypePayload?
            /// Creates a new `DataLabel`.
            ///
            /// - Parameters:
            ///   - customLabelData:
            ///   - placement: The placement of the data label relative to the labeled data.
            ///   - textFormat:
            ///   - _type: The type of the data label.
            public init(
                customLabelData: Components.Schemas.ChartData? = nil,
                placement: Components.Schemas.DataLabel.PlacementPayload? = nil,
                textFormat: Components.Schemas.TextFormat? = nil,
                _type: Components.Schemas.DataLabel._TypePayload? = nil
            ) {
                self.customLabelData = customLabelData
                self.placement = placement
                self.textFormat = textFormat
                self._type = _type
            }
            public enum CodingKeys: String, CodingKey {
                case customLabelData
                case placement
                case textFormat
                case _type = "type"
            }
        }
        /// Information about an external data source in the spreadsheet.
        ///
        /// - Remark: Generated from `#/components/schemas/DataSource`.
        public struct DataSource: Codable, Hashable, Sendable {
            /// All calculated columns in the data source.
            ///
            /// - Remark: Generated from `#/components/schemas/DataSource/calculatedColumns`.
            public var calculatedColumns: [Components.Schemas.DataSourceColumn]?
            /// The spreadsheet-scoped unique ID that identifies the data source. Example: 1080547365.
            ///
            /// - Remark: Generated from `#/components/schemas/DataSource/dataSourceId`.
            public var dataSourceId: Swift.String?
            /// The ID of the Sheet connected with the data source. The field cannot be changed once set. When creating a data source, an associated DATA_SOURCE sheet is also created, if the field is not specified, the ID of the created sheet will be randomly generated.
            ///
            /// - Remark: Generated from `#/components/schemas/DataSource/sheetId`.
            public var sheetId: Swift.Int32?
            /// - Remark: Generated from `#/components/schemas/DataSource/spec`.
            public var spec: Components.Schemas.DataSourceSpec?
            /// Creates a new `DataSource`.
            ///
            /// - Parameters:
            ///   - calculatedColumns: All calculated columns in the data source.
            ///   - dataSourceId: The spreadsheet-scoped unique ID that identifies the data source. Example: 1080547365.
            ///   - sheetId: The ID of the Sheet connected with the data source. The field cannot be changed once set. When creating a data source, an associated DATA_SOURCE sheet is also created, if the field is not specified, the ID of the created sheet will be randomly generated.
            ///   - spec:
            public init(
                calculatedColumns: [Components.Schemas.DataSourceColumn]? = nil,
                dataSourceId: Swift.String? = nil,
                sheetId: Swift.Int32? = nil,
                spec: Components.Schemas.DataSourceSpec? = nil
            ) {
                self.calculatedColumns = calculatedColumns
                self.dataSourceId = dataSourceId
                self.sheetId = sheetId
                self.spec = spec
            }
            public enum CodingKeys: String, CodingKey {
                case calculatedColumns
                case dataSourceId
                case sheetId
                case spec
            }
        }
        /// Properties of a data source chart.
        ///
        /// - Remark: Generated from `#/components/schemas/DataSourceChartProperties`.
        public struct DataSourceChartProperties: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/DataSourceChartProperties/dataExecutionStatus`.
            public var dataExecutionStatus: Components.Schemas.DataExecutionStatus?
            /// ID of the data source that the chart is associated with.
            ///
            /// - Remark: Generated from `#/components/schemas/DataSourceChartProperties/dataSourceId`.
            public var dataSourceId: Swift.String?
            /// Creates a new `DataSourceChartProperties`.
            ///
            /// - Parameters:
            ///   - dataExecutionStatus:
            ///   - dataSourceId: ID of the data source that the chart is associated with.
            public init(
                dataExecutionStatus: Components.Schemas.DataExecutionStatus? = nil,
                dataSourceId: Swift.String? = nil
            ) {
                self.dataExecutionStatus = dataExecutionStatus
                self.dataSourceId = dataSourceId
            }
            public enum CodingKeys: String, CodingKey {
                case dataExecutionStatus
                case dataSourceId
            }
        }
        /// A column in a data source.
        ///
        /// - Remark: Generated from `#/components/schemas/DataSourceColumn`.
        public struct DataSourceColumn: Codable, Hashable, Sendable {
            /// The formula of the calculated column.
            ///
            /// - Remark: Generated from `#/components/schemas/DataSourceColumn/formula`.
            public var formula: Swift.String?
            /// - Remark: Generated from `#/components/schemas/DataSourceColumn/reference`.
            public var reference: Components.Schemas.DataSourceColumnReference?
            /// Creates a new `DataSourceColumn`.
            ///
            /// - Parameters:
            ///   - formula: The formula of the calculated column.
            ///   - reference:
            public init(
                formula: Swift.String? = nil,
                reference: Components.Schemas.DataSourceColumnReference? = nil
            ) {
                self.formula = formula
                self.reference = reference
            }
            public enum CodingKeys: String, CodingKey {
                case formula
                case reference
            }
        }
        /// An unique identifier that references a data source column.
        ///
        /// - Remark: Generated from `#/components/schemas/DataSourceColumnReference`.
        public struct DataSourceColumnReference: Codable, Hashable, Sendable {
            /// The display name of the column. It should be unique within a data source.
            ///
            /// - Remark: Generated from `#/components/schemas/DataSourceColumnReference/name`.
            public var name: Swift.String?
            /// Creates a new `DataSourceColumnReference`.
            ///
            /// - Parameters:
            ///   - name: The display name of the column. It should be unique within a data source.
            public init(name: Swift.String? = nil) {
                self.name = name
            }
            public enum CodingKeys: String, CodingKey {
                case name
            }
        }
        /// A data source formula.
        ///
        /// - Remark: Generated from `#/components/schemas/DataSourceFormula`.
        public struct DataSourceFormula: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/DataSourceFormula/dataExecutionStatus`.
            public var dataExecutionStatus: Components.Schemas.DataExecutionStatus?
            /// The ID of the data source the formula is associated with.
            ///
            /// - Remark: Generated from `#/components/schemas/DataSourceFormula/dataSourceId`.
            public var dataSourceId: Swift.String?
            /// Creates a new `DataSourceFormula`.
            ///
            /// - Parameters:
            ///   - dataExecutionStatus:
            ///   - dataSourceId: The ID of the data source the formula is associated with.
            public init(
                dataExecutionStatus: Components.Schemas.DataExecutionStatus? = nil,
                dataSourceId: Swift.String? = nil
            ) {
                self.dataExecutionStatus = dataExecutionStatus
                self.dataSourceId = dataSourceId
            }
            public enum CodingKeys: String, CodingKey {
                case dataExecutionStatus
                case dataSourceId
            }
        }
        /// Reference to a data source object.
        ///
        /// - Remark: Generated from `#/components/schemas/DataSourceObjectReference`.
        public struct DataSourceObjectReference: Codable, Hashable, Sendable {
            /// References to a data source chart.
            ///
            /// - Remark: Generated from `#/components/schemas/DataSourceObjectReference/chartId`.
            public var chartId: Swift.Int32?
            /// - Remark: Generated from `#/components/schemas/DataSourceObjectReference/dataSourceFormulaCell`.
            public var dataSourceFormulaCell: Components.Schemas.GridCoordinate?
            /// - Remark: Generated from `#/components/schemas/DataSourceObjectReference/dataSourcePivotTableAnchorCell`.
            public var dataSourcePivotTableAnchorCell: Components.Schemas.GridCoordinate?
            /// - Remark: Generated from `#/components/schemas/DataSourceObjectReference/dataSourceTableAnchorCell`.
            public var dataSourceTableAnchorCell: Components.Schemas.GridCoordinate?
            /// References to a DATA_SOURCE sheet.
            ///
            /// - Remark: Generated from `#/components/schemas/DataSourceObjectReference/sheetId`.
            public var sheetId: Swift.String?
            /// Creates a new `DataSourceObjectReference`.
            ///
            /// - Parameters:
            ///   - chartId: References to a data source chart.
            ///   - dataSourceFormulaCell:
            ///   - dataSourcePivotTableAnchorCell:
            ///   - dataSourceTableAnchorCell:
            ///   - sheetId: References to a DATA_SOURCE sheet.
            public init(
                chartId: Swift.Int32? = nil,
                dataSourceFormulaCell: Components.Schemas.GridCoordinate? = nil,
                dataSourcePivotTableAnchorCell: Components.Schemas.GridCoordinate? = nil,
                dataSourceTableAnchorCell: Components.Schemas.GridCoordinate? = nil,
                sheetId: Swift.String? = nil
            ) {
                self.chartId = chartId
                self.dataSourceFormulaCell = dataSourceFormulaCell
                self.dataSourcePivotTableAnchorCell = dataSourcePivotTableAnchorCell
                self.dataSourceTableAnchorCell = dataSourceTableAnchorCell
                self.sheetId = sheetId
            }
            public enum CodingKeys: String, CodingKey {
                case chartId
                case dataSourceFormulaCell
                case dataSourcePivotTableAnchorCell
                case dataSourceTableAnchorCell
                case sheetId
            }
        }
        /// A list of references to data source objects.
        ///
        /// - Remark: Generated from `#/components/schemas/DataSourceObjectReferences`.
        public struct DataSourceObjectReferences: Codable, Hashable, Sendable {
            /// The references.
            ///
            /// - Remark: Generated from `#/components/schemas/DataSourceObjectReferences/references`.
            public var references: [Components.Schemas.DataSourceObjectReference]?
            /// Creates a new `DataSourceObjectReferences`.
            ///
            /// - Parameters:
            ///   - references: The references.
            public init(references: [Components.Schemas.DataSourceObjectReference]? = nil) {
                self.references = references
            }
            public enum CodingKeys: String, CodingKey {
                case references
            }
        }
        /// A parameter in a data source's query. The parameter allows the user to pass in values from the spreadsheet into a query.
        ///
        /// - Remark: Generated from `#/components/schemas/DataSourceParameter`.
        public struct DataSourceParameter: Codable, Hashable, Sendable {
            /// Named parameter. Must be a legitimate identifier for the DataSource that supports it. For example, [BigQuery identifier](https://cloud.google.com/bigquery/docs/reference/standard-sql/lexical#identifiers).
            ///
            /// - Remark: Generated from `#/components/schemas/DataSourceParameter/name`.
            public var name: Swift.String?
            /// ID of a NamedRange. Its size must be 1x1.
            ///
            /// - Remark: Generated from `#/components/schemas/DataSourceParameter/namedRangeId`.
            public var namedRangeId: Swift.String?
            /// - Remark: Generated from `#/components/schemas/DataSourceParameter/range`.
            public var range: Components.Schemas.GridRange?
            /// Creates a new `DataSourceParameter`.
            ///
            /// - Parameters:
            ///   - name: Named parameter. Must be a legitimate identifier for the DataSource that supports it. For example, [BigQuery identifier](https://cloud.google.com/bigquery/docs/reference/standard-sql/lexical#identifiers).
            ///   - namedRangeId: ID of a NamedRange. Its size must be 1x1.
            ///   - range:
            public init(
                name: Swift.String? = nil,
                namedRangeId: Swift.String? = nil,
                range: Components.Schemas.GridRange? = nil
            ) {
                self.name = name
                self.namedRangeId = namedRangeId
                self.range = range
            }
            public enum CodingKeys: String, CodingKey {
                case name
                case namedRangeId
                case range
            }
        }
        /// A schedule for data to refresh every day in a given time interval.
        ///
        /// - Remark: Generated from `#/components/schemas/DataSourceRefreshDailySchedule`.
        public struct DataSourceRefreshDailySchedule: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/DataSourceRefreshDailySchedule/startTime`.
            public var startTime: Components.Schemas.TimeOfDay?
            /// Creates a new `DataSourceRefreshDailySchedule`.
            ///
            /// - Parameters:
            ///   - startTime:
            public init(startTime: Components.Schemas.TimeOfDay? = nil) {
                self.startTime = startTime
            }
            public enum CodingKeys: String, CodingKey {
                case startTime
            }
        }
        /// A monthly schedule for data to refresh on specific days in the month in a given time interval.
        ///
        /// - Remark: Generated from `#/components/schemas/DataSourceRefreshMonthlySchedule`.
        public struct DataSourceRefreshMonthlySchedule: Codable, Hashable, Sendable {
            /// Days of the month to refresh. Only 1-28 are supported, mapping to the 1st to the 28th day. At least one day must be specified.
            ///
            /// - Remark: Generated from `#/components/schemas/DataSourceRefreshMonthlySchedule/daysOfMonth`.
            public var daysOfMonth: [Swift.Int32]?
            /// - Remark: Generated from `#/components/schemas/DataSourceRefreshMonthlySchedule/startTime`.
            public var startTime: Components.Schemas.TimeOfDay?
            /// Creates a new `DataSourceRefreshMonthlySchedule`.
            ///
            /// - Parameters:
            ///   - daysOfMonth: Days of the month to refresh. Only 1-28 are supported, mapping to the 1st to the 28th day. At least one day must be specified.
            ///   - startTime:
            public init(
                daysOfMonth: [Swift.Int32]? = nil,
                startTime: Components.Schemas.TimeOfDay? = nil
            ) {
                self.daysOfMonth = daysOfMonth
                self.startTime = startTime
            }
            public enum CodingKeys: String, CodingKey {
                case daysOfMonth
                case startTime
            }
        }
        /// Schedule for refreshing the data source. Data sources in the spreadsheet are refreshed within a time interval. You can specify the start time by clicking the Scheduled Refresh button in the Sheets editor, but the interval is fixed at 4 hours. For example, if you specify a start time of 8 AM , the refresh will take place between 8 AM and 12 PM every day.
        ///
        /// - Remark: Generated from `#/components/schemas/DataSourceRefreshSchedule`.
        public struct DataSourceRefreshSchedule: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/DataSourceRefreshSchedule/dailySchedule`.
            public var dailySchedule: Components.Schemas.DataSourceRefreshDailySchedule?
            /// True if the refresh schedule is enabled, or false otherwise.
            ///
            /// - Remark: Generated from `#/components/schemas/DataSourceRefreshSchedule/enabled`.
            public var enabled: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/DataSourceRefreshSchedule/monthlySchedule`.
            public var monthlySchedule: Components.Schemas.DataSourceRefreshMonthlySchedule?
            /// - Remark: Generated from `#/components/schemas/DataSourceRefreshSchedule/nextRun`.
            public var nextRun: Components.Schemas.Interval?
            /// The scope of the refresh. Must be ALL_DATA_SOURCES.
            ///
            /// - Remark: Generated from `#/components/schemas/DataSourceRefreshSchedule/refreshScope`.
            @frozen public enum RefreshScopePayload: String, Codable, Hashable, Sendable, CaseIterable {
                case dataSourceRefreshScopeUnspecified = "DATA_SOURCE_REFRESH_SCOPE_UNSPECIFIED"
                case allDataSources = "ALL_DATA_SOURCES"
            }
            /// The scope of the refresh. Must be ALL_DATA_SOURCES.
            ///
            /// - Remark: Generated from `#/components/schemas/DataSourceRefreshSchedule/refreshScope`.
            public var refreshScope: Components.Schemas.DataSourceRefreshSchedule.RefreshScopePayload?
            /// - Remark: Generated from `#/components/schemas/DataSourceRefreshSchedule/weeklySchedule`.
            public var weeklySchedule: Components.Schemas.DataSourceRefreshWeeklySchedule?
            /// Creates a new `DataSourceRefreshSchedule`.
            ///
            /// - Parameters:
            ///   - dailySchedule:
            ///   - enabled: True if the refresh schedule is enabled, or false otherwise.
            ///   - monthlySchedule:
            ///   - nextRun:
            ///   - refreshScope: The scope of the refresh. Must be ALL_DATA_SOURCES.
            ///   - weeklySchedule:
            public init(
                dailySchedule: Components.Schemas.DataSourceRefreshDailySchedule? = nil,
                enabled: Swift.Bool? = nil,
                monthlySchedule: Components.Schemas.DataSourceRefreshMonthlySchedule? = nil,
                nextRun: Components.Schemas.Interval? = nil,
                refreshScope: Components.Schemas.DataSourceRefreshSchedule.RefreshScopePayload? = nil,
                weeklySchedule: Components.Schemas.DataSourceRefreshWeeklySchedule? = nil
            ) {
                self.dailySchedule = dailySchedule
                self.enabled = enabled
                self.monthlySchedule = monthlySchedule
                self.nextRun = nextRun
                self.refreshScope = refreshScope
                self.weeklySchedule = weeklySchedule
            }
            public enum CodingKeys: String, CodingKey {
                case dailySchedule
                case enabled
                case monthlySchedule
                case nextRun
                case refreshScope
                case weeklySchedule
            }
        }
        /// A weekly schedule for data to refresh on specific days in a given time interval.
        ///
        /// - Remark: Generated from `#/components/schemas/DataSourceRefreshWeeklySchedule`.
        public struct DataSourceRefreshWeeklySchedule: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/DataSourceRefreshWeeklySchedule/DaysOfWeekPayload`.
            @frozen public enum DaysOfWeekPayloadPayload: String, Codable, Hashable, Sendable, CaseIterable {
                case dayOfWeekUnspecified = "DAY_OF_WEEK_UNSPECIFIED"
                case monday = "MONDAY"
                case tuesday = "TUESDAY"
                case wednesday = "WEDNESDAY"
                case thursday = "THURSDAY"
                case friday = "FRIDAY"
                case saturday = "SATURDAY"
                case sunday = "SUNDAY"
            }
            /// Days of the week to refresh. At least one day must be specified.
            ///
            /// - Remark: Generated from `#/components/schemas/DataSourceRefreshWeeklySchedule/daysOfWeek`.
            public typealias DaysOfWeekPayload = [Components.Schemas.DataSourceRefreshWeeklySchedule.DaysOfWeekPayloadPayload]
            /// Days of the week to refresh. At least one day must be specified.
            ///
            /// - Remark: Generated from `#/components/schemas/DataSourceRefreshWeeklySchedule/daysOfWeek`.
            public var daysOfWeek: Components.Schemas.DataSourceRefreshWeeklySchedule.DaysOfWeekPayload?
            /// - Remark: Generated from `#/components/schemas/DataSourceRefreshWeeklySchedule/startTime`.
            public var startTime: Components.Schemas.TimeOfDay?
            /// Creates a new `DataSourceRefreshWeeklySchedule`.
            ///
            /// - Parameters:
            ///   - daysOfWeek: Days of the week to refresh. At least one day must be specified.
            ///   - startTime:
            public init(
                daysOfWeek: Components.Schemas.DataSourceRefreshWeeklySchedule.DaysOfWeekPayload? = nil,
                startTime: Components.Schemas.TimeOfDay? = nil
            ) {
                self.daysOfWeek = daysOfWeek
                self.startTime = startTime
            }
            public enum CodingKeys: String, CodingKey {
                case daysOfWeek
                case startTime
            }
        }
        /// A range along a single dimension on a DATA_SOURCE sheet.
        ///
        /// - Remark: Generated from `#/components/schemas/DataSourceSheetDimensionRange`.
        public struct DataSourceSheetDimensionRange: Codable, Hashable, Sendable {
            /// The columns on the data source sheet.
            ///
            /// - Remark: Generated from `#/components/schemas/DataSourceSheetDimensionRange/columnReferences`.
            public var columnReferences: [Components.Schemas.DataSourceColumnReference]?
            /// The ID of the data source sheet the range is on.
            ///
            /// - Remark: Generated from `#/components/schemas/DataSourceSheetDimensionRange/sheetId`.
            public var sheetId: Swift.Int32?
            /// Creates a new `DataSourceSheetDimensionRange`.
            ///
            /// - Parameters:
            ///   - columnReferences: The columns on the data source sheet.
            ///   - sheetId: The ID of the data source sheet the range is on.
            public init(
                columnReferences: [Components.Schemas.DataSourceColumnReference]? = nil,
                sheetId: Swift.Int32? = nil
            ) {
                self.columnReferences = columnReferences
                self.sheetId = sheetId
            }
            public enum CodingKeys: String, CodingKey {
                case columnReferences
                case sheetId
            }
        }
        /// Additional properties of a DATA_SOURCE sheet.
        ///
        /// - Remark: Generated from `#/components/schemas/DataSourceSheetProperties`.
        public struct DataSourceSheetProperties: Codable, Hashable, Sendable {
            /// The columns displayed on the sheet, corresponding to the values in RowData.
            ///
            /// - Remark: Generated from `#/components/schemas/DataSourceSheetProperties/columns`.
            public var columns: [Components.Schemas.DataSourceColumn]?
            /// - Remark: Generated from `#/components/schemas/DataSourceSheetProperties/dataExecutionStatus`.
            public var dataExecutionStatus: Components.Schemas.DataExecutionStatus?
            /// ID of the DataSource the sheet is connected to.
            ///
            /// - Remark: Generated from `#/components/schemas/DataSourceSheetProperties/dataSourceId`.
            public var dataSourceId: Swift.String?
            /// Creates a new `DataSourceSheetProperties`.
            ///
            /// - Parameters:
            ///   - columns: The columns displayed on the sheet, corresponding to the values in RowData.
            ///   - dataExecutionStatus:
            ///   - dataSourceId: ID of the DataSource the sheet is connected to.
            public init(
                columns: [Components.Schemas.DataSourceColumn]? = nil,
                dataExecutionStatus: Components.Schemas.DataExecutionStatus? = nil,
                dataSourceId: Swift.String? = nil
            ) {
                self.columns = columns
                self.dataExecutionStatus = dataExecutionStatus
                self.dataSourceId = dataSourceId
            }
            public enum CodingKeys: String, CodingKey {
                case columns
                case dataExecutionStatus
                case dataSourceId
            }
        }
        /// This specifies the details of the data source. For example, for BigQuery, this specifies information about the BigQuery source.
        ///
        /// - Remark: Generated from `#/components/schemas/DataSourceSpec`.
        public struct DataSourceSpec: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/DataSourceSpec/bigQuery`.
            public var bigQuery: Components.Schemas.BigQueryDataSourceSpec?
            /// The parameters of the data source, used when querying the data source.
            ///
            /// - Remark: Generated from `#/components/schemas/DataSourceSpec/parameters`.
            public var parameters: [Components.Schemas.DataSourceParameter]?
            /// Creates a new `DataSourceSpec`.
            ///
            /// - Parameters:
            ///   - bigQuery:
            ///   - parameters: The parameters of the data source, used when querying the data source.
            public init(
                bigQuery: Components.Schemas.BigQueryDataSourceSpec? = nil,
                parameters: [Components.Schemas.DataSourceParameter]? = nil
            ) {
                self.bigQuery = bigQuery
                self.parameters = parameters
            }
            public enum CodingKeys: String, CodingKey {
                case bigQuery
                case parameters
            }
        }
        /// A data source table, which allows the user to import a static table of data from the DataSource into Sheets. This is also known as "Extract" in the Sheets editor.
        ///
        /// - Remark: Generated from `#/components/schemas/DataSourceTable`.
        public struct DataSourceTable: Codable, Hashable, Sendable {
            /// The type to select columns for the data source table. Defaults to SELECTED.
            ///
            /// - Remark: Generated from `#/components/schemas/DataSourceTable/columnSelectionType`.
            @frozen public enum ColumnSelectionTypePayload: String, Codable, Hashable, Sendable, CaseIterable {
                case dataSourceTableColumnSelectionTypeUnspecified = "DATA_SOURCE_TABLE_COLUMN_SELECTION_TYPE_UNSPECIFIED"
                case selected = "SELECTED"
                case syncAll = "SYNC_ALL"
            }
            /// The type to select columns for the data source table. Defaults to SELECTED.
            ///
            /// - Remark: Generated from `#/components/schemas/DataSourceTable/columnSelectionType`.
            public var columnSelectionType: Components.Schemas.DataSourceTable.ColumnSelectionTypePayload?
            /// Columns selected for the data source table. The column_selection_type must be SELECTED.
            ///
            /// - Remark: Generated from `#/components/schemas/DataSourceTable/columns`.
            public var columns: [Components.Schemas.DataSourceColumnReference]?
            /// - Remark: Generated from `#/components/schemas/DataSourceTable/dataExecutionStatus`.
            public var dataExecutionStatus: Components.Schemas.DataExecutionStatus?
            /// The ID of the data source the data source table is associated with.
            ///
            /// - Remark: Generated from `#/components/schemas/DataSourceTable/dataSourceId`.
            public var dataSourceId: Swift.String?
            /// Filter specifications in the data source table.
            ///
            /// - Remark: Generated from `#/components/schemas/DataSourceTable/filterSpecs`.
            public var filterSpecs: [Components.Schemas.FilterSpec]?
            /// The limit of rows to return. If not set, a default limit is applied. Please refer to the Sheets editor for the default and max limit.
            ///
            /// - Remark: Generated from `#/components/schemas/DataSourceTable/rowLimit`.
            public var rowLimit: Swift.Int32?
            /// Sort specifications in the data source table. The result of the data source table is sorted based on the sort specifications in order.
            ///
            /// - Remark: Generated from `#/components/schemas/DataSourceTable/sortSpecs`.
            public var sortSpecs: [Components.Schemas.SortSpec]?
            /// Creates a new `DataSourceTable`.
            ///
            /// - Parameters:
            ///   - columnSelectionType: The type to select columns for the data source table. Defaults to SELECTED.
            ///   - columns: Columns selected for the data source table. The column_selection_type must be SELECTED.
            ///   - dataExecutionStatus:
            ///   - dataSourceId: The ID of the data source the data source table is associated with.
            ///   - filterSpecs: Filter specifications in the data source table.
            ///   - rowLimit: The limit of rows to return. If not set, a default limit is applied. Please refer to the Sheets editor for the default and max limit.
            ///   - sortSpecs: Sort specifications in the data source table. The result of the data source table is sorted based on the sort specifications in order.
            public init(
                columnSelectionType: Components.Schemas.DataSourceTable.ColumnSelectionTypePayload? = nil,
                columns: [Components.Schemas.DataSourceColumnReference]? = nil,
                dataExecutionStatus: Components.Schemas.DataExecutionStatus? = nil,
                dataSourceId: Swift.String? = nil,
                filterSpecs: [Components.Schemas.FilterSpec]? = nil,
                rowLimit: Swift.Int32? = nil,
                sortSpecs: [Components.Schemas.SortSpec]? = nil
            ) {
                self.columnSelectionType = columnSelectionType
                self.columns = columns
                self.dataExecutionStatus = dataExecutionStatus
                self.dataSourceId = dataSourceId
                self.filterSpecs = filterSpecs
                self.rowLimit = rowLimit
                self.sortSpecs = sortSpecs
            }
            public enum CodingKeys: String, CodingKey {
                case columnSelectionType
                case columns
                case dataExecutionStatus
                case dataSourceId
                case filterSpecs
                case rowLimit
                case sortSpecs
            }
        }
        /// A data validation rule.
        ///
        /// - Remark: Generated from `#/components/schemas/DataValidationRule`.
        public struct DataValidationRule: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/DataValidationRule/condition`.
            public var condition: Components.Schemas.BooleanCondition?
            /// A message to show the user when adding data to the cell.
            ///
            /// - Remark: Generated from `#/components/schemas/DataValidationRule/inputMessage`.
            public var inputMessage: Swift.String?
            /// True if the UI should be customized based on the kind of condition. If true, "List" conditions will show a dropdown.
            ///
            /// - Remark: Generated from `#/components/schemas/DataValidationRule/showCustomUi`.
            public var showCustomUi: Swift.Bool?
            /// True if invalid data should be rejected.
            ///
            /// - Remark: Generated from `#/components/schemas/DataValidationRule/strict`.
            public var strict: Swift.Bool?
            /// Creates a new `DataValidationRule`.
            ///
            /// - Parameters:
            ///   - condition:
            ///   - inputMessage: A message to show the user when adding data to the cell.
            ///   - showCustomUi: True if the UI should be customized based on the kind of condition. If true, "List" conditions will show a dropdown.
            ///   - strict: True if invalid data should be rejected.
            public init(
                condition: Components.Schemas.BooleanCondition? = nil,
                inputMessage: Swift.String? = nil,
                showCustomUi: Swift.Bool? = nil,
                strict: Swift.Bool? = nil
            ) {
                self.condition = condition
                self.inputMessage = inputMessage
                self.showCustomUi = showCustomUi
                self.strict = strict
            }
            public enum CodingKeys: String, CodingKey {
                case condition
                case inputMessage
                case showCustomUi
                case strict
            }
        }
        /// Allows you to organize the date-time values in a source data column into buckets based on selected parts of their date or time values. For example, consider a pivot table showing sales transactions by date: +----------+--------------+ | Date | SUM of Sales | +----------+--------------+ | 1/1/2017 | $621.14 | | 2/3/2017 | $708.84 | | 5/8/2017 | $326.84 | ... +----------+--------------+ Applying a date-time group rule with a DateTimeRuleType of YEAR_MONTH results in the following pivot table. +--------------+--------------+ | Grouped Date | SUM of Sales | +--------------+--------------+ | 2017-Jan | $53,731.78 | | 2017-Feb | $83,475.32 | | 2017-Mar | $94,385.05 | ... +--------------+--------------+
        ///
        /// - Remark: Generated from `#/components/schemas/DateTimeRule`.
        public struct DateTimeRule: Codable, Hashable, Sendable {
            /// The type of date-time grouping to apply.
            ///
            /// - Remark: Generated from `#/components/schemas/DateTimeRule/type`.
            @frozen public enum _TypePayload: String, Codable, Hashable, Sendable, CaseIterable {
                case dateTimeRuleTypeUnspecified = "DATE_TIME_RULE_TYPE_UNSPECIFIED"
                case second = "SECOND"
                case minute = "MINUTE"
                case hour = "HOUR"
                case hourMinute = "HOUR_MINUTE"
                case hourMinuteAmpm = "HOUR_MINUTE_AMPM"
                case dayOfWeek = "DAY_OF_WEEK"
                case dayOfYear = "DAY_OF_YEAR"
                case dayOfMonth = "DAY_OF_MONTH"
                case dayMonth = "DAY_MONTH"
                case month = "MONTH"
                case quarter = "QUARTER"
                case year = "YEAR"
                case yearMonth = "YEAR_MONTH"
                case yearQuarter = "YEAR_QUARTER"
                case yearMonthDay = "YEAR_MONTH_DAY"
            }
            /// The type of date-time grouping to apply.
            ///
            /// - Remark: Generated from `#/components/schemas/DateTimeRule/type`.
            public var _type: Components.Schemas.DateTimeRule._TypePayload?
            /// Creates a new `DateTimeRule`.
            ///
            /// - Parameters:
            ///   - _type: The type of date-time grouping to apply.
            public init(_type: Components.Schemas.DateTimeRule._TypePayload? = nil) {
                self._type = _type
            }
            public enum CodingKeys: String, CodingKey {
                case _type = "type"
            }
        }
        /// Removes the banded range with the given ID from the spreadsheet.
        ///
        /// - Remark: Generated from `#/components/schemas/DeleteBandingRequest`.
        public struct DeleteBandingRequest: Codable, Hashable, Sendable {
            /// The ID of the banded range to delete.
            ///
            /// - Remark: Generated from `#/components/schemas/DeleteBandingRequest/bandedRangeId`.
            public var bandedRangeId: Swift.Int32?
            /// Creates a new `DeleteBandingRequest`.
            ///
            /// - Parameters:
            ///   - bandedRangeId: The ID of the banded range to delete.
            public init(bandedRangeId: Swift.Int32? = nil) {
                self.bandedRangeId = bandedRangeId
            }
            public enum CodingKeys: String, CodingKey {
                case bandedRangeId
            }
        }
        /// Deletes a conditional format rule at the given index. All subsequent rules' indexes are decremented.
        ///
        /// - Remark: Generated from `#/components/schemas/DeleteConditionalFormatRuleRequest`.
        public struct DeleteConditionalFormatRuleRequest: Codable, Hashable, Sendable {
            /// The zero-based index of the rule to be deleted.
            ///
            /// - Remark: Generated from `#/components/schemas/DeleteConditionalFormatRuleRequest/index`.
            public var index: Swift.Int32?
            /// The sheet the rule is being deleted from.
            ///
            /// - Remark: Generated from `#/components/schemas/DeleteConditionalFormatRuleRequest/sheetId`.
            public var sheetId: Swift.Int32?
            /// Creates a new `DeleteConditionalFormatRuleRequest`.
            ///
            /// - Parameters:
            ///   - index: The zero-based index of the rule to be deleted.
            ///   - sheetId: The sheet the rule is being deleted from.
            public init(
                index: Swift.Int32? = nil,
                sheetId: Swift.Int32? = nil
            ) {
                self.index = index
                self.sheetId = sheetId
            }
            public enum CodingKeys: String, CodingKey {
                case index
                case sheetId
            }
        }
        /// The result of deleting a conditional format rule.
        ///
        /// - Remark: Generated from `#/components/schemas/DeleteConditionalFormatRuleResponse`.
        public struct DeleteConditionalFormatRuleResponse: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/DeleteConditionalFormatRuleResponse/rule`.
            public var rule: Components.Schemas.ConditionalFormatRule?
            /// Creates a new `DeleteConditionalFormatRuleResponse`.
            ///
            /// - Parameters:
            ///   - rule:
            public init(rule: Components.Schemas.ConditionalFormatRule? = nil) {
                self.rule = rule
            }
            public enum CodingKeys: String, CodingKey {
                case rule
            }
        }
        /// Deletes a data source. The request also deletes the associated data source sheet, and unlinks all associated data source objects.
        ///
        /// - Remark: Generated from `#/components/schemas/DeleteDataSourceRequest`.
        public struct DeleteDataSourceRequest: Codable, Hashable, Sendable {
            /// The ID of the data source to delete.
            ///
            /// - Remark: Generated from `#/components/schemas/DeleteDataSourceRequest/dataSourceId`.
            public var dataSourceId: Swift.String?
            /// Creates a new `DeleteDataSourceRequest`.
            ///
            /// - Parameters:
            ///   - dataSourceId: The ID of the data source to delete.
            public init(dataSourceId: Swift.String? = nil) {
                self.dataSourceId = dataSourceId
            }
            public enum CodingKeys: String, CodingKey {
                case dataSourceId
            }
        }
        /// A request to delete developer metadata.
        ///
        /// - Remark: Generated from `#/components/schemas/DeleteDeveloperMetadataRequest`.
        public struct DeleteDeveloperMetadataRequest: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/DeleteDeveloperMetadataRequest/dataFilter`.
            public var dataFilter: Components.Schemas.DataFilter?
            /// Creates a new `DeleteDeveloperMetadataRequest`.
            ///
            /// - Parameters:
            ///   - dataFilter:
            public init(dataFilter: Components.Schemas.DataFilter? = nil) {
                self.dataFilter = dataFilter
            }
            public enum CodingKeys: String, CodingKey {
                case dataFilter
            }
        }
        /// The response from deleting developer metadata.
        ///
        /// - Remark: Generated from `#/components/schemas/DeleteDeveloperMetadataResponse`.
        public struct DeleteDeveloperMetadataResponse: Codable, Hashable, Sendable {
            /// The metadata that was deleted.
            ///
            /// - Remark: Generated from `#/components/schemas/DeleteDeveloperMetadataResponse/deletedDeveloperMetadata`.
            public var deletedDeveloperMetadata: [Components.Schemas.DeveloperMetadata]?
            /// Creates a new `DeleteDeveloperMetadataResponse`.
            ///
            /// - Parameters:
            ///   - deletedDeveloperMetadata: The metadata that was deleted.
            public init(deletedDeveloperMetadata: [Components.Schemas.DeveloperMetadata]? = nil) {
                self.deletedDeveloperMetadata = deletedDeveloperMetadata
            }
            public enum CodingKeys: String, CodingKey {
                case deletedDeveloperMetadata
            }
        }
        /// Deletes a group over the specified range by decrementing the depth of the dimensions in the range. For example, assume the sheet has a depth-1 group over B:E and a depth-2 group over C:D. Deleting a group over D:E leaves the sheet with a depth-1 group over B:D and a depth-2 group over C:C.
        ///
        /// - Remark: Generated from `#/components/schemas/DeleteDimensionGroupRequest`.
        public struct DeleteDimensionGroupRequest: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/DeleteDimensionGroupRequest/range`.
            public var range: Components.Schemas.DimensionRange?
            /// Creates a new `DeleteDimensionGroupRequest`.
            ///
            /// - Parameters:
            ///   - range:
            public init(range: Components.Schemas.DimensionRange? = nil) {
                self.range = range
            }
            public enum CodingKeys: String, CodingKey {
                case range
            }
        }
        /// The result of deleting a group.
        ///
        /// - Remark: Generated from `#/components/schemas/DeleteDimensionGroupResponse`.
        public struct DeleteDimensionGroupResponse: Codable, Hashable, Sendable {
            /// All groups of a dimension after deleting a group from that dimension.
            ///
            /// - Remark: Generated from `#/components/schemas/DeleteDimensionGroupResponse/dimensionGroups`.
            public var dimensionGroups: [Components.Schemas.DimensionGroup]?
            /// Creates a new `DeleteDimensionGroupResponse`.
            ///
            /// - Parameters:
            ///   - dimensionGroups: All groups of a dimension after deleting a group from that dimension.
            public init(dimensionGroups: [Components.Schemas.DimensionGroup]? = nil) {
                self.dimensionGroups = dimensionGroups
            }
            public enum CodingKeys: String, CodingKey {
                case dimensionGroups
            }
        }
        /// Deletes the dimensions from the sheet.
        ///
        /// - Remark: Generated from `#/components/schemas/DeleteDimensionRequest`.
        public struct DeleteDimensionRequest: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/DeleteDimensionRequest/range`.
            public var range: Components.Schemas.DimensionRange?
            /// Creates a new `DeleteDimensionRequest`.
            ///
            /// - Parameters:
            ///   - range:
            public init(range: Components.Schemas.DimensionRange? = nil) {
                self.range = range
            }
            public enum CodingKeys: String, CodingKey {
                case range
            }
        }
        /// Removes rows within this range that contain values in the specified columns that are duplicates of values in any previous row. Rows with identical values but different letter cases, formatting, or formulas are considered to be duplicates. This request also removes duplicate rows hidden from view (for example, due to a filter). When removing duplicates, the first instance of each duplicate row scanning from the top downwards is kept in the resulting range. Content outside of the specified range isn't removed, and rows considered duplicates do not have to be adjacent to each other in the range.
        ///
        /// - Remark: Generated from `#/components/schemas/DeleteDuplicatesRequest`.
        public struct DeleteDuplicatesRequest: Codable, Hashable, Sendable {
            /// The columns in the range to analyze for duplicate values. If no columns are selected then all columns are analyzed for duplicates.
            ///
            /// - Remark: Generated from `#/components/schemas/DeleteDuplicatesRequest/comparisonColumns`.
            public var comparisonColumns: [Components.Schemas.DimensionRange]?
            /// - Remark: Generated from `#/components/schemas/DeleteDuplicatesRequest/range`.
            public var range: Components.Schemas.GridRange?
            /// Creates a new `DeleteDuplicatesRequest`.
            ///
            /// - Parameters:
            ///   - comparisonColumns: The columns in the range to analyze for duplicate values. If no columns are selected then all columns are analyzed for duplicates.
            ///   - range:
            public init(
                comparisonColumns: [Components.Schemas.DimensionRange]? = nil,
                range: Components.Schemas.GridRange? = nil
            ) {
                self.comparisonColumns = comparisonColumns
                self.range = range
            }
            public enum CodingKeys: String, CodingKey {
                case comparisonColumns
                case range
            }
        }
        /// The result of removing duplicates in a range.
        ///
        /// - Remark: Generated from `#/components/schemas/DeleteDuplicatesResponse`.
        public struct DeleteDuplicatesResponse: Codable, Hashable, Sendable {
            /// The number of duplicate rows removed.
            ///
            /// - Remark: Generated from `#/components/schemas/DeleteDuplicatesResponse/duplicatesRemovedCount`.
            public var duplicatesRemovedCount: Swift.Int32?
            /// Creates a new `DeleteDuplicatesResponse`.
            ///
            /// - Parameters:
            ///   - duplicatesRemovedCount: The number of duplicate rows removed.
            public init(duplicatesRemovedCount: Swift.Int32? = nil) {
                self.duplicatesRemovedCount = duplicatesRemovedCount
            }
            public enum CodingKeys: String, CodingKey {
                case duplicatesRemovedCount
            }
        }
        /// Deletes the embedded object with the given ID.
        ///
        /// - Remark: Generated from `#/components/schemas/DeleteEmbeddedObjectRequest`.
        public struct DeleteEmbeddedObjectRequest: Codable, Hashable, Sendable {
            /// The ID of the embedded object to delete.
            ///
            /// - Remark: Generated from `#/components/schemas/DeleteEmbeddedObjectRequest/objectId`.
            public var objectId: Swift.Int32?
            /// Creates a new `DeleteEmbeddedObjectRequest`.
            ///
            /// - Parameters:
            ///   - objectId: The ID of the embedded object to delete.
            public init(objectId: Swift.Int32? = nil) {
                self.objectId = objectId
            }
            public enum CodingKeys: String, CodingKey {
                case objectId
            }
        }
        /// Deletes a particular filter view.
        ///
        /// - Remark: Generated from `#/components/schemas/DeleteFilterViewRequest`.
        public struct DeleteFilterViewRequest: Codable, Hashable, Sendable {
            /// The ID of the filter to delete.
            ///
            /// - Remark: Generated from `#/components/schemas/DeleteFilterViewRequest/filterId`.
            public var filterId: Swift.Int32?
            /// Creates a new `DeleteFilterViewRequest`.
            ///
            /// - Parameters:
            ///   - filterId: The ID of the filter to delete.
            public init(filterId: Swift.Int32? = nil) {
                self.filterId = filterId
            }
            public enum CodingKeys: String, CodingKey {
                case filterId
            }
        }
        /// Removes the named range with the given ID from the spreadsheet.
        ///
        /// - Remark: Generated from `#/components/schemas/DeleteNamedRangeRequest`.
        public struct DeleteNamedRangeRequest: Codable, Hashable, Sendable {
            /// The ID of the named range to delete.
            ///
            /// - Remark: Generated from `#/components/schemas/DeleteNamedRangeRequest/namedRangeId`.
            public var namedRangeId: Swift.String?
            /// Creates a new `DeleteNamedRangeRequest`.
            ///
            /// - Parameters:
            ///   - namedRangeId: The ID of the named range to delete.
            public init(namedRangeId: Swift.String? = nil) {
                self.namedRangeId = namedRangeId
            }
            public enum CodingKeys: String, CodingKey {
                case namedRangeId
            }
        }
        /// Deletes the protected range with the given ID.
        ///
        /// - Remark: Generated from `#/components/schemas/DeleteProtectedRangeRequest`.
        public struct DeleteProtectedRangeRequest: Codable, Hashable, Sendable {
            /// The ID of the protected range to delete.
            ///
            /// - Remark: Generated from `#/components/schemas/DeleteProtectedRangeRequest/protectedRangeId`.
            public var protectedRangeId: Swift.Int32?
            /// Creates a new `DeleteProtectedRangeRequest`.
            ///
            /// - Parameters:
            ///   - protectedRangeId: The ID of the protected range to delete.
            public init(protectedRangeId: Swift.Int32? = nil) {
                self.protectedRangeId = protectedRangeId
            }
            public enum CodingKeys: String, CodingKey {
                case protectedRangeId
            }
        }
        /// Deletes a range of cells, shifting other cells into the deleted area.
        ///
        /// - Remark: Generated from `#/components/schemas/DeleteRangeRequest`.
        public struct DeleteRangeRequest: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/DeleteRangeRequest/range`.
            public var range: Components.Schemas.GridRange?
            /// The dimension from which deleted cells will be replaced with. If ROWS, existing cells will be shifted upward to replace the deleted cells. If COLUMNS, existing cells will be shifted left to replace the deleted cells.
            ///
            /// - Remark: Generated from `#/components/schemas/DeleteRangeRequest/shiftDimension`.
            @frozen public enum ShiftDimensionPayload: String, Codable, Hashable, Sendable, CaseIterable {
                case dimensionUnspecified = "DIMENSION_UNSPECIFIED"
                case rows = "ROWS"
                case columns = "COLUMNS"
            }
            /// The dimension from which deleted cells will be replaced with. If ROWS, existing cells will be shifted upward to replace the deleted cells. If COLUMNS, existing cells will be shifted left to replace the deleted cells.
            ///
            /// - Remark: Generated from `#/components/schemas/DeleteRangeRequest/shiftDimension`.
            public var shiftDimension: Components.Schemas.DeleteRangeRequest.ShiftDimensionPayload?
            /// Creates a new `DeleteRangeRequest`.
            ///
            /// - Parameters:
            ///   - range:
            ///   - shiftDimension: The dimension from which deleted cells will be replaced with. If ROWS, existing cells will be shifted upward to replace the deleted cells. If COLUMNS, existing cells will be shifted left to replace the deleted cells.
            public init(
                range: Components.Schemas.GridRange? = nil,
                shiftDimension: Components.Schemas.DeleteRangeRequest.ShiftDimensionPayload? = nil
            ) {
                self.range = range
                self.shiftDimension = shiftDimension
            }
            public enum CodingKeys: String, CodingKey {
                case range
                case shiftDimension
            }
        }
        /// Deletes the requested sheet.
        ///
        /// - Remark: Generated from `#/components/schemas/DeleteSheetRequest`.
        public struct DeleteSheetRequest: Codable, Hashable, Sendable {
            /// The ID of the sheet to delete. If the sheet is of DATA_SOURCE type, the associated DataSource is also deleted.
            ///
            /// - Remark: Generated from `#/components/schemas/DeleteSheetRequest/sheetId`.
            public var sheetId: Swift.Int32?
            /// Creates a new `DeleteSheetRequest`.
            ///
            /// - Parameters:
            ///   - sheetId: The ID of the sheet to delete. If the sheet is of DATA_SOURCE type, the associated DataSource is also deleted.
            public init(sheetId: Swift.Int32? = nil) {
                self.sheetId = sheetId
            }
            public enum CodingKeys: String, CodingKey {
                case sheetId
            }
        }
        /// Developer metadata associated with a location or object in a spreadsheet. Developer metadata may be used to associate arbitrary data with various parts of a spreadsheet and will remain associated at those locations as they move around and the spreadsheet is edited. For example, if developer metadata is associated with row 5 and another row is then subsequently inserted above row 5, that original metadata will still be associated with the row it was first associated with (what is now row 6). If the associated object is deleted its metadata is deleted too.
        ///
        /// - Remark: Generated from `#/components/schemas/DeveloperMetadata`.
        public struct DeveloperMetadata: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/DeveloperMetadata/location`.
            public var location: Components.Schemas.DeveloperMetadataLocation?
            /// The spreadsheet-scoped unique ID that identifies the metadata. IDs may be specified when metadata is created, otherwise one will be randomly generated and assigned. Must be positive.
            ///
            /// - Remark: Generated from `#/components/schemas/DeveloperMetadata/metadataId`.
            public var metadataId: Swift.Int32?
            /// The metadata key. There may be multiple metadata in a spreadsheet with the same key. Developer metadata must always have a key specified.
            ///
            /// - Remark: Generated from `#/components/schemas/DeveloperMetadata/metadataKey`.
            public var metadataKey: Swift.String?
            /// Data associated with the metadata's key.
            ///
            /// - Remark: Generated from `#/components/schemas/DeveloperMetadata/metadataValue`.
            public var metadataValue: Swift.String?
            /// The metadata visibility. Developer metadata must always have a visibility specified.
            ///
            /// - Remark: Generated from `#/components/schemas/DeveloperMetadata/visibility`.
            @frozen public enum VisibilityPayload: String, Codable, Hashable, Sendable, CaseIterable {
                case developerMetadataVisibilityUnspecified = "DEVELOPER_METADATA_VISIBILITY_UNSPECIFIED"
                case document = "DOCUMENT"
                case project = "PROJECT"
            }
            /// The metadata visibility. Developer metadata must always have a visibility specified.
            ///
            /// - Remark: Generated from `#/components/schemas/DeveloperMetadata/visibility`.
            public var visibility: Components.Schemas.DeveloperMetadata.VisibilityPayload?
            /// Creates a new `DeveloperMetadata`.
            ///
            /// - Parameters:
            ///   - location:
            ///   - metadataId: The spreadsheet-scoped unique ID that identifies the metadata. IDs may be specified when metadata is created, otherwise one will be randomly generated and assigned. Must be positive.
            ///   - metadataKey: The metadata key. There may be multiple metadata in a spreadsheet with the same key. Developer metadata must always have a key specified.
            ///   - metadataValue: Data associated with the metadata's key.
            ///   - visibility: The metadata visibility. Developer metadata must always have a visibility specified.
            public init(
                location: Components.Schemas.DeveloperMetadataLocation? = nil,
                metadataId: Swift.Int32? = nil,
                metadataKey: Swift.String? = nil,
                metadataValue: Swift.String? = nil,
                visibility: Components.Schemas.DeveloperMetadata.VisibilityPayload? = nil
            ) {
                self.location = location
                self.metadataId = metadataId
                self.metadataKey = metadataKey
                self.metadataValue = metadataValue
                self.visibility = visibility
            }
            public enum CodingKeys: String, CodingKey {
                case location
                case metadataId
                case metadataKey
                case metadataValue
                case visibility
            }
        }
        /// A location where metadata may be associated in a spreadsheet.
        ///
        /// - Remark: Generated from `#/components/schemas/DeveloperMetadataLocation`.
        public struct DeveloperMetadataLocation: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/DeveloperMetadataLocation/dimensionRange`.
            public var dimensionRange: Components.Schemas.DimensionRange?
            /// The type of location this object represents. This field is read-only.
            ///
            /// - Remark: Generated from `#/components/schemas/DeveloperMetadataLocation/locationType`.
            @frozen public enum LocationTypePayload: String, Codable, Hashable, Sendable, CaseIterable {
                case developerMetadataLocationTypeUnspecified = "DEVELOPER_METADATA_LOCATION_TYPE_UNSPECIFIED"
                case row = "ROW"
                case column = "COLUMN"
                case sheet = "SHEET"
                case spreadsheet = "SPREADSHEET"
            }
            /// The type of location this object represents. This field is read-only.
            ///
            /// - Remark: Generated from `#/components/schemas/DeveloperMetadataLocation/locationType`.
            public var locationType: Components.Schemas.DeveloperMetadataLocation.LocationTypePayload?
            /// The ID of the sheet when metadata is associated with an entire sheet.
            ///
            /// - Remark: Generated from `#/components/schemas/DeveloperMetadataLocation/sheetId`.
            public var sheetId: Swift.Int32?
            /// True when metadata is associated with an entire spreadsheet.
            ///
            /// - Remark: Generated from `#/components/schemas/DeveloperMetadataLocation/spreadsheet`.
            public var spreadsheet: Swift.Bool?
            /// Creates a new `DeveloperMetadataLocation`.
            ///
            /// - Parameters:
            ///   - dimensionRange:
            ///   - locationType: The type of location this object represents. This field is read-only.
            ///   - sheetId: The ID of the sheet when metadata is associated with an entire sheet.
            ///   - spreadsheet: True when metadata is associated with an entire spreadsheet.
            public init(
                dimensionRange: Components.Schemas.DimensionRange? = nil,
                locationType: Components.Schemas.DeveloperMetadataLocation.LocationTypePayload? = nil,
                sheetId: Swift.Int32? = nil,
                spreadsheet: Swift.Bool? = nil
            ) {
                self.dimensionRange = dimensionRange
                self.locationType = locationType
                self.sheetId = sheetId
                self.spreadsheet = spreadsheet
            }
            public enum CodingKeys: String, CodingKey {
                case dimensionRange
                case locationType
                case sheetId
                case spreadsheet
            }
        }
        /// Selects DeveloperMetadata that matches all of the specified fields. For example, if only a metadata ID is specified this considers the DeveloperMetadata with that particular unique ID. If a metadata key is specified, this considers all developer metadata with that key. If a key, visibility, and location type are all specified, this considers all developer metadata with that key and visibility that are associated with a location of that type. In general, this selects all DeveloperMetadata that matches the intersection of all the specified fields; any field or combination of fields may be specified.
        ///
        /// - Remark: Generated from `#/components/schemas/DeveloperMetadataLookup`.
        public struct DeveloperMetadataLookup: Codable, Hashable, Sendable {
            /// Determines how this lookup matches the location. If this field is specified as EXACT, only developer metadata associated on the exact location specified is matched. If this field is specified to INTERSECTING, developer metadata associated on intersecting locations is also matched. If left unspecified, this field assumes a default value of INTERSECTING. If this field is specified, a metadataLocation must also be specified.
            ///
            /// - Remark: Generated from `#/components/schemas/DeveloperMetadataLookup/locationMatchingStrategy`.
            @frozen public enum LocationMatchingStrategyPayload: String, Codable, Hashable, Sendable, CaseIterable {
                case developerMetadataLocationMatchingStrategyUnspecified = "DEVELOPER_METADATA_LOCATION_MATCHING_STRATEGY_UNSPECIFIED"
                case exactLocation = "EXACT_LOCATION"
                case intersectingLocation = "INTERSECTING_LOCATION"
            }
            /// Determines how this lookup matches the location. If this field is specified as EXACT, only developer metadata associated on the exact location specified is matched. If this field is specified to INTERSECTING, developer metadata associated on intersecting locations is also matched. If left unspecified, this field assumes a default value of INTERSECTING. If this field is specified, a metadataLocation must also be specified.
            ///
            /// - Remark: Generated from `#/components/schemas/DeveloperMetadataLookup/locationMatchingStrategy`.
            public var locationMatchingStrategy: Components.Schemas.DeveloperMetadataLookup.LocationMatchingStrategyPayload?
            /// Limits the selected developer metadata to those entries which are associated with locations of the specified type. For example, when this field is specified as ROW this lookup only considers developer metadata associated on rows. If the field is left unspecified, all location types are considered. This field cannot be specified as SPREADSHEET when the locationMatchingStrategy is specified as INTERSECTING or when the metadataLocation is specified as a non-spreadsheet location: spreadsheet metadata cannot intersect any other developer metadata location. This field also must be left unspecified when the locationMatchingStrategy is specified as EXACT.
            ///
            /// - Remark: Generated from `#/components/schemas/DeveloperMetadataLookup/locationType`.
            @frozen public enum LocationTypePayload: String, Codable, Hashable, Sendable, CaseIterable {
                case developerMetadataLocationTypeUnspecified = "DEVELOPER_METADATA_LOCATION_TYPE_UNSPECIFIED"
                case row = "ROW"
                case column = "COLUMN"
                case sheet = "SHEET"
                case spreadsheet = "SPREADSHEET"
            }
            /// Limits the selected developer metadata to those entries which are associated with locations of the specified type. For example, when this field is specified as ROW this lookup only considers developer metadata associated on rows. If the field is left unspecified, all location types are considered. This field cannot be specified as SPREADSHEET when the locationMatchingStrategy is specified as INTERSECTING or when the metadataLocation is specified as a non-spreadsheet location: spreadsheet metadata cannot intersect any other developer metadata location. This field also must be left unspecified when the locationMatchingStrategy is specified as EXACT.
            ///
            /// - Remark: Generated from `#/components/schemas/DeveloperMetadataLookup/locationType`.
            public var locationType: Components.Schemas.DeveloperMetadataLookup.LocationTypePayload?
            /// Limits the selected developer metadata to that which has a matching DeveloperMetadata.metadata_id.
            ///
            /// - Remark: Generated from `#/components/schemas/DeveloperMetadataLookup/metadataId`.
            public var metadataId: Swift.Int32?
            /// Limits the selected developer metadata to that which has a matching DeveloperMetadata.metadata_key.
            ///
            /// - Remark: Generated from `#/components/schemas/DeveloperMetadataLookup/metadataKey`.
            public var metadataKey: Swift.String?
            /// - Remark: Generated from `#/components/schemas/DeveloperMetadataLookup/metadataLocation`.
            public var metadataLocation: Components.Schemas.DeveloperMetadataLocation?
            /// Limits the selected developer metadata to that which has a matching DeveloperMetadata.metadata_value.
            ///
            /// - Remark: Generated from `#/components/schemas/DeveloperMetadataLookup/metadataValue`.
            public var metadataValue: Swift.String?
            /// Limits the selected developer metadata to that which has a matching DeveloperMetadata.visibility. If left unspecified, all developer metadata visibile to the requesting project is considered.
            ///
            /// - Remark: Generated from `#/components/schemas/DeveloperMetadataLookup/visibility`.
            @frozen public enum VisibilityPayload: String, Codable, Hashable, Sendable, CaseIterable {
                case developerMetadataVisibilityUnspecified = "DEVELOPER_METADATA_VISIBILITY_UNSPECIFIED"
                case document = "DOCUMENT"
                case project = "PROJECT"
            }
            /// Limits the selected developer metadata to that which has a matching DeveloperMetadata.visibility. If left unspecified, all developer metadata visibile to the requesting project is considered.
            ///
            /// - Remark: Generated from `#/components/schemas/DeveloperMetadataLookup/visibility`.
            public var visibility: Components.Schemas.DeveloperMetadataLookup.VisibilityPayload?
            /// Creates a new `DeveloperMetadataLookup`.
            ///
            /// - Parameters:
            ///   - locationMatchingStrategy: Determines how this lookup matches the location. If this field is specified as EXACT, only developer metadata associated on the exact location specified is matched. If this field is specified to INTERSECTING, developer metadata associated on intersecting locations is also matched. If left unspecified, this field assumes a default value of INTERSECTING. If this field is specified, a metadataLocation must also be specified.
            ///   - locationType: Limits the selected developer metadata to those entries which are associated with locations of the specified type. For example, when this field is specified as ROW this lookup only considers developer metadata associated on rows. If the field is left unspecified, all location types are considered. This field cannot be specified as SPREADSHEET when the locationMatchingStrategy is specified as INTERSECTING or when the metadataLocation is specified as a non-spreadsheet location: spreadsheet metadata cannot intersect any other developer metadata location. This field also must be left unspecified when the locationMatchingStrategy is specified as EXACT.
            ///   - metadataId: Limits the selected developer metadata to that which has a matching DeveloperMetadata.metadata_id.
            ///   - metadataKey: Limits the selected developer metadata to that which has a matching DeveloperMetadata.metadata_key.
            ///   - metadataLocation:
            ///   - metadataValue: Limits the selected developer metadata to that which has a matching DeveloperMetadata.metadata_value.
            ///   - visibility: Limits the selected developer metadata to that which has a matching DeveloperMetadata.visibility. If left unspecified, all developer metadata visibile to the requesting project is considered.
            public init(
                locationMatchingStrategy: Components.Schemas.DeveloperMetadataLookup.LocationMatchingStrategyPayload? = nil,
                locationType: Components.Schemas.DeveloperMetadataLookup.LocationTypePayload? = nil,
                metadataId: Swift.Int32? = nil,
                metadataKey: Swift.String? = nil,
                metadataLocation: Components.Schemas.DeveloperMetadataLocation? = nil,
                metadataValue: Swift.String? = nil,
                visibility: Components.Schemas.DeveloperMetadataLookup.VisibilityPayload? = nil
            ) {
                self.locationMatchingStrategy = locationMatchingStrategy
                self.locationType = locationType
                self.metadataId = metadataId
                self.metadataKey = metadataKey
                self.metadataLocation = metadataLocation
                self.metadataValue = metadataValue
                self.visibility = visibility
            }
            public enum CodingKeys: String, CodingKey {
                case locationMatchingStrategy
                case locationType
                case metadataId
                case metadataKey
                case metadataLocation
                case metadataValue
                case visibility
            }
        }
        /// A group over an interval of rows or columns on a sheet, which can contain or be contained within other groups. A group can be collapsed or expanded as a unit on the sheet.
        ///
        /// - Remark: Generated from `#/components/schemas/DimensionGroup`.
        public struct DimensionGroup: Codable, Hashable, Sendable {
            /// This field is true if this group is collapsed. A collapsed group remains collapsed if an overlapping group at a shallower depth is expanded. A true value does not imply that all dimensions within the group are hidden, since a dimension's visibility can change independently from this group property. However, when this property is updated, all dimensions within it are set to hidden if this field is true, or set to visible if this field is false.
            ///
            /// - Remark: Generated from `#/components/schemas/DimensionGroup/collapsed`.
            public var collapsed: Swift.Bool?
            /// The depth of the group, representing how many groups have a range that wholly contains the range of this group.
            ///
            /// - Remark: Generated from `#/components/schemas/DimensionGroup/depth`.
            public var depth: Swift.Int32?
            /// - Remark: Generated from `#/components/schemas/DimensionGroup/range`.
            public var range: Components.Schemas.DimensionRange?
            /// Creates a new `DimensionGroup`.
            ///
            /// - Parameters:
            ///   - collapsed: This field is true if this group is collapsed. A collapsed group remains collapsed if an overlapping group at a shallower depth is expanded. A true value does not imply that all dimensions within the group are hidden, since a dimension's visibility can change independently from this group property. However, when this property is updated, all dimensions within it are set to hidden if this field is true, or set to visible if this field is false.
            ///   - depth: The depth of the group, representing how many groups have a range that wholly contains the range of this group.
            ///   - range:
            public init(
                collapsed: Swift.Bool? = nil,
                depth: Swift.Int32? = nil,
                range: Components.Schemas.DimensionRange? = nil
            ) {
                self.collapsed = collapsed
                self.depth = depth
                self.range = range
            }
            public enum CodingKeys: String, CodingKey {
                case collapsed
                case depth
                case range
            }
        }
        /// Properties about a dimension.
        ///
        /// - Remark: Generated from `#/components/schemas/DimensionProperties`.
        public struct DimensionProperties: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/DimensionProperties/dataSourceColumnReference`.
            public var dataSourceColumnReference: Components.Schemas.DataSourceColumnReference?
            /// The developer metadata associated with a single row or column.
            ///
            /// - Remark: Generated from `#/components/schemas/DimensionProperties/developerMetadata`.
            public var developerMetadata: [Components.Schemas.DeveloperMetadata]?
            /// True if this dimension is being filtered. This field is read-only.
            ///
            /// - Remark: Generated from `#/components/schemas/DimensionProperties/hiddenByFilter`.
            public var hiddenByFilter: Swift.Bool?
            /// True if this dimension is explicitly hidden.
            ///
            /// - Remark: Generated from `#/components/schemas/DimensionProperties/hiddenByUser`.
            public var hiddenByUser: Swift.Bool?
            /// The height (if a row) or width (if a column) of the dimension in pixels.
            ///
            /// - Remark: Generated from `#/components/schemas/DimensionProperties/pixelSize`.
            public var pixelSize: Swift.Int32?
            /// Creates a new `DimensionProperties`.
            ///
            /// - Parameters:
            ///   - dataSourceColumnReference:
            ///   - developerMetadata: The developer metadata associated with a single row or column.
            ///   - hiddenByFilter: True if this dimension is being filtered. This field is read-only.
            ///   - hiddenByUser: True if this dimension is explicitly hidden.
            ///   - pixelSize: The height (if a row) or width (if a column) of the dimension in pixels.
            public init(
                dataSourceColumnReference: Components.Schemas.DataSourceColumnReference? = nil,
                developerMetadata: [Components.Schemas.DeveloperMetadata]? = nil,
                hiddenByFilter: Swift.Bool? = nil,
                hiddenByUser: Swift.Bool? = nil,
                pixelSize: Swift.Int32? = nil
            ) {
                self.dataSourceColumnReference = dataSourceColumnReference
                self.developerMetadata = developerMetadata
                self.hiddenByFilter = hiddenByFilter
                self.hiddenByUser = hiddenByUser
                self.pixelSize = pixelSize
            }
            public enum CodingKeys: String, CodingKey {
                case dataSourceColumnReference
                case developerMetadata
                case hiddenByFilter
                case hiddenByUser
                case pixelSize
            }
        }
        /// A range along a single dimension on a sheet. All indexes are zero-based. Indexes are half open: the start index is inclusive and the end index is exclusive. Missing indexes indicate the range is unbounded on that side.
        ///
        /// - Remark: Generated from `#/components/schemas/DimensionRange`.
        public struct DimensionRange: Codable, Hashable, Sendable {
            /// The dimension of the span.
            ///
            /// - Remark: Generated from `#/components/schemas/DimensionRange/dimension`.
            @frozen public enum DimensionPayload: String, Codable, Hashable, Sendable, CaseIterable {
                case dimensionUnspecified = "DIMENSION_UNSPECIFIED"
                case rows = "ROWS"
                case columns = "COLUMNS"
            }
            /// The dimension of the span.
            ///
            /// - Remark: Generated from `#/components/schemas/DimensionRange/dimension`.
            public var dimension: Components.Schemas.DimensionRange.DimensionPayload?
            /// The end (exclusive) of the span, or not set if unbounded.
            ///
            /// - Remark: Generated from `#/components/schemas/DimensionRange/endIndex`.
            public var endIndex: Swift.Int32?
            /// The sheet this span is on.
            ///
            /// - Remark: Generated from `#/components/schemas/DimensionRange/sheetId`.
            public var sheetId: Swift.Int32?
            /// The start (inclusive) of the span, or not set if unbounded.
            ///
            /// - Remark: Generated from `#/components/schemas/DimensionRange/startIndex`.
            public var startIndex: Swift.Int32?
            /// Creates a new `DimensionRange`.
            ///
            /// - Parameters:
            ///   - dimension: The dimension of the span.
            ///   - endIndex: The end (exclusive) of the span, or not set if unbounded.
            ///   - sheetId: The sheet this span is on.
            ///   - startIndex: The start (inclusive) of the span, or not set if unbounded.
            public init(
                dimension: Components.Schemas.DimensionRange.DimensionPayload? = nil,
                endIndex: Swift.Int32? = nil,
                sheetId: Swift.Int32? = nil,
                startIndex: Swift.Int32? = nil
            ) {
                self.dimension = dimension
                self.endIndex = endIndex
                self.sheetId = sheetId
                self.startIndex = startIndex
            }
            public enum CodingKeys: String, CodingKey {
                case dimension
                case endIndex
                case sheetId
                case startIndex
            }
        }
        /// Duplicates a particular filter view.
        ///
        /// - Remark: Generated from `#/components/schemas/DuplicateFilterViewRequest`.
        public struct DuplicateFilterViewRequest: Codable, Hashable, Sendable {
            /// The ID of the filter being duplicated.
            ///
            /// - Remark: Generated from `#/components/schemas/DuplicateFilterViewRequest/filterId`.
            public var filterId: Swift.Int32?
            /// Creates a new `DuplicateFilterViewRequest`.
            ///
            /// - Parameters:
            ///   - filterId: The ID of the filter being duplicated.
            public init(filterId: Swift.Int32? = nil) {
                self.filterId = filterId
            }
            public enum CodingKeys: String, CodingKey {
                case filterId
            }
        }
        /// The result of a filter view being duplicated.
        ///
        /// - Remark: Generated from `#/components/schemas/DuplicateFilterViewResponse`.
        public struct DuplicateFilterViewResponse: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/DuplicateFilterViewResponse/filter`.
            public var filter: Components.Schemas.FilterView?
            /// Creates a new `DuplicateFilterViewResponse`.
            ///
            /// - Parameters:
            ///   - filter:
            public init(filter: Components.Schemas.FilterView? = nil) {
                self.filter = filter
            }
            public enum CodingKeys: String, CodingKey {
                case filter
            }
        }
        /// Duplicates the contents of a sheet.
        ///
        /// - Remark: Generated from `#/components/schemas/DuplicateSheetRequest`.
        public struct DuplicateSheetRequest: Codable, Hashable, Sendable {
            /// The zero-based index where the new sheet should be inserted. The index of all sheets after this are incremented.
            ///
            /// - Remark: Generated from `#/components/schemas/DuplicateSheetRequest/insertSheetIndex`.
            public var insertSheetIndex: Swift.Int32?
            /// If set, the ID of the new sheet. If not set, an ID is chosen. If set, the ID must not conflict with any existing sheet ID. If set, it must be non-negative.
            ///
            /// - Remark: Generated from `#/components/schemas/DuplicateSheetRequest/newSheetId`.
            public var newSheetId: Swift.Int32?
            /// The name of the new sheet. If empty, a new name is chosen for you.
            ///
            /// - Remark: Generated from `#/components/schemas/DuplicateSheetRequest/newSheetName`.
            public var newSheetName: Swift.String?
            /// The sheet to duplicate. If the source sheet is of DATA_SOURCE type, its backing DataSource is also duplicated and associated with the new copy of the sheet. No data execution is triggered, the grid data of this sheet is also copied over but only available after the batch request completes.
            ///
            /// - Remark: Generated from `#/components/schemas/DuplicateSheetRequest/sourceSheetId`.
            public var sourceSheetId: Swift.Int32?
            /// Creates a new `DuplicateSheetRequest`.
            ///
            /// - Parameters:
            ///   - insertSheetIndex: The zero-based index where the new sheet should be inserted. The index of all sheets after this are incremented.
            ///   - newSheetId: If set, the ID of the new sheet. If not set, an ID is chosen. If set, the ID must not conflict with any existing sheet ID. If set, it must be non-negative.
            ///   - newSheetName: The name of the new sheet. If empty, a new name is chosen for you.
            ///   - sourceSheetId: The sheet to duplicate. If the source sheet is of DATA_SOURCE type, its backing DataSource is also duplicated and associated with the new copy of the sheet. No data execution is triggered, the grid data of this sheet is also copied over but only available after the batch request completes.
            public init(
                insertSheetIndex: Swift.Int32? = nil,
                newSheetId: Swift.Int32? = nil,
                newSheetName: Swift.String? = nil,
                sourceSheetId: Swift.Int32? = nil
            ) {
                self.insertSheetIndex = insertSheetIndex
                self.newSheetId = newSheetId
                self.newSheetName = newSheetName
                self.sourceSheetId = sourceSheetId
            }
            public enum CodingKeys: String, CodingKey {
                case insertSheetIndex
                case newSheetId
                case newSheetName
                case sourceSheetId
            }
        }
        /// The result of duplicating a sheet.
        ///
        /// - Remark: Generated from `#/components/schemas/DuplicateSheetResponse`.
        public struct DuplicateSheetResponse: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/DuplicateSheetResponse/properties`.
            public var properties: Components.Schemas.SheetProperties?
            /// Creates a new `DuplicateSheetResponse`.
            ///
            /// - Parameters:
            ///   - properties:
            public init(properties: Components.Schemas.SheetProperties? = nil) {
                self.properties = properties
            }
            public enum CodingKeys: String, CodingKey {
                case properties
            }
        }
        /// The editors of a protected range.
        ///
        /// - Remark: Generated from `#/components/schemas/Editors`.
        public struct Editors: Codable, Hashable, Sendable {
            /// True if anyone in the document's domain has edit access to the protected range. Domain protection is only supported on documents within a domain.
            ///
            /// - Remark: Generated from `#/components/schemas/Editors/domainUsersCanEdit`.
            public var domainUsersCanEdit: Swift.Bool?
            /// The email addresses of groups with edit access to the protected range.
            ///
            /// - Remark: Generated from `#/components/schemas/Editors/groups`.
            public var groups: [Swift.String]?
            /// The email addresses of users with edit access to the protected range.
            ///
            /// - Remark: Generated from `#/components/schemas/Editors/users`.
            public var users: [Swift.String]?
            /// Creates a new `Editors`.
            ///
            /// - Parameters:
            ///   - domainUsersCanEdit: True if anyone in the document's domain has edit access to the protected range. Domain protection is only supported on documents within a domain.
            ///   - groups: The email addresses of groups with edit access to the protected range.
            ///   - users: The email addresses of users with edit access to the protected range.
            public init(
                domainUsersCanEdit: Swift.Bool? = nil,
                groups: [Swift.String]? = nil,
                users: [Swift.String]? = nil
            ) {
                self.domainUsersCanEdit = domainUsersCanEdit
                self.groups = groups
                self.users = users
            }
            public enum CodingKeys: String, CodingKey {
                case domainUsersCanEdit
                case groups
                case users
            }
        }
        /// A chart embedded in a sheet.
        ///
        /// - Remark: Generated from `#/components/schemas/EmbeddedChart`.
        public struct EmbeddedChart: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/EmbeddedChart/border`.
            public var border: Components.Schemas.EmbeddedObjectBorder?
            /// The ID of the chart.
            ///
            /// - Remark: Generated from `#/components/schemas/EmbeddedChart/chartId`.
            public var chartId: Swift.Int32?
            /// - Remark: Generated from `#/components/schemas/EmbeddedChart/position`.
            public var position: Components.Schemas.EmbeddedObjectPosition?
            /// - Remark: Generated from `#/components/schemas/EmbeddedChart/spec`.
            public var spec: Components.Schemas.ChartSpec?
            /// Creates a new `EmbeddedChart`.
            ///
            /// - Parameters:
            ///   - border:
            ///   - chartId: The ID of the chart.
            ///   - position:
            ///   - spec:
            public init(
                border: Components.Schemas.EmbeddedObjectBorder? = nil,
                chartId: Swift.Int32? = nil,
                position: Components.Schemas.EmbeddedObjectPosition? = nil,
                spec: Components.Schemas.ChartSpec? = nil
            ) {
                self.border = border
                self.chartId = chartId
                self.position = position
                self.spec = spec
            }
            public enum CodingKeys: String, CodingKey {
                case border
                case chartId
                case position
                case spec
            }
        }
        /// A border along an embedded object.
        ///
        /// - Remark: Generated from `#/components/schemas/EmbeddedObjectBorder`.
        public struct EmbeddedObjectBorder: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/EmbeddedObjectBorder/color`.
            public var color: Components.Schemas.Color?
            /// - Remark: Generated from `#/components/schemas/EmbeddedObjectBorder/colorStyle`.
            public var colorStyle: Components.Schemas.ColorStyle?
            /// Creates a new `EmbeddedObjectBorder`.
            ///
            /// - Parameters:
            ///   - color:
            ///   - colorStyle:
            public init(
                color: Components.Schemas.Color? = nil,
                colorStyle: Components.Schemas.ColorStyle? = nil
            ) {
                self.color = color
                self.colorStyle = colorStyle
            }
            public enum CodingKeys: String, CodingKey {
                case color
                case colorStyle
            }
        }
        /// The position of an embedded object such as a chart.
        ///
        /// - Remark: Generated from `#/components/schemas/EmbeddedObjectPosition`.
        public struct EmbeddedObjectPosition: Codable, Hashable, Sendable {
            /// If true, the embedded object is put on a new sheet whose ID is chosen for you. Used only when writing.
            ///
            /// - Remark: Generated from `#/components/schemas/EmbeddedObjectPosition/newSheet`.
            public var newSheet: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/EmbeddedObjectPosition/overlayPosition`.
            public var overlayPosition: Components.Schemas.OverlayPosition?
            /// The sheet this is on. Set only if the embedded object is on its own sheet. Must be non-negative.
            ///
            /// - Remark: Generated from `#/components/schemas/EmbeddedObjectPosition/sheetId`.
            public var sheetId: Swift.Int32?
            /// Creates a new `EmbeddedObjectPosition`.
            ///
            /// - Parameters:
            ///   - newSheet: If true, the embedded object is put on a new sheet whose ID is chosen for you. Used only when writing.
            ///   - overlayPosition:
            ///   - sheetId: The sheet this is on. Set only if the embedded object is on its own sheet. Must be non-negative.
            public init(
                newSheet: Swift.Bool? = nil,
                overlayPosition: Components.Schemas.OverlayPosition? = nil,
                sheetId: Swift.Int32? = nil
            ) {
                self.newSheet = newSheet
                self.overlayPosition = overlayPosition
                self.sheetId = sheetId
            }
            public enum CodingKeys: String, CodingKey {
                case newSheet
                case overlayPosition
                case sheetId
            }
        }
        /// An error in a cell.
        ///
        /// - Remark: Generated from `#/components/schemas/ErrorValue`.
        public struct ErrorValue: Codable, Hashable, Sendable {
            /// A message with more information about the error (in the spreadsheet's locale).
            ///
            /// - Remark: Generated from `#/components/schemas/ErrorValue/message`.
            public var message: Swift.String?
            /// The type of error.
            ///
            /// - Remark: Generated from `#/components/schemas/ErrorValue/type`.
            @frozen public enum _TypePayload: String, Codable, Hashable, Sendable, CaseIterable {
                case errorTypeUnspecified = "ERROR_TYPE_UNSPECIFIED"
                case error = "ERROR"
                case nullValue = "NULL_VALUE"
                case divideByZero = "DIVIDE_BY_ZERO"
                case value = "VALUE"
                case ref = "REF"
                case name = "NAME"
                case num = "NUM"
                case nA = "N_A"
                case loading = "LOADING"
            }
            /// The type of error.
            ///
            /// - Remark: Generated from `#/components/schemas/ErrorValue/type`.
            public var _type: Components.Schemas.ErrorValue._TypePayload?
            /// Creates a new `ErrorValue`.
            ///
            /// - Parameters:
            ///   - message: A message with more information about the error (in the spreadsheet's locale).
            ///   - _type: The type of error.
            public init(
                message: Swift.String? = nil,
                _type: Components.Schemas.ErrorValue._TypePayload? = nil
            ) {
                self.message = message
                self._type = _type
            }
            public enum CodingKeys: String, CodingKey {
                case message
                case _type = "type"
            }
        }
        /// The kinds of value that a cell in a spreadsheet can have.
        ///
        /// - Remark: Generated from `#/components/schemas/ExtendedValue`.
        public struct ExtendedValue: Codable, Hashable, Sendable {
            /// Represents a boolean value.
            ///
            /// - Remark: Generated from `#/components/schemas/ExtendedValue/boolValue`.
            public var boolValue: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/ExtendedValue/errorValue`.
            public var errorValue: Components.Schemas.ErrorValue?
            /// Represents a formula.
            ///
            /// - Remark: Generated from `#/components/schemas/ExtendedValue/formulaValue`.
            public var formulaValue: Swift.String?
            /// Represents a double value. Note: Dates, Times and DateTimes are represented as doubles in SERIAL_NUMBER format.
            ///
            /// - Remark: Generated from `#/components/schemas/ExtendedValue/numberValue`.
            public var numberValue: Swift.Double?
            /// Represents a string value. Leading single quotes are not included. For example, if the user typed `'123` into the UI, this would be represented as a `stringValue` of `"123"`.
            ///
            /// - Remark: Generated from `#/components/schemas/ExtendedValue/stringValue`.
            public var stringValue: Swift.String?
            /// Creates a new `ExtendedValue`.
            ///
            /// - Parameters:
            ///   - boolValue: Represents a boolean value.
            ///   - errorValue:
            ///   - formulaValue: Represents a formula.
            ///   - numberValue: Represents a double value. Note: Dates, Times and DateTimes are represented as doubles in SERIAL_NUMBER format.
            ///   - stringValue: Represents a string value. Leading single quotes are not included. For example, if the user typed `'123` into the UI, this would be represented as a `stringValue` of `"123"`.
            public init(
                boolValue: Swift.Bool? = nil,
                errorValue: Components.Schemas.ErrorValue? = nil,
                formulaValue: Swift.String? = nil,
                numberValue: Swift.Double? = nil,
                stringValue: Swift.String? = nil
            ) {
                self.boolValue = boolValue
                self.errorValue = errorValue
                self.formulaValue = formulaValue
                self.numberValue = numberValue
                self.stringValue = stringValue
            }
            public enum CodingKeys: String, CodingKey {
                case boolValue
                case errorValue
                case formulaValue
                case numberValue
                case stringValue
            }
        }
        /// Criteria for showing/hiding rows in a filter or filter view.
        ///
        /// - Remark: Generated from `#/components/schemas/FilterCriteria`.
        public struct FilterCriteria: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/FilterCriteria/condition`.
            public var condition: Components.Schemas.BooleanCondition?
            /// Values that should be hidden.
            ///
            /// - Remark: Generated from `#/components/schemas/FilterCriteria/hiddenValues`.
            public var hiddenValues: [Swift.String]?
            /// - Remark: Generated from `#/components/schemas/FilterCriteria/visibleBackgroundColor`.
            public var visibleBackgroundColor: Components.Schemas.Color?
            /// - Remark: Generated from `#/components/schemas/FilterCriteria/visibleBackgroundColorStyle`.
            public var visibleBackgroundColorStyle: Components.Schemas.ColorStyle?
            /// - Remark: Generated from `#/components/schemas/FilterCriteria/visibleForegroundColor`.
            public var visibleForegroundColor: Components.Schemas.Color?
            /// - Remark: Generated from `#/components/schemas/FilterCriteria/visibleForegroundColorStyle`.
            public var visibleForegroundColorStyle: Components.Schemas.ColorStyle?
            /// Creates a new `FilterCriteria`.
            ///
            /// - Parameters:
            ///   - condition:
            ///   - hiddenValues: Values that should be hidden.
            ///   - visibleBackgroundColor:
            ///   - visibleBackgroundColorStyle:
            ///   - visibleForegroundColor:
            ///   - visibleForegroundColorStyle:
            public init(
                condition: Components.Schemas.BooleanCondition? = nil,
                hiddenValues: [Swift.String]? = nil,
                visibleBackgroundColor: Components.Schemas.Color? = nil,
                visibleBackgroundColorStyle: Components.Schemas.ColorStyle? = nil,
                visibleForegroundColor: Components.Schemas.Color? = nil,
                visibleForegroundColorStyle: Components.Schemas.ColorStyle? = nil
            ) {
                self.condition = condition
                self.hiddenValues = hiddenValues
                self.visibleBackgroundColor = visibleBackgroundColor
                self.visibleBackgroundColorStyle = visibleBackgroundColorStyle
                self.visibleForegroundColor = visibleForegroundColor
                self.visibleForegroundColorStyle = visibleForegroundColorStyle
            }
            public enum CodingKeys: String, CodingKey {
                case condition
                case hiddenValues
                case visibleBackgroundColor
                case visibleBackgroundColorStyle
                case visibleForegroundColor
                case visibleForegroundColorStyle
            }
        }
        /// The filter criteria associated with a specific column.
        ///
        /// - Remark: Generated from `#/components/schemas/FilterSpec`.
        public struct FilterSpec: Codable, Hashable, Sendable {
            /// The zero-based column index.
            ///
            /// - Remark: Generated from `#/components/schemas/FilterSpec/columnIndex`.
            public var columnIndex: Swift.Int32?
            /// - Remark: Generated from `#/components/schemas/FilterSpec/dataSourceColumnReference`.
            public var dataSourceColumnReference: Components.Schemas.DataSourceColumnReference?
            /// - Remark: Generated from `#/components/schemas/FilterSpec/filterCriteria`.
            public var filterCriteria: Components.Schemas.FilterCriteria?
            /// Creates a new `FilterSpec`.
            ///
            /// - Parameters:
            ///   - columnIndex: The zero-based column index.
            ///   - dataSourceColumnReference:
            ///   - filterCriteria:
            public init(
                columnIndex: Swift.Int32? = nil,
                dataSourceColumnReference: Components.Schemas.DataSourceColumnReference? = nil,
                filterCriteria: Components.Schemas.FilterCriteria? = nil
            ) {
                self.columnIndex = columnIndex
                self.dataSourceColumnReference = dataSourceColumnReference
                self.filterCriteria = filterCriteria
            }
            public enum CodingKeys: String, CodingKey {
                case columnIndex
                case dataSourceColumnReference
                case filterCriteria
            }
        }
        /// A filter view.
        ///
        /// - Remark: Generated from `#/components/schemas/FilterView`.
        public struct FilterView: Codable, Hashable, Sendable {
            /// The criteria for showing/hiding values per column. The map's key is the column index, and the value is the criteria for that column. This field is deprecated in favor of filter_specs.
            ///
            /// - Remark: Generated from `#/components/schemas/FilterView/criteria`.
            @available(*, deprecated)
            public struct CriteriaPayload: Codable, Hashable, Sendable {
                /// A container of undocumented properties.
                public var additionalProperties: [String: Components.Schemas.FilterCriteria]
                /// Creates a new `CriteriaPayload`.
                ///
                /// - Parameters:
                ///   - additionalProperties: A container of undocumented properties.
                public init(additionalProperties: [String: Components.Schemas.FilterCriteria] = .init()) {
                    self.additionalProperties = additionalProperties
                }
                public init(from decoder: any Decoder) throws {
                    additionalProperties = try decoder.decodeAdditionalProperties(knownKeys: [])
                }
                public func encode(to encoder: any Encoder) throws {
                    try encoder.encodeAdditionalProperties(additionalProperties)
                }
            }
            /// The criteria for showing/hiding values per column. The map's key is the column index, and the value is the criteria for that column. This field is deprecated in favor of filter_specs.
            ///
            /// - Remark: Generated from `#/components/schemas/FilterView/criteria`.
            @available(*, deprecated)
            public var criteria: Components.Schemas.FilterView.CriteriaPayload?
            /// The filter criteria for showing/hiding values per column. Both criteria and filter_specs are populated in responses. If both fields are specified in an update request, this field takes precedence.
            ///
            /// - Remark: Generated from `#/components/schemas/FilterView/filterSpecs`.
            public var filterSpecs: [Components.Schemas.FilterSpec]?
            /// The ID of the filter view.
            ///
            /// - Remark: Generated from `#/components/schemas/FilterView/filterViewId`.
            public var filterViewId: Swift.Int32?
            /// The named range this filter view is backed by, if any. When writing, only one of range or named_range_id may be set.
            ///
            /// - Remark: Generated from `#/components/schemas/FilterView/namedRangeId`.
            public var namedRangeId: Swift.String?
            /// - Remark: Generated from `#/components/schemas/FilterView/range`.
            public var range: Components.Schemas.GridRange?
            /// The sort order per column. Later specifications are used when values are equal in the earlier specifications.
            ///
            /// - Remark: Generated from `#/components/schemas/FilterView/sortSpecs`.
            public var sortSpecs: [Components.Schemas.SortSpec]?
            /// The name of the filter view.
            ///
            /// - Remark: Generated from `#/components/schemas/FilterView/title`.
            public var title: Swift.String?
            /// Creates a new `FilterView`.
            ///
            /// - Parameters:
            ///   - criteria: The criteria for showing/hiding values per column. The map's key is the column index, and the value is the criteria for that column. This field is deprecated in favor of filter_specs.
            ///   - filterSpecs: The filter criteria for showing/hiding values per column. Both criteria and filter_specs are populated in responses. If both fields are specified in an update request, this field takes precedence.
            ///   - filterViewId: The ID of the filter view.
            ///   - namedRangeId: The named range this filter view is backed by, if any. When writing, only one of range or named_range_id may be set.
            ///   - range:
            ///   - sortSpecs: The sort order per column. Later specifications are used when values are equal in the earlier specifications.
            ///   - title: The name of the filter view.
            public init(
                criteria: Components.Schemas.FilterView.CriteriaPayload? = nil,
                filterSpecs: [Components.Schemas.FilterSpec]? = nil,
                filterViewId: Swift.Int32? = nil,
                namedRangeId: Swift.String? = nil,
                range: Components.Schemas.GridRange? = nil,
                sortSpecs: [Components.Schemas.SortSpec]? = nil,
                title: Swift.String? = nil
            ) {
                self.criteria = criteria
                self.filterSpecs = filterSpecs
                self.filterViewId = filterViewId
                self.namedRangeId = namedRangeId
                self.range = range
                self.sortSpecs = sortSpecs
                self.title = title
            }
            public enum CodingKeys: String, CodingKey {
                case criteria
                case filterSpecs
                case filterViewId
                case namedRangeId
                case range
                case sortSpecs
                case title
            }
        }
        /// Finds and replaces data in cells over a range, sheet, or all sheets.
        ///
        /// - Remark: Generated from `#/components/schemas/FindReplaceRequest`.
        public struct FindReplaceRequest: Codable, Hashable, Sendable {
            /// True to find/replace over all sheets.
            ///
            /// - Remark: Generated from `#/components/schemas/FindReplaceRequest/allSheets`.
            public var allSheets: Swift.Bool?
            /// The value to search.
            ///
            /// - Remark: Generated from `#/components/schemas/FindReplaceRequest/find`.
            public var find: Swift.String?
            /// True if the search should include cells with formulas. False to skip cells with formulas.
            ///
            /// - Remark: Generated from `#/components/schemas/FindReplaceRequest/includeFormulas`.
            public var includeFormulas: Swift.Bool?
            /// True if the search is case sensitive.
            ///
            /// - Remark: Generated from `#/components/schemas/FindReplaceRequest/matchCase`.
            public var matchCase: Swift.Bool?
            /// True if the find value should match the entire cell.
            ///
            /// - Remark: Generated from `#/components/schemas/FindReplaceRequest/matchEntireCell`.
            public var matchEntireCell: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/FindReplaceRequest/range`.
            public var range: Components.Schemas.GridRange?
            /// The value to use as the replacement.
            ///
            /// - Remark: Generated from `#/components/schemas/FindReplaceRequest/replacement`.
            public var replacement: Swift.String?
            /// True if the find value is a regex. The regular expression and replacement should follow Java regex rules at https://docs.oracle.com/javase/8/docs/api/java/util/regex/Pattern.html. The replacement string is allowed to refer to capturing groups. For example, if one cell has the contents `"Google Sheets"` and another has `"Google Docs"`, then searching for `"o.* (.*)"` with a replacement of `"$1 Rocks"` would change the contents of the cells to `"GSheets Rocks"` and `"GDocs Rocks"` respectively.
            ///
            /// - Remark: Generated from `#/components/schemas/FindReplaceRequest/searchByRegex`.
            public var searchByRegex: Swift.Bool?
            /// The sheet to find/replace over.
            ///
            /// - Remark: Generated from `#/components/schemas/FindReplaceRequest/sheetId`.
            public var sheetId: Swift.Int32?
            /// Creates a new `FindReplaceRequest`.
            ///
            /// - Parameters:
            ///   - allSheets: True to find/replace over all sheets.
            ///   - find: The value to search.
            ///   - includeFormulas: True if the search should include cells with formulas. False to skip cells with formulas.
            ///   - matchCase: True if the search is case sensitive.
            ///   - matchEntireCell: True if the find value should match the entire cell.
            ///   - range:
            ///   - replacement: The value to use as the replacement.
            ///   - searchByRegex: True if the find value is a regex. The regular expression and replacement should follow Java regex rules at https://docs.oracle.com/javase/8/docs/api/java/util/regex/Pattern.html. The replacement string is allowed to refer to capturing groups. For example, if one cell has the contents `"Google Sheets"` and another has `"Google Docs"`, then searching for `"o.* (.*)"` with a replacement of `"$1 Rocks"` would change the contents of the cells to `"GSheets Rocks"` and `"GDocs Rocks"` respectively.
            ///   - sheetId: The sheet to find/replace over.
            public init(
                allSheets: Swift.Bool? = nil,
                find: Swift.String? = nil,
                includeFormulas: Swift.Bool? = nil,
                matchCase: Swift.Bool? = nil,
                matchEntireCell: Swift.Bool? = nil,
                range: Components.Schemas.GridRange? = nil,
                replacement: Swift.String? = nil,
                searchByRegex: Swift.Bool? = nil,
                sheetId: Swift.Int32? = nil
            ) {
                self.allSheets = allSheets
                self.find = find
                self.includeFormulas = includeFormulas
                self.matchCase = matchCase
                self.matchEntireCell = matchEntireCell
                self.range = range
                self.replacement = replacement
                self.searchByRegex = searchByRegex
                self.sheetId = sheetId
            }
            public enum CodingKeys: String, CodingKey {
                case allSheets
                case find
                case includeFormulas
                case matchCase
                case matchEntireCell
                case range
                case replacement
                case searchByRegex
                case sheetId
            }
        }
        /// The result of the find/replace.
        ///
        /// - Remark: Generated from `#/components/schemas/FindReplaceResponse`.
        public struct FindReplaceResponse: Codable, Hashable, Sendable {
            /// The number of formula cells changed.
            ///
            /// - Remark: Generated from `#/components/schemas/FindReplaceResponse/formulasChanged`.
            public var formulasChanged: Swift.Int32?
            /// The number of occurrences (possibly multiple within a cell) changed. For example, if replacing `"e"` with `"o"` in `"Google Sheets"`, this would be `"3"` because `"Google Sheets"` -> `"Googlo Shoots"`.
            ///
            /// - Remark: Generated from `#/components/schemas/FindReplaceResponse/occurrencesChanged`.
            public var occurrencesChanged: Swift.Int32?
            /// The number of rows changed.
            ///
            /// - Remark: Generated from `#/components/schemas/FindReplaceResponse/rowsChanged`.
            public var rowsChanged: Swift.Int32?
            /// The number of sheets changed.
            ///
            /// - Remark: Generated from `#/components/schemas/FindReplaceResponse/sheetsChanged`.
            public var sheetsChanged: Swift.Int32?
            /// The number of non-formula cells changed.
            ///
            /// - Remark: Generated from `#/components/schemas/FindReplaceResponse/valuesChanged`.
            public var valuesChanged: Swift.Int32?
            /// Creates a new `FindReplaceResponse`.
            ///
            /// - Parameters:
            ///   - formulasChanged: The number of formula cells changed.
            ///   - occurrencesChanged: The number of occurrences (possibly multiple within a cell) changed. For example, if replacing `"e"` with `"o"` in `"Google Sheets"`, this would be `"3"` because `"Google Sheets"` -> `"Googlo Shoots"`.
            ///   - rowsChanged: The number of rows changed.
            ///   - sheetsChanged: The number of sheets changed.
            ///   - valuesChanged: The number of non-formula cells changed.
            public init(
                formulasChanged: Swift.Int32? = nil,
                occurrencesChanged: Swift.Int32? = nil,
                rowsChanged: Swift.Int32? = nil,
                sheetsChanged: Swift.Int32? = nil,
                valuesChanged: Swift.Int32? = nil
            ) {
                self.formulasChanged = formulasChanged
                self.occurrencesChanged = occurrencesChanged
                self.rowsChanged = rowsChanged
                self.sheetsChanged = sheetsChanged
                self.valuesChanged = valuesChanged
            }
            public enum CodingKeys: String, CodingKey {
                case formulasChanged
                case occurrencesChanged
                case rowsChanged
                case sheetsChanged
                case valuesChanged
            }
        }
        /// The request for retrieving a Spreadsheet.
        ///
        /// - Remark: Generated from `#/components/schemas/GetSpreadsheetByDataFilterRequest`.
        public struct GetSpreadsheetByDataFilterRequest: Codable, Hashable, Sendable {
            /// The DataFilters used to select which ranges to retrieve from the spreadsheet.
            ///
            /// - Remark: Generated from `#/components/schemas/GetSpreadsheetByDataFilterRequest/dataFilters`.
            public var dataFilters: [Components.Schemas.DataFilter]?
            /// True if grid data should be returned. This parameter is ignored if a field mask was set in the request.
            ///
            /// - Remark: Generated from `#/components/schemas/GetSpreadsheetByDataFilterRequest/includeGridData`.
            public var includeGridData: Swift.Bool?
            /// Creates a new `GetSpreadsheetByDataFilterRequest`.
            ///
            /// - Parameters:
            ///   - dataFilters: The DataFilters used to select which ranges to retrieve from the spreadsheet.
            ///   - includeGridData: True if grid data should be returned. This parameter is ignored if a field mask was set in the request.
            public init(
                dataFilters: [Components.Schemas.DataFilter]? = nil,
                includeGridData: Swift.Bool? = nil
            ) {
                self.dataFilters = dataFilters
                self.includeGridData = includeGridData
            }
            public enum CodingKeys: String, CodingKey {
                case dataFilters
                case includeGridData
            }
        }
        /// A rule that applies a gradient color scale format, based on the interpolation points listed. The format of a cell will vary based on its contents as compared to the values of the interpolation points.
        ///
        /// - Remark: Generated from `#/components/schemas/GradientRule`.
        public struct GradientRule: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/GradientRule/maxpoint`.
            public var maxpoint: Components.Schemas.InterpolationPoint?
            /// - Remark: Generated from `#/components/schemas/GradientRule/midpoint`.
            public var midpoint: Components.Schemas.InterpolationPoint?
            /// - Remark: Generated from `#/components/schemas/GradientRule/minpoint`.
            public var minpoint: Components.Schemas.InterpolationPoint?
            /// Creates a new `GradientRule`.
            ///
            /// - Parameters:
            ///   - maxpoint:
            ///   - midpoint:
            ///   - minpoint:
            public init(
                maxpoint: Components.Schemas.InterpolationPoint? = nil,
                midpoint: Components.Schemas.InterpolationPoint? = nil,
                minpoint: Components.Schemas.InterpolationPoint? = nil
            ) {
                self.maxpoint = maxpoint
                self.midpoint = midpoint
                self.minpoint = minpoint
            }
            public enum CodingKeys: String, CodingKey {
                case maxpoint
                case midpoint
                case minpoint
            }
        }
        /// A coordinate in a sheet. All indexes are zero-based.
        ///
        /// - Remark: Generated from `#/components/schemas/GridCoordinate`.
        public struct GridCoordinate: Codable, Hashable, Sendable {
            /// The column index of the coordinate.
            ///
            /// - Remark: Generated from `#/components/schemas/GridCoordinate/columnIndex`.
            public var columnIndex: Swift.Int32?
            /// The row index of the coordinate.
            ///
            /// - Remark: Generated from `#/components/schemas/GridCoordinate/rowIndex`.
            public var rowIndex: Swift.Int32?
            /// The sheet this coordinate is on.
            ///
            /// - Remark: Generated from `#/components/schemas/GridCoordinate/sheetId`.
            public var sheetId: Swift.Int32?
            /// Creates a new `GridCoordinate`.
            ///
            /// - Parameters:
            ///   - columnIndex: The column index of the coordinate.
            ///   - rowIndex: The row index of the coordinate.
            ///   - sheetId: The sheet this coordinate is on.
            public init(
                columnIndex: Swift.Int32? = nil,
                rowIndex: Swift.Int32? = nil,
                sheetId: Swift.Int32? = nil
            ) {
                self.columnIndex = columnIndex
                self.rowIndex = rowIndex
                self.sheetId = sheetId
            }
            public enum CodingKeys: String, CodingKey {
                case columnIndex
                case rowIndex
                case sheetId
            }
        }
        /// Data in the grid, as well as metadata about the dimensions.
        ///
        /// - Remark: Generated from `#/components/schemas/GridData`.
        public struct GridData: Codable, Hashable, Sendable {
            /// Metadata about the requested columns in the grid, starting with the column in start_column.
            ///
            /// - Remark: Generated from `#/components/schemas/GridData/columnMetadata`.
            public var columnMetadata: [Components.Schemas.DimensionProperties]?
            /// The data in the grid, one entry per row, starting with the row in startRow. The values in RowData will correspond to columns starting at start_column.
            ///
            /// - Remark: Generated from `#/components/schemas/GridData/rowData`.
            public var rowData: [Components.Schemas.RowData]?
            /// Metadata about the requested rows in the grid, starting with the row in start_row.
            ///
            /// - Remark: Generated from `#/components/schemas/GridData/rowMetadata`.
            public var rowMetadata: [Components.Schemas.DimensionProperties]?
            /// The first column this GridData refers to, zero-based.
            ///
            /// - Remark: Generated from `#/components/schemas/GridData/startColumn`.
            public var startColumn: Swift.Int32?
            /// The first row this GridData refers to, zero-based.
            ///
            /// - Remark: Generated from `#/components/schemas/GridData/startRow`.
            public var startRow: Swift.Int32?
            /// Creates a new `GridData`.
            ///
            /// - Parameters:
            ///   - columnMetadata: Metadata about the requested columns in the grid, starting with the column in start_column.
            ///   - rowData: The data in the grid, one entry per row, starting with the row in startRow. The values in RowData will correspond to columns starting at start_column.
            ///   - rowMetadata: Metadata about the requested rows in the grid, starting with the row in start_row.
            ///   - startColumn: The first column this GridData refers to, zero-based.
            ///   - startRow: The first row this GridData refers to, zero-based.
            public init(
                columnMetadata: [Components.Schemas.DimensionProperties]? = nil,
                rowData: [Components.Schemas.RowData]? = nil,
                rowMetadata: [Components.Schemas.DimensionProperties]? = nil,
                startColumn: Swift.Int32? = nil,
                startRow: Swift.Int32? = nil
            ) {
                self.columnMetadata = columnMetadata
                self.rowData = rowData
                self.rowMetadata = rowMetadata
                self.startColumn = startColumn
                self.startRow = startRow
            }
            public enum CodingKeys: String, CodingKey {
                case columnMetadata
                case rowData
                case rowMetadata
                case startColumn
                case startRow
            }
        }
        /// Properties of a grid.
        ///
        /// - Remark: Generated from `#/components/schemas/GridProperties`.
        public struct GridProperties: Codable, Hashable, Sendable {
            /// The number of columns in the grid.
            ///
            /// - Remark: Generated from `#/components/schemas/GridProperties/columnCount`.
            public var columnCount: Swift.Int32?
            /// True if the column grouping control toggle is shown after the group.
            ///
            /// - Remark: Generated from `#/components/schemas/GridProperties/columnGroupControlAfter`.
            public var columnGroupControlAfter: Swift.Bool?
            /// The number of columns that are frozen in the grid.
            ///
            /// - Remark: Generated from `#/components/schemas/GridProperties/frozenColumnCount`.
            public var frozenColumnCount: Swift.Int32?
            /// The number of rows that are frozen in the grid.
            ///
            /// - Remark: Generated from `#/components/schemas/GridProperties/frozenRowCount`.
            public var frozenRowCount: Swift.Int32?
            /// True if the grid isn't showing gridlines in the UI.
            ///
            /// - Remark: Generated from `#/components/schemas/GridProperties/hideGridlines`.
            public var hideGridlines: Swift.Bool?
            /// The number of rows in the grid.
            ///
            /// - Remark: Generated from `#/components/schemas/GridProperties/rowCount`.
            public var rowCount: Swift.Int32?
            /// True if the row grouping control toggle is shown after the group.
            ///
            /// - Remark: Generated from `#/components/schemas/GridProperties/rowGroupControlAfter`.
            public var rowGroupControlAfter: Swift.Bool?
            /// Creates a new `GridProperties`.
            ///
            /// - Parameters:
            ///   - columnCount: The number of columns in the grid.
            ///   - columnGroupControlAfter: True if the column grouping control toggle is shown after the group.
            ///   - frozenColumnCount: The number of columns that are frozen in the grid.
            ///   - frozenRowCount: The number of rows that are frozen in the grid.
            ///   - hideGridlines: True if the grid isn't showing gridlines in the UI.
            ///   - rowCount: The number of rows in the grid.
            ///   - rowGroupControlAfter: True if the row grouping control toggle is shown after the group.
            public init(
                columnCount: Swift.Int32? = nil,
                columnGroupControlAfter: Swift.Bool? = nil,
                frozenColumnCount: Swift.Int32? = nil,
                frozenRowCount: Swift.Int32? = nil,
                hideGridlines: Swift.Bool? = nil,
                rowCount: Swift.Int32? = nil,
                rowGroupControlAfter: Swift.Bool? = nil
            ) {
                self.columnCount = columnCount
                self.columnGroupControlAfter = columnGroupControlAfter
                self.frozenColumnCount = frozenColumnCount
                self.frozenRowCount = frozenRowCount
                self.hideGridlines = hideGridlines
                self.rowCount = rowCount
                self.rowGroupControlAfter = rowGroupControlAfter
            }
            public enum CodingKeys: String, CodingKey {
                case columnCount
                case columnGroupControlAfter
                case frozenColumnCount
                case frozenRowCount
                case hideGridlines
                case rowCount
                case rowGroupControlAfter
            }
        }
        /// A range on a sheet. All indexes are zero-based. Indexes are half open, i.e. the start index is inclusive and the end index is exclusive -- [start_index, end_index). Missing indexes indicate the range is unbounded on that side. For example, if `"Sheet1"` is sheet ID 123456, then: `Sheet1!A1:A1 == sheet_id: 123456, start_row_index: 0, end_row_index: 1, start_column_index: 0, end_column_index: 1` `Sheet1!A3:B4 == sheet_id: 123456, start_row_index: 2, end_row_index: 4, start_column_index: 0, end_column_index: 2` `Sheet1!A:B == sheet_id: 123456, start_column_index: 0, end_column_index: 2` `Sheet1!A5:B == sheet_id: 123456, start_row_index: 4, start_column_index: 0, end_column_index: 2` `Sheet1 == sheet_id: 123456` The start index must always be less than or equal to the end index. If the start index equals the end index, then the range is empty. Empty ranges are typically not meaningful and are usually rendered in the UI as `#REF!`.
        ///
        /// - Remark: Generated from `#/components/schemas/GridRange`.
        public struct GridRange: Codable, Hashable, Sendable {
            /// The end column (exclusive) of the range, or not set if unbounded.
            ///
            /// - Remark: Generated from `#/components/schemas/GridRange/endColumnIndex`.
            public var endColumnIndex: Swift.Int32?
            /// The end row (exclusive) of the range, or not set if unbounded.
            ///
            /// - Remark: Generated from `#/components/schemas/GridRange/endRowIndex`.
            public var endRowIndex: Swift.Int32?
            /// The sheet this range is on.
            ///
            /// - Remark: Generated from `#/components/schemas/GridRange/sheetId`.
            public var sheetId: Swift.Int32?
            /// The start column (inclusive) of the range, or not set if unbounded.
            ///
            /// - Remark: Generated from `#/components/schemas/GridRange/startColumnIndex`.
            public var startColumnIndex: Swift.Int32?
            /// The start row (inclusive) of the range, or not set if unbounded.
            ///
            /// - Remark: Generated from `#/components/schemas/GridRange/startRowIndex`.
            public var startRowIndex: Swift.Int32?
            /// Creates a new `GridRange`.
            ///
            /// - Parameters:
            ///   - endColumnIndex: The end column (exclusive) of the range, or not set if unbounded.
            ///   - endRowIndex: The end row (exclusive) of the range, or not set if unbounded.
            ///   - sheetId: The sheet this range is on.
            ///   - startColumnIndex: The start column (inclusive) of the range, or not set if unbounded.
            ///   - startRowIndex: The start row (inclusive) of the range, or not set if unbounded.
            public init(
                endColumnIndex: Swift.Int32? = nil,
                endRowIndex: Swift.Int32? = nil,
                sheetId: Swift.Int32? = nil,
                startColumnIndex: Swift.Int32? = nil,
                startRowIndex: Swift.Int32? = nil
            ) {
                self.endColumnIndex = endColumnIndex
                self.endRowIndex = endRowIndex
                self.sheetId = sheetId
                self.startColumnIndex = startColumnIndex
                self.startRowIndex = startRowIndex
            }
            public enum CodingKeys: String, CodingKey {
                case endColumnIndex
                case endRowIndex
                case sheetId
                case startColumnIndex
                case startRowIndex
            }
        }
        /// A histogram chart. A histogram chart groups data items into bins, displaying each bin as a column of stacked items. Histograms are used to display the distribution of a dataset. Each column of items represents a range into which those items fall. The number of bins can be chosen automatically or specified explicitly.
        ///
        /// - Remark: Generated from `#/components/schemas/HistogramChartSpec`.
        public struct HistogramChartSpec: Codable, Hashable, Sendable {
            /// By default the bucket size (the range of values stacked in a single column) is chosen automatically, but it may be overridden here. E.g., A bucket size of 1.5 results in buckets from 0 - 1.5, 1.5 - 3.0, etc. Cannot be negative. This field is optional.
            ///
            /// - Remark: Generated from `#/components/schemas/HistogramChartSpec/bucketSize`.
            public var bucketSize: Swift.Double?
            /// The position of the chart legend.
            ///
            /// - Remark: Generated from `#/components/schemas/HistogramChartSpec/legendPosition`.
            @frozen public enum LegendPositionPayload: String, Codable, Hashable, Sendable, CaseIterable {
                case histogramChartLegendPositionUnspecified = "HISTOGRAM_CHART_LEGEND_POSITION_UNSPECIFIED"
                case bottomLegend = "BOTTOM_LEGEND"
                case leftLegend = "LEFT_LEGEND"
                case rightLegend = "RIGHT_LEGEND"
                case topLegend = "TOP_LEGEND"
                case noLegend = "NO_LEGEND"
                case insideLegend = "INSIDE_LEGEND"
            }
            /// The position of the chart legend.
            ///
            /// - Remark: Generated from `#/components/schemas/HistogramChartSpec/legendPosition`.
            public var legendPosition: Components.Schemas.HistogramChartSpec.LegendPositionPayload?
            /// The outlier percentile is used to ensure that outliers do not adversely affect the calculation of bucket sizes. For example, setting an outlier percentile of 0.05 indicates that the top and bottom 5% of values when calculating buckets. The values are still included in the chart, they will be added to the first or last buckets instead of their own buckets. Must be between 0.0 and 0.5.
            ///
            /// - Remark: Generated from `#/components/schemas/HistogramChartSpec/outlierPercentile`.
            public var outlierPercentile: Swift.Double?
            /// The series for a histogram may be either a single series of values to be bucketed or multiple series, each of the same length, containing the name of the series followed by the values to be bucketed for that series.
            ///
            /// - Remark: Generated from `#/components/schemas/HistogramChartSpec/series`.
            public var series: [Components.Schemas.HistogramSeries]?
            /// Whether horizontal divider lines should be displayed between items in each column.
            ///
            /// - Remark: Generated from `#/components/schemas/HistogramChartSpec/showItemDividers`.
            public var showItemDividers: Swift.Bool?
            /// Creates a new `HistogramChartSpec`.
            ///
            /// - Parameters:
            ///   - bucketSize: By default the bucket size (the range of values stacked in a single column) is chosen automatically, but it may be overridden here. E.g., A bucket size of 1.5 results in buckets from 0 - 1.5, 1.5 - 3.0, etc. Cannot be negative. This field is optional.
            ///   - legendPosition: The position of the chart legend.
            ///   - outlierPercentile: The outlier percentile is used to ensure that outliers do not adversely affect the calculation of bucket sizes. For example, setting an outlier percentile of 0.05 indicates that the top and bottom 5% of values when calculating buckets. The values are still included in the chart, they will be added to the first or last buckets instead of their own buckets. Must be between 0.0 and 0.5.
            ///   - series: The series for a histogram may be either a single series of values to be bucketed or multiple series, each of the same length, containing the name of the series followed by the values to be bucketed for that series.
            ///   - showItemDividers: Whether horizontal divider lines should be displayed between items in each column.
            public init(
                bucketSize: Swift.Double? = nil,
                legendPosition: Components.Schemas.HistogramChartSpec.LegendPositionPayload? = nil,
                outlierPercentile: Swift.Double? = nil,
                series: [Components.Schemas.HistogramSeries]? = nil,
                showItemDividers: Swift.Bool? = nil
            ) {
                self.bucketSize = bucketSize
                self.legendPosition = legendPosition
                self.outlierPercentile = outlierPercentile
                self.series = series
                self.showItemDividers = showItemDividers
            }
            public enum CodingKeys: String, CodingKey {
                case bucketSize
                case legendPosition
                case outlierPercentile
                case series
                case showItemDividers
            }
        }
        /// Allows you to organize the numeric values in a source data column into buckets of a constant size. All values from HistogramRule.start to HistogramRule.end are placed into groups of size HistogramRule.interval. In addition, all values below HistogramRule.start are placed in one group, and all values above HistogramRule.end are placed in another. Only HistogramRule.interval is required, though if HistogramRule.start and HistogramRule.end are both provided, HistogramRule.start must be less than HistogramRule.end. For example, a pivot table showing average purchase amount by age that has 50+ rows: +-----+-------------------+ | Age | AVERAGE of Amount | +-----+-------------------+ | 16 | $27.13 | | 17 | $5.24 | | 18 | $20.15 | ... +-----+-------------------+ could be turned into a pivot table that looks like the one below by applying a histogram group rule with a HistogramRule.start of 25, an HistogramRule.interval of 20, and an HistogramRule.end of 65. +-------------+-------------------+ | Grouped Age | AVERAGE of Amount | +-------------+-------------------+ | < 25 | $19.34 | | 25-45 | $31.43 | | 45-65 | $35.87 | | > 65 | $27.55 | +-------------+-------------------+ | Grand Total | $29.12 | +-------------+-------------------+
        ///
        /// - Remark: Generated from `#/components/schemas/HistogramRule`.
        public struct HistogramRule: Codable, Hashable, Sendable {
            /// The maximum value at which items are placed into buckets of constant size. Values above end are lumped into a single bucket. This field is optional.
            ///
            /// - Remark: Generated from `#/components/schemas/HistogramRule/end`.
            public var end: Swift.Double?
            /// The size of the buckets that are created. Must be positive.
            ///
            /// - Remark: Generated from `#/components/schemas/HistogramRule/interval`.
            public var interval: Swift.Double?
            /// The minimum value at which items are placed into buckets of constant size. Values below start are lumped into a single bucket. This field is optional.
            ///
            /// - Remark: Generated from `#/components/schemas/HistogramRule/start`.
            public var start: Swift.Double?
            /// Creates a new `HistogramRule`.
            ///
            /// - Parameters:
            ///   - end: The maximum value at which items are placed into buckets of constant size. Values above end are lumped into a single bucket. This field is optional.
            ///   - interval: The size of the buckets that are created. Must be positive.
            ///   - start: The minimum value at which items are placed into buckets of constant size. Values below start are lumped into a single bucket. This field is optional.
            public init(
                end: Swift.Double? = nil,
                interval: Swift.Double? = nil,
                start: Swift.Double? = nil
            ) {
                self.end = end
                self.interval = interval
                self.start = start
            }
            public enum CodingKeys: String, CodingKey {
                case end
                case interval
                case start
            }
        }
        /// A histogram series containing the series color and data.
        ///
        /// - Remark: Generated from `#/components/schemas/HistogramSeries`.
        public struct HistogramSeries: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/HistogramSeries/barColor`.
            public var barColor: Components.Schemas.Color?
            /// - Remark: Generated from `#/components/schemas/HistogramSeries/barColorStyle`.
            public var barColorStyle: Components.Schemas.ColorStyle?
            /// - Remark: Generated from `#/components/schemas/HistogramSeries/data`.
            public var data: Components.Schemas.ChartData?
            /// Creates a new `HistogramSeries`.
            ///
            /// - Parameters:
            ///   - barColor:
            ///   - barColorStyle:
            ///   - data:
            public init(
                barColor: Components.Schemas.Color? = nil,
                barColorStyle: Components.Schemas.ColorStyle? = nil,
                data: Components.Schemas.ChartData? = nil
            ) {
                self.barColor = barColor
                self.barColorStyle = barColorStyle
                self.data = data
            }
            public enum CodingKeys: String, CodingKey {
                case barColor
                case barColorStyle
                case data
            }
        }
        /// Inserts rows or columns in a sheet at a particular index.
        ///
        /// - Remark: Generated from `#/components/schemas/InsertDimensionRequest`.
        public struct InsertDimensionRequest: Codable, Hashable, Sendable {
            /// Whether dimension properties should be extended from the dimensions before or after the newly inserted dimensions. True to inherit from the dimensions before (in which case the start index must be greater than 0), and false to inherit from the dimensions after. For example, if row index 0 has red background and row index 1 has a green background, then inserting 2 rows at index 1 can inherit either the green or red background. If `inheritFromBefore` is true, the two new rows will be red (because the row before the insertion point was red), whereas if `inheritFromBefore` is false, the two new rows will be green (because the row after the insertion point was green).
            ///
            /// - Remark: Generated from `#/components/schemas/InsertDimensionRequest/inheritFromBefore`.
            public var inheritFromBefore: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/InsertDimensionRequest/range`.
            public var range: Components.Schemas.DimensionRange?
            /// Creates a new `InsertDimensionRequest`.
            ///
            /// - Parameters:
            ///   - inheritFromBefore: Whether dimension properties should be extended from the dimensions before or after the newly inserted dimensions. True to inherit from the dimensions before (in which case the start index must be greater than 0), and false to inherit from the dimensions after. For example, if row index 0 has red background and row index 1 has a green background, then inserting 2 rows at index 1 can inherit either the green or red background. If `inheritFromBefore` is true, the two new rows will be red (because the row before the insertion point was red), whereas if `inheritFromBefore` is false, the two new rows will be green (because the row after the insertion point was green).
            ///   - range:
            public init(
                inheritFromBefore: Swift.Bool? = nil,
                range: Components.Schemas.DimensionRange? = nil
            ) {
                self.inheritFromBefore = inheritFromBefore
                self.range = range
            }
            public enum CodingKeys: String, CodingKey {
                case inheritFromBefore
                case range
            }
        }
        /// Inserts cells into a range, shifting the existing cells over or down.
        ///
        /// - Remark: Generated from `#/components/schemas/InsertRangeRequest`.
        public struct InsertRangeRequest: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/InsertRangeRequest/range`.
            public var range: Components.Schemas.GridRange?
            /// The dimension which will be shifted when inserting cells. If ROWS, existing cells will be shifted down. If COLUMNS, existing cells will be shifted right.
            ///
            /// - Remark: Generated from `#/components/schemas/InsertRangeRequest/shiftDimension`.
            @frozen public enum ShiftDimensionPayload: String, Codable, Hashable, Sendable, CaseIterable {
                case dimensionUnspecified = "DIMENSION_UNSPECIFIED"
                case rows = "ROWS"
                case columns = "COLUMNS"
            }
            /// The dimension which will be shifted when inserting cells. If ROWS, existing cells will be shifted down. If COLUMNS, existing cells will be shifted right.
            ///
            /// - Remark: Generated from `#/components/schemas/InsertRangeRequest/shiftDimension`.
            public var shiftDimension: Components.Schemas.InsertRangeRequest.ShiftDimensionPayload?
            /// Creates a new `InsertRangeRequest`.
            ///
            /// - Parameters:
            ///   - range:
            ///   - shiftDimension: The dimension which will be shifted when inserting cells. If ROWS, existing cells will be shifted down. If COLUMNS, existing cells will be shifted right.
            public init(
                range: Components.Schemas.GridRange? = nil,
                shiftDimension: Components.Schemas.InsertRangeRequest.ShiftDimensionPayload? = nil
            ) {
                self.range = range
                self.shiftDimension = shiftDimension
            }
            public enum CodingKeys: String, CodingKey {
                case range
                case shiftDimension
            }
        }
        /// A single interpolation point on a gradient conditional format. These pin the gradient color scale according to the color, type and value chosen.
        ///
        /// - Remark: Generated from `#/components/schemas/InterpolationPoint`.
        public struct InterpolationPoint: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/InterpolationPoint/color`.
            public var color: Components.Schemas.Color?
            /// - Remark: Generated from `#/components/schemas/InterpolationPoint/colorStyle`.
            public var colorStyle: Components.Schemas.ColorStyle?
            /// How the value should be interpreted.
            ///
            /// - Remark: Generated from `#/components/schemas/InterpolationPoint/type`.
            @frozen public enum _TypePayload: String, Codable, Hashable, Sendable, CaseIterable {
                case interpolationPointTypeUnspecified = "INTERPOLATION_POINT_TYPE_UNSPECIFIED"
                case min = "MIN"
                case max = "MAX"
                case number = "NUMBER"
                case percent = "PERCENT"
                case percentile = "PERCENTILE"
            }
            /// How the value should be interpreted.
            ///
            /// - Remark: Generated from `#/components/schemas/InterpolationPoint/type`.
            public var _type: Components.Schemas.InterpolationPoint._TypePayload?
            /// The value this interpolation point uses. May be a formula. Unused if type is MIN or MAX.
            ///
            /// - Remark: Generated from `#/components/schemas/InterpolationPoint/value`.
            public var value: Swift.String?
            /// Creates a new `InterpolationPoint`.
            ///
            /// - Parameters:
            ///   - color:
            ///   - colorStyle:
            ///   - _type: How the value should be interpreted.
            ///   - value: The value this interpolation point uses. May be a formula. Unused if type is MIN or MAX.
            public init(
                color: Components.Schemas.Color? = nil,
                colorStyle: Components.Schemas.ColorStyle? = nil,
                _type: Components.Schemas.InterpolationPoint._TypePayload? = nil,
                value: Swift.String? = nil
            ) {
                self.color = color
                self.colorStyle = colorStyle
                self._type = _type
                self.value = value
            }
            public enum CodingKeys: String, CodingKey {
                case color
                case colorStyle
                case _type = "type"
                case value
            }
        }
        /// Represents a time interval, encoded as a Timestamp start (inclusive) and a Timestamp end (exclusive). The start must be less than or equal to the end. When the start equals the end, the interval is empty (matches no time). When both start and end are unspecified, the interval matches any time.
        ///
        /// - Remark: Generated from `#/components/schemas/Interval`.
        public struct Interval: Codable, Hashable, Sendable {
            /// Optional. Exclusive end of the interval. If specified, a Timestamp matching this interval will have to be before the end.
            ///
            /// - Remark: Generated from `#/components/schemas/Interval/endTime`.
            public var endTime: Swift.String?
            /// Optional. Inclusive start of the interval. If specified, a Timestamp matching this interval will have to be the same or after the start.
            ///
            /// - Remark: Generated from `#/components/schemas/Interval/startTime`.
            public var startTime: Swift.String?
            /// Creates a new `Interval`.
            ///
            /// - Parameters:
            ///   - endTime: Optional. Exclusive end of the interval. If specified, a Timestamp matching this interval will have to be before the end.
            ///   - startTime: Optional. Inclusive start of the interval. If specified, a Timestamp matching this interval will have to be the same or after the start.
            public init(
                endTime: Swift.String? = nil,
                startTime: Swift.String? = nil
            ) {
                self.endTime = endTime
                self.startTime = startTime
            }
            public enum CodingKeys: String, CodingKey {
                case endTime
                case startTime
            }
        }
        /// Settings to control how circular dependencies are resolved with iterative calculation.
        ///
        /// - Remark: Generated from `#/components/schemas/IterativeCalculationSettings`.
        public struct IterativeCalculationSettings: Codable, Hashable, Sendable {
            /// When iterative calculation is enabled and successive results differ by less than this threshold value, the calculation rounds stop.
            ///
            /// - Remark: Generated from `#/components/schemas/IterativeCalculationSettings/convergenceThreshold`.
            public var convergenceThreshold: Swift.Double?
            /// When iterative calculation is enabled, the maximum number of calculation rounds to perform.
            ///
            /// - Remark: Generated from `#/components/schemas/IterativeCalculationSettings/maxIterations`.
            public var maxIterations: Swift.Int32?
            /// Creates a new `IterativeCalculationSettings`.
            ///
            /// - Parameters:
            ///   - convergenceThreshold: When iterative calculation is enabled and successive results differ by less than this threshold value, the calculation rounds stop.
            ///   - maxIterations: When iterative calculation is enabled, the maximum number of calculation rounds to perform.
            public init(
                convergenceThreshold: Swift.Double? = nil,
                maxIterations: Swift.Int32? = nil
            ) {
                self.convergenceThreshold = convergenceThreshold
                self.maxIterations = maxIterations
            }
            public enum CodingKeys: String, CodingKey {
                case convergenceThreshold
                case maxIterations
            }
        }
        /// Formatting options for key value.
        ///
        /// - Remark: Generated from `#/components/schemas/KeyValueFormat`.
        public struct KeyValueFormat: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/KeyValueFormat/position`.
            public var position: Components.Schemas.TextPosition?
            /// - Remark: Generated from `#/components/schemas/KeyValueFormat/textFormat`.
            public var textFormat: Components.Schemas.TextFormat?
            /// Creates a new `KeyValueFormat`.
            ///
            /// - Parameters:
            ///   - position:
            ///   - textFormat:
            public init(
                position: Components.Schemas.TextPosition? = nil,
                textFormat: Components.Schemas.TextFormat? = nil
            ) {
                self.position = position
                self.textFormat = textFormat
            }
            public enum CodingKeys: String, CodingKey {
                case position
                case textFormat
            }
        }
        /// Properties that describe the style of a line.
        ///
        /// - Remark: Generated from `#/components/schemas/LineStyle`.
        public struct LineStyle: Codable, Hashable, Sendable {
            /// The dash type of the line.
            ///
            /// - Remark: Generated from `#/components/schemas/LineStyle/type`.
            @frozen public enum _TypePayload: String, Codable, Hashable, Sendable, CaseIterable {
                case lineDashTypeUnspecified = "LINE_DASH_TYPE_UNSPECIFIED"
                case invisible = "INVISIBLE"
                case custom = "CUSTOM"
                case solid = "SOLID"
                case dotted = "DOTTED"
                case mediumDashed = "MEDIUM_DASHED"
                case mediumDashedDotted = "MEDIUM_DASHED_DOTTED"
                case longDashed = "LONG_DASHED"
                case longDashedDotted = "LONG_DASHED_DOTTED"
            }
            /// The dash type of the line.
            ///
            /// - Remark: Generated from `#/components/schemas/LineStyle/type`.
            public var _type: Components.Schemas.LineStyle._TypePayload?
            /// The thickness of the line, in px.
            ///
            /// - Remark: Generated from `#/components/schemas/LineStyle/width`.
            public var width: Swift.Int32?
            /// Creates a new `LineStyle`.
            ///
            /// - Parameters:
            ///   - _type: The dash type of the line.
            ///   - width: The thickness of the line, in px.
            public init(
                _type: Components.Schemas.LineStyle._TypePayload? = nil,
                width: Swift.Int32? = nil
            ) {
                self._type = _type
                self.width = width
            }
            public enum CodingKeys: String, CodingKey {
                case _type = "type"
                case width
            }
        }
        /// An external or local reference.
        ///
        /// - Remark: Generated from `#/components/schemas/Link`.
        public struct Link: Codable, Hashable, Sendable {
            /// The link identifier.
            ///
            /// - Remark: Generated from `#/components/schemas/Link/uri`.
            public var uri: Swift.String?
            /// Creates a new `Link`.
            ///
            /// - Parameters:
            ///   - uri: The link identifier.
            public init(uri: Swift.String? = nil) {
                self.uri = uri
            }
            public enum CodingKeys: String, CodingKey {
                case uri
            }
        }
        /// Allows you to manually organize the values in a source data column into buckets with names of your choosing. For example, a pivot table that aggregates population by state: +-------+-------------------+ | State | SUM of Population | +-------+-------------------+ | AK | 0.7 | | AL | 4.8 | | AR | 2.9 | ... +-------+-------------------+ could be turned into a pivot table that aggregates population by time zone by providing a list of groups (for example, groupName = 'Central', items = ['AL', 'AR', 'IA', ...]) to a manual group rule. Note that a similar effect could be achieved by adding a time zone column to the source data and adjusting the pivot table. +-----------+-------------------+ | Time Zone | SUM of Population | +-----------+-------------------+ | Central | 106.3 | | Eastern | 151.9 | | Mountain | 17.4 | ... +-----------+-------------------+
        ///
        /// - Remark: Generated from `#/components/schemas/ManualRule`.
        public struct ManualRule: Codable, Hashable, Sendable {
            /// The list of group names and the corresponding items from the source data that map to each group name.
            ///
            /// - Remark: Generated from `#/components/schemas/ManualRule/groups`.
            public var groups: [Components.Schemas.ManualRuleGroup]?
            /// Creates a new `ManualRule`.
            ///
            /// - Parameters:
            ///   - groups: The list of group names and the corresponding items from the source data that map to each group name.
            public init(groups: [Components.Schemas.ManualRuleGroup]? = nil) {
                self.groups = groups
            }
            public enum CodingKeys: String, CodingKey {
                case groups
            }
        }
        /// A group name and a list of items from the source data that should be placed in the group with this name.
        ///
        /// - Remark: Generated from `#/components/schemas/ManualRuleGroup`.
        public struct ManualRuleGroup: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/ManualRuleGroup/groupName`.
            public var groupName: Components.Schemas.ExtendedValue?
            /// The items in the source data that should be placed into this group. Each item may be a string, number, or boolean. Items may appear in at most one group within a given ManualRule. Items that do not appear in any group will appear on their own.
            ///
            /// - Remark: Generated from `#/components/schemas/ManualRuleGroup/items`.
            public var items: [Components.Schemas.ExtendedValue]?
            /// Creates a new `ManualRuleGroup`.
            ///
            /// - Parameters:
            ///   - groupName:
            ///   - items: The items in the source data that should be placed into this group. Each item may be a string, number, or boolean. Items may appear in at most one group within a given ManualRule. Items that do not appear in any group will appear on their own.
            public init(
                groupName: Components.Schemas.ExtendedValue? = nil,
                items: [Components.Schemas.ExtendedValue]? = nil
            ) {
                self.groupName = groupName
                self.items = items
            }
            public enum CodingKeys: String, CodingKey {
                case groupName
                case items
            }
        }
        /// A developer metadata entry and the data filters specified in the original request that matched it.
        ///
        /// - Remark: Generated from `#/components/schemas/MatchedDeveloperMetadata`.
        public struct MatchedDeveloperMetadata: Codable, Hashable, Sendable {
            /// All filters matching the returned developer metadata.
            ///
            /// - Remark: Generated from `#/components/schemas/MatchedDeveloperMetadata/dataFilters`.
            public var dataFilters: [Components.Schemas.DataFilter]?
            /// - Remark: Generated from `#/components/schemas/MatchedDeveloperMetadata/developerMetadata`.
            public var developerMetadata: Components.Schemas.DeveloperMetadata?
            /// Creates a new `MatchedDeveloperMetadata`.
            ///
            /// - Parameters:
            ///   - dataFilters: All filters matching the returned developer metadata.
            ///   - developerMetadata:
            public init(
                dataFilters: [Components.Schemas.DataFilter]? = nil,
                developerMetadata: Components.Schemas.DeveloperMetadata? = nil
            ) {
                self.dataFilters = dataFilters
                self.developerMetadata = developerMetadata
            }
            public enum CodingKeys: String, CodingKey {
                case dataFilters
                case developerMetadata
            }
        }
        /// A value range that was matched by one or more data filers.
        ///
        /// - Remark: Generated from `#/components/schemas/MatchedValueRange`.
        public struct MatchedValueRange: Codable, Hashable, Sendable {
            /// The DataFilters from the request that matched the range of values.
            ///
            /// - Remark: Generated from `#/components/schemas/MatchedValueRange/dataFilters`.
            public var dataFilters: [Components.Schemas.DataFilter]?
            /// - Remark: Generated from `#/components/schemas/MatchedValueRange/valueRange`.
            public var valueRange: Components.Schemas.ValueRange?
            /// Creates a new `MatchedValueRange`.
            ///
            /// - Parameters:
            ///   - dataFilters: The DataFilters from the request that matched the range of values.
            ///   - valueRange:
            public init(
                dataFilters: [Components.Schemas.DataFilter]? = nil,
                valueRange: Components.Schemas.ValueRange? = nil
            ) {
                self.dataFilters = dataFilters
                self.valueRange = valueRange
            }
            public enum CodingKeys: String, CodingKey {
                case dataFilters
                case valueRange
            }
        }
        /// Merges all cells in the range.
        ///
        /// - Remark: Generated from `#/components/schemas/MergeCellsRequest`.
        public struct MergeCellsRequest: Codable, Hashable, Sendable {
            /// How the cells should be merged.
            ///
            /// - Remark: Generated from `#/components/schemas/MergeCellsRequest/mergeType`.
            @frozen public enum MergeTypePayload: String, Codable, Hashable, Sendable, CaseIterable {
                case mergeAll = "MERGE_ALL"
                case mergeColumns = "MERGE_COLUMNS"
                case mergeRows = "MERGE_ROWS"
            }
            /// How the cells should be merged.
            ///
            /// - Remark: Generated from `#/components/schemas/MergeCellsRequest/mergeType`.
            public var mergeType: Components.Schemas.MergeCellsRequest.MergeTypePayload?
            /// - Remark: Generated from `#/components/schemas/MergeCellsRequest/range`.
            public var range: Components.Schemas.GridRange?
            /// Creates a new `MergeCellsRequest`.
            ///
            /// - Parameters:
            ///   - mergeType: How the cells should be merged.
            ///   - range:
            public init(
                mergeType: Components.Schemas.MergeCellsRequest.MergeTypePayload? = nil,
                range: Components.Schemas.GridRange? = nil
            ) {
                self.mergeType = mergeType
                self.range = range
            }
            public enum CodingKeys: String, CodingKey {
                case mergeType
                case range
            }
        }
        /// Moves one or more rows or columns.
        ///
        /// - Remark: Generated from `#/components/schemas/MoveDimensionRequest`.
        public struct MoveDimensionRequest: Codable, Hashable, Sendable {
            /// The zero-based start index of where to move the source data to, based on the coordinates *before* the source data is removed from the grid. Existing data will be shifted down or right (depending on the dimension) to make room for the moved dimensions. The source dimensions are removed from the grid, so the the data may end up in a different index than specified. For example, given `A1..A5` of `0, 1, 2, 3, 4` and wanting to move `"1"` and `"2"` to between `"3"` and `"4"`, the source would be `ROWS [1..3)`,and the destination index would be `"4"` (the zero-based index of row 5). The end result would be `A1..A5` of `0, 3, 1, 2, 4`.
            ///
            /// - Remark: Generated from `#/components/schemas/MoveDimensionRequest/destinationIndex`.
            public var destinationIndex: Swift.Int32?
            /// - Remark: Generated from `#/components/schemas/MoveDimensionRequest/source`.
            public var source: Components.Schemas.DimensionRange?
            /// Creates a new `MoveDimensionRequest`.
            ///
            /// - Parameters:
            ///   - destinationIndex: The zero-based start index of where to move the source data to, based on the coordinates *before* the source data is removed from the grid. Existing data will be shifted down or right (depending on the dimension) to make room for the moved dimensions. The source dimensions are removed from the grid, so the the data may end up in a different index than specified. For example, given `A1..A5` of `0, 1, 2, 3, 4` and wanting to move `"1"` and `"2"` to between `"3"` and `"4"`, the source would be `ROWS [1..3)`,and the destination index would be `"4"` (the zero-based index of row 5). The end result would be `A1..A5` of `0, 3, 1, 2, 4`.
            ///   - source:
            public init(
                destinationIndex: Swift.Int32? = nil,
                source: Components.Schemas.DimensionRange? = nil
            ) {
                self.destinationIndex = destinationIndex
                self.source = source
            }
            public enum CodingKeys: String, CodingKey {
                case destinationIndex
                case source
            }
        }
        /// A named range.
        ///
        /// - Remark: Generated from `#/components/schemas/NamedRange`.
        public struct NamedRange: Codable, Hashable, Sendable {
            /// The name of the named range.
            ///
            /// - Remark: Generated from `#/components/schemas/NamedRange/name`.
            public var name: Swift.String?
            /// The ID of the named range.
            ///
            /// - Remark: Generated from `#/components/schemas/NamedRange/namedRangeId`.
            public var namedRangeId: Swift.String?
            /// - Remark: Generated from `#/components/schemas/NamedRange/range`.
            public var range: Components.Schemas.GridRange?
            /// Creates a new `NamedRange`.
            ///
            /// - Parameters:
            ///   - name: The name of the named range.
            ///   - namedRangeId: The ID of the named range.
            ///   - range:
            public init(
                name: Swift.String? = nil,
                namedRangeId: Swift.String? = nil,
                range: Components.Schemas.GridRange? = nil
            ) {
                self.name = name
                self.namedRangeId = namedRangeId
                self.range = range
            }
            public enum CodingKeys: String, CodingKey {
                case name
                case namedRangeId
                case range
            }
        }
        /// The number format of a cell.
        ///
        /// - Remark: Generated from `#/components/schemas/NumberFormat`.
        public struct NumberFormat: Codable, Hashable, Sendable {
            /// Pattern string used for formatting. If not set, a default pattern based on the user's locale will be used if necessary for the given type. See the [Date and Number Formats guide](/sheets/api/guides/formats) for more information about the supported patterns.
            ///
            /// - Remark: Generated from `#/components/schemas/NumberFormat/pattern`.
            public var pattern: Swift.String?
            /// The type of the number format. When writing, this field must be set.
            ///
            /// - Remark: Generated from `#/components/schemas/NumberFormat/type`.
            @frozen public enum _TypePayload: String, Codable, Hashable, Sendable, CaseIterable {
                case numberFormatTypeUnspecified = "NUMBER_FORMAT_TYPE_UNSPECIFIED"
                case text = "TEXT"
                case number = "NUMBER"
                case percent = "PERCENT"
                case currency = "CURRENCY"
                case date = "DATE"
                case time = "TIME"
                case dateTime = "DATE_TIME"
                case scientific = "SCIENTIFIC"
            }
            /// The type of the number format. When writing, this field must be set.
            ///
            /// - Remark: Generated from `#/components/schemas/NumberFormat/type`.
            public var _type: Components.Schemas.NumberFormat._TypePayload?
            /// Creates a new `NumberFormat`.
            ///
            /// - Parameters:
            ///   - pattern: Pattern string used for formatting. If not set, a default pattern based on the user's locale will be used if necessary for the given type. See the [Date and Number Formats guide](/sheets/api/guides/formats) for more information about the supported patterns.
            ///   - _type: The type of the number format. When writing, this field must be set.
            public init(
                pattern: Swift.String? = nil,
                _type: Components.Schemas.NumberFormat._TypePayload? = nil
            ) {
                self.pattern = pattern
                self._type = _type
            }
            public enum CodingKeys: String, CodingKey {
                case pattern
                case _type = "type"
            }
        }
        /// An org chart. Org charts require a unique set of labels in labels and may optionally include parent_labels and tooltips. parent_labels contain, for each node, the label identifying the parent node. tooltips contain, for each node, an optional tooltip. For example, to describe an OrgChart with Alice as the CEO, Bob as the President (reporting to Alice) and Cathy as VP of Sales (also reporting to Alice), have labels contain "Alice", "Bob", "Cathy", parent_labels contain "", "Alice", "Alice" and tooltips contain "CEO", "President", "VP Sales".
        ///
        /// - Remark: Generated from `#/components/schemas/OrgChartSpec`.
        public struct OrgChartSpec: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/OrgChartSpec/labels`.
            public var labels: Components.Schemas.ChartData?
            /// - Remark: Generated from `#/components/schemas/OrgChartSpec/nodeColor`.
            public var nodeColor: Components.Schemas.Color?
            /// - Remark: Generated from `#/components/schemas/OrgChartSpec/nodeColorStyle`.
            public var nodeColorStyle: Components.Schemas.ColorStyle?
            /// The size of the org chart nodes.
            ///
            /// - Remark: Generated from `#/components/schemas/OrgChartSpec/nodeSize`.
            @frozen public enum NodeSizePayload: String, Codable, Hashable, Sendable, CaseIterable {
                case orgChartLabelSizeUnspecified = "ORG_CHART_LABEL_SIZE_UNSPECIFIED"
                case small = "SMALL"
                case medium = "MEDIUM"
                case large = "LARGE"
            }
            /// The size of the org chart nodes.
            ///
            /// - Remark: Generated from `#/components/schemas/OrgChartSpec/nodeSize`.
            public var nodeSize: Components.Schemas.OrgChartSpec.NodeSizePayload?
            /// - Remark: Generated from `#/components/schemas/OrgChartSpec/parentLabels`.
            public var parentLabels: Components.Schemas.ChartData?
            /// - Remark: Generated from `#/components/schemas/OrgChartSpec/selectedNodeColor`.
            public var selectedNodeColor: Components.Schemas.Color?
            /// - Remark: Generated from `#/components/schemas/OrgChartSpec/selectedNodeColorStyle`.
            public var selectedNodeColorStyle: Components.Schemas.ColorStyle?
            /// - Remark: Generated from `#/components/schemas/OrgChartSpec/tooltips`.
            public var tooltips: Components.Schemas.ChartData?
            /// Creates a new `OrgChartSpec`.
            ///
            /// - Parameters:
            ///   - labels:
            ///   - nodeColor:
            ///   - nodeColorStyle:
            ///   - nodeSize: The size of the org chart nodes.
            ///   - parentLabels:
            ///   - selectedNodeColor:
            ///   - selectedNodeColorStyle:
            ///   - tooltips:
            public init(
                labels: Components.Schemas.ChartData? = nil,
                nodeColor: Components.Schemas.Color? = nil,
                nodeColorStyle: Components.Schemas.ColorStyle? = nil,
                nodeSize: Components.Schemas.OrgChartSpec.NodeSizePayload? = nil,
                parentLabels: Components.Schemas.ChartData? = nil,
                selectedNodeColor: Components.Schemas.Color? = nil,
                selectedNodeColorStyle: Components.Schemas.ColorStyle? = nil,
                tooltips: Components.Schemas.ChartData? = nil
            ) {
                self.labels = labels
                self.nodeColor = nodeColor
                self.nodeColorStyle = nodeColorStyle
                self.nodeSize = nodeSize
                self.parentLabels = parentLabels
                self.selectedNodeColor = selectedNodeColor
                self.selectedNodeColorStyle = selectedNodeColorStyle
                self.tooltips = tooltips
            }
            public enum CodingKeys: String, CodingKey {
                case labels
                case nodeColor
                case nodeColorStyle
                case nodeSize
                case parentLabels
                case selectedNodeColor
                case selectedNodeColorStyle
                case tooltips
            }
        }
        /// The location an object is overlaid on top of a grid.
        ///
        /// - Remark: Generated from `#/components/schemas/OverlayPosition`.
        public struct OverlayPosition: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/OverlayPosition/anchorCell`.
            public var anchorCell: Components.Schemas.GridCoordinate?
            /// The height of the object, in pixels. Defaults to 371.
            ///
            /// - Remark: Generated from `#/components/schemas/OverlayPosition/heightPixels`.
            public var heightPixels: Swift.Int32?
            /// The horizontal offset, in pixels, that the object is offset from the anchor cell.
            ///
            /// - Remark: Generated from `#/components/schemas/OverlayPosition/offsetXPixels`.
            public var offsetXPixels: Swift.Int32?
            /// The vertical offset, in pixels, that the object is offset from the anchor cell.
            ///
            /// - Remark: Generated from `#/components/schemas/OverlayPosition/offsetYPixels`.
            public var offsetYPixels: Swift.Int32?
            /// The width of the object, in pixels. Defaults to 600.
            ///
            /// - Remark: Generated from `#/components/schemas/OverlayPosition/widthPixels`.
            public var widthPixels: Swift.Int32?
            /// Creates a new `OverlayPosition`.
            ///
            /// - Parameters:
            ///   - anchorCell:
            ///   - heightPixels: The height of the object, in pixels. Defaults to 371.
            ///   - offsetXPixels: The horizontal offset, in pixels, that the object is offset from the anchor cell.
            ///   - offsetYPixels: The vertical offset, in pixels, that the object is offset from the anchor cell.
            ///   - widthPixels: The width of the object, in pixels. Defaults to 600.
            public init(
                anchorCell: Components.Schemas.GridCoordinate? = nil,
                heightPixels: Swift.Int32? = nil,
                offsetXPixels: Swift.Int32? = nil,
                offsetYPixels: Swift.Int32? = nil,
                widthPixels: Swift.Int32? = nil
            ) {
                self.anchorCell = anchorCell
                self.heightPixels = heightPixels
                self.offsetXPixels = offsetXPixels
                self.offsetYPixels = offsetYPixels
                self.widthPixels = widthPixels
            }
            public enum CodingKeys: String, CodingKey {
                case anchorCell
                case heightPixels
                case offsetXPixels
                case offsetYPixels
                case widthPixels
            }
        }
        /// The amount of padding around the cell, in pixels. When updating padding, every field must be specified.
        ///
        /// - Remark: Generated from `#/components/schemas/Padding`.
        public struct Padding: Codable, Hashable, Sendable {
            /// The bottom padding of the cell.
            ///
            /// - Remark: Generated from `#/components/schemas/Padding/bottom`.
            public var bottom: Swift.Int32?
            /// The left padding of the cell.
            ///
            /// - Remark: Generated from `#/components/schemas/Padding/left`.
            public var left: Swift.Int32?
            /// The right padding of the cell.
            ///
            /// - Remark: Generated from `#/components/schemas/Padding/right`.
            public var right: Swift.Int32?
            /// The top padding of the cell.
            ///
            /// - Remark: Generated from `#/components/schemas/Padding/top`.
            public var top: Swift.Int32?
            /// Creates a new `Padding`.
            ///
            /// - Parameters:
            ///   - bottom: The bottom padding of the cell.
            ///   - left: The left padding of the cell.
            ///   - right: The right padding of the cell.
            ///   - top: The top padding of the cell.
            public init(
                bottom: Swift.Int32? = nil,
                left: Swift.Int32? = nil,
                right: Swift.Int32? = nil,
                top: Swift.Int32? = nil
            ) {
                self.bottom = bottom
                self.left = left
                self.right = right
                self.top = top
            }
            public enum CodingKeys: String, CodingKey {
                case bottom
                case left
                case right
                case top
            }
        }
        /// Inserts data into the spreadsheet starting at the specified coordinate.
        ///
        /// - Remark: Generated from `#/components/schemas/PasteDataRequest`.
        public struct PasteDataRequest: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/PasteDataRequest/coordinate`.
            public var coordinate: Components.Schemas.GridCoordinate?
            /// The data to insert.
            ///
            /// - Remark: Generated from `#/components/schemas/PasteDataRequest/data`.
            public var data: Swift.String?
            /// The delimiter in the data.
            ///
            /// - Remark: Generated from `#/components/schemas/PasteDataRequest/delimiter`.
            public var delimiter: Swift.String?
            /// True if the data is HTML.
            ///
            /// - Remark: Generated from `#/components/schemas/PasteDataRequest/html`.
            public var html: Swift.Bool?
            /// How the data should be pasted.
            ///
            /// - Remark: Generated from `#/components/schemas/PasteDataRequest/type`.
            @frozen public enum _TypePayload: String, Codable, Hashable, Sendable, CaseIterable {
                case pasteNormal = "PASTE_NORMAL"
                case pasteValues = "PASTE_VALUES"
                case pasteFormat = "PASTE_FORMAT"
                case pasteNoBorders = "PASTE_NO_BORDERS"
                case pasteFormula = "PASTE_FORMULA"
                case pasteDataValidation = "PASTE_DATA_VALIDATION"
                case pasteConditionalFormatting = "PASTE_CONDITIONAL_FORMATTING"
            }
            /// How the data should be pasted.
            ///
            /// - Remark: Generated from `#/components/schemas/PasteDataRequest/type`.
            public var _type: Components.Schemas.PasteDataRequest._TypePayload?
            /// Creates a new `PasteDataRequest`.
            ///
            /// - Parameters:
            ///   - coordinate:
            ///   - data: The data to insert.
            ///   - delimiter: The delimiter in the data.
            ///   - html: True if the data is HTML.
            ///   - _type: How the data should be pasted.
            public init(
                coordinate: Components.Schemas.GridCoordinate? = nil,
                data: Swift.String? = nil,
                delimiter: Swift.String? = nil,
                html: Swift.Bool? = nil,
                _type: Components.Schemas.PasteDataRequest._TypePayload? = nil
            ) {
                self.coordinate = coordinate
                self.data = data
                self.delimiter = delimiter
                self.html = html
                self._type = _type
            }
            public enum CodingKeys: String, CodingKey {
                case coordinate
                case data
                case delimiter
                case html
                case _type = "type"
            }
        }
        /// A pie chart.
        ///
        /// - Remark: Generated from `#/components/schemas/PieChartSpec`.
        public struct PieChartSpec: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/PieChartSpec/domain`.
            public var domain: Components.Schemas.ChartData?
            /// Where the legend of the pie chart should be drawn.
            ///
            /// - Remark: Generated from `#/components/schemas/PieChartSpec/legendPosition`.
            @frozen public enum LegendPositionPayload: String, Codable, Hashable, Sendable, CaseIterable {
                case pieChartLegendPositionUnspecified = "PIE_CHART_LEGEND_POSITION_UNSPECIFIED"
                case bottomLegend = "BOTTOM_LEGEND"
                case leftLegend = "LEFT_LEGEND"
                case rightLegend = "RIGHT_LEGEND"
                case topLegend = "TOP_LEGEND"
                case noLegend = "NO_LEGEND"
                case labeledLegend = "LABELED_LEGEND"
            }
            /// Where the legend of the pie chart should be drawn.
            ///
            /// - Remark: Generated from `#/components/schemas/PieChartSpec/legendPosition`.
            public var legendPosition: Components.Schemas.PieChartSpec.LegendPositionPayload?
            /// The size of the hole in the pie chart.
            ///
            /// - Remark: Generated from `#/components/schemas/PieChartSpec/pieHole`.
            public var pieHole: Swift.Double?
            /// - Remark: Generated from `#/components/schemas/PieChartSpec/series`.
            public var series: Components.Schemas.ChartData?
            /// True if the pie is three dimensional.
            ///
            /// - Remark: Generated from `#/components/schemas/PieChartSpec/threeDimensional`.
            public var threeDimensional: Swift.Bool?
            /// Creates a new `PieChartSpec`.
            ///
            /// - Parameters:
            ///   - domain:
            ///   - legendPosition: Where the legend of the pie chart should be drawn.
            ///   - pieHole: The size of the hole in the pie chart.
            ///   - series:
            ///   - threeDimensional: True if the pie is three dimensional.
            public init(
                domain: Components.Schemas.ChartData? = nil,
                legendPosition: Components.Schemas.PieChartSpec.LegendPositionPayload? = nil,
                pieHole: Swift.Double? = nil,
                series: Components.Schemas.ChartData? = nil,
                threeDimensional: Swift.Bool? = nil
            ) {
                self.domain = domain
                self.legendPosition = legendPosition
                self.pieHole = pieHole
                self.series = series
                self.threeDimensional = threeDimensional
            }
            public enum CodingKeys: String, CodingKey {
                case domain
                case legendPosition
                case pieHole
                case series
                case threeDimensional
            }
        }
        /// Criteria for showing/hiding rows in a pivot table.
        ///
        /// - Remark: Generated from `#/components/schemas/PivotFilterCriteria`.
        public struct PivotFilterCriteria: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/PivotFilterCriteria/condition`.
            public var condition: Components.Schemas.BooleanCondition?
            /// Whether values are visible by default. If true, the visible_values are ignored, all values that meet condition (if specified) are shown. If false, values that are both in visible_values and meet condition are shown.
            ///
            /// - Remark: Generated from `#/components/schemas/PivotFilterCriteria/visibleByDefault`.
            public var visibleByDefault: Swift.Bool?
            /// Values that should be included. Values not listed here are excluded.
            ///
            /// - Remark: Generated from `#/components/schemas/PivotFilterCriteria/visibleValues`.
            public var visibleValues: [Swift.String]?
            /// Creates a new `PivotFilterCriteria`.
            ///
            /// - Parameters:
            ///   - condition:
            ///   - visibleByDefault: Whether values are visible by default. If true, the visible_values are ignored, all values that meet condition (if specified) are shown. If false, values that are both in visible_values and meet condition are shown.
            ///   - visibleValues: Values that should be included. Values not listed here are excluded.
            public init(
                condition: Components.Schemas.BooleanCondition? = nil,
                visibleByDefault: Swift.Bool? = nil,
                visibleValues: [Swift.String]? = nil
            ) {
                self.condition = condition
                self.visibleByDefault = visibleByDefault
                self.visibleValues = visibleValues
            }
            public enum CodingKeys: String, CodingKey {
                case condition
                case visibleByDefault
                case visibleValues
            }
        }
        /// The pivot table filter criteria associated with a specific source column offset.
        ///
        /// - Remark: Generated from `#/components/schemas/PivotFilterSpec`.
        public struct PivotFilterSpec: Codable, Hashable, Sendable {
            /// The zero-based column offset of the source range.
            ///
            /// - Remark: Generated from `#/components/schemas/PivotFilterSpec/columnOffsetIndex`.
            public var columnOffsetIndex: Swift.Int32?
            /// - Remark: Generated from `#/components/schemas/PivotFilterSpec/dataSourceColumnReference`.
            public var dataSourceColumnReference: Components.Schemas.DataSourceColumnReference?
            /// - Remark: Generated from `#/components/schemas/PivotFilterSpec/filterCriteria`.
            public var filterCriteria: Components.Schemas.PivotFilterCriteria?
            /// Creates a new `PivotFilterSpec`.
            ///
            /// - Parameters:
            ///   - columnOffsetIndex: The zero-based column offset of the source range.
            ///   - dataSourceColumnReference:
            ///   - filterCriteria:
            public init(
                columnOffsetIndex: Swift.Int32? = nil,
                dataSourceColumnReference: Components.Schemas.DataSourceColumnReference? = nil,
                filterCriteria: Components.Schemas.PivotFilterCriteria? = nil
            ) {
                self.columnOffsetIndex = columnOffsetIndex
                self.dataSourceColumnReference = dataSourceColumnReference
                self.filterCriteria = filterCriteria
            }
            public enum CodingKeys: String, CodingKey {
                case columnOffsetIndex
                case dataSourceColumnReference
                case filterCriteria
            }
        }
        /// A single grouping (either row or column) in a pivot table.
        ///
        /// - Remark: Generated from `#/components/schemas/PivotGroup`.
        public struct PivotGroup: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/PivotGroup/dataSourceColumnReference`.
            public var dataSourceColumnReference: Components.Schemas.DataSourceColumnReference?
            /// - Remark: Generated from `#/components/schemas/PivotGroup/groupLimit`.
            public var groupLimit: Components.Schemas.PivotGroupLimit?
            /// - Remark: Generated from `#/components/schemas/PivotGroup/groupRule`.
            public var groupRule: Components.Schemas.PivotGroupRule?
            /// The labels to use for the row/column groups which can be customized. For example, in the following pivot table, the row label is `Region` (which could be renamed to `State`) and the column label is `Product` (which could be renamed `Item`). Pivot tables created before December 2017 do not have header labels. If you'd like to add header labels to an existing pivot table, please delete the existing pivot table and then create a new pivot table with same parameters. +--------------+---------+-------+ | SUM of Units | Product | | | Region | Pen | Paper | +--------------+---------+-------+ | New York | 345 | 98 | | Oregon | 234 | 123 | | Tennessee | 531 | 415 | +--------------+---------+-------+ | Grand Total | 1110 | 636 | +--------------+---------+-------+
            ///
            /// - Remark: Generated from `#/components/schemas/PivotGroup/label`.
            public var label: Swift.String?
            /// True if the headings in this pivot group should be repeated. This is only valid for row groupings and is ignored by columns. By default, we minimize repetition of headings by not showing higher level headings where they are the same. For example, even though the third row below corresponds to "Q1 Mar", "Q1" is not shown because it is redundant with previous rows. Setting repeat_headings to true would cause "Q1" to be repeated for "Feb" and "Mar". +--------------+ | Q1 | Jan | | | Feb | | | Mar | +--------+-----+ | Q1 Total | +--------------+
            ///
            /// - Remark: Generated from `#/components/schemas/PivotGroup/repeatHeadings`.
            public var repeatHeadings: Swift.Bool?
            /// True if the pivot table should include the totals for this grouping.
            ///
            /// - Remark: Generated from `#/components/schemas/PivotGroup/showTotals`.
            public var showTotals: Swift.Bool?
            /// The order the values in this group should be sorted.
            ///
            /// - Remark: Generated from `#/components/schemas/PivotGroup/sortOrder`.
            @frozen public enum SortOrderPayload: String, Codable, Hashable, Sendable, CaseIterable {
                case sortOrderUnspecified = "SORT_ORDER_UNSPECIFIED"
                case ascending = "ASCENDING"
                case descending = "DESCENDING"
            }
            /// The order the values in this group should be sorted.
            ///
            /// - Remark: Generated from `#/components/schemas/PivotGroup/sortOrder`.
            public var sortOrder: Components.Schemas.PivotGroup.SortOrderPayload?
            /// The column offset of the source range that this grouping is based on. For example, if the source was `C10:E15`, a `sourceColumnOffset` of `0` means this group refers to column `C`, whereas the offset `1` would refer to column `D`.
            ///
            /// - Remark: Generated from `#/components/schemas/PivotGroup/sourceColumnOffset`.
            public var sourceColumnOffset: Swift.Int32?
            /// - Remark: Generated from `#/components/schemas/PivotGroup/valueBucket`.
            public var valueBucket: Components.Schemas.PivotGroupSortValueBucket?
            /// Metadata about values in the grouping.
            ///
            /// - Remark: Generated from `#/components/schemas/PivotGroup/valueMetadata`.
            public var valueMetadata: [Components.Schemas.PivotGroupValueMetadata]?
            /// Creates a new `PivotGroup`.
            ///
            /// - Parameters:
            ///   - dataSourceColumnReference:
            ///   - groupLimit:
            ///   - groupRule:
            ///   - label: The labels to use for the row/column groups which can be customized. For example, in the following pivot table, the row label is `Region` (which could be renamed to `State`) and the column label is `Product` (which could be renamed `Item`). Pivot tables created before December 2017 do not have header labels. If you'd like to add header labels to an existing pivot table, please delete the existing pivot table and then create a new pivot table with same parameters. +--------------+---------+-------+ | SUM of Units | Product | | | Region | Pen | Paper | +--------------+---------+-------+ | New York | 345 | 98 | | Oregon | 234 | 123 | | Tennessee | 531 | 415 | +--------------+---------+-------+ | Grand Total | 1110 | 636 | +--------------+---------+-------+
            ///   - repeatHeadings: True if the headings in this pivot group should be repeated. This is only valid for row groupings and is ignored by columns. By default, we minimize repetition of headings by not showing higher level headings where they are the same. For example, even though the third row below corresponds to "Q1 Mar", "Q1" is not shown because it is redundant with previous rows. Setting repeat_headings to true would cause "Q1" to be repeated for "Feb" and "Mar". +--------------+ | Q1 | Jan | | | Feb | | | Mar | +--------+-----+ | Q1 Total | +--------------+
            ///   - showTotals: True if the pivot table should include the totals for this grouping.
            ///   - sortOrder: The order the values in this group should be sorted.
            ///   - sourceColumnOffset: The column offset of the source range that this grouping is based on. For example, if the source was `C10:E15`, a `sourceColumnOffset` of `0` means this group refers to column `C`, whereas the offset `1` would refer to column `D`.
            ///   - valueBucket:
            ///   - valueMetadata: Metadata about values in the grouping.
            public init(
                dataSourceColumnReference: Components.Schemas.DataSourceColumnReference? = nil,
                groupLimit: Components.Schemas.PivotGroupLimit? = nil,
                groupRule: Components.Schemas.PivotGroupRule? = nil,
                label: Swift.String? = nil,
                repeatHeadings: Swift.Bool? = nil,
                showTotals: Swift.Bool? = nil,
                sortOrder: Components.Schemas.PivotGroup.SortOrderPayload? = nil,
                sourceColumnOffset: Swift.Int32? = nil,
                valueBucket: Components.Schemas.PivotGroupSortValueBucket? = nil,
                valueMetadata: [Components.Schemas.PivotGroupValueMetadata]? = nil
            ) {
                self.dataSourceColumnReference = dataSourceColumnReference
                self.groupLimit = groupLimit
                self.groupRule = groupRule
                self.label = label
                self.repeatHeadings = repeatHeadings
                self.showTotals = showTotals
                self.sortOrder = sortOrder
                self.sourceColumnOffset = sourceColumnOffset
                self.valueBucket = valueBucket
                self.valueMetadata = valueMetadata
            }
            public enum CodingKeys: String, CodingKey {
                case dataSourceColumnReference
                case groupLimit
                case groupRule
                case label
                case repeatHeadings
                case showTotals
                case sortOrder
                case sourceColumnOffset
                case valueBucket
                case valueMetadata
            }
        }
        /// The count limit on rows or columns in the pivot group.
        ///
        /// - Remark: Generated from `#/components/schemas/PivotGroupLimit`.
        public struct PivotGroupLimit: Codable, Hashable, Sendable {
            /// The order in which the group limit is applied to the pivot table. Pivot group limits are applied from lower to higher order number. Order numbers are normalized to consecutive integers from 0. For write request, to fully customize the applying orders, all pivot group limits should have this field set with an unique number. Otherwise, the order is determined by the index in the PivotTable.rows list and then the PivotTable.columns list.
            ///
            /// - Remark: Generated from `#/components/schemas/PivotGroupLimit/applyOrder`.
            public var applyOrder: Swift.Int32?
            /// The count limit.
            ///
            /// - Remark: Generated from `#/components/schemas/PivotGroupLimit/countLimit`.
            public var countLimit: Swift.Int32?
            /// Creates a new `PivotGroupLimit`.
            ///
            /// - Parameters:
            ///   - applyOrder: The order in which the group limit is applied to the pivot table. Pivot group limits are applied from lower to higher order number. Order numbers are normalized to consecutive integers from 0. For write request, to fully customize the applying orders, all pivot group limits should have this field set with an unique number. Otherwise, the order is determined by the index in the PivotTable.rows list and then the PivotTable.columns list.
            ///   - countLimit: The count limit.
            public init(
                applyOrder: Swift.Int32? = nil,
                countLimit: Swift.Int32? = nil
            ) {
                self.applyOrder = applyOrder
                self.countLimit = countLimit
            }
            public enum CodingKeys: String, CodingKey {
                case applyOrder
                case countLimit
            }
        }
        /// An optional setting on a PivotGroup that defines buckets for the values in the source data column rather than breaking out each individual value. Only one PivotGroup with a group rule may be added for each column in the source data, though on any given column you may add both a PivotGroup that has a rule and a PivotGroup that does not.
        ///
        /// - Remark: Generated from `#/components/schemas/PivotGroupRule`.
        public struct PivotGroupRule: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/PivotGroupRule/dateTimeRule`.
            public var dateTimeRule: Components.Schemas.DateTimeRule?
            /// - Remark: Generated from `#/components/schemas/PivotGroupRule/histogramRule`.
            public var histogramRule: Components.Schemas.HistogramRule?
            /// - Remark: Generated from `#/components/schemas/PivotGroupRule/manualRule`.
            public var manualRule: Components.Schemas.ManualRule?
            /// Creates a new `PivotGroupRule`.
            ///
            /// - Parameters:
            ///   - dateTimeRule:
            ///   - histogramRule:
            ///   - manualRule:
            public init(
                dateTimeRule: Components.Schemas.DateTimeRule? = nil,
                histogramRule: Components.Schemas.HistogramRule? = nil,
                manualRule: Components.Schemas.ManualRule? = nil
            ) {
                self.dateTimeRule = dateTimeRule
                self.histogramRule = histogramRule
                self.manualRule = manualRule
            }
            public enum CodingKeys: String, CodingKey {
                case dateTimeRule
                case histogramRule
                case manualRule
            }
        }
        /// Information about which values in a pivot group should be used for sorting.
        ///
        /// - Remark: Generated from `#/components/schemas/PivotGroupSortValueBucket`.
        public struct PivotGroupSortValueBucket: Codable, Hashable, Sendable {
            /// Determines the bucket from which values are chosen to sort. For example, in a pivot table with one row group & two column groups, the row group can list up to two values. The first value corresponds to a value within the first column group, and the second value corresponds to a value in the second column group. If no values are listed, this would indicate that the row should be sorted according to the "Grand Total" over the column groups. If a single value is listed, this would correspond to using the "Total" of that bucket.
            ///
            /// - Remark: Generated from `#/components/schemas/PivotGroupSortValueBucket/buckets`.
            public var buckets: [Components.Schemas.ExtendedValue]?
            /// The offset in the PivotTable.values list which the values in this grouping should be sorted by.
            ///
            /// - Remark: Generated from `#/components/schemas/PivotGroupSortValueBucket/valuesIndex`.
            public var valuesIndex: Swift.Int32?
            /// Creates a new `PivotGroupSortValueBucket`.
            ///
            /// - Parameters:
            ///   - buckets: Determines the bucket from which values are chosen to sort. For example, in a pivot table with one row group & two column groups, the row group can list up to two values. The first value corresponds to a value within the first column group, and the second value corresponds to a value in the second column group. If no values are listed, this would indicate that the row should be sorted according to the "Grand Total" over the column groups. If a single value is listed, this would correspond to using the "Total" of that bucket.
            ///   - valuesIndex: The offset in the PivotTable.values list which the values in this grouping should be sorted by.
            public init(
                buckets: [Components.Schemas.ExtendedValue]? = nil,
                valuesIndex: Swift.Int32? = nil
            ) {
                self.buckets = buckets
                self.valuesIndex = valuesIndex
            }
            public enum CodingKeys: String, CodingKey {
                case buckets
                case valuesIndex
            }
        }
        /// Metadata about a value in a pivot grouping.
        ///
        /// - Remark: Generated from `#/components/schemas/PivotGroupValueMetadata`.
        public struct PivotGroupValueMetadata: Codable, Hashable, Sendable {
            /// True if the data corresponding to the value is collapsed.
            ///
            /// - Remark: Generated from `#/components/schemas/PivotGroupValueMetadata/collapsed`.
            public var collapsed: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/PivotGroupValueMetadata/value`.
            public var value: Components.Schemas.ExtendedValue?
            /// Creates a new `PivotGroupValueMetadata`.
            ///
            /// - Parameters:
            ///   - collapsed: True if the data corresponding to the value is collapsed.
            ///   - value:
            public init(
                collapsed: Swift.Bool? = nil,
                value: Components.Schemas.ExtendedValue? = nil
            ) {
                self.collapsed = collapsed
                self.value = value
            }
            public enum CodingKeys: String, CodingKey {
                case collapsed
                case value
            }
        }
        /// A pivot table.
        ///
        /// - Remark: Generated from `#/components/schemas/PivotTable`.
        public struct PivotTable: Codable, Hashable, Sendable {
            /// Each column grouping in the pivot table.
            ///
            /// - Remark: Generated from `#/components/schemas/PivotTable/columns`.
            public var columns: [Components.Schemas.PivotGroup]?
            /// An optional mapping of filters per source column offset. The filters are applied before aggregating data into the pivot table. The map's key is the column offset of the source range that you want to filter, and the value is the criteria for that column. For example, if the source was `C10:E15`, a key of `0` will have the filter for column `C`, whereas the key `1` is for column `D`. This field is deprecated in favor of filter_specs.
            ///
            /// - Remark: Generated from `#/components/schemas/PivotTable/criteria`.
            @available(*, deprecated)
            public struct CriteriaPayload: Codable, Hashable, Sendable {
                /// A container of undocumented properties.
                public var additionalProperties: [String: Components.Schemas.PivotFilterCriteria]
                /// Creates a new `CriteriaPayload`.
                ///
                /// - Parameters:
                ///   - additionalProperties: A container of undocumented properties.
                public init(additionalProperties: [String: Components.Schemas.PivotFilterCriteria] = .init()) {
                    self.additionalProperties = additionalProperties
                }
                public init(from decoder: any Decoder) throws {
                    additionalProperties = try decoder.decodeAdditionalProperties(knownKeys: [])
                }
                public func encode(to encoder: any Encoder) throws {
                    try encoder.encodeAdditionalProperties(additionalProperties)
                }
            }
            /// An optional mapping of filters per source column offset. The filters are applied before aggregating data into the pivot table. The map's key is the column offset of the source range that you want to filter, and the value is the criteria for that column. For example, if the source was `C10:E15`, a key of `0` will have the filter for column `C`, whereas the key `1` is for column `D`. This field is deprecated in favor of filter_specs.
            ///
            /// - Remark: Generated from `#/components/schemas/PivotTable/criteria`.
            @available(*, deprecated)
            public var criteria: Components.Schemas.PivotTable.CriteriaPayload?
            /// - Remark: Generated from `#/components/schemas/PivotTable/dataExecutionStatus`.
            public var dataExecutionStatus: Components.Schemas.DataExecutionStatus?
            /// The ID of the data source the pivot table is reading data from.
            ///
            /// - Remark: Generated from `#/components/schemas/PivotTable/dataSourceId`.
            public var dataSourceId: Swift.String?
            /// The filters applied to the source columns before aggregating data for the pivot table. Both criteria and filter_specs are populated in responses. If both fields are specified in an update request, this field takes precedence.
            ///
            /// - Remark: Generated from `#/components/schemas/PivotTable/filterSpecs`.
            public var filterSpecs: [Components.Schemas.PivotFilterSpec]?
            /// Each row grouping in the pivot table.
            ///
            /// - Remark: Generated from `#/components/schemas/PivotTable/rows`.
            public var rows: [Components.Schemas.PivotGroup]?
            /// - Remark: Generated from `#/components/schemas/PivotTable/source`.
            public var source: Components.Schemas.GridRange?
            /// Whether values should be listed horizontally (as columns) or vertically (as rows).
            ///
            /// - Remark: Generated from `#/components/schemas/PivotTable/valueLayout`.
            @frozen public enum ValueLayoutPayload: String, Codable, Hashable, Sendable, CaseIterable {
                case horizontal = "HORIZONTAL"
                case vertical = "VERTICAL"
            }
            /// Whether values should be listed horizontally (as columns) or vertically (as rows).
            ///
            /// - Remark: Generated from `#/components/schemas/PivotTable/valueLayout`.
            public var valueLayout: Components.Schemas.PivotTable.ValueLayoutPayload?
            /// A list of values to include in the pivot table.
            ///
            /// - Remark: Generated from `#/components/schemas/PivotTable/values`.
            public var values: [Components.Schemas.PivotValue]?
            /// Creates a new `PivotTable`.
            ///
            /// - Parameters:
            ///   - columns: Each column grouping in the pivot table.
            ///   - criteria: An optional mapping of filters per source column offset. The filters are applied before aggregating data into the pivot table. The map's key is the column offset of the source range that you want to filter, and the value is the criteria for that column. For example, if the source was `C10:E15`, a key of `0` will have the filter for column `C`, whereas the key `1` is for column `D`. This field is deprecated in favor of filter_specs.
            ///   - dataExecutionStatus:
            ///   - dataSourceId: The ID of the data source the pivot table is reading data from.
            ///   - filterSpecs: The filters applied to the source columns before aggregating data for the pivot table. Both criteria and filter_specs are populated in responses. If both fields are specified in an update request, this field takes precedence.
            ///   - rows: Each row grouping in the pivot table.
            ///   - source:
            ///   - valueLayout: Whether values should be listed horizontally (as columns) or vertically (as rows).
            ///   - values: A list of values to include in the pivot table.
            public init(
                columns: [Components.Schemas.PivotGroup]? = nil,
                criteria: Components.Schemas.PivotTable.CriteriaPayload? = nil,
                dataExecutionStatus: Components.Schemas.DataExecutionStatus? = nil,
                dataSourceId: Swift.String? = nil,
                filterSpecs: [Components.Schemas.PivotFilterSpec]? = nil,
                rows: [Components.Schemas.PivotGroup]? = nil,
                source: Components.Schemas.GridRange? = nil,
                valueLayout: Components.Schemas.PivotTable.ValueLayoutPayload? = nil,
                values: [Components.Schemas.PivotValue]? = nil
            ) {
                self.columns = columns
                self.criteria = criteria
                self.dataExecutionStatus = dataExecutionStatus
                self.dataSourceId = dataSourceId
                self.filterSpecs = filterSpecs
                self.rows = rows
                self.source = source
                self.valueLayout = valueLayout
                self.values = values
            }
            public enum CodingKeys: String, CodingKey {
                case columns
                case criteria
                case dataExecutionStatus
                case dataSourceId
                case filterSpecs
                case rows
                case source
                case valueLayout
                case values
            }
        }
        /// The definition of how a value in a pivot table should be calculated.
        ///
        /// - Remark: Generated from `#/components/schemas/PivotValue`.
        public struct PivotValue: Codable, Hashable, Sendable {
            /// If specified, indicates that pivot values should be displayed as the result of a calculation with another pivot value. For example, if calculated_display_type is specified as PERCENT_OF_GRAND_TOTAL, all the pivot values are displayed as the percentage of the grand total. In the Sheets editor, this is referred to as "Show As" in the value section of a pivot table.
            ///
            /// - Remark: Generated from `#/components/schemas/PivotValue/calculatedDisplayType`.
            @frozen public enum CalculatedDisplayTypePayload: String, Codable, Hashable, Sendable, CaseIterable {
                case pivotValueCalculatedDisplayTypeUnspecified = "PIVOT_VALUE_CALCULATED_DISPLAY_TYPE_UNSPECIFIED"
                case percentOfRowTotal = "PERCENT_OF_ROW_TOTAL"
                case percentOfColumnTotal = "PERCENT_OF_COLUMN_TOTAL"
                case percentOfGrandTotal = "PERCENT_OF_GRAND_TOTAL"
            }
            /// If specified, indicates that pivot values should be displayed as the result of a calculation with another pivot value. For example, if calculated_display_type is specified as PERCENT_OF_GRAND_TOTAL, all the pivot values are displayed as the percentage of the grand total. In the Sheets editor, this is referred to as "Show As" in the value section of a pivot table.
            ///
            /// - Remark: Generated from `#/components/schemas/PivotValue/calculatedDisplayType`.
            public var calculatedDisplayType: Components.Schemas.PivotValue.CalculatedDisplayTypePayload?
            /// - Remark: Generated from `#/components/schemas/PivotValue/dataSourceColumnReference`.
            public var dataSourceColumnReference: Components.Schemas.DataSourceColumnReference?
            /// A custom formula to calculate the value. The formula must start with an `=` character.
            ///
            /// - Remark: Generated from `#/components/schemas/PivotValue/formula`.
            public var formula: Swift.String?
            /// A name to use for the value.
            ///
            /// - Remark: Generated from `#/components/schemas/PivotValue/name`.
            public var name: Swift.String?
            /// The column offset of the source range that this value reads from. For example, if the source was `C10:E15`, a `sourceColumnOffset` of `0` means this value refers to column `C`, whereas the offset `1` would refer to column `D`.
            ///
            /// - Remark: Generated from `#/components/schemas/PivotValue/sourceColumnOffset`.
            public var sourceColumnOffset: Swift.Int32?
            /// A function to summarize the value. If formula is set, the only supported values are SUM and CUSTOM. If sourceColumnOffset is set, then `CUSTOM` is not supported.
            ///
            /// - Remark: Generated from `#/components/schemas/PivotValue/summarizeFunction`.
            @frozen public enum SummarizeFunctionPayload: String, Codable, Hashable, Sendable, CaseIterable {
                case pivotStandardValueFunctionUnspecified = "PIVOT_STANDARD_VALUE_FUNCTION_UNSPECIFIED"
                case sum = "SUM"
                case counta = "COUNTA"
                case count = "COUNT"
                case countunique = "COUNTUNIQUE"
                case average = "AVERAGE"
                case max = "MAX"
                case min = "MIN"
                case median = "MEDIAN"
                case product = "PRODUCT"
                case stdev = "STDEV"
                case stdevp = "STDEVP"
                case _var = "VAR"
                case varp = "VARP"
                case custom = "CUSTOM"
            }
            /// A function to summarize the value. If formula is set, the only supported values are SUM and CUSTOM. If sourceColumnOffset is set, then `CUSTOM` is not supported.
            ///
            /// - Remark: Generated from `#/components/schemas/PivotValue/summarizeFunction`.
            public var summarizeFunction: Components.Schemas.PivotValue.SummarizeFunctionPayload?
            /// Creates a new `PivotValue`.
            ///
            /// - Parameters:
            ///   - calculatedDisplayType: If specified, indicates that pivot values should be displayed as the result of a calculation with another pivot value. For example, if calculated_display_type is specified as PERCENT_OF_GRAND_TOTAL, all the pivot values are displayed as the percentage of the grand total. In the Sheets editor, this is referred to as "Show As" in the value section of a pivot table.
            ///   - dataSourceColumnReference:
            ///   - formula: A custom formula to calculate the value. The formula must start with an `=` character.
            ///   - name: A name to use for the value.
            ///   - sourceColumnOffset: The column offset of the source range that this value reads from. For example, if the source was `C10:E15`, a `sourceColumnOffset` of `0` means this value refers to column `C`, whereas the offset `1` would refer to column `D`.
            ///   - summarizeFunction: A function to summarize the value. If formula is set, the only supported values are SUM and CUSTOM. If sourceColumnOffset is set, then `CUSTOM` is not supported.
            public init(
                calculatedDisplayType: Components.Schemas.PivotValue.CalculatedDisplayTypePayload? = nil,
                dataSourceColumnReference: Components.Schemas.DataSourceColumnReference? = nil,
                formula: Swift.String? = nil,
                name: Swift.String? = nil,
                sourceColumnOffset: Swift.Int32? = nil,
                summarizeFunction: Components.Schemas.PivotValue.SummarizeFunctionPayload? = nil
            ) {
                self.calculatedDisplayType = calculatedDisplayType
                self.dataSourceColumnReference = dataSourceColumnReference
                self.formula = formula
                self.name = name
                self.sourceColumnOffset = sourceColumnOffset
                self.summarizeFunction = summarizeFunction
            }
            public enum CodingKeys: String, CodingKey {
                case calculatedDisplayType
                case dataSourceColumnReference
                case formula
                case name
                case sourceColumnOffset
                case summarizeFunction
            }
        }
        /// The style of a point on the chart.
        ///
        /// - Remark: Generated from `#/components/schemas/PointStyle`.
        public struct PointStyle: Codable, Hashable, Sendable {
            /// The point shape. If empty or unspecified, a default shape is used.
            ///
            /// - Remark: Generated from `#/components/schemas/PointStyle/shape`.
            @frozen public enum ShapePayload: String, Codable, Hashable, Sendable, CaseIterable {
                case pointShapeUnspecified = "POINT_SHAPE_UNSPECIFIED"
                case circle = "CIRCLE"
                case diamond = "DIAMOND"
                case hexagon = "HEXAGON"
                case pentagon = "PENTAGON"
                case square = "SQUARE"
                case star = "STAR"
                case triangle = "TRIANGLE"
                case xMark = "X_MARK"
            }
            /// The point shape. If empty or unspecified, a default shape is used.
            ///
            /// - Remark: Generated from `#/components/schemas/PointStyle/shape`.
            public var shape: Components.Schemas.PointStyle.ShapePayload?
            /// The point size. If empty, a default size is used.
            ///
            /// - Remark: Generated from `#/components/schemas/PointStyle/size`.
            public var size: Swift.Double?
            /// Creates a new `PointStyle`.
            ///
            /// - Parameters:
            ///   - shape: The point shape. If empty or unspecified, a default shape is used.
            ///   - size: The point size. If empty, a default size is used.
            public init(
                shape: Components.Schemas.PointStyle.ShapePayload? = nil,
                size: Swift.Double? = nil
            ) {
                self.shape = shape
                self.size = size
            }
            public enum CodingKeys: String, CodingKey {
                case shape
                case size
            }
        }
        /// A protected range.
        ///
        /// - Remark: Generated from `#/components/schemas/ProtectedRange`.
        public struct ProtectedRange: Codable, Hashable, Sendable {
            /// The description of this protected range.
            ///
            /// - Remark: Generated from `#/components/schemas/ProtectedRange/description`.
            public var description: Swift.String?
            /// - Remark: Generated from `#/components/schemas/ProtectedRange/editors`.
            public var editors: Components.Schemas.Editors?
            /// The named range this protected range is backed by, if any. When writing, only one of range or named_range_id may be set.
            ///
            /// - Remark: Generated from `#/components/schemas/ProtectedRange/namedRangeId`.
            public var namedRangeId: Swift.String?
            /// The ID of the protected range. This field is read-only.
            ///
            /// - Remark: Generated from `#/components/schemas/ProtectedRange/protectedRangeId`.
            public var protectedRangeId: Swift.Int32?
            /// - Remark: Generated from `#/components/schemas/ProtectedRange/range`.
            public var range: Components.Schemas.GridRange?
            /// True if the user who requested this protected range can edit the protected area. This field is read-only.
            ///
            /// - Remark: Generated from `#/components/schemas/ProtectedRange/requestingUserCanEdit`.
            public var requestingUserCanEdit: Swift.Bool?
            /// The list of unprotected ranges within a protected sheet. Unprotected ranges are only supported on protected sheets.
            ///
            /// - Remark: Generated from `#/components/schemas/ProtectedRange/unprotectedRanges`.
            public var unprotectedRanges: [Components.Schemas.GridRange]?
            /// True if this protected range will show a warning when editing. Warning-based protection means that every user can edit data in the protected range, except editing will prompt a warning asking the user to confirm the edit. When writing: if this field is true, then editors are ignored. Additionally, if this field is changed from true to false and the `editors` field is not set (nor included in the field mask), then the editors will be set to all the editors in the document.
            ///
            /// - Remark: Generated from `#/components/schemas/ProtectedRange/warningOnly`.
            public var warningOnly: Swift.Bool?
            /// Creates a new `ProtectedRange`.
            ///
            /// - Parameters:
            ///   - description: The description of this protected range.
            ///   - editors:
            ///   - namedRangeId: The named range this protected range is backed by, if any. When writing, only one of range or named_range_id may be set.
            ///   - protectedRangeId: The ID of the protected range. This field is read-only.
            ///   - range:
            ///   - requestingUserCanEdit: True if the user who requested this protected range can edit the protected area. This field is read-only.
            ///   - unprotectedRanges: The list of unprotected ranges within a protected sheet. Unprotected ranges are only supported on protected sheets.
            ///   - warningOnly: True if this protected range will show a warning when editing. Warning-based protection means that every user can edit data in the protected range, except editing will prompt a warning asking the user to confirm the edit. When writing: if this field is true, then editors are ignored. Additionally, if this field is changed from true to false and the `editors` field is not set (nor included in the field mask), then the editors will be set to all the editors in the document.
            public init(
                description: Swift.String? = nil,
                editors: Components.Schemas.Editors? = nil,
                namedRangeId: Swift.String? = nil,
                protectedRangeId: Swift.Int32? = nil,
                range: Components.Schemas.GridRange? = nil,
                requestingUserCanEdit: Swift.Bool? = nil,
                unprotectedRanges: [Components.Schemas.GridRange]? = nil,
                warningOnly: Swift.Bool? = nil
            ) {
                self.description = description
                self.editors = editors
                self.namedRangeId = namedRangeId
                self.protectedRangeId = protectedRangeId
                self.range = range
                self.requestingUserCanEdit = requestingUserCanEdit
                self.unprotectedRanges = unprotectedRanges
                self.warningOnly = warningOnly
            }
            public enum CodingKeys: String, CodingKey {
                case description
                case editors
                case namedRangeId
                case protectedRangeId
                case range
                case requestingUserCanEdit
                case unprotectedRanges
                case warningOnly
            }
        }
        /// Randomizes the order of the rows in a range.
        ///
        /// - Remark: Generated from `#/components/schemas/RandomizeRangeRequest`.
        public struct RandomizeRangeRequest: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/RandomizeRangeRequest/range`.
            public var range: Components.Schemas.GridRange?
            /// Creates a new `RandomizeRangeRequest`.
            ///
            /// - Parameters:
            ///   - range:
            public init(range: Components.Schemas.GridRange? = nil) {
                self.range = range
            }
            public enum CodingKeys: String, CodingKey {
                case range
            }
        }
        /// The execution status of refreshing one data source object.
        ///
        /// - Remark: Generated from `#/components/schemas/RefreshDataSourceObjectExecutionStatus`.
        public struct RefreshDataSourceObjectExecutionStatus: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/RefreshDataSourceObjectExecutionStatus/dataExecutionStatus`.
            public var dataExecutionStatus: Components.Schemas.DataExecutionStatus?
            /// - Remark: Generated from `#/components/schemas/RefreshDataSourceObjectExecutionStatus/reference`.
            public var reference: Components.Schemas.DataSourceObjectReference?
            /// Creates a new `RefreshDataSourceObjectExecutionStatus`.
            ///
            /// - Parameters:
            ///   - dataExecutionStatus:
            ///   - reference:
            public init(
                dataExecutionStatus: Components.Schemas.DataExecutionStatus? = nil,
                reference: Components.Schemas.DataSourceObjectReference? = nil
            ) {
                self.dataExecutionStatus = dataExecutionStatus
                self.reference = reference
            }
            public enum CodingKeys: String, CodingKey {
                case dataExecutionStatus
                case reference
            }
        }
        /// Refreshes one or multiple data source objects in the spreadsheet by the specified references. The request requires an additional `bigquery.readonly` OAuth scope. If there are multiple refresh requests referencing the same data source objects in one batch, only the last refresh request is processed, and all those requests will have the same response accordingly.
        ///
        /// - Remark: Generated from `#/components/schemas/RefreshDataSourceRequest`.
        public struct RefreshDataSourceRequest: Codable, Hashable, Sendable {
            /// Reference to a DataSource. If specified, refreshes all associated data source objects for the data source.
            ///
            /// - Remark: Generated from `#/components/schemas/RefreshDataSourceRequest/dataSourceId`.
            public var dataSourceId: Swift.String?
            /// Refreshes the data source objects regardless of the current state. If not set and a referenced data source object was in error state, the refresh will fail immediately.
            ///
            /// - Remark: Generated from `#/components/schemas/RefreshDataSourceRequest/force`.
            public var force: Swift.Bool?
            /// Refreshes all existing data source objects in the spreadsheet.
            ///
            /// - Remark: Generated from `#/components/schemas/RefreshDataSourceRequest/isAll`.
            public var isAll: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/RefreshDataSourceRequest/references`.
            public var references: Components.Schemas.DataSourceObjectReferences?
            /// Creates a new `RefreshDataSourceRequest`.
            ///
            /// - Parameters:
            ///   - dataSourceId: Reference to a DataSource. If specified, refreshes all associated data source objects for the data source.
            ///   - force: Refreshes the data source objects regardless of the current state. If not set and a referenced data source object was in error state, the refresh will fail immediately.
            ///   - isAll: Refreshes all existing data source objects in the spreadsheet.
            ///   - references:
            public init(
                dataSourceId: Swift.String? = nil,
                force: Swift.Bool? = nil,
                isAll: Swift.Bool? = nil,
                references: Components.Schemas.DataSourceObjectReferences? = nil
            ) {
                self.dataSourceId = dataSourceId
                self.force = force
                self.isAll = isAll
                self.references = references
            }
            public enum CodingKeys: String, CodingKey {
                case dataSourceId
                case force
                case isAll
                case references
            }
        }
        /// The response from refreshing one or multiple data source objects.
        ///
        /// - Remark: Generated from `#/components/schemas/RefreshDataSourceResponse`.
        public struct RefreshDataSourceResponse: Codable, Hashable, Sendable {
            /// All the refresh status for the data source object references specified in the request. If is_all is specified, the field contains only those in failure status.
            ///
            /// - Remark: Generated from `#/components/schemas/RefreshDataSourceResponse/statuses`.
            public var statuses: [Components.Schemas.RefreshDataSourceObjectExecutionStatus]?
            /// Creates a new `RefreshDataSourceResponse`.
            ///
            /// - Parameters:
            ///   - statuses: All the refresh status for the data source object references specified in the request. If is_all is specified, the field contains only those in failure status.
            public init(statuses: [Components.Schemas.RefreshDataSourceObjectExecutionStatus]? = nil) {
                self.statuses = statuses
            }
            public enum CodingKeys: String, CodingKey {
                case statuses
            }
        }
        /// Updates all cells in the range to the values in the given Cell object. Only the fields listed in the fields field are updated; others are unchanged. If writing a cell with a formula, the formula's ranges will automatically increment for each field in the range. For example, if writing a cell with formula `=A1` into range B2:C4, B2 would be `=A1`, B3 would be `=A2`, B4 would be `=A3`, C2 would be `=B1`, C3 would be `=B2`, C4 would be `=B3`. To keep the formula's ranges static, use the `$` indicator. For example, use the formula `=$A$1` to prevent both the row and the column from incrementing.
        ///
        /// - Remark: Generated from `#/components/schemas/RepeatCellRequest`.
        public struct RepeatCellRequest: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/RepeatCellRequest/cell`.
            public var cell: Components.Schemas.CellData?
            /// The fields that should be updated. At least one field must be specified. The root `cell` is implied and should not be specified. A single `"*"` can be used as short-hand for listing every field.
            ///
            /// - Remark: Generated from `#/components/schemas/RepeatCellRequest/fields`.
            public var fields: Swift.String?
            /// - Remark: Generated from `#/components/schemas/RepeatCellRequest/range`.
            public var range: Components.Schemas.GridRange?
            /// Creates a new `RepeatCellRequest`.
            ///
            /// - Parameters:
            ///   - cell:
            ///   - fields: The fields that should be updated. At least one field must be specified. The root `cell` is implied and should not be specified. A single `"*"` can be used as short-hand for listing every field.
            ///   - range:
            public init(
                cell: Components.Schemas.CellData? = nil,
                fields: Swift.String? = nil,
                range: Components.Schemas.GridRange? = nil
            ) {
                self.cell = cell
                self.fields = fields
                self.range = range
            }
            public enum CodingKeys: String, CodingKey {
                case cell
                case fields
                case range
            }
        }
        /// A single kind of update to apply to a spreadsheet.
        ///
        /// - Remark: Generated from `#/components/schemas/Request`.
        public struct Request: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/Request/addBanding`.
            public var addBanding: Components.Schemas.AddBandingRequest?
            /// - Remark: Generated from `#/components/schemas/Request/addChart`.
            public var addChart: Components.Schemas.AddChartRequest?
            /// - Remark: Generated from `#/components/schemas/Request/addConditionalFormatRule`.
            public var addConditionalFormatRule: Components.Schemas.AddConditionalFormatRuleRequest?
            /// - Remark: Generated from `#/components/schemas/Request/addDataSource`.
            public var addDataSource: Components.Schemas.AddDataSourceRequest?
            /// - Remark: Generated from `#/components/schemas/Request/addDimensionGroup`.
            public var addDimensionGroup: Components.Schemas.AddDimensionGroupRequest?
            /// - Remark: Generated from `#/components/schemas/Request/addFilterView`.
            public var addFilterView: Components.Schemas.AddFilterViewRequest?
            /// - Remark: Generated from `#/components/schemas/Request/addNamedRange`.
            public var addNamedRange: Components.Schemas.AddNamedRangeRequest?
            /// - Remark: Generated from `#/components/schemas/Request/addProtectedRange`.
            public var addProtectedRange: Components.Schemas.AddProtectedRangeRequest?
            /// - Remark: Generated from `#/components/schemas/Request/addSheet`.
            public var addSheet: Components.Schemas.AddSheetRequest?
            /// - Remark: Generated from `#/components/schemas/Request/addSlicer`.
            public var addSlicer: Components.Schemas.AddSlicerRequest?
            /// - Remark: Generated from `#/components/schemas/Request/appendCells`.
            public var appendCells: Components.Schemas.AppendCellsRequest?
            /// - Remark: Generated from `#/components/schemas/Request/appendDimension`.
            public var appendDimension: Components.Schemas.AppendDimensionRequest?
            /// - Remark: Generated from `#/components/schemas/Request/autoFill`.
            public var autoFill: Components.Schemas.AutoFillRequest?
            /// - Remark: Generated from `#/components/schemas/Request/autoResizeDimensions`.
            public var autoResizeDimensions: Components.Schemas.AutoResizeDimensionsRequest?
            /// - Remark: Generated from `#/components/schemas/Request/clearBasicFilter`.
            public var clearBasicFilter: Components.Schemas.ClearBasicFilterRequest?
            /// - Remark: Generated from `#/components/schemas/Request/copyPaste`.
            public var copyPaste: Components.Schemas.CopyPasteRequest?
            /// - Remark: Generated from `#/components/schemas/Request/createDeveloperMetadata`.
            public var createDeveloperMetadata: Components.Schemas.CreateDeveloperMetadataRequest?
            /// - Remark: Generated from `#/components/schemas/Request/cutPaste`.
            public var cutPaste: Components.Schemas.CutPasteRequest?
            /// - Remark: Generated from `#/components/schemas/Request/deleteBanding`.
            public var deleteBanding: Components.Schemas.DeleteBandingRequest?
            /// - Remark: Generated from `#/components/schemas/Request/deleteConditionalFormatRule`.
            public var deleteConditionalFormatRule: Components.Schemas.DeleteConditionalFormatRuleRequest?
            /// - Remark: Generated from `#/components/schemas/Request/deleteDataSource`.
            public var deleteDataSource: Components.Schemas.DeleteDataSourceRequest?
            /// - Remark: Generated from `#/components/schemas/Request/deleteDeveloperMetadata`.
            public var deleteDeveloperMetadata: Components.Schemas.DeleteDeveloperMetadataRequest?
            /// - Remark: Generated from `#/components/schemas/Request/deleteDimension`.
            public var deleteDimension: Components.Schemas.DeleteDimensionRequest?
            /// - Remark: Generated from `#/components/schemas/Request/deleteDimensionGroup`.
            public var deleteDimensionGroup: Components.Schemas.DeleteDimensionGroupRequest?
            /// - Remark: Generated from `#/components/schemas/Request/deleteDuplicates`.
            public var deleteDuplicates: Components.Schemas.DeleteDuplicatesRequest?
            /// - Remark: Generated from `#/components/schemas/Request/deleteEmbeddedObject`.
            public var deleteEmbeddedObject: Components.Schemas.DeleteEmbeddedObjectRequest?
            /// - Remark: Generated from `#/components/schemas/Request/deleteFilterView`.
            public var deleteFilterView: Components.Schemas.DeleteFilterViewRequest?
            /// - Remark: Generated from `#/components/schemas/Request/deleteNamedRange`.
            public var deleteNamedRange: Components.Schemas.DeleteNamedRangeRequest?
            /// - Remark: Generated from `#/components/schemas/Request/deleteProtectedRange`.
            public var deleteProtectedRange: Components.Schemas.DeleteProtectedRangeRequest?
            /// - Remark: Generated from `#/components/schemas/Request/deleteRange`.
            public var deleteRange: Components.Schemas.DeleteRangeRequest?
            /// - Remark: Generated from `#/components/schemas/Request/deleteSheet`.
            public var deleteSheet: Components.Schemas.DeleteSheetRequest?
            /// - Remark: Generated from `#/components/schemas/Request/duplicateFilterView`.
            public var duplicateFilterView: Components.Schemas.DuplicateFilterViewRequest?
            /// - Remark: Generated from `#/components/schemas/Request/duplicateSheet`.
            public var duplicateSheet: Components.Schemas.DuplicateSheetRequest?
            /// - Remark: Generated from `#/components/schemas/Request/findReplace`.
            public var findReplace: Components.Schemas.FindReplaceRequest?
            /// - Remark: Generated from `#/components/schemas/Request/insertDimension`.
            public var insertDimension: Components.Schemas.InsertDimensionRequest?
            /// - Remark: Generated from `#/components/schemas/Request/insertRange`.
            public var insertRange: Components.Schemas.InsertRangeRequest?
            /// - Remark: Generated from `#/components/schemas/Request/mergeCells`.
            public var mergeCells: Components.Schemas.MergeCellsRequest?
            /// - Remark: Generated from `#/components/schemas/Request/moveDimension`.
            public var moveDimension: Components.Schemas.MoveDimensionRequest?
            /// - Remark: Generated from `#/components/schemas/Request/pasteData`.
            public var pasteData: Components.Schemas.PasteDataRequest?
            /// - Remark: Generated from `#/components/schemas/Request/randomizeRange`.
            public var randomizeRange: Components.Schemas.RandomizeRangeRequest?
            /// - Remark: Generated from `#/components/schemas/Request/refreshDataSource`.
            public var refreshDataSource: Components.Schemas.RefreshDataSourceRequest?
            /// - Remark: Generated from `#/components/schemas/Request/repeatCell`.
            public var repeatCell: Components.Schemas.RepeatCellRequest?
            /// - Remark: Generated from `#/components/schemas/Request/setBasicFilter`.
            public var setBasicFilter: Components.Schemas.SetBasicFilterRequest?
            /// - Remark: Generated from `#/components/schemas/Request/setDataValidation`.
            public var setDataValidation: Components.Schemas.SetDataValidationRequest?
            /// - Remark: Generated from `#/components/schemas/Request/sortRange`.
            public var sortRange: Components.Schemas.SortRangeRequest?
            /// - Remark: Generated from `#/components/schemas/Request/textToColumns`.
            public var textToColumns: Components.Schemas.TextToColumnsRequest?
            /// - Remark: Generated from `#/components/schemas/Request/trimWhitespace`.
            public var trimWhitespace: Components.Schemas.TrimWhitespaceRequest?
            /// - Remark: Generated from `#/components/schemas/Request/unmergeCells`.
            public var unmergeCells: Components.Schemas.UnmergeCellsRequest?
            /// - Remark: Generated from `#/components/schemas/Request/updateBanding`.
            public var updateBanding: Components.Schemas.UpdateBandingRequest?
            /// - Remark: Generated from `#/components/schemas/Request/updateBorders`.
            public var updateBorders: Components.Schemas.UpdateBordersRequest?
            /// - Remark: Generated from `#/components/schemas/Request/updateCells`.
            public var updateCells: Components.Schemas.UpdateCellsRequest?
            /// - Remark: Generated from `#/components/schemas/Request/updateChartSpec`.
            public var updateChartSpec: Components.Schemas.UpdateChartSpecRequest?
            /// - Remark: Generated from `#/components/schemas/Request/updateConditionalFormatRule`.
            public var updateConditionalFormatRule: Components.Schemas.UpdateConditionalFormatRuleRequest?
            /// - Remark: Generated from `#/components/schemas/Request/updateDataSource`.
            public var updateDataSource: Components.Schemas.UpdateDataSourceRequest?
            /// - Remark: Generated from `#/components/schemas/Request/updateDeveloperMetadata`.
            public var updateDeveloperMetadata: Components.Schemas.UpdateDeveloperMetadataRequest?
            /// - Remark: Generated from `#/components/schemas/Request/updateDimensionGroup`.
            public var updateDimensionGroup: Components.Schemas.UpdateDimensionGroupRequest?
            /// - Remark: Generated from `#/components/schemas/Request/updateDimensionProperties`.
            public var updateDimensionProperties: Components.Schemas.UpdateDimensionPropertiesRequest?
            /// - Remark: Generated from `#/components/schemas/Request/updateEmbeddedObjectBorder`.
            public var updateEmbeddedObjectBorder: Components.Schemas.UpdateEmbeddedObjectBorderRequest?
            /// - Remark: Generated from `#/components/schemas/Request/updateEmbeddedObjectPosition`.
            public var updateEmbeddedObjectPosition: Components.Schemas.UpdateEmbeddedObjectPositionRequest?
            /// - Remark: Generated from `#/components/schemas/Request/updateFilterView`.
            public var updateFilterView: Components.Schemas.UpdateFilterViewRequest?
            /// - Remark: Generated from `#/components/schemas/Request/updateNamedRange`.
            public var updateNamedRange: Components.Schemas.UpdateNamedRangeRequest?
            /// - Remark: Generated from `#/components/schemas/Request/updateProtectedRange`.
            public var updateProtectedRange: Components.Schemas.UpdateProtectedRangeRequest?
            /// - Remark: Generated from `#/components/schemas/Request/updateSheetProperties`.
            public var updateSheetProperties: Components.Schemas.UpdateSheetPropertiesRequest?
            /// - Remark: Generated from `#/components/schemas/Request/updateSlicerSpec`.
            public var updateSlicerSpec: Components.Schemas.UpdateSlicerSpecRequest?
            /// - Remark: Generated from `#/components/schemas/Request/updateSpreadsheetProperties`.
            public var updateSpreadsheetProperties: Components.Schemas.UpdateSpreadsheetPropertiesRequest?
            /// Creates a new `Request`.
            ///
            /// - Parameters:
            ///   - addBanding:
            ///   - addChart:
            ///   - addConditionalFormatRule:
            ///   - addDataSource:
            ///   - addDimensionGroup:
            ///   - addFilterView:
            ///   - addNamedRange:
            ///   - addProtectedRange:
            ///   - addSheet:
            ///   - addSlicer:
            ///   - appendCells:
            ///   - appendDimension:
            ///   - autoFill:
            ///   - autoResizeDimensions:
            ///   - clearBasicFilter:
            ///   - copyPaste:
            ///   - createDeveloperMetadata:
            ///   - cutPaste:
            ///   - deleteBanding:
            ///   - deleteConditionalFormatRule:
            ///   - deleteDataSource:
            ///   - deleteDeveloperMetadata:
            ///   - deleteDimension:
            ///   - deleteDimensionGroup:
            ///   - deleteDuplicates:
            ///   - deleteEmbeddedObject:
            ///   - deleteFilterView:
            ///   - deleteNamedRange:
            ///   - deleteProtectedRange:
            ///   - deleteRange:
            ///   - deleteSheet:
            ///   - duplicateFilterView:
            ///   - duplicateSheet:
            ///   - findReplace:
            ///   - insertDimension:
            ///   - insertRange:
            ///   - mergeCells:
            ///   - moveDimension:
            ///   - pasteData:
            ///   - randomizeRange:
            ///   - refreshDataSource:
            ///   - repeatCell:
            ///   - setBasicFilter:
            ///   - setDataValidation:
            ///   - sortRange:
            ///   - textToColumns:
            ///   - trimWhitespace:
            ///   - unmergeCells:
            ///   - updateBanding:
            ///   - updateBorders:
            ///   - updateCells:
            ///   - updateChartSpec:
            ///   - updateConditionalFormatRule:
            ///   - updateDataSource:
            ///   - updateDeveloperMetadata:
            ///   - updateDimensionGroup:
            ///   - updateDimensionProperties:
            ///   - updateEmbeddedObjectBorder:
            ///   - updateEmbeddedObjectPosition:
            ///   - updateFilterView:
            ///   - updateNamedRange:
            ///   - updateProtectedRange:
            ///   - updateSheetProperties:
            ///   - updateSlicerSpec:
            ///   - updateSpreadsheetProperties:
            public init(
                addBanding: Components.Schemas.AddBandingRequest? = nil,
                addChart: Components.Schemas.AddChartRequest? = nil,
                addConditionalFormatRule: Components.Schemas.AddConditionalFormatRuleRequest? = nil,
                addDataSource: Components.Schemas.AddDataSourceRequest? = nil,
                addDimensionGroup: Components.Schemas.AddDimensionGroupRequest? = nil,
                addFilterView: Components.Schemas.AddFilterViewRequest? = nil,
                addNamedRange: Components.Schemas.AddNamedRangeRequest? = nil,
                addProtectedRange: Components.Schemas.AddProtectedRangeRequest? = nil,
                addSheet: Components.Schemas.AddSheetRequest? = nil,
                addSlicer: Components.Schemas.AddSlicerRequest? = nil,
                appendCells: Components.Schemas.AppendCellsRequest? = nil,
                appendDimension: Components.Schemas.AppendDimensionRequest? = nil,
                autoFill: Components.Schemas.AutoFillRequest? = nil,
                autoResizeDimensions: Components.Schemas.AutoResizeDimensionsRequest? = nil,
                clearBasicFilter: Components.Schemas.ClearBasicFilterRequest? = nil,
                copyPaste: Components.Schemas.CopyPasteRequest? = nil,
                createDeveloperMetadata: Components.Schemas.CreateDeveloperMetadataRequest? = nil,
                cutPaste: Components.Schemas.CutPasteRequest? = nil,
                deleteBanding: Components.Schemas.DeleteBandingRequest? = nil,
                deleteConditionalFormatRule: Components.Schemas.DeleteConditionalFormatRuleRequest? = nil,
                deleteDataSource: Components.Schemas.DeleteDataSourceRequest? = nil,
                deleteDeveloperMetadata: Components.Schemas.DeleteDeveloperMetadataRequest? = nil,
                deleteDimension: Components.Schemas.DeleteDimensionRequest? = nil,
                deleteDimensionGroup: Components.Schemas.DeleteDimensionGroupRequest? = nil,
                deleteDuplicates: Components.Schemas.DeleteDuplicatesRequest? = nil,
                deleteEmbeddedObject: Components.Schemas.DeleteEmbeddedObjectRequest? = nil,
                deleteFilterView: Components.Schemas.DeleteFilterViewRequest? = nil,
                deleteNamedRange: Components.Schemas.DeleteNamedRangeRequest? = nil,
                deleteProtectedRange: Components.Schemas.DeleteProtectedRangeRequest? = nil,
                deleteRange: Components.Schemas.DeleteRangeRequest? = nil,
                deleteSheet: Components.Schemas.DeleteSheetRequest? = nil,
                duplicateFilterView: Components.Schemas.DuplicateFilterViewRequest? = nil,
                duplicateSheet: Components.Schemas.DuplicateSheetRequest? = nil,
                findReplace: Components.Schemas.FindReplaceRequest? = nil,
                insertDimension: Components.Schemas.InsertDimensionRequest? = nil,
                insertRange: Components.Schemas.InsertRangeRequest? = nil,
                mergeCells: Components.Schemas.MergeCellsRequest? = nil,
                moveDimension: Components.Schemas.MoveDimensionRequest? = nil,
                pasteData: Components.Schemas.PasteDataRequest? = nil,
                randomizeRange: Components.Schemas.RandomizeRangeRequest? = nil,
                refreshDataSource: Components.Schemas.RefreshDataSourceRequest? = nil,
                repeatCell: Components.Schemas.RepeatCellRequest? = nil,
                setBasicFilter: Components.Schemas.SetBasicFilterRequest? = nil,
                setDataValidation: Components.Schemas.SetDataValidationRequest? = nil,
                sortRange: Components.Schemas.SortRangeRequest? = nil,
                textToColumns: Components.Schemas.TextToColumnsRequest? = nil,
                trimWhitespace: Components.Schemas.TrimWhitespaceRequest? = nil,
                unmergeCells: Components.Schemas.UnmergeCellsRequest? = nil,
                updateBanding: Components.Schemas.UpdateBandingRequest? = nil,
                updateBorders: Components.Schemas.UpdateBordersRequest? = nil,
                updateCells: Components.Schemas.UpdateCellsRequest? = nil,
                updateChartSpec: Components.Schemas.UpdateChartSpecRequest? = nil,
                updateConditionalFormatRule: Components.Schemas.UpdateConditionalFormatRuleRequest? = nil,
                updateDataSource: Components.Schemas.UpdateDataSourceRequest? = nil,
                updateDeveloperMetadata: Components.Schemas.UpdateDeveloperMetadataRequest? = nil,
                updateDimensionGroup: Components.Schemas.UpdateDimensionGroupRequest? = nil,
                updateDimensionProperties: Components.Schemas.UpdateDimensionPropertiesRequest? = nil,
                updateEmbeddedObjectBorder: Components.Schemas.UpdateEmbeddedObjectBorderRequest? = nil,
                updateEmbeddedObjectPosition: Components.Schemas.UpdateEmbeddedObjectPositionRequest? = nil,
                updateFilterView: Components.Schemas.UpdateFilterViewRequest? = nil,
                updateNamedRange: Components.Schemas.UpdateNamedRangeRequest? = nil,
                updateProtectedRange: Components.Schemas.UpdateProtectedRangeRequest? = nil,
                updateSheetProperties: Components.Schemas.UpdateSheetPropertiesRequest? = nil,
                updateSlicerSpec: Components.Schemas.UpdateSlicerSpecRequest? = nil,
                updateSpreadsheetProperties: Components.Schemas.UpdateSpreadsheetPropertiesRequest? = nil
            ) {
                self.addBanding = addBanding
                self.addChart = addChart
                self.addConditionalFormatRule = addConditionalFormatRule
                self.addDataSource = addDataSource
                self.addDimensionGroup = addDimensionGroup
                self.addFilterView = addFilterView
                self.addNamedRange = addNamedRange
                self.addProtectedRange = addProtectedRange
                self.addSheet = addSheet
                self.addSlicer = addSlicer
                self.appendCells = appendCells
                self.appendDimension = appendDimension
                self.autoFill = autoFill
                self.autoResizeDimensions = autoResizeDimensions
                self.clearBasicFilter = clearBasicFilter
                self.copyPaste = copyPaste
                self.createDeveloperMetadata = createDeveloperMetadata
                self.cutPaste = cutPaste
                self.deleteBanding = deleteBanding
                self.deleteConditionalFormatRule = deleteConditionalFormatRule
                self.deleteDataSource = deleteDataSource
                self.deleteDeveloperMetadata = deleteDeveloperMetadata
                self.deleteDimension = deleteDimension
                self.deleteDimensionGroup = deleteDimensionGroup
                self.deleteDuplicates = deleteDuplicates
                self.deleteEmbeddedObject = deleteEmbeddedObject
                self.deleteFilterView = deleteFilterView
                self.deleteNamedRange = deleteNamedRange
                self.deleteProtectedRange = deleteProtectedRange
                self.deleteRange = deleteRange
                self.deleteSheet = deleteSheet
                self.duplicateFilterView = duplicateFilterView
                self.duplicateSheet = duplicateSheet
                self.findReplace = findReplace
                self.insertDimension = insertDimension
                self.insertRange = insertRange
                self.mergeCells = mergeCells
                self.moveDimension = moveDimension
                self.pasteData = pasteData
                self.randomizeRange = randomizeRange
                self.refreshDataSource = refreshDataSource
                self.repeatCell = repeatCell
                self.setBasicFilter = setBasicFilter
                self.setDataValidation = setDataValidation
                self.sortRange = sortRange
                self.textToColumns = textToColumns
                self.trimWhitespace = trimWhitespace
                self.unmergeCells = unmergeCells
                self.updateBanding = updateBanding
                self.updateBorders = updateBorders
                self.updateCells = updateCells
                self.updateChartSpec = updateChartSpec
                self.updateConditionalFormatRule = updateConditionalFormatRule
                self.updateDataSource = updateDataSource
                self.updateDeveloperMetadata = updateDeveloperMetadata
                self.updateDimensionGroup = updateDimensionGroup
                self.updateDimensionProperties = updateDimensionProperties
                self.updateEmbeddedObjectBorder = updateEmbeddedObjectBorder
                self.updateEmbeddedObjectPosition = updateEmbeddedObjectPosition
                self.updateFilterView = updateFilterView
                self.updateNamedRange = updateNamedRange
                self.updateProtectedRange = updateProtectedRange
                self.updateSheetProperties = updateSheetProperties
                self.updateSlicerSpec = updateSlicerSpec
                self.updateSpreadsheetProperties = updateSpreadsheetProperties
            }
            public enum CodingKeys: String, CodingKey {
                case addBanding
                case addChart
                case addConditionalFormatRule
                case addDataSource
                case addDimensionGroup
                case addFilterView
                case addNamedRange
                case addProtectedRange
                case addSheet
                case addSlicer
                case appendCells
                case appendDimension
                case autoFill
                case autoResizeDimensions
                case clearBasicFilter
                case copyPaste
                case createDeveloperMetadata
                case cutPaste
                case deleteBanding
                case deleteConditionalFormatRule
                case deleteDataSource
                case deleteDeveloperMetadata
                case deleteDimension
                case deleteDimensionGroup
                case deleteDuplicates
                case deleteEmbeddedObject
                case deleteFilterView
                case deleteNamedRange
                case deleteProtectedRange
                case deleteRange
                case deleteSheet
                case duplicateFilterView
                case duplicateSheet
                case findReplace
                case insertDimension
                case insertRange
                case mergeCells
                case moveDimension
                case pasteData
                case randomizeRange
                case refreshDataSource
                case repeatCell
                case setBasicFilter
                case setDataValidation
                case sortRange
                case textToColumns
                case trimWhitespace
                case unmergeCells
                case updateBanding
                case updateBorders
                case updateCells
                case updateChartSpec
                case updateConditionalFormatRule
                case updateDataSource
                case updateDeveloperMetadata
                case updateDimensionGroup
                case updateDimensionProperties
                case updateEmbeddedObjectBorder
                case updateEmbeddedObjectPosition
                case updateFilterView
                case updateNamedRange
                case updateProtectedRange
                case updateSheetProperties
                case updateSlicerSpec
                case updateSpreadsheetProperties
            }
        }
        /// A single response from an update.
        ///
        /// - Remark: Generated from `#/components/schemas/Response`.
        public struct Response: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/Response/addBanding`.
            public var addBanding: Components.Schemas.AddBandingResponse?
            /// - Remark: Generated from `#/components/schemas/Response/addChart`.
            public var addChart: Components.Schemas.AddChartResponse?
            /// - Remark: Generated from `#/components/schemas/Response/addDataSource`.
            public var addDataSource: Components.Schemas.AddDataSourceResponse?
            /// - Remark: Generated from `#/components/schemas/Response/addDimensionGroup`.
            public var addDimensionGroup: Components.Schemas.AddDimensionGroupResponse?
            /// - Remark: Generated from `#/components/schemas/Response/addFilterView`.
            public var addFilterView: Components.Schemas.AddFilterViewResponse?
            /// - Remark: Generated from `#/components/schemas/Response/addNamedRange`.
            public var addNamedRange: Components.Schemas.AddNamedRangeResponse?
            /// - Remark: Generated from `#/components/schemas/Response/addProtectedRange`.
            public var addProtectedRange: Components.Schemas.AddProtectedRangeResponse?
            /// - Remark: Generated from `#/components/schemas/Response/addSheet`.
            public var addSheet: Components.Schemas.AddSheetResponse?
            /// - Remark: Generated from `#/components/schemas/Response/addSlicer`.
            public var addSlicer: Components.Schemas.AddSlicerResponse?
            /// - Remark: Generated from `#/components/schemas/Response/createDeveloperMetadata`.
            public var createDeveloperMetadata: Components.Schemas.CreateDeveloperMetadataResponse?
            /// - Remark: Generated from `#/components/schemas/Response/deleteConditionalFormatRule`.
            public var deleteConditionalFormatRule: Components.Schemas.DeleteConditionalFormatRuleResponse?
            /// - Remark: Generated from `#/components/schemas/Response/deleteDeveloperMetadata`.
            public var deleteDeveloperMetadata: Components.Schemas.DeleteDeveloperMetadataResponse?
            /// - Remark: Generated from `#/components/schemas/Response/deleteDimensionGroup`.
            public var deleteDimensionGroup: Components.Schemas.DeleteDimensionGroupResponse?
            /// - Remark: Generated from `#/components/schemas/Response/deleteDuplicates`.
            public var deleteDuplicates: Components.Schemas.DeleteDuplicatesResponse?
            /// - Remark: Generated from `#/components/schemas/Response/duplicateFilterView`.
            public var duplicateFilterView: Components.Schemas.DuplicateFilterViewResponse?
            /// - Remark: Generated from `#/components/schemas/Response/duplicateSheet`.
            public var duplicateSheet: Components.Schemas.DuplicateSheetResponse?
            /// - Remark: Generated from `#/components/schemas/Response/findReplace`.
            public var findReplace: Components.Schemas.FindReplaceResponse?
            /// - Remark: Generated from `#/components/schemas/Response/refreshDataSource`.
            public var refreshDataSource: Components.Schemas.RefreshDataSourceResponse?
            /// - Remark: Generated from `#/components/schemas/Response/trimWhitespace`.
            public var trimWhitespace: Components.Schemas.TrimWhitespaceResponse?
            /// - Remark: Generated from `#/components/schemas/Response/updateConditionalFormatRule`.
            public var updateConditionalFormatRule: Components.Schemas.UpdateConditionalFormatRuleResponse?
            /// - Remark: Generated from `#/components/schemas/Response/updateDataSource`.
            public var updateDataSource: Components.Schemas.UpdateDataSourceResponse?
            /// - Remark: Generated from `#/components/schemas/Response/updateDeveloperMetadata`.
            public var updateDeveloperMetadata: Components.Schemas.UpdateDeveloperMetadataResponse?
            /// - Remark: Generated from `#/components/schemas/Response/updateEmbeddedObjectPosition`.
            public var updateEmbeddedObjectPosition: Components.Schemas.UpdateEmbeddedObjectPositionResponse?
            /// Creates a new `Response`.
            ///
            /// - Parameters:
            ///   - addBanding:
            ///   - addChart:
            ///   - addDataSource:
            ///   - addDimensionGroup:
            ///   - addFilterView:
            ///   - addNamedRange:
            ///   - addProtectedRange:
            ///   - addSheet:
            ///   - addSlicer:
            ///   - createDeveloperMetadata:
            ///   - deleteConditionalFormatRule:
            ///   - deleteDeveloperMetadata:
            ///   - deleteDimensionGroup:
            ///   - deleteDuplicates:
            ///   - duplicateFilterView:
            ///   - duplicateSheet:
            ///   - findReplace:
            ///   - refreshDataSource:
            ///   - trimWhitespace:
            ///   - updateConditionalFormatRule:
            ///   - updateDataSource:
            ///   - updateDeveloperMetadata:
            ///   - updateEmbeddedObjectPosition:
            public init(
                addBanding: Components.Schemas.AddBandingResponse? = nil,
                addChart: Components.Schemas.AddChartResponse? = nil,
                addDataSource: Components.Schemas.AddDataSourceResponse? = nil,
                addDimensionGroup: Components.Schemas.AddDimensionGroupResponse? = nil,
                addFilterView: Components.Schemas.AddFilterViewResponse? = nil,
                addNamedRange: Components.Schemas.AddNamedRangeResponse? = nil,
                addProtectedRange: Components.Schemas.AddProtectedRangeResponse? = nil,
                addSheet: Components.Schemas.AddSheetResponse? = nil,
                addSlicer: Components.Schemas.AddSlicerResponse? = nil,
                createDeveloperMetadata: Components.Schemas.CreateDeveloperMetadataResponse? = nil,
                deleteConditionalFormatRule: Components.Schemas.DeleteConditionalFormatRuleResponse? = nil,
                deleteDeveloperMetadata: Components.Schemas.DeleteDeveloperMetadataResponse? = nil,
                deleteDimensionGroup: Components.Schemas.DeleteDimensionGroupResponse? = nil,
                deleteDuplicates: Components.Schemas.DeleteDuplicatesResponse? = nil,
                duplicateFilterView: Components.Schemas.DuplicateFilterViewResponse? = nil,
                duplicateSheet: Components.Schemas.DuplicateSheetResponse? = nil,
                findReplace: Components.Schemas.FindReplaceResponse? = nil,
                refreshDataSource: Components.Schemas.RefreshDataSourceResponse? = nil,
                trimWhitespace: Components.Schemas.TrimWhitespaceResponse? = nil,
                updateConditionalFormatRule: Components.Schemas.UpdateConditionalFormatRuleResponse? = nil,
                updateDataSource: Components.Schemas.UpdateDataSourceResponse? = nil,
                updateDeveloperMetadata: Components.Schemas.UpdateDeveloperMetadataResponse? = nil,
                updateEmbeddedObjectPosition: Components.Schemas.UpdateEmbeddedObjectPositionResponse? = nil
            ) {
                self.addBanding = addBanding
                self.addChart = addChart
                self.addDataSource = addDataSource
                self.addDimensionGroup = addDimensionGroup
                self.addFilterView = addFilterView
                self.addNamedRange = addNamedRange
                self.addProtectedRange = addProtectedRange
                self.addSheet = addSheet
                self.addSlicer = addSlicer
                self.createDeveloperMetadata = createDeveloperMetadata
                self.deleteConditionalFormatRule = deleteConditionalFormatRule
                self.deleteDeveloperMetadata = deleteDeveloperMetadata
                self.deleteDimensionGroup = deleteDimensionGroup
                self.deleteDuplicates = deleteDuplicates
                self.duplicateFilterView = duplicateFilterView
                self.duplicateSheet = duplicateSheet
                self.findReplace = findReplace
                self.refreshDataSource = refreshDataSource
                self.trimWhitespace = trimWhitespace
                self.updateConditionalFormatRule = updateConditionalFormatRule
                self.updateDataSource = updateDataSource
                self.updateDeveloperMetadata = updateDeveloperMetadata
                self.updateEmbeddedObjectPosition = updateEmbeddedObjectPosition
            }
            public enum CodingKeys: String, CodingKey {
                case addBanding
                case addChart
                case addDataSource
                case addDimensionGroup
                case addFilterView
                case addNamedRange
                case addProtectedRange
                case addSheet
                case addSlicer
                case createDeveloperMetadata
                case deleteConditionalFormatRule
                case deleteDeveloperMetadata
                case deleteDimensionGroup
                case deleteDuplicates
                case duplicateFilterView
                case duplicateSheet
                case findReplace
                case refreshDataSource
                case trimWhitespace
                case updateConditionalFormatRule
                case updateDataSource
                case updateDeveloperMetadata
                case updateEmbeddedObjectPosition
            }
        }
        /// Data about each cell in a row.
        ///
        /// - Remark: Generated from `#/components/schemas/RowData`.
        public struct RowData: Codable, Hashable, Sendable {
            /// The values in the row, one per column.
            ///
            /// - Remark: Generated from `#/components/schemas/RowData/values`.
            public var values: [Components.Schemas.CellData]?
            /// Creates a new `RowData`.
            ///
            /// - Parameters:
            ///   - values: The values in the row, one per column.
            public init(values: [Components.Schemas.CellData]? = nil) {
                self.values = values
            }
            public enum CodingKeys: String, CodingKey {
                case values
            }
        }
        /// A scorecard chart. Scorecard charts are used to highlight key performance indicators, known as KPIs, on the spreadsheet. A scorecard chart can represent things like total sales, average cost, or a top selling item. You can specify a single data value, or aggregate over a range of data. Percentage or absolute difference from a baseline value can be highlighted, like changes over time.
        ///
        /// - Remark: Generated from `#/components/schemas/ScorecardChartSpec`.
        public struct ScorecardChartSpec: Codable, Hashable, Sendable {
            /// The aggregation type for key and baseline chart data in scorecard chart. This field is not supported for data source charts. Use the ChartData.aggregateType field of the key_value_data or baseline_value_data instead for data source charts. This field is optional.
            ///
            /// - Remark: Generated from `#/components/schemas/ScorecardChartSpec/aggregateType`.
            @frozen public enum AggregateTypePayload: String, Codable, Hashable, Sendable, CaseIterable {
                case chartAggregateTypeUnspecified = "CHART_AGGREGATE_TYPE_UNSPECIFIED"
                case average = "AVERAGE"
                case count = "COUNT"
                case max = "MAX"
                case median = "MEDIAN"
                case min = "MIN"
                case sum = "SUM"
            }
            /// The aggregation type for key and baseline chart data in scorecard chart. This field is not supported for data source charts. Use the ChartData.aggregateType field of the key_value_data or baseline_value_data instead for data source charts. This field is optional.
            ///
            /// - Remark: Generated from `#/components/schemas/ScorecardChartSpec/aggregateType`.
            public var aggregateType: Components.Schemas.ScorecardChartSpec.AggregateTypePayload?
            /// - Remark: Generated from `#/components/schemas/ScorecardChartSpec/baselineValueData`.
            public var baselineValueData: Components.Schemas.ChartData?
            /// - Remark: Generated from `#/components/schemas/ScorecardChartSpec/baselineValueFormat`.
            public var baselineValueFormat: Components.Schemas.BaselineValueFormat?
            /// - Remark: Generated from `#/components/schemas/ScorecardChartSpec/customFormatOptions`.
            public var customFormatOptions: Components.Schemas.ChartCustomNumberFormatOptions?
            /// - Remark: Generated from `#/components/schemas/ScorecardChartSpec/keyValueData`.
            public var keyValueData: Components.Schemas.ChartData?
            /// - Remark: Generated from `#/components/schemas/ScorecardChartSpec/keyValueFormat`.
            public var keyValueFormat: Components.Schemas.KeyValueFormat?
            /// The number format source used in the scorecard chart. This field is optional.
            ///
            /// - Remark: Generated from `#/components/schemas/ScorecardChartSpec/numberFormatSource`.
            @frozen public enum NumberFormatSourcePayload: String, Codable, Hashable, Sendable, CaseIterable {
                case chartNumberFormatSourceUndefined = "CHART_NUMBER_FORMAT_SOURCE_UNDEFINED"
                case fromData = "FROM_DATA"
                case custom = "CUSTOM"
            }
            /// The number format source used in the scorecard chart. This field is optional.
            ///
            /// - Remark: Generated from `#/components/schemas/ScorecardChartSpec/numberFormatSource`.
            public var numberFormatSource: Components.Schemas.ScorecardChartSpec.NumberFormatSourcePayload?
            /// Value to scale scorecard key and baseline value. For example, a factor of 10 can be used to divide all values in the chart by 10. This field is optional.
            ///
            /// - Remark: Generated from `#/components/schemas/ScorecardChartSpec/scaleFactor`.
            public var scaleFactor: Swift.Double?
            /// Creates a new `ScorecardChartSpec`.
            ///
            /// - Parameters:
            ///   - aggregateType: The aggregation type for key and baseline chart data in scorecard chart. This field is not supported for data source charts. Use the ChartData.aggregateType field of the key_value_data or baseline_value_data instead for data source charts. This field is optional.
            ///   - baselineValueData:
            ///   - baselineValueFormat:
            ///   - customFormatOptions:
            ///   - keyValueData:
            ///   - keyValueFormat:
            ///   - numberFormatSource: The number format source used in the scorecard chart. This field is optional.
            ///   - scaleFactor: Value to scale scorecard key and baseline value. For example, a factor of 10 can be used to divide all values in the chart by 10. This field is optional.
            public init(
                aggregateType: Components.Schemas.ScorecardChartSpec.AggregateTypePayload? = nil,
                baselineValueData: Components.Schemas.ChartData? = nil,
                baselineValueFormat: Components.Schemas.BaselineValueFormat? = nil,
                customFormatOptions: Components.Schemas.ChartCustomNumberFormatOptions? = nil,
                keyValueData: Components.Schemas.ChartData? = nil,
                keyValueFormat: Components.Schemas.KeyValueFormat? = nil,
                numberFormatSource: Components.Schemas.ScorecardChartSpec.NumberFormatSourcePayload? = nil,
                scaleFactor: Swift.Double? = nil
            ) {
                self.aggregateType = aggregateType
                self.baselineValueData = baselineValueData
                self.baselineValueFormat = baselineValueFormat
                self.customFormatOptions = customFormatOptions
                self.keyValueData = keyValueData
                self.keyValueFormat = keyValueFormat
                self.numberFormatSource = numberFormatSource
                self.scaleFactor = scaleFactor
            }
            public enum CodingKeys: String, CodingKey {
                case aggregateType
                case baselineValueData
                case baselineValueFormat
                case customFormatOptions
                case keyValueData
                case keyValueFormat
                case numberFormatSource
                case scaleFactor
            }
        }
        /// A request to retrieve all developer metadata matching the set of specified criteria.
        ///
        /// - Remark: Generated from `#/components/schemas/SearchDeveloperMetadataRequest`.
        public struct SearchDeveloperMetadataRequest: Codable, Hashable, Sendable {
            /// The data filters describing the criteria used to determine which DeveloperMetadata entries to return. DeveloperMetadata matching any of the specified filters are included in the response.
            ///
            /// - Remark: Generated from `#/components/schemas/SearchDeveloperMetadataRequest/dataFilters`.
            public var dataFilters: [Components.Schemas.DataFilter]?
            /// Creates a new `SearchDeveloperMetadataRequest`.
            ///
            /// - Parameters:
            ///   - dataFilters: The data filters describing the criteria used to determine which DeveloperMetadata entries to return. DeveloperMetadata matching any of the specified filters are included in the response.
            public init(dataFilters: [Components.Schemas.DataFilter]? = nil) {
                self.dataFilters = dataFilters
            }
            public enum CodingKeys: String, CodingKey {
                case dataFilters
            }
        }
        /// A reply to a developer metadata search request.
        ///
        /// - Remark: Generated from `#/components/schemas/SearchDeveloperMetadataResponse`.
        public struct SearchDeveloperMetadataResponse: Codable, Hashable, Sendable {
            /// The metadata matching the criteria of the search request.
            ///
            /// - Remark: Generated from `#/components/schemas/SearchDeveloperMetadataResponse/matchedDeveloperMetadata`.
            public var matchedDeveloperMetadata: [Components.Schemas.MatchedDeveloperMetadata]?
            /// Creates a new `SearchDeveloperMetadataResponse`.
            ///
            /// - Parameters:
            ///   - matchedDeveloperMetadata: The metadata matching the criteria of the search request.
            public init(matchedDeveloperMetadata: [Components.Schemas.MatchedDeveloperMetadata]? = nil) {
                self.matchedDeveloperMetadata = matchedDeveloperMetadata
            }
            public enum CodingKeys: String, CodingKey {
                case matchedDeveloperMetadata
            }
        }
        /// Sets the basic filter associated with a sheet.
        ///
        /// - Remark: Generated from `#/components/schemas/SetBasicFilterRequest`.
        public struct SetBasicFilterRequest: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/SetBasicFilterRequest/filter`.
            public var filter: Components.Schemas.BasicFilter?
            /// Creates a new `SetBasicFilterRequest`.
            ///
            /// - Parameters:
            ///   - filter:
            public init(filter: Components.Schemas.BasicFilter? = nil) {
                self.filter = filter
            }
            public enum CodingKeys: String, CodingKey {
                case filter
            }
        }
        /// Sets a data validation rule to every cell in the range. To clear validation in a range, call this with no rule specified.
        ///
        /// - Remark: Generated from `#/components/schemas/SetDataValidationRequest`.
        public struct SetDataValidationRequest: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/SetDataValidationRequest/range`.
            public var range: Components.Schemas.GridRange?
            /// - Remark: Generated from `#/components/schemas/SetDataValidationRequest/rule`.
            public var rule: Components.Schemas.DataValidationRule?
            /// Creates a new `SetDataValidationRequest`.
            ///
            /// - Parameters:
            ///   - range:
            ///   - rule:
            public init(
                range: Components.Schemas.GridRange? = nil,
                rule: Components.Schemas.DataValidationRule? = nil
            ) {
                self.range = range
                self.rule = rule
            }
            public enum CodingKeys: String, CodingKey {
                case range
                case rule
            }
        }
        /// A sheet in a spreadsheet.
        ///
        /// - Remark: Generated from `#/components/schemas/Sheet`.
        public struct Sheet: Codable, Hashable, Sendable {
            /// The banded (alternating colors) ranges on this sheet.
            ///
            /// - Remark: Generated from `#/components/schemas/Sheet/bandedRanges`.
            public var bandedRanges: [Components.Schemas.BandedRange]?
            /// - Remark: Generated from `#/components/schemas/Sheet/basicFilter`.
            public var basicFilter: Components.Schemas.BasicFilter?
            /// The specifications of every chart on this sheet.
            ///
            /// - Remark: Generated from `#/components/schemas/Sheet/charts`.
            public var charts: [Components.Schemas.EmbeddedChart]?
            /// All column groups on this sheet, ordered by increasing range start index, then by group depth.
            ///
            /// - Remark: Generated from `#/components/schemas/Sheet/columnGroups`.
            public var columnGroups: [Components.Schemas.DimensionGroup]?
            /// The conditional format rules in this sheet.
            ///
            /// - Remark: Generated from `#/components/schemas/Sheet/conditionalFormats`.
            public var conditionalFormats: [Components.Schemas.ConditionalFormatRule]?
            /// Data in the grid, if this is a grid sheet. The number of GridData objects returned is dependent on the number of ranges requested on this sheet. For example, if this is representing `Sheet1`, and the spreadsheet was requested with ranges `Sheet1!A1:C10` and `Sheet1!D15:E20`, then the first GridData will have a startRow/startColumn of `0`, while the second one will have `startRow 14` (zero-based row 15), and `startColumn 3` (zero-based column D). For a DATA_SOURCE sheet, you can not request a specific range, the GridData contains all the values.
            ///
            /// - Remark: Generated from `#/components/schemas/Sheet/data`.
            public var data: [Components.Schemas.GridData]?
            /// The developer metadata associated with a sheet.
            ///
            /// - Remark: Generated from `#/components/schemas/Sheet/developerMetadata`.
            public var developerMetadata: [Components.Schemas.DeveloperMetadata]?
            /// The filter views in this sheet.
            ///
            /// - Remark: Generated from `#/components/schemas/Sheet/filterViews`.
            public var filterViews: [Components.Schemas.FilterView]?
            /// The ranges that are merged together.
            ///
            /// - Remark: Generated from `#/components/schemas/Sheet/merges`.
            public var merges: [Components.Schemas.GridRange]?
            /// - Remark: Generated from `#/components/schemas/Sheet/properties`.
            public var properties: Components.Schemas.SheetProperties?
            /// The protected ranges in this sheet.
            ///
            /// - Remark: Generated from `#/components/schemas/Sheet/protectedRanges`.
            public var protectedRanges: [Components.Schemas.ProtectedRange]?
            /// All row groups on this sheet, ordered by increasing range start index, then by group depth.
            ///
            /// - Remark: Generated from `#/components/schemas/Sheet/rowGroups`.
            public var rowGroups: [Components.Schemas.DimensionGroup]?
            /// The slicers on this sheet.
            ///
            /// - Remark: Generated from `#/components/schemas/Sheet/slicers`.
            public var slicers: [Components.Schemas.Slicer]?
            /// Creates a new `Sheet`.
            ///
            /// - Parameters:
            ///   - bandedRanges: The banded (alternating colors) ranges on this sheet.
            ///   - basicFilter:
            ///   - charts: The specifications of every chart on this sheet.
            ///   - columnGroups: All column groups on this sheet, ordered by increasing range start index, then by group depth.
            ///   - conditionalFormats: The conditional format rules in this sheet.
            ///   - data: Data in the grid, if this is a grid sheet. The number of GridData objects returned is dependent on the number of ranges requested on this sheet. For example, if this is representing `Sheet1`, and the spreadsheet was requested with ranges `Sheet1!A1:C10` and `Sheet1!D15:E20`, then the first GridData will have a startRow/startColumn of `0`, while the second one will have `startRow 14` (zero-based row 15), and `startColumn 3` (zero-based column D). For a DATA_SOURCE sheet, you can not request a specific range, the GridData contains all the values.
            ///   - developerMetadata: The developer metadata associated with a sheet.
            ///   - filterViews: The filter views in this sheet.
            ///   - merges: The ranges that are merged together.
            ///   - properties:
            ///   - protectedRanges: The protected ranges in this sheet.
            ///   - rowGroups: All row groups on this sheet, ordered by increasing range start index, then by group depth.
            ///   - slicers: The slicers on this sheet.
            public init(
                bandedRanges: [Components.Schemas.BandedRange]? = nil,
                basicFilter: Components.Schemas.BasicFilter? = nil,
                charts: [Components.Schemas.EmbeddedChart]? = nil,
                columnGroups: [Components.Schemas.DimensionGroup]? = nil,
                conditionalFormats: [Components.Schemas.ConditionalFormatRule]? = nil,
                data: [Components.Schemas.GridData]? = nil,
                developerMetadata: [Components.Schemas.DeveloperMetadata]? = nil,
                filterViews: [Components.Schemas.FilterView]? = nil,
                merges: [Components.Schemas.GridRange]? = nil,
                properties: Components.Schemas.SheetProperties? = nil,
                protectedRanges: [Components.Schemas.ProtectedRange]? = nil,
                rowGroups: [Components.Schemas.DimensionGroup]? = nil,
                slicers: [Components.Schemas.Slicer]? = nil
            ) {
                self.bandedRanges = bandedRanges
                self.basicFilter = basicFilter
                self.charts = charts
                self.columnGroups = columnGroups
                self.conditionalFormats = conditionalFormats
                self.data = data
                self.developerMetadata = developerMetadata
                self.filterViews = filterViews
                self.merges = merges
                self.properties = properties
                self.protectedRanges = protectedRanges
                self.rowGroups = rowGroups
                self.slicers = slicers
            }
            public enum CodingKeys: String, CodingKey {
                case bandedRanges
                case basicFilter
                case charts
                case columnGroups
                case conditionalFormats
                case data
                case developerMetadata
                case filterViews
                case merges
                case properties
                case protectedRanges
                case rowGroups
                case slicers
            }
        }
        /// Properties of a sheet.
        ///
        /// - Remark: Generated from `#/components/schemas/SheetProperties`.
        public struct SheetProperties: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/SheetProperties/dataSourceSheetProperties`.
            public var dataSourceSheetProperties: Components.Schemas.DataSourceSheetProperties?
            /// - Remark: Generated from `#/components/schemas/SheetProperties/gridProperties`.
            public var gridProperties: Components.Schemas.GridProperties?
            /// True if the sheet is hidden in the UI, false if it's visible.
            ///
            /// - Remark: Generated from `#/components/schemas/SheetProperties/hidden`.
            public var hidden: Swift.Bool?
            /// The index of the sheet within the spreadsheet. When adding or updating sheet properties, if this field is excluded then the sheet is added or moved to the end of the sheet list. When updating sheet indices or inserting sheets, movement is considered in "before the move" indexes. For example, if there were three sheets (S1, S2, S3) in order to move S1 ahead of S2 the index would have to be set to 2. A sheet index update request is ignored if the requested index is identical to the sheets current index or if the requested new index is equal to the current sheet index + 1.
            ///
            /// - Remark: Generated from `#/components/schemas/SheetProperties/index`.
            public var index: Swift.Int32?
            /// True if the sheet is an RTL sheet instead of an LTR sheet.
            ///
            /// - Remark: Generated from `#/components/schemas/SheetProperties/rightToLeft`.
            public var rightToLeft: Swift.Bool?
            /// The ID of the sheet. Must be non-negative. This field cannot be changed once set.
            ///
            /// - Remark: Generated from `#/components/schemas/SheetProperties/sheetId`.
            public var sheetId: Swift.Int32?
            /// The type of sheet. Defaults to GRID. This field cannot be changed once set.
            ///
            /// - Remark: Generated from `#/components/schemas/SheetProperties/sheetType`.
            @frozen public enum SheetTypePayload: String, Codable, Hashable, Sendable, CaseIterable {
                case sheetTypeUnspecified = "SHEET_TYPE_UNSPECIFIED"
                case grid = "GRID"
                case object = "OBJECT"
                case dataSource = "DATA_SOURCE"
            }
            /// The type of sheet. Defaults to GRID. This field cannot be changed once set.
            ///
            /// - Remark: Generated from `#/components/schemas/SheetProperties/sheetType`.
            public var sheetType: Components.Schemas.SheetProperties.SheetTypePayload?
            /// - Remark: Generated from `#/components/schemas/SheetProperties/tabColor`.
            public var tabColor: Components.Schemas.Color?
            /// - Remark: Generated from `#/components/schemas/SheetProperties/tabColorStyle`.
            public var tabColorStyle: Components.Schemas.ColorStyle?
            /// The name of the sheet.
            ///
            /// - Remark: Generated from `#/components/schemas/SheetProperties/title`.
            public var title: Swift.String?
            /// Creates a new `SheetProperties`.
            ///
            /// - Parameters:
            ///   - dataSourceSheetProperties:
            ///   - gridProperties:
            ///   - hidden: True if the sheet is hidden in the UI, false if it's visible.
            ///   - index: The index of the sheet within the spreadsheet. When adding or updating sheet properties, if this field is excluded then the sheet is added or moved to the end of the sheet list. When updating sheet indices or inserting sheets, movement is considered in "before the move" indexes. For example, if there were three sheets (S1, S2, S3) in order to move S1 ahead of S2 the index would have to be set to 2. A sheet index update request is ignored if the requested index is identical to the sheets current index or if the requested new index is equal to the current sheet index + 1.
            ///   - rightToLeft: True if the sheet is an RTL sheet instead of an LTR sheet.
            ///   - sheetId: The ID of the sheet. Must be non-negative. This field cannot be changed once set.
            ///   - sheetType: The type of sheet. Defaults to GRID. This field cannot be changed once set.
            ///   - tabColor:
            ///   - tabColorStyle:
            ///   - title: The name of the sheet.
            public init(
                dataSourceSheetProperties: Components.Schemas.DataSourceSheetProperties? = nil,
                gridProperties: Components.Schemas.GridProperties? = nil,
                hidden: Swift.Bool? = nil,
                index: Swift.Int32? = nil,
                rightToLeft: Swift.Bool? = nil,
                sheetId: Swift.Int32? = nil,
                sheetType: Components.Schemas.SheetProperties.SheetTypePayload? = nil,
                tabColor: Components.Schemas.Color? = nil,
                tabColorStyle: Components.Schemas.ColorStyle? = nil,
                title: Swift.String? = nil
            ) {
                self.dataSourceSheetProperties = dataSourceSheetProperties
                self.gridProperties = gridProperties
                self.hidden = hidden
                self.index = index
                self.rightToLeft = rightToLeft
                self.sheetId = sheetId
                self.sheetType = sheetType
                self.tabColor = tabColor
                self.tabColorStyle = tabColorStyle
                self.title = title
            }
            public enum CodingKeys: String, CodingKey {
                case dataSourceSheetProperties
                case gridProperties
                case hidden
                case index
                case rightToLeft
                case sheetId
                case sheetType
                case tabColor
                case tabColorStyle
                case title
            }
        }
        /// A slicer in a sheet.
        ///
        /// - Remark: Generated from `#/components/schemas/Slicer`.
        public struct Slicer: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/Slicer/position`.
            public var position: Components.Schemas.EmbeddedObjectPosition?
            /// The ID of the slicer.
            ///
            /// - Remark: Generated from `#/components/schemas/Slicer/slicerId`.
            public var slicerId: Swift.Int32?
            /// - Remark: Generated from `#/components/schemas/Slicer/spec`.
            public var spec: Components.Schemas.SlicerSpec?
            /// Creates a new `Slicer`.
            ///
            /// - Parameters:
            ///   - position:
            ///   - slicerId: The ID of the slicer.
            ///   - spec:
            public init(
                position: Components.Schemas.EmbeddedObjectPosition? = nil,
                slicerId: Swift.Int32? = nil,
                spec: Components.Schemas.SlicerSpec? = nil
            ) {
                self.position = position
                self.slicerId = slicerId
                self.spec = spec
            }
            public enum CodingKeys: String, CodingKey {
                case position
                case slicerId
                case spec
            }
        }
        /// The specifications of a slicer.
        ///
        /// - Remark: Generated from `#/components/schemas/SlicerSpec`.
        public struct SlicerSpec: Codable, Hashable, Sendable {
            /// True if the filter should apply to pivot tables. If not set, default to `True`.
            ///
            /// - Remark: Generated from `#/components/schemas/SlicerSpec/applyToPivotTables`.
            public var applyToPivotTables: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/SlicerSpec/backgroundColor`.
            public var backgroundColor: Components.Schemas.Color?
            /// - Remark: Generated from `#/components/schemas/SlicerSpec/backgroundColorStyle`.
            public var backgroundColorStyle: Components.Schemas.ColorStyle?
            /// The zero-based column index in the data table on which the filter is applied to.
            ///
            /// - Remark: Generated from `#/components/schemas/SlicerSpec/columnIndex`.
            public var columnIndex: Swift.Int32?
            /// - Remark: Generated from `#/components/schemas/SlicerSpec/dataRange`.
            public var dataRange: Components.Schemas.GridRange?
            /// - Remark: Generated from `#/components/schemas/SlicerSpec/filterCriteria`.
            public var filterCriteria: Components.Schemas.FilterCriteria?
            /// The horizontal alignment of title in the slicer. If unspecified, defaults to `LEFT`
            ///
            /// - Remark: Generated from `#/components/schemas/SlicerSpec/horizontalAlignment`.
            @frozen public enum HorizontalAlignmentPayload: String, Codable, Hashable, Sendable, CaseIterable {
                case horizontalAlignUnspecified = "HORIZONTAL_ALIGN_UNSPECIFIED"
                case left = "LEFT"
                case center = "CENTER"
                case right = "RIGHT"
            }
            /// The horizontal alignment of title in the slicer. If unspecified, defaults to `LEFT`
            ///
            /// - Remark: Generated from `#/components/schemas/SlicerSpec/horizontalAlignment`.
            public var horizontalAlignment: Components.Schemas.SlicerSpec.HorizontalAlignmentPayload?
            /// - Remark: Generated from `#/components/schemas/SlicerSpec/textFormat`.
            public var textFormat: Components.Schemas.TextFormat?
            /// The title of the slicer.
            ///
            /// - Remark: Generated from `#/components/schemas/SlicerSpec/title`.
            public var title: Swift.String?
            /// Creates a new `SlicerSpec`.
            ///
            /// - Parameters:
            ///   - applyToPivotTables: True if the filter should apply to pivot tables. If not set, default to `True`.
            ///   - backgroundColor:
            ///   - backgroundColorStyle:
            ///   - columnIndex: The zero-based column index in the data table on which the filter is applied to.
            ///   - dataRange:
            ///   - filterCriteria:
            ///   - horizontalAlignment: The horizontal alignment of title in the slicer. If unspecified, defaults to `LEFT`
            ///   - textFormat:
            ///   - title: The title of the slicer.
            public init(
                applyToPivotTables: Swift.Bool? = nil,
                backgroundColor: Components.Schemas.Color? = nil,
                backgroundColorStyle: Components.Schemas.ColorStyle? = nil,
                columnIndex: Swift.Int32? = nil,
                dataRange: Components.Schemas.GridRange? = nil,
                filterCriteria: Components.Schemas.FilterCriteria? = nil,
                horizontalAlignment: Components.Schemas.SlicerSpec.HorizontalAlignmentPayload? = nil,
                textFormat: Components.Schemas.TextFormat? = nil,
                title: Swift.String? = nil
            ) {
                self.applyToPivotTables = applyToPivotTables
                self.backgroundColor = backgroundColor
                self.backgroundColorStyle = backgroundColorStyle
                self.columnIndex = columnIndex
                self.dataRange = dataRange
                self.filterCriteria = filterCriteria
                self.horizontalAlignment = horizontalAlignment
                self.textFormat = textFormat
                self.title = title
            }
            public enum CodingKeys: String, CodingKey {
                case applyToPivotTables
                case backgroundColor
                case backgroundColorStyle
                case columnIndex
                case dataRange
                case filterCriteria
                case horizontalAlignment
                case textFormat
                case title
            }
        }
        /// Sorts data in rows based on a sort order per column.
        ///
        /// - Remark: Generated from `#/components/schemas/SortRangeRequest`.
        public struct SortRangeRequest: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/SortRangeRequest/range`.
            public var range: Components.Schemas.GridRange?
            /// The sort order per column. Later specifications are used when values are equal in the earlier specifications.
            ///
            /// - Remark: Generated from `#/components/schemas/SortRangeRequest/sortSpecs`.
            public var sortSpecs: [Components.Schemas.SortSpec]?
            /// Creates a new `SortRangeRequest`.
            ///
            /// - Parameters:
            ///   - range:
            ///   - sortSpecs: The sort order per column. Later specifications are used when values are equal in the earlier specifications.
            public init(
                range: Components.Schemas.GridRange? = nil,
                sortSpecs: [Components.Schemas.SortSpec]? = nil
            ) {
                self.range = range
                self.sortSpecs = sortSpecs
            }
            public enum CodingKeys: String, CodingKey {
                case range
                case sortSpecs
            }
        }
        /// A sort order associated with a specific column or row.
        ///
        /// - Remark: Generated from `#/components/schemas/SortSpec`.
        public struct SortSpec: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/SortSpec/backgroundColor`.
            public var backgroundColor: Components.Schemas.Color?
            /// - Remark: Generated from `#/components/schemas/SortSpec/backgroundColorStyle`.
            public var backgroundColorStyle: Components.Schemas.ColorStyle?
            /// - Remark: Generated from `#/components/schemas/SortSpec/dataSourceColumnReference`.
            public var dataSourceColumnReference: Components.Schemas.DataSourceColumnReference?
            /// The dimension the sort should be applied to.
            ///
            /// - Remark: Generated from `#/components/schemas/SortSpec/dimensionIndex`.
            public var dimensionIndex: Swift.Int32?
            /// - Remark: Generated from `#/components/schemas/SortSpec/foregroundColor`.
            public var foregroundColor: Components.Schemas.Color?
            /// - Remark: Generated from `#/components/schemas/SortSpec/foregroundColorStyle`.
            public var foregroundColorStyle: Components.Schemas.ColorStyle?
            /// The order data should be sorted.
            ///
            /// - Remark: Generated from `#/components/schemas/SortSpec/sortOrder`.
            @frozen public enum SortOrderPayload: String, Codable, Hashable, Sendable, CaseIterable {
                case sortOrderUnspecified = "SORT_ORDER_UNSPECIFIED"
                case ascending = "ASCENDING"
                case descending = "DESCENDING"
            }
            /// The order data should be sorted.
            ///
            /// - Remark: Generated from `#/components/schemas/SortSpec/sortOrder`.
            public var sortOrder: Components.Schemas.SortSpec.SortOrderPayload?
            /// Creates a new `SortSpec`.
            ///
            /// - Parameters:
            ///   - backgroundColor:
            ///   - backgroundColorStyle:
            ///   - dataSourceColumnReference:
            ///   - dimensionIndex: The dimension the sort should be applied to.
            ///   - foregroundColor:
            ///   - foregroundColorStyle:
            ///   - sortOrder: The order data should be sorted.
            public init(
                backgroundColor: Components.Schemas.Color? = nil,
                backgroundColorStyle: Components.Schemas.ColorStyle? = nil,
                dataSourceColumnReference: Components.Schemas.DataSourceColumnReference? = nil,
                dimensionIndex: Swift.Int32? = nil,
                foregroundColor: Components.Schemas.Color? = nil,
                foregroundColorStyle: Components.Schemas.ColorStyle? = nil,
                sortOrder: Components.Schemas.SortSpec.SortOrderPayload? = nil
            ) {
                self.backgroundColor = backgroundColor
                self.backgroundColorStyle = backgroundColorStyle
                self.dataSourceColumnReference = dataSourceColumnReference
                self.dimensionIndex = dimensionIndex
                self.foregroundColor = foregroundColor
                self.foregroundColorStyle = foregroundColorStyle
                self.sortOrder = sortOrder
            }
            public enum CodingKeys: String, CodingKey {
                case backgroundColor
                case backgroundColorStyle
                case dataSourceColumnReference
                case dimensionIndex
                case foregroundColor
                case foregroundColorStyle
                case sortOrder
            }
        }
        /// A combination of a source range and how to extend that source.
        ///
        /// - Remark: Generated from `#/components/schemas/SourceAndDestination`.
        public struct SourceAndDestination: Codable, Hashable, Sendable {
            /// The dimension that data should be filled into.
            ///
            /// - Remark: Generated from `#/components/schemas/SourceAndDestination/dimension`.
            @frozen public enum DimensionPayload: String, Codable, Hashable, Sendable, CaseIterable {
                case dimensionUnspecified = "DIMENSION_UNSPECIFIED"
                case rows = "ROWS"
                case columns = "COLUMNS"
            }
            /// The dimension that data should be filled into.
            ///
            /// - Remark: Generated from `#/components/schemas/SourceAndDestination/dimension`.
            public var dimension: Components.Schemas.SourceAndDestination.DimensionPayload?
            /// The number of rows or columns that data should be filled into. Positive numbers expand beyond the last row or last column of the source. Negative numbers expand before the first row or first column of the source.
            ///
            /// - Remark: Generated from `#/components/schemas/SourceAndDestination/fillLength`.
            public var fillLength: Swift.Int32?
            /// - Remark: Generated from `#/components/schemas/SourceAndDestination/source`.
            public var source: Components.Schemas.GridRange?
            /// Creates a new `SourceAndDestination`.
            ///
            /// - Parameters:
            ///   - dimension: The dimension that data should be filled into.
            ///   - fillLength: The number of rows or columns that data should be filled into. Positive numbers expand beyond the last row or last column of the source. Negative numbers expand before the first row or first column of the source.
            ///   - source:
            public init(
                dimension: Components.Schemas.SourceAndDestination.DimensionPayload? = nil,
                fillLength: Swift.Int32? = nil,
                source: Components.Schemas.GridRange? = nil
            ) {
                self.dimension = dimension
                self.fillLength = fillLength
                self.source = source
            }
            public enum CodingKeys: String, CodingKey {
                case dimension
                case fillLength
                case source
            }
        }
        /// Resource that represents a spreadsheet.
        ///
        /// - Remark: Generated from `#/components/schemas/Spreadsheet`.
        public struct Spreadsheet: Codable, Hashable, Sendable {
            /// Output only. A list of data source refresh schedules.
            ///
            /// - Remark: Generated from `#/components/schemas/Spreadsheet/dataSourceSchedules`.
            public var dataSourceSchedules: [Components.Schemas.DataSourceRefreshSchedule]?
            /// A list of external data sources connected with the spreadsheet.
            ///
            /// - Remark: Generated from `#/components/schemas/Spreadsheet/dataSources`.
            public var dataSources: [Components.Schemas.DataSource]?
            /// The developer metadata associated with a spreadsheet.
            ///
            /// - Remark: Generated from `#/components/schemas/Spreadsheet/developerMetadata`.
            public var developerMetadata: [Components.Schemas.DeveloperMetadata]?
            /// The named ranges defined in a spreadsheet.
            ///
            /// - Remark: Generated from `#/components/schemas/Spreadsheet/namedRanges`.
            public var namedRanges: [Components.Schemas.NamedRange]?
            /// - Remark: Generated from `#/components/schemas/Spreadsheet/properties`.
            public var properties: Components.Schemas.SpreadsheetProperties?
            /// The sheets that are part of a spreadsheet.
            ///
            /// - Remark: Generated from `#/components/schemas/Spreadsheet/sheets`.
            public var sheets: [Components.Schemas.Sheet]?
            /// The ID of the spreadsheet. This field is read-only.
            ///
            /// - Remark: Generated from `#/components/schemas/Spreadsheet/spreadsheetId`.
            public var spreadsheetId: Swift.String?
            /// The url of the spreadsheet. This field is read-only.
            ///
            /// - Remark: Generated from `#/components/schemas/Spreadsheet/spreadsheetUrl`.
            public var spreadsheetUrl: Swift.String?
            /// Creates a new `Spreadsheet`.
            ///
            /// - Parameters:
            ///   - dataSourceSchedules: Output only. A list of data source refresh schedules.
            ///   - dataSources: A list of external data sources connected with the spreadsheet.
            ///   - developerMetadata: The developer metadata associated with a spreadsheet.
            ///   - namedRanges: The named ranges defined in a spreadsheet.
            ///   - properties:
            ///   - sheets: The sheets that are part of a spreadsheet.
            ///   - spreadsheetId: The ID of the spreadsheet. This field is read-only.
            ///   - spreadsheetUrl: The url of the spreadsheet. This field is read-only.
            public init(
                dataSourceSchedules: [Components.Schemas.DataSourceRefreshSchedule]? = nil,
                dataSources: [Components.Schemas.DataSource]? = nil,
                developerMetadata: [Components.Schemas.DeveloperMetadata]? = nil,
                namedRanges: [Components.Schemas.NamedRange]? = nil,
                properties: Components.Schemas.SpreadsheetProperties? = nil,
                sheets: [Components.Schemas.Sheet]? = nil,
                spreadsheetId: Swift.String? = nil,
                spreadsheetUrl: Swift.String? = nil
            ) {
                self.dataSourceSchedules = dataSourceSchedules
                self.dataSources = dataSources
                self.developerMetadata = developerMetadata
                self.namedRanges = namedRanges
                self.properties = properties
                self.sheets = sheets
                self.spreadsheetId = spreadsheetId
                self.spreadsheetUrl = spreadsheetUrl
            }
            public enum CodingKeys: String, CodingKey {
                case dataSourceSchedules
                case dataSources
                case developerMetadata
                case namedRanges
                case properties
                case sheets
                case spreadsheetId
                case spreadsheetUrl
            }
        }
        /// Properties of a spreadsheet.
        ///
        /// - Remark: Generated from `#/components/schemas/SpreadsheetProperties`.
        public struct SpreadsheetProperties: Codable, Hashable, Sendable {
            /// The amount of time to wait before volatile functions are recalculated.
            ///
            /// - Remark: Generated from `#/components/schemas/SpreadsheetProperties/autoRecalc`.
            @frozen public enum AutoRecalcPayload: String, Codable, Hashable, Sendable, CaseIterable {
                case recalculationIntervalUnspecified = "RECALCULATION_INTERVAL_UNSPECIFIED"
                case onChange = "ON_CHANGE"
                case minute = "MINUTE"
                case hour = "HOUR"
            }
            /// The amount of time to wait before volatile functions are recalculated.
            ///
            /// - Remark: Generated from `#/components/schemas/SpreadsheetProperties/autoRecalc`.
            public var autoRecalc: Components.Schemas.SpreadsheetProperties.AutoRecalcPayload?
            /// - Remark: Generated from `#/components/schemas/SpreadsheetProperties/defaultFormat`.
            public var defaultFormat: Components.Schemas.CellFormat?
            /// - Remark: Generated from `#/components/schemas/SpreadsheetProperties/iterativeCalculationSettings`.
            public var iterativeCalculationSettings: Components.Schemas.IterativeCalculationSettings?
            /// The locale of the spreadsheet in one of the following formats: * an ISO 639-1 language code such as `en` * an ISO 639-2 language code such as `fil`, if no 639-1 code exists * a combination of the ISO language code and country code, such as `en_US` Note: when updating this field, not all locales/languages are supported.
            ///
            /// - Remark: Generated from `#/components/schemas/SpreadsheetProperties/locale`.
            public var locale: Swift.String?
            /// - Remark: Generated from `#/components/schemas/SpreadsheetProperties/spreadsheetTheme`.
            public var spreadsheetTheme: Components.Schemas.SpreadsheetTheme?
            /// The time zone of the spreadsheet, in CLDR format such as `America/New_York`. If the time zone isn't recognized, this may be a custom time zone such as `GMT-07:00`.
            ///
            /// - Remark: Generated from `#/components/schemas/SpreadsheetProperties/timeZone`.
            public var timeZone: Swift.String?
            /// The title of the spreadsheet.
            ///
            /// - Remark: Generated from `#/components/schemas/SpreadsheetProperties/title`.
            public var title: Swift.String?
            /// Creates a new `SpreadsheetProperties`.
            ///
            /// - Parameters:
            ///   - autoRecalc: The amount of time to wait before volatile functions are recalculated.
            ///   - defaultFormat:
            ///   - iterativeCalculationSettings:
            ///   - locale: The locale of the spreadsheet in one of the following formats: * an ISO 639-1 language code such as `en` * an ISO 639-2 language code such as `fil`, if no 639-1 code exists * a combination of the ISO language code and country code, such as `en_US` Note: when updating this field, not all locales/languages are supported.
            ///   - spreadsheetTheme:
            ///   - timeZone: The time zone of the spreadsheet, in CLDR format such as `America/New_York`. If the time zone isn't recognized, this may be a custom time zone such as `GMT-07:00`.
            ///   - title: The title of the spreadsheet.
            public init(
                autoRecalc: Components.Schemas.SpreadsheetProperties.AutoRecalcPayload? = nil,
                defaultFormat: Components.Schemas.CellFormat? = nil,
                iterativeCalculationSettings: Components.Schemas.IterativeCalculationSettings? = nil,
                locale: Swift.String? = nil,
                spreadsheetTheme: Components.Schemas.SpreadsheetTheme? = nil,
                timeZone: Swift.String? = nil,
                title: Swift.String? = nil
            ) {
                self.autoRecalc = autoRecalc
                self.defaultFormat = defaultFormat
                self.iterativeCalculationSettings = iterativeCalculationSettings
                self.locale = locale
                self.spreadsheetTheme = spreadsheetTheme
                self.timeZone = timeZone
                self.title = title
            }
            public enum CodingKeys: String, CodingKey {
                case autoRecalc
                case defaultFormat
                case iterativeCalculationSettings
                case locale
                case spreadsheetTheme
                case timeZone
                case title
            }
        }
        /// Represents spreadsheet theme
        ///
        /// - Remark: Generated from `#/components/schemas/SpreadsheetTheme`.
        public struct SpreadsheetTheme: Codable, Hashable, Sendable {
            /// Name of the primary font family.
            ///
            /// - Remark: Generated from `#/components/schemas/SpreadsheetTheme/primaryFontFamily`.
            public var primaryFontFamily: Swift.String?
            /// The spreadsheet theme color pairs. To update you must provide all theme color pairs.
            ///
            /// - Remark: Generated from `#/components/schemas/SpreadsheetTheme/themeColors`.
            public var themeColors: [Components.Schemas.ThemeColorPair]?
            /// Creates a new `SpreadsheetTheme`.
            ///
            /// - Parameters:
            ///   - primaryFontFamily: Name of the primary font family.
            ///   - themeColors: The spreadsheet theme color pairs. To update you must provide all theme color pairs.
            public init(
                primaryFontFamily: Swift.String? = nil,
                themeColors: [Components.Schemas.ThemeColorPair]? = nil
            ) {
                self.primaryFontFamily = primaryFontFamily
                self.themeColors = themeColors
            }
            public enum CodingKeys: String, CodingKey {
                case primaryFontFamily
                case themeColors
            }
        }
        /// The format of a run of text in a cell. Absent values indicate that the field isn't specified.
        ///
        /// - Remark: Generated from `#/components/schemas/TextFormat`.
        public struct TextFormat: Codable, Hashable, Sendable {
            /// True if the text is bold.
            ///
            /// - Remark: Generated from `#/components/schemas/TextFormat/bold`.
            public var bold: Swift.Bool?
            /// The font family.
            ///
            /// - Remark: Generated from `#/components/schemas/TextFormat/fontFamily`.
            public var fontFamily: Swift.String?
            /// The size of the font.
            ///
            /// - Remark: Generated from `#/components/schemas/TextFormat/fontSize`.
            public var fontSize: Swift.Int32?
            /// - Remark: Generated from `#/components/schemas/TextFormat/foregroundColor`.
            public var foregroundColor: Components.Schemas.Color?
            /// - Remark: Generated from `#/components/schemas/TextFormat/foregroundColorStyle`.
            public var foregroundColorStyle: Components.Schemas.ColorStyle?
            /// True if the text is italicized.
            ///
            /// - Remark: Generated from `#/components/schemas/TextFormat/italic`.
            public var italic: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/TextFormat/link`.
            public var link: Components.Schemas.Link?
            /// True if the text has a strikethrough.
            ///
            /// - Remark: Generated from `#/components/schemas/TextFormat/strikethrough`.
            public var strikethrough: Swift.Bool?
            /// True if the text is underlined.
            ///
            /// - Remark: Generated from `#/components/schemas/TextFormat/underline`.
            public var underline: Swift.Bool?
            /// Creates a new `TextFormat`.
            ///
            /// - Parameters:
            ///   - bold: True if the text is bold.
            ///   - fontFamily: The font family.
            ///   - fontSize: The size of the font.
            ///   - foregroundColor:
            ///   - foregroundColorStyle:
            ///   - italic: True if the text is italicized.
            ///   - link:
            ///   - strikethrough: True if the text has a strikethrough.
            ///   - underline: True if the text is underlined.
            public init(
                bold: Swift.Bool? = nil,
                fontFamily: Swift.String? = nil,
                fontSize: Swift.Int32? = nil,
                foregroundColor: Components.Schemas.Color? = nil,
                foregroundColorStyle: Components.Schemas.ColorStyle? = nil,
                italic: Swift.Bool? = nil,
                link: Components.Schemas.Link? = nil,
                strikethrough: Swift.Bool? = nil,
                underline: Swift.Bool? = nil
            ) {
                self.bold = bold
                self.fontFamily = fontFamily
                self.fontSize = fontSize
                self.foregroundColor = foregroundColor
                self.foregroundColorStyle = foregroundColorStyle
                self.italic = italic
                self.link = link
                self.strikethrough = strikethrough
                self.underline = underline
            }
            public enum CodingKeys: String, CodingKey {
                case bold
                case fontFamily
                case fontSize
                case foregroundColor
                case foregroundColorStyle
                case italic
                case link
                case strikethrough
                case underline
            }
        }
        /// A run of a text format. The format of this run continues until the start index of the next run. When updating, all fields must be set.
        ///
        /// - Remark: Generated from `#/components/schemas/TextFormatRun`.
        public struct TextFormatRun: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/TextFormatRun/format`.
            public var format: Components.Schemas.TextFormat?
            /// The zero-based character index where this run starts, in UTF-16 code units.
            ///
            /// - Remark: Generated from `#/components/schemas/TextFormatRun/startIndex`.
            public var startIndex: Swift.Int32?
            /// Creates a new `TextFormatRun`.
            ///
            /// - Parameters:
            ///   - format:
            ///   - startIndex: The zero-based character index where this run starts, in UTF-16 code units.
            public init(
                format: Components.Schemas.TextFormat? = nil,
                startIndex: Swift.Int32? = nil
            ) {
                self.format = format
                self.startIndex = startIndex
            }
            public enum CodingKeys: String, CodingKey {
                case format
                case startIndex
            }
        }
        /// Position settings for text.
        ///
        /// - Remark: Generated from `#/components/schemas/TextPosition`.
        public struct TextPosition: Codable, Hashable, Sendable {
            /// Horizontal alignment setting for the piece of text.
            ///
            /// - Remark: Generated from `#/components/schemas/TextPosition/horizontalAlignment`.
            @frozen public enum HorizontalAlignmentPayload: String, Codable, Hashable, Sendable, CaseIterable {
                case horizontalAlignUnspecified = "HORIZONTAL_ALIGN_UNSPECIFIED"
                case left = "LEFT"
                case center = "CENTER"
                case right = "RIGHT"
            }
            /// Horizontal alignment setting for the piece of text.
            ///
            /// - Remark: Generated from `#/components/schemas/TextPosition/horizontalAlignment`.
            public var horizontalAlignment: Components.Schemas.TextPosition.HorizontalAlignmentPayload?
            /// Creates a new `TextPosition`.
            ///
            /// - Parameters:
            ///   - horizontalAlignment: Horizontal alignment setting for the piece of text.
            public init(horizontalAlignment: Components.Schemas.TextPosition.HorizontalAlignmentPayload? = nil) {
                self.horizontalAlignment = horizontalAlignment
            }
            public enum CodingKeys: String, CodingKey {
                case horizontalAlignment
            }
        }
        /// The rotation applied to text in a cell.
        ///
        /// - Remark: Generated from `#/components/schemas/TextRotation`.
        public struct TextRotation: Codable, Hashable, Sendable {
            /// The angle between the standard orientation and the desired orientation. Measured in degrees. Valid values are between -90 and 90. Positive angles are angled upwards, negative are angled downwards. Note: For LTR text direction positive angles are in the counterclockwise direction, whereas for RTL they are in the clockwise direction
            ///
            /// - Remark: Generated from `#/components/schemas/TextRotation/angle`.
            public var angle: Swift.Int32?
            /// If true, text reads top to bottom, but the orientation of individual characters is unchanged. For example: | V | | e | | r | | t | | i | | c | | a | | l |
            ///
            /// - Remark: Generated from `#/components/schemas/TextRotation/vertical`.
            public var vertical: Swift.Bool?
            /// Creates a new `TextRotation`.
            ///
            /// - Parameters:
            ///   - angle: The angle between the standard orientation and the desired orientation. Measured in degrees. Valid values are between -90 and 90. Positive angles are angled upwards, negative are angled downwards. Note: For LTR text direction positive angles are in the counterclockwise direction, whereas for RTL they are in the clockwise direction
            ///   - vertical: If true, text reads top to bottom, but the orientation of individual characters is unchanged. For example: | V | | e | | r | | t | | i | | c | | a | | l |
            public init(
                angle: Swift.Int32? = nil,
                vertical: Swift.Bool? = nil
            ) {
                self.angle = angle
                self.vertical = vertical
            }
            public enum CodingKeys: String, CodingKey {
                case angle
                case vertical
            }
        }
        /// Splits a column of text into multiple columns, based on a delimiter in each cell.
        ///
        /// - Remark: Generated from `#/components/schemas/TextToColumnsRequest`.
        public struct TextToColumnsRequest: Codable, Hashable, Sendable {
            /// The delimiter to use. Used only if delimiterType is CUSTOM.
            ///
            /// - Remark: Generated from `#/components/schemas/TextToColumnsRequest/delimiter`.
            public var delimiter: Swift.String?
            /// The delimiter type to use.
            ///
            /// - Remark: Generated from `#/components/schemas/TextToColumnsRequest/delimiterType`.
            @frozen public enum DelimiterTypePayload: String, Codable, Hashable, Sendable, CaseIterable {
                case delimiterTypeUnspecified = "DELIMITER_TYPE_UNSPECIFIED"
                case comma = "COMMA"
                case semicolon = "SEMICOLON"
                case period = "PERIOD"
                case space = "SPACE"
                case custom = "CUSTOM"
                case autodetect = "AUTODETECT"
            }
            /// The delimiter type to use.
            ///
            /// - Remark: Generated from `#/components/schemas/TextToColumnsRequest/delimiterType`.
            public var delimiterType: Components.Schemas.TextToColumnsRequest.DelimiterTypePayload?
            /// - Remark: Generated from `#/components/schemas/TextToColumnsRequest/source`.
            public var source: Components.Schemas.GridRange?
            /// Creates a new `TextToColumnsRequest`.
            ///
            /// - Parameters:
            ///   - delimiter: The delimiter to use. Used only if delimiterType is CUSTOM.
            ///   - delimiterType: The delimiter type to use.
            ///   - source:
            public init(
                delimiter: Swift.String? = nil,
                delimiterType: Components.Schemas.TextToColumnsRequest.DelimiterTypePayload? = nil,
                source: Components.Schemas.GridRange? = nil
            ) {
                self.delimiter = delimiter
                self.delimiterType = delimiterType
                self.source = source
            }
            public enum CodingKeys: String, CodingKey {
                case delimiter
                case delimiterType
                case source
            }
        }
        /// A pair mapping a spreadsheet theme color type to the concrete color it represents.
        ///
        /// - Remark: Generated from `#/components/schemas/ThemeColorPair`.
        public struct ThemeColorPair: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/ThemeColorPair/color`.
            public var color: Components.Schemas.ColorStyle?
            /// The type of the spreadsheet theme color.
            ///
            /// - Remark: Generated from `#/components/schemas/ThemeColorPair/colorType`.
            @frozen public enum ColorTypePayload: String, Codable, Hashable, Sendable, CaseIterable {
                case themeColorTypeUnspecified = "THEME_COLOR_TYPE_UNSPECIFIED"
                case text = "TEXT"
                case background = "BACKGROUND"
                case accent1 = "ACCENT1"
                case accent2 = "ACCENT2"
                case accent3 = "ACCENT3"
                case accent4 = "ACCENT4"
                case accent5 = "ACCENT5"
                case accent6 = "ACCENT6"
                case link = "LINK"
            }
            /// The type of the spreadsheet theme color.
            ///
            /// - Remark: Generated from `#/components/schemas/ThemeColorPair/colorType`.
            public var colorType: Components.Schemas.ThemeColorPair.ColorTypePayload?
            /// Creates a new `ThemeColorPair`.
            ///
            /// - Parameters:
            ///   - color:
            ///   - colorType: The type of the spreadsheet theme color.
            public init(
                color: Components.Schemas.ColorStyle? = nil,
                colorType: Components.Schemas.ThemeColorPair.ColorTypePayload? = nil
            ) {
                self.color = color
                self.colorType = colorType
            }
            public enum CodingKeys: String, CodingKey {
                case color
                case colorType
            }
        }
        /// Represents a time of day. The date and time zone are either not significant or are specified elsewhere. An API may choose to allow leap seconds. Related types are google.type.Date and `google.protobuf.Timestamp`.
        ///
        /// - Remark: Generated from `#/components/schemas/TimeOfDay`.
        public struct TimeOfDay: Codable, Hashable, Sendable {
            /// Hours of day in 24 hour format. Should be from 0 to 23. An API may choose to allow the value "24:00:00" for scenarios like business closing time.
            ///
            /// - Remark: Generated from `#/components/schemas/TimeOfDay/hours`.
            public var hours: Swift.Int32?
            /// Minutes of hour of day. Must be from 0 to 59.
            ///
            /// - Remark: Generated from `#/components/schemas/TimeOfDay/minutes`.
            public var minutes: Swift.Int32?
            /// Fractions of seconds in nanoseconds. Must be from 0 to 999,999,999.
            ///
            /// - Remark: Generated from `#/components/schemas/TimeOfDay/nanos`.
            public var nanos: Swift.Int32?
            /// Seconds of minutes of the time. Must normally be from 0 to 59. An API may allow the value 60 if it allows leap-seconds.
            ///
            /// - Remark: Generated from `#/components/schemas/TimeOfDay/seconds`.
            public var seconds: Swift.Int32?
            /// Creates a new `TimeOfDay`.
            ///
            /// - Parameters:
            ///   - hours: Hours of day in 24 hour format. Should be from 0 to 23. An API may choose to allow the value "24:00:00" for scenarios like business closing time.
            ///   - minutes: Minutes of hour of day. Must be from 0 to 59.
            ///   - nanos: Fractions of seconds in nanoseconds. Must be from 0 to 999,999,999.
            ///   - seconds: Seconds of minutes of the time. Must normally be from 0 to 59. An API may allow the value 60 if it allows leap-seconds.
            public init(
                hours: Swift.Int32? = nil,
                minutes: Swift.Int32? = nil,
                nanos: Swift.Int32? = nil,
                seconds: Swift.Int32? = nil
            ) {
                self.hours = hours
                self.minutes = minutes
                self.nanos = nanos
                self.seconds = seconds
            }
            public enum CodingKeys: String, CodingKey {
                case hours
                case minutes
                case nanos
                case seconds
            }
        }
        /// A color scale for a treemap chart.
        ///
        /// - Remark: Generated from `#/components/schemas/TreemapChartColorScale`.
        public struct TreemapChartColorScale: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/TreemapChartColorScale/maxValueColor`.
            public var maxValueColor: Components.Schemas.Color?
            /// - Remark: Generated from `#/components/schemas/TreemapChartColorScale/maxValueColorStyle`.
            public var maxValueColorStyle: Components.Schemas.ColorStyle?
            /// - Remark: Generated from `#/components/schemas/TreemapChartColorScale/midValueColor`.
            public var midValueColor: Components.Schemas.Color?
            /// - Remark: Generated from `#/components/schemas/TreemapChartColorScale/midValueColorStyle`.
            public var midValueColorStyle: Components.Schemas.ColorStyle?
            /// - Remark: Generated from `#/components/schemas/TreemapChartColorScale/minValueColor`.
            public var minValueColor: Components.Schemas.Color?
            /// - Remark: Generated from `#/components/schemas/TreemapChartColorScale/minValueColorStyle`.
            public var minValueColorStyle: Components.Schemas.ColorStyle?
            /// - Remark: Generated from `#/components/schemas/TreemapChartColorScale/noDataColor`.
            public var noDataColor: Components.Schemas.Color?
            /// - Remark: Generated from `#/components/schemas/TreemapChartColorScale/noDataColorStyle`.
            public var noDataColorStyle: Components.Schemas.ColorStyle?
            /// Creates a new `TreemapChartColorScale`.
            ///
            /// - Parameters:
            ///   - maxValueColor:
            ///   - maxValueColorStyle:
            ///   - midValueColor:
            ///   - midValueColorStyle:
            ///   - minValueColor:
            ///   - minValueColorStyle:
            ///   - noDataColor:
            ///   - noDataColorStyle:
            public init(
                maxValueColor: Components.Schemas.Color? = nil,
                maxValueColorStyle: Components.Schemas.ColorStyle? = nil,
                midValueColor: Components.Schemas.Color? = nil,
                midValueColorStyle: Components.Schemas.ColorStyle? = nil,
                minValueColor: Components.Schemas.Color? = nil,
                minValueColorStyle: Components.Schemas.ColorStyle? = nil,
                noDataColor: Components.Schemas.Color? = nil,
                noDataColorStyle: Components.Schemas.ColorStyle? = nil
            ) {
                self.maxValueColor = maxValueColor
                self.maxValueColorStyle = maxValueColorStyle
                self.midValueColor = midValueColor
                self.midValueColorStyle = midValueColorStyle
                self.minValueColor = minValueColor
                self.minValueColorStyle = minValueColorStyle
                self.noDataColor = noDataColor
                self.noDataColorStyle = noDataColorStyle
            }
            public enum CodingKeys: String, CodingKey {
                case maxValueColor
                case maxValueColorStyle
                case midValueColor
                case midValueColorStyle
                case minValueColor
                case minValueColorStyle
                case noDataColor
                case noDataColorStyle
            }
        }
        /// A Treemap chart.
        ///
        /// - Remark: Generated from `#/components/schemas/TreemapChartSpec`.
        public struct TreemapChartSpec: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/TreemapChartSpec/colorData`.
            public var colorData: Components.Schemas.ChartData?
            /// - Remark: Generated from `#/components/schemas/TreemapChartSpec/colorScale`.
            public var colorScale: Components.Schemas.TreemapChartColorScale?
            /// - Remark: Generated from `#/components/schemas/TreemapChartSpec/headerColor`.
            public var headerColor: Components.Schemas.Color?
            /// - Remark: Generated from `#/components/schemas/TreemapChartSpec/headerColorStyle`.
            public var headerColorStyle: Components.Schemas.ColorStyle?
            /// True to hide tooltips.
            ///
            /// - Remark: Generated from `#/components/schemas/TreemapChartSpec/hideTooltips`.
            public var hideTooltips: Swift.Bool?
            /// The number of additional data levels beyond the labeled levels to be shown on the treemap chart. These levels are not interactive and are shown without their labels. Defaults to 0 if not specified.
            ///
            /// - Remark: Generated from `#/components/schemas/TreemapChartSpec/hintedLevels`.
            public var hintedLevels: Swift.Int32?
            /// - Remark: Generated from `#/components/schemas/TreemapChartSpec/labels`.
            public var labels: Components.Schemas.ChartData?
            /// The number of data levels to show on the treemap chart. These levels are interactive and are shown with their labels. Defaults to 2 if not specified.
            ///
            /// - Remark: Generated from `#/components/schemas/TreemapChartSpec/levels`.
            public var levels: Swift.Int32?
            /// The maximum possible data value. Cells with values greater than this will have the same color as cells with this value. If not specified, defaults to the actual maximum value from color_data, or the maximum value from size_data if color_data is not specified.
            ///
            /// - Remark: Generated from `#/components/schemas/TreemapChartSpec/maxValue`.
            public var maxValue: Swift.Double?
            /// The minimum possible data value. Cells with values less than this will have the same color as cells with this value. If not specified, defaults to the actual minimum value from color_data, or the minimum value from size_data if color_data is not specified.
            ///
            /// - Remark: Generated from `#/components/schemas/TreemapChartSpec/minValue`.
            public var minValue: Swift.Double?
            /// - Remark: Generated from `#/components/schemas/TreemapChartSpec/parentLabels`.
            public var parentLabels: Components.Schemas.ChartData?
            /// - Remark: Generated from `#/components/schemas/TreemapChartSpec/sizeData`.
            public var sizeData: Components.Schemas.ChartData?
            /// - Remark: Generated from `#/components/schemas/TreemapChartSpec/textFormat`.
            public var textFormat: Components.Schemas.TextFormat?
            /// Creates a new `TreemapChartSpec`.
            ///
            /// - Parameters:
            ///   - colorData:
            ///   - colorScale:
            ///   - headerColor:
            ///   - headerColorStyle:
            ///   - hideTooltips: True to hide tooltips.
            ///   - hintedLevels: The number of additional data levels beyond the labeled levels to be shown on the treemap chart. These levels are not interactive and are shown without their labels. Defaults to 0 if not specified.
            ///   - labels:
            ///   - levels: The number of data levels to show on the treemap chart. These levels are interactive and are shown with their labels. Defaults to 2 if not specified.
            ///   - maxValue: The maximum possible data value. Cells with values greater than this will have the same color as cells with this value. If not specified, defaults to the actual maximum value from color_data, or the maximum value from size_data if color_data is not specified.
            ///   - minValue: The minimum possible data value. Cells with values less than this will have the same color as cells with this value. If not specified, defaults to the actual minimum value from color_data, or the minimum value from size_data if color_data is not specified.
            ///   - parentLabels:
            ///   - sizeData:
            ///   - textFormat:
            public init(
                colorData: Components.Schemas.ChartData? = nil,
                colorScale: Components.Schemas.TreemapChartColorScale? = nil,
                headerColor: Components.Schemas.Color? = nil,
                headerColorStyle: Components.Schemas.ColorStyle? = nil,
                hideTooltips: Swift.Bool? = nil,
                hintedLevels: Swift.Int32? = nil,
                labels: Components.Schemas.ChartData? = nil,
                levels: Swift.Int32? = nil,
                maxValue: Swift.Double? = nil,
                minValue: Swift.Double? = nil,
                parentLabels: Components.Schemas.ChartData? = nil,
                sizeData: Components.Schemas.ChartData? = nil,
                textFormat: Components.Schemas.TextFormat? = nil
            ) {
                self.colorData = colorData
                self.colorScale = colorScale
                self.headerColor = headerColor
                self.headerColorStyle = headerColorStyle
                self.hideTooltips = hideTooltips
                self.hintedLevels = hintedLevels
                self.labels = labels
                self.levels = levels
                self.maxValue = maxValue
                self.minValue = minValue
                self.parentLabels = parentLabels
                self.sizeData = sizeData
                self.textFormat = textFormat
            }
            public enum CodingKeys: String, CodingKey {
                case colorData
                case colorScale
                case headerColor
                case headerColorStyle
                case hideTooltips
                case hintedLevels
                case labels
                case levels
                case maxValue
                case minValue
                case parentLabels
                case sizeData
                case textFormat
            }
        }
        /// Trims the whitespace (such as spaces, tabs, or new lines) in every cell in the specified range. This request removes all whitespace from the start and end of each cell's text, and reduces any subsequence of remaining whitespace characters to a single space. If the resulting trimmed text starts with a '+' or '=' character, the text remains as a string value and isn't interpreted as a formula.
        ///
        /// - Remark: Generated from `#/components/schemas/TrimWhitespaceRequest`.
        public struct TrimWhitespaceRequest: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/TrimWhitespaceRequest/range`.
            public var range: Components.Schemas.GridRange?
            /// Creates a new `TrimWhitespaceRequest`.
            ///
            /// - Parameters:
            ///   - range:
            public init(range: Components.Schemas.GridRange? = nil) {
                self.range = range
            }
            public enum CodingKeys: String, CodingKey {
                case range
            }
        }
        /// The result of trimming whitespace in cells.
        ///
        /// - Remark: Generated from `#/components/schemas/TrimWhitespaceResponse`.
        public struct TrimWhitespaceResponse: Codable, Hashable, Sendable {
            /// The number of cells that were trimmed of whitespace.
            ///
            /// - Remark: Generated from `#/components/schemas/TrimWhitespaceResponse/cellsChangedCount`.
            public var cellsChangedCount: Swift.Int32?
            /// Creates a new `TrimWhitespaceResponse`.
            ///
            /// - Parameters:
            ///   - cellsChangedCount: The number of cells that were trimmed of whitespace.
            public init(cellsChangedCount: Swift.Int32? = nil) {
                self.cellsChangedCount = cellsChangedCount
            }
            public enum CodingKeys: String, CodingKey {
                case cellsChangedCount
            }
        }
        /// Unmerges cells in the given range.
        ///
        /// - Remark: Generated from `#/components/schemas/UnmergeCellsRequest`.
        public struct UnmergeCellsRequest: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/UnmergeCellsRequest/range`.
            public var range: Components.Schemas.GridRange?
            /// Creates a new `UnmergeCellsRequest`.
            ///
            /// - Parameters:
            ///   - range:
            public init(range: Components.Schemas.GridRange? = nil) {
                self.range = range
            }
            public enum CodingKeys: String, CodingKey {
                case range
            }
        }
        /// Updates properties of the supplied banded range.
        ///
        /// - Remark: Generated from `#/components/schemas/UpdateBandingRequest`.
        public struct UpdateBandingRequest: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/UpdateBandingRequest/bandedRange`.
            public var bandedRange: Components.Schemas.BandedRange?
            /// The fields that should be updated. At least one field must be specified. The root `bandedRange` is implied and should not be specified. A single `"*"` can be used as short-hand for listing every field.
            ///
            /// - Remark: Generated from `#/components/schemas/UpdateBandingRequest/fields`.
            public var fields: Swift.String?
            /// Creates a new `UpdateBandingRequest`.
            ///
            /// - Parameters:
            ///   - bandedRange:
            ///   - fields: The fields that should be updated. At least one field must be specified. The root `bandedRange` is implied and should not be specified. A single `"*"` can be used as short-hand for listing every field.
            public init(
                bandedRange: Components.Schemas.BandedRange? = nil,
                fields: Swift.String? = nil
            ) {
                self.bandedRange = bandedRange
                self.fields = fields
            }
            public enum CodingKeys: String, CodingKey {
                case bandedRange
                case fields
            }
        }
        /// Updates the borders of a range. If a field is not set in the request, that means the border remains as-is. For example, with two subsequent UpdateBordersRequest: 1. range: A1:A5 `{ top: RED, bottom: WHITE }` 2. range: A1:A5 `{ left: BLUE }` That would result in A1:A5 having a borders of `{ top: RED, bottom: WHITE, left: BLUE }`. If you want to clear a border, explicitly set the style to NONE.
        ///
        /// - Remark: Generated from `#/components/schemas/UpdateBordersRequest`.
        public struct UpdateBordersRequest: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/UpdateBordersRequest/bottom`.
            public var bottom: Components.Schemas.Border?
            /// - Remark: Generated from `#/components/schemas/UpdateBordersRequest/innerHorizontal`.
            public var innerHorizontal: Components.Schemas.Border?
            /// - Remark: Generated from `#/components/schemas/UpdateBordersRequest/innerVertical`.
            public var innerVertical: Components.Schemas.Border?
            /// - Remark: Generated from `#/components/schemas/UpdateBordersRequest/left`.
            public var left: Components.Schemas.Border?
            /// - Remark: Generated from `#/components/schemas/UpdateBordersRequest/range`.
            public var range: Components.Schemas.GridRange?
            /// - Remark: Generated from `#/components/schemas/UpdateBordersRequest/right`.
            public var right: Components.Schemas.Border?
            /// - Remark: Generated from `#/components/schemas/UpdateBordersRequest/top`.
            public var top: Components.Schemas.Border?
            /// Creates a new `UpdateBordersRequest`.
            ///
            /// - Parameters:
            ///   - bottom:
            ///   - innerHorizontal:
            ///   - innerVertical:
            ///   - left:
            ///   - range:
            ///   - right:
            ///   - top:
            public init(
                bottom: Components.Schemas.Border? = nil,
                innerHorizontal: Components.Schemas.Border? = nil,
                innerVertical: Components.Schemas.Border? = nil,
                left: Components.Schemas.Border? = nil,
                range: Components.Schemas.GridRange? = nil,
                right: Components.Schemas.Border? = nil,
                top: Components.Schemas.Border? = nil
            ) {
                self.bottom = bottom
                self.innerHorizontal = innerHorizontal
                self.innerVertical = innerVertical
                self.left = left
                self.range = range
                self.right = right
                self.top = top
            }
            public enum CodingKeys: String, CodingKey {
                case bottom
                case innerHorizontal
                case innerVertical
                case left
                case range
                case right
                case top
            }
        }
        /// Updates all cells in a range with new data.
        ///
        /// - Remark: Generated from `#/components/schemas/UpdateCellsRequest`.
        public struct UpdateCellsRequest: Codable, Hashable, Sendable {
            /// The fields of CellData that should be updated. At least one field must be specified. The root is the CellData; 'row.values.' should not be specified. A single `"*"` can be used as short-hand for listing every field.
            ///
            /// - Remark: Generated from `#/components/schemas/UpdateCellsRequest/fields`.
            public var fields: Swift.String?
            /// - Remark: Generated from `#/components/schemas/UpdateCellsRequest/range`.
            public var range: Components.Schemas.GridRange?
            /// The data to write.
            ///
            /// - Remark: Generated from `#/components/schemas/UpdateCellsRequest/rows`.
            public var rows: [Components.Schemas.RowData]?
            /// - Remark: Generated from `#/components/schemas/UpdateCellsRequest/start`.
            public var start: Components.Schemas.GridCoordinate?
            /// Creates a new `UpdateCellsRequest`.
            ///
            /// - Parameters:
            ///   - fields: The fields of CellData that should be updated. At least one field must be specified. The root is the CellData; 'row.values.' should not be specified. A single `"*"` can be used as short-hand for listing every field.
            ///   - range:
            ///   - rows: The data to write.
            ///   - start:
            public init(
                fields: Swift.String? = nil,
                range: Components.Schemas.GridRange? = nil,
                rows: [Components.Schemas.RowData]? = nil,
                start: Components.Schemas.GridCoordinate? = nil
            ) {
                self.fields = fields
                self.range = range
                self.rows = rows
                self.start = start
            }
            public enum CodingKeys: String, CodingKey {
                case fields
                case range
                case rows
                case start
            }
        }
        /// Updates a chart's specifications. (This does not move or resize a chart. To move or resize a chart, use UpdateEmbeddedObjectPositionRequest.)
        ///
        /// - Remark: Generated from `#/components/schemas/UpdateChartSpecRequest`.
        public struct UpdateChartSpecRequest: Codable, Hashable, Sendable {
            /// The ID of the chart to update.
            ///
            /// - Remark: Generated from `#/components/schemas/UpdateChartSpecRequest/chartId`.
            public var chartId: Swift.Int32?
            /// - Remark: Generated from `#/components/schemas/UpdateChartSpecRequest/spec`.
            public var spec: Components.Schemas.ChartSpec?
            /// Creates a new `UpdateChartSpecRequest`.
            ///
            /// - Parameters:
            ///   - chartId: The ID of the chart to update.
            ///   - spec:
            public init(
                chartId: Swift.Int32? = nil,
                spec: Components.Schemas.ChartSpec? = nil
            ) {
                self.chartId = chartId
                self.spec = spec
            }
            public enum CodingKeys: String, CodingKey {
                case chartId
                case spec
            }
        }
        /// Updates a conditional format rule at the given index, or moves a conditional format rule to another index.
        ///
        /// - Remark: Generated from `#/components/schemas/UpdateConditionalFormatRuleRequest`.
        public struct UpdateConditionalFormatRuleRequest: Codable, Hashable, Sendable {
            /// The zero-based index of the rule that should be replaced or moved.
            ///
            /// - Remark: Generated from `#/components/schemas/UpdateConditionalFormatRuleRequest/index`.
            public var index: Swift.Int32?
            /// The zero-based new index the rule should end up at.
            ///
            /// - Remark: Generated from `#/components/schemas/UpdateConditionalFormatRuleRequest/newIndex`.
            public var newIndex: Swift.Int32?
            /// - Remark: Generated from `#/components/schemas/UpdateConditionalFormatRuleRequest/rule`.
            public var rule: Components.Schemas.ConditionalFormatRule?
            /// The sheet of the rule to move. Required if new_index is set, unused otherwise.
            ///
            /// - Remark: Generated from `#/components/schemas/UpdateConditionalFormatRuleRequest/sheetId`.
            public var sheetId: Swift.Int32?
            /// Creates a new `UpdateConditionalFormatRuleRequest`.
            ///
            /// - Parameters:
            ///   - index: The zero-based index of the rule that should be replaced or moved.
            ///   - newIndex: The zero-based new index the rule should end up at.
            ///   - rule:
            ///   - sheetId: The sheet of the rule to move. Required if new_index is set, unused otherwise.
            public init(
                index: Swift.Int32? = nil,
                newIndex: Swift.Int32? = nil,
                rule: Components.Schemas.ConditionalFormatRule? = nil,
                sheetId: Swift.Int32? = nil
            ) {
                self.index = index
                self.newIndex = newIndex
                self.rule = rule
                self.sheetId = sheetId
            }
            public enum CodingKeys: String, CodingKey {
                case index
                case newIndex
                case rule
                case sheetId
            }
        }
        /// The result of updating a conditional format rule.
        ///
        /// - Remark: Generated from `#/components/schemas/UpdateConditionalFormatRuleResponse`.
        public struct UpdateConditionalFormatRuleResponse: Codable, Hashable, Sendable {
            /// The index of the new rule.
            ///
            /// - Remark: Generated from `#/components/schemas/UpdateConditionalFormatRuleResponse/newIndex`.
            public var newIndex: Swift.Int32?
            /// - Remark: Generated from `#/components/schemas/UpdateConditionalFormatRuleResponse/newRule`.
            public var newRule: Components.Schemas.ConditionalFormatRule?
            /// The old index of the rule. Not set if a rule was replaced (because it is the same as new_index).
            ///
            /// - Remark: Generated from `#/components/schemas/UpdateConditionalFormatRuleResponse/oldIndex`.
            public var oldIndex: Swift.Int32?
            /// - Remark: Generated from `#/components/schemas/UpdateConditionalFormatRuleResponse/oldRule`.
            public var oldRule: Components.Schemas.ConditionalFormatRule?
            /// Creates a new `UpdateConditionalFormatRuleResponse`.
            ///
            /// - Parameters:
            ///   - newIndex: The index of the new rule.
            ///   - newRule:
            ///   - oldIndex: The old index of the rule. Not set if a rule was replaced (because it is the same as new_index).
            ///   - oldRule:
            public init(
                newIndex: Swift.Int32? = nil,
                newRule: Components.Schemas.ConditionalFormatRule? = nil,
                oldIndex: Swift.Int32? = nil,
                oldRule: Components.Schemas.ConditionalFormatRule? = nil
            ) {
                self.newIndex = newIndex
                self.newRule = newRule
                self.oldIndex = oldIndex
                self.oldRule = oldRule
            }
            public enum CodingKeys: String, CodingKey {
                case newIndex
                case newRule
                case oldIndex
                case oldRule
            }
        }
        /// Updates a data source. After the data source is updated successfully, an execution is triggered to refresh the associated DATA_SOURCE sheet to read data from the updated data source. The request requires an additional `bigquery.readonly` OAuth scope.
        ///
        /// - Remark: Generated from `#/components/schemas/UpdateDataSourceRequest`.
        public struct UpdateDataSourceRequest: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/UpdateDataSourceRequest/dataSource`.
            public var dataSource: Components.Schemas.DataSource?
            /// The fields that should be updated. At least one field must be specified. The root `dataSource` is implied and should not be specified. A single `"*"` can be used as short-hand for listing every field.
            ///
            /// - Remark: Generated from `#/components/schemas/UpdateDataSourceRequest/fields`.
            public var fields: Swift.String?
            /// Creates a new `UpdateDataSourceRequest`.
            ///
            /// - Parameters:
            ///   - dataSource:
            ///   - fields: The fields that should be updated. At least one field must be specified. The root `dataSource` is implied and should not be specified. A single `"*"` can be used as short-hand for listing every field.
            public init(
                dataSource: Components.Schemas.DataSource? = nil,
                fields: Swift.String? = nil
            ) {
                self.dataSource = dataSource
                self.fields = fields
            }
            public enum CodingKeys: String, CodingKey {
                case dataSource
                case fields
            }
        }
        /// The response from updating data source.
        ///
        /// - Remark: Generated from `#/components/schemas/UpdateDataSourceResponse`.
        public struct UpdateDataSourceResponse: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/UpdateDataSourceResponse/dataExecutionStatus`.
            public var dataExecutionStatus: Components.Schemas.DataExecutionStatus?
            /// - Remark: Generated from `#/components/schemas/UpdateDataSourceResponse/dataSource`.
            public var dataSource: Components.Schemas.DataSource?
            /// Creates a new `UpdateDataSourceResponse`.
            ///
            /// - Parameters:
            ///   - dataExecutionStatus:
            ///   - dataSource:
            public init(
                dataExecutionStatus: Components.Schemas.DataExecutionStatus? = nil,
                dataSource: Components.Schemas.DataSource? = nil
            ) {
                self.dataExecutionStatus = dataExecutionStatus
                self.dataSource = dataSource
            }
            public enum CodingKeys: String, CodingKey {
                case dataExecutionStatus
                case dataSource
            }
        }
        /// A request to update properties of developer metadata. Updates the properties of the developer metadata selected by the filters to the values provided in the DeveloperMetadata resource. Callers must specify the properties they wish to update in the fields parameter, as well as specify at least one DataFilter matching the metadata they wish to update.
        ///
        /// - Remark: Generated from `#/components/schemas/UpdateDeveloperMetadataRequest`.
        public struct UpdateDeveloperMetadataRequest: Codable, Hashable, Sendable {
            /// The filters matching the developer metadata entries to update.
            ///
            /// - Remark: Generated from `#/components/schemas/UpdateDeveloperMetadataRequest/dataFilters`.
            public var dataFilters: [Components.Schemas.DataFilter]?
            /// - Remark: Generated from `#/components/schemas/UpdateDeveloperMetadataRequest/developerMetadata`.
            public var developerMetadata: Components.Schemas.DeveloperMetadata?
            /// The fields that should be updated. At least one field must be specified. The root `developerMetadata` is implied and should not be specified. A single `"*"` can be used as short-hand for listing every field.
            ///
            /// - Remark: Generated from `#/components/schemas/UpdateDeveloperMetadataRequest/fields`.
            public var fields: Swift.String?
            /// Creates a new `UpdateDeveloperMetadataRequest`.
            ///
            /// - Parameters:
            ///   - dataFilters: The filters matching the developer metadata entries to update.
            ///   - developerMetadata:
            ///   - fields: The fields that should be updated. At least one field must be specified. The root `developerMetadata` is implied and should not be specified. A single `"*"` can be used as short-hand for listing every field.
            public init(
                dataFilters: [Components.Schemas.DataFilter]? = nil,
                developerMetadata: Components.Schemas.DeveloperMetadata? = nil,
                fields: Swift.String? = nil
            ) {
                self.dataFilters = dataFilters
                self.developerMetadata = developerMetadata
                self.fields = fields
            }
            public enum CodingKeys: String, CodingKey {
                case dataFilters
                case developerMetadata
                case fields
            }
        }
        /// The response from updating developer metadata.
        ///
        /// - Remark: Generated from `#/components/schemas/UpdateDeveloperMetadataResponse`.
        public struct UpdateDeveloperMetadataResponse: Codable, Hashable, Sendable {
            /// The updated developer metadata.
            ///
            /// - Remark: Generated from `#/components/schemas/UpdateDeveloperMetadataResponse/developerMetadata`.
            public var developerMetadata: [Components.Schemas.DeveloperMetadata]?
            /// Creates a new `UpdateDeveloperMetadataResponse`.
            ///
            /// - Parameters:
            ///   - developerMetadata: The updated developer metadata.
            public init(developerMetadata: [Components.Schemas.DeveloperMetadata]? = nil) {
                self.developerMetadata = developerMetadata
            }
            public enum CodingKeys: String, CodingKey {
                case developerMetadata
            }
        }
        /// Updates the state of the specified group.
        ///
        /// - Remark: Generated from `#/components/schemas/UpdateDimensionGroupRequest`.
        public struct UpdateDimensionGroupRequest: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/UpdateDimensionGroupRequest/dimensionGroup`.
            public var dimensionGroup: Components.Schemas.DimensionGroup?
            /// The fields that should be updated. At least one field must be specified. The root `dimensionGroup` is implied and should not be specified. A single `"*"` can be used as short-hand for listing every field.
            ///
            /// - Remark: Generated from `#/components/schemas/UpdateDimensionGroupRequest/fields`.
            public var fields: Swift.String?
            /// Creates a new `UpdateDimensionGroupRequest`.
            ///
            /// - Parameters:
            ///   - dimensionGroup:
            ///   - fields: The fields that should be updated. At least one field must be specified. The root `dimensionGroup` is implied and should not be specified. A single `"*"` can be used as short-hand for listing every field.
            public init(
                dimensionGroup: Components.Schemas.DimensionGroup? = nil,
                fields: Swift.String? = nil
            ) {
                self.dimensionGroup = dimensionGroup
                self.fields = fields
            }
            public enum CodingKeys: String, CodingKey {
                case dimensionGroup
                case fields
            }
        }
        /// Updates properties of dimensions within the specified range.
        ///
        /// - Remark: Generated from `#/components/schemas/UpdateDimensionPropertiesRequest`.
        public struct UpdateDimensionPropertiesRequest: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/UpdateDimensionPropertiesRequest/dataSourceSheetRange`.
            public var dataSourceSheetRange: Components.Schemas.DataSourceSheetDimensionRange?
            /// The fields that should be updated. At least one field must be specified. The root `properties` is implied and should not be specified. A single `"*"` can be used as short-hand for listing every field.
            ///
            /// - Remark: Generated from `#/components/schemas/UpdateDimensionPropertiesRequest/fields`.
            public var fields: Swift.String?
            /// - Remark: Generated from `#/components/schemas/UpdateDimensionPropertiesRequest/properties`.
            public var properties: Components.Schemas.DimensionProperties?
            /// - Remark: Generated from `#/components/schemas/UpdateDimensionPropertiesRequest/range`.
            public var range: Components.Schemas.DimensionRange?
            /// Creates a new `UpdateDimensionPropertiesRequest`.
            ///
            /// - Parameters:
            ///   - dataSourceSheetRange:
            ///   - fields: The fields that should be updated. At least one field must be specified. The root `properties` is implied and should not be specified. A single `"*"` can be used as short-hand for listing every field.
            ///   - properties:
            ///   - range:
            public init(
                dataSourceSheetRange: Components.Schemas.DataSourceSheetDimensionRange? = nil,
                fields: Swift.String? = nil,
                properties: Components.Schemas.DimensionProperties? = nil,
                range: Components.Schemas.DimensionRange? = nil
            ) {
                self.dataSourceSheetRange = dataSourceSheetRange
                self.fields = fields
                self.properties = properties
                self.range = range
            }
            public enum CodingKeys: String, CodingKey {
                case dataSourceSheetRange
                case fields
                case properties
                case range
            }
        }
        /// Updates an embedded object's border property.
        ///
        /// - Remark: Generated from `#/components/schemas/UpdateEmbeddedObjectBorderRequest`.
        public struct UpdateEmbeddedObjectBorderRequest: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/UpdateEmbeddedObjectBorderRequest/border`.
            public var border: Components.Schemas.EmbeddedObjectBorder?
            /// The fields that should be updated. At least one field must be specified. The root `border` is implied and should not be specified. A single `"*"` can be used as short-hand for listing every field.
            ///
            /// - Remark: Generated from `#/components/schemas/UpdateEmbeddedObjectBorderRequest/fields`.
            public var fields: Swift.String?
            /// The ID of the embedded object to update.
            ///
            /// - Remark: Generated from `#/components/schemas/UpdateEmbeddedObjectBorderRequest/objectId`.
            public var objectId: Swift.Int32?
            /// Creates a new `UpdateEmbeddedObjectBorderRequest`.
            ///
            /// - Parameters:
            ///   - border:
            ///   - fields: The fields that should be updated. At least one field must be specified. The root `border` is implied and should not be specified. A single `"*"` can be used as short-hand for listing every field.
            ///   - objectId: The ID of the embedded object to update.
            public init(
                border: Components.Schemas.EmbeddedObjectBorder? = nil,
                fields: Swift.String? = nil,
                objectId: Swift.Int32? = nil
            ) {
                self.border = border
                self.fields = fields
                self.objectId = objectId
            }
            public enum CodingKeys: String, CodingKey {
                case border
                case fields
                case objectId
            }
        }
        /// Update an embedded object's position (such as a moving or resizing a chart or image).
        ///
        /// - Remark: Generated from `#/components/schemas/UpdateEmbeddedObjectPositionRequest`.
        public struct UpdateEmbeddedObjectPositionRequest: Codable, Hashable, Sendable {
            /// The fields of OverlayPosition that should be updated when setting a new position. Used only if newPosition.overlayPosition is set, in which case at least one field must be specified. The root `newPosition.overlayPosition` is implied and should not be specified. A single `"*"` can be used as short-hand for listing every field.
            ///
            /// - Remark: Generated from `#/components/schemas/UpdateEmbeddedObjectPositionRequest/fields`.
            public var fields: Swift.String?
            /// - Remark: Generated from `#/components/schemas/UpdateEmbeddedObjectPositionRequest/newPosition`.
            public var newPosition: Components.Schemas.EmbeddedObjectPosition?
            /// The ID of the object to moved.
            ///
            /// - Remark: Generated from `#/components/schemas/UpdateEmbeddedObjectPositionRequest/objectId`.
            public var objectId: Swift.Int32?
            /// Creates a new `UpdateEmbeddedObjectPositionRequest`.
            ///
            /// - Parameters:
            ///   - fields: The fields of OverlayPosition that should be updated when setting a new position. Used only if newPosition.overlayPosition is set, in which case at least one field must be specified. The root `newPosition.overlayPosition` is implied and should not be specified. A single `"*"` can be used as short-hand for listing every field.
            ///   - newPosition:
            ///   - objectId: The ID of the object to moved.
            public init(
                fields: Swift.String? = nil,
                newPosition: Components.Schemas.EmbeddedObjectPosition? = nil,
                objectId: Swift.Int32? = nil
            ) {
                self.fields = fields
                self.newPosition = newPosition
                self.objectId = objectId
            }
            public enum CodingKeys: String, CodingKey {
                case fields
                case newPosition
                case objectId
            }
        }
        /// The result of updating an embedded object's position.
        ///
        /// - Remark: Generated from `#/components/schemas/UpdateEmbeddedObjectPositionResponse`.
        public struct UpdateEmbeddedObjectPositionResponse: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/UpdateEmbeddedObjectPositionResponse/position`.
            public var position: Components.Schemas.EmbeddedObjectPosition?
            /// Creates a new `UpdateEmbeddedObjectPositionResponse`.
            ///
            /// - Parameters:
            ///   - position:
            public init(position: Components.Schemas.EmbeddedObjectPosition? = nil) {
                self.position = position
            }
            public enum CodingKeys: String, CodingKey {
                case position
            }
        }
        /// Updates properties of the filter view.
        ///
        /// - Remark: Generated from `#/components/schemas/UpdateFilterViewRequest`.
        public struct UpdateFilterViewRequest: Codable, Hashable, Sendable {
            /// The fields that should be updated. At least one field must be specified. The root `filter` is implied and should not be specified. A single `"*"` can be used as short-hand for listing every field.
            ///
            /// - Remark: Generated from `#/components/schemas/UpdateFilterViewRequest/fields`.
            public var fields: Swift.String?
            /// - Remark: Generated from `#/components/schemas/UpdateFilterViewRequest/filter`.
            public var filter: Components.Schemas.FilterView?
            /// Creates a new `UpdateFilterViewRequest`.
            ///
            /// - Parameters:
            ///   - fields: The fields that should be updated. At least one field must be specified. The root `filter` is implied and should not be specified. A single `"*"` can be used as short-hand for listing every field.
            ///   - filter:
            public init(
                fields: Swift.String? = nil,
                filter: Components.Schemas.FilterView? = nil
            ) {
                self.fields = fields
                self.filter = filter
            }
            public enum CodingKeys: String, CodingKey {
                case fields
                case filter
            }
        }
        /// Updates properties of the named range with the specified namedRangeId.
        ///
        /// - Remark: Generated from `#/components/schemas/UpdateNamedRangeRequest`.
        public struct UpdateNamedRangeRequest: Codable, Hashable, Sendable {
            /// The fields that should be updated. At least one field must be specified. The root `namedRange` is implied and should not be specified. A single `"*"` can be used as short-hand for listing every field.
            ///
            /// - Remark: Generated from `#/components/schemas/UpdateNamedRangeRequest/fields`.
            public var fields: Swift.String?
            /// - Remark: Generated from `#/components/schemas/UpdateNamedRangeRequest/namedRange`.
            public var namedRange: Components.Schemas.NamedRange?
            /// Creates a new `UpdateNamedRangeRequest`.
            ///
            /// - Parameters:
            ///   - fields: The fields that should be updated. At least one field must be specified. The root `namedRange` is implied and should not be specified. A single `"*"` can be used as short-hand for listing every field.
            ///   - namedRange:
            public init(
                fields: Swift.String? = nil,
                namedRange: Components.Schemas.NamedRange? = nil
            ) {
                self.fields = fields
                self.namedRange = namedRange
            }
            public enum CodingKeys: String, CodingKey {
                case fields
                case namedRange
            }
        }
        /// Updates an existing protected range with the specified protectedRangeId.
        ///
        /// - Remark: Generated from `#/components/schemas/UpdateProtectedRangeRequest`.
        public struct UpdateProtectedRangeRequest: Codable, Hashable, Sendable {
            /// The fields that should be updated. At least one field must be specified. The root `protectedRange` is implied and should not be specified. A single `"*"` can be used as short-hand for listing every field.
            ///
            /// - Remark: Generated from `#/components/schemas/UpdateProtectedRangeRequest/fields`.
            public var fields: Swift.String?
            /// - Remark: Generated from `#/components/schemas/UpdateProtectedRangeRequest/protectedRange`.
            public var protectedRange: Components.Schemas.ProtectedRange?
            /// Creates a new `UpdateProtectedRangeRequest`.
            ///
            /// - Parameters:
            ///   - fields: The fields that should be updated. At least one field must be specified. The root `protectedRange` is implied and should not be specified. A single `"*"` can be used as short-hand for listing every field.
            ///   - protectedRange:
            public init(
                fields: Swift.String? = nil,
                protectedRange: Components.Schemas.ProtectedRange? = nil
            ) {
                self.fields = fields
                self.protectedRange = protectedRange
            }
            public enum CodingKeys: String, CodingKey {
                case fields
                case protectedRange
            }
        }
        /// Updates properties of the sheet with the specified sheetId.
        ///
        /// - Remark: Generated from `#/components/schemas/UpdateSheetPropertiesRequest`.
        public struct UpdateSheetPropertiesRequest: Codable, Hashable, Sendable {
            /// The fields that should be updated. At least one field must be specified. The root `properties` is implied and should not be specified. A single `"*"` can be used as short-hand for listing every field.
            ///
            /// - Remark: Generated from `#/components/schemas/UpdateSheetPropertiesRequest/fields`.
            public var fields: Swift.String?
            /// - Remark: Generated from `#/components/schemas/UpdateSheetPropertiesRequest/properties`.
            public var properties: Components.Schemas.SheetProperties?
            /// Creates a new `UpdateSheetPropertiesRequest`.
            ///
            /// - Parameters:
            ///   - fields: The fields that should be updated. At least one field must be specified. The root `properties` is implied and should not be specified. A single `"*"` can be used as short-hand for listing every field.
            ///   - properties:
            public init(
                fields: Swift.String? = nil,
                properties: Components.Schemas.SheetProperties? = nil
            ) {
                self.fields = fields
                self.properties = properties
            }
            public enum CodingKeys: String, CodingKey {
                case fields
                case properties
            }
        }
        /// Updates a slicer's specifications. (This does not move or resize a slicer. To move or resize a slicer use UpdateEmbeddedObjectPositionRequest.
        ///
        /// - Remark: Generated from `#/components/schemas/UpdateSlicerSpecRequest`.
        public struct UpdateSlicerSpecRequest: Codable, Hashable, Sendable {
            /// The fields that should be updated. At least one field must be specified. The root `SlicerSpec` is implied and should not be specified. A single "*"` can be used as short-hand for listing every field.
            ///
            /// - Remark: Generated from `#/components/schemas/UpdateSlicerSpecRequest/fields`.
            public var fields: Swift.String?
            /// The id of the slicer to update.
            ///
            /// - Remark: Generated from `#/components/schemas/UpdateSlicerSpecRequest/slicerId`.
            public var slicerId: Swift.Int32?
            /// - Remark: Generated from `#/components/schemas/UpdateSlicerSpecRequest/spec`.
            public var spec: Components.Schemas.SlicerSpec?
            /// Creates a new `UpdateSlicerSpecRequest`.
            ///
            /// - Parameters:
            ///   - fields: The fields that should be updated. At least one field must be specified. The root `SlicerSpec` is implied and should not be specified. A single "*"` can be used as short-hand for listing every field.
            ///   - slicerId: The id of the slicer to update.
            ///   - spec:
            public init(
                fields: Swift.String? = nil,
                slicerId: Swift.Int32? = nil,
                spec: Components.Schemas.SlicerSpec? = nil
            ) {
                self.fields = fields
                self.slicerId = slicerId
                self.spec = spec
            }
            public enum CodingKeys: String, CodingKey {
                case fields
                case slicerId
                case spec
            }
        }
        /// Updates properties of a spreadsheet.
        ///
        /// - Remark: Generated from `#/components/schemas/UpdateSpreadsheetPropertiesRequest`.
        public struct UpdateSpreadsheetPropertiesRequest: Codable, Hashable, Sendable {
            /// The fields that should be updated. At least one field must be specified. The root 'properties' is implied and should not be specified. A single `"*"` can be used as short-hand for listing every field.
            ///
            /// - Remark: Generated from `#/components/schemas/UpdateSpreadsheetPropertiesRequest/fields`.
            public var fields: Swift.String?
            /// - Remark: Generated from `#/components/schemas/UpdateSpreadsheetPropertiesRequest/properties`.
            public var properties: Components.Schemas.SpreadsheetProperties?
            /// Creates a new `UpdateSpreadsheetPropertiesRequest`.
            ///
            /// - Parameters:
            ///   - fields: The fields that should be updated. At least one field must be specified. The root 'properties' is implied and should not be specified. A single `"*"` can be used as short-hand for listing every field.
            ///   - properties:
            public init(
                fields: Swift.String? = nil,
                properties: Components.Schemas.SpreadsheetProperties? = nil
            ) {
                self.fields = fields
                self.properties = properties
            }
            public enum CodingKeys: String, CodingKey {
                case fields
                case properties
            }
        }
        /// The response when updating a range of values by a data filter in a spreadsheet.
        ///
        /// - Remark: Generated from `#/components/schemas/UpdateValuesByDataFilterResponse`.
        public struct UpdateValuesByDataFilterResponse: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/UpdateValuesByDataFilterResponse/dataFilter`.
            public var dataFilter: Components.Schemas.DataFilter?
            /// The number of cells updated.
            ///
            /// - Remark: Generated from `#/components/schemas/UpdateValuesByDataFilterResponse/updatedCells`.
            public var updatedCells: Swift.Int32?
            /// The number of columns where at least one cell in the column was updated.
            ///
            /// - Remark: Generated from `#/components/schemas/UpdateValuesByDataFilterResponse/updatedColumns`.
            public var updatedColumns: Swift.Int32?
            /// - Remark: Generated from `#/components/schemas/UpdateValuesByDataFilterResponse/updatedData`.
            public var updatedData: Components.Schemas.ValueRange?
            /// The range (in [A1 notation](/sheets/api/guides/concepts#cell)) that updates were applied to.
            ///
            /// - Remark: Generated from `#/components/schemas/UpdateValuesByDataFilterResponse/updatedRange`.
            public var updatedRange: Swift.String?
            /// The number of rows where at least one cell in the row was updated.
            ///
            /// - Remark: Generated from `#/components/schemas/UpdateValuesByDataFilterResponse/updatedRows`.
            public var updatedRows: Swift.Int32?
            /// Creates a new `UpdateValuesByDataFilterResponse`.
            ///
            /// - Parameters:
            ///   - dataFilter:
            ///   - updatedCells: The number of cells updated.
            ///   - updatedColumns: The number of columns where at least one cell in the column was updated.
            ///   - updatedData:
            ///   - updatedRange: The range (in [A1 notation](/sheets/api/guides/concepts#cell)) that updates were applied to.
            ///   - updatedRows: The number of rows where at least one cell in the row was updated.
            public init(
                dataFilter: Components.Schemas.DataFilter? = nil,
                updatedCells: Swift.Int32? = nil,
                updatedColumns: Swift.Int32? = nil,
                updatedData: Components.Schemas.ValueRange? = nil,
                updatedRange: Swift.String? = nil,
                updatedRows: Swift.Int32? = nil
            ) {
                self.dataFilter = dataFilter
                self.updatedCells = updatedCells
                self.updatedColumns = updatedColumns
                self.updatedData = updatedData
                self.updatedRange = updatedRange
                self.updatedRows = updatedRows
            }
            public enum CodingKeys: String, CodingKey {
                case dataFilter
                case updatedCells
                case updatedColumns
                case updatedData
                case updatedRange
                case updatedRows
            }
        }
        /// The response when updating a range of values in a spreadsheet.
        ///
        /// - Remark: Generated from `#/components/schemas/UpdateValuesResponse`.
        public struct UpdateValuesResponse: Codable, Hashable, Sendable {
            /// The spreadsheet the updates were applied to.
            ///
            /// - Remark: Generated from `#/components/schemas/UpdateValuesResponse/spreadsheetId`.
            public var spreadsheetId: Swift.String?
            /// The number of cells updated.
            ///
            /// - Remark: Generated from `#/components/schemas/UpdateValuesResponse/updatedCells`.
            public var updatedCells: Swift.Int32?
            /// The number of columns where at least one cell in the column was updated.
            ///
            /// - Remark: Generated from `#/components/schemas/UpdateValuesResponse/updatedColumns`.
            public var updatedColumns: Swift.Int32?
            /// - Remark: Generated from `#/components/schemas/UpdateValuesResponse/updatedData`.
            public var updatedData: Components.Schemas.ValueRange?
            /// The range (in A1 notation) that updates were applied to.
            ///
            /// - Remark: Generated from `#/components/schemas/UpdateValuesResponse/updatedRange`.
            public var updatedRange: Swift.String?
            /// The number of rows where at least one cell in the row was updated.
            ///
            /// - Remark: Generated from `#/components/schemas/UpdateValuesResponse/updatedRows`.
            public var updatedRows: Swift.Int32?
            /// Creates a new `UpdateValuesResponse`.
            ///
            /// - Parameters:
            ///   - spreadsheetId: The spreadsheet the updates were applied to.
            ///   - updatedCells: The number of cells updated.
            ///   - updatedColumns: The number of columns where at least one cell in the column was updated.
            ///   - updatedData:
            ///   - updatedRange: The range (in A1 notation) that updates were applied to.
            ///   - updatedRows: The number of rows where at least one cell in the row was updated.
            public init(
                spreadsheetId: Swift.String? = nil,
                updatedCells: Swift.Int32? = nil,
                updatedColumns: Swift.Int32? = nil,
                updatedData: Components.Schemas.ValueRange? = nil,
                updatedRange: Swift.String? = nil,
                updatedRows: Swift.Int32? = nil
            ) {
                self.spreadsheetId = spreadsheetId
                self.updatedCells = updatedCells
                self.updatedColumns = updatedColumns
                self.updatedData = updatedData
                self.updatedRange = updatedRange
                self.updatedRows = updatedRows
            }
            public enum CodingKeys: String, CodingKey {
                case spreadsheetId
                case updatedCells
                case updatedColumns
                case updatedData
                case updatedRange
                case updatedRows
            }
        }
        /// Data within a range of the spreadsheet.
        ///
        /// - Remark: Generated from `#/components/schemas/ValueRange`.
        public struct ValueRange: Codable, Hashable, Sendable {
            /// The major dimension of the values. For output, if the spreadsheet data is: `A1=1,B1=2,A2=3,B2=4`, then requesting `range=A1:B2,majorDimension=ROWS` will return `[[1,2],[3,4]]`, whereas requesting `range=A1:B2,majorDimension=COLUMNS` will return `[[1,3],[2,4]]`. For input, with `range=A1:B2,majorDimension=ROWS` then `[[1,2],[3,4]]` will set `A1=1,B1=2,A2=3,B2=4`. With `range=A1:B2,majorDimension=COLUMNS` then `[[1,2],[3,4]]` will set `A1=1,B1=3,A2=2,B2=4`. When writing, if this field is not set, it defaults to ROWS.
            ///
            /// - Remark: Generated from `#/components/schemas/ValueRange/majorDimension`.
            @frozen public enum MajorDimensionPayload: String, Codable, Hashable, Sendable, CaseIterable {
                case dimensionUnspecified = "DIMENSION_UNSPECIFIED"
                case rows = "ROWS"
                case columns = "COLUMNS"
            }
            /// The major dimension of the values. For output, if the spreadsheet data is: `A1=1,B1=2,A2=3,B2=4`, then requesting `range=A1:B2,majorDimension=ROWS` will return `[[1,2],[3,4]]`, whereas requesting `range=A1:B2,majorDimension=COLUMNS` will return `[[1,3],[2,4]]`. For input, with `range=A1:B2,majorDimension=ROWS` then `[[1,2],[3,4]]` will set `A1=1,B1=2,A2=3,B2=4`. With `range=A1:B2,majorDimension=COLUMNS` then `[[1,2],[3,4]]` will set `A1=1,B1=3,A2=2,B2=4`. When writing, if this field is not set, it defaults to ROWS.
            ///
            /// - Remark: Generated from `#/components/schemas/ValueRange/majorDimension`.
            public var majorDimension: Components.Schemas.ValueRange.MajorDimensionPayload?
            /// The range the values cover, in [A1 notation](/sheets/api/guides/concepts#cell). For output, this range indicates the entire requested range, even though the values will exclude trailing rows and columns. When appending values, this field represents the range to search for a table, after which values will be appended.
            ///
            /// - Remark: Generated from `#/components/schemas/ValueRange/range`.
            public var range: Swift.String?
            /// The data that was read or to be written. This is an array of arrays, the outer array representing all the data and each inner array representing a major dimension. Each item in the inner array corresponds with one cell. For output, empty trailing rows and columns will not be included. For input, supported value types are: bool, string, and double. Null values will be skipped. To set a cell to an empty value, set the string value to an empty string.
            ///
            /// - Remark: Generated from `#/components/schemas/ValueRange/values`.
            public var values: [[OpenAPIRuntime.OpenAPIValueContainer]]?
            /// Creates a new `ValueRange`.
            ///
            /// - Parameters:
            ///   - majorDimension: The major dimension of the values. For output, if the spreadsheet data is: `A1=1,B1=2,A2=3,B2=4`, then requesting `range=A1:B2,majorDimension=ROWS` will return `[[1,2],[3,4]]`, whereas requesting `range=A1:B2,majorDimension=COLUMNS` will return `[[1,3],[2,4]]`. For input, with `range=A1:B2,majorDimension=ROWS` then `[[1,2],[3,4]]` will set `A1=1,B1=2,A2=3,B2=4`. With `range=A1:B2,majorDimension=COLUMNS` then `[[1,2],[3,4]]` will set `A1=1,B1=3,A2=2,B2=4`. When writing, if this field is not set, it defaults to ROWS.
            ///   - range: The range the values cover, in [A1 notation](/sheets/api/guides/concepts#cell). For output, this range indicates the entire requested range, even though the values will exclude trailing rows and columns. When appending values, this field represents the range to search for a table, after which values will be appended.
            ///   - values: The data that was read or to be written. This is an array of arrays, the outer array representing all the data and each inner array representing a major dimension. Each item in the inner array corresponds with one cell. For output, empty trailing rows and columns will not be included. For input, supported value types are: bool, string, and double. Null values will be skipped. To set a cell to an empty value, set the string value to an empty string.
            public init(
                majorDimension: Components.Schemas.ValueRange.MajorDimensionPayload? = nil,
                range: Swift.String? = nil,
                values: [[OpenAPIRuntime.OpenAPIValueContainer]]? = nil
            ) {
                self.majorDimension = majorDimension
                self.range = range
                self.values = values
            }
            public enum CodingKeys: String, CodingKey {
                case majorDimension
                case range
                case values
            }
        }
        /// Styles for a waterfall chart column.
        ///
        /// - Remark: Generated from `#/components/schemas/WaterfallChartColumnStyle`.
        public struct WaterfallChartColumnStyle: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/WaterfallChartColumnStyle/color`.
            public var color: Components.Schemas.Color?
            /// - Remark: Generated from `#/components/schemas/WaterfallChartColumnStyle/colorStyle`.
            public var colorStyle: Components.Schemas.ColorStyle?
            /// The label of the column's legend.
            ///
            /// - Remark: Generated from `#/components/schemas/WaterfallChartColumnStyle/label`.
            public var label: Swift.String?
            /// Creates a new `WaterfallChartColumnStyle`.
            ///
            /// - Parameters:
            ///   - color:
            ///   - colorStyle:
            ///   - label: The label of the column's legend.
            public init(
                color: Components.Schemas.Color? = nil,
                colorStyle: Components.Schemas.ColorStyle? = nil,
                label: Swift.String? = nil
            ) {
                self.color = color
                self.colorStyle = colorStyle
                self.label = label
            }
            public enum CodingKeys: String, CodingKey {
                case color
                case colorStyle
                case label
            }
        }
        /// A custom subtotal column for a waterfall chart series.
        ///
        /// - Remark: Generated from `#/components/schemas/WaterfallChartCustomSubtotal`.
        public struct WaterfallChartCustomSubtotal: Codable, Hashable, Sendable {
            /// True if the data point at subtotal_index is the subtotal. If false, the subtotal will be computed and appear after the data point.
            ///
            /// - Remark: Generated from `#/components/schemas/WaterfallChartCustomSubtotal/dataIsSubtotal`.
            public var dataIsSubtotal: Swift.Bool?
            /// A label for the subtotal column.
            ///
            /// - Remark: Generated from `#/components/schemas/WaterfallChartCustomSubtotal/label`.
            public var label: Swift.String?
            /// The zero-based index of a data point within the series. If data_is_subtotal is true, the data point at this index is the subtotal. Otherwise, the subtotal appears after the data point with this index. A series can have multiple subtotals at arbitrary indices, but subtotals do not affect the indices of the data points. For example, if a series has three data points, their indices will always be 0, 1, and 2, regardless of how many subtotals exist on the series or what data points they are associated with.
            ///
            /// - Remark: Generated from `#/components/schemas/WaterfallChartCustomSubtotal/subtotalIndex`.
            public var subtotalIndex: Swift.Int32?
            /// Creates a new `WaterfallChartCustomSubtotal`.
            ///
            /// - Parameters:
            ///   - dataIsSubtotal: True if the data point at subtotal_index is the subtotal. If false, the subtotal will be computed and appear after the data point.
            ///   - label: A label for the subtotal column.
            ///   - subtotalIndex: The zero-based index of a data point within the series. If data_is_subtotal is true, the data point at this index is the subtotal. Otherwise, the subtotal appears after the data point with this index. A series can have multiple subtotals at arbitrary indices, but subtotals do not affect the indices of the data points. For example, if a series has three data points, their indices will always be 0, 1, and 2, regardless of how many subtotals exist on the series or what data points they are associated with.
            public init(
                dataIsSubtotal: Swift.Bool? = nil,
                label: Swift.String? = nil,
                subtotalIndex: Swift.Int32? = nil
            ) {
                self.dataIsSubtotal = dataIsSubtotal
                self.label = label
                self.subtotalIndex = subtotalIndex
            }
            public enum CodingKeys: String, CodingKey {
                case dataIsSubtotal
                case label
                case subtotalIndex
            }
        }
        /// The domain of a waterfall chart.
        ///
        /// - Remark: Generated from `#/components/schemas/WaterfallChartDomain`.
        public struct WaterfallChartDomain: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/WaterfallChartDomain/data`.
            public var data: Components.Schemas.ChartData?
            /// True to reverse the order of the domain values (horizontal axis).
            ///
            /// - Remark: Generated from `#/components/schemas/WaterfallChartDomain/reversed`.
            public var reversed: Swift.Bool?
            /// Creates a new `WaterfallChartDomain`.
            ///
            /// - Parameters:
            ///   - data:
            ///   - reversed: True to reverse the order of the domain values (horizontal axis).
            public init(
                data: Components.Schemas.ChartData? = nil,
                reversed: Swift.Bool? = nil
            ) {
                self.data = data
                self.reversed = reversed
            }
            public enum CodingKeys: String, CodingKey {
                case data
                case reversed
            }
        }
        /// A single series of data for a waterfall chart.
        ///
        /// - Remark: Generated from `#/components/schemas/WaterfallChartSeries`.
        public struct WaterfallChartSeries: Codable, Hashable, Sendable {
            /// Custom subtotal columns appearing in this series. The order in which subtotals are defined is not significant. Only one subtotal may be defined for each data point.
            ///
            /// - Remark: Generated from `#/components/schemas/WaterfallChartSeries/customSubtotals`.
            public var customSubtotals: [Components.Schemas.WaterfallChartCustomSubtotal]?
            /// - Remark: Generated from `#/components/schemas/WaterfallChartSeries/data`.
            public var data: Components.Schemas.ChartData?
            /// - Remark: Generated from `#/components/schemas/WaterfallChartSeries/dataLabel`.
            public var dataLabel: Components.Schemas.DataLabel?
            /// True to hide the subtotal column from the end of the series. By default, a subtotal column will appear at the end of each series. Setting this field to true will hide that subtotal column for this series.
            ///
            /// - Remark: Generated from `#/components/schemas/WaterfallChartSeries/hideTrailingSubtotal`.
            public var hideTrailingSubtotal: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/WaterfallChartSeries/negativeColumnsStyle`.
            public var negativeColumnsStyle: Components.Schemas.WaterfallChartColumnStyle?
            /// - Remark: Generated from `#/components/schemas/WaterfallChartSeries/positiveColumnsStyle`.
            public var positiveColumnsStyle: Components.Schemas.WaterfallChartColumnStyle?
            /// - Remark: Generated from `#/components/schemas/WaterfallChartSeries/subtotalColumnsStyle`.
            public var subtotalColumnsStyle: Components.Schemas.WaterfallChartColumnStyle?
            /// Creates a new `WaterfallChartSeries`.
            ///
            /// - Parameters:
            ///   - customSubtotals: Custom subtotal columns appearing in this series. The order in which subtotals are defined is not significant. Only one subtotal may be defined for each data point.
            ///   - data:
            ///   - dataLabel:
            ///   - hideTrailingSubtotal: True to hide the subtotal column from the end of the series. By default, a subtotal column will appear at the end of each series. Setting this field to true will hide that subtotal column for this series.
            ///   - negativeColumnsStyle:
            ///   - positiveColumnsStyle:
            ///   - subtotalColumnsStyle:
            public init(
                customSubtotals: [Components.Schemas.WaterfallChartCustomSubtotal]? = nil,
                data: Components.Schemas.ChartData? = nil,
                dataLabel: Components.Schemas.DataLabel? = nil,
                hideTrailingSubtotal: Swift.Bool? = nil,
                negativeColumnsStyle: Components.Schemas.WaterfallChartColumnStyle? = nil,
                positiveColumnsStyle: Components.Schemas.WaterfallChartColumnStyle? = nil,
                subtotalColumnsStyle: Components.Schemas.WaterfallChartColumnStyle? = nil
            ) {
                self.customSubtotals = customSubtotals
                self.data = data
                self.dataLabel = dataLabel
                self.hideTrailingSubtotal = hideTrailingSubtotal
                self.negativeColumnsStyle = negativeColumnsStyle
                self.positiveColumnsStyle = positiveColumnsStyle
                self.subtotalColumnsStyle = subtotalColumnsStyle
            }
            public enum CodingKeys: String, CodingKey {
                case customSubtotals
                case data
                case dataLabel
                case hideTrailingSubtotal
                case negativeColumnsStyle
                case positiveColumnsStyle
                case subtotalColumnsStyle
            }
        }
        /// A waterfall chart.
        ///
        /// - Remark: Generated from `#/components/schemas/WaterfallChartSpec`.
        public struct WaterfallChartSpec: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/WaterfallChartSpec/connectorLineStyle`.
            public var connectorLineStyle: Components.Schemas.LineStyle?
            /// - Remark: Generated from `#/components/schemas/WaterfallChartSpec/domain`.
            public var domain: Components.Schemas.WaterfallChartDomain?
            /// True to interpret the first value as a total.
            ///
            /// - Remark: Generated from `#/components/schemas/WaterfallChartSpec/firstValueIsTotal`.
            public var firstValueIsTotal: Swift.Bool?
            /// True to hide connector lines between columns.
            ///
            /// - Remark: Generated from `#/components/schemas/WaterfallChartSpec/hideConnectorLines`.
            public var hideConnectorLines: Swift.Bool?
            /// The data this waterfall chart is visualizing.
            ///
            /// - Remark: Generated from `#/components/schemas/WaterfallChartSpec/series`.
            public var series: [Components.Schemas.WaterfallChartSeries]?
            /// The stacked type.
            ///
            /// - Remark: Generated from `#/components/schemas/WaterfallChartSpec/stackedType`.
            @frozen public enum StackedTypePayload: String, Codable, Hashable, Sendable, CaseIterable {
                case waterfallStackedTypeUnspecified = "WATERFALL_STACKED_TYPE_UNSPECIFIED"
                case stacked = "STACKED"
                case sequential = "SEQUENTIAL"
            }
            /// The stacked type.
            ///
            /// - Remark: Generated from `#/components/schemas/WaterfallChartSpec/stackedType`.
            public var stackedType: Components.Schemas.WaterfallChartSpec.StackedTypePayload?
            /// - Remark: Generated from `#/components/schemas/WaterfallChartSpec/totalDataLabel`.
            public var totalDataLabel: Components.Schemas.DataLabel?
            /// Creates a new `WaterfallChartSpec`.
            ///
            /// - Parameters:
            ///   - connectorLineStyle:
            ///   - domain:
            ///   - firstValueIsTotal: True to interpret the first value as a total.
            ///   - hideConnectorLines: True to hide connector lines between columns.
            ///   - series: The data this waterfall chart is visualizing.
            ///   - stackedType: The stacked type.
            ///   - totalDataLabel:
            public init(
                connectorLineStyle: Components.Schemas.LineStyle? = nil,
                domain: Components.Schemas.WaterfallChartDomain? = nil,
                firstValueIsTotal: Swift.Bool? = nil,
                hideConnectorLines: Swift.Bool? = nil,
                series: [Components.Schemas.WaterfallChartSeries]? = nil,
                stackedType: Components.Schemas.WaterfallChartSpec.StackedTypePayload? = nil,
                totalDataLabel: Components.Schemas.DataLabel? = nil
            ) {
                self.connectorLineStyle = connectorLineStyle
                self.domain = domain
                self.firstValueIsTotal = firstValueIsTotal
                self.hideConnectorLines = hideConnectorLines
                self.series = series
                self.stackedType = stackedType
                self.totalDataLabel = totalDataLabel
            }
            public enum CodingKeys: String, CodingKey {
                case connectorLineStyle
                case domain
                case firstValueIsTotal
                case hideConnectorLines
                case series
                case stackedType
                case totalDataLabel
            }
        }
    }
    /// Types generated from the `#/components/parameters` section of the OpenAPI document.
    public enum Parameters {
        /// V1 error format.
        ///
        /// - Remark: Generated from `#/components/parameters/_.xgafv`.
        @frozen public enum __period_xgafv: String, Codable, Hashable, Sendable, CaseIterable {
            case _1 = "1"
            case _2 = "2"
        }
        /// OAuth access token.
        ///
        /// - Remark: Generated from `#/components/parameters/access_token`.
        public typealias AccessToken = Swift.String
        /// Data format for response.
        ///
        /// - Remark: Generated from `#/components/parameters/alt`.
        @frozen public enum Alt: String, Codable, Hashable, Sendable, CaseIterable {
            case json = "json"
            case media = "media"
            case proto = "proto"
        }
        /// JSONP
        ///
        /// - Remark: Generated from `#/components/parameters/callback`.
        public typealias Callback = Swift.String
        /// Selector specifying which fields to include in a partial response.
        ///
        /// - Remark: Generated from `#/components/parameters/fields`.
        public typealias Fields = Swift.String
        /// API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
        ///
        /// - Remark: Generated from `#/components/parameters/key`.
        public typealias Key = Swift.String
        /// OAuth 2.0 token for the current user.
        ///
        /// - Remark: Generated from `#/components/parameters/oauth_token`.
        public typealias OauthToken = Swift.String
        /// Returns response with indentations and line breaks.
        ///
        /// - Remark: Generated from `#/components/parameters/prettyPrint`.
        public typealias PrettyPrint = Swift.Bool
        /// Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
        ///
        /// - Remark: Generated from `#/components/parameters/quotaUser`.
        public typealias QuotaUser = Swift.String
        /// Legacy upload protocol for media (e.g. "media", "multipart").
        ///
        /// - Remark: Generated from `#/components/parameters/uploadType`.
        public typealias UploadType = Swift.String
        /// Upload protocol for media (e.g. "raw", "multipart").
        ///
        /// - Remark: Generated from `#/components/parameters/upload_protocol`.
        public typealias UploadProtocol = Swift.String
    }
    /// Types generated from the `#/components/requestBodies` section of the OpenAPI document.
    public enum RequestBodies {}
    /// Types generated from the `#/components/responses` section of the OpenAPI document.
    public enum Responses {}
    /// Types generated from the `#/components/headers` section of the OpenAPI document.
    public enum Headers {}
}

/// API operations, with input and output types, generated from `#/paths` in the OpenAPI document.
public enum Operations {
    /// Creates a spreadsheet, returning the newly created spreadsheet.
    ///
    /// - Remark: HTTP `POST /v4/spreadsheets`.
    /// - Remark: Generated from `#/paths//v4/spreadsheets/post(sheets.spreadsheets.create)`.
    public enum Sheets_spreadsheets_create {
        public static let id: Swift.String = "sheets.spreadsheets.create"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/v4/spreadsheets/POST/query`.
            public struct Query: Sendable, Hashable {
                /// - Remark: Generated from `#/components/parameters/_.xgafv`.
                @frozen public enum __period_xgafv: String, Codable, Hashable, Sendable, CaseIterable {
                    case _1 = "1"
                    case _2 = "2"
                }
                /// V1 error format.
                ///
                /// - Remark: Generated from `#/paths/v4/spreadsheets/POST/query/$.xgafv`.
                public var _dollar__xgafv: Components.Parameters.__period_xgafv?
                /// OAuth access token.
                ///
                /// - Remark: Generated from `#/paths/v4/spreadsheets/POST/query/access_token`.
                public var accessToken: Components.Parameters.AccessToken?
                /// - Remark: Generated from `#/components/parameters/alt`.
                @frozen public enum Alt: String, Codable, Hashable, Sendable, CaseIterable {
                    case json = "json"
                    case media = "media"
                    case proto = "proto"
                }
                /// Data format for response.
                ///
                /// - Remark: Generated from `#/paths/v4/spreadsheets/POST/query/alt`.
                public var alt: Components.Parameters.Alt?
                /// JSONP
                ///
                /// - Remark: Generated from `#/paths/v4/spreadsheets/POST/query/callback`.
                public var callback: Components.Parameters.Callback?
                /// Selector specifying which fields to include in a partial response.
                ///
                /// - Remark: Generated from `#/paths/v4/spreadsheets/POST/query/fields`.
                public var fields: Components.Parameters.Fields?
                /// API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
                ///
                /// - Remark: Generated from `#/paths/v4/spreadsheets/POST/query/key`.
                public var key: Components.Parameters.Key?
                /// OAuth 2.0 token for the current user.
                ///
                /// - Remark: Generated from `#/paths/v4/spreadsheets/POST/query/oauth_token`.
                public var oauthToken: Components.Parameters.OauthToken?
                /// Returns response with indentations and line breaks.
                ///
                /// - Remark: Generated from `#/paths/v4/spreadsheets/POST/query/prettyPrint`.
                public var prettyPrint: Components.Parameters.PrettyPrint?
                /// Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
                ///
                /// - Remark: Generated from `#/paths/v4/spreadsheets/POST/query/quotaUser`.
                public var quotaUser: Components.Parameters.QuotaUser?
                /// Upload protocol for media (e.g. "raw", "multipart").
                ///
                /// - Remark: Generated from `#/paths/v4/spreadsheets/POST/query/upload_protocol`.
                public var uploadProtocol: Components.Parameters.UploadProtocol?
                /// Legacy upload protocol for media (e.g. "media", "multipart").
                ///
                /// - Remark: Generated from `#/paths/v4/spreadsheets/POST/query/uploadType`.
                public var uploadType: Components.Parameters.UploadType?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - _dollar__xgafv: V1 error format.
                ///   - accessToken: OAuth access token.
                ///   - alt: Data format for response.
                ///   - callback: JSONP
                ///   - fields: Selector specifying which fields to include in a partial response.
                ///   - key: API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
                ///   - oauthToken: OAuth 2.0 token for the current user.
                ///   - prettyPrint: Returns response with indentations and line breaks.
                ///   - quotaUser: Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
                ///   - uploadProtocol: Upload protocol for media (e.g. "raw", "multipart").
                ///   - uploadType: Legacy upload protocol for media (e.g. "media", "multipart").
                public init(
                    _dollar__xgafv: Components.Parameters.__period_xgafv? = nil,
                    accessToken: Components.Parameters.AccessToken? = nil,
                    alt: Components.Parameters.Alt? = nil,
                    callback: Components.Parameters.Callback? = nil,
                    fields: Components.Parameters.Fields? = nil,
                    key: Components.Parameters.Key? = nil,
                    oauthToken: Components.Parameters.OauthToken? = nil,
                    prettyPrint: Components.Parameters.PrettyPrint? = nil,
                    quotaUser: Components.Parameters.QuotaUser? = nil,
                    uploadProtocol: Components.Parameters.UploadProtocol? = nil,
                    uploadType: Components.Parameters.UploadType? = nil
                ) {
                    self._dollar__xgafv = _dollar__xgafv
                    self.accessToken = accessToken
                    self.alt = alt
                    self.callback = callback
                    self.fields = fields
                    self.key = key
                    self.oauthToken = oauthToken
                    self.prettyPrint = prettyPrint
                    self.quotaUser = quotaUser
                    self.uploadProtocol = uploadProtocol
                    self.uploadType = uploadType
                }
            }
            public var query: Operations.Sheets_spreadsheets_create.Input.Query
            /// - Remark: Generated from `#/paths/v4/spreadsheets/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.Sheets_spreadsheets_create.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.Sheets_spreadsheets_create.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.Sheets_spreadsheets_create.Input.Headers
            /// - Remark: Generated from `#/paths/v4/spreadsheets/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/v4/spreadsheets/POST/requestBody/content/application\/json`.
                case json(Components.Schemas.Spreadsheet)
            }
            public var body: Operations.Sheets_spreadsheets_create.Input.Body?
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - query:
            ///   - headers:
            ///   - body:
            public init(
                query: Operations.Sheets_spreadsheets_create.Input.Query = .init(),
                headers: Operations.Sheets_spreadsheets_create.Input.Headers = .init(),
                body: Operations.Sheets_spreadsheets_create.Input.Body? = nil
            ) {
                self.query = query
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/v4/spreadsheets/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/v4/spreadsheets/POST/responses/200/content/application\/json`.
                    case json(Components.Schemas.Spreadsheet)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.Spreadsheet {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.Sheets_spreadsheets_create.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.Sheets_spreadsheets_create.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Successful response
            ///
            /// - Remark: Generated from `#/paths//v4/spreadsheets/post(sheets.spreadsheets.create)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.Sheets_spreadsheets_create.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.Sheets_spreadsheets_create.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Returns the spreadsheet at the given ID. The caller must specify the spreadsheet ID. By default, data within grids is not returned. You can include grid data in one of 2 ways: * Specify a [field mask](https://developers.google.com/sheets/api/guides/field-masks) listing your desired fields using the `fields` URL parameter in HTTP * Set the includeGridData URL parameter to true. If a field mask is set, the `includeGridData` parameter is ignored For large spreadsheets, as a best practice, retrieve only the specific spreadsheet fields that you want. To retrieve only subsets of spreadsheet data, use the ranges URL parameter. Ranges are specified using [A1 notation](/sheets/api/guides/concepts#cell). You can define a single cell (for example, `A1`) or multiple cells (for example, `A1:D5`). You can also get cells from other sheets within the same spreadsheet (for example, `Sheet2!A1:C4`) or retrieve multiple ranges at once (for example, `?ranges=A1:D5&ranges=Sheet2!A1:C4`). Limiting the range returns only the portions of the spreadsheet that intersect the requested ranges.
    ///
    /// - Remark: HTTP `GET /v4/spreadsheets/{spreadsheetId}`.
    /// - Remark: Generated from `#/paths//v4/spreadsheets/{spreadsheetId}/get(sheets.spreadsheets.get)`.
    public enum Sheets_spreadsheets_get {
        public static let id: Swift.String = "sheets.spreadsheets.get"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/v4/spreadsheets/{spreadsheetId}/GET/path`.
            public struct Path: Sendable, Hashable {
                /// The spreadsheet to request.
                ///
                /// - Remark: Generated from `#/paths/v4/spreadsheets/{spreadsheetId}/GET/path/spreadsheetId`.
                public var spreadsheetId: Swift.String
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - spreadsheetId: The spreadsheet to request.
                public init(spreadsheetId: Swift.String) {
                    self.spreadsheetId = spreadsheetId
                }
            }
            public var path: Operations.Sheets_spreadsheets_get.Input.Path
            /// - Remark: Generated from `#/paths/v4/spreadsheets/{spreadsheetId}/GET/query`.
            public struct Query: Sendable, Hashable {
                /// - Remark: Generated from `#/components/parameters/_.xgafv`.
                @frozen public enum __period_xgafv: String, Codable, Hashable, Sendable, CaseIterable {
                    case _1 = "1"
                    case _2 = "2"
                }
                /// V1 error format.
                ///
                /// - Remark: Generated from `#/paths/v4/spreadsheets/{spreadsheetId}/GET/query/$.xgafv`.
                public var _dollar__xgafv: Components.Parameters.__period_xgafv?
                /// OAuth access token.
                ///
                /// - Remark: Generated from `#/paths/v4/spreadsheets/{spreadsheetId}/GET/query/access_token`.
                public var accessToken: Components.Parameters.AccessToken?
                /// - Remark: Generated from `#/components/parameters/alt`.
                @frozen public enum Alt: String, Codable, Hashable, Sendable, CaseIterable {
                    case json = "json"
                    case media = "media"
                    case proto = "proto"
                }
                /// Data format for response.
                ///
                /// - Remark: Generated from `#/paths/v4/spreadsheets/{spreadsheetId}/GET/query/alt`.
                public var alt: Components.Parameters.Alt?
                /// JSONP
                ///
                /// - Remark: Generated from `#/paths/v4/spreadsheets/{spreadsheetId}/GET/query/callback`.
                public var callback: Components.Parameters.Callback?
                /// Selector specifying which fields to include in a partial response.
                ///
                /// - Remark: Generated from `#/paths/v4/spreadsheets/{spreadsheetId}/GET/query/fields`.
                public var fields: Components.Parameters.Fields?
                /// API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
                ///
                /// - Remark: Generated from `#/paths/v4/spreadsheets/{spreadsheetId}/GET/query/key`.
                public var key: Components.Parameters.Key?
                /// OAuth 2.0 token for the current user.
                ///
                /// - Remark: Generated from `#/paths/v4/spreadsheets/{spreadsheetId}/GET/query/oauth_token`.
                public var oauthToken: Components.Parameters.OauthToken?
                /// Returns response with indentations and line breaks.
                ///
                /// - Remark: Generated from `#/paths/v4/spreadsheets/{spreadsheetId}/GET/query/prettyPrint`.
                public var prettyPrint: Components.Parameters.PrettyPrint?
                /// Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
                ///
                /// - Remark: Generated from `#/paths/v4/spreadsheets/{spreadsheetId}/GET/query/quotaUser`.
                public var quotaUser: Components.Parameters.QuotaUser?
                /// Upload protocol for media (e.g. "raw", "multipart").
                ///
                /// - Remark: Generated from `#/paths/v4/spreadsheets/{spreadsheetId}/GET/query/upload_protocol`.
                public var uploadProtocol: Components.Parameters.UploadProtocol?
                /// Legacy upload protocol for media (e.g. "media", "multipart").
                ///
                /// - Remark: Generated from `#/paths/v4/spreadsheets/{spreadsheetId}/GET/query/uploadType`.
                public var uploadType: Components.Parameters.UploadType?
                /// True if grid data should be returned. This parameter is ignored if a field mask was set in the request.
                ///
                /// - Remark: Generated from `#/paths/v4/spreadsheets/{spreadsheetId}/GET/query/includeGridData`.
                public var includeGridData: Swift.Bool?
                /// The ranges to retrieve from the spreadsheet.
                ///
                /// - Remark: Generated from `#/paths/v4/spreadsheets/{spreadsheetId}/GET/query/ranges`.
                public var ranges: [Swift.String]?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - _dollar__xgafv: V1 error format.
                ///   - accessToken: OAuth access token.
                ///   - alt: Data format for response.
                ///   - callback: JSONP
                ///   - fields: Selector specifying which fields to include in a partial response.
                ///   - key: API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
                ///   - oauthToken: OAuth 2.0 token for the current user.
                ///   - prettyPrint: Returns response with indentations and line breaks.
                ///   - quotaUser: Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
                ///   - uploadProtocol: Upload protocol for media (e.g. "raw", "multipart").
                ///   - uploadType: Legacy upload protocol for media (e.g. "media", "multipart").
                ///   - includeGridData: True if grid data should be returned. This parameter is ignored if a field mask was set in the request.
                ///   - ranges: The ranges to retrieve from the spreadsheet.
                public init(
                    _dollar__xgafv: Components.Parameters.__period_xgafv? = nil,
                    accessToken: Components.Parameters.AccessToken? = nil,
                    alt: Components.Parameters.Alt? = nil,
                    callback: Components.Parameters.Callback? = nil,
                    fields: Components.Parameters.Fields? = nil,
                    key: Components.Parameters.Key? = nil,
                    oauthToken: Components.Parameters.OauthToken? = nil,
                    prettyPrint: Components.Parameters.PrettyPrint? = nil,
                    quotaUser: Components.Parameters.QuotaUser? = nil,
                    uploadProtocol: Components.Parameters.UploadProtocol? = nil,
                    uploadType: Components.Parameters.UploadType? = nil,
                    includeGridData: Swift.Bool? = nil,
                    ranges: [Swift.String]? = nil
                ) {
                    self._dollar__xgafv = _dollar__xgafv
                    self.accessToken = accessToken
                    self.alt = alt
                    self.callback = callback
                    self.fields = fields
                    self.key = key
                    self.oauthToken = oauthToken
                    self.prettyPrint = prettyPrint
                    self.quotaUser = quotaUser
                    self.uploadProtocol = uploadProtocol
                    self.uploadType = uploadType
                    self.includeGridData = includeGridData
                    self.ranges = ranges
                }
            }
            public var query: Operations.Sheets_spreadsheets_get.Input.Query
            /// - Remark: Generated from `#/paths/v4/spreadsheets/{spreadsheetId}/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.Sheets_spreadsheets_get.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.Sheets_spreadsheets_get.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.Sheets_spreadsheets_get.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - query:
            ///   - headers:
            public init(
                path: Operations.Sheets_spreadsheets_get.Input.Path,
                query: Operations.Sheets_spreadsheets_get.Input.Query = .init(),
                headers: Operations.Sheets_spreadsheets_get.Input.Headers = .init()
            ) {
                self.path = path
                self.query = query
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/v4/spreadsheets/{spreadsheetId}/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/v4/spreadsheets/{spreadsheetId}/GET/responses/200/content/application\/json`.
                    case json(Components.Schemas.Spreadsheet)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.Spreadsheet {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.Sheets_spreadsheets_get.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.Sheets_spreadsheets_get.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Successful response
            ///
            /// - Remark: Generated from `#/paths//v4/spreadsheets/{spreadsheetId}/get(sheets.spreadsheets.get)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.Sheets_spreadsheets_get.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.Sheets_spreadsheets_get.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Returns the developer metadata with the specified ID. The caller must specify the spreadsheet ID and the developer metadata's unique metadataId.
    ///
    /// - Remark: HTTP `GET /v4/spreadsheets/{spreadsheetId}/developerMetadata/{metadataId}`.
    /// - Remark: Generated from `#/paths//v4/spreadsheets/{spreadsheetId}/developerMetadata/{metadataId}/get(sheets.spreadsheets.developerMetadata.get)`.
    public enum Sheets_spreadsheets_developerMetadata_get {
        public static let id: Swift.String = "sheets.spreadsheets.developerMetadata.get"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/v4/spreadsheets/{spreadsheetId}/developerMetadata/{metadataId}/GET/path`.
            public struct Path: Sendable, Hashable {
                /// The ID of the spreadsheet to retrieve metadata from.
                ///
                /// - Remark: Generated from `#/paths/v4/spreadsheets/{spreadsheetId}/developerMetadata/{metadataId}/GET/path/spreadsheetId`.
                public var spreadsheetId: Swift.String
                /// The ID of the developer metadata to retrieve.
                ///
                /// - Remark: Generated from `#/paths/v4/spreadsheets/{spreadsheetId}/developerMetadata/{metadataId}/GET/path/metadataId`.
                public var metadataId: Swift.Int
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - spreadsheetId: The ID of the spreadsheet to retrieve metadata from.
                ///   - metadataId: The ID of the developer metadata to retrieve.
                public init(
                    spreadsheetId: Swift.String,
                    metadataId: Swift.Int
                ) {
                    self.spreadsheetId = spreadsheetId
                    self.metadataId = metadataId
                }
            }
            public var path: Operations.Sheets_spreadsheets_developerMetadata_get.Input.Path
            /// - Remark: Generated from `#/paths/v4/spreadsheets/{spreadsheetId}/developerMetadata/{metadataId}/GET/query`.
            public struct Query: Sendable, Hashable {
                /// - Remark: Generated from `#/components/parameters/_.xgafv`.
                @frozen public enum __period_xgafv: String, Codable, Hashable, Sendable, CaseIterable {
                    case _1 = "1"
                    case _2 = "2"
                }
                /// V1 error format.
                ///
                /// - Remark: Generated from `#/paths/v4/spreadsheets/{spreadsheetId}/developerMetadata/{metadataId}/GET/query/$.xgafv`.
                public var _dollar__xgafv: Components.Parameters.__period_xgafv?
                /// OAuth access token.
                ///
                /// - Remark: Generated from `#/paths/v4/spreadsheets/{spreadsheetId}/developerMetadata/{metadataId}/GET/query/access_token`.
                public var accessToken: Components.Parameters.AccessToken?
                /// - Remark: Generated from `#/components/parameters/alt`.
                @frozen public enum Alt: String, Codable, Hashable, Sendable, CaseIterable {
                    case json = "json"
                    case media = "media"
                    case proto = "proto"
                }
                /// Data format for response.
                ///
                /// - Remark: Generated from `#/paths/v4/spreadsheets/{spreadsheetId}/developerMetadata/{metadataId}/GET/query/alt`.
                public var alt: Components.Parameters.Alt?
                /// JSONP
                ///
                /// - Remark: Generated from `#/paths/v4/spreadsheets/{spreadsheetId}/developerMetadata/{metadataId}/GET/query/callback`.
                public var callback: Components.Parameters.Callback?
                /// Selector specifying which fields to include in a partial response.
                ///
                /// - Remark: Generated from `#/paths/v4/spreadsheets/{spreadsheetId}/developerMetadata/{metadataId}/GET/query/fields`.
                public var fields: Components.Parameters.Fields?
                /// API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
                ///
                /// - Remark: Generated from `#/paths/v4/spreadsheets/{spreadsheetId}/developerMetadata/{metadataId}/GET/query/key`.
                public var key: Components.Parameters.Key?
                /// OAuth 2.0 token for the current user.
                ///
                /// - Remark: Generated from `#/paths/v4/spreadsheets/{spreadsheetId}/developerMetadata/{metadataId}/GET/query/oauth_token`.
                public var oauthToken: Components.Parameters.OauthToken?
                /// Returns response with indentations and line breaks.
                ///
                /// - Remark: Generated from `#/paths/v4/spreadsheets/{spreadsheetId}/developerMetadata/{metadataId}/GET/query/prettyPrint`.
                public var prettyPrint: Components.Parameters.PrettyPrint?
                /// Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
                ///
                /// - Remark: Generated from `#/paths/v4/spreadsheets/{spreadsheetId}/developerMetadata/{metadataId}/GET/query/quotaUser`.
                public var quotaUser: Components.Parameters.QuotaUser?
                /// Upload protocol for media (e.g. "raw", "multipart").
                ///
                /// - Remark: Generated from `#/paths/v4/spreadsheets/{spreadsheetId}/developerMetadata/{metadataId}/GET/query/upload_protocol`.
                public var uploadProtocol: Components.Parameters.UploadProtocol?
                /// Legacy upload protocol for media (e.g. "media", "multipart").
                ///
                /// - Remark: Generated from `#/paths/v4/spreadsheets/{spreadsheetId}/developerMetadata/{metadataId}/GET/query/uploadType`.
                public var uploadType: Components.Parameters.UploadType?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - _dollar__xgafv: V1 error format.
                ///   - accessToken: OAuth access token.
                ///   - alt: Data format for response.
                ///   - callback: JSONP
                ///   - fields: Selector specifying which fields to include in a partial response.
                ///   - key: API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
                ///   - oauthToken: OAuth 2.0 token for the current user.
                ///   - prettyPrint: Returns response with indentations and line breaks.
                ///   - quotaUser: Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
                ///   - uploadProtocol: Upload protocol for media (e.g. "raw", "multipart").
                ///   - uploadType: Legacy upload protocol for media (e.g. "media", "multipart").
                public init(
                    _dollar__xgafv: Components.Parameters.__period_xgafv? = nil,
                    accessToken: Components.Parameters.AccessToken? = nil,
                    alt: Components.Parameters.Alt? = nil,
                    callback: Components.Parameters.Callback? = nil,
                    fields: Components.Parameters.Fields? = nil,
                    key: Components.Parameters.Key? = nil,
                    oauthToken: Components.Parameters.OauthToken? = nil,
                    prettyPrint: Components.Parameters.PrettyPrint? = nil,
                    quotaUser: Components.Parameters.QuotaUser? = nil,
                    uploadProtocol: Components.Parameters.UploadProtocol? = nil,
                    uploadType: Components.Parameters.UploadType? = nil
                ) {
                    self._dollar__xgafv = _dollar__xgafv
                    self.accessToken = accessToken
                    self.alt = alt
                    self.callback = callback
                    self.fields = fields
                    self.key = key
                    self.oauthToken = oauthToken
                    self.prettyPrint = prettyPrint
                    self.quotaUser = quotaUser
                    self.uploadProtocol = uploadProtocol
                    self.uploadType = uploadType
                }
            }
            public var query: Operations.Sheets_spreadsheets_developerMetadata_get.Input.Query
            /// - Remark: Generated from `#/paths/v4/spreadsheets/{spreadsheetId}/developerMetadata/{metadataId}/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.Sheets_spreadsheets_developerMetadata_get.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.Sheets_spreadsheets_developerMetadata_get.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.Sheets_spreadsheets_developerMetadata_get.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - query:
            ///   - headers:
            public init(
                path: Operations.Sheets_spreadsheets_developerMetadata_get.Input.Path,
                query: Operations.Sheets_spreadsheets_developerMetadata_get.Input.Query = .init(),
                headers: Operations.Sheets_spreadsheets_developerMetadata_get.Input.Headers = .init()
            ) {
                self.path = path
                self.query = query
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/v4/spreadsheets/{spreadsheetId}/developerMetadata/{metadataId}/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/v4/spreadsheets/{spreadsheetId}/developerMetadata/{metadataId}/GET/responses/200/content/application\/json`.
                    case json(Components.Schemas.DeveloperMetadata)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.DeveloperMetadata {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.Sheets_spreadsheets_developerMetadata_get.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.Sheets_spreadsheets_developerMetadata_get.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Successful response
            ///
            /// - Remark: Generated from `#/paths//v4/spreadsheets/{spreadsheetId}/developerMetadata/{metadataId}/get(sheets.spreadsheets.developerMetadata.get)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.Sheets_spreadsheets_developerMetadata_get.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.Sheets_spreadsheets_developerMetadata_get.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Returns all developer metadata matching the specified DataFilter. If the provided DataFilter represents a DeveloperMetadataLookup object, this will return all DeveloperMetadata entries selected by it. If the DataFilter represents a location in a spreadsheet, this will return all developer metadata associated with locations intersecting that region.
    ///
    /// - Remark: HTTP `POST /v4/spreadsheets/{spreadsheetId}/developerMetadata:search`.
    /// - Remark: Generated from `#/paths//v4/spreadsheets/{spreadsheetId}/developerMetadata:search/post(sheets.spreadsheets.developerMetadata.search)`.
    public enum Sheets_spreadsheets_developerMetadata_search {
        public static let id: Swift.String = "sheets.spreadsheets.developerMetadata.search"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/v4/spreadsheets/{spreadsheetId}/developerMetadata:search/POST/path`.
            public struct Path: Sendable, Hashable {
                /// The ID of the spreadsheet to retrieve metadata from.
                ///
                /// - Remark: Generated from `#/paths/v4/spreadsheets/{spreadsheetId}/developerMetadata:search/POST/path/spreadsheetId`.
                public var spreadsheetId: Swift.String
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - spreadsheetId: The ID of the spreadsheet to retrieve metadata from.
                public init(spreadsheetId: Swift.String) {
                    self.spreadsheetId = spreadsheetId
                }
            }
            public var path: Operations.Sheets_spreadsheets_developerMetadata_search.Input.Path
            /// - Remark: Generated from `#/paths/v4/spreadsheets/{spreadsheetId}/developerMetadata:search/POST/query`.
            public struct Query: Sendable, Hashable {
                /// - Remark: Generated from `#/components/parameters/_.xgafv`.
                @frozen public enum __period_xgafv: String, Codable, Hashable, Sendable, CaseIterable {
                    case _1 = "1"
                    case _2 = "2"
                }
                /// V1 error format.
                ///
                /// - Remark: Generated from `#/paths/v4/spreadsheets/{spreadsheetId}/developerMetadata:search/POST/query/$.xgafv`.
                public var _dollar__xgafv: Components.Parameters.__period_xgafv?
                /// OAuth access token.
                ///
                /// - Remark: Generated from `#/paths/v4/spreadsheets/{spreadsheetId}/developerMetadata:search/POST/query/access_token`.
                public var accessToken: Components.Parameters.AccessToken?
                /// - Remark: Generated from `#/components/parameters/alt`.
                @frozen public enum Alt: String, Codable, Hashable, Sendable, CaseIterable {
                    case json = "json"
                    case media = "media"
                    case proto = "proto"
                }
                /// Data format for response.
                ///
                /// - Remark: Generated from `#/paths/v4/spreadsheets/{spreadsheetId}/developerMetadata:search/POST/query/alt`.
                public var alt: Components.Parameters.Alt?
                /// JSONP
                ///
                /// - Remark: Generated from `#/paths/v4/spreadsheets/{spreadsheetId}/developerMetadata:search/POST/query/callback`.
                public var callback: Components.Parameters.Callback?
                /// Selector specifying which fields to include in a partial response.
                ///
                /// - Remark: Generated from `#/paths/v4/spreadsheets/{spreadsheetId}/developerMetadata:search/POST/query/fields`.
                public var fields: Components.Parameters.Fields?
                /// API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
                ///
                /// - Remark: Generated from `#/paths/v4/spreadsheets/{spreadsheetId}/developerMetadata:search/POST/query/key`.
                public var key: Components.Parameters.Key?
                /// OAuth 2.0 token for the current user.
                ///
                /// - Remark: Generated from `#/paths/v4/spreadsheets/{spreadsheetId}/developerMetadata:search/POST/query/oauth_token`.
                public var oauthToken: Components.Parameters.OauthToken?
                /// Returns response with indentations and line breaks.
                ///
                /// - Remark: Generated from `#/paths/v4/spreadsheets/{spreadsheetId}/developerMetadata:search/POST/query/prettyPrint`.
                public var prettyPrint: Components.Parameters.PrettyPrint?
                /// Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
                ///
                /// - Remark: Generated from `#/paths/v4/spreadsheets/{spreadsheetId}/developerMetadata:search/POST/query/quotaUser`.
                public var quotaUser: Components.Parameters.QuotaUser?
                /// Upload protocol for media (e.g. "raw", "multipart").
                ///
                /// - Remark: Generated from `#/paths/v4/spreadsheets/{spreadsheetId}/developerMetadata:search/POST/query/upload_protocol`.
                public var uploadProtocol: Components.Parameters.UploadProtocol?
                /// Legacy upload protocol for media (e.g. "media", "multipart").
                ///
                /// - Remark: Generated from `#/paths/v4/spreadsheets/{spreadsheetId}/developerMetadata:search/POST/query/uploadType`.
                public var uploadType: Components.Parameters.UploadType?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - _dollar__xgafv: V1 error format.
                ///   - accessToken: OAuth access token.
                ///   - alt: Data format for response.
                ///   - callback: JSONP
                ///   - fields: Selector specifying which fields to include in a partial response.
                ///   - key: API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
                ///   - oauthToken: OAuth 2.0 token for the current user.
                ///   - prettyPrint: Returns response with indentations and line breaks.
                ///   - quotaUser: Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
                ///   - uploadProtocol: Upload protocol for media (e.g. "raw", "multipart").
                ///   - uploadType: Legacy upload protocol for media (e.g. "media", "multipart").
                public init(
                    _dollar__xgafv: Components.Parameters.__period_xgafv? = nil,
                    accessToken: Components.Parameters.AccessToken? = nil,
                    alt: Components.Parameters.Alt? = nil,
                    callback: Components.Parameters.Callback? = nil,
                    fields: Components.Parameters.Fields? = nil,
                    key: Components.Parameters.Key? = nil,
                    oauthToken: Components.Parameters.OauthToken? = nil,
                    prettyPrint: Components.Parameters.PrettyPrint? = nil,
                    quotaUser: Components.Parameters.QuotaUser? = nil,
                    uploadProtocol: Components.Parameters.UploadProtocol? = nil,
                    uploadType: Components.Parameters.UploadType? = nil
                ) {
                    self._dollar__xgafv = _dollar__xgafv
                    self.accessToken = accessToken
                    self.alt = alt
                    self.callback = callback
                    self.fields = fields
                    self.key = key
                    self.oauthToken = oauthToken
                    self.prettyPrint = prettyPrint
                    self.quotaUser = quotaUser
                    self.uploadProtocol = uploadProtocol
                    self.uploadType = uploadType
                }
            }
            public var query: Operations.Sheets_spreadsheets_developerMetadata_search.Input.Query
            /// - Remark: Generated from `#/paths/v4/spreadsheets/{spreadsheetId}/developerMetadata:search/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.Sheets_spreadsheets_developerMetadata_search.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.Sheets_spreadsheets_developerMetadata_search.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.Sheets_spreadsheets_developerMetadata_search.Input.Headers
            /// - Remark: Generated from `#/paths/v4/spreadsheets/{spreadsheetId}/developerMetadata:search/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/v4/spreadsheets/{spreadsheetId}/developerMetadata:search/POST/requestBody/content/application\/json`.
                case json(Components.Schemas.SearchDeveloperMetadataRequest)
            }
            public var body: Operations.Sheets_spreadsheets_developerMetadata_search.Input.Body?
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - query:
            ///   - headers:
            ///   - body:
            public init(
                path: Operations.Sheets_spreadsheets_developerMetadata_search.Input.Path,
                query: Operations.Sheets_spreadsheets_developerMetadata_search.Input.Query = .init(),
                headers: Operations.Sheets_spreadsheets_developerMetadata_search.Input.Headers = .init(),
                body: Operations.Sheets_spreadsheets_developerMetadata_search.Input.Body? = nil
            ) {
                self.path = path
                self.query = query
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/v4/spreadsheets/{spreadsheetId}/developerMetadata:search/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/v4/spreadsheets/{spreadsheetId}/developerMetadata:search/POST/responses/200/content/application\/json`.
                    case json(Components.Schemas.SearchDeveloperMetadataResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.SearchDeveloperMetadataResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.Sheets_spreadsheets_developerMetadata_search.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.Sheets_spreadsheets_developerMetadata_search.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Successful response
            ///
            /// - Remark: Generated from `#/paths//v4/spreadsheets/{spreadsheetId}/developerMetadata:search/post(sheets.spreadsheets.developerMetadata.search)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.Sheets_spreadsheets_developerMetadata_search.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.Sheets_spreadsheets_developerMetadata_search.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Copies a single sheet from a spreadsheet to another spreadsheet. Returns the properties of the newly created sheet.
    ///
    /// - Remark: HTTP `POST /v4/spreadsheets/{spreadsheetId}/sheets/{sheetId}:copyTo`.
    /// - Remark: Generated from `#/paths//v4/spreadsheets/{spreadsheetId}/sheets/{sheetId}:copyTo/post(sheets.spreadsheets.sheets.copyTo)`.
    public enum Sheets_spreadsheets_sheets_copyTo {
        public static let id: Swift.String = "sheets.spreadsheets.sheets.copyTo"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/v4/spreadsheets/{spreadsheetId}/sheets/{sheetId}:copyTo/POST/path`.
            public struct Path: Sendable, Hashable {
                /// The ID of the spreadsheet containing the sheet to copy.
                ///
                /// - Remark: Generated from `#/paths/v4/spreadsheets/{spreadsheetId}/sheets/{sheetId}:copyTo/POST/path/spreadsheetId`.
                public var spreadsheetId: Swift.String
                /// The ID of the sheet to copy.
                ///
                /// - Remark: Generated from `#/paths/v4/spreadsheets/{spreadsheetId}/sheets/{sheetId}:copyTo/POST/path/sheetId`.
                public var sheetId: Swift.Int
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - spreadsheetId: The ID of the spreadsheet containing the sheet to copy.
                ///   - sheetId: The ID of the sheet to copy.
                public init(
                    spreadsheetId: Swift.String,
                    sheetId: Swift.Int
                ) {
                    self.spreadsheetId = spreadsheetId
                    self.sheetId = sheetId
                }
            }
            public var path: Operations.Sheets_spreadsheets_sheets_copyTo.Input.Path
            /// - Remark: Generated from `#/paths/v4/spreadsheets/{spreadsheetId}/sheets/{sheetId}:copyTo/POST/query`.
            public struct Query: Sendable, Hashable {
                /// - Remark: Generated from `#/components/parameters/_.xgafv`.
                @frozen public enum __period_xgafv: String, Codable, Hashable, Sendable, CaseIterable {
                    case _1 = "1"
                    case _2 = "2"
                }
                /// V1 error format.
                ///
                /// - Remark: Generated from `#/paths/v4/spreadsheets/{spreadsheetId}/sheets/{sheetId}:copyTo/POST/query/$.xgafv`.
                public var _dollar__xgafv: Components.Parameters.__period_xgafv?
                /// OAuth access token.
                ///
                /// - Remark: Generated from `#/paths/v4/spreadsheets/{spreadsheetId}/sheets/{sheetId}:copyTo/POST/query/access_token`.
                public var accessToken: Components.Parameters.AccessToken?
                /// - Remark: Generated from `#/components/parameters/alt`.
                @frozen public enum Alt: String, Codable, Hashable, Sendable, CaseIterable {
                    case json = "json"
                    case media = "media"
                    case proto = "proto"
                }
                /// Data format for response.
                ///
                /// - Remark: Generated from `#/paths/v4/spreadsheets/{spreadsheetId}/sheets/{sheetId}:copyTo/POST/query/alt`.
                public var alt: Components.Parameters.Alt?
                /// JSONP
                ///
                /// - Remark: Generated from `#/paths/v4/spreadsheets/{spreadsheetId}/sheets/{sheetId}:copyTo/POST/query/callback`.
                public var callback: Components.Parameters.Callback?
                /// Selector specifying which fields to include in a partial response.
                ///
                /// - Remark: Generated from `#/paths/v4/spreadsheets/{spreadsheetId}/sheets/{sheetId}:copyTo/POST/query/fields`.
                public var fields: Components.Parameters.Fields?
                /// API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
                ///
                /// - Remark: Generated from `#/paths/v4/spreadsheets/{spreadsheetId}/sheets/{sheetId}:copyTo/POST/query/key`.
                public var key: Components.Parameters.Key?
                /// OAuth 2.0 token for the current user.
                ///
                /// - Remark: Generated from `#/paths/v4/spreadsheets/{spreadsheetId}/sheets/{sheetId}:copyTo/POST/query/oauth_token`.
                public var oauthToken: Components.Parameters.OauthToken?
                /// Returns response with indentations and line breaks.
                ///
                /// - Remark: Generated from `#/paths/v4/spreadsheets/{spreadsheetId}/sheets/{sheetId}:copyTo/POST/query/prettyPrint`.
                public var prettyPrint: Components.Parameters.PrettyPrint?
                /// Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
                ///
                /// - Remark: Generated from `#/paths/v4/spreadsheets/{spreadsheetId}/sheets/{sheetId}:copyTo/POST/query/quotaUser`.
                public var quotaUser: Components.Parameters.QuotaUser?
                /// Upload protocol for media (e.g. "raw", "multipart").
                ///
                /// - Remark: Generated from `#/paths/v4/spreadsheets/{spreadsheetId}/sheets/{sheetId}:copyTo/POST/query/upload_protocol`.
                public var uploadProtocol: Components.Parameters.UploadProtocol?
                /// Legacy upload protocol for media (e.g. "media", "multipart").
                ///
                /// - Remark: Generated from `#/paths/v4/spreadsheets/{spreadsheetId}/sheets/{sheetId}:copyTo/POST/query/uploadType`.
                public var uploadType: Components.Parameters.UploadType?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - _dollar__xgafv: V1 error format.
                ///   - accessToken: OAuth access token.
                ///   - alt: Data format for response.
                ///   - callback: JSONP
                ///   - fields: Selector specifying which fields to include in a partial response.
                ///   - key: API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
                ///   - oauthToken: OAuth 2.0 token for the current user.
                ///   - prettyPrint: Returns response with indentations and line breaks.
                ///   - quotaUser: Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
                ///   - uploadProtocol: Upload protocol for media (e.g. "raw", "multipart").
                ///   - uploadType: Legacy upload protocol for media (e.g. "media", "multipart").
                public init(
                    _dollar__xgafv: Components.Parameters.__period_xgafv? = nil,
                    accessToken: Components.Parameters.AccessToken? = nil,
                    alt: Components.Parameters.Alt? = nil,
                    callback: Components.Parameters.Callback? = nil,
                    fields: Components.Parameters.Fields? = nil,
                    key: Components.Parameters.Key? = nil,
                    oauthToken: Components.Parameters.OauthToken? = nil,
                    prettyPrint: Components.Parameters.PrettyPrint? = nil,
                    quotaUser: Components.Parameters.QuotaUser? = nil,
                    uploadProtocol: Components.Parameters.UploadProtocol? = nil,
                    uploadType: Components.Parameters.UploadType? = nil
                ) {
                    self._dollar__xgafv = _dollar__xgafv
                    self.accessToken = accessToken
                    self.alt = alt
                    self.callback = callback
                    self.fields = fields
                    self.key = key
                    self.oauthToken = oauthToken
                    self.prettyPrint = prettyPrint
                    self.quotaUser = quotaUser
                    self.uploadProtocol = uploadProtocol
                    self.uploadType = uploadType
                }
            }
            public var query: Operations.Sheets_spreadsheets_sheets_copyTo.Input.Query
            /// - Remark: Generated from `#/paths/v4/spreadsheets/{spreadsheetId}/sheets/{sheetId}:copyTo/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.Sheets_spreadsheets_sheets_copyTo.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.Sheets_spreadsheets_sheets_copyTo.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.Sheets_spreadsheets_sheets_copyTo.Input.Headers
            /// - Remark: Generated from `#/paths/v4/spreadsheets/{spreadsheetId}/sheets/{sheetId}:copyTo/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/v4/spreadsheets/{spreadsheetId}/sheets/{sheetId}:copyTo/POST/requestBody/content/application\/json`.
                case json(Components.Schemas.CopySheetToAnotherSpreadsheetRequest)
            }
            public var body: Operations.Sheets_spreadsheets_sheets_copyTo.Input.Body?
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - query:
            ///   - headers:
            ///   - body:
            public init(
                path: Operations.Sheets_spreadsheets_sheets_copyTo.Input.Path,
                query: Operations.Sheets_spreadsheets_sheets_copyTo.Input.Query = .init(),
                headers: Operations.Sheets_spreadsheets_sheets_copyTo.Input.Headers = .init(),
                body: Operations.Sheets_spreadsheets_sheets_copyTo.Input.Body? = nil
            ) {
                self.path = path
                self.query = query
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/v4/spreadsheets/{spreadsheetId}/sheets/{sheetId}:copyTo/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/v4/spreadsheets/{spreadsheetId}/sheets/{sheetId}:copyTo/POST/responses/200/content/application\/json`.
                    case json(Components.Schemas.SheetProperties)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.SheetProperties {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.Sheets_spreadsheets_sheets_copyTo.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.Sheets_spreadsheets_sheets_copyTo.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Successful response
            ///
            /// - Remark: Generated from `#/paths//v4/spreadsheets/{spreadsheetId}/sheets/{sheetId}:copyTo/post(sheets.spreadsheets.sheets.copyTo)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.Sheets_spreadsheets_sheets_copyTo.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.Sheets_spreadsheets_sheets_copyTo.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Returns a range of values from a spreadsheet. The caller must specify the spreadsheet ID and a range.
    ///
    /// - Remark: HTTP `GET /v4/spreadsheets/{spreadsheetId}/values/{range}`.
    /// - Remark: Generated from `#/paths//v4/spreadsheets/{spreadsheetId}/values/{range}/get(sheets.spreadsheets.values.get)`.
    public enum Sheets_spreadsheets_values_get {
        public static let id: Swift.String = "sheets.spreadsheets.values.get"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/v4/spreadsheets/{spreadsheetId}/values/{range}/GET/path`.
            public struct Path: Sendable, Hashable {
                /// The ID of the spreadsheet to retrieve data from.
                ///
                /// - Remark: Generated from `#/paths/v4/spreadsheets/{spreadsheetId}/values/{range}/GET/path/spreadsheetId`.
                public var spreadsheetId: Swift.String
                /// The [A1 notation or R1C1 notation](/sheets/api/guides/concepts#cell) of the range to retrieve values from.
                ///
                /// - Remark: Generated from `#/paths/v4/spreadsheets/{spreadsheetId}/values/{range}/GET/path/range`.
                public var range: Swift.String
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - spreadsheetId: The ID of the spreadsheet to retrieve data from.
                ///   - range: The [A1 notation or R1C1 notation](/sheets/api/guides/concepts#cell) of the range to retrieve values from.
                public init(
                    spreadsheetId: Swift.String,
                    range: Swift.String
                ) {
                    self.spreadsheetId = spreadsheetId
                    self.range = range
                }
            }
            public var path: Operations.Sheets_spreadsheets_values_get.Input.Path
            /// - Remark: Generated from `#/paths/v4/spreadsheets/{spreadsheetId}/values/{range}/GET/query`.
            public struct Query: Sendable, Hashable {
                /// - Remark: Generated from `#/components/parameters/_.xgafv`.
                @frozen public enum __period_xgafv: String, Codable, Hashable, Sendable, CaseIterable {
                    case _1 = "1"
                    case _2 = "2"
                }
                /// V1 error format.
                ///
                /// - Remark: Generated from `#/paths/v4/spreadsheets/{spreadsheetId}/values/{range}/GET/query/$.xgafv`.
                public var _dollar__xgafv: Components.Parameters.__period_xgafv?
                /// OAuth access token.
                ///
                /// - Remark: Generated from `#/paths/v4/spreadsheets/{spreadsheetId}/values/{range}/GET/query/access_token`.
                public var accessToken: Components.Parameters.AccessToken?
                /// - Remark: Generated from `#/components/parameters/alt`.
                @frozen public enum Alt: String, Codable, Hashable, Sendable, CaseIterable {
                    case json = "json"
                    case media = "media"
                    case proto = "proto"
                }
                /// Data format for response.
                ///
                /// - Remark: Generated from `#/paths/v4/spreadsheets/{spreadsheetId}/values/{range}/GET/query/alt`.
                public var alt: Components.Parameters.Alt?
                /// JSONP
                ///
                /// - Remark: Generated from `#/paths/v4/spreadsheets/{spreadsheetId}/values/{range}/GET/query/callback`.
                public var callback: Components.Parameters.Callback?
                /// Selector specifying which fields to include in a partial response.
                ///
                /// - Remark: Generated from `#/paths/v4/spreadsheets/{spreadsheetId}/values/{range}/GET/query/fields`.
                public var fields: Components.Parameters.Fields?
                /// API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
                ///
                /// - Remark: Generated from `#/paths/v4/spreadsheets/{spreadsheetId}/values/{range}/GET/query/key`.
                public var key: Components.Parameters.Key?
                /// OAuth 2.0 token for the current user.
                ///
                /// - Remark: Generated from `#/paths/v4/spreadsheets/{spreadsheetId}/values/{range}/GET/query/oauth_token`.
                public var oauthToken: Components.Parameters.OauthToken?
                /// Returns response with indentations and line breaks.
                ///
                /// - Remark: Generated from `#/paths/v4/spreadsheets/{spreadsheetId}/values/{range}/GET/query/prettyPrint`.
                public var prettyPrint: Components.Parameters.PrettyPrint?
                /// Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
                ///
                /// - Remark: Generated from `#/paths/v4/spreadsheets/{spreadsheetId}/values/{range}/GET/query/quotaUser`.
                public var quotaUser: Components.Parameters.QuotaUser?
                /// Upload protocol for media (e.g. "raw", "multipart").
                ///
                /// - Remark: Generated from `#/paths/v4/spreadsheets/{spreadsheetId}/values/{range}/GET/query/upload_protocol`.
                public var uploadProtocol: Components.Parameters.UploadProtocol?
                /// Legacy upload protocol for media (e.g. "media", "multipart").
                ///
                /// - Remark: Generated from `#/paths/v4/spreadsheets/{spreadsheetId}/values/{range}/GET/query/uploadType`.
                public var uploadType: Components.Parameters.UploadType?
                /// - Remark: Generated from `#/paths/v4/spreadsheets/{spreadsheetId}/values/{range}/GET/query/dateTimeRenderOption`.
                @frozen public enum DateTimeRenderOptionPayload: String, Codable, Hashable, Sendable, CaseIterable {
                    case serialNumber = "SERIAL_NUMBER"
                    case formattedString = "FORMATTED_STRING"
                }
                /// How dates, times, and durations should be represented in the output. This is ignored if value_render_option is FORMATTED_VALUE. The default dateTime render option is SERIAL_NUMBER.
                ///
                /// - Remark: Generated from `#/paths/v4/spreadsheets/{spreadsheetId}/values/{range}/GET/query/dateTimeRenderOption`.
                public var dateTimeRenderOption: Operations.Sheets_spreadsheets_values_get.Input.Query.DateTimeRenderOptionPayload?
                /// - Remark: Generated from `#/paths/v4/spreadsheets/{spreadsheetId}/values/{range}/GET/query/majorDimension`.
                @frozen public enum MajorDimensionPayload: String, Codable, Hashable, Sendable, CaseIterable {
                    case dimensionUnspecified = "DIMENSION_UNSPECIFIED"
                    case rows = "ROWS"
                    case columns = "COLUMNS"
                }
                /// The major dimension that results should use. For example, if the spreadsheet data in Sheet1 is: `A1=1,B1=2,A2=3,B2=4`, then requesting `range=Sheet1!A1:B2?majorDimension=ROWS` returns `[[1,2],[3,4]]`, whereas requesting `range=Sheet1!A1:B2?majorDimension=COLUMNS` returns `[[1,3],[2,4]]`.
                ///
                /// - Remark: Generated from `#/paths/v4/spreadsheets/{spreadsheetId}/values/{range}/GET/query/majorDimension`.
                public var majorDimension: Operations.Sheets_spreadsheets_values_get.Input.Query.MajorDimensionPayload?
                /// - Remark: Generated from `#/paths/v4/spreadsheets/{spreadsheetId}/values/{range}/GET/query/valueRenderOption`.
                @frozen public enum ValueRenderOptionPayload: String, Codable, Hashable, Sendable, CaseIterable {
                    case formattedValue = "FORMATTED_VALUE"
                    case unformattedValue = "UNFORMATTED_VALUE"
                    case formula = "FORMULA"
                }
                /// How values should be represented in the output. The default render option is FORMATTED_VALUE.
                ///
                /// - Remark: Generated from `#/paths/v4/spreadsheets/{spreadsheetId}/values/{range}/GET/query/valueRenderOption`.
                public var valueRenderOption: Operations.Sheets_spreadsheets_values_get.Input.Query.ValueRenderOptionPayload?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - _dollar__xgafv: V1 error format.
                ///   - accessToken: OAuth access token.
                ///   - alt: Data format for response.
                ///   - callback: JSONP
                ///   - fields: Selector specifying which fields to include in a partial response.
                ///   - key: API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
                ///   - oauthToken: OAuth 2.0 token for the current user.
                ///   - prettyPrint: Returns response with indentations and line breaks.
                ///   - quotaUser: Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
                ///   - uploadProtocol: Upload protocol for media (e.g. "raw", "multipart").
                ///   - uploadType: Legacy upload protocol for media (e.g. "media", "multipart").
                ///   - dateTimeRenderOption: How dates, times, and durations should be represented in the output. This is ignored if value_render_option is FORMATTED_VALUE. The default dateTime render option is SERIAL_NUMBER.
                ///   - majorDimension: The major dimension that results should use. For example, if the spreadsheet data in Sheet1 is: `A1=1,B1=2,A2=3,B2=4`, then requesting `range=Sheet1!A1:B2?majorDimension=ROWS` returns `[[1,2],[3,4]]`, whereas requesting `range=Sheet1!A1:B2?majorDimension=COLUMNS` returns `[[1,3],[2,4]]`.
                ///   - valueRenderOption: How values should be represented in the output. The default render option is FORMATTED_VALUE.
                public init(
                    _dollar__xgafv: Components.Parameters.__period_xgafv? = nil,
                    accessToken: Components.Parameters.AccessToken? = nil,
                    alt: Components.Parameters.Alt? = nil,
                    callback: Components.Parameters.Callback? = nil,
                    fields: Components.Parameters.Fields? = nil,
                    key: Components.Parameters.Key? = nil,
                    oauthToken: Components.Parameters.OauthToken? = nil,
                    prettyPrint: Components.Parameters.PrettyPrint? = nil,
                    quotaUser: Components.Parameters.QuotaUser? = nil,
                    uploadProtocol: Components.Parameters.UploadProtocol? = nil,
                    uploadType: Components.Parameters.UploadType? = nil,
                    dateTimeRenderOption: Operations.Sheets_spreadsheets_values_get.Input.Query.DateTimeRenderOptionPayload? = nil,
                    majorDimension: Operations.Sheets_spreadsheets_values_get.Input.Query.MajorDimensionPayload? = nil,
                    valueRenderOption: Operations.Sheets_spreadsheets_values_get.Input.Query.ValueRenderOptionPayload? = nil
                ) {
                    self._dollar__xgafv = _dollar__xgafv
                    self.accessToken = accessToken
                    self.alt = alt
                    self.callback = callback
                    self.fields = fields
                    self.key = key
                    self.oauthToken = oauthToken
                    self.prettyPrint = prettyPrint
                    self.quotaUser = quotaUser
                    self.uploadProtocol = uploadProtocol
                    self.uploadType = uploadType
                    self.dateTimeRenderOption = dateTimeRenderOption
                    self.majorDimension = majorDimension
                    self.valueRenderOption = valueRenderOption
                }
            }
            public var query: Operations.Sheets_spreadsheets_values_get.Input.Query
            /// - Remark: Generated from `#/paths/v4/spreadsheets/{spreadsheetId}/values/{range}/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.Sheets_spreadsheets_values_get.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.Sheets_spreadsheets_values_get.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.Sheets_spreadsheets_values_get.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - query:
            ///   - headers:
            public init(
                path: Operations.Sheets_spreadsheets_values_get.Input.Path,
                query: Operations.Sheets_spreadsheets_values_get.Input.Query = .init(),
                headers: Operations.Sheets_spreadsheets_values_get.Input.Headers = .init()
            ) {
                self.path = path
                self.query = query
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/v4/spreadsheets/{spreadsheetId}/values/{range}/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/v4/spreadsheets/{spreadsheetId}/values/{range}/GET/responses/200/content/application\/json`.
                    case json(Components.Schemas.ValueRange)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.ValueRange {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.Sheets_spreadsheets_values_get.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.Sheets_spreadsheets_values_get.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Successful response
            ///
            /// - Remark: Generated from `#/paths//v4/spreadsheets/{spreadsheetId}/values/{range}/get(sheets.spreadsheets.values.get)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.Sheets_spreadsheets_values_get.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.Sheets_spreadsheets_values_get.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Sets values in a range of a spreadsheet. The caller must specify the spreadsheet ID, range, and a valueInputOption.
    ///
    /// - Remark: HTTP `PUT /v4/spreadsheets/{spreadsheetId}/values/{range}`.
    /// - Remark: Generated from `#/paths//v4/spreadsheets/{spreadsheetId}/values/{range}/put(sheets.spreadsheets.values.update)`.
    public enum Sheets_spreadsheets_values_update {
        public static let id: Swift.String = "sheets.spreadsheets.values.update"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/v4/spreadsheets/{spreadsheetId}/values/{range}/PUT/path`.
            public struct Path: Sendable, Hashable {
                /// The ID of the spreadsheet to update.
                ///
                /// - Remark: Generated from `#/paths/v4/spreadsheets/{spreadsheetId}/values/{range}/PUT/path/spreadsheetId`.
                public var spreadsheetId: Swift.String
                /// The [A1 notation](/sheets/api/guides/concepts#cell) of the values to update.
                ///
                /// - Remark: Generated from `#/paths/v4/spreadsheets/{spreadsheetId}/values/{range}/PUT/path/range`.
                public var range: Swift.String
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - spreadsheetId: The ID of the spreadsheet to update.
                ///   - range: The [A1 notation](/sheets/api/guides/concepts#cell) of the values to update.
                public init(
                    spreadsheetId: Swift.String,
                    range: Swift.String
                ) {
                    self.spreadsheetId = spreadsheetId
                    self.range = range
                }
            }
            public var path: Operations.Sheets_spreadsheets_values_update.Input.Path
            /// - Remark: Generated from `#/paths/v4/spreadsheets/{spreadsheetId}/values/{range}/PUT/query`.
            public struct Query: Sendable, Hashable {
                /// - Remark: Generated from `#/components/parameters/_.xgafv`.
                @frozen public enum __period_xgafv: String, Codable, Hashable, Sendable, CaseIterable {
                    case _1 = "1"
                    case _2 = "2"
                }
                /// V1 error format.
                ///
                /// - Remark: Generated from `#/paths/v4/spreadsheets/{spreadsheetId}/values/{range}/PUT/query/$.xgafv`.
                public var _dollar__xgafv: Components.Parameters.__period_xgafv?
                /// OAuth access token.
                ///
                /// - Remark: Generated from `#/paths/v4/spreadsheets/{spreadsheetId}/values/{range}/PUT/query/access_token`.
                public var accessToken: Components.Parameters.AccessToken?
                /// - Remark: Generated from `#/components/parameters/alt`.
                @frozen public enum Alt: String, Codable, Hashable, Sendable, CaseIterable {
                    case json = "json"
                    case media = "media"
                    case proto = "proto"
                }
                /// Data format for response.
                ///
                /// - Remark: Generated from `#/paths/v4/spreadsheets/{spreadsheetId}/values/{range}/PUT/query/alt`.
                public var alt: Components.Parameters.Alt?
                /// JSONP
                ///
                /// - Remark: Generated from `#/paths/v4/spreadsheets/{spreadsheetId}/values/{range}/PUT/query/callback`.
                public var callback: Components.Parameters.Callback?
                /// Selector specifying which fields to include in a partial response.
                ///
                /// - Remark: Generated from `#/paths/v4/spreadsheets/{spreadsheetId}/values/{range}/PUT/query/fields`.
                public var fields: Components.Parameters.Fields?
                /// API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
                ///
                /// - Remark: Generated from `#/paths/v4/spreadsheets/{spreadsheetId}/values/{range}/PUT/query/key`.
                public var key: Components.Parameters.Key?
                /// OAuth 2.0 token for the current user.
                ///
                /// - Remark: Generated from `#/paths/v4/spreadsheets/{spreadsheetId}/values/{range}/PUT/query/oauth_token`.
                public var oauthToken: Components.Parameters.OauthToken?
                /// Returns response with indentations and line breaks.
                ///
                /// - Remark: Generated from `#/paths/v4/spreadsheets/{spreadsheetId}/values/{range}/PUT/query/prettyPrint`.
                public var prettyPrint: Components.Parameters.PrettyPrint?
                /// Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
                ///
                /// - Remark: Generated from `#/paths/v4/spreadsheets/{spreadsheetId}/values/{range}/PUT/query/quotaUser`.
                public var quotaUser: Components.Parameters.QuotaUser?
                /// Upload protocol for media (e.g. "raw", "multipart").
                ///
                /// - Remark: Generated from `#/paths/v4/spreadsheets/{spreadsheetId}/values/{range}/PUT/query/upload_protocol`.
                public var uploadProtocol: Components.Parameters.UploadProtocol?
                /// Legacy upload protocol for media (e.g. "media", "multipart").
                ///
                /// - Remark: Generated from `#/paths/v4/spreadsheets/{spreadsheetId}/values/{range}/PUT/query/uploadType`.
                public var uploadType: Components.Parameters.UploadType?
                /// Determines if the update response should include the values of the cells that were updated. By default, responses do not include the updated values. If the range to write was larger than the range actually written, the response includes all values in the requested range (excluding trailing empty rows and columns).
                ///
                /// - Remark: Generated from `#/paths/v4/spreadsheets/{spreadsheetId}/values/{range}/PUT/query/includeValuesInResponse`.
                public var includeValuesInResponse: Swift.Bool?
                /// - Remark: Generated from `#/paths/v4/spreadsheets/{spreadsheetId}/values/{range}/PUT/query/responseDateTimeRenderOption`.
                @frozen public enum ResponseDateTimeRenderOptionPayload: String, Codable, Hashable, Sendable, CaseIterable {
                    case serialNumber = "SERIAL_NUMBER"
                    case formattedString = "FORMATTED_STRING"
                }
                /// Determines how dates, times, and durations in the response should be rendered. This is ignored if response_value_render_option is FORMATTED_VALUE. The default dateTime render option is SERIAL_NUMBER.
                ///
                /// - Remark: Generated from `#/paths/v4/spreadsheets/{spreadsheetId}/values/{range}/PUT/query/responseDateTimeRenderOption`.
                public var responseDateTimeRenderOption: Operations.Sheets_spreadsheets_values_update.Input.Query.ResponseDateTimeRenderOptionPayload?
                /// - Remark: Generated from `#/paths/v4/spreadsheets/{spreadsheetId}/values/{range}/PUT/query/responseValueRenderOption`.
                @frozen public enum ResponseValueRenderOptionPayload: String, Codable, Hashable, Sendable, CaseIterable {
                    case formattedValue = "FORMATTED_VALUE"
                    case unformattedValue = "UNFORMATTED_VALUE"
                    case formula = "FORMULA"
                }
                /// Determines how values in the response should be rendered. The default render option is FORMATTED_VALUE.
                ///
                /// - Remark: Generated from `#/paths/v4/spreadsheets/{spreadsheetId}/values/{range}/PUT/query/responseValueRenderOption`.
                public var responseValueRenderOption: Operations.Sheets_spreadsheets_values_update.Input.Query.ResponseValueRenderOptionPayload?
                /// - Remark: Generated from `#/paths/v4/spreadsheets/{spreadsheetId}/values/{range}/PUT/query/valueInputOption`.
                @frozen public enum ValueInputOptionPayload: String, Codable, Hashable, Sendable, CaseIterable {
                    case inputValueOptionUnspecified = "INPUT_VALUE_OPTION_UNSPECIFIED"
                    case raw = "RAW"
                    case userEntered = "USER_ENTERED"
                }
                /// How the input data should be interpreted.
                ///
                /// - Remark: Generated from `#/paths/v4/spreadsheets/{spreadsheetId}/values/{range}/PUT/query/valueInputOption`.
                public var valueInputOption: Operations.Sheets_spreadsheets_values_update.Input.Query.ValueInputOptionPayload?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - _dollar__xgafv: V1 error format.
                ///   - accessToken: OAuth access token.
                ///   - alt: Data format for response.
                ///   - callback: JSONP
                ///   - fields: Selector specifying which fields to include in a partial response.
                ///   - key: API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
                ///   - oauthToken: OAuth 2.0 token for the current user.
                ///   - prettyPrint: Returns response with indentations and line breaks.
                ///   - quotaUser: Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
                ///   - uploadProtocol: Upload protocol for media (e.g. "raw", "multipart").
                ///   - uploadType: Legacy upload protocol for media (e.g. "media", "multipart").
                ///   - includeValuesInResponse: Determines if the update response should include the values of the cells that were updated. By default, responses do not include the updated values. If the range to write was larger than the range actually written, the response includes all values in the requested range (excluding trailing empty rows and columns).
                ///   - responseDateTimeRenderOption: Determines how dates, times, and durations in the response should be rendered. This is ignored if response_value_render_option is FORMATTED_VALUE. The default dateTime render option is SERIAL_NUMBER.
                ///   - responseValueRenderOption: Determines how values in the response should be rendered. The default render option is FORMATTED_VALUE.
                ///   - valueInputOption: How the input data should be interpreted.
                public init(
                    _dollar__xgafv: Components.Parameters.__period_xgafv? = nil,
                    accessToken: Components.Parameters.AccessToken? = nil,
                    alt: Components.Parameters.Alt? = nil,
                    callback: Components.Parameters.Callback? = nil,
                    fields: Components.Parameters.Fields? = nil,
                    key: Components.Parameters.Key? = nil,
                    oauthToken: Components.Parameters.OauthToken? = nil,
                    prettyPrint: Components.Parameters.PrettyPrint? = nil,
                    quotaUser: Components.Parameters.QuotaUser? = nil,
                    uploadProtocol: Components.Parameters.UploadProtocol? = nil,
                    uploadType: Components.Parameters.UploadType? = nil,
                    includeValuesInResponse: Swift.Bool? = nil,
                    responseDateTimeRenderOption: Operations.Sheets_spreadsheets_values_update.Input.Query.ResponseDateTimeRenderOptionPayload? = nil,
                    responseValueRenderOption: Operations.Sheets_spreadsheets_values_update.Input.Query.ResponseValueRenderOptionPayload? = nil,
                    valueInputOption: Operations.Sheets_spreadsheets_values_update.Input.Query.ValueInputOptionPayload? = nil
                ) {
                    self._dollar__xgafv = _dollar__xgafv
                    self.accessToken = accessToken
                    self.alt = alt
                    self.callback = callback
                    self.fields = fields
                    self.key = key
                    self.oauthToken = oauthToken
                    self.prettyPrint = prettyPrint
                    self.quotaUser = quotaUser
                    self.uploadProtocol = uploadProtocol
                    self.uploadType = uploadType
                    self.includeValuesInResponse = includeValuesInResponse
                    self.responseDateTimeRenderOption = responseDateTimeRenderOption
                    self.responseValueRenderOption = responseValueRenderOption
                    self.valueInputOption = valueInputOption
                }
            }
            public var query: Operations.Sheets_spreadsheets_values_update.Input.Query
            /// - Remark: Generated from `#/paths/v4/spreadsheets/{spreadsheetId}/values/{range}/PUT/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.Sheets_spreadsheets_values_update.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.Sheets_spreadsheets_values_update.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.Sheets_spreadsheets_values_update.Input.Headers
            /// - Remark: Generated from `#/paths/v4/spreadsheets/{spreadsheetId}/values/{range}/PUT/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/v4/spreadsheets/{spreadsheetId}/values/{range}/PUT/requestBody/content/application\/json`.
                case json(Components.Schemas.ValueRange)
            }
            public var body: Operations.Sheets_spreadsheets_values_update.Input.Body?
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - query:
            ///   - headers:
            ///   - body:
            public init(
                path: Operations.Sheets_spreadsheets_values_update.Input.Path,
                query: Operations.Sheets_spreadsheets_values_update.Input.Query = .init(),
                headers: Operations.Sheets_spreadsheets_values_update.Input.Headers = .init(),
                body: Operations.Sheets_spreadsheets_values_update.Input.Body? = nil
            ) {
                self.path = path
                self.query = query
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/v4/spreadsheets/{spreadsheetId}/values/{range}/PUT/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/v4/spreadsheets/{spreadsheetId}/values/{range}/PUT/responses/200/content/application\/json`.
                    case json(Components.Schemas.UpdateValuesResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.UpdateValuesResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.Sheets_spreadsheets_values_update.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.Sheets_spreadsheets_values_update.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Successful response
            ///
            /// - Remark: Generated from `#/paths//v4/spreadsheets/{spreadsheetId}/values/{range}/put(sheets.spreadsheets.values.update)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.Sheets_spreadsheets_values_update.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.Sheets_spreadsheets_values_update.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Appends values to a spreadsheet. The input range is used to search for existing data and find a "table" within that range. Values will be appended to the next row of the table, starting with the first column of the table. See the [guide](/sheets/api/guides/values#appending_values) and [sample code](/sheets/api/samples/writing#append_values) for specific details of how tables are detected and data is appended. The caller must specify the spreadsheet ID, range, and a valueInputOption. The `valueInputOption` only controls how the input data will be added to the sheet (column-wise or row-wise), it does not influence what cell the data starts being written to.
    ///
    /// - Remark: HTTP `POST /v4/spreadsheets/{spreadsheetId}/values/{range}:append`.
    /// - Remark: Generated from `#/paths//v4/spreadsheets/{spreadsheetId}/values/{range}:append/post(sheets.spreadsheets.values.append)`.
    public enum Sheets_spreadsheets_values_append {
        public static let id: Swift.String = "sheets.spreadsheets.values.append"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/v4/spreadsheets/{spreadsheetId}/values/{range}:append/POST/path`.
            public struct Path: Sendable, Hashable {
                /// The ID of the spreadsheet to update.
                ///
                /// - Remark: Generated from `#/paths/v4/spreadsheets/{spreadsheetId}/values/{range}:append/POST/path/spreadsheetId`.
                public var spreadsheetId: Swift.String
                /// The [A1 notation](/sheets/api/guides/concepts#cell) of a range to search for a logical table of data. Values are appended after the last row of the table.
                ///
                /// - Remark: Generated from `#/paths/v4/spreadsheets/{spreadsheetId}/values/{range}:append/POST/path/range`.
                public var range: Swift.String
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - spreadsheetId: The ID of the spreadsheet to update.
                ///   - range: The [A1 notation](/sheets/api/guides/concepts#cell) of a range to search for a logical table of data. Values are appended after the last row of the table.
                public init(
                    spreadsheetId: Swift.String,
                    range: Swift.String
                ) {
                    self.spreadsheetId = spreadsheetId
                    self.range = range
                }
            }
            public var path: Operations.Sheets_spreadsheets_values_append.Input.Path
            /// - Remark: Generated from `#/paths/v4/spreadsheets/{spreadsheetId}/values/{range}:append/POST/query`.
            public struct Query: Sendable, Hashable {
                /// - Remark: Generated from `#/components/parameters/_.xgafv`.
                @frozen public enum __period_xgafv: String, Codable, Hashable, Sendable, CaseIterable {
                    case _1 = "1"
                    case _2 = "2"
                }
                /// V1 error format.
                ///
                /// - Remark: Generated from `#/paths/v4/spreadsheets/{spreadsheetId}/values/{range}:append/POST/query/$.xgafv`.
                public var _dollar__xgafv: Components.Parameters.__period_xgafv?
                /// OAuth access token.
                ///
                /// - Remark: Generated from `#/paths/v4/spreadsheets/{spreadsheetId}/values/{range}:append/POST/query/access_token`.
                public var accessToken: Components.Parameters.AccessToken?
                /// - Remark: Generated from `#/components/parameters/alt`.
                @frozen public enum Alt: String, Codable, Hashable, Sendable, CaseIterable {
                    case json = "json"
                    case media = "media"
                    case proto = "proto"
                }
                /// Data format for response.
                ///
                /// - Remark: Generated from `#/paths/v4/spreadsheets/{spreadsheetId}/values/{range}:append/POST/query/alt`.
                public var alt: Components.Parameters.Alt?
                /// JSONP
                ///
                /// - Remark: Generated from `#/paths/v4/spreadsheets/{spreadsheetId}/values/{range}:append/POST/query/callback`.
                public var callback: Components.Parameters.Callback?
                /// Selector specifying which fields to include in a partial response.
                ///
                /// - Remark: Generated from `#/paths/v4/spreadsheets/{spreadsheetId}/values/{range}:append/POST/query/fields`.
                public var fields: Components.Parameters.Fields?
                /// API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
                ///
                /// - Remark: Generated from `#/paths/v4/spreadsheets/{spreadsheetId}/values/{range}:append/POST/query/key`.
                public var key: Components.Parameters.Key?
                /// OAuth 2.0 token for the current user.
                ///
                /// - Remark: Generated from `#/paths/v4/spreadsheets/{spreadsheetId}/values/{range}:append/POST/query/oauth_token`.
                public var oauthToken: Components.Parameters.OauthToken?
                /// Returns response with indentations and line breaks.
                ///
                /// - Remark: Generated from `#/paths/v4/spreadsheets/{spreadsheetId}/values/{range}:append/POST/query/prettyPrint`.
                public var prettyPrint: Components.Parameters.PrettyPrint?
                /// Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
                ///
                /// - Remark: Generated from `#/paths/v4/spreadsheets/{spreadsheetId}/values/{range}:append/POST/query/quotaUser`.
                public var quotaUser: Components.Parameters.QuotaUser?
                /// Upload protocol for media (e.g. "raw", "multipart").
                ///
                /// - Remark: Generated from `#/paths/v4/spreadsheets/{spreadsheetId}/values/{range}:append/POST/query/upload_protocol`.
                public var uploadProtocol: Components.Parameters.UploadProtocol?
                /// Legacy upload protocol for media (e.g. "media", "multipart").
                ///
                /// - Remark: Generated from `#/paths/v4/spreadsheets/{spreadsheetId}/values/{range}:append/POST/query/uploadType`.
                public var uploadType: Components.Parameters.UploadType?
                /// Determines if the update response should include the values of the cells that were appended. By default, responses do not include the updated values.
                ///
                /// - Remark: Generated from `#/paths/v4/spreadsheets/{spreadsheetId}/values/{range}:append/POST/query/includeValuesInResponse`.
                public var includeValuesInResponse: Swift.Bool?
                /// - Remark: Generated from `#/paths/v4/spreadsheets/{spreadsheetId}/values/{range}:append/POST/query/insertDataOption`.
                @frozen public enum InsertDataOptionPayload: String, Codable, Hashable, Sendable, CaseIterable {
                    case overwrite = "OVERWRITE"
                    case insertRows = "INSERT_ROWS"
                }
                /// How the input data should be inserted.
                ///
                /// - Remark: Generated from `#/paths/v4/spreadsheets/{spreadsheetId}/values/{range}:append/POST/query/insertDataOption`.
                public var insertDataOption: Operations.Sheets_spreadsheets_values_append.Input.Query.InsertDataOptionPayload?
                /// - Remark: Generated from `#/paths/v4/spreadsheets/{spreadsheetId}/values/{range}:append/POST/query/responseDateTimeRenderOption`.
                @frozen public enum ResponseDateTimeRenderOptionPayload: String, Codable, Hashable, Sendable, CaseIterable {
                    case serialNumber = "SERIAL_NUMBER"
                    case formattedString = "FORMATTED_STRING"
                }
                /// Determines how dates, times, and durations in the response should be rendered. This is ignored if response_value_render_option is FORMATTED_VALUE. The default dateTime render option is SERIAL_NUMBER.
                ///
                /// - Remark: Generated from `#/paths/v4/spreadsheets/{spreadsheetId}/values/{range}:append/POST/query/responseDateTimeRenderOption`.
                public var responseDateTimeRenderOption: Operations.Sheets_spreadsheets_values_append.Input.Query.ResponseDateTimeRenderOptionPayload?
                /// - Remark: Generated from `#/paths/v4/spreadsheets/{spreadsheetId}/values/{range}:append/POST/query/responseValueRenderOption`.
                @frozen public enum ResponseValueRenderOptionPayload: String, Codable, Hashable, Sendable, CaseIterable {
                    case formattedValue = "FORMATTED_VALUE"
                    case unformattedValue = "UNFORMATTED_VALUE"
                    case formula = "FORMULA"
                }
                /// Determines how values in the response should be rendered. The default render option is FORMATTED_VALUE.
                ///
                /// - Remark: Generated from `#/paths/v4/spreadsheets/{spreadsheetId}/values/{range}:append/POST/query/responseValueRenderOption`.
                public var responseValueRenderOption: Operations.Sheets_spreadsheets_values_append.Input.Query.ResponseValueRenderOptionPayload?
                /// - Remark: Generated from `#/paths/v4/spreadsheets/{spreadsheetId}/values/{range}:append/POST/query/valueInputOption`.
                @frozen public enum ValueInputOptionPayload: String, Codable, Hashable, Sendable, CaseIterable {
                    case inputValueOptionUnspecified = "INPUT_VALUE_OPTION_UNSPECIFIED"
                    case raw = "RAW"
                    case userEntered = "USER_ENTERED"
                }
                /// How the input data should be interpreted.
                ///
                /// - Remark: Generated from `#/paths/v4/spreadsheets/{spreadsheetId}/values/{range}:append/POST/query/valueInputOption`.
                public var valueInputOption: Operations.Sheets_spreadsheets_values_append.Input.Query.ValueInputOptionPayload?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - _dollar__xgafv: V1 error format.
                ///   - accessToken: OAuth access token.
                ///   - alt: Data format for response.
                ///   - callback: JSONP
                ///   - fields: Selector specifying which fields to include in a partial response.
                ///   - key: API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
                ///   - oauthToken: OAuth 2.0 token for the current user.
                ///   - prettyPrint: Returns response with indentations and line breaks.
                ///   - quotaUser: Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
                ///   - uploadProtocol: Upload protocol for media (e.g. "raw", "multipart").
                ///   - uploadType: Legacy upload protocol for media (e.g. "media", "multipart").
                ///   - includeValuesInResponse: Determines if the update response should include the values of the cells that were appended. By default, responses do not include the updated values.
                ///   - insertDataOption: How the input data should be inserted.
                ///   - responseDateTimeRenderOption: Determines how dates, times, and durations in the response should be rendered. This is ignored if response_value_render_option is FORMATTED_VALUE. The default dateTime render option is SERIAL_NUMBER.
                ///   - responseValueRenderOption: Determines how values in the response should be rendered. The default render option is FORMATTED_VALUE.
                ///   - valueInputOption: How the input data should be interpreted.
                public init(
                    _dollar__xgafv: Components.Parameters.__period_xgafv? = nil,
                    accessToken: Components.Parameters.AccessToken? = nil,
                    alt: Components.Parameters.Alt? = nil,
                    callback: Components.Parameters.Callback? = nil,
                    fields: Components.Parameters.Fields? = nil,
                    key: Components.Parameters.Key? = nil,
                    oauthToken: Components.Parameters.OauthToken? = nil,
                    prettyPrint: Components.Parameters.PrettyPrint? = nil,
                    quotaUser: Components.Parameters.QuotaUser? = nil,
                    uploadProtocol: Components.Parameters.UploadProtocol? = nil,
                    uploadType: Components.Parameters.UploadType? = nil,
                    includeValuesInResponse: Swift.Bool? = nil,
                    insertDataOption: Operations.Sheets_spreadsheets_values_append.Input.Query.InsertDataOptionPayload? = nil,
                    responseDateTimeRenderOption: Operations.Sheets_spreadsheets_values_append.Input.Query.ResponseDateTimeRenderOptionPayload? = nil,
                    responseValueRenderOption: Operations.Sheets_spreadsheets_values_append.Input.Query.ResponseValueRenderOptionPayload? = nil,
                    valueInputOption: Operations.Sheets_spreadsheets_values_append.Input.Query.ValueInputOptionPayload? = nil
                ) {
                    self._dollar__xgafv = _dollar__xgafv
                    self.accessToken = accessToken
                    self.alt = alt
                    self.callback = callback
                    self.fields = fields
                    self.key = key
                    self.oauthToken = oauthToken
                    self.prettyPrint = prettyPrint
                    self.quotaUser = quotaUser
                    self.uploadProtocol = uploadProtocol
                    self.uploadType = uploadType
                    self.includeValuesInResponse = includeValuesInResponse
                    self.insertDataOption = insertDataOption
                    self.responseDateTimeRenderOption = responseDateTimeRenderOption
                    self.responseValueRenderOption = responseValueRenderOption
                    self.valueInputOption = valueInputOption
                }
            }
            public var query: Operations.Sheets_spreadsheets_values_append.Input.Query
            /// - Remark: Generated from `#/paths/v4/spreadsheets/{spreadsheetId}/values/{range}:append/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.Sheets_spreadsheets_values_append.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.Sheets_spreadsheets_values_append.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.Sheets_spreadsheets_values_append.Input.Headers
            /// - Remark: Generated from `#/paths/v4/spreadsheets/{spreadsheetId}/values/{range}:append/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/v4/spreadsheets/{spreadsheetId}/values/{range}:append/POST/requestBody/content/application\/json`.
                case json(Components.Schemas.ValueRange)
            }
            public var body: Operations.Sheets_spreadsheets_values_append.Input.Body?
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - query:
            ///   - headers:
            ///   - body:
            public init(
                path: Operations.Sheets_spreadsheets_values_append.Input.Path,
                query: Operations.Sheets_spreadsheets_values_append.Input.Query = .init(),
                headers: Operations.Sheets_spreadsheets_values_append.Input.Headers = .init(),
                body: Operations.Sheets_spreadsheets_values_append.Input.Body? = nil
            ) {
                self.path = path
                self.query = query
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/v4/spreadsheets/{spreadsheetId}/values/{range}:append/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/v4/spreadsheets/{spreadsheetId}/values/{range}:append/POST/responses/200/content/application\/json`.
                    case json(Components.Schemas.AppendValuesResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.AppendValuesResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.Sheets_spreadsheets_values_append.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.Sheets_spreadsheets_values_append.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Successful response
            ///
            /// - Remark: Generated from `#/paths//v4/spreadsheets/{spreadsheetId}/values/{range}:append/post(sheets.spreadsheets.values.append)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.Sheets_spreadsheets_values_append.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.Sheets_spreadsheets_values_append.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Clears values from a spreadsheet. The caller must specify the spreadsheet ID and range. Only values are cleared -- all other properties of the cell (such as formatting, data validation, etc..) are kept.
    ///
    /// - Remark: HTTP `POST /v4/spreadsheets/{spreadsheetId}/values/{range}:clear`.
    /// - Remark: Generated from `#/paths//v4/spreadsheets/{spreadsheetId}/values/{range}:clear/post(sheets.spreadsheets.values.clear)`.
    public enum Sheets_spreadsheets_values_clear {
        public static let id: Swift.String = "sheets.spreadsheets.values.clear"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/v4/spreadsheets/{spreadsheetId}/values/{range}:clear/POST/path`.
            public struct Path: Sendable, Hashable {
                /// The ID of the spreadsheet to update.
                ///
                /// - Remark: Generated from `#/paths/v4/spreadsheets/{spreadsheetId}/values/{range}:clear/POST/path/spreadsheetId`.
                public var spreadsheetId: Swift.String
                /// The [A1 notation or R1C1 notation](/sheets/api/guides/concepts#cell) of the values to clear.
                ///
                /// - Remark: Generated from `#/paths/v4/spreadsheets/{spreadsheetId}/values/{range}:clear/POST/path/range`.
                public var range: Swift.String
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - spreadsheetId: The ID of the spreadsheet to update.
                ///   - range: The [A1 notation or R1C1 notation](/sheets/api/guides/concepts#cell) of the values to clear.
                public init(
                    spreadsheetId: Swift.String,
                    range: Swift.String
                ) {
                    self.spreadsheetId = spreadsheetId
                    self.range = range
                }
            }
            public var path: Operations.Sheets_spreadsheets_values_clear.Input.Path
            /// - Remark: Generated from `#/paths/v4/spreadsheets/{spreadsheetId}/values/{range}:clear/POST/query`.
            public struct Query: Sendable, Hashable {
                /// - Remark: Generated from `#/components/parameters/_.xgafv`.
                @frozen public enum __period_xgafv: String, Codable, Hashable, Sendable, CaseIterable {
                    case _1 = "1"
                    case _2 = "2"
                }
                /// V1 error format.
                ///
                /// - Remark: Generated from `#/paths/v4/spreadsheets/{spreadsheetId}/values/{range}:clear/POST/query/$.xgafv`.
                public var _dollar__xgafv: Components.Parameters.__period_xgafv?
                /// OAuth access token.
                ///
                /// - Remark: Generated from `#/paths/v4/spreadsheets/{spreadsheetId}/values/{range}:clear/POST/query/access_token`.
                public var accessToken: Components.Parameters.AccessToken?
                /// - Remark: Generated from `#/components/parameters/alt`.
                @frozen public enum Alt: String, Codable, Hashable, Sendable, CaseIterable {
                    case json = "json"
                    case media = "media"
                    case proto = "proto"
                }
                /// Data format for response.
                ///
                /// - Remark: Generated from `#/paths/v4/spreadsheets/{spreadsheetId}/values/{range}:clear/POST/query/alt`.
                public var alt: Components.Parameters.Alt?
                /// JSONP
                ///
                /// - Remark: Generated from `#/paths/v4/spreadsheets/{spreadsheetId}/values/{range}:clear/POST/query/callback`.
                public var callback: Components.Parameters.Callback?
                /// Selector specifying which fields to include in a partial response.
                ///
                /// - Remark: Generated from `#/paths/v4/spreadsheets/{spreadsheetId}/values/{range}:clear/POST/query/fields`.
                public var fields: Components.Parameters.Fields?
                /// API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
                ///
                /// - Remark: Generated from `#/paths/v4/spreadsheets/{spreadsheetId}/values/{range}:clear/POST/query/key`.
                public var key: Components.Parameters.Key?
                /// OAuth 2.0 token for the current user.
                ///
                /// - Remark: Generated from `#/paths/v4/spreadsheets/{spreadsheetId}/values/{range}:clear/POST/query/oauth_token`.
                public var oauthToken: Components.Parameters.OauthToken?
                /// Returns response with indentations and line breaks.
                ///
                /// - Remark: Generated from `#/paths/v4/spreadsheets/{spreadsheetId}/values/{range}:clear/POST/query/prettyPrint`.
                public var prettyPrint: Components.Parameters.PrettyPrint?
                /// Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
                ///
                /// - Remark: Generated from `#/paths/v4/spreadsheets/{spreadsheetId}/values/{range}:clear/POST/query/quotaUser`.
                public var quotaUser: Components.Parameters.QuotaUser?
                /// Upload protocol for media (e.g. "raw", "multipart").
                ///
                /// - Remark: Generated from `#/paths/v4/spreadsheets/{spreadsheetId}/values/{range}:clear/POST/query/upload_protocol`.
                public var uploadProtocol: Components.Parameters.UploadProtocol?
                /// Legacy upload protocol for media (e.g. "media", "multipart").
                ///
                /// - Remark: Generated from `#/paths/v4/spreadsheets/{spreadsheetId}/values/{range}:clear/POST/query/uploadType`.
                public var uploadType: Components.Parameters.UploadType?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - _dollar__xgafv: V1 error format.
                ///   - accessToken: OAuth access token.
                ///   - alt: Data format for response.
                ///   - callback: JSONP
                ///   - fields: Selector specifying which fields to include in a partial response.
                ///   - key: API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
                ///   - oauthToken: OAuth 2.0 token for the current user.
                ///   - prettyPrint: Returns response with indentations and line breaks.
                ///   - quotaUser: Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
                ///   - uploadProtocol: Upload protocol for media (e.g. "raw", "multipart").
                ///   - uploadType: Legacy upload protocol for media (e.g. "media", "multipart").
                public init(
                    _dollar__xgafv: Components.Parameters.__period_xgafv? = nil,
                    accessToken: Components.Parameters.AccessToken? = nil,
                    alt: Components.Parameters.Alt? = nil,
                    callback: Components.Parameters.Callback? = nil,
                    fields: Components.Parameters.Fields? = nil,
                    key: Components.Parameters.Key? = nil,
                    oauthToken: Components.Parameters.OauthToken? = nil,
                    prettyPrint: Components.Parameters.PrettyPrint? = nil,
                    quotaUser: Components.Parameters.QuotaUser? = nil,
                    uploadProtocol: Components.Parameters.UploadProtocol? = nil,
                    uploadType: Components.Parameters.UploadType? = nil
                ) {
                    self._dollar__xgafv = _dollar__xgafv
                    self.accessToken = accessToken
                    self.alt = alt
                    self.callback = callback
                    self.fields = fields
                    self.key = key
                    self.oauthToken = oauthToken
                    self.prettyPrint = prettyPrint
                    self.quotaUser = quotaUser
                    self.uploadProtocol = uploadProtocol
                    self.uploadType = uploadType
                }
            }
            public var query: Operations.Sheets_spreadsheets_values_clear.Input.Query
            /// - Remark: Generated from `#/paths/v4/spreadsheets/{spreadsheetId}/values/{range}:clear/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.Sheets_spreadsheets_values_clear.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.Sheets_spreadsheets_values_clear.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.Sheets_spreadsheets_values_clear.Input.Headers
            /// - Remark: Generated from `#/paths/v4/spreadsheets/{spreadsheetId}/values/{range}:clear/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/v4/spreadsheets/{spreadsheetId}/values/{range}:clear/POST/requestBody/content/application\/json`.
                case json(Components.Schemas.ClearValuesRequest)
            }
            public var body: Operations.Sheets_spreadsheets_values_clear.Input.Body?
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - query:
            ///   - headers:
            ///   - body:
            public init(
                path: Operations.Sheets_spreadsheets_values_clear.Input.Path,
                query: Operations.Sheets_spreadsheets_values_clear.Input.Query = .init(),
                headers: Operations.Sheets_spreadsheets_values_clear.Input.Headers = .init(),
                body: Operations.Sheets_spreadsheets_values_clear.Input.Body? = nil
            ) {
                self.path = path
                self.query = query
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/v4/spreadsheets/{spreadsheetId}/values/{range}:clear/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/v4/spreadsheets/{spreadsheetId}/values/{range}:clear/POST/responses/200/content/application\/json`.
                    case json(Components.Schemas.ClearValuesResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.ClearValuesResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.Sheets_spreadsheets_values_clear.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.Sheets_spreadsheets_values_clear.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Successful response
            ///
            /// - Remark: Generated from `#/paths//v4/spreadsheets/{spreadsheetId}/values/{range}:clear/post(sheets.spreadsheets.values.clear)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.Sheets_spreadsheets_values_clear.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.Sheets_spreadsheets_values_clear.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Clears one or more ranges of values from a spreadsheet. The caller must specify the spreadsheet ID and one or more ranges. Only values are cleared -- all other properties of the cell (such as formatting and data validation) are kept.
    ///
    /// - Remark: HTTP `POST /v4/spreadsheets/{spreadsheetId}/values:batchClear`.
    /// - Remark: Generated from `#/paths//v4/spreadsheets/{spreadsheetId}/values:batchClear/post(sheets.spreadsheets.values.batchClear)`.
    public enum Sheets_spreadsheets_values_batchClear {
        public static let id: Swift.String = "sheets.spreadsheets.values.batchClear"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/v4/spreadsheets/{spreadsheetId}/values:batchClear/POST/path`.
            public struct Path: Sendable, Hashable {
                /// The ID of the spreadsheet to update.
                ///
                /// - Remark: Generated from `#/paths/v4/spreadsheets/{spreadsheetId}/values:batchClear/POST/path/spreadsheetId`.
                public var spreadsheetId: Swift.String
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - spreadsheetId: The ID of the spreadsheet to update.
                public init(spreadsheetId: Swift.String) {
                    self.spreadsheetId = spreadsheetId
                }
            }
            public var path: Operations.Sheets_spreadsheets_values_batchClear.Input.Path
            /// - Remark: Generated from `#/paths/v4/spreadsheets/{spreadsheetId}/values:batchClear/POST/query`.
            public struct Query: Sendable, Hashable {
                /// - Remark: Generated from `#/components/parameters/_.xgafv`.
                @frozen public enum __period_xgafv: String, Codable, Hashable, Sendable, CaseIterable {
                    case _1 = "1"
                    case _2 = "2"
                }
                /// V1 error format.
                ///
                /// - Remark: Generated from `#/paths/v4/spreadsheets/{spreadsheetId}/values:batchClear/POST/query/$.xgafv`.
                public var _dollar__xgafv: Components.Parameters.__period_xgafv?
                /// OAuth access token.
                ///
                /// - Remark: Generated from `#/paths/v4/spreadsheets/{spreadsheetId}/values:batchClear/POST/query/access_token`.
                public var accessToken: Components.Parameters.AccessToken?
                /// - Remark: Generated from `#/components/parameters/alt`.
                @frozen public enum Alt: String, Codable, Hashable, Sendable, CaseIterable {
                    case json = "json"
                    case media = "media"
                    case proto = "proto"
                }
                /// Data format for response.
                ///
                /// - Remark: Generated from `#/paths/v4/spreadsheets/{spreadsheetId}/values:batchClear/POST/query/alt`.
                public var alt: Components.Parameters.Alt?
                /// JSONP
                ///
                /// - Remark: Generated from `#/paths/v4/spreadsheets/{spreadsheetId}/values:batchClear/POST/query/callback`.
                public var callback: Components.Parameters.Callback?
                /// Selector specifying which fields to include in a partial response.
                ///
                /// - Remark: Generated from `#/paths/v4/spreadsheets/{spreadsheetId}/values:batchClear/POST/query/fields`.
                public var fields: Components.Parameters.Fields?
                /// API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
                ///
                /// - Remark: Generated from `#/paths/v4/spreadsheets/{spreadsheetId}/values:batchClear/POST/query/key`.
                public var key: Components.Parameters.Key?
                /// OAuth 2.0 token for the current user.
                ///
                /// - Remark: Generated from `#/paths/v4/spreadsheets/{spreadsheetId}/values:batchClear/POST/query/oauth_token`.
                public var oauthToken: Components.Parameters.OauthToken?
                /// Returns response with indentations and line breaks.
                ///
                /// - Remark: Generated from `#/paths/v4/spreadsheets/{spreadsheetId}/values:batchClear/POST/query/prettyPrint`.
                public var prettyPrint: Components.Parameters.PrettyPrint?
                /// Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
                ///
                /// - Remark: Generated from `#/paths/v4/spreadsheets/{spreadsheetId}/values:batchClear/POST/query/quotaUser`.
                public var quotaUser: Components.Parameters.QuotaUser?
                /// Upload protocol for media (e.g. "raw", "multipart").
                ///
                /// - Remark: Generated from `#/paths/v4/spreadsheets/{spreadsheetId}/values:batchClear/POST/query/upload_protocol`.
                public var uploadProtocol: Components.Parameters.UploadProtocol?
                /// Legacy upload protocol for media (e.g. "media", "multipart").
                ///
                /// - Remark: Generated from `#/paths/v4/spreadsheets/{spreadsheetId}/values:batchClear/POST/query/uploadType`.
                public var uploadType: Components.Parameters.UploadType?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - _dollar__xgafv: V1 error format.
                ///   - accessToken: OAuth access token.
                ///   - alt: Data format for response.
                ///   - callback: JSONP
                ///   - fields: Selector specifying which fields to include in a partial response.
                ///   - key: API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
                ///   - oauthToken: OAuth 2.0 token for the current user.
                ///   - prettyPrint: Returns response with indentations and line breaks.
                ///   - quotaUser: Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
                ///   - uploadProtocol: Upload protocol for media (e.g. "raw", "multipart").
                ///   - uploadType: Legacy upload protocol for media (e.g. "media", "multipart").
                public init(
                    _dollar__xgafv: Components.Parameters.__period_xgafv? = nil,
                    accessToken: Components.Parameters.AccessToken? = nil,
                    alt: Components.Parameters.Alt? = nil,
                    callback: Components.Parameters.Callback? = nil,
                    fields: Components.Parameters.Fields? = nil,
                    key: Components.Parameters.Key? = nil,
                    oauthToken: Components.Parameters.OauthToken? = nil,
                    prettyPrint: Components.Parameters.PrettyPrint? = nil,
                    quotaUser: Components.Parameters.QuotaUser? = nil,
                    uploadProtocol: Components.Parameters.UploadProtocol? = nil,
                    uploadType: Components.Parameters.UploadType? = nil
                ) {
                    self._dollar__xgafv = _dollar__xgafv
                    self.accessToken = accessToken
                    self.alt = alt
                    self.callback = callback
                    self.fields = fields
                    self.key = key
                    self.oauthToken = oauthToken
                    self.prettyPrint = prettyPrint
                    self.quotaUser = quotaUser
                    self.uploadProtocol = uploadProtocol
                    self.uploadType = uploadType
                }
            }
            public var query: Operations.Sheets_spreadsheets_values_batchClear.Input.Query
            /// - Remark: Generated from `#/paths/v4/spreadsheets/{spreadsheetId}/values:batchClear/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.Sheets_spreadsheets_values_batchClear.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.Sheets_spreadsheets_values_batchClear.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.Sheets_spreadsheets_values_batchClear.Input.Headers
            /// - Remark: Generated from `#/paths/v4/spreadsheets/{spreadsheetId}/values:batchClear/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/v4/spreadsheets/{spreadsheetId}/values:batchClear/POST/requestBody/content/application\/json`.
                case json(Components.Schemas.BatchClearValuesRequest)
            }
            public var body: Operations.Sheets_spreadsheets_values_batchClear.Input.Body?
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - query:
            ///   - headers:
            ///   - body:
            public init(
                path: Operations.Sheets_spreadsheets_values_batchClear.Input.Path,
                query: Operations.Sheets_spreadsheets_values_batchClear.Input.Query = .init(),
                headers: Operations.Sheets_spreadsheets_values_batchClear.Input.Headers = .init(),
                body: Operations.Sheets_spreadsheets_values_batchClear.Input.Body? = nil
            ) {
                self.path = path
                self.query = query
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/v4/spreadsheets/{spreadsheetId}/values:batchClear/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/v4/spreadsheets/{spreadsheetId}/values:batchClear/POST/responses/200/content/application\/json`.
                    case json(Components.Schemas.BatchClearValuesResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.BatchClearValuesResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.Sheets_spreadsheets_values_batchClear.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.Sheets_spreadsheets_values_batchClear.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Successful response
            ///
            /// - Remark: Generated from `#/paths//v4/spreadsheets/{spreadsheetId}/values:batchClear/post(sheets.spreadsheets.values.batchClear)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.Sheets_spreadsheets_values_batchClear.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.Sheets_spreadsheets_values_batchClear.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Clears one or more ranges of values from a spreadsheet. The caller must specify the spreadsheet ID and one or more DataFilters. Ranges matching any of the specified data filters will be cleared. Only values are cleared -- all other properties of the cell (such as formatting, data validation, etc..) are kept.
    ///
    /// - Remark: HTTP `POST /v4/spreadsheets/{spreadsheetId}/values:batchClearByDataFilter`.
    /// - Remark: Generated from `#/paths//v4/spreadsheets/{spreadsheetId}/values:batchClearByDataFilter/post(sheets.spreadsheets.values.batchClearByDataFilter)`.
    public enum Sheets_spreadsheets_values_batchClearByDataFilter {
        public static let id: Swift.String = "sheets.spreadsheets.values.batchClearByDataFilter"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/v4/spreadsheets/{spreadsheetId}/values:batchClearByDataFilter/POST/path`.
            public struct Path: Sendable, Hashable {
                /// The ID of the spreadsheet to update.
                ///
                /// - Remark: Generated from `#/paths/v4/spreadsheets/{spreadsheetId}/values:batchClearByDataFilter/POST/path/spreadsheetId`.
                public var spreadsheetId: Swift.String
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - spreadsheetId: The ID of the spreadsheet to update.
                public init(spreadsheetId: Swift.String) {
                    self.spreadsheetId = spreadsheetId
                }
            }
            public var path: Operations.Sheets_spreadsheets_values_batchClearByDataFilter.Input.Path
            /// - Remark: Generated from `#/paths/v4/spreadsheets/{spreadsheetId}/values:batchClearByDataFilter/POST/query`.
            public struct Query: Sendable, Hashable {
                /// - Remark: Generated from `#/components/parameters/_.xgafv`.
                @frozen public enum __period_xgafv: String, Codable, Hashable, Sendable, CaseIterable {
                    case _1 = "1"
                    case _2 = "2"
                }
                /// V1 error format.
                ///
                /// - Remark: Generated from `#/paths/v4/spreadsheets/{spreadsheetId}/values:batchClearByDataFilter/POST/query/$.xgafv`.
                public var _dollar__xgafv: Components.Parameters.__period_xgafv?
                /// OAuth access token.
                ///
                /// - Remark: Generated from `#/paths/v4/spreadsheets/{spreadsheetId}/values:batchClearByDataFilter/POST/query/access_token`.
                public var accessToken: Components.Parameters.AccessToken?
                /// - Remark: Generated from `#/components/parameters/alt`.
                @frozen public enum Alt: String, Codable, Hashable, Sendable, CaseIterable {
                    case json = "json"
                    case media = "media"
                    case proto = "proto"
                }
                /// Data format for response.
                ///
                /// - Remark: Generated from `#/paths/v4/spreadsheets/{spreadsheetId}/values:batchClearByDataFilter/POST/query/alt`.
                public var alt: Components.Parameters.Alt?
                /// JSONP
                ///
                /// - Remark: Generated from `#/paths/v4/spreadsheets/{spreadsheetId}/values:batchClearByDataFilter/POST/query/callback`.
                public var callback: Components.Parameters.Callback?
                /// Selector specifying which fields to include in a partial response.
                ///
                /// - Remark: Generated from `#/paths/v4/spreadsheets/{spreadsheetId}/values:batchClearByDataFilter/POST/query/fields`.
                public var fields: Components.Parameters.Fields?
                /// API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
                ///
                /// - Remark: Generated from `#/paths/v4/spreadsheets/{spreadsheetId}/values:batchClearByDataFilter/POST/query/key`.
                public var key: Components.Parameters.Key?
                /// OAuth 2.0 token for the current user.
                ///
                /// - Remark: Generated from `#/paths/v4/spreadsheets/{spreadsheetId}/values:batchClearByDataFilter/POST/query/oauth_token`.
                public var oauthToken: Components.Parameters.OauthToken?
                /// Returns response with indentations and line breaks.
                ///
                /// - Remark: Generated from `#/paths/v4/spreadsheets/{spreadsheetId}/values:batchClearByDataFilter/POST/query/prettyPrint`.
                public var prettyPrint: Components.Parameters.PrettyPrint?
                /// Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
                ///
                /// - Remark: Generated from `#/paths/v4/spreadsheets/{spreadsheetId}/values:batchClearByDataFilter/POST/query/quotaUser`.
                public var quotaUser: Components.Parameters.QuotaUser?
                /// Upload protocol for media (e.g. "raw", "multipart").
                ///
                /// - Remark: Generated from `#/paths/v4/spreadsheets/{spreadsheetId}/values:batchClearByDataFilter/POST/query/upload_protocol`.
                public var uploadProtocol: Components.Parameters.UploadProtocol?
                /// Legacy upload protocol for media (e.g. "media", "multipart").
                ///
                /// - Remark: Generated from `#/paths/v4/spreadsheets/{spreadsheetId}/values:batchClearByDataFilter/POST/query/uploadType`.
                public var uploadType: Components.Parameters.UploadType?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - _dollar__xgafv: V1 error format.
                ///   - accessToken: OAuth access token.
                ///   - alt: Data format for response.
                ///   - callback: JSONP
                ///   - fields: Selector specifying which fields to include in a partial response.
                ///   - key: API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
                ///   - oauthToken: OAuth 2.0 token for the current user.
                ///   - prettyPrint: Returns response with indentations and line breaks.
                ///   - quotaUser: Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
                ///   - uploadProtocol: Upload protocol for media (e.g. "raw", "multipart").
                ///   - uploadType: Legacy upload protocol for media (e.g. "media", "multipart").
                public init(
                    _dollar__xgafv: Components.Parameters.__period_xgafv? = nil,
                    accessToken: Components.Parameters.AccessToken? = nil,
                    alt: Components.Parameters.Alt? = nil,
                    callback: Components.Parameters.Callback? = nil,
                    fields: Components.Parameters.Fields? = nil,
                    key: Components.Parameters.Key? = nil,
                    oauthToken: Components.Parameters.OauthToken? = nil,
                    prettyPrint: Components.Parameters.PrettyPrint? = nil,
                    quotaUser: Components.Parameters.QuotaUser? = nil,
                    uploadProtocol: Components.Parameters.UploadProtocol? = nil,
                    uploadType: Components.Parameters.UploadType? = nil
                ) {
                    self._dollar__xgafv = _dollar__xgafv
                    self.accessToken = accessToken
                    self.alt = alt
                    self.callback = callback
                    self.fields = fields
                    self.key = key
                    self.oauthToken = oauthToken
                    self.prettyPrint = prettyPrint
                    self.quotaUser = quotaUser
                    self.uploadProtocol = uploadProtocol
                    self.uploadType = uploadType
                }
            }
            public var query: Operations.Sheets_spreadsheets_values_batchClearByDataFilter.Input.Query
            /// - Remark: Generated from `#/paths/v4/spreadsheets/{spreadsheetId}/values:batchClearByDataFilter/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.Sheets_spreadsheets_values_batchClearByDataFilter.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.Sheets_spreadsheets_values_batchClearByDataFilter.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.Sheets_spreadsheets_values_batchClearByDataFilter.Input.Headers
            /// - Remark: Generated from `#/paths/v4/spreadsheets/{spreadsheetId}/values:batchClearByDataFilter/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/v4/spreadsheets/{spreadsheetId}/values:batchClearByDataFilter/POST/requestBody/content/application\/json`.
                case json(Components.Schemas.BatchClearValuesByDataFilterRequest)
            }
            public var body: Operations.Sheets_spreadsheets_values_batchClearByDataFilter.Input.Body?
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - query:
            ///   - headers:
            ///   - body:
            public init(
                path: Operations.Sheets_spreadsheets_values_batchClearByDataFilter.Input.Path,
                query: Operations.Sheets_spreadsheets_values_batchClearByDataFilter.Input.Query = .init(),
                headers: Operations.Sheets_spreadsheets_values_batchClearByDataFilter.Input.Headers = .init(),
                body: Operations.Sheets_spreadsheets_values_batchClearByDataFilter.Input.Body? = nil
            ) {
                self.path = path
                self.query = query
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/v4/spreadsheets/{spreadsheetId}/values:batchClearByDataFilter/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/v4/spreadsheets/{spreadsheetId}/values:batchClearByDataFilter/POST/responses/200/content/application\/json`.
                    case json(Components.Schemas.BatchClearValuesByDataFilterResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.BatchClearValuesByDataFilterResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.Sheets_spreadsheets_values_batchClearByDataFilter.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.Sheets_spreadsheets_values_batchClearByDataFilter.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Successful response
            ///
            /// - Remark: Generated from `#/paths//v4/spreadsheets/{spreadsheetId}/values:batchClearByDataFilter/post(sheets.spreadsheets.values.batchClearByDataFilter)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.Sheets_spreadsheets_values_batchClearByDataFilter.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.Sheets_spreadsheets_values_batchClearByDataFilter.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Returns one or more ranges of values from a spreadsheet. The caller must specify the spreadsheet ID and one or more ranges.
    ///
    /// - Remark: HTTP `GET /v4/spreadsheets/{spreadsheetId}/values:batchGet`.
    /// - Remark: Generated from `#/paths//v4/spreadsheets/{spreadsheetId}/values:batchGet/get(sheets.spreadsheets.values.batchGet)`.
    public enum Sheets_spreadsheets_values_batchGet {
        public static let id: Swift.String = "sheets.spreadsheets.values.batchGet"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/v4/spreadsheets/{spreadsheetId}/values:batchGet/GET/path`.
            public struct Path: Sendable, Hashable {
                /// The ID of the spreadsheet to retrieve data from.
                ///
                /// - Remark: Generated from `#/paths/v4/spreadsheets/{spreadsheetId}/values:batchGet/GET/path/spreadsheetId`.
                public var spreadsheetId: Swift.String
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - spreadsheetId: The ID of the spreadsheet to retrieve data from.
                public init(spreadsheetId: Swift.String) {
                    self.spreadsheetId = spreadsheetId
                }
            }
            public var path: Operations.Sheets_spreadsheets_values_batchGet.Input.Path
            /// - Remark: Generated from `#/paths/v4/spreadsheets/{spreadsheetId}/values:batchGet/GET/query`.
            public struct Query: Sendable, Hashable {
                /// - Remark: Generated from `#/components/parameters/_.xgafv`.
                @frozen public enum __period_xgafv: String, Codable, Hashable, Sendable, CaseIterable {
                    case _1 = "1"
                    case _2 = "2"
                }
                /// V1 error format.
                ///
                /// - Remark: Generated from `#/paths/v4/spreadsheets/{spreadsheetId}/values:batchGet/GET/query/$.xgafv`.
                public var _dollar__xgafv: Components.Parameters.__period_xgafv?
                /// OAuth access token.
                ///
                /// - Remark: Generated from `#/paths/v4/spreadsheets/{spreadsheetId}/values:batchGet/GET/query/access_token`.
                public var accessToken: Components.Parameters.AccessToken?
                /// - Remark: Generated from `#/components/parameters/alt`.
                @frozen public enum Alt: String, Codable, Hashable, Sendable, CaseIterable {
                    case json = "json"
                    case media = "media"
                    case proto = "proto"
                }
                /// Data format for response.
                ///
                /// - Remark: Generated from `#/paths/v4/spreadsheets/{spreadsheetId}/values:batchGet/GET/query/alt`.
                public var alt: Components.Parameters.Alt?
                /// JSONP
                ///
                /// - Remark: Generated from `#/paths/v4/spreadsheets/{spreadsheetId}/values:batchGet/GET/query/callback`.
                public var callback: Components.Parameters.Callback?
                /// Selector specifying which fields to include in a partial response.
                ///
                /// - Remark: Generated from `#/paths/v4/spreadsheets/{spreadsheetId}/values:batchGet/GET/query/fields`.
                public var fields: Components.Parameters.Fields?
                /// API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
                ///
                /// - Remark: Generated from `#/paths/v4/spreadsheets/{spreadsheetId}/values:batchGet/GET/query/key`.
                public var key: Components.Parameters.Key?
                /// OAuth 2.0 token for the current user.
                ///
                /// - Remark: Generated from `#/paths/v4/spreadsheets/{spreadsheetId}/values:batchGet/GET/query/oauth_token`.
                public var oauthToken: Components.Parameters.OauthToken?
                /// Returns response with indentations and line breaks.
                ///
                /// - Remark: Generated from `#/paths/v4/spreadsheets/{spreadsheetId}/values:batchGet/GET/query/prettyPrint`.
                public var prettyPrint: Components.Parameters.PrettyPrint?
                /// Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
                ///
                /// - Remark: Generated from `#/paths/v4/spreadsheets/{spreadsheetId}/values:batchGet/GET/query/quotaUser`.
                public var quotaUser: Components.Parameters.QuotaUser?
                /// Upload protocol for media (e.g. "raw", "multipart").
                ///
                /// - Remark: Generated from `#/paths/v4/spreadsheets/{spreadsheetId}/values:batchGet/GET/query/upload_protocol`.
                public var uploadProtocol: Components.Parameters.UploadProtocol?
                /// Legacy upload protocol for media (e.g. "media", "multipart").
                ///
                /// - Remark: Generated from `#/paths/v4/spreadsheets/{spreadsheetId}/values:batchGet/GET/query/uploadType`.
                public var uploadType: Components.Parameters.UploadType?
                /// - Remark: Generated from `#/paths/v4/spreadsheets/{spreadsheetId}/values:batchGet/GET/query/dateTimeRenderOption`.
                @frozen public enum DateTimeRenderOptionPayload: String, Codable, Hashable, Sendable, CaseIterable {
                    case serialNumber = "SERIAL_NUMBER"
                    case formattedString = "FORMATTED_STRING"
                }
                /// How dates, times, and durations should be represented in the output. This is ignored if value_render_option is FORMATTED_VALUE. The default dateTime render option is SERIAL_NUMBER.
                ///
                /// - Remark: Generated from `#/paths/v4/spreadsheets/{spreadsheetId}/values:batchGet/GET/query/dateTimeRenderOption`.
                public var dateTimeRenderOption: Operations.Sheets_spreadsheets_values_batchGet.Input.Query.DateTimeRenderOptionPayload?
                /// - Remark: Generated from `#/paths/v4/spreadsheets/{spreadsheetId}/values:batchGet/GET/query/majorDimension`.
                @frozen public enum MajorDimensionPayload: String, Codable, Hashable, Sendable, CaseIterable {
                    case dimensionUnspecified = "DIMENSION_UNSPECIFIED"
                    case rows = "ROWS"
                    case columns = "COLUMNS"
                }
                /// The major dimension that results should use. For example, if the spreadsheet data is: `A1=1,B1=2,A2=3,B2=4`, then requesting `ranges=["A1:B2"],majorDimension=ROWS` returns `[[1,2],[3,4]]`, whereas requesting `ranges=["A1:B2"],majorDimension=COLUMNS` returns `[[1,3],[2,4]]`.
                ///
                /// - Remark: Generated from `#/paths/v4/spreadsheets/{spreadsheetId}/values:batchGet/GET/query/majorDimension`.
                public var majorDimension: Operations.Sheets_spreadsheets_values_batchGet.Input.Query.MajorDimensionPayload?
                /// The [A1 notation or R1C1 notation](/sheets/api/guides/concepts#cell) of the range to retrieve values from.
                ///
                /// - Remark: Generated from `#/paths/v4/spreadsheets/{spreadsheetId}/values:batchGet/GET/query/ranges`.
                public var ranges: [Swift.String]?
                /// - Remark: Generated from `#/paths/v4/spreadsheets/{spreadsheetId}/values:batchGet/GET/query/valueRenderOption`.
                @frozen public enum ValueRenderOptionPayload: String, Codable, Hashable, Sendable, CaseIterable {
                    case formattedValue = "FORMATTED_VALUE"
                    case unformattedValue = "UNFORMATTED_VALUE"
                    case formula = "FORMULA"
                }
                /// How values should be represented in the output. The default render option is ValueRenderOption.FORMATTED_VALUE.
                ///
                /// - Remark: Generated from `#/paths/v4/spreadsheets/{spreadsheetId}/values:batchGet/GET/query/valueRenderOption`.
                public var valueRenderOption: Operations.Sheets_spreadsheets_values_batchGet.Input.Query.ValueRenderOptionPayload?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - _dollar__xgafv: V1 error format.
                ///   - accessToken: OAuth access token.
                ///   - alt: Data format for response.
                ///   - callback: JSONP
                ///   - fields: Selector specifying which fields to include in a partial response.
                ///   - key: API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
                ///   - oauthToken: OAuth 2.0 token for the current user.
                ///   - prettyPrint: Returns response with indentations and line breaks.
                ///   - quotaUser: Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
                ///   - uploadProtocol: Upload protocol for media (e.g. "raw", "multipart").
                ///   - uploadType: Legacy upload protocol for media (e.g. "media", "multipart").
                ///   - dateTimeRenderOption: How dates, times, and durations should be represented in the output. This is ignored if value_render_option is FORMATTED_VALUE. The default dateTime render option is SERIAL_NUMBER.
                ///   - majorDimension: The major dimension that results should use. For example, if the spreadsheet data is: `A1=1,B1=2,A2=3,B2=4`, then requesting `ranges=["A1:B2"],majorDimension=ROWS` returns `[[1,2],[3,4]]`, whereas requesting `ranges=["A1:B2"],majorDimension=COLUMNS` returns `[[1,3],[2,4]]`.
                ///   - ranges: The [A1 notation or R1C1 notation](/sheets/api/guides/concepts#cell) of the range to retrieve values from.
                ///   - valueRenderOption: How values should be represented in the output. The default render option is ValueRenderOption.FORMATTED_VALUE.
                public init(
                    _dollar__xgafv: Components.Parameters.__period_xgafv? = nil,
                    accessToken: Components.Parameters.AccessToken? = nil,
                    alt: Components.Parameters.Alt? = nil,
                    callback: Components.Parameters.Callback? = nil,
                    fields: Components.Parameters.Fields? = nil,
                    key: Components.Parameters.Key? = nil,
                    oauthToken: Components.Parameters.OauthToken? = nil,
                    prettyPrint: Components.Parameters.PrettyPrint? = nil,
                    quotaUser: Components.Parameters.QuotaUser? = nil,
                    uploadProtocol: Components.Parameters.UploadProtocol? = nil,
                    uploadType: Components.Parameters.UploadType? = nil,
                    dateTimeRenderOption: Operations.Sheets_spreadsheets_values_batchGet.Input.Query.DateTimeRenderOptionPayload? = nil,
                    majorDimension: Operations.Sheets_spreadsheets_values_batchGet.Input.Query.MajorDimensionPayload? = nil,
                    ranges: [Swift.String]? = nil,
                    valueRenderOption: Operations.Sheets_spreadsheets_values_batchGet.Input.Query.ValueRenderOptionPayload? = nil
                ) {
                    self._dollar__xgafv = _dollar__xgafv
                    self.accessToken = accessToken
                    self.alt = alt
                    self.callback = callback
                    self.fields = fields
                    self.key = key
                    self.oauthToken = oauthToken
                    self.prettyPrint = prettyPrint
                    self.quotaUser = quotaUser
                    self.uploadProtocol = uploadProtocol
                    self.uploadType = uploadType
                    self.dateTimeRenderOption = dateTimeRenderOption
                    self.majorDimension = majorDimension
                    self.ranges = ranges
                    self.valueRenderOption = valueRenderOption
                }
            }
            public var query: Operations.Sheets_spreadsheets_values_batchGet.Input.Query
            /// - Remark: Generated from `#/paths/v4/spreadsheets/{spreadsheetId}/values:batchGet/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.Sheets_spreadsheets_values_batchGet.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.Sheets_spreadsheets_values_batchGet.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.Sheets_spreadsheets_values_batchGet.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - query:
            ///   - headers:
            public init(
                path: Operations.Sheets_spreadsheets_values_batchGet.Input.Path,
                query: Operations.Sheets_spreadsheets_values_batchGet.Input.Query = .init(),
                headers: Operations.Sheets_spreadsheets_values_batchGet.Input.Headers = .init()
            ) {
                self.path = path
                self.query = query
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/v4/spreadsheets/{spreadsheetId}/values:batchGet/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/v4/spreadsheets/{spreadsheetId}/values:batchGet/GET/responses/200/content/application\/json`.
                    case json(Components.Schemas.BatchGetValuesResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.BatchGetValuesResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.Sheets_spreadsheets_values_batchGet.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.Sheets_spreadsheets_values_batchGet.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Successful response
            ///
            /// - Remark: Generated from `#/paths//v4/spreadsheets/{spreadsheetId}/values:batchGet/get(sheets.spreadsheets.values.batchGet)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.Sheets_spreadsheets_values_batchGet.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.Sheets_spreadsheets_values_batchGet.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Returns one or more ranges of values that match the specified data filters. The caller must specify the spreadsheet ID and one or more DataFilters. Ranges that match any of the data filters in the request will be returned.
    ///
    /// - Remark: HTTP `POST /v4/spreadsheets/{spreadsheetId}/values:batchGetByDataFilter`.
    /// - Remark: Generated from `#/paths//v4/spreadsheets/{spreadsheetId}/values:batchGetByDataFilter/post(sheets.spreadsheets.values.batchGetByDataFilter)`.
    public enum Sheets_spreadsheets_values_batchGetByDataFilter {
        public static let id: Swift.String = "sheets.spreadsheets.values.batchGetByDataFilter"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/v4/spreadsheets/{spreadsheetId}/values:batchGetByDataFilter/POST/path`.
            public struct Path: Sendable, Hashable {
                /// The ID of the spreadsheet to retrieve data from.
                ///
                /// - Remark: Generated from `#/paths/v4/spreadsheets/{spreadsheetId}/values:batchGetByDataFilter/POST/path/spreadsheetId`.
                public var spreadsheetId: Swift.String
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - spreadsheetId: The ID of the spreadsheet to retrieve data from.
                public init(spreadsheetId: Swift.String) {
                    self.spreadsheetId = spreadsheetId
                }
            }
            public var path: Operations.Sheets_spreadsheets_values_batchGetByDataFilter.Input.Path
            /// - Remark: Generated from `#/paths/v4/spreadsheets/{spreadsheetId}/values:batchGetByDataFilter/POST/query`.
            public struct Query: Sendable, Hashable {
                /// - Remark: Generated from `#/components/parameters/_.xgafv`.
                @frozen public enum __period_xgafv: String, Codable, Hashable, Sendable, CaseIterable {
                    case _1 = "1"
                    case _2 = "2"
                }
                /// V1 error format.
                ///
                /// - Remark: Generated from `#/paths/v4/spreadsheets/{spreadsheetId}/values:batchGetByDataFilter/POST/query/$.xgafv`.
                public var _dollar__xgafv: Components.Parameters.__period_xgafv?
                /// OAuth access token.
                ///
                /// - Remark: Generated from `#/paths/v4/spreadsheets/{spreadsheetId}/values:batchGetByDataFilter/POST/query/access_token`.
                public var accessToken: Components.Parameters.AccessToken?
                /// - Remark: Generated from `#/components/parameters/alt`.
                @frozen public enum Alt: String, Codable, Hashable, Sendable, CaseIterable {
                    case json = "json"
                    case media = "media"
                    case proto = "proto"
                }
                /// Data format for response.
                ///
                /// - Remark: Generated from `#/paths/v4/spreadsheets/{spreadsheetId}/values:batchGetByDataFilter/POST/query/alt`.
                public var alt: Components.Parameters.Alt?
                /// JSONP
                ///
                /// - Remark: Generated from `#/paths/v4/spreadsheets/{spreadsheetId}/values:batchGetByDataFilter/POST/query/callback`.
                public var callback: Components.Parameters.Callback?
                /// Selector specifying which fields to include in a partial response.
                ///
                /// - Remark: Generated from `#/paths/v4/spreadsheets/{spreadsheetId}/values:batchGetByDataFilter/POST/query/fields`.
                public var fields: Components.Parameters.Fields?
                /// API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
                ///
                /// - Remark: Generated from `#/paths/v4/spreadsheets/{spreadsheetId}/values:batchGetByDataFilter/POST/query/key`.
                public var key: Components.Parameters.Key?
                /// OAuth 2.0 token for the current user.
                ///
                /// - Remark: Generated from `#/paths/v4/spreadsheets/{spreadsheetId}/values:batchGetByDataFilter/POST/query/oauth_token`.
                public var oauthToken: Components.Parameters.OauthToken?
                /// Returns response with indentations and line breaks.
                ///
                /// - Remark: Generated from `#/paths/v4/spreadsheets/{spreadsheetId}/values:batchGetByDataFilter/POST/query/prettyPrint`.
                public var prettyPrint: Components.Parameters.PrettyPrint?
                /// Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
                ///
                /// - Remark: Generated from `#/paths/v4/spreadsheets/{spreadsheetId}/values:batchGetByDataFilter/POST/query/quotaUser`.
                public var quotaUser: Components.Parameters.QuotaUser?
                /// Upload protocol for media (e.g. "raw", "multipart").
                ///
                /// - Remark: Generated from `#/paths/v4/spreadsheets/{spreadsheetId}/values:batchGetByDataFilter/POST/query/upload_protocol`.
                public var uploadProtocol: Components.Parameters.UploadProtocol?
                /// Legacy upload protocol for media (e.g. "media", "multipart").
                ///
                /// - Remark: Generated from `#/paths/v4/spreadsheets/{spreadsheetId}/values:batchGetByDataFilter/POST/query/uploadType`.
                public var uploadType: Components.Parameters.UploadType?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - _dollar__xgafv: V1 error format.
                ///   - accessToken: OAuth access token.
                ///   - alt: Data format for response.
                ///   - callback: JSONP
                ///   - fields: Selector specifying which fields to include in a partial response.
                ///   - key: API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
                ///   - oauthToken: OAuth 2.0 token for the current user.
                ///   - prettyPrint: Returns response with indentations and line breaks.
                ///   - quotaUser: Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
                ///   - uploadProtocol: Upload protocol for media (e.g. "raw", "multipart").
                ///   - uploadType: Legacy upload protocol for media (e.g. "media", "multipart").
                public init(
                    _dollar__xgafv: Components.Parameters.__period_xgafv? = nil,
                    accessToken: Components.Parameters.AccessToken? = nil,
                    alt: Components.Parameters.Alt? = nil,
                    callback: Components.Parameters.Callback? = nil,
                    fields: Components.Parameters.Fields? = nil,
                    key: Components.Parameters.Key? = nil,
                    oauthToken: Components.Parameters.OauthToken? = nil,
                    prettyPrint: Components.Parameters.PrettyPrint? = nil,
                    quotaUser: Components.Parameters.QuotaUser? = nil,
                    uploadProtocol: Components.Parameters.UploadProtocol? = nil,
                    uploadType: Components.Parameters.UploadType? = nil
                ) {
                    self._dollar__xgafv = _dollar__xgafv
                    self.accessToken = accessToken
                    self.alt = alt
                    self.callback = callback
                    self.fields = fields
                    self.key = key
                    self.oauthToken = oauthToken
                    self.prettyPrint = prettyPrint
                    self.quotaUser = quotaUser
                    self.uploadProtocol = uploadProtocol
                    self.uploadType = uploadType
                }
            }
            public var query: Operations.Sheets_spreadsheets_values_batchGetByDataFilter.Input.Query
            /// - Remark: Generated from `#/paths/v4/spreadsheets/{spreadsheetId}/values:batchGetByDataFilter/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.Sheets_spreadsheets_values_batchGetByDataFilter.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.Sheets_spreadsheets_values_batchGetByDataFilter.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.Sheets_spreadsheets_values_batchGetByDataFilter.Input.Headers
            /// - Remark: Generated from `#/paths/v4/spreadsheets/{spreadsheetId}/values:batchGetByDataFilter/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/v4/spreadsheets/{spreadsheetId}/values:batchGetByDataFilter/POST/requestBody/content/application\/json`.
                case json(Components.Schemas.BatchGetValuesByDataFilterRequest)
            }
            public var body: Operations.Sheets_spreadsheets_values_batchGetByDataFilter.Input.Body?
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - query:
            ///   - headers:
            ///   - body:
            public init(
                path: Operations.Sheets_spreadsheets_values_batchGetByDataFilter.Input.Path,
                query: Operations.Sheets_spreadsheets_values_batchGetByDataFilter.Input.Query = .init(),
                headers: Operations.Sheets_spreadsheets_values_batchGetByDataFilter.Input.Headers = .init(),
                body: Operations.Sheets_spreadsheets_values_batchGetByDataFilter.Input.Body? = nil
            ) {
                self.path = path
                self.query = query
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/v4/spreadsheets/{spreadsheetId}/values:batchGetByDataFilter/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/v4/spreadsheets/{spreadsheetId}/values:batchGetByDataFilter/POST/responses/200/content/application\/json`.
                    case json(Components.Schemas.BatchGetValuesByDataFilterResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.BatchGetValuesByDataFilterResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.Sheets_spreadsheets_values_batchGetByDataFilter.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.Sheets_spreadsheets_values_batchGetByDataFilter.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Successful response
            ///
            /// - Remark: Generated from `#/paths//v4/spreadsheets/{spreadsheetId}/values:batchGetByDataFilter/post(sheets.spreadsheets.values.batchGetByDataFilter)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.Sheets_spreadsheets_values_batchGetByDataFilter.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.Sheets_spreadsheets_values_batchGetByDataFilter.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Sets values in one or more ranges of a spreadsheet. The caller must specify the spreadsheet ID, a valueInputOption, and one or more ValueRanges.
    ///
    /// - Remark: HTTP `POST /v4/spreadsheets/{spreadsheetId}/values:batchUpdate`.
    /// - Remark: Generated from `#/paths//v4/spreadsheets/{spreadsheetId}/values:batchUpdate/post(sheets.spreadsheets.values.batchUpdate)`.
    public enum Sheets_spreadsheets_values_batchUpdate {
        public static let id: Swift.String = "sheets.spreadsheets.values.batchUpdate"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/v4/spreadsheets/{spreadsheetId}/values:batchUpdate/POST/path`.
            public struct Path: Sendable, Hashable {
                /// The ID of the spreadsheet to update.
                ///
                /// - Remark: Generated from `#/paths/v4/spreadsheets/{spreadsheetId}/values:batchUpdate/POST/path/spreadsheetId`.
                public var spreadsheetId: Swift.String
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - spreadsheetId: The ID of the spreadsheet to update.
                public init(spreadsheetId: Swift.String) {
                    self.spreadsheetId = spreadsheetId
                }
            }
            public var path: Operations.Sheets_spreadsheets_values_batchUpdate.Input.Path
            /// - Remark: Generated from `#/paths/v4/spreadsheets/{spreadsheetId}/values:batchUpdate/POST/query`.
            public struct Query: Sendable, Hashable {
                /// - Remark: Generated from `#/components/parameters/_.xgafv`.
                @frozen public enum __period_xgafv: String, Codable, Hashable, Sendable, CaseIterable {
                    case _1 = "1"
                    case _2 = "2"
                }
                /// V1 error format.
                ///
                /// - Remark: Generated from `#/paths/v4/spreadsheets/{spreadsheetId}/values:batchUpdate/POST/query/$.xgafv`.
                public var _dollar__xgafv: Components.Parameters.__period_xgafv?
                /// OAuth access token.
                ///
                /// - Remark: Generated from `#/paths/v4/spreadsheets/{spreadsheetId}/values:batchUpdate/POST/query/access_token`.
                public var accessToken: Components.Parameters.AccessToken?
                /// - Remark: Generated from `#/components/parameters/alt`.
                @frozen public enum Alt: String, Codable, Hashable, Sendable, CaseIterable {
                    case json = "json"
                    case media = "media"
                    case proto = "proto"
                }
                /// Data format for response.
                ///
                /// - Remark: Generated from `#/paths/v4/spreadsheets/{spreadsheetId}/values:batchUpdate/POST/query/alt`.
                public var alt: Components.Parameters.Alt?
                /// JSONP
                ///
                /// - Remark: Generated from `#/paths/v4/spreadsheets/{spreadsheetId}/values:batchUpdate/POST/query/callback`.
                public var callback: Components.Parameters.Callback?
                /// Selector specifying which fields to include in a partial response.
                ///
                /// - Remark: Generated from `#/paths/v4/spreadsheets/{spreadsheetId}/values:batchUpdate/POST/query/fields`.
                public var fields: Components.Parameters.Fields?
                /// API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
                ///
                /// - Remark: Generated from `#/paths/v4/spreadsheets/{spreadsheetId}/values:batchUpdate/POST/query/key`.
                public var key: Components.Parameters.Key?
                /// OAuth 2.0 token for the current user.
                ///
                /// - Remark: Generated from `#/paths/v4/spreadsheets/{spreadsheetId}/values:batchUpdate/POST/query/oauth_token`.
                public var oauthToken: Components.Parameters.OauthToken?
                /// Returns response with indentations and line breaks.
                ///
                /// - Remark: Generated from `#/paths/v4/spreadsheets/{spreadsheetId}/values:batchUpdate/POST/query/prettyPrint`.
                public var prettyPrint: Components.Parameters.PrettyPrint?
                /// Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
                ///
                /// - Remark: Generated from `#/paths/v4/spreadsheets/{spreadsheetId}/values:batchUpdate/POST/query/quotaUser`.
                public var quotaUser: Components.Parameters.QuotaUser?
                /// Upload protocol for media (e.g. "raw", "multipart").
                ///
                /// - Remark: Generated from `#/paths/v4/spreadsheets/{spreadsheetId}/values:batchUpdate/POST/query/upload_protocol`.
                public var uploadProtocol: Components.Parameters.UploadProtocol?
                /// Legacy upload protocol for media (e.g. "media", "multipart").
                ///
                /// - Remark: Generated from `#/paths/v4/spreadsheets/{spreadsheetId}/values:batchUpdate/POST/query/uploadType`.
                public var uploadType: Components.Parameters.UploadType?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - _dollar__xgafv: V1 error format.
                ///   - accessToken: OAuth access token.
                ///   - alt: Data format for response.
                ///   - callback: JSONP
                ///   - fields: Selector specifying which fields to include in a partial response.
                ///   - key: API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
                ///   - oauthToken: OAuth 2.0 token for the current user.
                ///   - prettyPrint: Returns response with indentations and line breaks.
                ///   - quotaUser: Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
                ///   - uploadProtocol: Upload protocol for media (e.g. "raw", "multipart").
                ///   - uploadType: Legacy upload protocol for media (e.g. "media", "multipart").
                public init(
                    _dollar__xgafv: Components.Parameters.__period_xgafv? = nil,
                    accessToken: Components.Parameters.AccessToken? = nil,
                    alt: Components.Parameters.Alt? = nil,
                    callback: Components.Parameters.Callback? = nil,
                    fields: Components.Parameters.Fields? = nil,
                    key: Components.Parameters.Key? = nil,
                    oauthToken: Components.Parameters.OauthToken? = nil,
                    prettyPrint: Components.Parameters.PrettyPrint? = nil,
                    quotaUser: Components.Parameters.QuotaUser? = nil,
                    uploadProtocol: Components.Parameters.UploadProtocol? = nil,
                    uploadType: Components.Parameters.UploadType? = nil
                ) {
                    self._dollar__xgafv = _dollar__xgafv
                    self.accessToken = accessToken
                    self.alt = alt
                    self.callback = callback
                    self.fields = fields
                    self.key = key
                    self.oauthToken = oauthToken
                    self.prettyPrint = prettyPrint
                    self.quotaUser = quotaUser
                    self.uploadProtocol = uploadProtocol
                    self.uploadType = uploadType
                }
            }
            public var query: Operations.Sheets_spreadsheets_values_batchUpdate.Input.Query
            /// - Remark: Generated from `#/paths/v4/spreadsheets/{spreadsheetId}/values:batchUpdate/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.Sheets_spreadsheets_values_batchUpdate.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.Sheets_spreadsheets_values_batchUpdate.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.Sheets_spreadsheets_values_batchUpdate.Input.Headers
            /// - Remark: Generated from `#/paths/v4/spreadsheets/{spreadsheetId}/values:batchUpdate/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/v4/spreadsheets/{spreadsheetId}/values:batchUpdate/POST/requestBody/content/application\/json`.
                case json(Components.Schemas.BatchUpdateValuesRequest)
            }
            public var body: Operations.Sheets_spreadsheets_values_batchUpdate.Input.Body?
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - query:
            ///   - headers:
            ///   - body:
            public init(
                path: Operations.Sheets_spreadsheets_values_batchUpdate.Input.Path,
                query: Operations.Sheets_spreadsheets_values_batchUpdate.Input.Query = .init(),
                headers: Operations.Sheets_spreadsheets_values_batchUpdate.Input.Headers = .init(),
                body: Operations.Sheets_spreadsheets_values_batchUpdate.Input.Body? = nil
            ) {
                self.path = path
                self.query = query
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/v4/spreadsheets/{spreadsheetId}/values:batchUpdate/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/v4/spreadsheets/{spreadsheetId}/values:batchUpdate/POST/responses/200/content/application\/json`.
                    case json(Components.Schemas.BatchUpdateValuesResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.BatchUpdateValuesResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.Sheets_spreadsheets_values_batchUpdate.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.Sheets_spreadsheets_values_batchUpdate.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Successful response
            ///
            /// - Remark: Generated from `#/paths//v4/spreadsheets/{spreadsheetId}/values:batchUpdate/post(sheets.spreadsheets.values.batchUpdate)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.Sheets_spreadsheets_values_batchUpdate.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.Sheets_spreadsheets_values_batchUpdate.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Sets values in one or more ranges of a spreadsheet. The caller must specify the spreadsheet ID, a valueInputOption, and one or more DataFilterValueRanges.
    ///
    /// - Remark: HTTP `POST /v4/spreadsheets/{spreadsheetId}/values:batchUpdateByDataFilter`.
    /// - Remark: Generated from `#/paths//v4/spreadsheets/{spreadsheetId}/values:batchUpdateByDataFilter/post(sheets.spreadsheets.values.batchUpdateByDataFilter)`.
    public enum Sheets_spreadsheets_values_batchUpdateByDataFilter {
        public static let id: Swift.String = "sheets.spreadsheets.values.batchUpdateByDataFilter"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/v4/spreadsheets/{spreadsheetId}/values:batchUpdateByDataFilter/POST/path`.
            public struct Path: Sendable, Hashable {
                /// The ID of the spreadsheet to update.
                ///
                /// - Remark: Generated from `#/paths/v4/spreadsheets/{spreadsheetId}/values:batchUpdateByDataFilter/POST/path/spreadsheetId`.
                public var spreadsheetId: Swift.String
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - spreadsheetId: The ID of the spreadsheet to update.
                public init(spreadsheetId: Swift.String) {
                    self.spreadsheetId = spreadsheetId
                }
            }
            public var path: Operations.Sheets_spreadsheets_values_batchUpdateByDataFilter.Input.Path
            /// - Remark: Generated from `#/paths/v4/spreadsheets/{spreadsheetId}/values:batchUpdateByDataFilter/POST/query`.
            public struct Query: Sendable, Hashable {
                /// - Remark: Generated from `#/components/parameters/_.xgafv`.
                @frozen public enum __period_xgafv: String, Codable, Hashable, Sendable, CaseIterable {
                    case _1 = "1"
                    case _2 = "2"
                }
                /// V1 error format.
                ///
                /// - Remark: Generated from `#/paths/v4/spreadsheets/{spreadsheetId}/values:batchUpdateByDataFilter/POST/query/$.xgafv`.
                public var _dollar__xgafv: Components.Parameters.__period_xgafv?
                /// OAuth access token.
                ///
                /// - Remark: Generated from `#/paths/v4/spreadsheets/{spreadsheetId}/values:batchUpdateByDataFilter/POST/query/access_token`.
                public var accessToken: Components.Parameters.AccessToken?
                /// - Remark: Generated from `#/components/parameters/alt`.
                @frozen public enum Alt: String, Codable, Hashable, Sendable, CaseIterable {
                    case json = "json"
                    case media = "media"
                    case proto = "proto"
                }
                /// Data format for response.
                ///
                /// - Remark: Generated from `#/paths/v4/spreadsheets/{spreadsheetId}/values:batchUpdateByDataFilter/POST/query/alt`.
                public var alt: Components.Parameters.Alt?
                /// JSONP
                ///
                /// - Remark: Generated from `#/paths/v4/spreadsheets/{spreadsheetId}/values:batchUpdateByDataFilter/POST/query/callback`.
                public var callback: Components.Parameters.Callback?
                /// Selector specifying which fields to include in a partial response.
                ///
                /// - Remark: Generated from `#/paths/v4/spreadsheets/{spreadsheetId}/values:batchUpdateByDataFilter/POST/query/fields`.
                public var fields: Components.Parameters.Fields?
                /// API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
                ///
                /// - Remark: Generated from `#/paths/v4/spreadsheets/{spreadsheetId}/values:batchUpdateByDataFilter/POST/query/key`.
                public var key: Components.Parameters.Key?
                /// OAuth 2.0 token for the current user.
                ///
                /// - Remark: Generated from `#/paths/v4/spreadsheets/{spreadsheetId}/values:batchUpdateByDataFilter/POST/query/oauth_token`.
                public var oauthToken: Components.Parameters.OauthToken?
                /// Returns response with indentations and line breaks.
                ///
                /// - Remark: Generated from `#/paths/v4/spreadsheets/{spreadsheetId}/values:batchUpdateByDataFilter/POST/query/prettyPrint`.
                public var prettyPrint: Components.Parameters.PrettyPrint?
                /// Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
                ///
                /// - Remark: Generated from `#/paths/v4/spreadsheets/{spreadsheetId}/values:batchUpdateByDataFilter/POST/query/quotaUser`.
                public var quotaUser: Components.Parameters.QuotaUser?
                /// Upload protocol for media (e.g. "raw", "multipart").
                ///
                /// - Remark: Generated from `#/paths/v4/spreadsheets/{spreadsheetId}/values:batchUpdateByDataFilter/POST/query/upload_protocol`.
                public var uploadProtocol: Components.Parameters.UploadProtocol?
                /// Legacy upload protocol for media (e.g. "media", "multipart").
                ///
                /// - Remark: Generated from `#/paths/v4/spreadsheets/{spreadsheetId}/values:batchUpdateByDataFilter/POST/query/uploadType`.
                public var uploadType: Components.Parameters.UploadType?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - _dollar__xgafv: V1 error format.
                ///   - accessToken: OAuth access token.
                ///   - alt: Data format for response.
                ///   - callback: JSONP
                ///   - fields: Selector specifying which fields to include in a partial response.
                ///   - key: API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
                ///   - oauthToken: OAuth 2.0 token for the current user.
                ///   - prettyPrint: Returns response with indentations and line breaks.
                ///   - quotaUser: Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
                ///   - uploadProtocol: Upload protocol for media (e.g. "raw", "multipart").
                ///   - uploadType: Legacy upload protocol for media (e.g. "media", "multipart").
                public init(
                    _dollar__xgafv: Components.Parameters.__period_xgafv? = nil,
                    accessToken: Components.Parameters.AccessToken? = nil,
                    alt: Components.Parameters.Alt? = nil,
                    callback: Components.Parameters.Callback? = nil,
                    fields: Components.Parameters.Fields? = nil,
                    key: Components.Parameters.Key? = nil,
                    oauthToken: Components.Parameters.OauthToken? = nil,
                    prettyPrint: Components.Parameters.PrettyPrint? = nil,
                    quotaUser: Components.Parameters.QuotaUser? = nil,
                    uploadProtocol: Components.Parameters.UploadProtocol? = nil,
                    uploadType: Components.Parameters.UploadType? = nil
                ) {
                    self._dollar__xgafv = _dollar__xgafv
                    self.accessToken = accessToken
                    self.alt = alt
                    self.callback = callback
                    self.fields = fields
                    self.key = key
                    self.oauthToken = oauthToken
                    self.prettyPrint = prettyPrint
                    self.quotaUser = quotaUser
                    self.uploadProtocol = uploadProtocol
                    self.uploadType = uploadType
                }
            }
            public var query: Operations.Sheets_spreadsheets_values_batchUpdateByDataFilter.Input.Query
            /// - Remark: Generated from `#/paths/v4/spreadsheets/{spreadsheetId}/values:batchUpdateByDataFilter/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.Sheets_spreadsheets_values_batchUpdateByDataFilter.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.Sheets_spreadsheets_values_batchUpdateByDataFilter.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.Sheets_spreadsheets_values_batchUpdateByDataFilter.Input.Headers
            /// - Remark: Generated from `#/paths/v4/spreadsheets/{spreadsheetId}/values:batchUpdateByDataFilter/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/v4/spreadsheets/{spreadsheetId}/values:batchUpdateByDataFilter/POST/requestBody/content/application\/json`.
                case json(Components.Schemas.BatchUpdateValuesByDataFilterRequest)
            }
            public var body: Operations.Sheets_spreadsheets_values_batchUpdateByDataFilter.Input.Body?
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - query:
            ///   - headers:
            ///   - body:
            public init(
                path: Operations.Sheets_spreadsheets_values_batchUpdateByDataFilter.Input.Path,
                query: Operations.Sheets_spreadsheets_values_batchUpdateByDataFilter.Input.Query = .init(),
                headers: Operations.Sheets_spreadsheets_values_batchUpdateByDataFilter.Input.Headers = .init(),
                body: Operations.Sheets_spreadsheets_values_batchUpdateByDataFilter.Input.Body? = nil
            ) {
                self.path = path
                self.query = query
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/v4/spreadsheets/{spreadsheetId}/values:batchUpdateByDataFilter/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/v4/spreadsheets/{spreadsheetId}/values:batchUpdateByDataFilter/POST/responses/200/content/application\/json`.
                    case json(Components.Schemas.BatchUpdateValuesByDataFilterResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.BatchUpdateValuesByDataFilterResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.Sheets_spreadsheets_values_batchUpdateByDataFilter.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.Sheets_spreadsheets_values_batchUpdateByDataFilter.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Successful response
            ///
            /// - Remark: Generated from `#/paths//v4/spreadsheets/{spreadsheetId}/values:batchUpdateByDataFilter/post(sheets.spreadsheets.values.batchUpdateByDataFilter)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.Sheets_spreadsheets_values_batchUpdateByDataFilter.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.Sheets_spreadsheets_values_batchUpdateByDataFilter.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Applies one or more updates to the spreadsheet. Each request is validated before being applied. If any request is not valid then the entire request will fail and nothing will be applied. Some requests have replies to give you some information about how they are applied. The replies will mirror the requests. For example, if you applied 4 updates and the 3rd one had a reply, then the response will have 2 empty replies, the actual reply, and another empty reply, in that order. Due to the collaborative nature of spreadsheets, it is not guaranteed that the spreadsheet will reflect exactly your changes after this completes, however it is guaranteed that the updates in the request will be applied together atomically. Your changes may be altered with respect to collaborator changes. If there are no collaborators, the spreadsheet should reflect your changes.
    ///
    /// - Remark: HTTP `POST /v4/spreadsheets/{spreadsheetId}:batchUpdate`.
    /// - Remark: Generated from `#/paths//v4/spreadsheets/{spreadsheetId}:batchUpdate/post(sheets.spreadsheets.batchUpdate)`.
    public enum Sheets_spreadsheets_batchUpdate {
        public static let id: Swift.String = "sheets.spreadsheets.batchUpdate"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/v4/spreadsheets/{spreadsheetId}:batchUpdate/POST/path`.
            public struct Path: Sendable, Hashable {
                /// The spreadsheet to apply the updates to.
                ///
                /// - Remark: Generated from `#/paths/v4/spreadsheets/{spreadsheetId}:batchUpdate/POST/path/spreadsheetId`.
                public var spreadsheetId: Swift.String
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - spreadsheetId: The spreadsheet to apply the updates to.
                public init(spreadsheetId: Swift.String) {
                    self.spreadsheetId = spreadsheetId
                }
            }
            public var path: Operations.Sheets_spreadsheets_batchUpdate.Input.Path
            /// - Remark: Generated from `#/paths/v4/spreadsheets/{spreadsheetId}:batchUpdate/POST/query`.
            public struct Query: Sendable, Hashable {
                /// - Remark: Generated from `#/components/parameters/_.xgafv`.
                @frozen public enum __period_xgafv: String, Codable, Hashable, Sendable, CaseIterable {
                    case _1 = "1"
                    case _2 = "2"
                }
                /// V1 error format.
                ///
                /// - Remark: Generated from `#/paths/v4/spreadsheets/{spreadsheetId}:batchUpdate/POST/query/$.xgafv`.
                public var _dollar__xgafv: Components.Parameters.__period_xgafv?
                /// OAuth access token.
                ///
                /// - Remark: Generated from `#/paths/v4/spreadsheets/{spreadsheetId}:batchUpdate/POST/query/access_token`.
                public var accessToken: Components.Parameters.AccessToken?
                /// - Remark: Generated from `#/components/parameters/alt`.
                @frozen public enum Alt: String, Codable, Hashable, Sendable, CaseIterable {
                    case json = "json"
                    case media = "media"
                    case proto = "proto"
                }
                /// Data format for response.
                ///
                /// - Remark: Generated from `#/paths/v4/spreadsheets/{spreadsheetId}:batchUpdate/POST/query/alt`.
                public var alt: Components.Parameters.Alt?
                /// JSONP
                ///
                /// - Remark: Generated from `#/paths/v4/spreadsheets/{spreadsheetId}:batchUpdate/POST/query/callback`.
                public var callback: Components.Parameters.Callback?
                /// Selector specifying which fields to include in a partial response.
                ///
                /// - Remark: Generated from `#/paths/v4/spreadsheets/{spreadsheetId}:batchUpdate/POST/query/fields`.
                public var fields: Components.Parameters.Fields?
                /// API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
                ///
                /// - Remark: Generated from `#/paths/v4/spreadsheets/{spreadsheetId}:batchUpdate/POST/query/key`.
                public var key: Components.Parameters.Key?
                /// OAuth 2.0 token for the current user.
                ///
                /// - Remark: Generated from `#/paths/v4/spreadsheets/{spreadsheetId}:batchUpdate/POST/query/oauth_token`.
                public var oauthToken: Components.Parameters.OauthToken?
                /// Returns response with indentations and line breaks.
                ///
                /// - Remark: Generated from `#/paths/v4/spreadsheets/{spreadsheetId}:batchUpdate/POST/query/prettyPrint`.
                public var prettyPrint: Components.Parameters.PrettyPrint?
                /// Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
                ///
                /// - Remark: Generated from `#/paths/v4/spreadsheets/{spreadsheetId}:batchUpdate/POST/query/quotaUser`.
                public var quotaUser: Components.Parameters.QuotaUser?
                /// Upload protocol for media (e.g. "raw", "multipart").
                ///
                /// - Remark: Generated from `#/paths/v4/spreadsheets/{spreadsheetId}:batchUpdate/POST/query/upload_protocol`.
                public var uploadProtocol: Components.Parameters.UploadProtocol?
                /// Legacy upload protocol for media (e.g. "media", "multipart").
                ///
                /// - Remark: Generated from `#/paths/v4/spreadsheets/{spreadsheetId}:batchUpdate/POST/query/uploadType`.
                public var uploadType: Components.Parameters.UploadType?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - _dollar__xgafv: V1 error format.
                ///   - accessToken: OAuth access token.
                ///   - alt: Data format for response.
                ///   - callback: JSONP
                ///   - fields: Selector specifying which fields to include in a partial response.
                ///   - key: API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
                ///   - oauthToken: OAuth 2.0 token for the current user.
                ///   - prettyPrint: Returns response with indentations and line breaks.
                ///   - quotaUser: Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
                ///   - uploadProtocol: Upload protocol for media (e.g. "raw", "multipart").
                ///   - uploadType: Legacy upload protocol for media (e.g. "media", "multipart").
                public init(
                    _dollar__xgafv: Components.Parameters.__period_xgafv? = nil,
                    accessToken: Components.Parameters.AccessToken? = nil,
                    alt: Components.Parameters.Alt? = nil,
                    callback: Components.Parameters.Callback? = nil,
                    fields: Components.Parameters.Fields? = nil,
                    key: Components.Parameters.Key? = nil,
                    oauthToken: Components.Parameters.OauthToken? = nil,
                    prettyPrint: Components.Parameters.PrettyPrint? = nil,
                    quotaUser: Components.Parameters.QuotaUser? = nil,
                    uploadProtocol: Components.Parameters.UploadProtocol? = nil,
                    uploadType: Components.Parameters.UploadType? = nil
                ) {
                    self._dollar__xgafv = _dollar__xgafv
                    self.accessToken = accessToken
                    self.alt = alt
                    self.callback = callback
                    self.fields = fields
                    self.key = key
                    self.oauthToken = oauthToken
                    self.prettyPrint = prettyPrint
                    self.quotaUser = quotaUser
                    self.uploadProtocol = uploadProtocol
                    self.uploadType = uploadType
                }
            }
            public var query: Operations.Sheets_spreadsheets_batchUpdate.Input.Query
            /// - Remark: Generated from `#/paths/v4/spreadsheets/{spreadsheetId}:batchUpdate/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.Sheets_spreadsheets_batchUpdate.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.Sheets_spreadsheets_batchUpdate.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.Sheets_spreadsheets_batchUpdate.Input.Headers
            /// - Remark: Generated from `#/paths/v4/spreadsheets/{spreadsheetId}:batchUpdate/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/v4/spreadsheets/{spreadsheetId}:batchUpdate/POST/requestBody/content/application\/json`.
                case json(Components.Schemas.BatchUpdateSpreadsheetRequest)
            }
            public var body: Operations.Sheets_spreadsheets_batchUpdate.Input.Body?
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - query:
            ///   - headers:
            ///   - body:
            public init(
                path: Operations.Sheets_spreadsheets_batchUpdate.Input.Path,
                query: Operations.Sheets_spreadsheets_batchUpdate.Input.Query = .init(),
                headers: Operations.Sheets_spreadsheets_batchUpdate.Input.Headers = .init(),
                body: Operations.Sheets_spreadsheets_batchUpdate.Input.Body? = nil
            ) {
                self.path = path
                self.query = query
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/v4/spreadsheets/{spreadsheetId}:batchUpdate/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/v4/spreadsheets/{spreadsheetId}:batchUpdate/POST/responses/200/content/application\/json`.
                    case json(Components.Schemas.BatchUpdateSpreadsheetResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.BatchUpdateSpreadsheetResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.Sheets_spreadsheets_batchUpdate.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.Sheets_spreadsheets_batchUpdate.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Successful response
            ///
            /// - Remark: Generated from `#/paths//v4/spreadsheets/{spreadsheetId}:batchUpdate/post(sheets.spreadsheets.batchUpdate)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.Sheets_spreadsheets_batchUpdate.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.Sheets_spreadsheets_batchUpdate.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Returns the spreadsheet at the given ID. The caller must specify the spreadsheet ID. This method differs from GetSpreadsheet in that it allows selecting which subsets of spreadsheet data to return by specifying a dataFilters parameter. Multiple DataFilters can be specified. Specifying one or more data filters returns the portions of the spreadsheet that intersect ranges matched by any of the filters. By default, data within grids is not returned. You can include grid data one of 2 ways: * Specify a [field mask](https://developers.google.com/sheets/api/guides/field-masks) listing your desired fields using the `fields` URL parameter in HTTP * Set the includeGridData parameter to true. If a field mask is set, the `includeGridData` parameter is ignored For large spreadsheets, as a best practice, retrieve only the specific spreadsheet fields that you want.
    ///
    /// - Remark: HTTP `POST /v4/spreadsheets/{spreadsheetId}:getByDataFilter`.
    /// - Remark: Generated from `#/paths//v4/spreadsheets/{spreadsheetId}:getByDataFilter/post(sheets.spreadsheets.getByDataFilter)`.
    public enum Sheets_spreadsheets_getByDataFilter {
        public static let id: Swift.String = "sheets.spreadsheets.getByDataFilter"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/v4/spreadsheets/{spreadsheetId}:getByDataFilter/POST/path`.
            public struct Path: Sendable, Hashable {
                /// The spreadsheet to request.
                ///
                /// - Remark: Generated from `#/paths/v4/spreadsheets/{spreadsheetId}:getByDataFilter/POST/path/spreadsheetId`.
                public var spreadsheetId: Swift.String
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - spreadsheetId: The spreadsheet to request.
                public init(spreadsheetId: Swift.String) {
                    self.spreadsheetId = spreadsheetId
                }
            }
            public var path: Operations.Sheets_spreadsheets_getByDataFilter.Input.Path
            /// - Remark: Generated from `#/paths/v4/spreadsheets/{spreadsheetId}:getByDataFilter/POST/query`.
            public struct Query: Sendable, Hashable {
                /// - Remark: Generated from `#/components/parameters/_.xgafv`.
                @frozen public enum __period_xgafv: String, Codable, Hashable, Sendable, CaseIterable {
                    case _1 = "1"
                    case _2 = "2"
                }
                /// V1 error format.
                ///
                /// - Remark: Generated from `#/paths/v4/spreadsheets/{spreadsheetId}:getByDataFilter/POST/query/$.xgafv`.
                public var _dollar__xgafv: Components.Parameters.__period_xgafv?
                /// OAuth access token.
                ///
                /// - Remark: Generated from `#/paths/v4/spreadsheets/{spreadsheetId}:getByDataFilter/POST/query/access_token`.
                public var accessToken: Components.Parameters.AccessToken?
                /// - Remark: Generated from `#/components/parameters/alt`.
                @frozen public enum Alt: String, Codable, Hashable, Sendable, CaseIterable {
                    case json = "json"
                    case media = "media"
                    case proto = "proto"
                }
                /// Data format for response.
                ///
                /// - Remark: Generated from `#/paths/v4/spreadsheets/{spreadsheetId}:getByDataFilter/POST/query/alt`.
                public var alt: Components.Parameters.Alt?
                /// JSONP
                ///
                /// - Remark: Generated from `#/paths/v4/spreadsheets/{spreadsheetId}:getByDataFilter/POST/query/callback`.
                public var callback: Components.Parameters.Callback?
                /// Selector specifying which fields to include in a partial response.
                ///
                /// - Remark: Generated from `#/paths/v4/spreadsheets/{spreadsheetId}:getByDataFilter/POST/query/fields`.
                public var fields: Components.Parameters.Fields?
                /// API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
                ///
                /// - Remark: Generated from `#/paths/v4/spreadsheets/{spreadsheetId}:getByDataFilter/POST/query/key`.
                public var key: Components.Parameters.Key?
                /// OAuth 2.0 token for the current user.
                ///
                /// - Remark: Generated from `#/paths/v4/spreadsheets/{spreadsheetId}:getByDataFilter/POST/query/oauth_token`.
                public var oauthToken: Components.Parameters.OauthToken?
                /// Returns response with indentations and line breaks.
                ///
                /// - Remark: Generated from `#/paths/v4/spreadsheets/{spreadsheetId}:getByDataFilter/POST/query/prettyPrint`.
                public var prettyPrint: Components.Parameters.PrettyPrint?
                /// Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
                ///
                /// - Remark: Generated from `#/paths/v4/spreadsheets/{spreadsheetId}:getByDataFilter/POST/query/quotaUser`.
                public var quotaUser: Components.Parameters.QuotaUser?
                /// Upload protocol for media (e.g. "raw", "multipart").
                ///
                /// - Remark: Generated from `#/paths/v4/spreadsheets/{spreadsheetId}:getByDataFilter/POST/query/upload_protocol`.
                public var uploadProtocol: Components.Parameters.UploadProtocol?
                /// Legacy upload protocol for media (e.g. "media", "multipart").
                ///
                /// - Remark: Generated from `#/paths/v4/spreadsheets/{spreadsheetId}:getByDataFilter/POST/query/uploadType`.
                public var uploadType: Components.Parameters.UploadType?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - _dollar__xgafv: V1 error format.
                ///   - accessToken: OAuth access token.
                ///   - alt: Data format for response.
                ///   - callback: JSONP
                ///   - fields: Selector specifying which fields to include in a partial response.
                ///   - key: API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
                ///   - oauthToken: OAuth 2.0 token for the current user.
                ///   - prettyPrint: Returns response with indentations and line breaks.
                ///   - quotaUser: Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
                ///   - uploadProtocol: Upload protocol for media (e.g. "raw", "multipart").
                ///   - uploadType: Legacy upload protocol for media (e.g. "media", "multipart").
                public init(
                    _dollar__xgafv: Components.Parameters.__period_xgafv? = nil,
                    accessToken: Components.Parameters.AccessToken? = nil,
                    alt: Components.Parameters.Alt? = nil,
                    callback: Components.Parameters.Callback? = nil,
                    fields: Components.Parameters.Fields? = nil,
                    key: Components.Parameters.Key? = nil,
                    oauthToken: Components.Parameters.OauthToken? = nil,
                    prettyPrint: Components.Parameters.PrettyPrint? = nil,
                    quotaUser: Components.Parameters.QuotaUser? = nil,
                    uploadProtocol: Components.Parameters.UploadProtocol? = nil,
                    uploadType: Components.Parameters.UploadType? = nil
                ) {
                    self._dollar__xgafv = _dollar__xgafv
                    self.accessToken = accessToken
                    self.alt = alt
                    self.callback = callback
                    self.fields = fields
                    self.key = key
                    self.oauthToken = oauthToken
                    self.prettyPrint = prettyPrint
                    self.quotaUser = quotaUser
                    self.uploadProtocol = uploadProtocol
                    self.uploadType = uploadType
                }
            }
            public var query: Operations.Sheets_spreadsheets_getByDataFilter.Input.Query
            /// - Remark: Generated from `#/paths/v4/spreadsheets/{spreadsheetId}:getByDataFilter/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.Sheets_spreadsheets_getByDataFilter.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.Sheets_spreadsheets_getByDataFilter.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.Sheets_spreadsheets_getByDataFilter.Input.Headers
            /// - Remark: Generated from `#/paths/v4/spreadsheets/{spreadsheetId}:getByDataFilter/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/v4/spreadsheets/{spreadsheetId}:getByDataFilter/POST/requestBody/content/application\/json`.
                case json(Components.Schemas.GetSpreadsheetByDataFilterRequest)
            }
            public var body: Operations.Sheets_spreadsheets_getByDataFilter.Input.Body?
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - query:
            ///   - headers:
            ///   - body:
            public init(
                path: Operations.Sheets_spreadsheets_getByDataFilter.Input.Path,
                query: Operations.Sheets_spreadsheets_getByDataFilter.Input.Query = .init(),
                headers: Operations.Sheets_spreadsheets_getByDataFilter.Input.Headers = .init(),
                body: Operations.Sheets_spreadsheets_getByDataFilter.Input.Body? = nil
            ) {
                self.path = path
                self.query = query
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/v4/spreadsheets/{spreadsheetId}:getByDataFilter/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/v4/spreadsheets/{spreadsheetId}:getByDataFilter/POST/responses/200/content/application\/json`.
                    case json(Components.Schemas.Spreadsheet)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.Spreadsheet {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.Sheets_spreadsheets_getByDataFilter.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.Sheets_spreadsheets_getByDataFilter.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Successful response
            ///
            /// - Remark: Generated from `#/paths//v4/spreadsheets/{spreadsheetId}:getByDataFilter/post(sheets.spreadsheets.getByDataFilter)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.Sheets_spreadsheets_getByDataFilter.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.Sheets_spreadsheets_getByDataFilter.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
}
