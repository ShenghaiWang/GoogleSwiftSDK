// Generated by swift-openapi-generator, do not modify.
@_spi(Generated) import OpenAPIRuntime
#if os(Linux)
@preconcurrency import struct Foundation.URL
@preconcurrency import struct Foundation.Data
@preconcurrency import struct Foundation.Date
#else
import struct Foundation.URL
import struct Foundation.Data
import struct Foundation.Date
#endif
/// A type that performs HTTP operations defined by the OpenAPI document.
public protocol APIProtocol: Sendable {
    /// Creates a secondary calendar.
    ///
    /// - Remark: HTTP `POST /calendars`.
    /// - Remark: Generated from `#/paths//calendars/post(calendar.calendars.insert)`.
    func calendar_calendars_insert(_ input: Operations.Calendar_calendars_insert.Input) async throws -> Operations.Calendar_calendars_insert.Output
    /// Returns metadata for a calendar.
    ///
    /// - Remark: HTTP `GET /calendars/{calendarId}`.
    /// - Remark: Generated from `#/paths//calendars/{calendarId}/get(calendar.calendars.get)`.
    func calendar_calendars_get(_ input: Operations.Calendar_calendars_get.Input) async throws -> Operations.Calendar_calendars_get.Output
    /// Updates metadata for a calendar. This method supports patch semantics.
    ///
    /// - Remark: HTTP `PATCH /calendars/{calendarId}`.
    /// - Remark: Generated from `#/paths//calendars/{calendarId}/patch(calendar.calendars.patch)`.
    func calendar_calendars_patch(_ input: Operations.Calendar_calendars_patch.Input) async throws -> Operations.Calendar_calendars_patch.Output
    /// Updates metadata for a calendar.
    ///
    /// - Remark: HTTP `PUT /calendars/{calendarId}`.
    /// - Remark: Generated from `#/paths//calendars/{calendarId}/put(calendar.calendars.update)`.
    func calendar_calendars_update(_ input: Operations.Calendar_calendars_update.Input) async throws -> Operations.Calendar_calendars_update.Output
    /// Deletes a secondary calendar. Use calendars.clear for clearing all events on primary calendars.
    ///
    /// - Remark: HTTP `DELETE /calendars/{calendarId}`.
    /// - Remark: Generated from `#/paths//calendars/{calendarId}/delete(calendar.calendars.delete)`.
    func calendar_calendars_delete(_ input: Operations.Calendar_calendars_delete.Input) async throws -> Operations.Calendar_calendars_delete.Output
    /// Returns the rules in the access control list for the calendar.
    ///
    /// - Remark: HTTP `GET /calendars/{calendarId}/acl`.
    /// - Remark: Generated from `#/paths//calendars/{calendarId}/acl/get(calendar.acl.list)`.
    func calendar_acl_list(_ input: Operations.Calendar_acl_list.Input) async throws -> Operations.Calendar_acl_list.Output
    /// Creates an access control rule.
    ///
    /// - Remark: HTTP `POST /calendars/{calendarId}/acl`.
    /// - Remark: Generated from `#/paths//calendars/{calendarId}/acl/post(calendar.acl.insert)`.
    func calendar_acl_insert(_ input: Operations.Calendar_acl_insert.Input) async throws -> Operations.Calendar_acl_insert.Output
    /// Watch for changes to ACL resources.
    ///
    /// - Remark: HTTP `POST /calendars/{calendarId}/acl/watch`.
    /// - Remark: Generated from `#/paths//calendars/{calendarId}/acl/watch/post(calendar.acl.watch)`.
    func calendar_acl_watch(_ input: Operations.Calendar_acl_watch.Input) async throws -> Operations.Calendar_acl_watch.Output
    /// Returns an access control rule.
    ///
    /// - Remark: HTTP `GET /calendars/{calendarId}/acl/{ruleId}`.
    /// - Remark: Generated from `#/paths//calendars/{calendarId}/acl/{ruleId}/get(calendar.acl.get)`.
    func calendar_acl_get(_ input: Operations.Calendar_acl_get.Input) async throws -> Operations.Calendar_acl_get.Output
    /// Updates an access control rule. This method supports patch semantics.
    ///
    /// - Remark: HTTP `PATCH /calendars/{calendarId}/acl/{ruleId}`.
    /// - Remark: Generated from `#/paths//calendars/{calendarId}/acl/{ruleId}/patch(calendar.acl.patch)`.
    func calendar_acl_patch(_ input: Operations.Calendar_acl_patch.Input) async throws -> Operations.Calendar_acl_patch.Output
    /// Updates an access control rule.
    ///
    /// - Remark: HTTP `PUT /calendars/{calendarId}/acl/{ruleId}`.
    /// - Remark: Generated from `#/paths//calendars/{calendarId}/acl/{ruleId}/put(calendar.acl.update)`.
    func calendar_acl_update(_ input: Operations.Calendar_acl_update.Input) async throws -> Operations.Calendar_acl_update.Output
    /// Deletes an access control rule.
    ///
    /// - Remark: HTTP `DELETE /calendars/{calendarId}/acl/{ruleId}`.
    /// - Remark: Generated from `#/paths//calendars/{calendarId}/acl/{ruleId}/delete(calendar.acl.delete)`.
    func calendar_acl_delete(_ input: Operations.Calendar_acl_delete.Input) async throws -> Operations.Calendar_acl_delete.Output
    /// Clears a primary calendar. This operation deletes all events associated with the primary calendar of an account.
    ///
    /// - Remark: HTTP `POST /calendars/{calendarId}/clear`.
    /// - Remark: Generated from `#/paths//calendars/{calendarId}/clear/post(calendar.calendars.clear)`.
    func calendar_calendars_clear(_ input: Operations.Calendar_calendars_clear.Input) async throws -> Operations.Calendar_calendars_clear.Output
    /// Returns events on the specified calendar.
    ///
    /// - Remark: HTTP `GET /calendars/{calendarId}/events`.
    /// - Remark: Generated from `#/paths//calendars/{calendarId}/events/get(calendar.events.list)`.
    func calendar_events_list(_ input: Operations.Calendar_events_list.Input) async throws -> Operations.Calendar_events_list.Output
    /// Creates an event.
    ///
    /// - Remark: HTTP `POST /calendars/{calendarId}/events`.
    /// - Remark: Generated from `#/paths//calendars/{calendarId}/events/post(calendar.events.insert)`.
    func calendar_events_insert(_ input: Operations.Calendar_events_insert.Input) async throws -> Operations.Calendar_events_insert.Output
    /// Imports an event. This operation is used to add a private copy of an existing event to a calendar.
    ///
    /// - Remark: HTTP `POST /calendars/{calendarId}/events/import`.
    /// - Remark: Generated from `#/paths//calendars/{calendarId}/events/import/post(calendar.events.import)`.
    func calendar_events_import(_ input: Operations.Calendar_events_import.Input) async throws -> Operations.Calendar_events_import.Output
    /// Creates an event based on a simple text string.
    ///
    /// - Remark: HTTP `POST /calendars/{calendarId}/events/quickAdd`.
    /// - Remark: Generated from `#/paths//calendars/{calendarId}/events/quickAdd/post(calendar.events.quickAdd)`.
    func calendar_events_quickAdd(_ input: Operations.Calendar_events_quickAdd.Input) async throws -> Operations.Calendar_events_quickAdd.Output
    /// Watch for changes to Events resources.
    ///
    /// - Remark: HTTP `POST /calendars/{calendarId}/events/watch`.
    /// - Remark: Generated from `#/paths//calendars/{calendarId}/events/watch/post(calendar.events.watch)`.
    func calendar_events_watch(_ input: Operations.Calendar_events_watch.Input) async throws -> Operations.Calendar_events_watch.Output
    /// Returns an event based on its Google Calendar ID. To retrieve an event using its iCalendar ID, call the events.list method using the iCalUID parameter.
    ///
    /// - Remark: HTTP `GET /calendars/{calendarId}/events/{eventId}`.
    /// - Remark: Generated from `#/paths//calendars/{calendarId}/events/{eventId}/get(calendar.events.get)`.
    func calendar_events_get(_ input: Operations.Calendar_events_get.Input) async throws -> Operations.Calendar_events_get.Output
    /// Updates an event. This method supports patch semantics.
    ///
    /// - Remark: HTTP `PATCH /calendars/{calendarId}/events/{eventId}`.
    /// - Remark: Generated from `#/paths//calendars/{calendarId}/events/{eventId}/patch(calendar.events.patch)`.
    func calendar_events_patch(_ input: Operations.Calendar_events_patch.Input) async throws -> Operations.Calendar_events_patch.Output
    /// Updates an event.
    ///
    /// - Remark: HTTP `PUT /calendars/{calendarId}/events/{eventId}`.
    /// - Remark: Generated from `#/paths//calendars/{calendarId}/events/{eventId}/put(calendar.events.update)`.
    func calendar_events_update(_ input: Operations.Calendar_events_update.Input) async throws -> Operations.Calendar_events_update.Output
    /// Deletes an event.
    ///
    /// - Remark: HTTP `DELETE /calendars/{calendarId}/events/{eventId}`.
    /// - Remark: Generated from `#/paths//calendars/{calendarId}/events/{eventId}/delete(calendar.events.delete)`.
    func calendar_events_delete(_ input: Operations.Calendar_events_delete.Input) async throws -> Operations.Calendar_events_delete.Output
    /// Returns instances of the specified recurring event.
    ///
    /// - Remark: HTTP `GET /calendars/{calendarId}/events/{eventId}/instances`.
    /// - Remark: Generated from `#/paths//calendars/{calendarId}/events/{eventId}/instances/get(calendar.events.instances)`.
    func calendar_events_instances(_ input: Operations.Calendar_events_instances.Input) async throws -> Operations.Calendar_events_instances.Output
    /// Moves an event to another calendar, i.e. changes an event's organizer. Note that only default events can be moved; outOfOffice, focusTime and workingLocation events cannot be moved.
    ///
    /// - Remark: HTTP `POST /calendars/{calendarId}/events/{eventId}/move`.
    /// - Remark: Generated from `#/paths//calendars/{calendarId}/events/{eventId}/move/post(calendar.events.move)`.
    func calendar_events_move(_ input: Operations.Calendar_events_move.Input) async throws -> Operations.Calendar_events_move.Output
    /// Stop watching resources through this channel
    ///
    /// - Remark: HTTP `POST /channels/stop`.
    /// - Remark: Generated from `#/paths//channels/stop/post(calendar.channels.stop)`.
    func calendar_channels_stop(_ input: Operations.Calendar_channels_stop.Input) async throws -> Operations.Calendar_channels_stop.Output
    /// Returns the color definitions for calendars and events.
    ///
    /// - Remark: HTTP `GET /colors`.
    /// - Remark: Generated from `#/paths//colors/get(calendar.colors.get)`.
    func calendar_colors_get(_ input: Operations.Calendar_colors_get.Input) async throws -> Operations.Calendar_colors_get.Output
    /// Returns free/busy information for a set of calendars.
    ///
    /// - Remark: HTTP `POST /freeBusy`.
    /// - Remark: Generated from `#/paths//freeBusy/post(calendar.freebusy.query)`.
    func calendar_freebusy_query(_ input: Operations.Calendar_freebusy_query.Input) async throws -> Operations.Calendar_freebusy_query.Output
    /// Returns the calendars on the user's calendar list.
    ///
    /// - Remark: HTTP `GET /users/me/calendarList`.
    /// - Remark: Generated from `#/paths//users/me/calendarList/get(calendar.calendarList.list)`.
    func calendar_calendarList_list(_ input: Operations.Calendar_calendarList_list.Input) async throws -> Operations.Calendar_calendarList_list.Output
    /// Inserts an existing calendar into the user's calendar list.
    ///
    /// - Remark: HTTP `POST /users/me/calendarList`.
    /// - Remark: Generated from `#/paths//users/me/calendarList/post(calendar.calendarList.insert)`.
    func calendar_calendarList_insert(_ input: Operations.Calendar_calendarList_insert.Input) async throws -> Operations.Calendar_calendarList_insert.Output
    /// Watch for changes to CalendarList resources.
    ///
    /// - Remark: HTTP `POST /users/me/calendarList/watch`.
    /// - Remark: Generated from `#/paths//users/me/calendarList/watch/post(calendar.calendarList.watch)`.
    func calendar_calendarList_watch(_ input: Operations.Calendar_calendarList_watch.Input) async throws -> Operations.Calendar_calendarList_watch.Output
    /// Returns a calendar from the user's calendar list.
    ///
    /// - Remark: HTTP `GET /users/me/calendarList/{calendarId}`.
    /// - Remark: Generated from `#/paths//users/me/calendarList/{calendarId}/get(calendar.calendarList.get)`.
    func calendar_calendarList_get(_ input: Operations.Calendar_calendarList_get.Input) async throws -> Operations.Calendar_calendarList_get.Output
    /// Updates an existing calendar on the user's calendar list. This method supports patch semantics.
    ///
    /// - Remark: HTTP `PATCH /users/me/calendarList/{calendarId}`.
    /// - Remark: Generated from `#/paths//users/me/calendarList/{calendarId}/patch(calendar.calendarList.patch)`.
    func calendar_calendarList_patch(_ input: Operations.Calendar_calendarList_patch.Input) async throws -> Operations.Calendar_calendarList_patch.Output
    /// Updates an existing calendar on the user's calendar list.
    ///
    /// - Remark: HTTP `PUT /users/me/calendarList/{calendarId}`.
    /// - Remark: Generated from `#/paths//users/me/calendarList/{calendarId}/put(calendar.calendarList.update)`.
    func calendar_calendarList_update(_ input: Operations.Calendar_calendarList_update.Input) async throws -> Operations.Calendar_calendarList_update.Output
    /// Removes a calendar from the user's calendar list.
    ///
    /// - Remark: HTTP `DELETE /users/me/calendarList/{calendarId}`.
    /// - Remark: Generated from `#/paths//users/me/calendarList/{calendarId}/delete(calendar.calendarList.delete)`.
    func calendar_calendarList_delete(_ input: Operations.Calendar_calendarList_delete.Input) async throws -> Operations.Calendar_calendarList_delete.Output
    /// Returns all user settings for the authenticated user.
    ///
    /// - Remark: HTTP `GET /users/me/settings`.
    /// - Remark: Generated from `#/paths//users/me/settings/get(calendar.settings.list)`.
    func calendar_settings_list(_ input: Operations.Calendar_settings_list.Input) async throws -> Operations.Calendar_settings_list.Output
    /// Watch for changes to Settings resources.
    ///
    /// - Remark: HTTP `POST /users/me/settings/watch`.
    /// - Remark: Generated from `#/paths//users/me/settings/watch/post(calendar.settings.watch)`.
    func calendar_settings_watch(_ input: Operations.Calendar_settings_watch.Input) async throws -> Operations.Calendar_settings_watch.Output
    /// Returns a single user setting.
    ///
    /// - Remark: HTTP `GET /users/me/settings/{setting}`.
    /// - Remark: Generated from `#/paths//users/me/settings/{setting}/get(calendar.settings.get)`.
    func calendar_settings_get(_ input: Operations.Calendar_settings_get.Input) async throws -> Operations.Calendar_settings_get.Output
}

/// Convenience overloads for operation inputs.
extension APIProtocol {
    /// Creates a secondary calendar.
    ///
    /// - Remark: HTTP `POST /calendars`.
    /// - Remark: Generated from `#/paths//calendars/post(calendar.calendars.insert)`.
    public func calendar_calendars_insert(
        query: Operations.Calendar_calendars_insert.Input.Query = .init(),
        headers: Operations.Calendar_calendars_insert.Input.Headers = .init(),
        body: Operations.Calendar_calendars_insert.Input.Body? = nil
    ) async throws -> Operations.Calendar_calendars_insert.Output {
        try await calendar_calendars_insert(Operations.Calendar_calendars_insert.Input(
            query: query,
            headers: headers,
            body: body
        ))
    }
    /// Returns metadata for a calendar.
    ///
    /// - Remark: HTTP `GET /calendars/{calendarId}`.
    /// - Remark: Generated from `#/paths//calendars/{calendarId}/get(calendar.calendars.get)`.
    public func calendar_calendars_get(
        path: Operations.Calendar_calendars_get.Input.Path,
        query: Operations.Calendar_calendars_get.Input.Query = .init(),
        headers: Operations.Calendar_calendars_get.Input.Headers = .init()
    ) async throws -> Operations.Calendar_calendars_get.Output {
        try await calendar_calendars_get(Operations.Calendar_calendars_get.Input(
            path: path,
            query: query,
            headers: headers
        ))
    }
    /// Updates metadata for a calendar. This method supports patch semantics.
    ///
    /// - Remark: HTTP `PATCH /calendars/{calendarId}`.
    /// - Remark: Generated from `#/paths//calendars/{calendarId}/patch(calendar.calendars.patch)`.
    public func calendar_calendars_patch(
        path: Operations.Calendar_calendars_patch.Input.Path,
        query: Operations.Calendar_calendars_patch.Input.Query = .init(),
        headers: Operations.Calendar_calendars_patch.Input.Headers = .init(),
        body: Operations.Calendar_calendars_patch.Input.Body? = nil
    ) async throws -> Operations.Calendar_calendars_patch.Output {
        try await calendar_calendars_patch(Operations.Calendar_calendars_patch.Input(
            path: path,
            query: query,
            headers: headers,
            body: body
        ))
    }
    /// Updates metadata for a calendar.
    ///
    /// - Remark: HTTP `PUT /calendars/{calendarId}`.
    /// - Remark: Generated from `#/paths//calendars/{calendarId}/put(calendar.calendars.update)`.
    public func calendar_calendars_update(
        path: Operations.Calendar_calendars_update.Input.Path,
        query: Operations.Calendar_calendars_update.Input.Query = .init(),
        headers: Operations.Calendar_calendars_update.Input.Headers = .init(),
        body: Operations.Calendar_calendars_update.Input.Body? = nil
    ) async throws -> Operations.Calendar_calendars_update.Output {
        try await calendar_calendars_update(Operations.Calendar_calendars_update.Input(
            path: path,
            query: query,
            headers: headers,
            body: body
        ))
    }
    /// Deletes a secondary calendar. Use calendars.clear for clearing all events on primary calendars.
    ///
    /// - Remark: HTTP `DELETE /calendars/{calendarId}`.
    /// - Remark: Generated from `#/paths//calendars/{calendarId}/delete(calendar.calendars.delete)`.
    public func calendar_calendars_delete(
        path: Operations.Calendar_calendars_delete.Input.Path,
        query: Operations.Calendar_calendars_delete.Input.Query = .init()
    ) async throws -> Operations.Calendar_calendars_delete.Output {
        try await calendar_calendars_delete(Operations.Calendar_calendars_delete.Input(
            path: path,
            query: query
        ))
    }
    /// Returns the rules in the access control list for the calendar.
    ///
    /// - Remark: HTTP `GET /calendars/{calendarId}/acl`.
    /// - Remark: Generated from `#/paths//calendars/{calendarId}/acl/get(calendar.acl.list)`.
    public func calendar_acl_list(
        path: Operations.Calendar_acl_list.Input.Path,
        query: Operations.Calendar_acl_list.Input.Query = .init(),
        headers: Operations.Calendar_acl_list.Input.Headers = .init()
    ) async throws -> Operations.Calendar_acl_list.Output {
        try await calendar_acl_list(Operations.Calendar_acl_list.Input(
            path: path,
            query: query,
            headers: headers
        ))
    }
    /// Creates an access control rule.
    ///
    /// - Remark: HTTP `POST /calendars/{calendarId}/acl`.
    /// - Remark: Generated from `#/paths//calendars/{calendarId}/acl/post(calendar.acl.insert)`.
    public func calendar_acl_insert(
        path: Operations.Calendar_acl_insert.Input.Path,
        query: Operations.Calendar_acl_insert.Input.Query = .init(),
        headers: Operations.Calendar_acl_insert.Input.Headers = .init(),
        body: Operations.Calendar_acl_insert.Input.Body? = nil
    ) async throws -> Operations.Calendar_acl_insert.Output {
        try await calendar_acl_insert(Operations.Calendar_acl_insert.Input(
            path: path,
            query: query,
            headers: headers,
            body: body
        ))
    }
    /// Watch for changes to ACL resources.
    ///
    /// - Remark: HTTP `POST /calendars/{calendarId}/acl/watch`.
    /// - Remark: Generated from `#/paths//calendars/{calendarId}/acl/watch/post(calendar.acl.watch)`.
    public func calendar_acl_watch(
        path: Operations.Calendar_acl_watch.Input.Path,
        query: Operations.Calendar_acl_watch.Input.Query = .init(),
        headers: Operations.Calendar_acl_watch.Input.Headers = .init(),
        body: Operations.Calendar_acl_watch.Input.Body? = nil
    ) async throws -> Operations.Calendar_acl_watch.Output {
        try await calendar_acl_watch(Operations.Calendar_acl_watch.Input(
            path: path,
            query: query,
            headers: headers,
            body: body
        ))
    }
    /// Returns an access control rule.
    ///
    /// - Remark: HTTP `GET /calendars/{calendarId}/acl/{ruleId}`.
    /// - Remark: Generated from `#/paths//calendars/{calendarId}/acl/{ruleId}/get(calendar.acl.get)`.
    public func calendar_acl_get(
        path: Operations.Calendar_acl_get.Input.Path,
        query: Operations.Calendar_acl_get.Input.Query = .init(),
        headers: Operations.Calendar_acl_get.Input.Headers = .init()
    ) async throws -> Operations.Calendar_acl_get.Output {
        try await calendar_acl_get(Operations.Calendar_acl_get.Input(
            path: path,
            query: query,
            headers: headers
        ))
    }
    /// Updates an access control rule. This method supports patch semantics.
    ///
    /// - Remark: HTTP `PATCH /calendars/{calendarId}/acl/{ruleId}`.
    /// - Remark: Generated from `#/paths//calendars/{calendarId}/acl/{ruleId}/patch(calendar.acl.patch)`.
    public func calendar_acl_patch(
        path: Operations.Calendar_acl_patch.Input.Path,
        query: Operations.Calendar_acl_patch.Input.Query = .init(),
        headers: Operations.Calendar_acl_patch.Input.Headers = .init(),
        body: Operations.Calendar_acl_patch.Input.Body? = nil
    ) async throws -> Operations.Calendar_acl_patch.Output {
        try await calendar_acl_patch(Operations.Calendar_acl_patch.Input(
            path: path,
            query: query,
            headers: headers,
            body: body
        ))
    }
    /// Updates an access control rule.
    ///
    /// - Remark: HTTP `PUT /calendars/{calendarId}/acl/{ruleId}`.
    /// - Remark: Generated from `#/paths//calendars/{calendarId}/acl/{ruleId}/put(calendar.acl.update)`.
    public func calendar_acl_update(
        path: Operations.Calendar_acl_update.Input.Path,
        query: Operations.Calendar_acl_update.Input.Query = .init(),
        headers: Operations.Calendar_acl_update.Input.Headers = .init(),
        body: Operations.Calendar_acl_update.Input.Body? = nil
    ) async throws -> Operations.Calendar_acl_update.Output {
        try await calendar_acl_update(Operations.Calendar_acl_update.Input(
            path: path,
            query: query,
            headers: headers,
            body: body
        ))
    }
    /// Deletes an access control rule.
    ///
    /// - Remark: HTTP `DELETE /calendars/{calendarId}/acl/{ruleId}`.
    /// - Remark: Generated from `#/paths//calendars/{calendarId}/acl/{ruleId}/delete(calendar.acl.delete)`.
    public func calendar_acl_delete(
        path: Operations.Calendar_acl_delete.Input.Path,
        query: Operations.Calendar_acl_delete.Input.Query = .init()
    ) async throws -> Operations.Calendar_acl_delete.Output {
        try await calendar_acl_delete(Operations.Calendar_acl_delete.Input(
            path: path,
            query: query
        ))
    }
    /// Clears a primary calendar. This operation deletes all events associated with the primary calendar of an account.
    ///
    /// - Remark: HTTP `POST /calendars/{calendarId}/clear`.
    /// - Remark: Generated from `#/paths//calendars/{calendarId}/clear/post(calendar.calendars.clear)`.
    public func calendar_calendars_clear(
        path: Operations.Calendar_calendars_clear.Input.Path,
        query: Operations.Calendar_calendars_clear.Input.Query = .init()
    ) async throws -> Operations.Calendar_calendars_clear.Output {
        try await calendar_calendars_clear(Operations.Calendar_calendars_clear.Input(
            path: path,
            query: query
        ))
    }
    /// Returns events on the specified calendar.
    ///
    /// - Remark: HTTP `GET /calendars/{calendarId}/events`.
    /// - Remark: Generated from `#/paths//calendars/{calendarId}/events/get(calendar.events.list)`.
    public func calendar_events_list(
        path: Operations.Calendar_events_list.Input.Path,
        query: Operations.Calendar_events_list.Input.Query = .init(),
        headers: Operations.Calendar_events_list.Input.Headers = .init()
    ) async throws -> Operations.Calendar_events_list.Output {
        try await calendar_events_list(Operations.Calendar_events_list.Input(
            path: path,
            query: query,
            headers: headers
        ))
    }
    /// Creates an event.
    ///
    /// - Remark: HTTP `POST /calendars/{calendarId}/events`.
    /// - Remark: Generated from `#/paths//calendars/{calendarId}/events/post(calendar.events.insert)`.
    public func calendar_events_insert(
        path: Operations.Calendar_events_insert.Input.Path,
        query: Operations.Calendar_events_insert.Input.Query = .init(),
        headers: Operations.Calendar_events_insert.Input.Headers = .init(),
        body: Operations.Calendar_events_insert.Input.Body? = nil
    ) async throws -> Operations.Calendar_events_insert.Output {
        try await calendar_events_insert(Operations.Calendar_events_insert.Input(
            path: path,
            query: query,
            headers: headers,
            body: body
        ))
    }
    /// Imports an event. This operation is used to add a private copy of an existing event to a calendar.
    ///
    /// - Remark: HTTP `POST /calendars/{calendarId}/events/import`.
    /// - Remark: Generated from `#/paths//calendars/{calendarId}/events/import/post(calendar.events.import)`.
    public func calendar_events_import(
        path: Operations.Calendar_events_import.Input.Path,
        query: Operations.Calendar_events_import.Input.Query = .init(),
        headers: Operations.Calendar_events_import.Input.Headers = .init(),
        body: Operations.Calendar_events_import.Input.Body? = nil
    ) async throws -> Operations.Calendar_events_import.Output {
        try await calendar_events_import(Operations.Calendar_events_import.Input(
            path: path,
            query: query,
            headers: headers,
            body: body
        ))
    }
    /// Creates an event based on a simple text string.
    ///
    /// - Remark: HTTP `POST /calendars/{calendarId}/events/quickAdd`.
    /// - Remark: Generated from `#/paths//calendars/{calendarId}/events/quickAdd/post(calendar.events.quickAdd)`.
    public func calendar_events_quickAdd(
        path: Operations.Calendar_events_quickAdd.Input.Path,
        query: Operations.Calendar_events_quickAdd.Input.Query,
        headers: Operations.Calendar_events_quickAdd.Input.Headers = .init()
    ) async throws -> Operations.Calendar_events_quickAdd.Output {
        try await calendar_events_quickAdd(Operations.Calendar_events_quickAdd.Input(
            path: path,
            query: query,
            headers: headers
        ))
    }
    /// Watch for changes to Events resources.
    ///
    /// - Remark: HTTP `POST /calendars/{calendarId}/events/watch`.
    /// - Remark: Generated from `#/paths//calendars/{calendarId}/events/watch/post(calendar.events.watch)`.
    public func calendar_events_watch(
        path: Operations.Calendar_events_watch.Input.Path,
        query: Operations.Calendar_events_watch.Input.Query = .init(),
        headers: Operations.Calendar_events_watch.Input.Headers = .init(),
        body: Operations.Calendar_events_watch.Input.Body? = nil
    ) async throws -> Operations.Calendar_events_watch.Output {
        try await calendar_events_watch(Operations.Calendar_events_watch.Input(
            path: path,
            query: query,
            headers: headers,
            body: body
        ))
    }
    /// Returns an event based on its Google Calendar ID. To retrieve an event using its iCalendar ID, call the events.list method using the iCalUID parameter.
    ///
    /// - Remark: HTTP `GET /calendars/{calendarId}/events/{eventId}`.
    /// - Remark: Generated from `#/paths//calendars/{calendarId}/events/{eventId}/get(calendar.events.get)`.
    public func calendar_events_get(
        path: Operations.Calendar_events_get.Input.Path,
        query: Operations.Calendar_events_get.Input.Query = .init(),
        headers: Operations.Calendar_events_get.Input.Headers = .init()
    ) async throws -> Operations.Calendar_events_get.Output {
        try await calendar_events_get(Operations.Calendar_events_get.Input(
            path: path,
            query: query,
            headers: headers
        ))
    }
    /// Updates an event. This method supports patch semantics.
    ///
    /// - Remark: HTTP `PATCH /calendars/{calendarId}/events/{eventId}`.
    /// - Remark: Generated from `#/paths//calendars/{calendarId}/events/{eventId}/patch(calendar.events.patch)`.
    public func calendar_events_patch(
        path: Operations.Calendar_events_patch.Input.Path,
        query: Operations.Calendar_events_patch.Input.Query = .init(),
        headers: Operations.Calendar_events_patch.Input.Headers = .init(),
        body: Operations.Calendar_events_patch.Input.Body? = nil
    ) async throws -> Operations.Calendar_events_patch.Output {
        try await calendar_events_patch(Operations.Calendar_events_patch.Input(
            path: path,
            query: query,
            headers: headers,
            body: body
        ))
    }
    /// Updates an event.
    ///
    /// - Remark: HTTP `PUT /calendars/{calendarId}/events/{eventId}`.
    /// - Remark: Generated from `#/paths//calendars/{calendarId}/events/{eventId}/put(calendar.events.update)`.
    public func calendar_events_update(
        path: Operations.Calendar_events_update.Input.Path,
        query: Operations.Calendar_events_update.Input.Query = .init(),
        headers: Operations.Calendar_events_update.Input.Headers = .init(),
        body: Operations.Calendar_events_update.Input.Body? = nil
    ) async throws -> Operations.Calendar_events_update.Output {
        try await calendar_events_update(Operations.Calendar_events_update.Input(
            path: path,
            query: query,
            headers: headers,
            body: body
        ))
    }
    /// Deletes an event.
    ///
    /// - Remark: HTTP `DELETE /calendars/{calendarId}/events/{eventId}`.
    /// - Remark: Generated from `#/paths//calendars/{calendarId}/events/{eventId}/delete(calendar.events.delete)`.
    public func calendar_events_delete(
        path: Operations.Calendar_events_delete.Input.Path,
        query: Operations.Calendar_events_delete.Input.Query = .init()
    ) async throws -> Operations.Calendar_events_delete.Output {
        try await calendar_events_delete(Operations.Calendar_events_delete.Input(
            path: path,
            query: query
        ))
    }
    /// Returns instances of the specified recurring event.
    ///
    /// - Remark: HTTP `GET /calendars/{calendarId}/events/{eventId}/instances`.
    /// - Remark: Generated from `#/paths//calendars/{calendarId}/events/{eventId}/instances/get(calendar.events.instances)`.
    public func calendar_events_instances(
        path: Operations.Calendar_events_instances.Input.Path,
        query: Operations.Calendar_events_instances.Input.Query = .init(),
        headers: Operations.Calendar_events_instances.Input.Headers = .init()
    ) async throws -> Operations.Calendar_events_instances.Output {
        try await calendar_events_instances(Operations.Calendar_events_instances.Input(
            path: path,
            query: query,
            headers: headers
        ))
    }
    /// Moves an event to another calendar, i.e. changes an event's organizer. Note that only default events can be moved; outOfOffice, focusTime and workingLocation events cannot be moved.
    ///
    /// - Remark: HTTP `POST /calendars/{calendarId}/events/{eventId}/move`.
    /// - Remark: Generated from `#/paths//calendars/{calendarId}/events/{eventId}/move/post(calendar.events.move)`.
    public func calendar_events_move(
        path: Operations.Calendar_events_move.Input.Path,
        query: Operations.Calendar_events_move.Input.Query,
        headers: Operations.Calendar_events_move.Input.Headers = .init()
    ) async throws -> Operations.Calendar_events_move.Output {
        try await calendar_events_move(Operations.Calendar_events_move.Input(
            path: path,
            query: query,
            headers: headers
        ))
    }
    /// Stop watching resources through this channel
    ///
    /// - Remark: HTTP `POST /channels/stop`.
    /// - Remark: Generated from `#/paths//channels/stop/post(calendar.channels.stop)`.
    public func calendar_channels_stop(
        query: Operations.Calendar_channels_stop.Input.Query = .init(),
        body: Operations.Calendar_channels_stop.Input.Body? = nil
    ) async throws -> Operations.Calendar_channels_stop.Output {
        try await calendar_channels_stop(Operations.Calendar_channels_stop.Input(
            query: query,
            body: body
        ))
    }
    /// Returns the color definitions for calendars and events.
    ///
    /// - Remark: HTTP `GET /colors`.
    /// - Remark: Generated from `#/paths//colors/get(calendar.colors.get)`.
    public func calendar_colors_get(
        query: Operations.Calendar_colors_get.Input.Query = .init(),
        headers: Operations.Calendar_colors_get.Input.Headers = .init()
    ) async throws -> Operations.Calendar_colors_get.Output {
        try await calendar_colors_get(Operations.Calendar_colors_get.Input(
            query: query,
            headers: headers
        ))
    }
    /// Returns free/busy information for a set of calendars.
    ///
    /// - Remark: HTTP `POST /freeBusy`.
    /// - Remark: Generated from `#/paths//freeBusy/post(calendar.freebusy.query)`.
    public func calendar_freebusy_query(
        query: Operations.Calendar_freebusy_query.Input.Query = .init(),
        headers: Operations.Calendar_freebusy_query.Input.Headers = .init(),
        body: Operations.Calendar_freebusy_query.Input.Body? = nil
    ) async throws -> Operations.Calendar_freebusy_query.Output {
        try await calendar_freebusy_query(Operations.Calendar_freebusy_query.Input(
            query: query,
            headers: headers,
            body: body
        ))
    }
    /// Returns the calendars on the user's calendar list.
    ///
    /// - Remark: HTTP `GET /users/me/calendarList`.
    /// - Remark: Generated from `#/paths//users/me/calendarList/get(calendar.calendarList.list)`.
    public func calendar_calendarList_list(
        query: Operations.Calendar_calendarList_list.Input.Query = .init(),
        headers: Operations.Calendar_calendarList_list.Input.Headers = .init()
    ) async throws -> Operations.Calendar_calendarList_list.Output {
        try await calendar_calendarList_list(Operations.Calendar_calendarList_list.Input(
            query: query,
            headers: headers
        ))
    }
    /// Inserts an existing calendar into the user's calendar list.
    ///
    /// - Remark: HTTP `POST /users/me/calendarList`.
    /// - Remark: Generated from `#/paths//users/me/calendarList/post(calendar.calendarList.insert)`.
    public func calendar_calendarList_insert(
        query: Operations.Calendar_calendarList_insert.Input.Query = .init(),
        headers: Operations.Calendar_calendarList_insert.Input.Headers = .init(),
        body: Operations.Calendar_calendarList_insert.Input.Body? = nil
    ) async throws -> Operations.Calendar_calendarList_insert.Output {
        try await calendar_calendarList_insert(Operations.Calendar_calendarList_insert.Input(
            query: query,
            headers: headers,
            body: body
        ))
    }
    /// Watch for changes to CalendarList resources.
    ///
    /// - Remark: HTTP `POST /users/me/calendarList/watch`.
    /// - Remark: Generated from `#/paths//users/me/calendarList/watch/post(calendar.calendarList.watch)`.
    public func calendar_calendarList_watch(
        query: Operations.Calendar_calendarList_watch.Input.Query = .init(),
        headers: Operations.Calendar_calendarList_watch.Input.Headers = .init(),
        body: Operations.Calendar_calendarList_watch.Input.Body? = nil
    ) async throws -> Operations.Calendar_calendarList_watch.Output {
        try await calendar_calendarList_watch(Operations.Calendar_calendarList_watch.Input(
            query: query,
            headers: headers,
            body: body
        ))
    }
    /// Returns a calendar from the user's calendar list.
    ///
    /// - Remark: HTTP `GET /users/me/calendarList/{calendarId}`.
    /// - Remark: Generated from `#/paths//users/me/calendarList/{calendarId}/get(calendar.calendarList.get)`.
    public func calendar_calendarList_get(
        path: Operations.Calendar_calendarList_get.Input.Path,
        query: Operations.Calendar_calendarList_get.Input.Query = .init(),
        headers: Operations.Calendar_calendarList_get.Input.Headers = .init()
    ) async throws -> Operations.Calendar_calendarList_get.Output {
        try await calendar_calendarList_get(Operations.Calendar_calendarList_get.Input(
            path: path,
            query: query,
            headers: headers
        ))
    }
    /// Updates an existing calendar on the user's calendar list. This method supports patch semantics.
    ///
    /// - Remark: HTTP `PATCH /users/me/calendarList/{calendarId}`.
    /// - Remark: Generated from `#/paths//users/me/calendarList/{calendarId}/patch(calendar.calendarList.patch)`.
    public func calendar_calendarList_patch(
        path: Operations.Calendar_calendarList_patch.Input.Path,
        query: Operations.Calendar_calendarList_patch.Input.Query = .init(),
        headers: Operations.Calendar_calendarList_patch.Input.Headers = .init(),
        body: Operations.Calendar_calendarList_patch.Input.Body? = nil
    ) async throws -> Operations.Calendar_calendarList_patch.Output {
        try await calendar_calendarList_patch(Operations.Calendar_calendarList_patch.Input(
            path: path,
            query: query,
            headers: headers,
            body: body
        ))
    }
    /// Updates an existing calendar on the user's calendar list.
    ///
    /// - Remark: HTTP `PUT /users/me/calendarList/{calendarId}`.
    /// - Remark: Generated from `#/paths//users/me/calendarList/{calendarId}/put(calendar.calendarList.update)`.
    public func calendar_calendarList_update(
        path: Operations.Calendar_calendarList_update.Input.Path,
        query: Operations.Calendar_calendarList_update.Input.Query = .init(),
        headers: Operations.Calendar_calendarList_update.Input.Headers = .init(),
        body: Operations.Calendar_calendarList_update.Input.Body? = nil
    ) async throws -> Operations.Calendar_calendarList_update.Output {
        try await calendar_calendarList_update(Operations.Calendar_calendarList_update.Input(
            path: path,
            query: query,
            headers: headers,
            body: body
        ))
    }
    /// Removes a calendar from the user's calendar list.
    ///
    /// - Remark: HTTP `DELETE /users/me/calendarList/{calendarId}`.
    /// - Remark: Generated from `#/paths//users/me/calendarList/{calendarId}/delete(calendar.calendarList.delete)`.
    public func calendar_calendarList_delete(
        path: Operations.Calendar_calendarList_delete.Input.Path,
        query: Operations.Calendar_calendarList_delete.Input.Query = .init()
    ) async throws -> Operations.Calendar_calendarList_delete.Output {
        try await calendar_calendarList_delete(Operations.Calendar_calendarList_delete.Input(
            path: path,
            query: query
        ))
    }
    /// Returns all user settings for the authenticated user.
    ///
    /// - Remark: HTTP `GET /users/me/settings`.
    /// - Remark: Generated from `#/paths//users/me/settings/get(calendar.settings.list)`.
    public func calendar_settings_list(
        query: Operations.Calendar_settings_list.Input.Query = .init(),
        headers: Operations.Calendar_settings_list.Input.Headers = .init()
    ) async throws -> Operations.Calendar_settings_list.Output {
        try await calendar_settings_list(Operations.Calendar_settings_list.Input(
            query: query,
            headers: headers
        ))
    }
    /// Watch for changes to Settings resources.
    ///
    /// - Remark: HTTP `POST /users/me/settings/watch`.
    /// - Remark: Generated from `#/paths//users/me/settings/watch/post(calendar.settings.watch)`.
    public func calendar_settings_watch(
        query: Operations.Calendar_settings_watch.Input.Query = .init(),
        headers: Operations.Calendar_settings_watch.Input.Headers = .init(),
        body: Operations.Calendar_settings_watch.Input.Body? = nil
    ) async throws -> Operations.Calendar_settings_watch.Output {
        try await calendar_settings_watch(Operations.Calendar_settings_watch.Input(
            query: query,
            headers: headers,
            body: body
        ))
    }
    /// Returns a single user setting.
    ///
    /// - Remark: HTTP `GET /users/me/settings/{setting}`.
    /// - Remark: Generated from `#/paths//users/me/settings/{setting}/get(calendar.settings.get)`.
    public func calendar_settings_get(
        path: Operations.Calendar_settings_get.Input.Path,
        query: Operations.Calendar_settings_get.Input.Query = .init(),
        headers: Operations.Calendar_settings_get.Input.Headers = .init()
    ) async throws -> Operations.Calendar_settings_get.Output {
        try await calendar_settings_get(Operations.Calendar_settings_get.Input(
            path: path,
            query: query,
            headers: headers
        ))
    }
}

/// Server URLs defined in the OpenAPI document.
public enum Servers {
    public enum Server1 {
        public static func url() throws -> Foundation.URL {
            try Foundation.URL(
                validatingOpenAPIServerURL: "https://www.googleapis.com/calendar/v3",
                variables: []
            )
        }
    }
    @available(*, deprecated, renamed: "Servers.Server1.url")
    public static func server1() throws -> Foundation.URL {
        try Foundation.URL(
            validatingOpenAPIServerURL: "https://www.googleapis.com/calendar/v3",
            variables: []
        )
    }
}

/// Types generated from the components section of the OpenAPI document.
public enum Components {
    /// Types generated from the `#/components/schemas` section of the OpenAPI document.
    public enum Schemas {
        /// - Remark: Generated from `#/components/schemas/Acl`.
        public struct Acl: Codable, Hashable, Sendable {
            /// ETag of the collection.
            ///
            /// - Remark: Generated from `#/components/schemas/Acl/etag`.
            public var etag: Swift.String?
            /// List of rules on the access control list.
            ///
            /// - Remark: Generated from `#/components/schemas/Acl/items`.
            public var items: [Components.Schemas.AclRule]?
            /// Type of the collection ("calendar#acl").
            ///
            /// - Remark: Generated from `#/components/schemas/Acl/kind`.
            public var kind: Swift.String?
            /// Token used to access the next page of this result. Omitted if no further results are available, in which case nextSyncToken is provided.
            ///
            /// - Remark: Generated from `#/components/schemas/Acl/nextPageToken`.
            public var nextPageToken: Swift.String?
            /// Token used at a later point in time to retrieve only the entries that have changed since this result was returned. Omitted if further results are available, in which case nextPageToken is provided.
            ///
            /// - Remark: Generated from `#/components/schemas/Acl/nextSyncToken`.
            public var nextSyncToken: Swift.String?
            /// Creates a new `Acl`.
            ///
            /// - Parameters:
            ///   - etag: ETag of the collection.
            ///   - items: List of rules on the access control list.
            ///   - kind: Type of the collection ("calendar#acl").
            ///   - nextPageToken: Token used to access the next page of this result. Omitted if no further results are available, in which case nextSyncToken is provided.
            ///   - nextSyncToken: Token used at a later point in time to retrieve only the entries that have changed since this result was returned. Omitted if further results are available, in which case nextPageToken is provided.
            public init(
                etag: Swift.String? = nil,
                items: [Components.Schemas.AclRule]? = nil,
                kind: Swift.String? = nil,
                nextPageToken: Swift.String? = nil,
                nextSyncToken: Swift.String? = nil
            ) {
                self.etag = etag
                self.items = items
                self.kind = kind
                self.nextPageToken = nextPageToken
                self.nextSyncToken = nextSyncToken
            }
            public enum CodingKeys: String, CodingKey {
                case etag
                case items
                case kind
                case nextPageToken
                case nextSyncToken
            }
        }
        /// - Remark: Generated from `#/components/schemas/AclRule`.
        public struct AclRule: Codable, Hashable, Sendable {
            /// ETag of the resource.
            ///
            /// - Remark: Generated from `#/components/schemas/AclRule/etag`.
            public var etag: Swift.String?
            /// Identifier of the Access Control List (ACL) rule. See Sharing calendars.
            ///
            /// - Remark: Generated from `#/components/schemas/AclRule/id`.
            public var id: Swift.String?
            /// Type of the resource ("calendar#aclRule").
            ///
            /// - Remark: Generated from `#/components/schemas/AclRule/kind`.
            public var kind: Swift.String?
            /// The role assigned to the scope. Possible values are:  
            /// - "none" - Provides no access. 
            /// - "freeBusyReader" - Provides read access to free/busy information. 
            /// - "reader" - Provides read access to the calendar. Private events will appear to users with reader access, but event details will be hidden. 
            /// - "writer" - Provides read and write access to the calendar. Private events will appear to users with writer access, and event details will be visible. 
            /// - "owner" - Provides ownership of the calendar. This role has all of the permissions of the writer role with the additional ability to see and manipulate ACLs.
            ///
            /// - Remark: Generated from `#/components/schemas/AclRule/role`.
            public var role: Swift.String?
            /// The extent to which calendar access is granted by this ACL rule.
            ///
            /// - Remark: Generated from `#/components/schemas/AclRule/scope`.
            public struct ScopePayload: Codable, Hashable, Sendable {
                /// The type of the scope. Possible values are:  
                /// - "default" - The public scope. This is the default value. 
                /// - "user" - Limits the scope to a single user. 
                /// - "group" - Limits the scope to a group. 
                /// - "domain" - Limits the scope to a domain.  Note: The permissions granted to the "default", or public, scope apply to any user, authenticated or not.
                ///
                /// - Remark: Generated from `#/components/schemas/AclRule/scope/type`.
                public var _type: Swift.String?
                /// The email address of a user or group, or the name of a domain, depending on the scope type. Omitted for type "default".
                ///
                /// - Remark: Generated from `#/components/schemas/AclRule/scope/value`.
                public var value: Swift.String?
                /// Creates a new `ScopePayload`.
                ///
                /// - Parameters:
                ///   - _type: The type of the scope. Possible values are:  
                ///   - value: The email address of a user or group, or the name of a domain, depending on the scope type. Omitted for type "default".
                public init(
                    _type: Swift.String? = nil,
                    value: Swift.String? = nil
                ) {
                    self._type = _type
                    self.value = value
                }
                public enum CodingKeys: String, CodingKey {
                    case _type = "type"
                    case value
                }
            }
            /// The extent to which calendar access is granted by this ACL rule.
            ///
            /// - Remark: Generated from `#/components/schemas/AclRule/scope`.
            public var scope: Components.Schemas.AclRule.ScopePayload?
            /// Creates a new `AclRule`.
            ///
            /// - Parameters:
            ///   - etag: ETag of the resource.
            ///   - id: Identifier of the Access Control List (ACL) rule. See Sharing calendars.
            ///   - kind: Type of the resource ("calendar#aclRule").
            ///   - role: The role assigned to the scope. Possible values are:  
            ///   - scope: The extent to which calendar access is granted by this ACL rule.
            public init(
                etag: Swift.String? = nil,
                id: Swift.String? = nil,
                kind: Swift.String? = nil,
                role: Swift.String? = nil,
                scope: Components.Schemas.AclRule.ScopePayload? = nil
            ) {
                self.etag = etag
                self.id = id
                self.kind = kind
                self.role = role
                self.scope = scope
            }
            public enum CodingKeys: String, CodingKey {
                case etag
                case id
                case kind
                case role
                case scope
            }
        }
        /// - Remark: Generated from `#/components/schemas/Calendar`.
        public struct Calendar: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/Calendar/conferenceProperties`.
            public var conferenceProperties: Components.Schemas.ConferenceProperties?
            /// Description of the calendar. Optional.
            ///
            /// - Remark: Generated from `#/components/schemas/Calendar/description`.
            public var description: Swift.String?
            /// ETag of the resource.
            ///
            /// - Remark: Generated from `#/components/schemas/Calendar/etag`.
            public var etag: Swift.String?
            /// Identifier of the calendar. To retrieve IDs call the calendarList.list() method.
            ///
            /// - Remark: Generated from `#/components/schemas/Calendar/id`.
            public var id: Swift.String?
            /// Type of the resource ("calendar#calendar").
            ///
            /// - Remark: Generated from `#/components/schemas/Calendar/kind`.
            public var kind: Swift.String?
            /// Geographic location of the calendar as free-form text. Optional.
            ///
            /// - Remark: Generated from `#/components/schemas/Calendar/location`.
            public var location: Swift.String?
            /// Title of the calendar.
            ///
            /// - Remark: Generated from `#/components/schemas/Calendar/summary`.
            public var summary: Swift.String?
            /// The time zone of the calendar. (Formatted as an IANA Time Zone Database name, e.g. "Europe/Zurich".) Optional.
            ///
            /// - Remark: Generated from `#/components/schemas/Calendar/timeZone`.
            public var timeZone: Swift.String?
            /// Creates a new `Calendar`.
            ///
            /// - Parameters:
            ///   - conferenceProperties:
            ///   - description: Description of the calendar. Optional.
            ///   - etag: ETag of the resource.
            ///   - id: Identifier of the calendar. To retrieve IDs call the calendarList.list() method.
            ///   - kind: Type of the resource ("calendar#calendar").
            ///   - location: Geographic location of the calendar as free-form text. Optional.
            ///   - summary: Title of the calendar.
            ///   - timeZone: The time zone of the calendar. (Formatted as an IANA Time Zone Database name, e.g. "Europe/Zurich".) Optional.
            public init(
                conferenceProperties: Components.Schemas.ConferenceProperties? = nil,
                description: Swift.String? = nil,
                etag: Swift.String? = nil,
                id: Swift.String? = nil,
                kind: Swift.String? = nil,
                location: Swift.String? = nil,
                summary: Swift.String? = nil,
                timeZone: Swift.String? = nil
            ) {
                self.conferenceProperties = conferenceProperties
                self.description = description
                self.etag = etag
                self.id = id
                self.kind = kind
                self.location = location
                self.summary = summary
                self.timeZone = timeZone
            }
            public enum CodingKeys: String, CodingKey {
                case conferenceProperties
                case description
                case etag
                case id
                case kind
                case location
                case summary
                case timeZone
            }
        }
        /// - Remark: Generated from `#/components/schemas/CalendarList`.
        public struct CalendarList: Codable, Hashable, Sendable {
            /// ETag of the collection.
            ///
            /// - Remark: Generated from `#/components/schemas/CalendarList/etag`.
            public var etag: Swift.String?
            /// Calendars that are present on the user's calendar list.
            ///
            /// - Remark: Generated from `#/components/schemas/CalendarList/items`.
            public var items: [Components.Schemas.CalendarListEntry]?
            /// Type of the collection ("calendar#calendarList").
            ///
            /// - Remark: Generated from `#/components/schemas/CalendarList/kind`.
            public var kind: Swift.String?
            /// Token used to access the next page of this result. Omitted if no further results are available, in which case nextSyncToken is provided.
            ///
            /// - Remark: Generated from `#/components/schemas/CalendarList/nextPageToken`.
            public var nextPageToken: Swift.String?
            /// Token used at a later point in time to retrieve only the entries that have changed since this result was returned. Omitted if further results are available, in which case nextPageToken is provided.
            ///
            /// - Remark: Generated from `#/components/schemas/CalendarList/nextSyncToken`.
            public var nextSyncToken: Swift.String?
            /// Creates a new `CalendarList`.
            ///
            /// - Parameters:
            ///   - etag: ETag of the collection.
            ///   - items: Calendars that are present on the user's calendar list.
            ///   - kind: Type of the collection ("calendar#calendarList").
            ///   - nextPageToken: Token used to access the next page of this result. Omitted if no further results are available, in which case nextSyncToken is provided.
            ///   - nextSyncToken: Token used at a later point in time to retrieve only the entries that have changed since this result was returned. Omitted if further results are available, in which case nextPageToken is provided.
            public init(
                etag: Swift.String? = nil,
                items: [Components.Schemas.CalendarListEntry]? = nil,
                kind: Swift.String? = nil,
                nextPageToken: Swift.String? = nil,
                nextSyncToken: Swift.String? = nil
            ) {
                self.etag = etag
                self.items = items
                self.kind = kind
                self.nextPageToken = nextPageToken
                self.nextSyncToken = nextSyncToken
            }
            public enum CodingKeys: String, CodingKey {
                case etag
                case items
                case kind
                case nextPageToken
                case nextSyncToken
            }
        }
        /// - Remark: Generated from `#/components/schemas/CalendarListEntry`.
        public struct CalendarListEntry: Codable, Hashable, Sendable {
            /// The effective access role that the authenticated user has on the calendar. Read-only. Possible values are:  
            /// - "freeBusyReader" - Provides read access to free/busy information. 
            /// - "reader" - Provides read access to the calendar. Private events will appear to users with reader access, but event details will be hidden. 
            /// - "writer" - Provides read and write access to the calendar. Private events will appear to users with writer access, and event details will be visible. 
            /// - "owner" - Provides ownership of the calendar. This role has all of the permissions of the writer role with the additional ability to see and manipulate ACLs.
            ///
            /// - Remark: Generated from `#/components/schemas/CalendarListEntry/accessRole`.
            public var accessRole: Swift.String?
            /// The main color of the calendar in the hexadecimal format "#0088aa". This property supersedes the index-based colorId property. To set or change this property, you need to specify colorRgbFormat=true in the parameters of the insert, update and patch methods. Optional.
            ///
            /// - Remark: Generated from `#/components/schemas/CalendarListEntry/backgroundColor`.
            public var backgroundColor: Swift.String?
            /// The color of the calendar. This is an ID referring to an entry in the calendar section of the colors definition (see the colors endpoint). This property is superseded by the backgroundColor and foregroundColor properties and can be ignored when using these properties. Optional.
            ///
            /// - Remark: Generated from `#/components/schemas/CalendarListEntry/colorId`.
            public var colorId: Swift.String?
            /// - Remark: Generated from `#/components/schemas/CalendarListEntry/conferenceProperties`.
            public var conferenceProperties: Components.Schemas.ConferenceProperties?
            /// The default reminders that the authenticated user has for this calendar.
            ///
            /// - Remark: Generated from `#/components/schemas/CalendarListEntry/defaultReminders`.
            public var defaultReminders: [Components.Schemas.EventReminder]?
            /// Whether this calendar list entry has been deleted from the calendar list. Read-only. Optional. The default is False.
            ///
            /// - Remark: Generated from `#/components/schemas/CalendarListEntry/deleted`.
            public var deleted: Swift.Bool?
            /// Description of the calendar. Optional. Read-only.
            ///
            /// - Remark: Generated from `#/components/schemas/CalendarListEntry/description`.
            public var description: Swift.String?
            /// ETag of the resource.
            ///
            /// - Remark: Generated from `#/components/schemas/CalendarListEntry/etag`.
            public var etag: Swift.String?
            /// The foreground color of the calendar in the hexadecimal format "#ffffff". This property supersedes the index-based colorId property. To set or change this property, you need to specify colorRgbFormat=true in the parameters of the insert, update and patch methods. Optional.
            ///
            /// - Remark: Generated from `#/components/schemas/CalendarListEntry/foregroundColor`.
            public var foregroundColor: Swift.String?
            /// Whether the calendar has been hidden from the list. Optional. The attribute is only returned when the calendar is hidden, in which case the value is true.
            ///
            /// - Remark: Generated from `#/components/schemas/CalendarListEntry/hidden`.
            public var hidden: Swift.Bool?
            /// Identifier of the calendar.
            ///
            /// - Remark: Generated from `#/components/schemas/CalendarListEntry/id`.
            public var id: Swift.String?
            /// Type of the resource ("calendar#calendarListEntry").
            ///
            /// - Remark: Generated from `#/components/schemas/CalendarListEntry/kind`.
            public var kind: Swift.String?
            /// Geographic location of the calendar as free-form text. Optional. Read-only.
            ///
            /// - Remark: Generated from `#/components/schemas/CalendarListEntry/location`.
            public var location: Swift.String?
            /// The notifications that the authenticated user is receiving for this calendar.
            ///
            /// - Remark: Generated from `#/components/schemas/CalendarListEntry/notificationSettings`.
            public struct NotificationSettingsPayload: Codable, Hashable, Sendable {
                /// The list of notifications set for this calendar.
                ///
                /// - Remark: Generated from `#/components/schemas/CalendarListEntry/notificationSettings/notifications`.
                public var notifications: [Components.Schemas.CalendarNotification]?
                /// Creates a new `NotificationSettingsPayload`.
                ///
                /// - Parameters:
                ///   - notifications: The list of notifications set for this calendar.
                public init(notifications: [Components.Schemas.CalendarNotification]? = nil) {
                    self.notifications = notifications
                }
                public enum CodingKeys: String, CodingKey {
                    case notifications
                }
            }
            /// The notifications that the authenticated user is receiving for this calendar.
            ///
            /// - Remark: Generated from `#/components/schemas/CalendarListEntry/notificationSettings`.
            public var notificationSettings: Components.Schemas.CalendarListEntry.NotificationSettingsPayload?
            /// Whether the calendar is the primary calendar of the authenticated user. Read-only. Optional. The default is False.
            ///
            /// - Remark: Generated from `#/components/schemas/CalendarListEntry/primary`.
            public var primary: Swift.Bool?
            /// Whether the calendar content shows up in the calendar UI. Optional. The default is False.
            ///
            /// - Remark: Generated from `#/components/schemas/CalendarListEntry/selected`.
            public var selected: Swift.Bool?
            /// Title of the calendar. Read-only.
            ///
            /// - Remark: Generated from `#/components/schemas/CalendarListEntry/summary`.
            public var summary: Swift.String?
            /// The summary that the authenticated user has set for this calendar. Optional.
            ///
            /// - Remark: Generated from `#/components/schemas/CalendarListEntry/summaryOverride`.
            public var summaryOverride: Swift.String?
            /// The time zone of the calendar. Optional. Read-only.
            ///
            /// - Remark: Generated from `#/components/schemas/CalendarListEntry/timeZone`.
            public var timeZone: Swift.String?
            /// Creates a new `CalendarListEntry`.
            ///
            /// - Parameters:
            ///   - accessRole: The effective access role that the authenticated user has on the calendar. Read-only. Possible values are:  
            ///   - backgroundColor: The main color of the calendar in the hexadecimal format "#0088aa". This property supersedes the index-based colorId property. To set or change this property, you need to specify colorRgbFormat=true in the parameters of the insert, update and patch methods. Optional.
            ///   - colorId: The color of the calendar. This is an ID referring to an entry in the calendar section of the colors definition (see the colors endpoint). This property is superseded by the backgroundColor and foregroundColor properties and can be ignored when using these properties. Optional.
            ///   - conferenceProperties:
            ///   - defaultReminders: The default reminders that the authenticated user has for this calendar.
            ///   - deleted: Whether this calendar list entry has been deleted from the calendar list. Read-only. Optional. The default is False.
            ///   - description: Description of the calendar. Optional. Read-only.
            ///   - etag: ETag of the resource.
            ///   - foregroundColor: The foreground color of the calendar in the hexadecimal format "#ffffff". This property supersedes the index-based colorId property. To set or change this property, you need to specify colorRgbFormat=true in the parameters of the insert, update and patch methods. Optional.
            ///   - hidden: Whether the calendar has been hidden from the list. Optional. The attribute is only returned when the calendar is hidden, in which case the value is true.
            ///   - id: Identifier of the calendar.
            ///   - kind: Type of the resource ("calendar#calendarListEntry").
            ///   - location: Geographic location of the calendar as free-form text. Optional. Read-only.
            ///   - notificationSettings: The notifications that the authenticated user is receiving for this calendar.
            ///   - primary: Whether the calendar is the primary calendar of the authenticated user. Read-only. Optional. The default is False.
            ///   - selected: Whether the calendar content shows up in the calendar UI. Optional. The default is False.
            ///   - summary: Title of the calendar. Read-only.
            ///   - summaryOverride: The summary that the authenticated user has set for this calendar. Optional.
            ///   - timeZone: The time zone of the calendar. Optional. Read-only.
            public init(
                accessRole: Swift.String? = nil,
                backgroundColor: Swift.String? = nil,
                colorId: Swift.String? = nil,
                conferenceProperties: Components.Schemas.ConferenceProperties? = nil,
                defaultReminders: [Components.Schemas.EventReminder]? = nil,
                deleted: Swift.Bool? = nil,
                description: Swift.String? = nil,
                etag: Swift.String? = nil,
                foregroundColor: Swift.String? = nil,
                hidden: Swift.Bool? = nil,
                id: Swift.String? = nil,
                kind: Swift.String? = nil,
                location: Swift.String? = nil,
                notificationSettings: Components.Schemas.CalendarListEntry.NotificationSettingsPayload? = nil,
                primary: Swift.Bool? = nil,
                selected: Swift.Bool? = nil,
                summary: Swift.String? = nil,
                summaryOverride: Swift.String? = nil,
                timeZone: Swift.String? = nil
            ) {
                self.accessRole = accessRole
                self.backgroundColor = backgroundColor
                self.colorId = colorId
                self.conferenceProperties = conferenceProperties
                self.defaultReminders = defaultReminders
                self.deleted = deleted
                self.description = description
                self.etag = etag
                self.foregroundColor = foregroundColor
                self.hidden = hidden
                self.id = id
                self.kind = kind
                self.location = location
                self.notificationSettings = notificationSettings
                self.primary = primary
                self.selected = selected
                self.summary = summary
                self.summaryOverride = summaryOverride
                self.timeZone = timeZone
            }
            public enum CodingKeys: String, CodingKey {
                case accessRole
                case backgroundColor
                case colorId
                case conferenceProperties
                case defaultReminders
                case deleted
                case description
                case etag
                case foregroundColor
                case hidden
                case id
                case kind
                case location
                case notificationSettings
                case primary
                case selected
                case summary
                case summaryOverride
                case timeZone
            }
        }
        /// - Remark: Generated from `#/components/schemas/CalendarNotification`.
        public struct CalendarNotification: Codable, Hashable, Sendable {
            /// The method used to deliver the notification. The possible value is:  
            /// - "email" - Notifications are sent via email.  
            /// Required when adding a notification.
            ///
            /// - Remark: Generated from `#/components/schemas/CalendarNotification/method`.
            public var method: Swift.String?
            /// The type of notification. Possible values are:  
            /// - "eventCreation" - Notification sent when a new event is put on the calendar. 
            /// - "eventChange" - Notification sent when an event is changed. 
            /// - "eventCancellation" - Notification sent when an event is cancelled. 
            /// - "eventResponse" - Notification sent when an attendee responds to the event invitation. 
            /// - "agenda" - An agenda with the events of the day (sent out in the morning).  
            /// Required when adding a notification.
            ///
            /// - Remark: Generated from `#/components/schemas/CalendarNotification/type`.
            public var _type: Swift.String?
            /// Creates a new `CalendarNotification`.
            ///
            /// - Parameters:
            ///   - method: The method used to deliver the notification. The possible value is:  
            ///   - _type: The type of notification. Possible values are:  
            public init(
                method: Swift.String? = nil,
                _type: Swift.String? = nil
            ) {
                self.method = method
                self._type = _type
            }
            public enum CodingKeys: String, CodingKey {
                case method
                case _type = "type"
            }
        }
        /// - Remark: Generated from `#/components/schemas/Channel`.
        public struct Channel: Codable, Hashable, Sendable {
            /// The address where notifications are delivered for this channel.
            ///
            /// - Remark: Generated from `#/components/schemas/Channel/address`.
            public var address: Swift.String?
            /// Date and time of notification channel expiration, expressed as a Unix timestamp, in milliseconds. Optional.
            ///
            /// - Remark: Generated from `#/components/schemas/Channel/expiration`.
            public var expiration: Swift.String?
            /// A UUID or similar unique string that identifies this channel.
            ///
            /// - Remark: Generated from `#/components/schemas/Channel/id`.
            public var id: Swift.String?
            /// Identifies this as a notification channel used to watch for changes to a resource, which is "api#channel".
            ///
            /// - Remark: Generated from `#/components/schemas/Channel/kind`.
            public var kind: Swift.String?
            /// Additional parameters controlling delivery channel behavior. Optional.
            ///
            /// - Remark: Generated from `#/components/schemas/Channel/params`.
            public struct ParamsPayload: Codable, Hashable, Sendable {
                /// A container of undocumented properties.
                public var additionalProperties: [String: Swift.String]
                /// Creates a new `ParamsPayload`.
                ///
                /// - Parameters:
                ///   - additionalProperties: A container of undocumented properties.
                public init(additionalProperties: [String: Swift.String] = .init()) {
                    self.additionalProperties = additionalProperties
                }
                public init(from decoder: any Decoder) throws {
                    additionalProperties = try decoder.decodeAdditionalProperties(knownKeys: [])
                }
                public func encode(to encoder: any Encoder) throws {
                    try encoder.encodeAdditionalProperties(additionalProperties)
                }
            }
            /// Additional parameters controlling delivery channel behavior. Optional.
            ///
            /// - Remark: Generated from `#/components/schemas/Channel/params`.
            public var params: Components.Schemas.Channel.ParamsPayload?
            /// A Boolean value to indicate whether payload is wanted. Optional.
            ///
            /// - Remark: Generated from `#/components/schemas/Channel/payload`.
            public var payload: Swift.Bool?
            /// An opaque ID that identifies the resource being watched on this channel. Stable across different API versions.
            ///
            /// - Remark: Generated from `#/components/schemas/Channel/resourceId`.
            public var resourceId: Swift.String?
            /// A version-specific identifier for the watched resource.
            ///
            /// - Remark: Generated from `#/components/schemas/Channel/resourceUri`.
            public var resourceUri: Swift.String?
            /// An arbitrary string delivered to the target address with each notification delivered over this channel. Optional.
            ///
            /// - Remark: Generated from `#/components/schemas/Channel/token`.
            public var token: Swift.String?
            /// The type of delivery mechanism used for this channel. Valid values are "web_hook" (or "webhook"). Both values refer to a channel where Http requests are used to deliver messages.
            ///
            /// - Remark: Generated from `#/components/schemas/Channel/type`.
            public var _type: Swift.String?
            /// Creates a new `Channel`.
            ///
            /// - Parameters:
            ///   - address: The address where notifications are delivered for this channel.
            ///   - expiration: Date and time of notification channel expiration, expressed as a Unix timestamp, in milliseconds. Optional.
            ///   - id: A UUID or similar unique string that identifies this channel.
            ///   - kind: Identifies this as a notification channel used to watch for changes to a resource, which is "api#channel".
            ///   - params: Additional parameters controlling delivery channel behavior. Optional.
            ///   - payload: A Boolean value to indicate whether payload is wanted. Optional.
            ///   - resourceId: An opaque ID that identifies the resource being watched on this channel. Stable across different API versions.
            ///   - resourceUri: A version-specific identifier for the watched resource.
            ///   - token: An arbitrary string delivered to the target address with each notification delivered over this channel. Optional.
            ///   - _type: The type of delivery mechanism used for this channel. Valid values are "web_hook" (or "webhook"). Both values refer to a channel where Http requests are used to deliver messages.
            public init(
                address: Swift.String? = nil,
                expiration: Swift.String? = nil,
                id: Swift.String? = nil,
                kind: Swift.String? = nil,
                params: Components.Schemas.Channel.ParamsPayload? = nil,
                payload: Swift.Bool? = nil,
                resourceId: Swift.String? = nil,
                resourceUri: Swift.String? = nil,
                token: Swift.String? = nil,
                _type: Swift.String? = nil
            ) {
                self.address = address
                self.expiration = expiration
                self.id = id
                self.kind = kind
                self.params = params
                self.payload = payload
                self.resourceId = resourceId
                self.resourceUri = resourceUri
                self.token = token
                self._type = _type
            }
            public enum CodingKeys: String, CodingKey {
                case address
                case expiration
                case id
                case kind
                case params
                case payload
                case resourceId
                case resourceUri
                case token
                case _type = "type"
            }
        }
        /// - Remark: Generated from `#/components/schemas/ColorDefinition`.
        public struct ColorDefinition: Codable, Hashable, Sendable {
            /// The background color associated with this color definition.
            ///
            /// - Remark: Generated from `#/components/schemas/ColorDefinition/background`.
            public var background: Swift.String?
            /// The foreground color that can be used to write on top of a background with 'background' color.
            ///
            /// - Remark: Generated from `#/components/schemas/ColorDefinition/foreground`.
            public var foreground: Swift.String?
            /// Creates a new `ColorDefinition`.
            ///
            /// - Parameters:
            ///   - background: The background color associated with this color definition.
            ///   - foreground: The foreground color that can be used to write on top of a background with 'background' color.
            public init(
                background: Swift.String? = nil,
                foreground: Swift.String? = nil
            ) {
                self.background = background
                self.foreground = foreground
            }
            public enum CodingKeys: String, CodingKey {
                case background
                case foreground
            }
        }
        /// - Remark: Generated from `#/components/schemas/Colors`.
        public struct Colors: Codable, Hashable, Sendable {
            /// A global palette of calendar colors, mapping from the color ID to its definition. A calendarListEntry resource refers to one of these color IDs in its colorId field. Read-only.
            ///
            /// - Remark: Generated from `#/components/schemas/Colors/calendar`.
            public struct CalendarPayload: Codable, Hashable, Sendable {
                /// A container of undocumented properties.
                public var additionalProperties: [String: Components.Schemas.ColorDefinition]
                /// Creates a new `CalendarPayload`.
                ///
                /// - Parameters:
                ///   - additionalProperties: A container of undocumented properties.
                public init(additionalProperties: [String: Components.Schemas.ColorDefinition] = .init()) {
                    self.additionalProperties = additionalProperties
                }
                public init(from decoder: any Decoder) throws {
                    additionalProperties = try decoder.decodeAdditionalProperties(knownKeys: [])
                }
                public func encode(to encoder: any Encoder) throws {
                    try encoder.encodeAdditionalProperties(additionalProperties)
                }
            }
            /// A global palette of calendar colors, mapping from the color ID to its definition. A calendarListEntry resource refers to one of these color IDs in its colorId field. Read-only.
            ///
            /// - Remark: Generated from `#/components/schemas/Colors/calendar`.
            public var calendar: Components.Schemas.Colors.CalendarPayload?
            /// A global palette of event colors, mapping from the color ID to its definition. An event resource may refer to one of these color IDs in its colorId field. Read-only.
            ///
            /// - Remark: Generated from `#/components/schemas/Colors/event`.
            public struct EventPayload: Codable, Hashable, Sendable {
                /// A container of undocumented properties.
                public var additionalProperties: [String: Components.Schemas.ColorDefinition]
                /// Creates a new `EventPayload`.
                ///
                /// - Parameters:
                ///   - additionalProperties: A container of undocumented properties.
                public init(additionalProperties: [String: Components.Schemas.ColorDefinition] = .init()) {
                    self.additionalProperties = additionalProperties
                }
                public init(from decoder: any Decoder) throws {
                    additionalProperties = try decoder.decodeAdditionalProperties(knownKeys: [])
                }
                public func encode(to encoder: any Encoder) throws {
                    try encoder.encodeAdditionalProperties(additionalProperties)
                }
            }
            /// A global palette of event colors, mapping from the color ID to its definition. An event resource may refer to one of these color IDs in its colorId field. Read-only.
            ///
            /// - Remark: Generated from `#/components/schemas/Colors/event`.
            public var event: Components.Schemas.Colors.EventPayload?
            /// Type of the resource ("calendar#colors").
            ///
            /// - Remark: Generated from `#/components/schemas/Colors/kind`.
            public var kind: Swift.String?
            /// Last modification time of the color palette (as a RFC3339 timestamp). Read-only.
            ///
            /// - Remark: Generated from `#/components/schemas/Colors/updated`.
            public var updated: Foundation.Date?
            /// Creates a new `Colors`.
            ///
            /// - Parameters:
            ///   - calendar: A global palette of calendar colors, mapping from the color ID to its definition. A calendarListEntry resource refers to one of these color IDs in its colorId field. Read-only.
            ///   - event: A global palette of event colors, mapping from the color ID to its definition. An event resource may refer to one of these color IDs in its colorId field. Read-only.
            ///   - kind: Type of the resource ("calendar#colors").
            ///   - updated: Last modification time of the color palette (as a RFC3339 timestamp). Read-only.
            public init(
                calendar: Components.Schemas.Colors.CalendarPayload? = nil,
                event: Components.Schemas.Colors.EventPayload? = nil,
                kind: Swift.String? = nil,
                updated: Foundation.Date? = nil
            ) {
                self.calendar = calendar
                self.event = event
                self.kind = kind
                self.updated = updated
            }
            public enum CodingKeys: String, CodingKey {
                case calendar
                case event
                case kind
                case updated
            }
        }
        /// - Remark: Generated from `#/components/schemas/ConferenceData`.
        public struct ConferenceData: Codable, Hashable, Sendable {
            /// The ID of the conference.
            /// Can be used by developers to keep track of conferences, should not be displayed to users.
            /// The ID value is formed differently for each conference solution type:  
            /// - eventHangout: ID is not set. (This conference type is deprecated.)
            /// - eventNamedHangout: ID is the name of the Hangout. (This conference type is deprecated.)
            /// - hangoutsMeet: ID is the 10-letter meeting code, for example aaa-bbbb-ccc.
            /// - addOn: ID is defined by the third-party provider.  Optional.
            ///
            /// - Remark: Generated from `#/components/schemas/ConferenceData/conferenceId`.
            public var conferenceId: Swift.String?
            /// - Remark: Generated from `#/components/schemas/ConferenceData/conferenceSolution`.
            public var conferenceSolution: Components.Schemas.ConferenceSolution?
            /// - Remark: Generated from `#/components/schemas/ConferenceData/createRequest`.
            public var createRequest: Components.Schemas.CreateConferenceRequest?
            /// Information about individual conference entry points, such as URLs or phone numbers.
            /// All of them must belong to the same conference.
            /// Either conferenceSolution and at least one entryPoint, or createRequest is required.
            ///
            /// - Remark: Generated from `#/components/schemas/ConferenceData/entryPoints`.
            public var entryPoints: [Components.Schemas.EntryPoint]?
            /// Additional notes (such as instructions from the domain administrator, legal notices) to display to the user. Can contain HTML. The maximum length is 2048 characters. Optional.
            ///
            /// - Remark: Generated from `#/components/schemas/ConferenceData/notes`.
            public var notes: Swift.String?
            /// - Remark: Generated from `#/components/schemas/ConferenceData/parameters`.
            public var parameters: Components.Schemas.ConferenceParameters?
            /// The signature of the conference data.
            /// Generated on server side.
            /// Unset for a conference with a failed create request.
            /// Optional for a conference with a pending create request.
            ///
            /// - Remark: Generated from `#/components/schemas/ConferenceData/signature`.
            public var signature: Swift.String?
            /// Creates a new `ConferenceData`.
            ///
            /// - Parameters:
            ///   - conferenceId: The ID of the conference.
            ///   - conferenceSolution:
            ///   - createRequest:
            ///   - entryPoints: Information about individual conference entry points, such as URLs or phone numbers.
            ///   - notes: Additional notes (such as instructions from the domain administrator, legal notices) to display to the user. Can contain HTML. The maximum length is 2048 characters. Optional.
            ///   - parameters:
            ///   - signature: The signature of the conference data.
            public init(
                conferenceId: Swift.String? = nil,
                conferenceSolution: Components.Schemas.ConferenceSolution? = nil,
                createRequest: Components.Schemas.CreateConferenceRequest? = nil,
                entryPoints: [Components.Schemas.EntryPoint]? = nil,
                notes: Swift.String? = nil,
                parameters: Components.Schemas.ConferenceParameters? = nil,
                signature: Swift.String? = nil
            ) {
                self.conferenceId = conferenceId
                self.conferenceSolution = conferenceSolution
                self.createRequest = createRequest
                self.entryPoints = entryPoints
                self.notes = notes
                self.parameters = parameters
                self.signature = signature
            }
            public enum CodingKeys: String, CodingKey {
                case conferenceId
                case conferenceSolution
                case createRequest
                case entryPoints
                case notes
                case parameters
                case signature
            }
        }
        /// - Remark: Generated from `#/components/schemas/ConferenceParameters`.
        public struct ConferenceParameters: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/ConferenceParameters/addOnParameters`.
            public var addOnParameters: Components.Schemas.ConferenceParametersAddOnParameters?
            /// Creates a new `ConferenceParameters`.
            ///
            /// - Parameters:
            ///   - addOnParameters:
            public init(addOnParameters: Components.Schemas.ConferenceParametersAddOnParameters? = nil) {
                self.addOnParameters = addOnParameters
            }
            public enum CodingKeys: String, CodingKey {
                case addOnParameters
            }
        }
        /// - Remark: Generated from `#/components/schemas/ConferenceParametersAddOnParameters`.
        public struct ConferenceParametersAddOnParameters: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/ConferenceParametersAddOnParameters/parameters`.
            public struct ParametersPayload: Codable, Hashable, Sendable {
                /// A container of undocumented properties.
                public var additionalProperties: [String: Swift.String]
                /// Creates a new `ParametersPayload`.
                ///
                /// - Parameters:
                ///   - additionalProperties: A container of undocumented properties.
                public init(additionalProperties: [String: Swift.String] = .init()) {
                    self.additionalProperties = additionalProperties
                }
                public init(from decoder: any Decoder) throws {
                    additionalProperties = try decoder.decodeAdditionalProperties(knownKeys: [])
                }
                public func encode(to encoder: any Encoder) throws {
                    try encoder.encodeAdditionalProperties(additionalProperties)
                }
            }
            /// - Remark: Generated from `#/components/schemas/ConferenceParametersAddOnParameters/parameters`.
            public var parameters: Components.Schemas.ConferenceParametersAddOnParameters.ParametersPayload?
            /// Creates a new `ConferenceParametersAddOnParameters`.
            ///
            /// - Parameters:
            ///   - parameters:
            public init(parameters: Components.Schemas.ConferenceParametersAddOnParameters.ParametersPayload? = nil) {
                self.parameters = parameters
            }
            public enum CodingKeys: String, CodingKey {
                case parameters
            }
        }
        /// - Remark: Generated from `#/components/schemas/ConferenceProperties`.
        public struct ConferenceProperties: Codable, Hashable, Sendable {
            /// The types of conference solutions that are supported for this calendar.
            /// The possible values are:  
            /// - "eventHangout" 
            /// - "eventNamedHangout" 
            /// - "hangoutsMeet"  Optional.
            ///
            /// - Remark: Generated from `#/components/schemas/ConferenceProperties/allowedConferenceSolutionTypes`.
            public var allowedConferenceSolutionTypes: [Swift.String]?
            /// Creates a new `ConferenceProperties`.
            ///
            /// - Parameters:
            ///   - allowedConferenceSolutionTypes: The types of conference solutions that are supported for this calendar.
            public init(allowedConferenceSolutionTypes: [Swift.String]? = nil) {
                self.allowedConferenceSolutionTypes = allowedConferenceSolutionTypes
            }
            public enum CodingKeys: String, CodingKey {
                case allowedConferenceSolutionTypes
            }
        }
        /// - Remark: Generated from `#/components/schemas/ConferenceRequestStatus`.
        public struct ConferenceRequestStatus: Codable, Hashable, Sendable {
            /// The current status of the conference create request. Read-only.
            /// The possible values are:  
            /// - "pending": the conference create request is still being processed.
            /// - "success": the conference create request succeeded, the entry points are populated.
            /// - "failure": the conference create request failed, there are no entry points.
            ///
            /// - Remark: Generated from `#/components/schemas/ConferenceRequestStatus/statusCode`.
            public var statusCode: Swift.String?
            /// Creates a new `ConferenceRequestStatus`.
            ///
            /// - Parameters:
            ///   - statusCode: The current status of the conference create request. Read-only.
            public init(statusCode: Swift.String? = nil) {
                self.statusCode = statusCode
            }
            public enum CodingKeys: String, CodingKey {
                case statusCode
            }
        }
        /// - Remark: Generated from `#/components/schemas/ConferenceSolution`.
        public struct ConferenceSolution: Codable, Hashable, Sendable {
            /// The user-visible icon for this solution.
            ///
            /// - Remark: Generated from `#/components/schemas/ConferenceSolution/iconUri`.
            public var iconUri: Swift.String?
            /// - Remark: Generated from `#/components/schemas/ConferenceSolution/key`.
            public var key: Components.Schemas.ConferenceSolutionKey?
            /// The user-visible name of this solution. Not localized.
            ///
            /// - Remark: Generated from `#/components/schemas/ConferenceSolution/name`.
            public var name: Swift.String?
            /// Creates a new `ConferenceSolution`.
            ///
            /// - Parameters:
            ///   - iconUri: The user-visible icon for this solution.
            ///   - key:
            ///   - name: The user-visible name of this solution. Not localized.
            public init(
                iconUri: Swift.String? = nil,
                key: Components.Schemas.ConferenceSolutionKey? = nil,
                name: Swift.String? = nil
            ) {
                self.iconUri = iconUri
                self.key = key
                self.name = name
            }
            public enum CodingKeys: String, CodingKey {
                case iconUri
                case key
                case name
            }
        }
        /// - Remark: Generated from `#/components/schemas/ConferenceSolutionKey`.
        public struct ConferenceSolutionKey: Codable, Hashable, Sendable {
            /// The conference solution type.
            /// If a client encounters an unfamiliar or empty type, it should still be able to display the entry points. However, it should disallow modifications.
            /// The possible values are:  
            /// - "eventHangout" for Hangouts for consumers (deprecated; existing events may show this conference solution type but new conferences cannot be created)
            /// - "eventNamedHangout" for classic Hangouts for Google Workspace users (deprecated; existing events may show this conference solution type but new conferences cannot be created)
            /// - "hangoutsMeet" for Google Meet (http://meet.google.com)
            /// - "addOn" for 3P conference providers
            ///
            /// - Remark: Generated from `#/components/schemas/ConferenceSolutionKey/type`.
            public var _type: Swift.String?
            /// Creates a new `ConferenceSolutionKey`.
            ///
            /// - Parameters:
            ///   - _type: The conference solution type.
            public init(_type: Swift.String? = nil) {
                self._type = _type
            }
            public enum CodingKeys: String, CodingKey {
                case _type = "type"
            }
        }
        /// - Remark: Generated from `#/components/schemas/CreateConferenceRequest`.
        public struct CreateConferenceRequest: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/CreateConferenceRequest/conferenceSolutionKey`.
            public var conferenceSolutionKey: Components.Schemas.ConferenceSolutionKey?
            /// The client-generated unique ID for this request.
            /// Clients should regenerate this ID for every new request. If an ID provided is the same as for the previous request, the request is ignored.
            ///
            /// - Remark: Generated from `#/components/schemas/CreateConferenceRequest/requestId`.
            public var requestId: Swift.String?
            /// - Remark: Generated from `#/components/schemas/CreateConferenceRequest/status`.
            public var status: Components.Schemas.ConferenceRequestStatus?
            /// Creates a new `CreateConferenceRequest`.
            ///
            /// - Parameters:
            ///   - conferenceSolutionKey:
            ///   - requestId: The client-generated unique ID for this request.
            ///   - status:
            public init(
                conferenceSolutionKey: Components.Schemas.ConferenceSolutionKey? = nil,
                requestId: Swift.String? = nil,
                status: Components.Schemas.ConferenceRequestStatus? = nil
            ) {
                self.conferenceSolutionKey = conferenceSolutionKey
                self.requestId = requestId
                self.status = status
            }
            public enum CodingKeys: String, CodingKey {
                case conferenceSolutionKey
                case requestId
                case status
            }
        }
        /// - Remark: Generated from `#/components/schemas/EntryPoint`.
        public struct EntryPoint: Codable, Hashable, Sendable {
            /// The access code to access the conference. The maximum length is 128 characters.
            /// When creating new conference data, populate only the subset of {meetingCode, accessCode, passcode, password, pin} fields that match the terminology that the conference provider uses. Only the populated fields should be displayed.
            /// Optional.
            ///
            /// - Remark: Generated from `#/components/schemas/EntryPoint/accessCode`.
            public var accessCode: Swift.String?
            /// Features of the entry point, such as being toll or toll-free. One entry point can have multiple features. However, toll and toll-free cannot be both set on the same entry point.
            ///
            /// - Remark: Generated from `#/components/schemas/EntryPoint/entryPointFeatures`.
            public var entryPointFeatures: [Swift.String]?
            /// The type of the conference entry point.
            /// Possible values are:  
            /// - "video" - joining a conference over HTTP. A conference can have zero or one video entry point.
            /// - "phone" - joining a conference by dialing a phone number. A conference can have zero or more phone entry points.
            /// - "sip" - joining a conference over SIP. A conference can have zero or one sip entry point.
            /// - "more" - further conference joining instructions, for example additional phone numbers. A conference can have zero or one more entry point. A conference with only a more entry point is not a valid conference.
            ///
            /// - Remark: Generated from `#/components/schemas/EntryPoint/entryPointType`.
            public var entryPointType: Swift.String?
            /// The label for the URI. Visible to end users. Not localized. The maximum length is 512 characters.
            /// Examples:  
            /// - for video: meet.google.com/aaa-bbbb-ccc
            /// - for phone: +1 123 268 2601
            /// - for sip: 12345678@altostrat.com
            /// - for more: should not be filled  
            /// Optional.
            ///
            /// - Remark: Generated from `#/components/schemas/EntryPoint/label`.
            public var label: Swift.String?
            /// The meeting code to access the conference. The maximum length is 128 characters.
            /// When creating new conference data, populate only the subset of {meetingCode, accessCode, passcode, password, pin} fields that match the terminology that the conference provider uses. Only the populated fields should be displayed.
            /// Optional.
            ///
            /// - Remark: Generated from `#/components/schemas/EntryPoint/meetingCode`.
            public var meetingCode: Swift.String?
            /// The passcode to access the conference. The maximum length is 128 characters.
            /// When creating new conference data, populate only the subset of {meetingCode, accessCode, passcode, password, pin} fields that match the terminology that the conference provider uses. Only the populated fields should be displayed.
            ///
            /// - Remark: Generated from `#/components/schemas/EntryPoint/passcode`.
            public var passcode: Swift.String?
            /// The password to access the conference. The maximum length is 128 characters.
            /// When creating new conference data, populate only the subset of {meetingCode, accessCode, passcode, password, pin} fields that match the terminology that the conference provider uses. Only the populated fields should be displayed.
            /// Optional.
            ///
            /// - Remark: Generated from `#/components/schemas/EntryPoint/password`.
            public var password: Swift.String?
            /// The PIN to access the conference. The maximum length is 128 characters.
            /// When creating new conference data, populate only the subset of {meetingCode, accessCode, passcode, password, pin} fields that match the terminology that the conference provider uses. Only the populated fields should be displayed.
            /// Optional.
            ///
            /// - Remark: Generated from `#/components/schemas/EntryPoint/pin`.
            public var pin: Swift.String?
            /// The CLDR/ISO 3166 region code for the country associated with this phone access. Example: "SE" for Sweden.
            /// Calendar backend will populate this field only for EntryPointType.PHONE.
            ///
            /// - Remark: Generated from `#/components/schemas/EntryPoint/regionCode`.
            public var regionCode: Swift.String?
            /// The URI of the entry point. The maximum length is 1300 characters.
            /// Format:  
            /// - for video, http: or https: schema is required.
            /// - for phone, tel: schema is required. The URI should include the entire dial sequence (e.g., tel:+12345678900,,,123456789;1234).
            /// - for sip, sip: schema is required, e.g., sip:12345678@myprovider.com.
            /// - for more, http: or https: schema is required.
            ///
            /// - Remark: Generated from `#/components/schemas/EntryPoint/uri`.
            public var uri: Swift.String?
            /// Creates a new `EntryPoint`.
            ///
            /// - Parameters:
            ///   - accessCode: The access code to access the conference. The maximum length is 128 characters.
            ///   - entryPointFeatures: Features of the entry point, such as being toll or toll-free. One entry point can have multiple features. However, toll and toll-free cannot be both set on the same entry point.
            ///   - entryPointType: The type of the conference entry point.
            ///   - label: The label for the URI. Visible to end users. Not localized. The maximum length is 512 characters.
            ///   - meetingCode: The meeting code to access the conference. The maximum length is 128 characters.
            ///   - passcode: The passcode to access the conference. The maximum length is 128 characters.
            ///   - password: The password to access the conference. The maximum length is 128 characters.
            ///   - pin: The PIN to access the conference. The maximum length is 128 characters.
            ///   - regionCode: The CLDR/ISO 3166 region code for the country associated with this phone access. Example: "SE" for Sweden.
            ///   - uri: The URI of the entry point. The maximum length is 1300 characters.
            public init(
                accessCode: Swift.String? = nil,
                entryPointFeatures: [Swift.String]? = nil,
                entryPointType: Swift.String? = nil,
                label: Swift.String? = nil,
                meetingCode: Swift.String? = nil,
                passcode: Swift.String? = nil,
                password: Swift.String? = nil,
                pin: Swift.String? = nil,
                regionCode: Swift.String? = nil,
                uri: Swift.String? = nil
            ) {
                self.accessCode = accessCode
                self.entryPointFeatures = entryPointFeatures
                self.entryPointType = entryPointType
                self.label = label
                self.meetingCode = meetingCode
                self.passcode = passcode
                self.password = password
                self.pin = pin
                self.regionCode = regionCode
                self.uri = uri
            }
            public enum CodingKeys: String, CodingKey {
                case accessCode
                case entryPointFeatures
                case entryPointType
                case label
                case meetingCode
                case passcode
                case password
                case pin
                case regionCode
                case uri
            }
        }
        /// - Remark: Generated from `#/components/schemas/Error`.
        public struct _Error: Codable, Hashable, Sendable {
            /// Domain, or broad category, of the error.
            ///
            /// - Remark: Generated from `#/components/schemas/Error/domain`.
            public var domain: Swift.String?
            /// Specific reason for the error. Some of the possible values are:  
            /// - "groupTooBig" - The group of users requested is too large for a single query. 
            /// - "tooManyCalendarsRequested" - The number of calendars requested is too large for a single query. 
            /// - "notFound" - The requested resource was not found. 
            /// - "internalError" - The API service has encountered an internal error.  Additional error types may be added in the future, so clients should gracefully handle additional error statuses not included in this list.
            ///
            /// - Remark: Generated from `#/components/schemas/Error/reason`.
            public var reason: Swift.String?
            /// Creates a new `_Error`.
            ///
            /// - Parameters:
            ///   - domain: Domain, or broad category, of the error.
            ///   - reason: Specific reason for the error. Some of the possible values are:  
            public init(
                domain: Swift.String? = nil,
                reason: Swift.String? = nil
            ) {
                self.domain = domain
                self.reason = reason
            }
            public enum CodingKeys: String, CodingKey {
                case domain
                case reason
            }
        }
        /// - Remark: Generated from `#/components/schemas/Event`.
        public struct Event: Codable, Hashable, Sendable {
            /// Whether anyone can invite themselves to the event (deprecated). Optional. The default is False.
            ///
            /// - Remark: Generated from `#/components/schemas/Event/anyoneCanAddSelf`.
            public var anyoneCanAddSelf: Swift.Bool?
            /// File attachments for the event.
            /// In order to modify attachments the supportsAttachments request parameter should be set to true.
            /// There can be at most 25 attachments per event,
            ///
            /// - Remark: Generated from `#/components/schemas/Event/attachments`.
            public var attachments: [Components.Schemas.EventAttachment]?
            /// The attendees of the event. See the Events with attendees guide for more information on scheduling events with other calendar users. Service accounts need to use domain-wide delegation of authority to populate the attendee list.
            ///
            /// - Remark: Generated from `#/components/schemas/Event/attendees`.
            public var attendees: [Components.Schemas.EventAttendee]?
            /// Whether attendees may have been omitted from the event's representation. When retrieving an event, this may be due to a restriction specified by the maxAttendee query parameter. When updating an event, this can be used to only update the participant's response. Optional. The default is False.
            ///
            /// - Remark: Generated from `#/components/schemas/Event/attendeesOmitted`.
            public var attendeesOmitted: Swift.Bool?
            /// The color of the event. This is an ID referring to an entry in the event section of the colors definition (see the  colors endpoint). Optional.
            ///
            /// - Remark: Generated from `#/components/schemas/Event/colorId`.
            public var colorId: Swift.String?
            /// - Remark: Generated from `#/components/schemas/Event/conferenceData`.
            public var conferenceData: Components.Schemas.ConferenceData?
            /// Creation time of the event (as a RFC3339 timestamp). Read-only.
            ///
            /// - Remark: Generated from `#/components/schemas/Event/created`.
            public var created: Foundation.Date?
            /// The creator of the event. Read-only.
            ///
            /// - Remark: Generated from `#/components/schemas/Event/creator`.
            public struct CreatorPayload: Codable, Hashable, Sendable {
                /// The creator's name, if available.
                ///
                /// - Remark: Generated from `#/components/schemas/Event/creator/displayName`.
                public var displayName: Swift.String?
                /// The creator's email address, if available.
                ///
                /// - Remark: Generated from `#/components/schemas/Event/creator/email`.
                public var email: Swift.String?
                /// The creator's Profile ID, if available.
                ///
                /// - Remark: Generated from `#/components/schemas/Event/creator/id`.
                public var id: Swift.String?
                /// Whether the creator corresponds to the calendar on which this copy of the event appears. Read-only. The default is False.
                ///
                /// - Remark: Generated from `#/components/schemas/Event/creator/self`.
                public var _self: Swift.Bool?
                /// Creates a new `CreatorPayload`.
                ///
                /// - Parameters:
                ///   - displayName: The creator's name, if available.
                ///   - email: The creator's email address, if available.
                ///   - id: The creator's Profile ID, if available.
                ///   - _self: Whether the creator corresponds to the calendar on which this copy of the event appears. Read-only. The default is False.
                public init(
                    displayName: Swift.String? = nil,
                    email: Swift.String? = nil,
                    id: Swift.String? = nil,
                    _self: Swift.Bool? = nil
                ) {
                    self.displayName = displayName
                    self.email = email
                    self.id = id
                    self._self = _self
                }
                public enum CodingKeys: String, CodingKey {
                    case displayName
                    case email
                    case id
                    case _self = "self"
                }
            }
            /// The creator of the event. Read-only.
            ///
            /// - Remark: Generated from `#/components/schemas/Event/creator`.
            public var creator: Components.Schemas.Event.CreatorPayload?
            /// Description of the event. Can contain HTML. Optional.
            ///
            /// - Remark: Generated from `#/components/schemas/Event/description`.
            public var description: Swift.String?
            /// - Remark: Generated from `#/components/schemas/Event/end`.
            public var end: Components.Schemas.EventDateTime?
            /// Whether the end time is actually unspecified. An end time is still provided for compatibility reasons, even if this attribute is set to True. The default is False.
            ///
            /// - Remark: Generated from `#/components/schemas/Event/endTimeUnspecified`.
            public var endTimeUnspecified: Swift.Bool?
            /// ETag of the resource.
            ///
            /// - Remark: Generated from `#/components/schemas/Event/etag`.
            public var etag: Swift.String?
            /// Specific type of the event. This cannot be modified after the event is created. Possible values are:  
            /// - "default" - A regular event or not further specified. 
            /// - "outOfOffice" - An out-of-office event. 
            /// - "focusTime" - A focus-time event. 
            /// - "workingLocation" - A working location event.  Currently, only "default " and "workingLocation" events can be created using the API. Extended support for other event types will be made available in later releases.
            ///
            /// - Remark: Generated from `#/components/schemas/Event/eventType`.
            public var eventType: Swift.String?
            /// Extended properties of the event.
            ///
            /// - Remark: Generated from `#/components/schemas/Event/extendedProperties`.
            public struct ExtendedPropertiesPayload: Codable, Hashable, Sendable {
                /// Properties that are private to the copy of the event that appears on this calendar.
                ///
                /// - Remark: Generated from `#/components/schemas/Event/extendedProperties/private`.
                public struct PrivatePayload: Codable, Hashable, Sendable {
                    /// A container of undocumented properties.
                    public var additionalProperties: [String: Swift.String]
                    /// Creates a new `PrivatePayload`.
                    ///
                    /// - Parameters:
                    ///   - additionalProperties: A container of undocumented properties.
                    public init(additionalProperties: [String: Swift.String] = .init()) {
                        self.additionalProperties = additionalProperties
                    }
                    public init(from decoder: any Decoder) throws {
                        additionalProperties = try decoder.decodeAdditionalProperties(knownKeys: [])
                    }
                    public func encode(to encoder: any Encoder) throws {
                        try encoder.encodeAdditionalProperties(additionalProperties)
                    }
                }
                /// Properties that are private to the copy of the event that appears on this calendar.
                ///
                /// - Remark: Generated from `#/components/schemas/Event/extendedProperties/private`.
                public var _private: Components.Schemas.Event.ExtendedPropertiesPayload.PrivatePayload?
                /// Properties that are shared between copies of the event on other attendees' calendars.
                ///
                /// - Remark: Generated from `#/components/schemas/Event/extendedProperties/shared`.
                public struct SharedPayload: Codable, Hashable, Sendable {
                    /// A container of undocumented properties.
                    public var additionalProperties: [String: Swift.String]
                    /// Creates a new `SharedPayload`.
                    ///
                    /// - Parameters:
                    ///   - additionalProperties: A container of undocumented properties.
                    public init(additionalProperties: [String: Swift.String] = .init()) {
                        self.additionalProperties = additionalProperties
                    }
                    public init(from decoder: any Decoder) throws {
                        additionalProperties = try decoder.decodeAdditionalProperties(knownKeys: [])
                    }
                    public func encode(to encoder: any Encoder) throws {
                        try encoder.encodeAdditionalProperties(additionalProperties)
                    }
                }
                /// Properties that are shared between copies of the event on other attendees' calendars.
                ///
                /// - Remark: Generated from `#/components/schemas/Event/extendedProperties/shared`.
                public var shared: Components.Schemas.Event.ExtendedPropertiesPayload.SharedPayload?
                /// Creates a new `ExtendedPropertiesPayload`.
                ///
                /// - Parameters:
                ///   - _private: Properties that are private to the copy of the event that appears on this calendar.
                ///   - shared: Properties that are shared between copies of the event on other attendees' calendars.
                public init(
                    _private: Components.Schemas.Event.ExtendedPropertiesPayload.PrivatePayload? = nil,
                    shared: Components.Schemas.Event.ExtendedPropertiesPayload.SharedPayload? = nil
                ) {
                    self._private = _private
                    self.shared = shared
                }
                public enum CodingKeys: String, CodingKey {
                    case _private = "private"
                    case shared
                }
            }
            /// Extended properties of the event.
            ///
            /// - Remark: Generated from `#/components/schemas/Event/extendedProperties`.
            public var extendedProperties: Components.Schemas.Event.ExtendedPropertiesPayload?
            /// - Remark: Generated from `#/components/schemas/Event/focusTimeProperties`.
            public var focusTimeProperties: Components.Schemas.EventFocusTimeProperties?
            /// A gadget that extends this event. Gadgets are deprecated; this structure is instead only used for returning birthday calendar metadata.
            ///
            /// - Remark: Generated from `#/components/schemas/Event/gadget`.
            public struct GadgetPayload: Codable, Hashable, Sendable {
                /// The gadget's display mode. Deprecated. Possible values are:  
                /// - "icon" - The gadget displays next to the event's title in the calendar view. 
                /// - "chip" - The gadget displays when the event is clicked.
                ///
                /// - Remark: Generated from `#/components/schemas/Event/gadget/display`.
                public var display: Swift.String?
                /// The gadget's height in pixels. The height must be an integer greater than 0. Optional. Deprecated.
                ///
                /// - Remark: Generated from `#/components/schemas/Event/gadget/height`.
                public var height: Swift.Int32?
                /// The gadget's icon URL. The URL scheme must be HTTPS. Deprecated.
                ///
                /// - Remark: Generated from `#/components/schemas/Event/gadget/iconLink`.
                public var iconLink: Swift.String?
                /// The gadget's URL. The URL scheme must be HTTPS. Deprecated.
                ///
                /// - Remark: Generated from `#/components/schemas/Event/gadget/link`.
                public var link: Swift.String?
                /// Preferences.
                ///
                /// - Remark: Generated from `#/components/schemas/Event/gadget/preferences`.
                public struct PreferencesPayload: Codable, Hashable, Sendable {
                    /// A container of undocumented properties.
                    public var additionalProperties: [String: Swift.String]
                    /// Creates a new `PreferencesPayload`.
                    ///
                    /// - Parameters:
                    ///   - additionalProperties: A container of undocumented properties.
                    public init(additionalProperties: [String: Swift.String] = .init()) {
                        self.additionalProperties = additionalProperties
                    }
                    public init(from decoder: any Decoder) throws {
                        additionalProperties = try decoder.decodeAdditionalProperties(knownKeys: [])
                    }
                    public func encode(to encoder: any Encoder) throws {
                        try encoder.encodeAdditionalProperties(additionalProperties)
                    }
                }
                /// Preferences.
                ///
                /// - Remark: Generated from `#/components/schemas/Event/gadget/preferences`.
                public var preferences: Components.Schemas.Event.GadgetPayload.PreferencesPayload?
                /// The gadget's title. Deprecated.
                ///
                /// - Remark: Generated from `#/components/schemas/Event/gadget/title`.
                public var title: Swift.String?
                /// The gadget's type. Deprecated.
                ///
                /// - Remark: Generated from `#/components/schemas/Event/gadget/type`.
                public var _type: Swift.String?
                /// The gadget's width in pixels. The width must be an integer greater than 0. Optional. Deprecated.
                ///
                /// - Remark: Generated from `#/components/schemas/Event/gadget/width`.
                public var width: Swift.Int32?
                /// Creates a new `GadgetPayload`.
                ///
                /// - Parameters:
                ///   - display: The gadget's display mode. Deprecated. Possible values are:  
                ///   - height: The gadget's height in pixels. The height must be an integer greater than 0. Optional. Deprecated.
                ///   - iconLink: The gadget's icon URL. The URL scheme must be HTTPS. Deprecated.
                ///   - link: The gadget's URL. The URL scheme must be HTTPS. Deprecated.
                ///   - preferences: Preferences.
                ///   - title: The gadget's title. Deprecated.
                ///   - _type: The gadget's type. Deprecated.
                ///   - width: The gadget's width in pixels. The width must be an integer greater than 0. Optional. Deprecated.
                public init(
                    display: Swift.String? = nil,
                    height: Swift.Int32? = nil,
                    iconLink: Swift.String? = nil,
                    link: Swift.String? = nil,
                    preferences: Components.Schemas.Event.GadgetPayload.PreferencesPayload? = nil,
                    title: Swift.String? = nil,
                    _type: Swift.String? = nil,
                    width: Swift.Int32? = nil
                ) {
                    self.display = display
                    self.height = height
                    self.iconLink = iconLink
                    self.link = link
                    self.preferences = preferences
                    self.title = title
                    self._type = _type
                    self.width = width
                }
                public enum CodingKeys: String, CodingKey {
                    case display
                    case height
                    case iconLink
                    case link
                    case preferences
                    case title
                    case _type = "type"
                    case width
                }
            }
            /// A gadget that extends this event. Gadgets are deprecated; this structure is instead only used for returning birthday calendar metadata.
            ///
            /// - Remark: Generated from `#/components/schemas/Event/gadget`.
            public var gadget: Components.Schemas.Event.GadgetPayload?
            /// Whether attendees other than the organizer can invite others to the event. Optional. The default is True.
            ///
            /// - Remark: Generated from `#/components/schemas/Event/guestsCanInviteOthers`.
            public var guestsCanInviteOthers: Swift.Bool?
            /// Whether attendees other than the organizer can modify the event. Optional. The default is False.
            ///
            /// - Remark: Generated from `#/components/schemas/Event/guestsCanModify`.
            public var guestsCanModify: Swift.Bool?
            /// Whether attendees other than the organizer can see who the event's attendees are. Optional. The default is True.
            ///
            /// - Remark: Generated from `#/components/schemas/Event/guestsCanSeeOtherGuests`.
            public var guestsCanSeeOtherGuests: Swift.Bool?
            /// An absolute link to the Google Hangout associated with this event. Read-only.
            ///
            /// - Remark: Generated from `#/components/schemas/Event/hangoutLink`.
            public var hangoutLink: Swift.String?
            /// An absolute link to this event in the Google Calendar Web UI. Read-only.
            ///
            /// - Remark: Generated from `#/components/schemas/Event/htmlLink`.
            public var htmlLink: Swift.String?
            /// Event unique identifier as defined in RFC5545. It is used to uniquely identify events accross calendaring systems and must be supplied when importing events via the import method.
            /// Note that the iCalUID and the id are not identical and only one of them should be supplied at event creation time. One difference in their semantics is that in recurring events, all occurrences of one event have different ids while they all share the same iCalUIDs. To retrieve an event using its iCalUID, call the events.list method using the iCalUID parameter. To retrieve an event using its id, call the events.get method.
            ///
            /// - Remark: Generated from `#/components/schemas/Event/iCalUID`.
            public var iCalUID: Swift.String?
            /// Opaque identifier of the event. When creating new single or recurring events, you can specify their IDs. Provided IDs must follow these rules:  
            /// - characters allowed in the ID are those used in base32hex encoding, i.e. lowercase letters a-v and digits 0-9, see section 3.1.2 in RFC2938 
            /// - the length of the ID must be between 5 and 1024 characters 
            /// - the ID must be unique per calendar  Due to the globally distributed nature of the system, we cannot guarantee that ID collisions will be detected at event creation time. To minimize the risk of collisions we recommend using an established UUID algorithm such as one described in RFC4122.
            /// If you do not specify an ID, it will be automatically generated by the server.
            /// Note that the icalUID and the id are not identical and only one of them should be supplied at event creation time. One difference in their semantics is that in recurring events, all occurrences of one event have different ids while they all share the same icalUIDs.
            ///
            /// - Remark: Generated from `#/components/schemas/Event/id`.
            public var id: Swift.String?
            /// Type of the resource ("calendar#event").
            ///
            /// - Remark: Generated from `#/components/schemas/Event/kind`.
            public var kind: Swift.String?
            /// Geographic location of the event as free-form text. Optional.
            ///
            /// - Remark: Generated from `#/components/schemas/Event/location`.
            public var location: Swift.String?
            /// Whether this is a locked event copy where no changes can be made to the main event fields "summary", "description", "location", "start", "end" or "recurrence". The default is False. Read-Only.
            ///
            /// - Remark: Generated from `#/components/schemas/Event/locked`.
            public var locked: Swift.Bool?
            /// The organizer of the event. If the organizer is also an attendee, this is indicated with a separate entry in attendees with the organizer field set to True. To change the organizer, use the move operation. Read-only, except when importing an event.
            ///
            /// - Remark: Generated from `#/components/schemas/Event/organizer`.
            public struct OrganizerPayload: Codable, Hashable, Sendable {
                /// The organizer's name, if available.
                ///
                /// - Remark: Generated from `#/components/schemas/Event/organizer/displayName`.
                public var displayName: Swift.String?
                /// The organizer's email address, if available. It must be a valid email address as per RFC5322.
                ///
                /// - Remark: Generated from `#/components/schemas/Event/organizer/email`.
                public var email: Swift.String?
                /// The organizer's Profile ID, if available.
                ///
                /// - Remark: Generated from `#/components/schemas/Event/organizer/id`.
                public var id: Swift.String?
                /// Whether the organizer corresponds to the calendar on which this copy of the event appears. Read-only. The default is False.
                ///
                /// - Remark: Generated from `#/components/schemas/Event/organizer/self`.
                public var _self: Swift.Bool?
                /// Creates a new `OrganizerPayload`.
                ///
                /// - Parameters:
                ///   - displayName: The organizer's name, if available.
                ///   - email: The organizer's email address, if available. It must be a valid email address as per RFC5322.
                ///   - id: The organizer's Profile ID, if available.
                ///   - _self: Whether the organizer corresponds to the calendar on which this copy of the event appears. Read-only. The default is False.
                public init(
                    displayName: Swift.String? = nil,
                    email: Swift.String? = nil,
                    id: Swift.String? = nil,
                    _self: Swift.Bool? = nil
                ) {
                    self.displayName = displayName
                    self.email = email
                    self.id = id
                    self._self = _self
                }
                public enum CodingKeys: String, CodingKey {
                    case displayName
                    case email
                    case id
                    case _self = "self"
                }
            }
            /// The organizer of the event. If the organizer is also an attendee, this is indicated with a separate entry in attendees with the organizer field set to True. To change the organizer, use the move operation. Read-only, except when importing an event.
            ///
            /// - Remark: Generated from `#/components/schemas/Event/organizer`.
            public var organizer: Components.Schemas.Event.OrganizerPayload?
            /// - Remark: Generated from `#/components/schemas/Event/originalStartTime`.
            public var originalStartTime: Components.Schemas.EventDateTime?
            /// - Remark: Generated from `#/components/schemas/Event/outOfOfficeProperties`.
            public var outOfOfficeProperties: Components.Schemas.EventOutOfOfficeProperties?
            /// If set to True, Event propagation is disabled. Note that it is not the same thing as Private event properties. Optional. Immutable. The default is False.
            ///
            /// - Remark: Generated from `#/components/schemas/Event/privateCopy`.
            public var privateCopy: Swift.Bool?
            /// List of RRULE, EXRULE, RDATE and EXDATE lines for a recurring event, as specified in RFC5545. Note that DTSTART and DTEND lines are not allowed in this field; event start and end times are specified in the start and end fields. This field is omitted for single events or instances of recurring events.
            ///
            /// - Remark: Generated from `#/components/schemas/Event/recurrence`.
            public var recurrence: [Swift.String]?
            /// For an instance of a recurring event, this is the id of the recurring event to which this instance belongs. Immutable.
            ///
            /// - Remark: Generated from `#/components/schemas/Event/recurringEventId`.
            public var recurringEventId: Swift.String?
            /// Information about the event's reminders for the authenticated user.
            ///
            /// - Remark: Generated from `#/components/schemas/Event/reminders`.
            public struct RemindersPayload: Codable, Hashable, Sendable {
                /// If the event doesn't use the default reminders, this lists the reminders specific to the event, or, if not set, indicates that no reminders are set for this event. The maximum number of override reminders is 5.
                ///
                /// - Remark: Generated from `#/components/schemas/Event/reminders/overrides`.
                public var overrides: [Components.Schemas.EventReminder]?
                /// Whether the default reminders of the calendar apply to the event.
                ///
                /// - Remark: Generated from `#/components/schemas/Event/reminders/useDefault`.
                public var useDefault: Swift.Bool?
                /// Creates a new `RemindersPayload`.
                ///
                /// - Parameters:
                ///   - overrides: If the event doesn't use the default reminders, this lists the reminders specific to the event, or, if not set, indicates that no reminders are set for this event. The maximum number of override reminders is 5.
                ///   - useDefault: Whether the default reminders of the calendar apply to the event.
                public init(
                    overrides: [Components.Schemas.EventReminder]? = nil,
                    useDefault: Swift.Bool? = nil
                ) {
                    self.overrides = overrides
                    self.useDefault = useDefault
                }
                public enum CodingKeys: String, CodingKey {
                    case overrides
                    case useDefault
                }
            }
            /// Information about the event's reminders for the authenticated user.
            ///
            /// - Remark: Generated from `#/components/schemas/Event/reminders`.
            public var reminders: Components.Schemas.Event.RemindersPayload?
            /// Sequence number as per iCalendar.
            ///
            /// - Remark: Generated from `#/components/schemas/Event/sequence`.
            public var sequence: Swift.Int32?
            /// Source from which the event was created. For example, a web page, an email message or any document identifiable by an URL with HTTP or HTTPS scheme. Can only be seen or modified by the creator of the event.
            ///
            /// - Remark: Generated from `#/components/schemas/Event/source`.
            public struct SourcePayload: Codable, Hashable, Sendable {
                /// Title of the source; for example a title of a web page or an email subject.
                ///
                /// - Remark: Generated from `#/components/schemas/Event/source/title`.
                public var title: Swift.String?
                /// URL of the source pointing to a resource. The URL scheme must be HTTP or HTTPS.
                ///
                /// - Remark: Generated from `#/components/schemas/Event/source/url`.
                public var url: Swift.String?
                /// Creates a new `SourcePayload`.
                ///
                /// - Parameters:
                ///   - title: Title of the source; for example a title of a web page or an email subject.
                ///   - url: URL of the source pointing to a resource. The URL scheme must be HTTP or HTTPS.
                public init(
                    title: Swift.String? = nil,
                    url: Swift.String? = nil
                ) {
                    self.title = title
                    self.url = url
                }
                public enum CodingKeys: String, CodingKey {
                    case title
                    case url
                }
            }
            /// Source from which the event was created. For example, a web page, an email message or any document identifiable by an URL with HTTP or HTTPS scheme. Can only be seen or modified by the creator of the event.
            ///
            /// - Remark: Generated from `#/components/schemas/Event/source`.
            public var source: Components.Schemas.Event.SourcePayload?
            /// - Remark: Generated from `#/components/schemas/Event/start`.
            public var start: Components.Schemas.EventDateTime?
            /// Status of the event. Optional. Possible values are:  
            /// - "confirmed" - The event is confirmed. This is the default status. 
            /// - "tentative" - The event is tentatively confirmed. 
            /// - "cancelled" - The event is cancelled (deleted). The list method returns cancelled events only on incremental sync (when syncToken or updatedMin are specified) or if the showDeleted flag is set to true. The get method always returns them.
            /// A cancelled status represents two different states depending on the event type:  
            /// - Cancelled exceptions of an uncancelled recurring event indicate that this instance should no longer be presented to the user. Clients should store these events for the lifetime of the parent recurring event.
            /// Cancelled exceptions are only guaranteed to have values for the id, recurringEventId and originalStartTime fields populated. The other fields might be empty.  
            /// - All other cancelled events represent deleted events. Clients should remove their locally synced copies. Such cancelled events will eventually disappear, so do not rely on them being available indefinitely.
            /// Deleted events are only guaranteed to have the id field populated.   On the organizer's calendar, cancelled events continue to expose event details (summary, location, etc.) so that they can be restored (undeleted). Similarly, the events to which the user was invited and that they manually removed continue to provide details. However, incremental sync requests with showDeleted set to false will not return these details.
            /// If an event changes its organizer (for example via the move operation) and the original organizer is not on the attendee list, it will leave behind a cancelled event where only the id field is guaranteed to be populated.
            ///
            /// - Remark: Generated from `#/components/schemas/Event/status`.
            public var status: Swift.String?
            /// Title of the event.
            ///
            /// - Remark: Generated from `#/components/schemas/Event/summary`.
            public var summary: Swift.String?
            /// Whether the event blocks time on the calendar. Optional. Possible values are:  
            /// - "opaque" - Default value. The event does block time on the calendar. This is equivalent to setting Show me as to Busy in the Calendar UI. 
            /// - "transparent" - The event does not block time on the calendar. This is equivalent to setting Show me as to Available in the Calendar UI.
            ///
            /// - Remark: Generated from `#/components/schemas/Event/transparency`.
            public var transparency: Swift.String?
            /// Last modification time of the event (as a RFC3339 timestamp). Read-only.
            ///
            /// - Remark: Generated from `#/components/schemas/Event/updated`.
            public var updated: Foundation.Date?
            /// Visibility of the event. Optional. Possible values are:  
            /// - "default" - Uses the default visibility for events on the calendar. This is the default value. 
            /// - "public" - The event is public and event details are visible to all readers of the calendar. 
            /// - "private" - The event is private and only event attendees may view event details. 
            /// - "confidential" - The event is private. This value is provided for compatibility reasons.
            ///
            /// - Remark: Generated from `#/components/schemas/Event/visibility`.
            public var visibility: Swift.String?
            /// - Remark: Generated from `#/components/schemas/Event/workingLocationProperties`.
            public var workingLocationProperties: Components.Schemas.EventWorkingLocationProperties?
            /// Creates a new `Event`.
            ///
            /// - Parameters:
            ///   - anyoneCanAddSelf: Whether anyone can invite themselves to the event (deprecated). Optional. The default is False.
            ///   - attachments: File attachments for the event.
            ///   - attendees: The attendees of the event. See the Events with attendees guide for more information on scheduling events with other calendar users. Service accounts need to use domain-wide delegation of authority to populate the attendee list.
            ///   - attendeesOmitted: Whether attendees may have been omitted from the event's representation. When retrieving an event, this may be due to a restriction specified by the maxAttendee query parameter. When updating an event, this can be used to only update the participant's response. Optional. The default is False.
            ///   - colorId: The color of the event. This is an ID referring to an entry in the event section of the colors definition (see the  colors endpoint). Optional.
            ///   - conferenceData:
            ///   - created: Creation time of the event (as a RFC3339 timestamp). Read-only.
            ///   - creator: The creator of the event. Read-only.
            ///   - description: Description of the event. Can contain HTML. Optional.
            ///   - end:
            ///   - endTimeUnspecified: Whether the end time is actually unspecified. An end time is still provided for compatibility reasons, even if this attribute is set to True. The default is False.
            ///   - etag: ETag of the resource.
            ///   - eventType: Specific type of the event. This cannot be modified after the event is created. Possible values are:  
            ///   - extendedProperties: Extended properties of the event.
            ///   - focusTimeProperties:
            ///   - gadget: A gadget that extends this event. Gadgets are deprecated; this structure is instead only used for returning birthday calendar metadata.
            ///   - guestsCanInviteOthers: Whether attendees other than the organizer can invite others to the event. Optional. The default is True.
            ///   - guestsCanModify: Whether attendees other than the organizer can modify the event. Optional. The default is False.
            ///   - guestsCanSeeOtherGuests: Whether attendees other than the organizer can see who the event's attendees are. Optional. The default is True.
            ///   - hangoutLink: An absolute link to the Google Hangout associated with this event. Read-only.
            ///   - htmlLink: An absolute link to this event in the Google Calendar Web UI. Read-only.
            ///   - iCalUID: Event unique identifier as defined in RFC5545. It is used to uniquely identify events accross calendaring systems and must be supplied when importing events via the import method.
            ///   - id: Opaque identifier of the event. When creating new single or recurring events, you can specify their IDs. Provided IDs must follow these rules:  
            ///   - kind: Type of the resource ("calendar#event").
            ///   - location: Geographic location of the event as free-form text. Optional.
            ///   - locked: Whether this is a locked event copy where no changes can be made to the main event fields "summary", "description", "location", "start", "end" or "recurrence". The default is False. Read-Only.
            ///   - organizer: The organizer of the event. If the organizer is also an attendee, this is indicated with a separate entry in attendees with the organizer field set to True. To change the organizer, use the move operation. Read-only, except when importing an event.
            ///   - originalStartTime:
            ///   - outOfOfficeProperties:
            ///   - privateCopy: If set to True, Event propagation is disabled. Note that it is not the same thing as Private event properties. Optional. Immutable. The default is False.
            ///   - recurrence: List of RRULE, EXRULE, RDATE and EXDATE lines for a recurring event, as specified in RFC5545. Note that DTSTART and DTEND lines are not allowed in this field; event start and end times are specified in the start and end fields. This field is omitted for single events or instances of recurring events.
            ///   - recurringEventId: For an instance of a recurring event, this is the id of the recurring event to which this instance belongs. Immutable.
            ///   - reminders: Information about the event's reminders for the authenticated user.
            ///   - sequence: Sequence number as per iCalendar.
            ///   - source: Source from which the event was created. For example, a web page, an email message or any document identifiable by an URL with HTTP or HTTPS scheme. Can only be seen or modified by the creator of the event.
            ///   - start:
            ///   - status: Status of the event. Optional. Possible values are:  
            ///   - summary: Title of the event.
            ///   - transparency: Whether the event blocks time on the calendar. Optional. Possible values are:  
            ///   - updated: Last modification time of the event (as a RFC3339 timestamp). Read-only.
            ///   - visibility: Visibility of the event. Optional. Possible values are:  
            ///   - workingLocationProperties:
            public init(
                anyoneCanAddSelf: Swift.Bool? = nil,
                attachments: [Components.Schemas.EventAttachment]? = nil,
                attendees: [Components.Schemas.EventAttendee]? = nil,
                attendeesOmitted: Swift.Bool? = nil,
                colorId: Swift.String? = nil,
                conferenceData: Components.Schemas.ConferenceData? = nil,
                created: Foundation.Date? = nil,
                creator: Components.Schemas.Event.CreatorPayload? = nil,
                description: Swift.String? = nil,
                end: Components.Schemas.EventDateTime? = nil,
                endTimeUnspecified: Swift.Bool? = nil,
                etag: Swift.String? = nil,
                eventType: Swift.String? = nil,
                extendedProperties: Components.Schemas.Event.ExtendedPropertiesPayload? = nil,
                focusTimeProperties: Components.Schemas.EventFocusTimeProperties? = nil,
                gadget: Components.Schemas.Event.GadgetPayload? = nil,
                guestsCanInviteOthers: Swift.Bool? = nil,
                guestsCanModify: Swift.Bool? = nil,
                guestsCanSeeOtherGuests: Swift.Bool? = nil,
                hangoutLink: Swift.String? = nil,
                htmlLink: Swift.String? = nil,
                iCalUID: Swift.String? = nil,
                id: Swift.String? = nil,
                kind: Swift.String? = nil,
                location: Swift.String? = nil,
                locked: Swift.Bool? = nil,
                organizer: Components.Schemas.Event.OrganizerPayload? = nil,
                originalStartTime: Components.Schemas.EventDateTime? = nil,
                outOfOfficeProperties: Components.Schemas.EventOutOfOfficeProperties? = nil,
                privateCopy: Swift.Bool? = nil,
                recurrence: [Swift.String]? = nil,
                recurringEventId: Swift.String? = nil,
                reminders: Components.Schemas.Event.RemindersPayload? = nil,
                sequence: Swift.Int32? = nil,
                source: Components.Schemas.Event.SourcePayload? = nil,
                start: Components.Schemas.EventDateTime? = nil,
                status: Swift.String? = nil,
                summary: Swift.String? = nil,
                transparency: Swift.String? = nil,
                updated: Foundation.Date? = nil,
                visibility: Swift.String? = nil,
                workingLocationProperties: Components.Schemas.EventWorkingLocationProperties? = nil
            ) {
                self.anyoneCanAddSelf = anyoneCanAddSelf
                self.attachments = attachments
                self.attendees = attendees
                self.attendeesOmitted = attendeesOmitted
                self.colorId = colorId
                self.conferenceData = conferenceData
                self.created = created
                self.creator = creator
                self.description = description
                self.end = end
                self.endTimeUnspecified = endTimeUnspecified
                self.etag = etag
                self.eventType = eventType
                self.extendedProperties = extendedProperties
                self.focusTimeProperties = focusTimeProperties
                self.gadget = gadget
                self.guestsCanInviteOthers = guestsCanInviteOthers
                self.guestsCanModify = guestsCanModify
                self.guestsCanSeeOtherGuests = guestsCanSeeOtherGuests
                self.hangoutLink = hangoutLink
                self.htmlLink = htmlLink
                self.iCalUID = iCalUID
                self.id = id
                self.kind = kind
                self.location = location
                self.locked = locked
                self.organizer = organizer
                self.originalStartTime = originalStartTime
                self.outOfOfficeProperties = outOfOfficeProperties
                self.privateCopy = privateCopy
                self.recurrence = recurrence
                self.recurringEventId = recurringEventId
                self.reminders = reminders
                self.sequence = sequence
                self.source = source
                self.start = start
                self.status = status
                self.summary = summary
                self.transparency = transparency
                self.updated = updated
                self.visibility = visibility
                self.workingLocationProperties = workingLocationProperties
            }
            public enum CodingKeys: String, CodingKey {
                case anyoneCanAddSelf
                case attachments
                case attendees
                case attendeesOmitted
                case colorId
                case conferenceData
                case created
                case creator
                case description
                case end
                case endTimeUnspecified
                case etag
                case eventType
                case extendedProperties
                case focusTimeProperties
                case gadget
                case guestsCanInviteOthers
                case guestsCanModify
                case guestsCanSeeOtherGuests
                case hangoutLink
                case htmlLink
                case iCalUID
                case id
                case kind
                case location
                case locked
                case organizer
                case originalStartTime
                case outOfOfficeProperties
                case privateCopy
                case recurrence
                case recurringEventId
                case reminders
                case sequence
                case source
                case start
                case status
                case summary
                case transparency
                case updated
                case visibility
                case workingLocationProperties
            }
        }
        /// - Remark: Generated from `#/components/schemas/EventAttachment`.
        public struct EventAttachment: Codable, Hashable, Sendable {
            /// ID of the attached file. Read-only.
            /// For Google Drive files, this is the ID of the corresponding Files resource entry in the Drive API.
            ///
            /// - Remark: Generated from `#/components/schemas/EventAttachment/fileId`.
            public var fileId: Swift.String?
            /// URL link to the attachment.
            /// For adding Google Drive file attachments use the same format as in alternateLink property of the Files resource in the Drive API.
            /// Required when adding an attachment.
            ///
            /// - Remark: Generated from `#/components/schemas/EventAttachment/fileUrl`.
            public var fileUrl: Swift.String?
            /// URL link to the attachment's icon. This field can only be modified for custom third-party attachments.
            ///
            /// - Remark: Generated from `#/components/schemas/EventAttachment/iconLink`.
            public var iconLink: Swift.String?
            /// Internet media type (MIME type) of the attachment.
            ///
            /// - Remark: Generated from `#/components/schemas/EventAttachment/mimeType`.
            public var mimeType: Swift.String?
            /// Attachment title.
            ///
            /// - Remark: Generated from `#/components/schemas/EventAttachment/title`.
            public var title: Swift.String?
            /// Creates a new `EventAttachment`.
            ///
            /// - Parameters:
            ///   - fileId: ID of the attached file. Read-only.
            ///   - fileUrl: URL link to the attachment.
            ///   - iconLink: URL link to the attachment's icon. This field can only be modified for custom third-party attachments.
            ///   - mimeType: Internet media type (MIME type) of the attachment.
            ///   - title: Attachment title.
            public init(
                fileId: Swift.String? = nil,
                fileUrl: Swift.String? = nil,
                iconLink: Swift.String? = nil,
                mimeType: Swift.String? = nil,
                title: Swift.String? = nil
            ) {
                self.fileId = fileId
                self.fileUrl = fileUrl
                self.iconLink = iconLink
                self.mimeType = mimeType
                self.title = title
            }
            public enum CodingKeys: String, CodingKey {
                case fileId
                case fileUrl
                case iconLink
                case mimeType
                case title
            }
        }
        /// - Remark: Generated from `#/components/schemas/EventAttendee`.
        public struct EventAttendee: Codable, Hashable, Sendable {
            /// Number of additional guests. Optional. The default is 0.
            ///
            /// - Remark: Generated from `#/components/schemas/EventAttendee/additionalGuests`.
            public var additionalGuests: Swift.Int32?
            /// The attendee's response comment. Optional.
            ///
            /// - Remark: Generated from `#/components/schemas/EventAttendee/comment`.
            public var comment: Swift.String?
            /// The attendee's name, if available. Optional.
            ///
            /// - Remark: Generated from `#/components/schemas/EventAttendee/displayName`.
            public var displayName: Swift.String?
            /// The attendee's email address, if available. This field must be present when adding an attendee. It must be a valid email address as per RFC5322.
            /// Required when adding an attendee.
            ///
            /// - Remark: Generated from `#/components/schemas/EventAttendee/email`.
            public var email: Swift.String?
            /// The attendee's Profile ID, if available.
            ///
            /// - Remark: Generated from `#/components/schemas/EventAttendee/id`.
            public var id: Swift.String?
            /// Whether this is an optional attendee. Optional. The default is False.
            ///
            /// - Remark: Generated from `#/components/schemas/EventAttendee/optional`.
            public var optional: Swift.Bool?
            /// Whether the attendee is the organizer of the event. Read-only. The default is False.
            ///
            /// - Remark: Generated from `#/components/schemas/EventAttendee/organizer`.
            public var organizer: Swift.Bool?
            /// Whether the attendee is a resource. Can only be set when the attendee is added to the event for the first time. Subsequent modifications are ignored. Optional. The default is False.
            ///
            /// - Remark: Generated from `#/components/schemas/EventAttendee/resource`.
            public var resource: Swift.Bool?
            /// The attendee's response status. Possible values are:  
            /// - "needsAction" - The attendee has not responded to the invitation (recommended for new events). 
            /// - "declined" - The attendee has declined the invitation. 
            /// - "tentative" - The attendee has tentatively accepted the invitation. 
            /// - "accepted" - The attendee has accepted the invitation.  Warning: If you add an event using the values declined, tentative, or accepted, attendees with the "Add invitations to my calendar" setting set to "When I respond to invitation in email" won't see an event on their calendar unless they choose to change their invitation response in the event invitation email.
            ///
            /// - Remark: Generated from `#/components/schemas/EventAttendee/responseStatus`.
            public var responseStatus: Swift.String?
            /// Whether this entry represents the calendar on which this copy of the event appears. Read-only. The default is False.
            ///
            /// - Remark: Generated from `#/components/schemas/EventAttendee/self`.
            public var _self: Swift.Bool?
            /// Creates a new `EventAttendee`.
            ///
            /// - Parameters:
            ///   - additionalGuests: Number of additional guests. Optional. The default is 0.
            ///   - comment: The attendee's response comment. Optional.
            ///   - displayName: The attendee's name, if available. Optional.
            ///   - email: The attendee's email address, if available. This field must be present when adding an attendee. It must be a valid email address as per RFC5322.
            ///   - id: The attendee's Profile ID, if available.
            ///   - optional: Whether this is an optional attendee. Optional. The default is False.
            ///   - organizer: Whether the attendee is the organizer of the event. Read-only. The default is False.
            ///   - resource: Whether the attendee is a resource. Can only be set when the attendee is added to the event for the first time. Subsequent modifications are ignored. Optional. The default is False.
            ///   - responseStatus: The attendee's response status. Possible values are:  
            ///   - _self: Whether this entry represents the calendar on which this copy of the event appears. Read-only. The default is False.
            public init(
                additionalGuests: Swift.Int32? = nil,
                comment: Swift.String? = nil,
                displayName: Swift.String? = nil,
                email: Swift.String? = nil,
                id: Swift.String? = nil,
                optional: Swift.Bool? = nil,
                organizer: Swift.Bool? = nil,
                resource: Swift.Bool? = nil,
                responseStatus: Swift.String? = nil,
                _self: Swift.Bool? = nil
            ) {
                self.additionalGuests = additionalGuests
                self.comment = comment
                self.displayName = displayName
                self.email = email
                self.id = id
                self.optional = optional
                self.organizer = organizer
                self.resource = resource
                self.responseStatus = responseStatus
                self._self = _self
            }
            public enum CodingKeys: String, CodingKey {
                case additionalGuests
                case comment
                case displayName
                case email
                case id
                case optional
                case organizer
                case resource
                case responseStatus
                case _self = "self"
            }
        }
        /// - Remark: Generated from `#/components/schemas/EventDateTime`.
        public struct EventDateTime: Codable, Hashable, Sendable {
            /// The date, in the format "yyyy-mm-dd", if this is an all-day event.
            ///
            /// - Remark: Generated from `#/components/schemas/EventDateTime/date`.
            public var date: Swift.String?
            /// The time, as a combined date-time value (formatted according to RFC3339). A time zone offset is required unless a time zone is explicitly specified in timeZone.
            ///
            /// - Remark: Generated from `#/components/schemas/EventDateTime/dateTime`.
            public var dateTime: Foundation.Date?
            /// The time zone in which the time is specified. (Formatted as an IANA Time Zone Database name, e.g. "Europe/Zurich".) For recurring events this field is required and specifies the time zone in which the recurrence is expanded. For single events this field is optional and indicates a custom time zone for the event start/end.
            ///
            /// - Remark: Generated from `#/components/schemas/EventDateTime/timeZone`.
            public var timeZone: Swift.String?
            /// Creates a new `EventDateTime`.
            ///
            /// - Parameters:
            ///   - date: The date, in the format "yyyy-mm-dd", if this is an all-day event.
            ///   - dateTime: The time, as a combined date-time value (formatted according to RFC3339). A time zone offset is required unless a time zone is explicitly specified in timeZone.
            ///   - timeZone: The time zone in which the time is specified. (Formatted as an IANA Time Zone Database name, e.g. "Europe/Zurich".) For recurring events this field is required and specifies the time zone in which the recurrence is expanded. For single events this field is optional and indicates a custom time zone for the event start/end.
            public init(
                date: Swift.String? = nil,
                dateTime: Foundation.Date? = nil,
                timeZone: Swift.String? = nil
            ) {
                self.date = date
                self.dateTime = dateTime
                self.timeZone = timeZone
            }
            public enum CodingKeys: String, CodingKey {
                case date
                case dateTime
                case timeZone
            }
        }
        /// - Remark: Generated from `#/components/schemas/EventFocusTimeProperties`.
        public struct EventFocusTimeProperties: Codable, Hashable, Sendable {
            /// Whether to decline meeting invitations which overlap Focus Time events. Valid values are declineNone, meaning that no meeting invitations are declined; declineAllConflictingInvitations, meaning that all conflicting meeting invitations that conflict with the event are declined; and declineOnlyNewConflictingInvitations, meaning that only new conflicting meeting invitations which arrive while the Focus Time event is present are to be declined.
            ///
            /// - Remark: Generated from `#/components/schemas/EventFocusTimeProperties/autoDeclineMode`.
            public var autoDeclineMode: Swift.String?
            /// The status to mark the user in Chat and related products. This can be available or doNotDisturb.
            ///
            /// - Remark: Generated from `#/components/schemas/EventFocusTimeProperties/chatStatus`.
            public var chatStatus: Swift.String?
            /// Response message to set if an existing event or new invitation is automatically declined by Calendar.
            ///
            /// - Remark: Generated from `#/components/schemas/EventFocusTimeProperties/declineMessage`.
            public var declineMessage: Swift.String?
            /// Creates a new `EventFocusTimeProperties`.
            ///
            /// - Parameters:
            ///   - autoDeclineMode: Whether to decline meeting invitations which overlap Focus Time events. Valid values are declineNone, meaning that no meeting invitations are declined; declineAllConflictingInvitations, meaning that all conflicting meeting invitations that conflict with the event are declined; and declineOnlyNewConflictingInvitations, meaning that only new conflicting meeting invitations which arrive while the Focus Time event is present are to be declined.
            ///   - chatStatus: The status to mark the user in Chat and related products. This can be available or doNotDisturb.
            ///   - declineMessage: Response message to set if an existing event or new invitation is automatically declined by Calendar.
            public init(
                autoDeclineMode: Swift.String? = nil,
                chatStatus: Swift.String? = nil,
                declineMessage: Swift.String? = nil
            ) {
                self.autoDeclineMode = autoDeclineMode
                self.chatStatus = chatStatus
                self.declineMessage = declineMessage
            }
            public enum CodingKeys: String, CodingKey {
                case autoDeclineMode
                case chatStatus
                case declineMessage
            }
        }
        /// - Remark: Generated from `#/components/schemas/EventOutOfOfficeProperties`.
        public struct EventOutOfOfficeProperties: Codable, Hashable, Sendable {
            /// Whether to decline meeting invitations which overlap Out of office events. Valid values are declineNone, meaning that no meeting invitations are declined; declineAllConflictingInvitations, meaning that all conflicting meeting invitations that conflict with the event are declined; and declineOnlyNewConflictingInvitations, meaning that only new conflicting meeting invitations which arrive while the Out of office event is present are to be declined.
            ///
            /// - Remark: Generated from `#/components/schemas/EventOutOfOfficeProperties/autoDeclineMode`.
            public var autoDeclineMode: Swift.String?
            /// Response message to set if an existing event or new invitation is automatically declined by Calendar.
            ///
            /// - Remark: Generated from `#/components/schemas/EventOutOfOfficeProperties/declineMessage`.
            public var declineMessage: Swift.String?
            /// Creates a new `EventOutOfOfficeProperties`.
            ///
            /// - Parameters:
            ///   - autoDeclineMode: Whether to decline meeting invitations which overlap Out of office events. Valid values are declineNone, meaning that no meeting invitations are declined; declineAllConflictingInvitations, meaning that all conflicting meeting invitations that conflict with the event are declined; and declineOnlyNewConflictingInvitations, meaning that only new conflicting meeting invitations which arrive while the Out of office event is present are to be declined.
            ///   - declineMessage: Response message to set if an existing event or new invitation is automatically declined by Calendar.
            public init(
                autoDeclineMode: Swift.String? = nil,
                declineMessage: Swift.String? = nil
            ) {
                self.autoDeclineMode = autoDeclineMode
                self.declineMessage = declineMessage
            }
            public enum CodingKeys: String, CodingKey {
                case autoDeclineMode
                case declineMessage
            }
        }
        /// - Remark: Generated from `#/components/schemas/EventReminder`.
        public struct EventReminder: Codable, Hashable, Sendable {
            /// The method used by this reminder. Possible values are:  
            /// - "email" - Reminders are sent via email. 
            /// - "popup" - Reminders are sent via a UI popup.  
            /// Required when adding a reminder.
            ///
            /// - Remark: Generated from `#/components/schemas/EventReminder/method`.
            public var method: Swift.String?
            /// Number of minutes before the start of the event when the reminder should trigger. Valid values are between 0 and 40320 (4 weeks in minutes).
            /// Required when adding a reminder.
            ///
            /// - Remark: Generated from `#/components/schemas/EventReminder/minutes`.
            public var minutes: Swift.Int32?
            /// Creates a new `EventReminder`.
            ///
            /// - Parameters:
            ///   - method: The method used by this reminder. Possible values are:  
            ///   - minutes: Number of minutes before the start of the event when the reminder should trigger. Valid values are between 0 and 40320 (4 weeks in minutes).
            public init(
                method: Swift.String? = nil,
                minutes: Swift.Int32? = nil
            ) {
                self.method = method
                self.minutes = minutes
            }
            public enum CodingKeys: String, CodingKey {
                case method
                case minutes
            }
        }
        /// - Remark: Generated from `#/components/schemas/EventWorkingLocationProperties`.
        public struct EventWorkingLocationProperties: Codable, Hashable, Sendable {
            /// If present, specifies that the user is working from a custom location.
            ///
            /// - Remark: Generated from `#/components/schemas/EventWorkingLocationProperties/customLocation`.
            public struct CustomLocationPayload: Codable, Hashable, Sendable {
                /// An optional extra label for additional information.
                ///
                /// - Remark: Generated from `#/components/schemas/EventWorkingLocationProperties/customLocation/label`.
                public var label: Swift.String?
                /// Creates a new `CustomLocationPayload`.
                ///
                /// - Parameters:
                ///   - label: An optional extra label for additional information.
                public init(label: Swift.String? = nil) {
                    self.label = label
                }
                public enum CodingKeys: String, CodingKey {
                    case label
                }
            }
            /// If present, specifies that the user is working from a custom location.
            ///
            /// - Remark: Generated from `#/components/schemas/EventWorkingLocationProperties/customLocation`.
            public var customLocation: Components.Schemas.EventWorkingLocationProperties.CustomLocationPayload?
            /// If present, specifies that the user is working at home.
            ///
            /// - Remark: Generated from `#/components/schemas/EventWorkingLocationProperties/homeOffice`.
            public var homeOffice: OpenAPIRuntime.OpenAPIValueContainer?
            /// If present, specifies that the user is working from an office.
            ///
            /// - Remark: Generated from `#/components/schemas/EventWorkingLocationProperties/officeLocation`.
            public struct OfficeLocationPayload: Codable, Hashable, Sendable {
                /// An optional building identifier. This should reference a building ID in the organization's Resources database.
                ///
                /// - Remark: Generated from `#/components/schemas/EventWorkingLocationProperties/officeLocation/buildingId`.
                public var buildingId: Swift.String?
                /// An optional desk identifier.
                ///
                /// - Remark: Generated from `#/components/schemas/EventWorkingLocationProperties/officeLocation/deskId`.
                public var deskId: Swift.String?
                /// An optional floor identifier.
                ///
                /// - Remark: Generated from `#/components/schemas/EventWorkingLocationProperties/officeLocation/floorId`.
                public var floorId: Swift.String?
                /// An optional floor section identifier.
                ///
                /// - Remark: Generated from `#/components/schemas/EventWorkingLocationProperties/officeLocation/floorSectionId`.
                public var floorSectionId: Swift.String?
                /// The office name that's displayed in Calendar Web and Mobile clients. We recommend you reference a building name in the organization's Resources database.
                ///
                /// - Remark: Generated from `#/components/schemas/EventWorkingLocationProperties/officeLocation/label`.
                public var label: Swift.String?
                /// Creates a new `OfficeLocationPayload`.
                ///
                /// - Parameters:
                ///   - buildingId: An optional building identifier. This should reference a building ID in the organization's Resources database.
                ///   - deskId: An optional desk identifier.
                ///   - floorId: An optional floor identifier.
                ///   - floorSectionId: An optional floor section identifier.
                ///   - label: The office name that's displayed in Calendar Web and Mobile clients. We recommend you reference a building name in the organization's Resources database.
                public init(
                    buildingId: Swift.String? = nil,
                    deskId: Swift.String? = nil,
                    floorId: Swift.String? = nil,
                    floorSectionId: Swift.String? = nil,
                    label: Swift.String? = nil
                ) {
                    self.buildingId = buildingId
                    self.deskId = deskId
                    self.floorId = floorId
                    self.floorSectionId = floorSectionId
                    self.label = label
                }
                public enum CodingKeys: String, CodingKey {
                    case buildingId
                    case deskId
                    case floorId
                    case floorSectionId
                    case label
                }
            }
            /// If present, specifies that the user is working from an office.
            ///
            /// - Remark: Generated from `#/components/schemas/EventWorkingLocationProperties/officeLocation`.
            public var officeLocation: Components.Schemas.EventWorkingLocationProperties.OfficeLocationPayload?
            /// Type of the working location. Possible values are:  
            /// - "homeOffice" - The user is working at home. 
            /// - "officeLocation" - The user is working from an office. 
            /// - "customLocation" - The user is working from a custom location.  Any details are specified in a sub-field of the specified name, but this field may be missing if empty. Any other fields are ignored.
            /// Required when adding working location properties.
            ///
            /// - Remark: Generated from `#/components/schemas/EventWorkingLocationProperties/type`.
            public var _type: Swift.String?
            /// Creates a new `EventWorkingLocationProperties`.
            ///
            /// - Parameters:
            ///   - customLocation: If present, specifies that the user is working from a custom location.
            ///   - homeOffice: If present, specifies that the user is working at home.
            ///   - officeLocation: If present, specifies that the user is working from an office.
            ///   - _type: Type of the working location. Possible values are:  
            public init(
                customLocation: Components.Schemas.EventWorkingLocationProperties.CustomLocationPayload? = nil,
                homeOffice: OpenAPIRuntime.OpenAPIValueContainer? = nil,
                officeLocation: Components.Schemas.EventWorkingLocationProperties.OfficeLocationPayload? = nil,
                _type: Swift.String? = nil
            ) {
                self.customLocation = customLocation
                self.homeOffice = homeOffice
                self.officeLocation = officeLocation
                self._type = _type
            }
            public enum CodingKeys: String, CodingKey {
                case customLocation
                case homeOffice
                case officeLocation
                case _type = "type"
            }
        }
        /// - Remark: Generated from `#/components/schemas/Events`.
        public struct Events: Codable, Hashable, Sendable {
            /// The user's access role for this calendar. Read-only. Possible values are:  
            /// - "none" - The user has no access. 
            /// - "freeBusyReader" - The user has read access to free/busy information. 
            /// - "reader" - The user has read access to the calendar. Private events will appear to users with reader access, but event details will be hidden. 
            /// - "writer" - The user has read and write access to the calendar. Private events will appear to users with writer access, and event details will be visible. 
            /// - "owner" - The user has ownership of the calendar. This role has all of the permissions of the writer role with the additional ability to see and manipulate ACLs.
            ///
            /// - Remark: Generated from `#/components/schemas/Events/accessRole`.
            public var accessRole: Swift.String?
            /// The default reminders on the calendar for the authenticated user. These reminders apply to all events on this calendar that do not explicitly override them (i.e. do not have reminders.useDefault set to True).
            ///
            /// - Remark: Generated from `#/components/schemas/Events/defaultReminders`.
            public var defaultReminders: [Components.Schemas.EventReminder]?
            /// Description of the calendar. Read-only.
            ///
            /// - Remark: Generated from `#/components/schemas/Events/description`.
            public var description: Swift.String?
            /// ETag of the collection.
            ///
            /// - Remark: Generated from `#/components/schemas/Events/etag`.
            public var etag: Swift.String?
            /// List of events on the calendar.
            ///
            /// - Remark: Generated from `#/components/schemas/Events/items`.
            public var items: [Components.Schemas.Event]?
            /// Type of the collection ("calendar#events").
            ///
            /// - Remark: Generated from `#/components/schemas/Events/kind`.
            public var kind: Swift.String?
            /// Token used to access the next page of this result. Omitted if no further results are available, in which case nextSyncToken is provided.
            ///
            /// - Remark: Generated from `#/components/schemas/Events/nextPageToken`.
            public var nextPageToken: Swift.String?
            /// Token used at a later point in time to retrieve only the entries that have changed since this result was returned. Omitted if further results are available, in which case nextPageToken is provided.
            ///
            /// - Remark: Generated from `#/components/schemas/Events/nextSyncToken`.
            public var nextSyncToken: Swift.String?
            /// Title of the calendar. Read-only.
            ///
            /// - Remark: Generated from `#/components/schemas/Events/summary`.
            public var summary: Swift.String?
            /// The time zone of the calendar. Read-only.
            ///
            /// - Remark: Generated from `#/components/schemas/Events/timeZone`.
            public var timeZone: Swift.String?
            /// Last modification time of the calendar (as a RFC3339 timestamp). Read-only.
            ///
            /// - Remark: Generated from `#/components/schemas/Events/updated`.
            public var updated: Foundation.Date?
            /// Creates a new `Events`.
            ///
            /// - Parameters:
            ///   - accessRole: The user's access role for this calendar. Read-only. Possible values are:  
            ///   - defaultReminders: The default reminders on the calendar for the authenticated user. These reminders apply to all events on this calendar that do not explicitly override them (i.e. do not have reminders.useDefault set to True).
            ///   - description: Description of the calendar. Read-only.
            ///   - etag: ETag of the collection.
            ///   - items: List of events on the calendar.
            ///   - kind: Type of the collection ("calendar#events").
            ///   - nextPageToken: Token used to access the next page of this result. Omitted if no further results are available, in which case nextSyncToken is provided.
            ///   - nextSyncToken: Token used at a later point in time to retrieve only the entries that have changed since this result was returned. Omitted if further results are available, in which case nextPageToken is provided.
            ///   - summary: Title of the calendar. Read-only.
            ///   - timeZone: The time zone of the calendar. Read-only.
            ///   - updated: Last modification time of the calendar (as a RFC3339 timestamp). Read-only.
            public init(
                accessRole: Swift.String? = nil,
                defaultReminders: [Components.Schemas.EventReminder]? = nil,
                description: Swift.String? = nil,
                etag: Swift.String? = nil,
                items: [Components.Schemas.Event]? = nil,
                kind: Swift.String? = nil,
                nextPageToken: Swift.String? = nil,
                nextSyncToken: Swift.String? = nil,
                summary: Swift.String? = nil,
                timeZone: Swift.String? = nil,
                updated: Foundation.Date? = nil
            ) {
                self.accessRole = accessRole
                self.defaultReminders = defaultReminders
                self.description = description
                self.etag = etag
                self.items = items
                self.kind = kind
                self.nextPageToken = nextPageToken
                self.nextSyncToken = nextSyncToken
                self.summary = summary
                self.timeZone = timeZone
                self.updated = updated
            }
            public enum CodingKeys: String, CodingKey {
                case accessRole
                case defaultReminders
                case description
                case etag
                case items
                case kind
                case nextPageToken
                case nextSyncToken
                case summary
                case timeZone
                case updated
            }
        }
        /// - Remark: Generated from `#/components/schemas/FreeBusyCalendar`.
        public struct FreeBusyCalendar: Codable, Hashable, Sendable {
            /// List of time ranges during which this calendar should be regarded as busy.
            ///
            /// - Remark: Generated from `#/components/schemas/FreeBusyCalendar/busy`.
            public var busy: [Components.Schemas.TimePeriod]?
            /// Optional error(s) (if computation for the calendar failed).
            ///
            /// - Remark: Generated from `#/components/schemas/FreeBusyCalendar/errors`.
            public var errors: [Components.Schemas._Error]?
            /// Creates a new `FreeBusyCalendar`.
            ///
            /// - Parameters:
            ///   - busy: List of time ranges during which this calendar should be regarded as busy.
            ///   - errors: Optional error(s) (if computation for the calendar failed).
            public init(
                busy: [Components.Schemas.TimePeriod]? = nil,
                errors: [Components.Schemas._Error]? = nil
            ) {
                self.busy = busy
                self.errors = errors
            }
            public enum CodingKeys: String, CodingKey {
                case busy
                case errors
            }
        }
        /// - Remark: Generated from `#/components/schemas/FreeBusyGroup`.
        public struct FreeBusyGroup: Codable, Hashable, Sendable {
            /// List of calendars' identifiers within a group.
            ///
            /// - Remark: Generated from `#/components/schemas/FreeBusyGroup/calendars`.
            public var calendars: [Swift.String]?
            /// Optional error(s) (if computation for the group failed).
            ///
            /// - Remark: Generated from `#/components/schemas/FreeBusyGroup/errors`.
            public var errors: [Components.Schemas._Error]?
            /// Creates a new `FreeBusyGroup`.
            ///
            /// - Parameters:
            ///   - calendars: List of calendars' identifiers within a group.
            ///   - errors: Optional error(s) (if computation for the group failed).
            public init(
                calendars: [Swift.String]? = nil,
                errors: [Components.Schemas._Error]? = nil
            ) {
                self.calendars = calendars
                self.errors = errors
            }
            public enum CodingKeys: String, CodingKey {
                case calendars
                case errors
            }
        }
        /// - Remark: Generated from `#/components/schemas/FreeBusyRequest`.
        public struct FreeBusyRequest: Codable, Hashable, Sendable {
            /// Maximal number of calendars for which FreeBusy information is to be provided. Optional. Maximum value is 50.
            ///
            /// - Remark: Generated from `#/components/schemas/FreeBusyRequest/calendarExpansionMax`.
            public var calendarExpansionMax: Swift.Int32?
            /// Maximal number of calendar identifiers to be provided for a single group. Optional. An error is returned for a group with more members than this value. Maximum value is 100.
            ///
            /// - Remark: Generated from `#/components/schemas/FreeBusyRequest/groupExpansionMax`.
            public var groupExpansionMax: Swift.Int32?
            /// List of calendars and/or groups to query.
            ///
            /// - Remark: Generated from `#/components/schemas/FreeBusyRequest/items`.
            public var items: [Components.Schemas.FreeBusyRequestItem]?
            /// The end of the interval for the query formatted as per RFC3339.
            ///
            /// - Remark: Generated from `#/components/schemas/FreeBusyRequest/timeMax`.
            public var timeMax: Foundation.Date?
            /// The start of the interval for the query formatted as per RFC3339.
            ///
            /// - Remark: Generated from `#/components/schemas/FreeBusyRequest/timeMin`.
            public var timeMin: Foundation.Date?
            /// Time zone used in the response. Optional. The default is UTC.
            ///
            /// - Remark: Generated from `#/components/schemas/FreeBusyRequest/timeZone`.
            public var timeZone: Swift.String?
            /// Creates a new `FreeBusyRequest`.
            ///
            /// - Parameters:
            ///   - calendarExpansionMax: Maximal number of calendars for which FreeBusy information is to be provided. Optional. Maximum value is 50.
            ///   - groupExpansionMax: Maximal number of calendar identifiers to be provided for a single group. Optional. An error is returned for a group with more members than this value. Maximum value is 100.
            ///   - items: List of calendars and/or groups to query.
            ///   - timeMax: The end of the interval for the query formatted as per RFC3339.
            ///   - timeMin: The start of the interval for the query formatted as per RFC3339.
            ///   - timeZone: Time zone used in the response. Optional. The default is UTC.
            public init(
                calendarExpansionMax: Swift.Int32? = nil,
                groupExpansionMax: Swift.Int32? = nil,
                items: [Components.Schemas.FreeBusyRequestItem]? = nil,
                timeMax: Foundation.Date? = nil,
                timeMin: Foundation.Date? = nil,
                timeZone: Swift.String? = nil
            ) {
                self.calendarExpansionMax = calendarExpansionMax
                self.groupExpansionMax = groupExpansionMax
                self.items = items
                self.timeMax = timeMax
                self.timeMin = timeMin
                self.timeZone = timeZone
            }
            public enum CodingKeys: String, CodingKey {
                case calendarExpansionMax
                case groupExpansionMax
                case items
                case timeMax
                case timeMin
                case timeZone
            }
        }
        /// - Remark: Generated from `#/components/schemas/FreeBusyRequestItem`.
        public struct FreeBusyRequestItem: Codable, Hashable, Sendable {
            /// The identifier of a calendar or a group.
            ///
            /// - Remark: Generated from `#/components/schemas/FreeBusyRequestItem/id`.
            public var id: Swift.String?
            /// Creates a new `FreeBusyRequestItem`.
            ///
            /// - Parameters:
            ///   - id: The identifier of a calendar or a group.
            public init(id: Swift.String? = nil) {
                self.id = id
            }
            public enum CodingKeys: String, CodingKey {
                case id
            }
        }
        /// - Remark: Generated from `#/components/schemas/FreeBusyResponse`.
        public struct FreeBusyResponse: Codable, Hashable, Sendable {
            /// List of free/busy information for calendars.
            ///
            /// - Remark: Generated from `#/components/schemas/FreeBusyResponse/calendars`.
            public struct CalendarsPayload: Codable, Hashable, Sendable {
                /// A container of undocumented properties.
                public var additionalProperties: [String: Components.Schemas.FreeBusyCalendar]
                /// Creates a new `CalendarsPayload`.
                ///
                /// - Parameters:
                ///   - additionalProperties: A container of undocumented properties.
                public init(additionalProperties: [String: Components.Schemas.FreeBusyCalendar] = .init()) {
                    self.additionalProperties = additionalProperties
                }
                public init(from decoder: any Decoder) throws {
                    additionalProperties = try decoder.decodeAdditionalProperties(knownKeys: [])
                }
                public func encode(to encoder: any Encoder) throws {
                    try encoder.encodeAdditionalProperties(additionalProperties)
                }
            }
            /// List of free/busy information for calendars.
            ///
            /// - Remark: Generated from `#/components/schemas/FreeBusyResponse/calendars`.
            public var calendars: Components.Schemas.FreeBusyResponse.CalendarsPayload?
            /// Expansion of groups.
            ///
            /// - Remark: Generated from `#/components/schemas/FreeBusyResponse/groups`.
            public struct GroupsPayload: Codable, Hashable, Sendable {
                /// A container of undocumented properties.
                public var additionalProperties: [String: Components.Schemas.FreeBusyGroup]
                /// Creates a new `GroupsPayload`.
                ///
                /// - Parameters:
                ///   - additionalProperties: A container of undocumented properties.
                public init(additionalProperties: [String: Components.Schemas.FreeBusyGroup] = .init()) {
                    self.additionalProperties = additionalProperties
                }
                public init(from decoder: any Decoder) throws {
                    additionalProperties = try decoder.decodeAdditionalProperties(knownKeys: [])
                }
                public func encode(to encoder: any Encoder) throws {
                    try encoder.encodeAdditionalProperties(additionalProperties)
                }
            }
            /// Expansion of groups.
            ///
            /// - Remark: Generated from `#/components/schemas/FreeBusyResponse/groups`.
            public var groups: Components.Schemas.FreeBusyResponse.GroupsPayload?
            /// Type of the resource ("calendar#freeBusy").
            ///
            /// - Remark: Generated from `#/components/schemas/FreeBusyResponse/kind`.
            public var kind: Swift.String?
            /// The end of the interval.
            ///
            /// - Remark: Generated from `#/components/schemas/FreeBusyResponse/timeMax`.
            public var timeMax: Foundation.Date?
            /// The start of the interval.
            ///
            /// - Remark: Generated from `#/components/schemas/FreeBusyResponse/timeMin`.
            public var timeMin: Foundation.Date?
            /// Creates a new `FreeBusyResponse`.
            ///
            /// - Parameters:
            ///   - calendars: List of free/busy information for calendars.
            ///   - groups: Expansion of groups.
            ///   - kind: Type of the resource ("calendar#freeBusy").
            ///   - timeMax: The end of the interval.
            ///   - timeMin: The start of the interval.
            public init(
                calendars: Components.Schemas.FreeBusyResponse.CalendarsPayload? = nil,
                groups: Components.Schemas.FreeBusyResponse.GroupsPayload? = nil,
                kind: Swift.String? = nil,
                timeMax: Foundation.Date? = nil,
                timeMin: Foundation.Date? = nil
            ) {
                self.calendars = calendars
                self.groups = groups
                self.kind = kind
                self.timeMax = timeMax
                self.timeMin = timeMin
            }
            public enum CodingKeys: String, CodingKey {
                case calendars
                case groups
                case kind
                case timeMax
                case timeMin
            }
        }
        /// - Remark: Generated from `#/components/schemas/Setting`.
        public struct Setting: Codable, Hashable, Sendable {
            /// ETag of the resource.
            ///
            /// - Remark: Generated from `#/components/schemas/Setting/etag`.
            public var etag: Swift.String?
            /// The id of the user setting.
            ///
            /// - Remark: Generated from `#/components/schemas/Setting/id`.
            public var id: Swift.String?
            /// Type of the resource ("calendar#setting").
            ///
            /// - Remark: Generated from `#/components/schemas/Setting/kind`.
            public var kind: Swift.String?
            /// Value of the user setting. The format of the value depends on the ID of the setting. It must always be a UTF-8 string of length up to 1024 characters.
            ///
            /// - Remark: Generated from `#/components/schemas/Setting/value`.
            public var value: Swift.String?
            /// Creates a new `Setting`.
            ///
            /// - Parameters:
            ///   - etag: ETag of the resource.
            ///   - id: The id of the user setting.
            ///   - kind: Type of the resource ("calendar#setting").
            ///   - value: Value of the user setting. The format of the value depends on the ID of the setting. It must always be a UTF-8 string of length up to 1024 characters.
            public init(
                etag: Swift.String? = nil,
                id: Swift.String? = nil,
                kind: Swift.String? = nil,
                value: Swift.String? = nil
            ) {
                self.etag = etag
                self.id = id
                self.kind = kind
                self.value = value
            }
            public enum CodingKeys: String, CodingKey {
                case etag
                case id
                case kind
                case value
            }
        }
        /// - Remark: Generated from `#/components/schemas/Settings`.
        public struct Settings: Codable, Hashable, Sendable {
            /// Etag of the collection.
            ///
            /// - Remark: Generated from `#/components/schemas/Settings/etag`.
            public var etag: Swift.String?
            /// List of user settings.
            ///
            /// - Remark: Generated from `#/components/schemas/Settings/items`.
            public var items: [Components.Schemas.Setting]?
            /// Type of the collection ("calendar#settings").
            ///
            /// - Remark: Generated from `#/components/schemas/Settings/kind`.
            public var kind: Swift.String?
            /// Token used to access the next page of this result. Omitted if no further results are available, in which case nextSyncToken is provided.
            ///
            /// - Remark: Generated from `#/components/schemas/Settings/nextPageToken`.
            public var nextPageToken: Swift.String?
            /// Token used at a later point in time to retrieve only the entries that have changed since this result was returned. Omitted if further results are available, in which case nextPageToken is provided.
            ///
            /// - Remark: Generated from `#/components/schemas/Settings/nextSyncToken`.
            public var nextSyncToken: Swift.String?
            /// Creates a new `Settings`.
            ///
            /// - Parameters:
            ///   - etag: Etag of the collection.
            ///   - items: List of user settings.
            ///   - kind: Type of the collection ("calendar#settings").
            ///   - nextPageToken: Token used to access the next page of this result. Omitted if no further results are available, in which case nextSyncToken is provided.
            ///   - nextSyncToken: Token used at a later point in time to retrieve only the entries that have changed since this result was returned. Omitted if further results are available, in which case nextPageToken is provided.
            public init(
                etag: Swift.String? = nil,
                items: [Components.Schemas.Setting]? = nil,
                kind: Swift.String? = nil,
                nextPageToken: Swift.String? = nil,
                nextSyncToken: Swift.String? = nil
            ) {
                self.etag = etag
                self.items = items
                self.kind = kind
                self.nextPageToken = nextPageToken
                self.nextSyncToken = nextSyncToken
            }
            public enum CodingKeys: String, CodingKey {
                case etag
                case items
                case kind
                case nextPageToken
                case nextSyncToken
            }
        }
        /// - Remark: Generated from `#/components/schemas/TimePeriod`.
        public struct TimePeriod: Codable, Hashable, Sendable {
            /// The (exclusive) end of the time period.
            ///
            /// - Remark: Generated from `#/components/schemas/TimePeriod/end`.
            public var end: Foundation.Date?
            /// The (inclusive) start of the time period.
            ///
            /// - Remark: Generated from `#/components/schemas/TimePeriod/start`.
            public var start: Foundation.Date?
            /// Creates a new `TimePeriod`.
            ///
            /// - Parameters:
            ///   - end: The (exclusive) end of the time period.
            ///   - start: The (inclusive) start of the time period.
            public init(
                end: Foundation.Date? = nil,
                start: Foundation.Date? = nil
            ) {
                self.end = end
                self.start = start
            }
            public enum CodingKeys: String, CodingKey {
                case end
                case start
            }
        }
    }
    /// Types generated from the `#/components/parameters` section of the OpenAPI document.
    public enum Parameters {
        /// Data format for the response.
        ///
        /// - Remark: Generated from `#/components/parameters/alt`.
        @frozen public enum Alt: String, Codable, Hashable, Sendable, CaseIterable {
            case json = "json"
        }
        /// Selector specifying which fields to include in a partial response.
        ///
        /// - Remark: Generated from `#/components/parameters/fields`.
        public typealias Fields = Swift.String
        /// API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
        ///
        /// - Remark: Generated from `#/components/parameters/key`.
        public typealias Key = Swift.String
        /// OAuth 2.0 token for the current user.
        ///
        /// - Remark: Generated from `#/components/parameters/oauth_token`.
        public typealias OauthToken = Swift.String
        /// Returns response with indentations and line breaks.
        ///
        /// - Remark: Generated from `#/components/parameters/prettyPrint`.
        public typealias PrettyPrint = Swift.Bool
        /// An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
        ///
        /// - Remark: Generated from `#/components/parameters/quotaUser`.
        public typealias QuotaUser = Swift.String
        /// Deprecated. Please use quotaUser instead.
        ///
        /// - Remark: Generated from `#/components/parameters/userIp`.
        public typealias UserIp = Swift.String
    }
    /// Types generated from the `#/components/requestBodies` section of the OpenAPI document.
    public enum RequestBodies {}
    /// Types generated from the `#/components/responses` section of the OpenAPI document.
    public enum Responses {}
    /// Types generated from the `#/components/headers` section of the OpenAPI document.
    public enum Headers {}
}

/// API operations, with input and output types, generated from `#/paths` in the OpenAPI document.
public enum Operations {
    /// Creates a secondary calendar.
    ///
    /// - Remark: HTTP `POST /calendars`.
    /// - Remark: Generated from `#/paths//calendars/post(calendar.calendars.insert)`.
    public enum Calendar_calendars_insert {
        public static let id: Swift.String = "calendar.calendars.insert"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/calendars/POST/query`.
            public struct Query: Sendable, Hashable {
                /// - Remark: Generated from `#/components/parameters/alt`.
                @frozen public enum Alt: String, Codable, Hashable, Sendable, CaseIterable {
                    case json = "json"
                }
                /// Data format for the response.
                ///
                /// - Remark: Generated from `#/paths/calendars/POST/query/alt`.
                public var alt: Components.Parameters.Alt?
                /// Selector specifying which fields to include in a partial response.
                ///
                /// - Remark: Generated from `#/paths/calendars/POST/query/fields`.
                public var fields: Components.Parameters.Fields?
                /// API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
                ///
                /// - Remark: Generated from `#/paths/calendars/POST/query/key`.
                public var key: Components.Parameters.Key?
                /// OAuth 2.0 token for the current user.
                ///
                /// - Remark: Generated from `#/paths/calendars/POST/query/oauth_token`.
                public var oauthToken: Components.Parameters.OauthToken?
                /// Returns response with indentations and line breaks.
                ///
                /// - Remark: Generated from `#/paths/calendars/POST/query/prettyPrint`.
                public var prettyPrint: Components.Parameters.PrettyPrint?
                /// An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
                ///
                /// - Remark: Generated from `#/paths/calendars/POST/query/quotaUser`.
                public var quotaUser: Components.Parameters.QuotaUser?
                /// Deprecated. Please use quotaUser instead.
                ///
                /// - Remark: Generated from `#/paths/calendars/POST/query/userIp`.
                public var userIp: Components.Parameters.UserIp?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - alt: Data format for the response.
                ///   - fields: Selector specifying which fields to include in a partial response.
                ///   - key: API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
                ///   - oauthToken: OAuth 2.0 token for the current user.
                ///   - prettyPrint: Returns response with indentations and line breaks.
                ///   - quotaUser: An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
                ///   - userIp: Deprecated. Please use quotaUser instead.
                public init(
                    alt: Components.Parameters.Alt? = nil,
                    fields: Components.Parameters.Fields? = nil,
                    key: Components.Parameters.Key? = nil,
                    oauthToken: Components.Parameters.OauthToken? = nil,
                    prettyPrint: Components.Parameters.PrettyPrint? = nil,
                    quotaUser: Components.Parameters.QuotaUser? = nil,
                    userIp: Components.Parameters.UserIp? = nil
                ) {
                    self.alt = alt
                    self.fields = fields
                    self.key = key
                    self.oauthToken = oauthToken
                    self.prettyPrint = prettyPrint
                    self.quotaUser = quotaUser
                    self.userIp = userIp
                }
            }
            public var query: Operations.Calendar_calendars_insert.Input.Query
            /// - Remark: Generated from `#/paths/calendars/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.Calendar_calendars_insert.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.Calendar_calendars_insert.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.Calendar_calendars_insert.Input.Headers
            /// - Remark: Generated from `#/paths/calendars/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/calendars/POST/requestBody/content/application\/json`.
                case json(Components.Schemas.Calendar)
            }
            public var body: Operations.Calendar_calendars_insert.Input.Body?
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - query:
            ///   - headers:
            ///   - body:
            public init(
                query: Operations.Calendar_calendars_insert.Input.Query = .init(),
                headers: Operations.Calendar_calendars_insert.Input.Headers = .init(),
                body: Operations.Calendar_calendars_insert.Input.Body? = nil
            ) {
                self.query = query
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/calendars/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/calendars/POST/responses/200/content/application\/json`.
                    case json(Components.Schemas.Calendar)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.Calendar {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.Calendar_calendars_insert.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.Calendar_calendars_insert.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Successful response
            ///
            /// - Remark: Generated from `#/paths//calendars/post(calendar.calendars.insert)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.Calendar_calendars_insert.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.Calendar_calendars_insert.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Returns metadata for a calendar.
    ///
    /// - Remark: HTTP `GET /calendars/{calendarId}`.
    /// - Remark: Generated from `#/paths//calendars/{calendarId}/get(calendar.calendars.get)`.
    public enum Calendar_calendars_get {
        public static let id: Swift.String = "calendar.calendars.get"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/calendars/{calendarId}/GET/path`.
            public struct Path: Sendable, Hashable {
                /// Calendar identifier. To retrieve calendar IDs call the calendarList.list method. If you want to access the primary calendar of the currently logged in user, use the "primary" keyword.
                ///
                /// - Remark: Generated from `#/paths/calendars/{calendarId}/GET/path/calendarId`.
                public var calendarId: Swift.String
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - calendarId: Calendar identifier. To retrieve calendar IDs call the calendarList.list method. If you want to access the primary calendar of the currently logged in user, use the "primary" keyword.
                public init(calendarId: Swift.String) {
                    self.calendarId = calendarId
                }
            }
            public var path: Operations.Calendar_calendars_get.Input.Path
            /// - Remark: Generated from `#/paths/calendars/{calendarId}/GET/query`.
            public struct Query: Sendable, Hashable {
                /// - Remark: Generated from `#/components/parameters/alt`.
                @frozen public enum Alt: String, Codable, Hashable, Sendable, CaseIterable {
                    case json = "json"
                }
                /// Data format for the response.
                ///
                /// - Remark: Generated from `#/paths/calendars/{calendarId}/GET/query/alt`.
                public var alt: Components.Parameters.Alt?
                /// Selector specifying which fields to include in a partial response.
                ///
                /// - Remark: Generated from `#/paths/calendars/{calendarId}/GET/query/fields`.
                public var fields: Components.Parameters.Fields?
                /// API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
                ///
                /// - Remark: Generated from `#/paths/calendars/{calendarId}/GET/query/key`.
                public var key: Components.Parameters.Key?
                /// OAuth 2.0 token for the current user.
                ///
                /// - Remark: Generated from `#/paths/calendars/{calendarId}/GET/query/oauth_token`.
                public var oauthToken: Components.Parameters.OauthToken?
                /// Returns response with indentations and line breaks.
                ///
                /// - Remark: Generated from `#/paths/calendars/{calendarId}/GET/query/prettyPrint`.
                public var prettyPrint: Components.Parameters.PrettyPrint?
                /// An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
                ///
                /// - Remark: Generated from `#/paths/calendars/{calendarId}/GET/query/quotaUser`.
                public var quotaUser: Components.Parameters.QuotaUser?
                /// Deprecated. Please use quotaUser instead.
                ///
                /// - Remark: Generated from `#/paths/calendars/{calendarId}/GET/query/userIp`.
                public var userIp: Components.Parameters.UserIp?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - alt: Data format for the response.
                ///   - fields: Selector specifying which fields to include in a partial response.
                ///   - key: API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
                ///   - oauthToken: OAuth 2.0 token for the current user.
                ///   - prettyPrint: Returns response with indentations and line breaks.
                ///   - quotaUser: An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
                ///   - userIp: Deprecated. Please use quotaUser instead.
                public init(
                    alt: Components.Parameters.Alt? = nil,
                    fields: Components.Parameters.Fields? = nil,
                    key: Components.Parameters.Key? = nil,
                    oauthToken: Components.Parameters.OauthToken? = nil,
                    prettyPrint: Components.Parameters.PrettyPrint? = nil,
                    quotaUser: Components.Parameters.QuotaUser? = nil,
                    userIp: Components.Parameters.UserIp? = nil
                ) {
                    self.alt = alt
                    self.fields = fields
                    self.key = key
                    self.oauthToken = oauthToken
                    self.prettyPrint = prettyPrint
                    self.quotaUser = quotaUser
                    self.userIp = userIp
                }
            }
            public var query: Operations.Calendar_calendars_get.Input.Query
            /// - Remark: Generated from `#/paths/calendars/{calendarId}/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.Calendar_calendars_get.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.Calendar_calendars_get.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.Calendar_calendars_get.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - query:
            ///   - headers:
            public init(
                path: Operations.Calendar_calendars_get.Input.Path,
                query: Operations.Calendar_calendars_get.Input.Query = .init(),
                headers: Operations.Calendar_calendars_get.Input.Headers = .init()
            ) {
                self.path = path
                self.query = query
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/calendars/{calendarId}/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/calendars/{calendarId}/GET/responses/200/content/application\/json`.
                    case json(Components.Schemas.Calendar)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.Calendar {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.Calendar_calendars_get.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.Calendar_calendars_get.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Successful response
            ///
            /// - Remark: Generated from `#/paths//calendars/{calendarId}/get(calendar.calendars.get)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.Calendar_calendars_get.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.Calendar_calendars_get.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Updates metadata for a calendar. This method supports patch semantics.
    ///
    /// - Remark: HTTP `PATCH /calendars/{calendarId}`.
    /// - Remark: Generated from `#/paths//calendars/{calendarId}/patch(calendar.calendars.patch)`.
    public enum Calendar_calendars_patch {
        public static let id: Swift.String = "calendar.calendars.patch"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/calendars/{calendarId}/PATCH/path`.
            public struct Path: Sendable, Hashable {
                /// Calendar identifier. To retrieve calendar IDs call the calendarList.list method. If you want to access the primary calendar of the currently logged in user, use the "primary" keyword.
                ///
                /// - Remark: Generated from `#/paths/calendars/{calendarId}/PATCH/path/calendarId`.
                public var calendarId: Swift.String
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - calendarId: Calendar identifier. To retrieve calendar IDs call the calendarList.list method. If you want to access the primary calendar of the currently logged in user, use the "primary" keyword.
                public init(calendarId: Swift.String) {
                    self.calendarId = calendarId
                }
            }
            public var path: Operations.Calendar_calendars_patch.Input.Path
            /// - Remark: Generated from `#/paths/calendars/{calendarId}/PATCH/query`.
            public struct Query: Sendable, Hashable {
                /// - Remark: Generated from `#/components/parameters/alt`.
                @frozen public enum Alt: String, Codable, Hashable, Sendable, CaseIterable {
                    case json = "json"
                }
                /// Data format for the response.
                ///
                /// - Remark: Generated from `#/paths/calendars/{calendarId}/PATCH/query/alt`.
                public var alt: Components.Parameters.Alt?
                /// Selector specifying which fields to include in a partial response.
                ///
                /// - Remark: Generated from `#/paths/calendars/{calendarId}/PATCH/query/fields`.
                public var fields: Components.Parameters.Fields?
                /// API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
                ///
                /// - Remark: Generated from `#/paths/calendars/{calendarId}/PATCH/query/key`.
                public var key: Components.Parameters.Key?
                /// OAuth 2.0 token for the current user.
                ///
                /// - Remark: Generated from `#/paths/calendars/{calendarId}/PATCH/query/oauth_token`.
                public var oauthToken: Components.Parameters.OauthToken?
                /// Returns response with indentations and line breaks.
                ///
                /// - Remark: Generated from `#/paths/calendars/{calendarId}/PATCH/query/prettyPrint`.
                public var prettyPrint: Components.Parameters.PrettyPrint?
                /// An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
                ///
                /// - Remark: Generated from `#/paths/calendars/{calendarId}/PATCH/query/quotaUser`.
                public var quotaUser: Components.Parameters.QuotaUser?
                /// Deprecated. Please use quotaUser instead.
                ///
                /// - Remark: Generated from `#/paths/calendars/{calendarId}/PATCH/query/userIp`.
                public var userIp: Components.Parameters.UserIp?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - alt: Data format for the response.
                ///   - fields: Selector specifying which fields to include in a partial response.
                ///   - key: API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
                ///   - oauthToken: OAuth 2.0 token for the current user.
                ///   - prettyPrint: Returns response with indentations and line breaks.
                ///   - quotaUser: An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
                ///   - userIp: Deprecated. Please use quotaUser instead.
                public init(
                    alt: Components.Parameters.Alt? = nil,
                    fields: Components.Parameters.Fields? = nil,
                    key: Components.Parameters.Key? = nil,
                    oauthToken: Components.Parameters.OauthToken? = nil,
                    prettyPrint: Components.Parameters.PrettyPrint? = nil,
                    quotaUser: Components.Parameters.QuotaUser? = nil,
                    userIp: Components.Parameters.UserIp? = nil
                ) {
                    self.alt = alt
                    self.fields = fields
                    self.key = key
                    self.oauthToken = oauthToken
                    self.prettyPrint = prettyPrint
                    self.quotaUser = quotaUser
                    self.userIp = userIp
                }
            }
            public var query: Operations.Calendar_calendars_patch.Input.Query
            /// - Remark: Generated from `#/paths/calendars/{calendarId}/PATCH/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.Calendar_calendars_patch.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.Calendar_calendars_patch.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.Calendar_calendars_patch.Input.Headers
            /// - Remark: Generated from `#/paths/calendars/{calendarId}/PATCH/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/calendars/{calendarId}/PATCH/requestBody/content/application\/json`.
                case json(Components.Schemas.Calendar)
            }
            public var body: Operations.Calendar_calendars_patch.Input.Body?
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - query:
            ///   - headers:
            ///   - body:
            public init(
                path: Operations.Calendar_calendars_patch.Input.Path,
                query: Operations.Calendar_calendars_patch.Input.Query = .init(),
                headers: Operations.Calendar_calendars_patch.Input.Headers = .init(),
                body: Operations.Calendar_calendars_patch.Input.Body? = nil
            ) {
                self.path = path
                self.query = query
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/calendars/{calendarId}/PATCH/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/calendars/{calendarId}/PATCH/responses/200/content/application\/json`.
                    case json(Components.Schemas.Calendar)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.Calendar {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.Calendar_calendars_patch.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.Calendar_calendars_patch.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Successful response
            ///
            /// - Remark: Generated from `#/paths//calendars/{calendarId}/patch(calendar.calendars.patch)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.Calendar_calendars_patch.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.Calendar_calendars_patch.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Updates metadata for a calendar.
    ///
    /// - Remark: HTTP `PUT /calendars/{calendarId}`.
    /// - Remark: Generated from `#/paths//calendars/{calendarId}/put(calendar.calendars.update)`.
    public enum Calendar_calendars_update {
        public static let id: Swift.String = "calendar.calendars.update"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/calendars/{calendarId}/PUT/path`.
            public struct Path: Sendable, Hashable {
                /// Calendar identifier. To retrieve calendar IDs call the calendarList.list method. If you want to access the primary calendar of the currently logged in user, use the "primary" keyword.
                ///
                /// - Remark: Generated from `#/paths/calendars/{calendarId}/PUT/path/calendarId`.
                public var calendarId: Swift.String
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - calendarId: Calendar identifier. To retrieve calendar IDs call the calendarList.list method. If you want to access the primary calendar of the currently logged in user, use the "primary" keyword.
                public init(calendarId: Swift.String) {
                    self.calendarId = calendarId
                }
            }
            public var path: Operations.Calendar_calendars_update.Input.Path
            /// - Remark: Generated from `#/paths/calendars/{calendarId}/PUT/query`.
            public struct Query: Sendable, Hashable {
                /// - Remark: Generated from `#/components/parameters/alt`.
                @frozen public enum Alt: String, Codable, Hashable, Sendable, CaseIterable {
                    case json = "json"
                }
                /// Data format for the response.
                ///
                /// - Remark: Generated from `#/paths/calendars/{calendarId}/PUT/query/alt`.
                public var alt: Components.Parameters.Alt?
                /// Selector specifying which fields to include in a partial response.
                ///
                /// - Remark: Generated from `#/paths/calendars/{calendarId}/PUT/query/fields`.
                public var fields: Components.Parameters.Fields?
                /// API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
                ///
                /// - Remark: Generated from `#/paths/calendars/{calendarId}/PUT/query/key`.
                public var key: Components.Parameters.Key?
                /// OAuth 2.0 token for the current user.
                ///
                /// - Remark: Generated from `#/paths/calendars/{calendarId}/PUT/query/oauth_token`.
                public var oauthToken: Components.Parameters.OauthToken?
                /// Returns response with indentations and line breaks.
                ///
                /// - Remark: Generated from `#/paths/calendars/{calendarId}/PUT/query/prettyPrint`.
                public var prettyPrint: Components.Parameters.PrettyPrint?
                /// An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
                ///
                /// - Remark: Generated from `#/paths/calendars/{calendarId}/PUT/query/quotaUser`.
                public var quotaUser: Components.Parameters.QuotaUser?
                /// Deprecated. Please use quotaUser instead.
                ///
                /// - Remark: Generated from `#/paths/calendars/{calendarId}/PUT/query/userIp`.
                public var userIp: Components.Parameters.UserIp?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - alt: Data format for the response.
                ///   - fields: Selector specifying which fields to include in a partial response.
                ///   - key: API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
                ///   - oauthToken: OAuth 2.0 token for the current user.
                ///   - prettyPrint: Returns response with indentations and line breaks.
                ///   - quotaUser: An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
                ///   - userIp: Deprecated. Please use quotaUser instead.
                public init(
                    alt: Components.Parameters.Alt? = nil,
                    fields: Components.Parameters.Fields? = nil,
                    key: Components.Parameters.Key? = nil,
                    oauthToken: Components.Parameters.OauthToken? = nil,
                    prettyPrint: Components.Parameters.PrettyPrint? = nil,
                    quotaUser: Components.Parameters.QuotaUser? = nil,
                    userIp: Components.Parameters.UserIp? = nil
                ) {
                    self.alt = alt
                    self.fields = fields
                    self.key = key
                    self.oauthToken = oauthToken
                    self.prettyPrint = prettyPrint
                    self.quotaUser = quotaUser
                    self.userIp = userIp
                }
            }
            public var query: Operations.Calendar_calendars_update.Input.Query
            /// - Remark: Generated from `#/paths/calendars/{calendarId}/PUT/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.Calendar_calendars_update.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.Calendar_calendars_update.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.Calendar_calendars_update.Input.Headers
            /// - Remark: Generated from `#/paths/calendars/{calendarId}/PUT/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/calendars/{calendarId}/PUT/requestBody/content/application\/json`.
                case json(Components.Schemas.Calendar)
            }
            public var body: Operations.Calendar_calendars_update.Input.Body?
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - query:
            ///   - headers:
            ///   - body:
            public init(
                path: Operations.Calendar_calendars_update.Input.Path,
                query: Operations.Calendar_calendars_update.Input.Query = .init(),
                headers: Operations.Calendar_calendars_update.Input.Headers = .init(),
                body: Operations.Calendar_calendars_update.Input.Body? = nil
            ) {
                self.path = path
                self.query = query
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/calendars/{calendarId}/PUT/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/calendars/{calendarId}/PUT/responses/200/content/application\/json`.
                    case json(Components.Schemas.Calendar)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.Calendar {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.Calendar_calendars_update.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.Calendar_calendars_update.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Successful response
            ///
            /// - Remark: Generated from `#/paths//calendars/{calendarId}/put(calendar.calendars.update)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.Calendar_calendars_update.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.Calendar_calendars_update.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Deletes a secondary calendar. Use calendars.clear for clearing all events on primary calendars.
    ///
    /// - Remark: HTTP `DELETE /calendars/{calendarId}`.
    /// - Remark: Generated from `#/paths//calendars/{calendarId}/delete(calendar.calendars.delete)`.
    public enum Calendar_calendars_delete {
        public static let id: Swift.String = "calendar.calendars.delete"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/calendars/{calendarId}/DELETE/path`.
            public struct Path: Sendable, Hashable {
                /// Calendar identifier. To retrieve calendar IDs call the calendarList.list method. If you want to access the primary calendar of the currently logged in user, use the "primary" keyword.
                ///
                /// - Remark: Generated from `#/paths/calendars/{calendarId}/DELETE/path/calendarId`.
                public var calendarId: Swift.String
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - calendarId: Calendar identifier. To retrieve calendar IDs call the calendarList.list method. If you want to access the primary calendar of the currently logged in user, use the "primary" keyword.
                public init(calendarId: Swift.String) {
                    self.calendarId = calendarId
                }
            }
            public var path: Operations.Calendar_calendars_delete.Input.Path
            /// - Remark: Generated from `#/paths/calendars/{calendarId}/DELETE/query`.
            public struct Query: Sendable, Hashable {
                /// - Remark: Generated from `#/components/parameters/alt`.
                @frozen public enum Alt: String, Codable, Hashable, Sendable, CaseIterable {
                    case json = "json"
                }
                /// Data format for the response.
                ///
                /// - Remark: Generated from `#/paths/calendars/{calendarId}/DELETE/query/alt`.
                public var alt: Components.Parameters.Alt?
                /// Selector specifying which fields to include in a partial response.
                ///
                /// - Remark: Generated from `#/paths/calendars/{calendarId}/DELETE/query/fields`.
                public var fields: Components.Parameters.Fields?
                /// API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
                ///
                /// - Remark: Generated from `#/paths/calendars/{calendarId}/DELETE/query/key`.
                public var key: Components.Parameters.Key?
                /// OAuth 2.0 token for the current user.
                ///
                /// - Remark: Generated from `#/paths/calendars/{calendarId}/DELETE/query/oauth_token`.
                public var oauthToken: Components.Parameters.OauthToken?
                /// Returns response with indentations and line breaks.
                ///
                /// - Remark: Generated from `#/paths/calendars/{calendarId}/DELETE/query/prettyPrint`.
                public var prettyPrint: Components.Parameters.PrettyPrint?
                /// An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
                ///
                /// - Remark: Generated from `#/paths/calendars/{calendarId}/DELETE/query/quotaUser`.
                public var quotaUser: Components.Parameters.QuotaUser?
                /// Deprecated. Please use quotaUser instead.
                ///
                /// - Remark: Generated from `#/paths/calendars/{calendarId}/DELETE/query/userIp`.
                public var userIp: Components.Parameters.UserIp?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - alt: Data format for the response.
                ///   - fields: Selector specifying which fields to include in a partial response.
                ///   - key: API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
                ///   - oauthToken: OAuth 2.0 token for the current user.
                ///   - prettyPrint: Returns response with indentations and line breaks.
                ///   - quotaUser: An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
                ///   - userIp: Deprecated. Please use quotaUser instead.
                public init(
                    alt: Components.Parameters.Alt? = nil,
                    fields: Components.Parameters.Fields? = nil,
                    key: Components.Parameters.Key? = nil,
                    oauthToken: Components.Parameters.OauthToken? = nil,
                    prettyPrint: Components.Parameters.PrettyPrint? = nil,
                    quotaUser: Components.Parameters.QuotaUser? = nil,
                    userIp: Components.Parameters.UserIp? = nil
                ) {
                    self.alt = alt
                    self.fields = fields
                    self.key = key
                    self.oauthToken = oauthToken
                    self.prettyPrint = prettyPrint
                    self.quotaUser = quotaUser
                    self.userIp = userIp
                }
            }
            public var query: Operations.Calendar_calendars_delete.Input.Query
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - query:
            public init(
                path: Operations.Calendar_calendars_delete.Input.Path,
                query: Operations.Calendar_calendars_delete.Input.Query = .init()
            ) {
                self.path = path
                self.query = query
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// Creates a new `Ok`.
                public init() {}
            }
            /// Successful response
            ///
            /// - Remark: Generated from `#/paths//calendars/{calendarId}/delete(calendar.calendars.delete)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.Calendar_calendars_delete.Output.Ok)
            /// Successful response
            ///
            /// - Remark: Generated from `#/paths//calendars/{calendarId}/delete(calendar.calendars.delete)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            public static var ok: Self {
                .ok(.init())
            }
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.Calendar_calendars_delete.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
    }
    /// Returns the rules in the access control list for the calendar.
    ///
    /// - Remark: HTTP `GET /calendars/{calendarId}/acl`.
    /// - Remark: Generated from `#/paths//calendars/{calendarId}/acl/get(calendar.acl.list)`.
    public enum Calendar_acl_list {
        public static let id: Swift.String = "calendar.acl.list"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/calendars/{calendarId}/acl/GET/path`.
            public struct Path: Sendable, Hashable {
                /// Calendar identifier. To retrieve calendar IDs call the calendarList.list method. If you want to access the primary calendar of the currently logged in user, use the "primary" keyword.
                ///
                /// - Remark: Generated from `#/paths/calendars/{calendarId}/acl/GET/path/calendarId`.
                public var calendarId: Swift.String
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - calendarId: Calendar identifier. To retrieve calendar IDs call the calendarList.list method. If you want to access the primary calendar of the currently logged in user, use the "primary" keyword.
                public init(calendarId: Swift.String) {
                    self.calendarId = calendarId
                }
            }
            public var path: Operations.Calendar_acl_list.Input.Path
            /// - Remark: Generated from `#/paths/calendars/{calendarId}/acl/GET/query`.
            public struct Query: Sendable, Hashable {
                /// - Remark: Generated from `#/components/parameters/alt`.
                @frozen public enum Alt: String, Codable, Hashable, Sendable, CaseIterable {
                    case json = "json"
                }
                /// Data format for the response.
                ///
                /// - Remark: Generated from `#/paths/calendars/{calendarId}/acl/GET/query/alt`.
                public var alt: Components.Parameters.Alt?
                /// Selector specifying which fields to include in a partial response.
                ///
                /// - Remark: Generated from `#/paths/calendars/{calendarId}/acl/GET/query/fields`.
                public var fields: Components.Parameters.Fields?
                /// API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
                ///
                /// - Remark: Generated from `#/paths/calendars/{calendarId}/acl/GET/query/key`.
                public var key: Components.Parameters.Key?
                /// OAuth 2.0 token for the current user.
                ///
                /// - Remark: Generated from `#/paths/calendars/{calendarId}/acl/GET/query/oauth_token`.
                public var oauthToken: Components.Parameters.OauthToken?
                /// Returns response with indentations and line breaks.
                ///
                /// - Remark: Generated from `#/paths/calendars/{calendarId}/acl/GET/query/prettyPrint`.
                public var prettyPrint: Components.Parameters.PrettyPrint?
                /// An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
                ///
                /// - Remark: Generated from `#/paths/calendars/{calendarId}/acl/GET/query/quotaUser`.
                public var quotaUser: Components.Parameters.QuotaUser?
                /// Deprecated. Please use quotaUser instead.
                ///
                /// - Remark: Generated from `#/paths/calendars/{calendarId}/acl/GET/query/userIp`.
                public var userIp: Components.Parameters.UserIp?
                /// Maximum number of entries returned on one result page. By default the value is 100 entries. The page size can never be larger than 250 entries. Optional.
                ///
                /// - Remark: Generated from `#/paths/calendars/{calendarId}/acl/GET/query/maxResults`.
                public var maxResults: Swift.Int?
                /// Token specifying which result page to return. Optional.
                ///
                /// - Remark: Generated from `#/paths/calendars/{calendarId}/acl/GET/query/pageToken`.
                public var pageToken: Swift.String?
                /// Whether to include deleted ACLs in the result. Deleted ACLs are represented by role equal to "none". Deleted ACLs will always be included if syncToken is provided. Optional. The default is False.
                ///
                /// - Remark: Generated from `#/paths/calendars/{calendarId}/acl/GET/query/showDeleted`.
                public var showDeleted: Swift.Bool?
                /// Token obtained from the nextSyncToken field returned on the last page of results from the previous list request. It makes the result of this list request contain only entries that have changed since then. All entries deleted since the previous list request will always be in the result set and it is not allowed to set showDeleted to False.
                /// If the syncToken expires, the server will respond with a 410 GONE response code and the client should clear its storage and perform a full synchronization without any syncToken.
                /// Learn more about incremental synchronization.
                /// Optional. The default is to return all entries.
                ///
                /// - Remark: Generated from `#/paths/calendars/{calendarId}/acl/GET/query/syncToken`.
                public var syncToken: Swift.String?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - alt: Data format for the response.
                ///   - fields: Selector specifying which fields to include in a partial response.
                ///   - key: API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
                ///   - oauthToken: OAuth 2.0 token for the current user.
                ///   - prettyPrint: Returns response with indentations and line breaks.
                ///   - quotaUser: An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
                ///   - userIp: Deprecated. Please use quotaUser instead.
                ///   - maxResults: Maximum number of entries returned on one result page. By default the value is 100 entries. The page size can never be larger than 250 entries. Optional.
                ///   - pageToken: Token specifying which result page to return. Optional.
                ///   - showDeleted: Whether to include deleted ACLs in the result. Deleted ACLs are represented by role equal to "none". Deleted ACLs will always be included if syncToken is provided. Optional. The default is False.
                ///   - syncToken: Token obtained from the nextSyncToken field returned on the last page of results from the previous list request. It makes the result of this list request contain only entries that have changed since then. All entries deleted since the previous list request will always be in the result set and it is not allowed to set showDeleted to False.
                public init(
                    alt: Components.Parameters.Alt? = nil,
                    fields: Components.Parameters.Fields? = nil,
                    key: Components.Parameters.Key? = nil,
                    oauthToken: Components.Parameters.OauthToken? = nil,
                    prettyPrint: Components.Parameters.PrettyPrint? = nil,
                    quotaUser: Components.Parameters.QuotaUser? = nil,
                    userIp: Components.Parameters.UserIp? = nil,
                    maxResults: Swift.Int? = nil,
                    pageToken: Swift.String? = nil,
                    showDeleted: Swift.Bool? = nil,
                    syncToken: Swift.String? = nil
                ) {
                    self.alt = alt
                    self.fields = fields
                    self.key = key
                    self.oauthToken = oauthToken
                    self.prettyPrint = prettyPrint
                    self.quotaUser = quotaUser
                    self.userIp = userIp
                    self.maxResults = maxResults
                    self.pageToken = pageToken
                    self.showDeleted = showDeleted
                    self.syncToken = syncToken
                }
            }
            public var query: Operations.Calendar_acl_list.Input.Query
            /// - Remark: Generated from `#/paths/calendars/{calendarId}/acl/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.Calendar_acl_list.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.Calendar_acl_list.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.Calendar_acl_list.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - query:
            ///   - headers:
            public init(
                path: Operations.Calendar_acl_list.Input.Path,
                query: Operations.Calendar_acl_list.Input.Query = .init(),
                headers: Operations.Calendar_acl_list.Input.Headers = .init()
            ) {
                self.path = path
                self.query = query
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/calendars/{calendarId}/acl/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/calendars/{calendarId}/acl/GET/responses/200/content/application\/json`.
                    case json(Components.Schemas.Acl)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.Acl {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.Calendar_acl_list.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.Calendar_acl_list.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Successful response
            ///
            /// - Remark: Generated from `#/paths//calendars/{calendarId}/acl/get(calendar.acl.list)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.Calendar_acl_list.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.Calendar_acl_list.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Creates an access control rule.
    ///
    /// - Remark: HTTP `POST /calendars/{calendarId}/acl`.
    /// - Remark: Generated from `#/paths//calendars/{calendarId}/acl/post(calendar.acl.insert)`.
    public enum Calendar_acl_insert {
        public static let id: Swift.String = "calendar.acl.insert"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/calendars/{calendarId}/acl/POST/path`.
            public struct Path: Sendable, Hashable {
                /// Calendar identifier. To retrieve calendar IDs call the calendarList.list method. If you want to access the primary calendar of the currently logged in user, use the "primary" keyword.
                ///
                /// - Remark: Generated from `#/paths/calendars/{calendarId}/acl/POST/path/calendarId`.
                public var calendarId: Swift.String
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - calendarId: Calendar identifier. To retrieve calendar IDs call the calendarList.list method. If you want to access the primary calendar of the currently logged in user, use the "primary" keyword.
                public init(calendarId: Swift.String) {
                    self.calendarId = calendarId
                }
            }
            public var path: Operations.Calendar_acl_insert.Input.Path
            /// - Remark: Generated from `#/paths/calendars/{calendarId}/acl/POST/query`.
            public struct Query: Sendable, Hashable {
                /// - Remark: Generated from `#/components/parameters/alt`.
                @frozen public enum Alt: String, Codable, Hashable, Sendable, CaseIterable {
                    case json = "json"
                }
                /// Data format for the response.
                ///
                /// - Remark: Generated from `#/paths/calendars/{calendarId}/acl/POST/query/alt`.
                public var alt: Components.Parameters.Alt?
                /// Selector specifying which fields to include in a partial response.
                ///
                /// - Remark: Generated from `#/paths/calendars/{calendarId}/acl/POST/query/fields`.
                public var fields: Components.Parameters.Fields?
                /// API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
                ///
                /// - Remark: Generated from `#/paths/calendars/{calendarId}/acl/POST/query/key`.
                public var key: Components.Parameters.Key?
                /// OAuth 2.0 token for the current user.
                ///
                /// - Remark: Generated from `#/paths/calendars/{calendarId}/acl/POST/query/oauth_token`.
                public var oauthToken: Components.Parameters.OauthToken?
                /// Returns response with indentations and line breaks.
                ///
                /// - Remark: Generated from `#/paths/calendars/{calendarId}/acl/POST/query/prettyPrint`.
                public var prettyPrint: Components.Parameters.PrettyPrint?
                /// An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
                ///
                /// - Remark: Generated from `#/paths/calendars/{calendarId}/acl/POST/query/quotaUser`.
                public var quotaUser: Components.Parameters.QuotaUser?
                /// Deprecated. Please use quotaUser instead.
                ///
                /// - Remark: Generated from `#/paths/calendars/{calendarId}/acl/POST/query/userIp`.
                public var userIp: Components.Parameters.UserIp?
                /// Whether to send notifications about the calendar sharing change. Optional. The default is True.
                ///
                /// - Remark: Generated from `#/paths/calendars/{calendarId}/acl/POST/query/sendNotifications`.
                public var sendNotifications: Swift.Bool?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - alt: Data format for the response.
                ///   - fields: Selector specifying which fields to include in a partial response.
                ///   - key: API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
                ///   - oauthToken: OAuth 2.0 token for the current user.
                ///   - prettyPrint: Returns response with indentations and line breaks.
                ///   - quotaUser: An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
                ///   - userIp: Deprecated. Please use quotaUser instead.
                ///   - sendNotifications: Whether to send notifications about the calendar sharing change. Optional. The default is True.
                public init(
                    alt: Components.Parameters.Alt? = nil,
                    fields: Components.Parameters.Fields? = nil,
                    key: Components.Parameters.Key? = nil,
                    oauthToken: Components.Parameters.OauthToken? = nil,
                    prettyPrint: Components.Parameters.PrettyPrint? = nil,
                    quotaUser: Components.Parameters.QuotaUser? = nil,
                    userIp: Components.Parameters.UserIp? = nil,
                    sendNotifications: Swift.Bool? = nil
                ) {
                    self.alt = alt
                    self.fields = fields
                    self.key = key
                    self.oauthToken = oauthToken
                    self.prettyPrint = prettyPrint
                    self.quotaUser = quotaUser
                    self.userIp = userIp
                    self.sendNotifications = sendNotifications
                }
            }
            public var query: Operations.Calendar_acl_insert.Input.Query
            /// - Remark: Generated from `#/paths/calendars/{calendarId}/acl/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.Calendar_acl_insert.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.Calendar_acl_insert.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.Calendar_acl_insert.Input.Headers
            /// - Remark: Generated from `#/paths/calendars/{calendarId}/acl/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/calendars/{calendarId}/acl/POST/requestBody/content/application\/json`.
                case json(Components.Schemas.AclRule)
            }
            public var body: Operations.Calendar_acl_insert.Input.Body?
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - query:
            ///   - headers:
            ///   - body:
            public init(
                path: Operations.Calendar_acl_insert.Input.Path,
                query: Operations.Calendar_acl_insert.Input.Query = .init(),
                headers: Operations.Calendar_acl_insert.Input.Headers = .init(),
                body: Operations.Calendar_acl_insert.Input.Body? = nil
            ) {
                self.path = path
                self.query = query
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/calendars/{calendarId}/acl/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/calendars/{calendarId}/acl/POST/responses/200/content/application\/json`.
                    case json(Components.Schemas.AclRule)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.AclRule {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.Calendar_acl_insert.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.Calendar_acl_insert.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Successful response
            ///
            /// - Remark: Generated from `#/paths//calendars/{calendarId}/acl/post(calendar.acl.insert)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.Calendar_acl_insert.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.Calendar_acl_insert.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Watch for changes to ACL resources.
    ///
    /// - Remark: HTTP `POST /calendars/{calendarId}/acl/watch`.
    /// - Remark: Generated from `#/paths//calendars/{calendarId}/acl/watch/post(calendar.acl.watch)`.
    public enum Calendar_acl_watch {
        public static let id: Swift.String = "calendar.acl.watch"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/calendars/{calendarId}/acl/watch/POST/path`.
            public struct Path: Sendable, Hashable {
                /// Calendar identifier. To retrieve calendar IDs call the calendarList.list method. If you want to access the primary calendar of the currently logged in user, use the "primary" keyword.
                ///
                /// - Remark: Generated from `#/paths/calendars/{calendarId}/acl/watch/POST/path/calendarId`.
                public var calendarId: Swift.String
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - calendarId: Calendar identifier. To retrieve calendar IDs call the calendarList.list method. If you want to access the primary calendar of the currently logged in user, use the "primary" keyword.
                public init(calendarId: Swift.String) {
                    self.calendarId = calendarId
                }
            }
            public var path: Operations.Calendar_acl_watch.Input.Path
            /// - Remark: Generated from `#/paths/calendars/{calendarId}/acl/watch/POST/query`.
            public struct Query: Sendable, Hashable {
                /// - Remark: Generated from `#/components/parameters/alt`.
                @frozen public enum Alt: String, Codable, Hashable, Sendable, CaseIterable {
                    case json = "json"
                }
                /// Data format for the response.
                ///
                /// - Remark: Generated from `#/paths/calendars/{calendarId}/acl/watch/POST/query/alt`.
                public var alt: Components.Parameters.Alt?
                /// Selector specifying which fields to include in a partial response.
                ///
                /// - Remark: Generated from `#/paths/calendars/{calendarId}/acl/watch/POST/query/fields`.
                public var fields: Components.Parameters.Fields?
                /// API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
                ///
                /// - Remark: Generated from `#/paths/calendars/{calendarId}/acl/watch/POST/query/key`.
                public var key: Components.Parameters.Key?
                /// OAuth 2.0 token for the current user.
                ///
                /// - Remark: Generated from `#/paths/calendars/{calendarId}/acl/watch/POST/query/oauth_token`.
                public var oauthToken: Components.Parameters.OauthToken?
                /// Returns response with indentations and line breaks.
                ///
                /// - Remark: Generated from `#/paths/calendars/{calendarId}/acl/watch/POST/query/prettyPrint`.
                public var prettyPrint: Components.Parameters.PrettyPrint?
                /// An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
                ///
                /// - Remark: Generated from `#/paths/calendars/{calendarId}/acl/watch/POST/query/quotaUser`.
                public var quotaUser: Components.Parameters.QuotaUser?
                /// Deprecated. Please use quotaUser instead.
                ///
                /// - Remark: Generated from `#/paths/calendars/{calendarId}/acl/watch/POST/query/userIp`.
                public var userIp: Components.Parameters.UserIp?
                /// Maximum number of entries returned on one result page. By default the value is 100 entries. The page size can never be larger than 250 entries. Optional.
                ///
                /// - Remark: Generated from `#/paths/calendars/{calendarId}/acl/watch/POST/query/maxResults`.
                public var maxResults: Swift.Int?
                /// Token specifying which result page to return. Optional.
                ///
                /// - Remark: Generated from `#/paths/calendars/{calendarId}/acl/watch/POST/query/pageToken`.
                public var pageToken: Swift.String?
                /// Whether to include deleted ACLs in the result. Deleted ACLs are represented by role equal to "none". Deleted ACLs will always be included if syncToken is provided. Optional. The default is False.
                ///
                /// - Remark: Generated from `#/paths/calendars/{calendarId}/acl/watch/POST/query/showDeleted`.
                public var showDeleted: Swift.Bool?
                /// Token obtained from the nextSyncToken field returned on the last page of results from the previous list request. It makes the result of this list request contain only entries that have changed since then. All entries deleted since the previous list request will always be in the result set and it is not allowed to set showDeleted to False.
                /// If the syncToken expires, the server will respond with a 410 GONE response code and the client should clear its storage and perform a full synchronization without any syncToken.
                /// Learn more about incremental synchronization.
                /// Optional. The default is to return all entries.
                ///
                /// - Remark: Generated from `#/paths/calendars/{calendarId}/acl/watch/POST/query/syncToken`.
                public var syncToken: Swift.String?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - alt: Data format for the response.
                ///   - fields: Selector specifying which fields to include in a partial response.
                ///   - key: API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
                ///   - oauthToken: OAuth 2.0 token for the current user.
                ///   - prettyPrint: Returns response with indentations and line breaks.
                ///   - quotaUser: An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
                ///   - userIp: Deprecated. Please use quotaUser instead.
                ///   - maxResults: Maximum number of entries returned on one result page. By default the value is 100 entries. The page size can never be larger than 250 entries. Optional.
                ///   - pageToken: Token specifying which result page to return. Optional.
                ///   - showDeleted: Whether to include deleted ACLs in the result. Deleted ACLs are represented by role equal to "none". Deleted ACLs will always be included if syncToken is provided. Optional. The default is False.
                ///   - syncToken: Token obtained from the nextSyncToken field returned on the last page of results from the previous list request. It makes the result of this list request contain only entries that have changed since then. All entries deleted since the previous list request will always be in the result set and it is not allowed to set showDeleted to False.
                public init(
                    alt: Components.Parameters.Alt? = nil,
                    fields: Components.Parameters.Fields? = nil,
                    key: Components.Parameters.Key? = nil,
                    oauthToken: Components.Parameters.OauthToken? = nil,
                    prettyPrint: Components.Parameters.PrettyPrint? = nil,
                    quotaUser: Components.Parameters.QuotaUser? = nil,
                    userIp: Components.Parameters.UserIp? = nil,
                    maxResults: Swift.Int? = nil,
                    pageToken: Swift.String? = nil,
                    showDeleted: Swift.Bool? = nil,
                    syncToken: Swift.String? = nil
                ) {
                    self.alt = alt
                    self.fields = fields
                    self.key = key
                    self.oauthToken = oauthToken
                    self.prettyPrint = prettyPrint
                    self.quotaUser = quotaUser
                    self.userIp = userIp
                    self.maxResults = maxResults
                    self.pageToken = pageToken
                    self.showDeleted = showDeleted
                    self.syncToken = syncToken
                }
            }
            public var query: Operations.Calendar_acl_watch.Input.Query
            /// - Remark: Generated from `#/paths/calendars/{calendarId}/acl/watch/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.Calendar_acl_watch.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.Calendar_acl_watch.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.Calendar_acl_watch.Input.Headers
            /// - Remark: Generated from `#/paths/calendars/{calendarId}/acl/watch/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/calendars/{calendarId}/acl/watch/POST/requestBody/content/application\/json`.
                case json(Components.Schemas.Channel)
            }
            public var body: Operations.Calendar_acl_watch.Input.Body?
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - query:
            ///   - headers:
            ///   - body:
            public init(
                path: Operations.Calendar_acl_watch.Input.Path,
                query: Operations.Calendar_acl_watch.Input.Query = .init(),
                headers: Operations.Calendar_acl_watch.Input.Headers = .init(),
                body: Operations.Calendar_acl_watch.Input.Body? = nil
            ) {
                self.path = path
                self.query = query
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/calendars/{calendarId}/acl/watch/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/calendars/{calendarId}/acl/watch/POST/responses/200/content/application\/json`.
                    case json(Components.Schemas.Channel)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.Channel {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.Calendar_acl_watch.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.Calendar_acl_watch.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Successful response
            ///
            /// - Remark: Generated from `#/paths//calendars/{calendarId}/acl/watch/post(calendar.acl.watch)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.Calendar_acl_watch.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.Calendar_acl_watch.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Returns an access control rule.
    ///
    /// - Remark: HTTP `GET /calendars/{calendarId}/acl/{ruleId}`.
    /// - Remark: Generated from `#/paths//calendars/{calendarId}/acl/{ruleId}/get(calendar.acl.get)`.
    public enum Calendar_acl_get {
        public static let id: Swift.String = "calendar.acl.get"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/calendars/{calendarId}/acl/{ruleId}/GET/path`.
            public struct Path: Sendable, Hashable {
                /// Calendar identifier. To retrieve calendar IDs call the calendarList.list method. If you want to access the primary calendar of the currently logged in user, use the "primary" keyword.
                ///
                /// - Remark: Generated from `#/paths/calendars/{calendarId}/acl/{ruleId}/GET/path/calendarId`.
                public var calendarId: Swift.String
                /// ACL rule identifier.
                ///
                /// - Remark: Generated from `#/paths/calendars/{calendarId}/acl/{ruleId}/GET/path/ruleId`.
                public var ruleId: Swift.String
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - calendarId: Calendar identifier. To retrieve calendar IDs call the calendarList.list method. If you want to access the primary calendar of the currently logged in user, use the "primary" keyword.
                ///   - ruleId: ACL rule identifier.
                public init(
                    calendarId: Swift.String,
                    ruleId: Swift.String
                ) {
                    self.calendarId = calendarId
                    self.ruleId = ruleId
                }
            }
            public var path: Operations.Calendar_acl_get.Input.Path
            /// - Remark: Generated from `#/paths/calendars/{calendarId}/acl/{ruleId}/GET/query`.
            public struct Query: Sendable, Hashable {
                /// - Remark: Generated from `#/components/parameters/alt`.
                @frozen public enum Alt: String, Codable, Hashable, Sendable, CaseIterable {
                    case json = "json"
                }
                /// Data format for the response.
                ///
                /// - Remark: Generated from `#/paths/calendars/{calendarId}/acl/{ruleId}/GET/query/alt`.
                public var alt: Components.Parameters.Alt?
                /// Selector specifying which fields to include in a partial response.
                ///
                /// - Remark: Generated from `#/paths/calendars/{calendarId}/acl/{ruleId}/GET/query/fields`.
                public var fields: Components.Parameters.Fields?
                /// API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
                ///
                /// - Remark: Generated from `#/paths/calendars/{calendarId}/acl/{ruleId}/GET/query/key`.
                public var key: Components.Parameters.Key?
                /// OAuth 2.0 token for the current user.
                ///
                /// - Remark: Generated from `#/paths/calendars/{calendarId}/acl/{ruleId}/GET/query/oauth_token`.
                public var oauthToken: Components.Parameters.OauthToken?
                /// Returns response with indentations and line breaks.
                ///
                /// - Remark: Generated from `#/paths/calendars/{calendarId}/acl/{ruleId}/GET/query/prettyPrint`.
                public var prettyPrint: Components.Parameters.PrettyPrint?
                /// An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
                ///
                /// - Remark: Generated from `#/paths/calendars/{calendarId}/acl/{ruleId}/GET/query/quotaUser`.
                public var quotaUser: Components.Parameters.QuotaUser?
                /// Deprecated. Please use quotaUser instead.
                ///
                /// - Remark: Generated from `#/paths/calendars/{calendarId}/acl/{ruleId}/GET/query/userIp`.
                public var userIp: Components.Parameters.UserIp?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - alt: Data format for the response.
                ///   - fields: Selector specifying which fields to include in a partial response.
                ///   - key: API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
                ///   - oauthToken: OAuth 2.0 token for the current user.
                ///   - prettyPrint: Returns response with indentations and line breaks.
                ///   - quotaUser: An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
                ///   - userIp: Deprecated. Please use quotaUser instead.
                public init(
                    alt: Components.Parameters.Alt? = nil,
                    fields: Components.Parameters.Fields? = nil,
                    key: Components.Parameters.Key? = nil,
                    oauthToken: Components.Parameters.OauthToken? = nil,
                    prettyPrint: Components.Parameters.PrettyPrint? = nil,
                    quotaUser: Components.Parameters.QuotaUser? = nil,
                    userIp: Components.Parameters.UserIp? = nil
                ) {
                    self.alt = alt
                    self.fields = fields
                    self.key = key
                    self.oauthToken = oauthToken
                    self.prettyPrint = prettyPrint
                    self.quotaUser = quotaUser
                    self.userIp = userIp
                }
            }
            public var query: Operations.Calendar_acl_get.Input.Query
            /// - Remark: Generated from `#/paths/calendars/{calendarId}/acl/{ruleId}/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.Calendar_acl_get.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.Calendar_acl_get.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.Calendar_acl_get.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - query:
            ///   - headers:
            public init(
                path: Operations.Calendar_acl_get.Input.Path,
                query: Operations.Calendar_acl_get.Input.Query = .init(),
                headers: Operations.Calendar_acl_get.Input.Headers = .init()
            ) {
                self.path = path
                self.query = query
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/calendars/{calendarId}/acl/{ruleId}/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/calendars/{calendarId}/acl/{ruleId}/GET/responses/200/content/application\/json`.
                    case json(Components.Schemas.AclRule)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.AclRule {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.Calendar_acl_get.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.Calendar_acl_get.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Successful response
            ///
            /// - Remark: Generated from `#/paths//calendars/{calendarId}/acl/{ruleId}/get(calendar.acl.get)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.Calendar_acl_get.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.Calendar_acl_get.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Updates an access control rule. This method supports patch semantics.
    ///
    /// - Remark: HTTP `PATCH /calendars/{calendarId}/acl/{ruleId}`.
    /// - Remark: Generated from `#/paths//calendars/{calendarId}/acl/{ruleId}/patch(calendar.acl.patch)`.
    public enum Calendar_acl_patch {
        public static let id: Swift.String = "calendar.acl.patch"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/calendars/{calendarId}/acl/{ruleId}/PATCH/path`.
            public struct Path: Sendable, Hashable {
                /// Calendar identifier. To retrieve calendar IDs call the calendarList.list method. If you want to access the primary calendar of the currently logged in user, use the "primary" keyword.
                ///
                /// - Remark: Generated from `#/paths/calendars/{calendarId}/acl/{ruleId}/PATCH/path/calendarId`.
                public var calendarId: Swift.String
                /// ACL rule identifier.
                ///
                /// - Remark: Generated from `#/paths/calendars/{calendarId}/acl/{ruleId}/PATCH/path/ruleId`.
                public var ruleId: Swift.String
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - calendarId: Calendar identifier. To retrieve calendar IDs call the calendarList.list method. If you want to access the primary calendar of the currently logged in user, use the "primary" keyword.
                ///   - ruleId: ACL rule identifier.
                public init(
                    calendarId: Swift.String,
                    ruleId: Swift.String
                ) {
                    self.calendarId = calendarId
                    self.ruleId = ruleId
                }
            }
            public var path: Operations.Calendar_acl_patch.Input.Path
            /// - Remark: Generated from `#/paths/calendars/{calendarId}/acl/{ruleId}/PATCH/query`.
            public struct Query: Sendable, Hashable {
                /// - Remark: Generated from `#/components/parameters/alt`.
                @frozen public enum Alt: String, Codable, Hashable, Sendable, CaseIterable {
                    case json = "json"
                }
                /// Data format for the response.
                ///
                /// - Remark: Generated from `#/paths/calendars/{calendarId}/acl/{ruleId}/PATCH/query/alt`.
                public var alt: Components.Parameters.Alt?
                /// Selector specifying which fields to include in a partial response.
                ///
                /// - Remark: Generated from `#/paths/calendars/{calendarId}/acl/{ruleId}/PATCH/query/fields`.
                public var fields: Components.Parameters.Fields?
                /// API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
                ///
                /// - Remark: Generated from `#/paths/calendars/{calendarId}/acl/{ruleId}/PATCH/query/key`.
                public var key: Components.Parameters.Key?
                /// OAuth 2.0 token for the current user.
                ///
                /// - Remark: Generated from `#/paths/calendars/{calendarId}/acl/{ruleId}/PATCH/query/oauth_token`.
                public var oauthToken: Components.Parameters.OauthToken?
                /// Returns response with indentations and line breaks.
                ///
                /// - Remark: Generated from `#/paths/calendars/{calendarId}/acl/{ruleId}/PATCH/query/prettyPrint`.
                public var prettyPrint: Components.Parameters.PrettyPrint?
                /// An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
                ///
                /// - Remark: Generated from `#/paths/calendars/{calendarId}/acl/{ruleId}/PATCH/query/quotaUser`.
                public var quotaUser: Components.Parameters.QuotaUser?
                /// Deprecated. Please use quotaUser instead.
                ///
                /// - Remark: Generated from `#/paths/calendars/{calendarId}/acl/{ruleId}/PATCH/query/userIp`.
                public var userIp: Components.Parameters.UserIp?
                /// Whether to send notifications about the calendar sharing change. Note that there are no notifications on access removal. Optional. The default is True.
                ///
                /// - Remark: Generated from `#/paths/calendars/{calendarId}/acl/{ruleId}/PATCH/query/sendNotifications`.
                public var sendNotifications: Swift.Bool?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - alt: Data format for the response.
                ///   - fields: Selector specifying which fields to include in a partial response.
                ///   - key: API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
                ///   - oauthToken: OAuth 2.0 token for the current user.
                ///   - prettyPrint: Returns response with indentations and line breaks.
                ///   - quotaUser: An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
                ///   - userIp: Deprecated. Please use quotaUser instead.
                ///   - sendNotifications: Whether to send notifications about the calendar sharing change. Note that there are no notifications on access removal. Optional. The default is True.
                public init(
                    alt: Components.Parameters.Alt? = nil,
                    fields: Components.Parameters.Fields? = nil,
                    key: Components.Parameters.Key? = nil,
                    oauthToken: Components.Parameters.OauthToken? = nil,
                    prettyPrint: Components.Parameters.PrettyPrint? = nil,
                    quotaUser: Components.Parameters.QuotaUser? = nil,
                    userIp: Components.Parameters.UserIp? = nil,
                    sendNotifications: Swift.Bool? = nil
                ) {
                    self.alt = alt
                    self.fields = fields
                    self.key = key
                    self.oauthToken = oauthToken
                    self.prettyPrint = prettyPrint
                    self.quotaUser = quotaUser
                    self.userIp = userIp
                    self.sendNotifications = sendNotifications
                }
            }
            public var query: Operations.Calendar_acl_patch.Input.Query
            /// - Remark: Generated from `#/paths/calendars/{calendarId}/acl/{ruleId}/PATCH/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.Calendar_acl_patch.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.Calendar_acl_patch.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.Calendar_acl_patch.Input.Headers
            /// - Remark: Generated from `#/paths/calendars/{calendarId}/acl/{ruleId}/PATCH/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/calendars/{calendarId}/acl/{ruleId}/PATCH/requestBody/content/application\/json`.
                case json(Components.Schemas.AclRule)
            }
            public var body: Operations.Calendar_acl_patch.Input.Body?
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - query:
            ///   - headers:
            ///   - body:
            public init(
                path: Operations.Calendar_acl_patch.Input.Path,
                query: Operations.Calendar_acl_patch.Input.Query = .init(),
                headers: Operations.Calendar_acl_patch.Input.Headers = .init(),
                body: Operations.Calendar_acl_patch.Input.Body? = nil
            ) {
                self.path = path
                self.query = query
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/calendars/{calendarId}/acl/{ruleId}/PATCH/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/calendars/{calendarId}/acl/{ruleId}/PATCH/responses/200/content/application\/json`.
                    case json(Components.Schemas.AclRule)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.AclRule {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.Calendar_acl_patch.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.Calendar_acl_patch.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Successful response
            ///
            /// - Remark: Generated from `#/paths//calendars/{calendarId}/acl/{ruleId}/patch(calendar.acl.patch)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.Calendar_acl_patch.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.Calendar_acl_patch.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Updates an access control rule.
    ///
    /// - Remark: HTTP `PUT /calendars/{calendarId}/acl/{ruleId}`.
    /// - Remark: Generated from `#/paths//calendars/{calendarId}/acl/{ruleId}/put(calendar.acl.update)`.
    public enum Calendar_acl_update {
        public static let id: Swift.String = "calendar.acl.update"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/calendars/{calendarId}/acl/{ruleId}/PUT/path`.
            public struct Path: Sendable, Hashable {
                /// Calendar identifier. To retrieve calendar IDs call the calendarList.list method. If you want to access the primary calendar of the currently logged in user, use the "primary" keyword.
                ///
                /// - Remark: Generated from `#/paths/calendars/{calendarId}/acl/{ruleId}/PUT/path/calendarId`.
                public var calendarId: Swift.String
                /// ACL rule identifier.
                ///
                /// - Remark: Generated from `#/paths/calendars/{calendarId}/acl/{ruleId}/PUT/path/ruleId`.
                public var ruleId: Swift.String
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - calendarId: Calendar identifier. To retrieve calendar IDs call the calendarList.list method. If you want to access the primary calendar of the currently logged in user, use the "primary" keyword.
                ///   - ruleId: ACL rule identifier.
                public init(
                    calendarId: Swift.String,
                    ruleId: Swift.String
                ) {
                    self.calendarId = calendarId
                    self.ruleId = ruleId
                }
            }
            public var path: Operations.Calendar_acl_update.Input.Path
            /// - Remark: Generated from `#/paths/calendars/{calendarId}/acl/{ruleId}/PUT/query`.
            public struct Query: Sendable, Hashable {
                /// - Remark: Generated from `#/components/parameters/alt`.
                @frozen public enum Alt: String, Codable, Hashable, Sendable, CaseIterable {
                    case json = "json"
                }
                /// Data format for the response.
                ///
                /// - Remark: Generated from `#/paths/calendars/{calendarId}/acl/{ruleId}/PUT/query/alt`.
                public var alt: Components.Parameters.Alt?
                /// Selector specifying which fields to include in a partial response.
                ///
                /// - Remark: Generated from `#/paths/calendars/{calendarId}/acl/{ruleId}/PUT/query/fields`.
                public var fields: Components.Parameters.Fields?
                /// API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
                ///
                /// - Remark: Generated from `#/paths/calendars/{calendarId}/acl/{ruleId}/PUT/query/key`.
                public var key: Components.Parameters.Key?
                /// OAuth 2.0 token for the current user.
                ///
                /// - Remark: Generated from `#/paths/calendars/{calendarId}/acl/{ruleId}/PUT/query/oauth_token`.
                public var oauthToken: Components.Parameters.OauthToken?
                /// Returns response with indentations and line breaks.
                ///
                /// - Remark: Generated from `#/paths/calendars/{calendarId}/acl/{ruleId}/PUT/query/prettyPrint`.
                public var prettyPrint: Components.Parameters.PrettyPrint?
                /// An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
                ///
                /// - Remark: Generated from `#/paths/calendars/{calendarId}/acl/{ruleId}/PUT/query/quotaUser`.
                public var quotaUser: Components.Parameters.QuotaUser?
                /// Deprecated. Please use quotaUser instead.
                ///
                /// - Remark: Generated from `#/paths/calendars/{calendarId}/acl/{ruleId}/PUT/query/userIp`.
                public var userIp: Components.Parameters.UserIp?
                /// Whether to send notifications about the calendar sharing change. Note that there are no notifications on access removal. Optional. The default is True.
                ///
                /// - Remark: Generated from `#/paths/calendars/{calendarId}/acl/{ruleId}/PUT/query/sendNotifications`.
                public var sendNotifications: Swift.Bool?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - alt: Data format for the response.
                ///   - fields: Selector specifying which fields to include in a partial response.
                ///   - key: API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
                ///   - oauthToken: OAuth 2.0 token for the current user.
                ///   - prettyPrint: Returns response with indentations and line breaks.
                ///   - quotaUser: An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
                ///   - userIp: Deprecated. Please use quotaUser instead.
                ///   - sendNotifications: Whether to send notifications about the calendar sharing change. Note that there are no notifications on access removal. Optional. The default is True.
                public init(
                    alt: Components.Parameters.Alt? = nil,
                    fields: Components.Parameters.Fields? = nil,
                    key: Components.Parameters.Key? = nil,
                    oauthToken: Components.Parameters.OauthToken? = nil,
                    prettyPrint: Components.Parameters.PrettyPrint? = nil,
                    quotaUser: Components.Parameters.QuotaUser? = nil,
                    userIp: Components.Parameters.UserIp? = nil,
                    sendNotifications: Swift.Bool? = nil
                ) {
                    self.alt = alt
                    self.fields = fields
                    self.key = key
                    self.oauthToken = oauthToken
                    self.prettyPrint = prettyPrint
                    self.quotaUser = quotaUser
                    self.userIp = userIp
                    self.sendNotifications = sendNotifications
                }
            }
            public var query: Operations.Calendar_acl_update.Input.Query
            /// - Remark: Generated from `#/paths/calendars/{calendarId}/acl/{ruleId}/PUT/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.Calendar_acl_update.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.Calendar_acl_update.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.Calendar_acl_update.Input.Headers
            /// - Remark: Generated from `#/paths/calendars/{calendarId}/acl/{ruleId}/PUT/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/calendars/{calendarId}/acl/{ruleId}/PUT/requestBody/content/application\/json`.
                case json(Components.Schemas.AclRule)
            }
            public var body: Operations.Calendar_acl_update.Input.Body?
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - query:
            ///   - headers:
            ///   - body:
            public init(
                path: Operations.Calendar_acl_update.Input.Path,
                query: Operations.Calendar_acl_update.Input.Query = .init(),
                headers: Operations.Calendar_acl_update.Input.Headers = .init(),
                body: Operations.Calendar_acl_update.Input.Body? = nil
            ) {
                self.path = path
                self.query = query
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/calendars/{calendarId}/acl/{ruleId}/PUT/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/calendars/{calendarId}/acl/{ruleId}/PUT/responses/200/content/application\/json`.
                    case json(Components.Schemas.AclRule)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.AclRule {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.Calendar_acl_update.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.Calendar_acl_update.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Successful response
            ///
            /// - Remark: Generated from `#/paths//calendars/{calendarId}/acl/{ruleId}/put(calendar.acl.update)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.Calendar_acl_update.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.Calendar_acl_update.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Deletes an access control rule.
    ///
    /// - Remark: HTTP `DELETE /calendars/{calendarId}/acl/{ruleId}`.
    /// - Remark: Generated from `#/paths//calendars/{calendarId}/acl/{ruleId}/delete(calendar.acl.delete)`.
    public enum Calendar_acl_delete {
        public static let id: Swift.String = "calendar.acl.delete"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/calendars/{calendarId}/acl/{ruleId}/DELETE/path`.
            public struct Path: Sendable, Hashable {
                /// Calendar identifier. To retrieve calendar IDs call the calendarList.list method. If you want to access the primary calendar of the currently logged in user, use the "primary" keyword.
                ///
                /// - Remark: Generated from `#/paths/calendars/{calendarId}/acl/{ruleId}/DELETE/path/calendarId`.
                public var calendarId: Swift.String
                /// ACL rule identifier.
                ///
                /// - Remark: Generated from `#/paths/calendars/{calendarId}/acl/{ruleId}/DELETE/path/ruleId`.
                public var ruleId: Swift.String
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - calendarId: Calendar identifier. To retrieve calendar IDs call the calendarList.list method. If you want to access the primary calendar of the currently logged in user, use the "primary" keyword.
                ///   - ruleId: ACL rule identifier.
                public init(
                    calendarId: Swift.String,
                    ruleId: Swift.String
                ) {
                    self.calendarId = calendarId
                    self.ruleId = ruleId
                }
            }
            public var path: Operations.Calendar_acl_delete.Input.Path
            /// - Remark: Generated from `#/paths/calendars/{calendarId}/acl/{ruleId}/DELETE/query`.
            public struct Query: Sendable, Hashable {
                /// - Remark: Generated from `#/components/parameters/alt`.
                @frozen public enum Alt: String, Codable, Hashable, Sendable, CaseIterable {
                    case json = "json"
                }
                /// Data format for the response.
                ///
                /// - Remark: Generated from `#/paths/calendars/{calendarId}/acl/{ruleId}/DELETE/query/alt`.
                public var alt: Components.Parameters.Alt?
                /// Selector specifying which fields to include in a partial response.
                ///
                /// - Remark: Generated from `#/paths/calendars/{calendarId}/acl/{ruleId}/DELETE/query/fields`.
                public var fields: Components.Parameters.Fields?
                /// API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
                ///
                /// - Remark: Generated from `#/paths/calendars/{calendarId}/acl/{ruleId}/DELETE/query/key`.
                public var key: Components.Parameters.Key?
                /// OAuth 2.0 token for the current user.
                ///
                /// - Remark: Generated from `#/paths/calendars/{calendarId}/acl/{ruleId}/DELETE/query/oauth_token`.
                public var oauthToken: Components.Parameters.OauthToken?
                /// Returns response with indentations and line breaks.
                ///
                /// - Remark: Generated from `#/paths/calendars/{calendarId}/acl/{ruleId}/DELETE/query/prettyPrint`.
                public var prettyPrint: Components.Parameters.PrettyPrint?
                /// An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
                ///
                /// - Remark: Generated from `#/paths/calendars/{calendarId}/acl/{ruleId}/DELETE/query/quotaUser`.
                public var quotaUser: Components.Parameters.QuotaUser?
                /// Deprecated. Please use quotaUser instead.
                ///
                /// - Remark: Generated from `#/paths/calendars/{calendarId}/acl/{ruleId}/DELETE/query/userIp`.
                public var userIp: Components.Parameters.UserIp?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - alt: Data format for the response.
                ///   - fields: Selector specifying which fields to include in a partial response.
                ///   - key: API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
                ///   - oauthToken: OAuth 2.0 token for the current user.
                ///   - prettyPrint: Returns response with indentations and line breaks.
                ///   - quotaUser: An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
                ///   - userIp: Deprecated. Please use quotaUser instead.
                public init(
                    alt: Components.Parameters.Alt? = nil,
                    fields: Components.Parameters.Fields? = nil,
                    key: Components.Parameters.Key? = nil,
                    oauthToken: Components.Parameters.OauthToken? = nil,
                    prettyPrint: Components.Parameters.PrettyPrint? = nil,
                    quotaUser: Components.Parameters.QuotaUser? = nil,
                    userIp: Components.Parameters.UserIp? = nil
                ) {
                    self.alt = alt
                    self.fields = fields
                    self.key = key
                    self.oauthToken = oauthToken
                    self.prettyPrint = prettyPrint
                    self.quotaUser = quotaUser
                    self.userIp = userIp
                }
            }
            public var query: Operations.Calendar_acl_delete.Input.Query
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - query:
            public init(
                path: Operations.Calendar_acl_delete.Input.Path,
                query: Operations.Calendar_acl_delete.Input.Query = .init()
            ) {
                self.path = path
                self.query = query
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// Creates a new `Ok`.
                public init() {}
            }
            /// Successful response
            ///
            /// - Remark: Generated from `#/paths//calendars/{calendarId}/acl/{ruleId}/delete(calendar.acl.delete)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.Calendar_acl_delete.Output.Ok)
            /// Successful response
            ///
            /// - Remark: Generated from `#/paths//calendars/{calendarId}/acl/{ruleId}/delete(calendar.acl.delete)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            public static var ok: Self {
                .ok(.init())
            }
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.Calendar_acl_delete.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
    }
    /// Clears a primary calendar. This operation deletes all events associated with the primary calendar of an account.
    ///
    /// - Remark: HTTP `POST /calendars/{calendarId}/clear`.
    /// - Remark: Generated from `#/paths//calendars/{calendarId}/clear/post(calendar.calendars.clear)`.
    public enum Calendar_calendars_clear {
        public static let id: Swift.String = "calendar.calendars.clear"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/calendars/{calendarId}/clear/POST/path`.
            public struct Path: Sendable, Hashable {
                /// Calendar identifier. To retrieve calendar IDs call the calendarList.list method. If you want to access the primary calendar of the currently logged in user, use the "primary" keyword.
                ///
                /// - Remark: Generated from `#/paths/calendars/{calendarId}/clear/POST/path/calendarId`.
                public var calendarId: Swift.String
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - calendarId: Calendar identifier. To retrieve calendar IDs call the calendarList.list method. If you want to access the primary calendar of the currently logged in user, use the "primary" keyword.
                public init(calendarId: Swift.String) {
                    self.calendarId = calendarId
                }
            }
            public var path: Operations.Calendar_calendars_clear.Input.Path
            /// - Remark: Generated from `#/paths/calendars/{calendarId}/clear/POST/query`.
            public struct Query: Sendable, Hashable {
                /// - Remark: Generated from `#/components/parameters/alt`.
                @frozen public enum Alt: String, Codable, Hashable, Sendable, CaseIterable {
                    case json = "json"
                }
                /// Data format for the response.
                ///
                /// - Remark: Generated from `#/paths/calendars/{calendarId}/clear/POST/query/alt`.
                public var alt: Components.Parameters.Alt?
                /// Selector specifying which fields to include in a partial response.
                ///
                /// - Remark: Generated from `#/paths/calendars/{calendarId}/clear/POST/query/fields`.
                public var fields: Components.Parameters.Fields?
                /// API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
                ///
                /// - Remark: Generated from `#/paths/calendars/{calendarId}/clear/POST/query/key`.
                public var key: Components.Parameters.Key?
                /// OAuth 2.0 token for the current user.
                ///
                /// - Remark: Generated from `#/paths/calendars/{calendarId}/clear/POST/query/oauth_token`.
                public var oauthToken: Components.Parameters.OauthToken?
                /// Returns response with indentations and line breaks.
                ///
                /// - Remark: Generated from `#/paths/calendars/{calendarId}/clear/POST/query/prettyPrint`.
                public var prettyPrint: Components.Parameters.PrettyPrint?
                /// An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
                ///
                /// - Remark: Generated from `#/paths/calendars/{calendarId}/clear/POST/query/quotaUser`.
                public var quotaUser: Components.Parameters.QuotaUser?
                /// Deprecated. Please use quotaUser instead.
                ///
                /// - Remark: Generated from `#/paths/calendars/{calendarId}/clear/POST/query/userIp`.
                public var userIp: Components.Parameters.UserIp?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - alt: Data format for the response.
                ///   - fields: Selector specifying which fields to include in a partial response.
                ///   - key: API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
                ///   - oauthToken: OAuth 2.0 token for the current user.
                ///   - prettyPrint: Returns response with indentations and line breaks.
                ///   - quotaUser: An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
                ///   - userIp: Deprecated. Please use quotaUser instead.
                public init(
                    alt: Components.Parameters.Alt? = nil,
                    fields: Components.Parameters.Fields? = nil,
                    key: Components.Parameters.Key? = nil,
                    oauthToken: Components.Parameters.OauthToken? = nil,
                    prettyPrint: Components.Parameters.PrettyPrint? = nil,
                    quotaUser: Components.Parameters.QuotaUser? = nil,
                    userIp: Components.Parameters.UserIp? = nil
                ) {
                    self.alt = alt
                    self.fields = fields
                    self.key = key
                    self.oauthToken = oauthToken
                    self.prettyPrint = prettyPrint
                    self.quotaUser = quotaUser
                    self.userIp = userIp
                }
            }
            public var query: Operations.Calendar_calendars_clear.Input.Query
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - query:
            public init(
                path: Operations.Calendar_calendars_clear.Input.Path,
                query: Operations.Calendar_calendars_clear.Input.Query = .init()
            ) {
                self.path = path
                self.query = query
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// Creates a new `Ok`.
                public init() {}
            }
            /// Successful response
            ///
            /// - Remark: Generated from `#/paths//calendars/{calendarId}/clear/post(calendar.calendars.clear)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.Calendar_calendars_clear.Output.Ok)
            /// Successful response
            ///
            /// - Remark: Generated from `#/paths//calendars/{calendarId}/clear/post(calendar.calendars.clear)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            public static var ok: Self {
                .ok(.init())
            }
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.Calendar_calendars_clear.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
    }
    /// Returns events on the specified calendar.
    ///
    /// - Remark: HTTP `GET /calendars/{calendarId}/events`.
    /// - Remark: Generated from `#/paths//calendars/{calendarId}/events/get(calendar.events.list)`.
    public enum Calendar_events_list {
        public static let id: Swift.String = "calendar.events.list"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/calendars/{calendarId}/events/GET/path`.
            public struct Path: Sendable, Hashable {
                /// Calendar identifier. To retrieve calendar IDs call the calendarList.list method. If you want to access the primary calendar of the currently logged in user, use the "primary" keyword.
                ///
                /// - Remark: Generated from `#/paths/calendars/{calendarId}/events/GET/path/calendarId`.
                public var calendarId: Swift.String
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - calendarId: Calendar identifier. To retrieve calendar IDs call the calendarList.list method. If you want to access the primary calendar of the currently logged in user, use the "primary" keyword.
                public init(calendarId: Swift.String) {
                    self.calendarId = calendarId
                }
            }
            public var path: Operations.Calendar_events_list.Input.Path
            /// - Remark: Generated from `#/paths/calendars/{calendarId}/events/GET/query`.
            public struct Query: Sendable, Hashable {
                /// - Remark: Generated from `#/components/parameters/alt`.
                @frozen public enum Alt: String, Codable, Hashable, Sendable, CaseIterable {
                    case json = "json"
                }
                /// Data format for the response.
                ///
                /// - Remark: Generated from `#/paths/calendars/{calendarId}/events/GET/query/alt`.
                public var alt: Components.Parameters.Alt?
                /// Selector specifying which fields to include in a partial response.
                ///
                /// - Remark: Generated from `#/paths/calendars/{calendarId}/events/GET/query/fields`.
                public var fields: Components.Parameters.Fields?
                /// API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
                ///
                /// - Remark: Generated from `#/paths/calendars/{calendarId}/events/GET/query/key`.
                public var key: Components.Parameters.Key?
                /// OAuth 2.0 token for the current user.
                ///
                /// - Remark: Generated from `#/paths/calendars/{calendarId}/events/GET/query/oauth_token`.
                public var oauthToken: Components.Parameters.OauthToken?
                /// Returns response with indentations and line breaks.
                ///
                /// - Remark: Generated from `#/paths/calendars/{calendarId}/events/GET/query/prettyPrint`.
                public var prettyPrint: Components.Parameters.PrettyPrint?
                /// An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
                ///
                /// - Remark: Generated from `#/paths/calendars/{calendarId}/events/GET/query/quotaUser`.
                public var quotaUser: Components.Parameters.QuotaUser?
                /// Deprecated. Please use quotaUser instead.
                ///
                /// - Remark: Generated from `#/paths/calendars/{calendarId}/events/GET/query/userIp`.
                public var userIp: Components.Parameters.UserIp?
                /// Deprecated and ignored.
                ///
                /// - Remark: Generated from `#/paths/calendars/{calendarId}/events/GET/query/alwaysIncludeEmail`.
                public var alwaysIncludeEmail: Swift.Bool?
                /// - Remark: Generated from `#/paths/calendars/{calendarId}/events/GET/query/EventTypesPayload`.
                @frozen public enum EventTypesPayloadPayload: String, Codable, Hashable, Sendable, CaseIterable {
                    case _default = "default"
                    case focusTime = "focusTime"
                    case outOfOffice = "outOfOffice"
                    case workingLocation = "workingLocation"
                }
                /// - Remark: Generated from `#/paths/calendars/{calendarId}/events/GET/query/eventTypes`.
                public typealias EventTypesPayload = [Operations.Calendar_events_list.Input.Query.EventTypesPayloadPayload]
                /// Event types to return. Optional. This parameter can be repeated multiple times to return events of different types. The default is ["default", "focusTime", "outOfOffice"].
                ///
                /// - Remark: Generated from `#/paths/calendars/{calendarId}/events/GET/query/eventTypes`.
                public var eventTypes: Operations.Calendar_events_list.Input.Query.EventTypesPayload?
                /// Specifies an event ID in the iCalendar format to be provided in the response. Optional. Use this if you want to search for an event by its iCalendar ID.
                ///
                /// - Remark: Generated from `#/paths/calendars/{calendarId}/events/GET/query/iCalUID`.
                public var iCalUID: Swift.String?
                /// The maximum number of attendees to include in the response. If there are more than the specified number of attendees, only the participant is returned. Optional.
                ///
                /// - Remark: Generated from `#/paths/calendars/{calendarId}/events/GET/query/maxAttendees`.
                public var maxAttendees: Swift.Int?
                /// Maximum number of events returned on one result page. The number of events in the resulting page may be less than this value, or none at all, even if there are more events matching the query. Incomplete pages can be detected by a non-empty nextPageToken field in the response. By default the value is 250 events. The page size can never be larger than 2500 events. Optional.
                ///
                /// - Remark: Generated from `#/paths/calendars/{calendarId}/events/GET/query/maxResults`.
                public var maxResults: Swift.Int?
                /// - Remark: Generated from `#/paths/calendars/{calendarId}/events/GET/query/orderBy`.
                @frozen public enum OrderByPayload: String, Codable, Hashable, Sendable, CaseIterable {
                    case startTime = "startTime"
                    case updated = "updated"
                }
                /// The order of the events returned in the result. Optional. The default is an unspecified, stable order.
                ///
                /// - Remark: Generated from `#/paths/calendars/{calendarId}/events/GET/query/orderBy`.
                public var orderBy: Operations.Calendar_events_list.Input.Query.OrderByPayload?
                /// Token specifying which result page to return. Optional.
                ///
                /// - Remark: Generated from `#/paths/calendars/{calendarId}/events/GET/query/pageToken`.
                public var pageToken: Swift.String?
                /// Extended properties constraint specified as propertyName=value. Matches only private properties. This parameter might be repeated multiple times to return events that match all given constraints.
                ///
                /// - Remark: Generated from `#/paths/calendars/{calendarId}/events/GET/query/privateExtendedProperty`.
                public var privateExtendedProperty: [Swift.String]?
                /// Free text search terms to find events that match these terms in the following fields:
                ///
                /// - summary 
                /// - description 
                /// - location 
                /// - attendee's displayName 
                /// - attendee's email 
                /// - organizer's displayName 
                /// - organizer's email 
                /// - workingLocationProperties.officeLocation.buildingId 
                /// - workingLocationProperties.officeLocation.deskId 
                /// - workingLocationProperties.officeLocation.label 
                /// - workingLocationProperties.customLocation.label 
                /// These search terms also match predefined keywords against all display title translations of working location, out-of-office, and focus-time events. For example, searching for "Office" or "Bureau" returns working location events of type officeLocation, whereas searching for "Out of office" or "Abwesend" returns out-of-office events. Optional.
                ///
                /// - Remark: Generated from `#/paths/calendars/{calendarId}/events/GET/query/q`.
                public var q: Swift.String?
                /// Extended properties constraint specified as propertyName=value. Matches only shared properties. This parameter might be repeated multiple times to return events that match all given constraints.
                ///
                /// - Remark: Generated from `#/paths/calendars/{calendarId}/events/GET/query/sharedExtendedProperty`.
                public var sharedExtendedProperty: [Swift.String]?
                /// Whether to include deleted events (with status equals "cancelled") in the result. Cancelled instances of recurring events (but not the underlying recurring event) will still be included if showDeleted and singleEvents are both False. If showDeleted and singleEvents are both True, only single instances of deleted events (but not the underlying recurring events) are returned. Optional. The default is False.
                ///
                /// - Remark: Generated from `#/paths/calendars/{calendarId}/events/GET/query/showDeleted`.
                public var showDeleted: Swift.Bool?
                /// Whether to include hidden invitations in the result. Optional. The default is False.
                ///
                /// - Remark: Generated from `#/paths/calendars/{calendarId}/events/GET/query/showHiddenInvitations`.
                public var showHiddenInvitations: Swift.Bool?
                /// Whether to expand recurring events into instances and only return single one-off events and instances of recurring events, but not the underlying recurring events themselves. Optional. The default is False.
                ///
                /// - Remark: Generated from `#/paths/calendars/{calendarId}/events/GET/query/singleEvents`.
                public var singleEvents: Swift.Bool?
                /// Token obtained from the nextSyncToken field returned on the last page of results from the previous list request. It makes the result of this list request contain only entries that have changed since then. All events deleted since the previous list request will always be in the result set and it is not allowed to set showDeleted to False.
                /// There are several query parameters that cannot be specified together with nextSyncToken to ensure consistency of the client state.
                ///
                /// These are: 
                /// - iCalUID 
                /// - orderBy 
                /// - privateExtendedProperty 
                /// - q 
                /// - sharedExtendedProperty 
                /// - timeMin 
                /// - timeMax 
                /// - updatedMin All other query parameters should be the same as for the initial synchronization to avoid undefined behavior. If the syncToken expires, the server will respond with a 410 GONE response code and the client should clear its storage and perform a full synchronization without any syncToken.
                /// Learn more about incremental synchronization.
                /// Optional. The default is to return all entries.
                ///
                /// - Remark: Generated from `#/paths/calendars/{calendarId}/events/GET/query/syncToken`.
                public var syncToken: Swift.String?
                /// Upper bound (exclusive) for an event's start time to filter by. Optional. The default is not to filter by start time. Must be an RFC3339 timestamp with mandatory time zone offset, for example, 2011-06-03T10:00:00-07:00, 2011-06-03T10:00:00Z. Milliseconds may be provided but are ignored. If timeMin is set, timeMax must be greater than timeMin.
                ///
                /// - Remark: Generated from `#/paths/calendars/{calendarId}/events/GET/query/timeMax`.
                public var timeMax: Swift.String?
                /// Lower bound (exclusive) for an event's end time to filter by. Optional. The default is not to filter by end time. Must be an RFC3339 timestamp with mandatory time zone offset, for example, 2011-06-03T10:00:00-07:00, 2011-06-03T10:00:00Z. Milliseconds may be provided but are ignored. If timeMax is set, timeMin must be smaller than timeMax.
                ///
                /// - Remark: Generated from `#/paths/calendars/{calendarId}/events/GET/query/timeMin`.
                public var timeMin: Swift.String?
                /// Time zone used in the response. Optional. The default is the time zone of the calendar.
                ///
                /// - Remark: Generated from `#/paths/calendars/{calendarId}/events/GET/query/timeZone`.
                public var timeZone: Swift.String?
                /// Lower bound for an event's last modification time (as a RFC3339 timestamp) to filter by. When specified, entries deleted since this time will always be included regardless of showDeleted. Optional. The default is not to filter by last modification time.
                ///
                /// - Remark: Generated from `#/paths/calendars/{calendarId}/events/GET/query/updatedMin`.
                public var updatedMin: Swift.String?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - alt: Data format for the response.
                ///   - fields: Selector specifying which fields to include in a partial response.
                ///   - key: API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
                ///   - oauthToken: OAuth 2.0 token for the current user.
                ///   - prettyPrint: Returns response with indentations and line breaks.
                ///   - quotaUser: An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
                ///   - userIp: Deprecated. Please use quotaUser instead.
                ///   - alwaysIncludeEmail: Deprecated and ignored.
                ///   - eventTypes: Event types to return. Optional. This parameter can be repeated multiple times to return events of different types. The default is ["default", "focusTime", "outOfOffice"].
                ///   - iCalUID: Specifies an event ID in the iCalendar format to be provided in the response. Optional. Use this if you want to search for an event by its iCalendar ID.
                ///   - maxAttendees: The maximum number of attendees to include in the response. If there are more than the specified number of attendees, only the participant is returned. Optional.
                ///   - maxResults: Maximum number of events returned on one result page. The number of events in the resulting page may be less than this value, or none at all, even if there are more events matching the query. Incomplete pages can be detected by a non-empty nextPageToken field in the response. By default the value is 250 events. The page size can never be larger than 2500 events. Optional.
                ///   - orderBy: The order of the events returned in the result. Optional. The default is an unspecified, stable order.
                ///   - pageToken: Token specifying which result page to return. Optional.
                ///   - privateExtendedProperty: Extended properties constraint specified as propertyName=value. Matches only private properties. This parameter might be repeated multiple times to return events that match all given constraints.
                ///   - q: Free text search terms to find events that match these terms in the following fields:
                ///   - sharedExtendedProperty: Extended properties constraint specified as propertyName=value. Matches only shared properties. This parameter might be repeated multiple times to return events that match all given constraints.
                ///   - showDeleted: Whether to include deleted events (with status equals "cancelled") in the result. Cancelled instances of recurring events (but not the underlying recurring event) will still be included if showDeleted and singleEvents are both False. If showDeleted and singleEvents are both True, only single instances of deleted events (but not the underlying recurring events) are returned. Optional. The default is False.
                ///   - showHiddenInvitations: Whether to include hidden invitations in the result. Optional. The default is False.
                ///   - singleEvents: Whether to expand recurring events into instances and only return single one-off events and instances of recurring events, but not the underlying recurring events themselves. Optional. The default is False.
                ///   - syncToken: Token obtained from the nextSyncToken field returned on the last page of results from the previous list request. It makes the result of this list request contain only entries that have changed since then. All events deleted since the previous list request will always be in the result set and it is not allowed to set showDeleted to False.
                ///   - timeMax: Upper bound (exclusive) for an event's start time to filter by. Optional. The default is not to filter by start time. Must be an RFC3339 timestamp with mandatory time zone offset, for example, 2011-06-03T10:00:00-07:00, 2011-06-03T10:00:00Z. Milliseconds may be provided but are ignored. If timeMin is set, timeMax must be greater than timeMin.
                ///   - timeMin: Lower bound (exclusive) for an event's end time to filter by. Optional. The default is not to filter by end time. Must be an RFC3339 timestamp with mandatory time zone offset, for example, 2011-06-03T10:00:00-07:00, 2011-06-03T10:00:00Z. Milliseconds may be provided but are ignored. If timeMax is set, timeMin must be smaller than timeMax.
                ///   - timeZone: Time zone used in the response. Optional. The default is the time zone of the calendar.
                ///   - updatedMin: Lower bound for an event's last modification time (as a RFC3339 timestamp) to filter by. When specified, entries deleted since this time will always be included regardless of showDeleted. Optional. The default is not to filter by last modification time.
                public init(
                    alt: Components.Parameters.Alt? = nil,
                    fields: Components.Parameters.Fields? = nil,
                    key: Components.Parameters.Key? = nil,
                    oauthToken: Components.Parameters.OauthToken? = nil,
                    prettyPrint: Components.Parameters.PrettyPrint? = nil,
                    quotaUser: Components.Parameters.QuotaUser? = nil,
                    userIp: Components.Parameters.UserIp? = nil,
                    alwaysIncludeEmail: Swift.Bool? = nil,
                    eventTypes: Operations.Calendar_events_list.Input.Query.EventTypesPayload? = nil,
                    iCalUID: Swift.String? = nil,
                    maxAttendees: Swift.Int? = nil,
                    maxResults: Swift.Int? = nil,
                    orderBy: Operations.Calendar_events_list.Input.Query.OrderByPayload? = nil,
                    pageToken: Swift.String? = nil,
                    privateExtendedProperty: [Swift.String]? = nil,
                    q: Swift.String? = nil,
                    sharedExtendedProperty: [Swift.String]? = nil,
                    showDeleted: Swift.Bool? = nil,
                    showHiddenInvitations: Swift.Bool? = nil,
                    singleEvents: Swift.Bool? = nil,
                    syncToken: Swift.String? = nil,
                    timeMax: Swift.String? = nil,
                    timeMin: Swift.String? = nil,
                    timeZone: Swift.String? = nil,
                    updatedMin: Swift.String? = nil
                ) {
                    self.alt = alt
                    self.fields = fields
                    self.key = key
                    self.oauthToken = oauthToken
                    self.prettyPrint = prettyPrint
                    self.quotaUser = quotaUser
                    self.userIp = userIp
                    self.alwaysIncludeEmail = alwaysIncludeEmail
                    self.eventTypes = eventTypes
                    self.iCalUID = iCalUID
                    self.maxAttendees = maxAttendees
                    self.maxResults = maxResults
                    self.orderBy = orderBy
                    self.pageToken = pageToken
                    self.privateExtendedProperty = privateExtendedProperty
                    self.q = q
                    self.sharedExtendedProperty = sharedExtendedProperty
                    self.showDeleted = showDeleted
                    self.showHiddenInvitations = showHiddenInvitations
                    self.singleEvents = singleEvents
                    self.syncToken = syncToken
                    self.timeMax = timeMax
                    self.timeMin = timeMin
                    self.timeZone = timeZone
                    self.updatedMin = updatedMin
                }
            }
            public var query: Operations.Calendar_events_list.Input.Query
            /// - Remark: Generated from `#/paths/calendars/{calendarId}/events/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.Calendar_events_list.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.Calendar_events_list.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.Calendar_events_list.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - query:
            ///   - headers:
            public init(
                path: Operations.Calendar_events_list.Input.Path,
                query: Operations.Calendar_events_list.Input.Query = .init(),
                headers: Operations.Calendar_events_list.Input.Headers = .init()
            ) {
                self.path = path
                self.query = query
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/calendars/{calendarId}/events/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/calendars/{calendarId}/events/GET/responses/200/content/application\/json`.
                    case json(Components.Schemas.Events)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.Events {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.Calendar_events_list.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.Calendar_events_list.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Successful response
            ///
            /// - Remark: Generated from `#/paths//calendars/{calendarId}/events/get(calendar.events.list)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.Calendar_events_list.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.Calendar_events_list.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Creates an event.
    ///
    /// - Remark: HTTP `POST /calendars/{calendarId}/events`.
    /// - Remark: Generated from `#/paths//calendars/{calendarId}/events/post(calendar.events.insert)`.
    public enum Calendar_events_insert {
        public static let id: Swift.String = "calendar.events.insert"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/calendars/{calendarId}/events/POST/path`.
            public struct Path: Sendable, Hashable {
                /// Calendar identifier. To retrieve calendar IDs call the calendarList.list method. If you want to access the primary calendar of the currently logged in user, use the "primary" keyword.
                ///
                /// - Remark: Generated from `#/paths/calendars/{calendarId}/events/POST/path/calendarId`.
                public var calendarId: Swift.String
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - calendarId: Calendar identifier. To retrieve calendar IDs call the calendarList.list method. If you want to access the primary calendar of the currently logged in user, use the "primary" keyword.
                public init(calendarId: Swift.String) {
                    self.calendarId = calendarId
                }
            }
            public var path: Operations.Calendar_events_insert.Input.Path
            /// - Remark: Generated from `#/paths/calendars/{calendarId}/events/POST/query`.
            public struct Query: Sendable, Hashable {
                /// - Remark: Generated from `#/components/parameters/alt`.
                @frozen public enum Alt: String, Codable, Hashable, Sendable, CaseIterable {
                    case json = "json"
                }
                /// Data format for the response.
                ///
                /// - Remark: Generated from `#/paths/calendars/{calendarId}/events/POST/query/alt`.
                public var alt: Components.Parameters.Alt?
                /// Selector specifying which fields to include in a partial response.
                ///
                /// - Remark: Generated from `#/paths/calendars/{calendarId}/events/POST/query/fields`.
                public var fields: Components.Parameters.Fields?
                /// API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
                ///
                /// - Remark: Generated from `#/paths/calendars/{calendarId}/events/POST/query/key`.
                public var key: Components.Parameters.Key?
                /// OAuth 2.0 token for the current user.
                ///
                /// - Remark: Generated from `#/paths/calendars/{calendarId}/events/POST/query/oauth_token`.
                public var oauthToken: Components.Parameters.OauthToken?
                /// Returns response with indentations and line breaks.
                ///
                /// - Remark: Generated from `#/paths/calendars/{calendarId}/events/POST/query/prettyPrint`.
                public var prettyPrint: Components.Parameters.PrettyPrint?
                /// An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
                ///
                /// - Remark: Generated from `#/paths/calendars/{calendarId}/events/POST/query/quotaUser`.
                public var quotaUser: Components.Parameters.QuotaUser?
                /// Deprecated. Please use quotaUser instead.
                ///
                /// - Remark: Generated from `#/paths/calendars/{calendarId}/events/POST/query/userIp`.
                public var userIp: Components.Parameters.UserIp?
                /// Version number of conference data supported by the API client. Version 0 assumes no conference data support and ignores conference data in the event's body. Version 1 enables support for copying of ConferenceData as well as for creating new conferences using the createRequest field of conferenceData. The default is 0.
                ///
                /// - Remark: Generated from `#/paths/calendars/{calendarId}/events/POST/query/conferenceDataVersion`.
                public var conferenceDataVersion: Swift.Int?
                /// The maximum number of attendees to include in the response. If there are more than the specified number of attendees, only the participant is returned. Optional.
                ///
                /// - Remark: Generated from `#/paths/calendars/{calendarId}/events/POST/query/maxAttendees`.
                public var maxAttendees: Swift.Int?
                /// Deprecated. Please use sendUpdates instead.
                ///
                /// Whether to send notifications about the creation of the new event. Note that some emails might still be sent even if you set the value to false. The default is false.
                ///
                /// - Remark: Generated from `#/paths/calendars/{calendarId}/events/POST/query/sendNotifications`.
                public var sendNotifications: Swift.Bool?
                /// - Remark: Generated from `#/paths/calendars/{calendarId}/events/POST/query/sendUpdates`.
                @frozen public enum SendUpdatesPayload: String, Codable, Hashable, Sendable, CaseIterable {
                    case all = "all"
                    case externalOnly = "externalOnly"
                    case none = "none"
                }
                /// Whether to send notifications about the creation of the new event. Note that some emails might still be sent. The default is false.
                ///
                /// - Remark: Generated from `#/paths/calendars/{calendarId}/events/POST/query/sendUpdates`.
                public var sendUpdates: Operations.Calendar_events_insert.Input.Query.SendUpdatesPayload?
                /// Whether API client performing operation supports event attachments. Optional. The default is False.
                ///
                /// - Remark: Generated from `#/paths/calendars/{calendarId}/events/POST/query/supportsAttachments`.
                public var supportsAttachments: Swift.Bool?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - alt: Data format for the response.
                ///   - fields: Selector specifying which fields to include in a partial response.
                ///   - key: API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
                ///   - oauthToken: OAuth 2.0 token for the current user.
                ///   - prettyPrint: Returns response with indentations and line breaks.
                ///   - quotaUser: An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
                ///   - userIp: Deprecated. Please use quotaUser instead.
                ///   - conferenceDataVersion: Version number of conference data supported by the API client. Version 0 assumes no conference data support and ignores conference data in the event's body. Version 1 enables support for copying of ConferenceData as well as for creating new conferences using the createRequest field of conferenceData. The default is 0.
                ///   - maxAttendees: The maximum number of attendees to include in the response. If there are more than the specified number of attendees, only the participant is returned. Optional.
                ///   - sendNotifications: Deprecated. Please use sendUpdates instead.
                ///   - sendUpdates: Whether to send notifications about the creation of the new event. Note that some emails might still be sent. The default is false.
                ///   - supportsAttachments: Whether API client performing operation supports event attachments. Optional. The default is False.
                public init(
                    alt: Components.Parameters.Alt? = nil,
                    fields: Components.Parameters.Fields? = nil,
                    key: Components.Parameters.Key? = nil,
                    oauthToken: Components.Parameters.OauthToken? = nil,
                    prettyPrint: Components.Parameters.PrettyPrint? = nil,
                    quotaUser: Components.Parameters.QuotaUser? = nil,
                    userIp: Components.Parameters.UserIp? = nil,
                    conferenceDataVersion: Swift.Int? = nil,
                    maxAttendees: Swift.Int? = nil,
                    sendNotifications: Swift.Bool? = nil,
                    sendUpdates: Operations.Calendar_events_insert.Input.Query.SendUpdatesPayload? = nil,
                    supportsAttachments: Swift.Bool? = nil
                ) {
                    self.alt = alt
                    self.fields = fields
                    self.key = key
                    self.oauthToken = oauthToken
                    self.prettyPrint = prettyPrint
                    self.quotaUser = quotaUser
                    self.userIp = userIp
                    self.conferenceDataVersion = conferenceDataVersion
                    self.maxAttendees = maxAttendees
                    self.sendNotifications = sendNotifications
                    self.sendUpdates = sendUpdates
                    self.supportsAttachments = supportsAttachments
                }
            }
            public var query: Operations.Calendar_events_insert.Input.Query
            /// - Remark: Generated from `#/paths/calendars/{calendarId}/events/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.Calendar_events_insert.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.Calendar_events_insert.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.Calendar_events_insert.Input.Headers
            /// - Remark: Generated from `#/paths/calendars/{calendarId}/events/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/calendars/{calendarId}/events/POST/requestBody/content/application\/json`.
                case json(Components.Schemas.Event)
            }
            public var body: Operations.Calendar_events_insert.Input.Body?
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - query:
            ///   - headers:
            ///   - body:
            public init(
                path: Operations.Calendar_events_insert.Input.Path,
                query: Operations.Calendar_events_insert.Input.Query = .init(),
                headers: Operations.Calendar_events_insert.Input.Headers = .init(),
                body: Operations.Calendar_events_insert.Input.Body? = nil
            ) {
                self.path = path
                self.query = query
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/calendars/{calendarId}/events/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/calendars/{calendarId}/events/POST/responses/200/content/application\/json`.
                    case json(Components.Schemas.Event)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.Event {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.Calendar_events_insert.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.Calendar_events_insert.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Successful response
            ///
            /// - Remark: Generated from `#/paths//calendars/{calendarId}/events/post(calendar.events.insert)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.Calendar_events_insert.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.Calendar_events_insert.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Imports an event. This operation is used to add a private copy of an existing event to a calendar.
    ///
    /// - Remark: HTTP `POST /calendars/{calendarId}/events/import`.
    /// - Remark: Generated from `#/paths//calendars/{calendarId}/events/import/post(calendar.events.import)`.
    public enum Calendar_events_import {
        public static let id: Swift.String = "calendar.events.import"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/calendars/{calendarId}/events/import/POST/path`.
            public struct Path: Sendable, Hashable {
                /// Calendar identifier. To retrieve calendar IDs call the calendarList.list method. If you want to access the primary calendar of the currently logged in user, use the "primary" keyword.
                ///
                /// - Remark: Generated from `#/paths/calendars/{calendarId}/events/import/POST/path/calendarId`.
                public var calendarId: Swift.String
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - calendarId: Calendar identifier. To retrieve calendar IDs call the calendarList.list method. If you want to access the primary calendar of the currently logged in user, use the "primary" keyword.
                public init(calendarId: Swift.String) {
                    self.calendarId = calendarId
                }
            }
            public var path: Operations.Calendar_events_import.Input.Path
            /// - Remark: Generated from `#/paths/calendars/{calendarId}/events/import/POST/query`.
            public struct Query: Sendable, Hashable {
                /// - Remark: Generated from `#/components/parameters/alt`.
                @frozen public enum Alt: String, Codable, Hashable, Sendable, CaseIterable {
                    case json = "json"
                }
                /// Data format for the response.
                ///
                /// - Remark: Generated from `#/paths/calendars/{calendarId}/events/import/POST/query/alt`.
                public var alt: Components.Parameters.Alt?
                /// Selector specifying which fields to include in a partial response.
                ///
                /// - Remark: Generated from `#/paths/calendars/{calendarId}/events/import/POST/query/fields`.
                public var fields: Components.Parameters.Fields?
                /// API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
                ///
                /// - Remark: Generated from `#/paths/calendars/{calendarId}/events/import/POST/query/key`.
                public var key: Components.Parameters.Key?
                /// OAuth 2.0 token for the current user.
                ///
                /// - Remark: Generated from `#/paths/calendars/{calendarId}/events/import/POST/query/oauth_token`.
                public var oauthToken: Components.Parameters.OauthToken?
                /// Returns response with indentations and line breaks.
                ///
                /// - Remark: Generated from `#/paths/calendars/{calendarId}/events/import/POST/query/prettyPrint`.
                public var prettyPrint: Components.Parameters.PrettyPrint?
                /// An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
                ///
                /// - Remark: Generated from `#/paths/calendars/{calendarId}/events/import/POST/query/quotaUser`.
                public var quotaUser: Components.Parameters.QuotaUser?
                /// Deprecated. Please use quotaUser instead.
                ///
                /// - Remark: Generated from `#/paths/calendars/{calendarId}/events/import/POST/query/userIp`.
                public var userIp: Components.Parameters.UserIp?
                /// Version number of conference data supported by the API client. Version 0 assumes no conference data support and ignores conference data in the event's body. Version 1 enables support for copying of ConferenceData as well as for creating new conferences using the createRequest field of conferenceData. The default is 0.
                ///
                /// - Remark: Generated from `#/paths/calendars/{calendarId}/events/import/POST/query/conferenceDataVersion`.
                public var conferenceDataVersion: Swift.Int?
                /// Whether API client performing operation supports event attachments. Optional. The default is False.
                ///
                /// - Remark: Generated from `#/paths/calendars/{calendarId}/events/import/POST/query/supportsAttachments`.
                public var supportsAttachments: Swift.Bool?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - alt: Data format for the response.
                ///   - fields: Selector specifying which fields to include in a partial response.
                ///   - key: API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
                ///   - oauthToken: OAuth 2.0 token for the current user.
                ///   - prettyPrint: Returns response with indentations and line breaks.
                ///   - quotaUser: An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
                ///   - userIp: Deprecated. Please use quotaUser instead.
                ///   - conferenceDataVersion: Version number of conference data supported by the API client. Version 0 assumes no conference data support and ignores conference data in the event's body. Version 1 enables support for copying of ConferenceData as well as for creating new conferences using the createRequest field of conferenceData. The default is 0.
                ///   - supportsAttachments: Whether API client performing operation supports event attachments. Optional. The default is False.
                public init(
                    alt: Components.Parameters.Alt? = nil,
                    fields: Components.Parameters.Fields? = nil,
                    key: Components.Parameters.Key? = nil,
                    oauthToken: Components.Parameters.OauthToken? = nil,
                    prettyPrint: Components.Parameters.PrettyPrint? = nil,
                    quotaUser: Components.Parameters.QuotaUser? = nil,
                    userIp: Components.Parameters.UserIp? = nil,
                    conferenceDataVersion: Swift.Int? = nil,
                    supportsAttachments: Swift.Bool? = nil
                ) {
                    self.alt = alt
                    self.fields = fields
                    self.key = key
                    self.oauthToken = oauthToken
                    self.prettyPrint = prettyPrint
                    self.quotaUser = quotaUser
                    self.userIp = userIp
                    self.conferenceDataVersion = conferenceDataVersion
                    self.supportsAttachments = supportsAttachments
                }
            }
            public var query: Operations.Calendar_events_import.Input.Query
            /// - Remark: Generated from `#/paths/calendars/{calendarId}/events/import/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.Calendar_events_import.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.Calendar_events_import.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.Calendar_events_import.Input.Headers
            /// - Remark: Generated from `#/paths/calendars/{calendarId}/events/import/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/calendars/{calendarId}/events/import/POST/requestBody/content/application\/json`.
                case json(Components.Schemas.Event)
            }
            public var body: Operations.Calendar_events_import.Input.Body?
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - query:
            ///   - headers:
            ///   - body:
            public init(
                path: Operations.Calendar_events_import.Input.Path,
                query: Operations.Calendar_events_import.Input.Query = .init(),
                headers: Operations.Calendar_events_import.Input.Headers = .init(),
                body: Operations.Calendar_events_import.Input.Body? = nil
            ) {
                self.path = path
                self.query = query
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/calendars/{calendarId}/events/import/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/calendars/{calendarId}/events/import/POST/responses/200/content/application\/json`.
                    case json(Components.Schemas.Event)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.Event {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.Calendar_events_import.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.Calendar_events_import.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Successful response
            ///
            /// - Remark: Generated from `#/paths//calendars/{calendarId}/events/import/post(calendar.events.import)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.Calendar_events_import.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.Calendar_events_import.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Creates an event based on a simple text string.
    ///
    /// - Remark: HTTP `POST /calendars/{calendarId}/events/quickAdd`.
    /// - Remark: Generated from `#/paths//calendars/{calendarId}/events/quickAdd/post(calendar.events.quickAdd)`.
    public enum Calendar_events_quickAdd {
        public static let id: Swift.String = "calendar.events.quickAdd"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/calendars/{calendarId}/events/quickAdd/POST/path`.
            public struct Path: Sendable, Hashable {
                /// Calendar identifier. To retrieve calendar IDs call the calendarList.list method. If you want to access the primary calendar of the currently logged in user, use the "primary" keyword.
                ///
                /// - Remark: Generated from `#/paths/calendars/{calendarId}/events/quickAdd/POST/path/calendarId`.
                public var calendarId: Swift.String
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - calendarId: Calendar identifier. To retrieve calendar IDs call the calendarList.list method. If you want to access the primary calendar of the currently logged in user, use the "primary" keyword.
                public init(calendarId: Swift.String) {
                    self.calendarId = calendarId
                }
            }
            public var path: Operations.Calendar_events_quickAdd.Input.Path
            /// - Remark: Generated from `#/paths/calendars/{calendarId}/events/quickAdd/POST/query`.
            public struct Query: Sendable, Hashable {
                /// - Remark: Generated from `#/components/parameters/alt`.
                @frozen public enum Alt: String, Codable, Hashable, Sendable, CaseIterable {
                    case json = "json"
                }
                /// Data format for the response.
                ///
                /// - Remark: Generated from `#/paths/calendars/{calendarId}/events/quickAdd/POST/query/alt`.
                public var alt: Components.Parameters.Alt?
                /// Selector specifying which fields to include in a partial response.
                ///
                /// - Remark: Generated from `#/paths/calendars/{calendarId}/events/quickAdd/POST/query/fields`.
                public var fields: Components.Parameters.Fields?
                /// API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
                ///
                /// - Remark: Generated from `#/paths/calendars/{calendarId}/events/quickAdd/POST/query/key`.
                public var key: Components.Parameters.Key?
                /// OAuth 2.0 token for the current user.
                ///
                /// - Remark: Generated from `#/paths/calendars/{calendarId}/events/quickAdd/POST/query/oauth_token`.
                public var oauthToken: Components.Parameters.OauthToken?
                /// Returns response with indentations and line breaks.
                ///
                /// - Remark: Generated from `#/paths/calendars/{calendarId}/events/quickAdd/POST/query/prettyPrint`.
                public var prettyPrint: Components.Parameters.PrettyPrint?
                /// An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
                ///
                /// - Remark: Generated from `#/paths/calendars/{calendarId}/events/quickAdd/POST/query/quotaUser`.
                public var quotaUser: Components.Parameters.QuotaUser?
                /// Deprecated. Please use quotaUser instead.
                ///
                /// - Remark: Generated from `#/paths/calendars/{calendarId}/events/quickAdd/POST/query/userIp`.
                public var userIp: Components.Parameters.UserIp?
                /// The text describing the event to be created.
                ///
                /// - Remark: Generated from `#/paths/calendars/{calendarId}/events/quickAdd/POST/query/text`.
                public var text: Swift.String
                /// Deprecated. Please use sendUpdates instead.
                ///
                /// Whether to send notifications about the creation of the event. Note that some emails might still be sent even if you set the value to false. The default is false.
                ///
                /// - Remark: Generated from `#/paths/calendars/{calendarId}/events/quickAdd/POST/query/sendNotifications`.
                public var sendNotifications: Swift.Bool?
                /// - Remark: Generated from `#/paths/calendars/{calendarId}/events/quickAdd/POST/query/sendUpdates`.
                @frozen public enum SendUpdatesPayload: String, Codable, Hashable, Sendable, CaseIterable {
                    case all = "all"
                    case externalOnly = "externalOnly"
                    case none = "none"
                }
                /// Guests who should receive notifications about the creation of the new event.
                ///
                /// - Remark: Generated from `#/paths/calendars/{calendarId}/events/quickAdd/POST/query/sendUpdates`.
                public var sendUpdates: Operations.Calendar_events_quickAdd.Input.Query.SendUpdatesPayload?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - alt: Data format for the response.
                ///   - fields: Selector specifying which fields to include in a partial response.
                ///   - key: API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
                ///   - oauthToken: OAuth 2.0 token for the current user.
                ///   - prettyPrint: Returns response with indentations and line breaks.
                ///   - quotaUser: An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
                ///   - userIp: Deprecated. Please use quotaUser instead.
                ///   - text: The text describing the event to be created.
                ///   - sendNotifications: Deprecated. Please use sendUpdates instead.
                ///   - sendUpdates: Guests who should receive notifications about the creation of the new event.
                public init(
                    alt: Components.Parameters.Alt? = nil,
                    fields: Components.Parameters.Fields? = nil,
                    key: Components.Parameters.Key? = nil,
                    oauthToken: Components.Parameters.OauthToken? = nil,
                    prettyPrint: Components.Parameters.PrettyPrint? = nil,
                    quotaUser: Components.Parameters.QuotaUser? = nil,
                    userIp: Components.Parameters.UserIp? = nil,
                    text: Swift.String,
                    sendNotifications: Swift.Bool? = nil,
                    sendUpdates: Operations.Calendar_events_quickAdd.Input.Query.SendUpdatesPayload? = nil
                ) {
                    self.alt = alt
                    self.fields = fields
                    self.key = key
                    self.oauthToken = oauthToken
                    self.prettyPrint = prettyPrint
                    self.quotaUser = quotaUser
                    self.userIp = userIp
                    self.text = text
                    self.sendNotifications = sendNotifications
                    self.sendUpdates = sendUpdates
                }
            }
            public var query: Operations.Calendar_events_quickAdd.Input.Query
            /// - Remark: Generated from `#/paths/calendars/{calendarId}/events/quickAdd/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.Calendar_events_quickAdd.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.Calendar_events_quickAdd.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.Calendar_events_quickAdd.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - query:
            ///   - headers:
            public init(
                path: Operations.Calendar_events_quickAdd.Input.Path,
                query: Operations.Calendar_events_quickAdd.Input.Query,
                headers: Operations.Calendar_events_quickAdd.Input.Headers = .init()
            ) {
                self.path = path
                self.query = query
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/calendars/{calendarId}/events/quickAdd/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/calendars/{calendarId}/events/quickAdd/POST/responses/200/content/application\/json`.
                    case json(Components.Schemas.Event)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.Event {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.Calendar_events_quickAdd.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.Calendar_events_quickAdd.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Successful response
            ///
            /// - Remark: Generated from `#/paths//calendars/{calendarId}/events/quickAdd/post(calendar.events.quickAdd)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.Calendar_events_quickAdd.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.Calendar_events_quickAdd.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Watch for changes to Events resources.
    ///
    /// - Remark: HTTP `POST /calendars/{calendarId}/events/watch`.
    /// - Remark: Generated from `#/paths//calendars/{calendarId}/events/watch/post(calendar.events.watch)`.
    public enum Calendar_events_watch {
        public static let id: Swift.String = "calendar.events.watch"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/calendars/{calendarId}/events/watch/POST/path`.
            public struct Path: Sendable, Hashable {
                /// Calendar identifier. To retrieve calendar IDs call the calendarList.list method. If you want to access the primary calendar of the currently logged in user, use the "primary" keyword.
                ///
                /// - Remark: Generated from `#/paths/calendars/{calendarId}/events/watch/POST/path/calendarId`.
                public var calendarId: Swift.String
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - calendarId: Calendar identifier. To retrieve calendar IDs call the calendarList.list method. If you want to access the primary calendar of the currently logged in user, use the "primary" keyword.
                public init(calendarId: Swift.String) {
                    self.calendarId = calendarId
                }
            }
            public var path: Operations.Calendar_events_watch.Input.Path
            /// - Remark: Generated from `#/paths/calendars/{calendarId}/events/watch/POST/query`.
            public struct Query: Sendable, Hashable {
                /// - Remark: Generated from `#/components/parameters/alt`.
                @frozen public enum Alt: String, Codable, Hashable, Sendable, CaseIterable {
                    case json = "json"
                }
                /// Data format for the response.
                ///
                /// - Remark: Generated from `#/paths/calendars/{calendarId}/events/watch/POST/query/alt`.
                public var alt: Components.Parameters.Alt?
                /// Selector specifying which fields to include in a partial response.
                ///
                /// - Remark: Generated from `#/paths/calendars/{calendarId}/events/watch/POST/query/fields`.
                public var fields: Components.Parameters.Fields?
                /// API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
                ///
                /// - Remark: Generated from `#/paths/calendars/{calendarId}/events/watch/POST/query/key`.
                public var key: Components.Parameters.Key?
                /// OAuth 2.0 token for the current user.
                ///
                /// - Remark: Generated from `#/paths/calendars/{calendarId}/events/watch/POST/query/oauth_token`.
                public var oauthToken: Components.Parameters.OauthToken?
                /// Returns response with indentations and line breaks.
                ///
                /// - Remark: Generated from `#/paths/calendars/{calendarId}/events/watch/POST/query/prettyPrint`.
                public var prettyPrint: Components.Parameters.PrettyPrint?
                /// An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
                ///
                /// - Remark: Generated from `#/paths/calendars/{calendarId}/events/watch/POST/query/quotaUser`.
                public var quotaUser: Components.Parameters.QuotaUser?
                /// Deprecated. Please use quotaUser instead.
                ///
                /// - Remark: Generated from `#/paths/calendars/{calendarId}/events/watch/POST/query/userIp`.
                public var userIp: Components.Parameters.UserIp?
                /// Deprecated and ignored.
                ///
                /// - Remark: Generated from `#/paths/calendars/{calendarId}/events/watch/POST/query/alwaysIncludeEmail`.
                public var alwaysIncludeEmail: Swift.Bool?
                /// - Remark: Generated from `#/paths/calendars/{calendarId}/events/watch/POST/query/EventTypesPayload`.
                @frozen public enum EventTypesPayloadPayload: String, Codable, Hashable, Sendable, CaseIterable {
                    case _default = "default"
                    case focusTime = "focusTime"
                    case outOfOffice = "outOfOffice"
                    case workingLocation = "workingLocation"
                }
                /// - Remark: Generated from `#/paths/calendars/{calendarId}/events/watch/POST/query/eventTypes`.
                public typealias EventTypesPayload = [Operations.Calendar_events_watch.Input.Query.EventTypesPayloadPayload]
                /// Event types to return. Optional. This parameter can be repeated multiple times to return events of different types. The default is ["default", "focusTime", "outOfOffice"].
                ///
                /// - Remark: Generated from `#/paths/calendars/{calendarId}/events/watch/POST/query/eventTypes`.
                public var eventTypes: Operations.Calendar_events_watch.Input.Query.EventTypesPayload?
                /// Specifies an event ID in the iCalendar format to be provided in the response. Optional. Use this if you want to search for an event by its iCalendar ID.
                ///
                /// - Remark: Generated from `#/paths/calendars/{calendarId}/events/watch/POST/query/iCalUID`.
                public var iCalUID: Swift.String?
                /// The maximum number of attendees to include in the response. If there are more than the specified number of attendees, only the participant is returned. Optional.
                ///
                /// - Remark: Generated from `#/paths/calendars/{calendarId}/events/watch/POST/query/maxAttendees`.
                public var maxAttendees: Swift.Int?
                /// Maximum number of events returned on one result page. The number of events in the resulting page may be less than this value, or none at all, even if there are more events matching the query. Incomplete pages can be detected by a non-empty nextPageToken field in the response. By default the value is 250 events. The page size can never be larger than 2500 events. Optional.
                ///
                /// - Remark: Generated from `#/paths/calendars/{calendarId}/events/watch/POST/query/maxResults`.
                public var maxResults: Swift.Int?
                /// - Remark: Generated from `#/paths/calendars/{calendarId}/events/watch/POST/query/orderBy`.
                @frozen public enum OrderByPayload: String, Codable, Hashable, Sendable, CaseIterable {
                    case startTime = "startTime"
                    case updated = "updated"
                }
                /// The order of the events returned in the result. Optional. The default is an unspecified, stable order.
                ///
                /// - Remark: Generated from `#/paths/calendars/{calendarId}/events/watch/POST/query/orderBy`.
                public var orderBy: Operations.Calendar_events_watch.Input.Query.OrderByPayload?
                /// Token specifying which result page to return. Optional.
                ///
                /// - Remark: Generated from `#/paths/calendars/{calendarId}/events/watch/POST/query/pageToken`.
                public var pageToken: Swift.String?
                /// Extended properties constraint specified as propertyName=value. Matches only private properties. This parameter might be repeated multiple times to return events that match all given constraints.
                ///
                /// - Remark: Generated from `#/paths/calendars/{calendarId}/events/watch/POST/query/privateExtendedProperty`.
                public var privateExtendedProperty: [Swift.String]?
                /// Free text search terms to find events that match these terms in the following fields:
                ///
                /// - summary 
                /// - description 
                /// - location 
                /// - attendee's displayName 
                /// - attendee's email 
                /// - organizer's displayName 
                /// - organizer's email 
                /// - workingLocationProperties.officeLocation.buildingId 
                /// - workingLocationProperties.officeLocation.deskId 
                /// - workingLocationProperties.officeLocation.label 
                /// - workingLocationProperties.customLocation.label 
                /// These search terms also match predefined keywords against all display title translations of working location, out-of-office, and focus-time events. For example, searching for "Office" or "Bureau" returns working location events of type officeLocation, whereas searching for "Out of office" or "Abwesend" returns out-of-office events. Optional.
                ///
                /// - Remark: Generated from `#/paths/calendars/{calendarId}/events/watch/POST/query/q`.
                public var q: Swift.String?
                /// Extended properties constraint specified as propertyName=value. Matches only shared properties. This parameter might be repeated multiple times to return events that match all given constraints.
                ///
                /// - Remark: Generated from `#/paths/calendars/{calendarId}/events/watch/POST/query/sharedExtendedProperty`.
                public var sharedExtendedProperty: [Swift.String]?
                /// Whether to include deleted events (with status equals "cancelled") in the result. Cancelled instances of recurring events (but not the underlying recurring event) will still be included if showDeleted and singleEvents are both False. If showDeleted and singleEvents are both True, only single instances of deleted events (but not the underlying recurring events) are returned. Optional. The default is False.
                ///
                /// - Remark: Generated from `#/paths/calendars/{calendarId}/events/watch/POST/query/showDeleted`.
                public var showDeleted: Swift.Bool?
                /// Whether to include hidden invitations in the result. Optional. The default is False.
                ///
                /// - Remark: Generated from `#/paths/calendars/{calendarId}/events/watch/POST/query/showHiddenInvitations`.
                public var showHiddenInvitations: Swift.Bool?
                /// Whether to expand recurring events into instances and only return single one-off events and instances of recurring events, but not the underlying recurring events themselves. Optional. The default is False.
                ///
                /// - Remark: Generated from `#/paths/calendars/{calendarId}/events/watch/POST/query/singleEvents`.
                public var singleEvents: Swift.Bool?
                /// Token obtained from the nextSyncToken field returned on the last page of results from the previous list request. It makes the result of this list request contain only entries that have changed since then. All events deleted since the previous list request will always be in the result set and it is not allowed to set showDeleted to False.
                /// There are several query parameters that cannot be specified together with nextSyncToken to ensure consistency of the client state.
                ///
                /// These are: 
                /// - iCalUID 
                /// - orderBy 
                /// - privateExtendedProperty 
                /// - q 
                /// - sharedExtendedProperty 
                /// - timeMin 
                /// - timeMax 
                /// - updatedMin All other query parameters should be the same as for the initial synchronization to avoid undefined behavior. If the syncToken expires, the server will respond with a 410 GONE response code and the client should clear its storage and perform a full synchronization without any syncToken.
                /// Learn more about incremental synchronization.
                /// Optional. The default is to return all entries.
                ///
                /// - Remark: Generated from `#/paths/calendars/{calendarId}/events/watch/POST/query/syncToken`.
                public var syncToken: Swift.String?
                /// Upper bound (exclusive) for an event's start time to filter by. Optional. The default is not to filter by start time. Must be an RFC3339 timestamp with mandatory time zone offset, for example, 2011-06-03T10:00:00-07:00, 2011-06-03T10:00:00Z. Milliseconds may be provided but are ignored. If timeMin is set, timeMax must be greater than timeMin.
                ///
                /// - Remark: Generated from `#/paths/calendars/{calendarId}/events/watch/POST/query/timeMax`.
                public var timeMax: Swift.String?
                /// Lower bound (exclusive) for an event's end time to filter by. Optional. The default is not to filter by end time. Must be an RFC3339 timestamp with mandatory time zone offset, for example, 2011-06-03T10:00:00-07:00, 2011-06-03T10:00:00Z. Milliseconds may be provided but are ignored. If timeMax is set, timeMin must be smaller than timeMax.
                ///
                /// - Remark: Generated from `#/paths/calendars/{calendarId}/events/watch/POST/query/timeMin`.
                public var timeMin: Swift.String?
                /// Time zone used in the response. Optional. The default is the time zone of the calendar.
                ///
                /// - Remark: Generated from `#/paths/calendars/{calendarId}/events/watch/POST/query/timeZone`.
                public var timeZone: Swift.String?
                /// Lower bound for an event's last modification time (as a RFC3339 timestamp) to filter by. When specified, entries deleted since this time will always be included regardless of showDeleted. Optional. The default is not to filter by last modification time.
                ///
                /// - Remark: Generated from `#/paths/calendars/{calendarId}/events/watch/POST/query/updatedMin`.
                public var updatedMin: Swift.String?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - alt: Data format for the response.
                ///   - fields: Selector specifying which fields to include in a partial response.
                ///   - key: API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
                ///   - oauthToken: OAuth 2.0 token for the current user.
                ///   - prettyPrint: Returns response with indentations and line breaks.
                ///   - quotaUser: An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
                ///   - userIp: Deprecated. Please use quotaUser instead.
                ///   - alwaysIncludeEmail: Deprecated and ignored.
                ///   - eventTypes: Event types to return. Optional. This parameter can be repeated multiple times to return events of different types. The default is ["default", "focusTime", "outOfOffice"].
                ///   - iCalUID: Specifies an event ID in the iCalendar format to be provided in the response. Optional. Use this if you want to search for an event by its iCalendar ID.
                ///   - maxAttendees: The maximum number of attendees to include in the response. If there are more than the specified number of attendees, only the participant is returned. Optional.
                ///   - maxResults: Maximum number of events returned on one result page. The number of events in the resulting page may be less than this value, or none at all, even if there are more events matching the query. Incomplete pages can be detected by a non-empty nextPageToken field in the response. By default the value is 250 events. The page size can never be larger than 2500 events. Optional.
                ///   - orderBy: The order of the events returned in the result. Optional. The default is an unspecified, stable order.
                ///   - pageToken: Token specifying which result page to return. Optional.
                ///   - privateExtendedProperty: Extended properties constraint specified as propertyName=value. Matches only private properties. This parameter might be repeated multiple times to return events that match all given constraints.
                ///   - q: Free text search terms to find events that match these terms in the following fields:
                ///   - sharedExtendedProperty: Extended properties constraint specified as propertyName=value. Matches only shared properties. This parameter might be repeated multiple times to return events that match all given constraints.
                ///   - showDeleted: Whether to include deleted events (with status equals "cancelled") in the result. Cancelled instances of recurring events (but not the underlying recurring event) will still be included if showDeleted and singleEvents are both False. If showDeleted and singleEvents are both True, only single instances of deleted events (but not the underlying recurring events) are returned. Optional. The default is False.
                ///   - showHiddenInvitations: Whether to include hidden invitations in the result. Optional. The default is False.
                ///   - singleEvents: Whether to expand recurring events into instances and only return single one-off events and instances of recurring events, but not the underlying recurring events themselves. Optional. The default is False.
                ///   - syncToken: Token obtained from the nextSyncToken field returned on the last page of results from the previous list request. It makes the result of this list request contain only entries that have changed since then. All events deleted since the previous list request will always be in the result set and it is not allowed to set showDeleted to False.
                ///   - timeMax: Upper bound (exclusive) for an event's start time to filter by. Optional. The default is not to filter by start time. Must be an RFC3339 timestamp with mandatory time zone offset, for example, 2011-06-03T10:00:00-07:00, 2011-06-03T10:00:00Z. Milliseconds may be provided but are ignored. If timeMin is set, timeMax must be greater than timeMin.
                ///   - timeMin: Lower bound (exclusive) for an event's end time to filter by. Optional. The default is not to filter by end time. Must be an RFC3339 timestamp with mandatory time zone offset, for example, 2011-06-03T10:00:00-07:00, 2011-06-03T10:00:00Z. Milliseconds may be provided but are ignored. If timeMax is set, timeMin must be smaller than timeMax.
                ///   - timeZone: Time zone used in the response. Optional. The default is the time zone of the calendar.
                ///   - updatedMin: Lower bound for an event's last modification time (as a RFC3339 timestamp) to filter by. When specified, entries deleted since this time will always be included regardless of showDeleted. Optional. The default is not to filter by last modification time.
                public init(
                    alt: Components.Parameters.Alt? = nil,
                    fields: Components.Parameters.Fields? = nil,
                    key: Components.Parameters.Key? = nil,
                    oauthToken: Components.Parameters.OauthToken? = nil,
                    prettyPrint: Components.Parameters.PrettyPrint? = nil,
                    quotaUser: Components.Parameters.QuotaUser? = nil,
                    userIp: Components.Parameters.UserIp? = nil,
                    alwaysIncludeEmail: Swift.Bool? = nil,
                    eventTypes: Operations.Calendar_events_watch.Input.Query.EventTypesPayload? = nil,
                    iCalUID: Swift.String? = nil,
                    maxAttendees: Swift.Int? = nil,
                    maxResults: Swift.Int? = nil,
                    orderBy: Operations.Calendar_events_watch.Input.Query.OrderByPayload? = nil,
                    pageToken: Swift.String? = nil,
                    privateExtendedProperty: [Swift.String]? = nil,
                    q: Swift.String? = nil,
                    sharedExtendedProperty: [Swift.String]? = nil,
                    showDeleted: Swift.Bool? = nil,
                    showHiddenInvitations: Swift.Bool? = nil,
                    singleEvents: Swift.Bool? = nil,
                    syncToken: Swift.String? = nil,
                    timeMax: Swift.String? = nil,
                    timeMin: Swift.String? = nil,
                    timeZone: Swift.String? = nil,
                    updatedMin: Swift.String? = nil
                ) {
                    self.alt = alt
                    self.fields = fields
                    self.key = key
                    self.oauthToken = oauthToken
                    self.prettyPrint = prettyPrint
                    self.quotaUser = quotaUser
                    self.userIp = userIp
                    self.alwaysIncludeEmail = alwaysIncludeEmail
                    self.eventTypes = eventTypes
                    self.iCalUID = iCalUID
                    self.maxAttendees = maxAttendees
                    self.maxResults = maxResults
                    self.orderBy = orderBy
                    self.pageToken = pageToken
                    self.privateExtendedProperty = privateExtendedProperty
                    self.q = q
                    self.sharedExtendedProperty = sharedExtendedProperty
                    self.showDeleted = showDeleted
                    self.showHiddenInvitations = showHiddenInvitations
                    self.singleEvents = singleEvents
                    self.syncToken = syncToken
                    self.timeMax = timeMax
                    self.timeMin = timeMin
                    self.timeZone = timeZone
                    self.updatedMin = updatedMin
                }
            }
            public var query: Operations.Calendar_events_watch.Input.Query
            /// - Remark: Generated from `#/paths/calendars/{calendarId}/events/watch/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.Calendar_events_watch.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.Calendar_events_watch.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.Calendar_events_watch.Input.Headers
            /// - Remark: Generated from `#/paths/calendars/{calendarId}/events/watch/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/calendars/{calendarId}/events/watch/POST/requestBody/content/application\/json`.
                case json(Components.Schemas.Channel)
            }
            public var body: Operations.Calendar_events_watch.Input.Body?
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - query:
            ///   - headers:
            ///   - body:
            public init(
                path: Operations.Calendar_events_watch.Input.Path,
                query: Operations.Calendar_events_watch.Input.Query = .init(),
                headers: Operations.Calendar_events_watch.Input.Headers = .init(),
                body: Operations.Calendar_events_watch.Input.Body? = nil
            ) {
                self.path = path
                self.query = query
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/calendars/{calendarId}/events/watch/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/calendars/{calendarId}/events/watch/POST/responses/200/content/application\/json`.
                    case json(Components.Schemas.Channel)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.Channel {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.Calendar_events_watch.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.Calendar_events_watch.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Successful response
            ///
            /// - Remark: Generated from `#/paths//calendars/{calendarId}/events/watch/post(calendar.events.watch)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.Calendar_events_watch.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.Calendar_events_watch.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Returns an event based on its Google Calendar ID. To retrieve an event using its iCalendar ID, call the events.list method using the iCalUID parameter.
    ///
    /// - Remark: HTTP `GET /calendars/{calendarId}/events/{eventId}`.
    /// - Remark: Generated from `#/paths//calendars/{calendarId}/events/{eventId}/get(calendar.events.get)`.
    public enum Calendar_events_get {
        public static let id: Swift.String = "calendar.events.get"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/calendars/{calendarId}/events/{eventId}/GET/path`.
            public struct Path: Sendable, Hashable {
                /// Calendar identifier. To retrieve calendar IDs call the calendarList.list method. If you want to access the primary calendar of the currently logged in user, use the "primary" keyword.
                ///
                /// - Remark: Generated from `#/paths/calendars/{calendarId}/events/{eventId}/GET/path/calendarId`.
                public var calendarId: Swift.String
                /// Event identifier.
                ///
                /// - Remark: Generated from `#/paths/calendars/{calendarId}/events/{eventId}/GET/path/eventId`.
                public var eventId: Swift.String
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - calendarId: Calendar identifier. To retrieve calendar IDs call the calendarList.list method. If you want to access the primary calendar of the currently logged in user, use the "primary" keyword.
                ///   - eventId: Event identifier.
                public init(
                    calendarId: Swift.String,
                    eventId: Swift.String
                ) {
                    self.calendarId = calendarId
                    self.eventId = eventId
                }
            }
            public var path: Operations.Calendar_events_get.Input.Path
            /// - Remark: Generated from `#/paths/calendars/{calendarId}/events/{eventId}/GET/query`.
            public struct Query: Sendable, Hashable {
                /// - Remark: Generated from `#/components/parameters/alt`.
                @frozen public enum Alt: String, Codable, Hashable, Sendable, CaseIterable {
                    case json = "json"
                }
                /// Data format for the response.
                ///
                /// - Remark: Generated from `#/paths/calendars/{calendarId}/events/{eventId}/GET/query/alt`.
                public var alt: Components.Parameters.Alt?
                /// Selector specifying which fields to include in a partial response.
                ///
                /// - Remark: Generated from `#/paths/calendars/{calendarId}/events/{eventId}/GET/query/fields`.
                public var fields: Components.Parameters.Fields?
                /// API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
                ///
                /// - Remark: Generated from `#/paths/calendars/{calendarId}/events/{eventId}/GET/query/key`.
                public var key: Components.Parameters.Key?
                /// OAuth 2.0 token for the current user.
                ///
                /// - Remark: Generated from `#/paths/calendars/{calendarId}/events/{eventId}/GET/query/oauth_token`.
                public var oauthToken: Components.Parameters.OauthToken?
                /// Returns response with indentations and line breaks.
                ///
                /// - Remark: Generated from `#/paths/calendars/{calendarId}/events/{eventId}/GET/query/prettyPrint`.
                public var prettyPrint: Components.Parameters.PrettyPrint?
                /// An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
                ///
                /// - Remark: Generated from `#/paths/calendars/{calendarId}/events/{eventId}/GET/query/quotaUser`.
                public var quotaUser: Components.Parameters.QuotaUser?
                /// Deprecated. Please use quotaUser instead.
                ///
                /// - Remark: Generated from `#/paths/calendars/{calendarId}/events/{eventId}/GET/query/userIp`.
                public var userIp: Components.Parameters.UserIp?
                /// Deprecated and ignored. A value will always be returned in the email field for the organizer, creator and attendees, even if no real email address is available (i.e. a generated, non-working value will be provided).
                ///
                /// - Remark: Generated from `#/paths/calendars/{calendarId}/events/{eventId}/GET/query/alwaysIncludeEmail`.
                public var alwaysIncludeEmail: Swift.Bool?
                /// The maximum number of attendees to include in the response. If there are more than the specified number of attendees, only the participant is returned. Optional.
                ///
                /// - Remark: Generated from `#/paths/calendars/{calendarId}/events/{eventId}/GET/query/maxAttendees`.
                public var maxAttendees: Swift.Int?
                /// Time zone used in the response. Optional. The default is the time zone of the calendar.
                ///
                /// - Remark: Generated from `#/paths/calendars/{calendarId}/events/{eventId}/GET/query/timeZone`.
                public var timeZone: Swift.String?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - alt: Data format for the response.
                ///   - fields: Selector specifying which fields to include in a partial response.
                ///   - key: API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
                ///   - oauthToken: OAuth 2.0 token for the current user.
                ///   - prettyPrint: Returns response with indentations and line breaks.
                ///   - quotaUser: An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
                ///   - userIp: Deprecated. Please use quotaUser instead.
                ///   - alwaysIncludeEmail: Deprecated and ignored. A value will always be returned in the email field for the organizer, creator and attendees, even if no real email address is available (i.e. a generated, non-working value will be provided).
                ///   - maxAttendees: The maximum number of attendees to include in the response. If there are more than the specified number of attendees, only the participant is returned. Optional.
                ///   - timeZone: Time zone used in the response. Optional. The default is the time zone of the calendar.
                public init(
                    alt: Components.Parameters.Alt? = nil,
                    fields: Components.Parameters.Fields? = nil,
                    key: Components.Parameters.Key? = nil,
                    oauthToken: Components.Parameters.OauthToken? = nil,
                    prettyPrint: Components.Parameters.PrettyPrint? = nil,
                    quotaUser: Components.Parameters.QuotaUser? = nil,
                    userIp: Components.Parameters.UserIp? = nil,
                    alwaysIncludeEmail: Swift.Bool? = nil,
                    maxAttendees: Swift.Int? = nil,
                    timeZone: Swift.String? = nil
                ) {
                    self.alt = alt
                    self.fields = fields
                    self.key = key
                    self.oauthToken = oauthToken
                    self.prettyPrint = prettyPrint
                    self.quotaUser = quotaUser
                    self.userIp = userIp
                    self.alwaysIncludeEmail = alwaysIncludeEmail
                    self.maxAttendees = maxAttendees
                    self.timeZone = timeZone
                }
            }
            public var query: Operations.Calendar_events_get.Input.Query
            /// - Remark: Generated from `#/paths/calendars/{calendarId}/events/{eventId}/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.Calendar_events_get.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.Calendar_events_get.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.Calendar_events_get.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - query:
            ///   - headers:
            public init(
                path: Operations.Calendar_events_get.Input.Path,
                query: Operations.Calendar_events_get.Input.Query = .init(),
                headers: Operations.Calendar_events_get.Input.Headers = .init()
            ) {
                self.path = path
                self.query = query
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/calendars/{calendarId}/events/{eventId}/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/calendars/{calendarId}/events/{eventId}/GET/responses/200/content/application\/json`.
                    case json(Components.Schemas.Event)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.Event {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.Calendar_events_get.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.Calendar_events_get.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Successful response
            ///
            /// - Remark: Generated from `#/paths//calendars/{calendarId}/events/{eventId}/get(calendar.events.get)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.Calendar_events_get.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.Calendar_events_get.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Updates an event. This method supports patch semantics.
    ///
    /// - Remark: HTTP `PATCH /calendars/{calendarId}/events/{eventId}`.
    /// - Remark: Generated from `#/paths//calendars/{calendarId}/events/{eventId}/patch(calendar.events.patch)`.
    public enum Calendar_events_patch {
        public static let id: Swift.String = "calendar.events.patch"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/calendars/{calendarId}/events/{eventId}/PATCH/path`.
            public struct Path: Sendable, Hashable {
                /// Calendar identifier. To retrieve calendar IDs call the calendarList.list method. If you want to access the primary calendar of the currently logged in user, use the "primary" keyword.
                ///
                /// - Remark: Generated from `#/paths/calendars/{calendarId}/events/{eventId}/PATCH/path/calendarId`.
                public var calendarId: Swift.String
                /// Event identifier.
                ///
                /// - Remark: Generated from `#/paths/calendars/{calendarId}/events/{eventId}/PATCH/path/eventId`.
                public var eventId: Swift.String
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - calendarId: Calendar identifier. To retrieve calendar IDs call the calendarList.list method. If you want to access the primary calendar of the currently logged in user, use the "primary" keyword.
                ///   - eventId: Event identifier.
                public init(
                    calendarId: Swift.String,
                    eventId: Swift.String
                ) {
                    self.calendarId = calendarId
                    self.eventId = eventId
                }
            }
            public var path: Operations.Calendar_events_patch.Input.Path
            /// - Remark: Generated from `#/paths/calendars/{calendarId}/events/{eventId}/PATCH/query`.
            public struct Query: Sendable, Hashable {
                /// - Remark: Generated from `#/components/parameters/alt`.
                @frozen public enum Alt: String, Codable, Hashable, Sendable, CaseIterable {
                    case json = "json"
                }
                /// Data format for the response.
                ///
                /// - Remark: Generated from `#/paths/calendars/{calendarId}/events/{eventId}/PATCH/query/alt`.
                public var alt: Components.Parameters.Alt?
                /// Selector specifying which fields to include in a partial response.
                ///
                /// - Remark: Generated from `#/paths/calendars/{calendarId}/events/{eventId}/PATCH/query/fields`.
                public var fields: Components.Parameters.Fields?
                /// API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
                ///
                /// - Remark: Generated from `#/paths/calendars/{calendarId}/events/{eventId}/PATCH/query/key`.
                public var key: Components.Parameters.Key?
                /// OAuth 2.0 token for the current user.
                ///
                /// - Remark: Generated from `#/paths/calendars/{calendarId}/events/{eventId}/PATCH/query/oauth_token`.
                public var oauthToken: Components.Parameters.OauthToken?
                /// Returns response with indentations and line breaks.
                ///
                /// - Remark: Generated from `#/paths/calendars/{calendarId}/events/{eventId}/PATCH/query/prettyPrint`.
                public var prettyPrint: Components.Parameters.PrettyPrint?
                /// An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
                ///
                /// - Remark: Generated from `#/paths/calendars/{calendarId}/events/{eventId}/PATCH/query/quotaUser`.
                public var quotaUser: Components.Parameters.QuotaUser?
                /// Deprecated. Please use quotaUser instead.
                ///
                /// - Remark: Generated from `#/paths/calendars/{calendarId}/events/{eventId}/PATCH/query/userIp`.
                public var userIp: Components.Parameters.UserIp?
                /// Deprecated and ignored. A value will always be returned in the email field for the organizer, creator and attendees, even if no real email address is available (i.e. a generated, non-working value will be provided).
                ///
                /// - Remark: Generated from `#/paths/calendars/{calendarId}/events/{eventId}/PATCH/query/alwaysIncludeEmail`.
                public var alwaysIncludeEmail: Swift.Bool?
                /// Version number of conference data supported by the API client. Version 0 assumes no conference data support and ignores conference data in the event's body. Version 1 enables support for copying of ConferenceData as well as for creating new conferences using the createRequest field of conferenceData. The default is 0.
                ///
                /// - Remark: Generated from `#/paths/calendars/{calendarId}/events/{eventId}/PATCH/query/conferenceDataVersion`.
                public var conferenceDataVersion: Swift.Int?
                /// The maximum number of attendees to include in the response. If there are more than the specified number of attendees, only the participant is returned. Optional.
                ///
                /// - Remark: Generated from `#/paths/calendars/{calendarId}/events/{eventId}/PATCH/query/maxAttendees`.
                public var maxAttendees: Swift.Int?
                /// Deprecated. Please use sendUpdates instead.
                ///
                /// Whether to send notifications about the event update (for example, description changes, etc.). Note that some emails might still be sent even if you set the value to false. The default is false.
                ///
                /// - Remark: Generated from `#/paths/calendars/{calendarId}/events/{eventId}/PATCH/query/sendNotifications`.
                public var sendNotifications: Swift.Bool?
                /// - Remark: Generated from `#/paths/calendars/{calendarId}/events/{eventId}/PATCH/query/sendUpdates`.
                @frozen public enum SendUpdatesPayload: String, Codable, Hashable, Sendable, CaseIterable {
                    case all = "all"
                    case externalOnly = "externalOnly"
                    case none = "none"
                }
                /// Guests who should receive notifications about the event update (for example, title changes, etc.).
                ///
                /// - Remark: Generated from `#/paths/calendars/{calendarId}/events/{eventId}/PATCH/query/sendUpdates`.
                public var sendUpdates: Operations.Calendar_events_patch.Input.Query.SendUpdatesPayload?
                /// Whether API client performing operation supports event attachments. Optional. The default is False.
                ///
                /// - Remark: Generated from `#/paths/calendars/{calendarId}/events/{eventId}/PATCH/query/supportsAttachments`.
                public var supportsAttachments: Swift.Bool?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - alt: Data format for the response.
                ///   - fields: Selector specifying which fields to include in a partial response.
                ///   - key: API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
                ///   - oauthToken: OAuth 2.0 token for the current user.
                ///   - prettyPrint: Returns response with indentations and line breaks.
                ///   - quotaUser: An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
                ///   - userIp: Deprecated. Please use quotaUser instead.
                ///   - alwaysIncludeEmail: Deprecated and ignored. A value will always be returned in the email field for the organizer, creator and attendees, even if no real email address is available (i.e. a generated, non-working value will be provided).
                ///   - conferenceDataVersion: Version number of conference data supported by the API client. Version 0 assumes no conference data support and ignores conference data in the event's body. Version 1 enables support for copying of ConferenceData as well as for creating new conferences using the createRequest field of conferenceData. The default is 0.
                ///   - maxAttendees: The maximum number of attendees to include in the response. If there are more than the specified number of attendees, only the participant is returned. Optional.
                ///   - sendNotifications: Deprecated. Please use sendUpdates instead.
                ///   - sendUpdates: Guests who should receive notifications about the event update (for example, title changes, etc.).
                ///   - supportsAttachments: Whether API client performing operation supports event attachments. Optional. The default is False.
                public init(
                    alt: Components.Parameters.Alt? = nil,
                    fields: Components.Parameters.Fields? = nil,
                    key: Components.Parameters.Key? = nil,
                    oauthToken: Components.Parameters.OauthToken? = nil,
                    prettyPrint: Components.Parameters.PrettyPrint? = nil,
                    quotaUser: Components.Parameters.QuotaUser? = nil,
                    userIp: Components.Parameters.UserIp? = nil,
                    alwaysIncludeEmail: Swift.Bool? = nil,
                    conferenceDataVersion: Swift.Int? = nil,
                    maxAttendees: Swift.Int? = nil,
                    sendNotifications: Swift.Bool? = nil,
                    sendUpdates: Operations.Calendar_events_patch.Input.Query.SendUpdatesPayload? = nil,
                    supportsAttachments: Swift.Bool? = nil
                ) {
                    self.alt = alt
                    self.fields = fields
                    self.key = key
                    self.oauthToken = oauthToken
                    self.prettyPrint = prettyPrint
                    self.quotaUser = quotaUser
                    self.userIp = userIp
                    self.alwaysIncludeEmail = alwaysIncludeEmail
                    self.conferenceDataVersion = conferenceDataVersion
                    self.maxAttendees = maxAttendees
                    self.sendNotifications = sendNotifications
                    self.sendUpdates = sendUpdates
                    self.supportsAttachments = supportsAttachments
                }
            }
            public var query: Operations.Calendar_events_patch.Input.Query
            /// - Remark: Generated from `#/paths/calendars/{calendarId}/events/{eventId}/PATCH/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.Calendar_events_patch.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.Calendar_events_patch.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.Calendar_events_patch.Input.Headers
            /// - Remark: Generated from `#/paths/calendars/{calendarId}/events/{eventId}/PATCH/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/calendars/{calendarId}/events/{eventId}/PATCH/requestBody/content/application\/json`.
                case json(Components.Schemas.Event)
            }
            public var body: Operations.Calendar_events_patch.Input.Body?
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - query:
            ///   - headers:
            ///   - body:
            public init(
                path: Operations.Calendar_events_patch.Input.Path,
                query: Operations.Calendar_events_patch.Input.Query = .init(),
                headers: Operations.Calendar_events_patch.Input.Headers = .init(),
                body: Operations.Calendar_events_patch.Input.Body? = nil
            ) {
                self.path = path
                self.query = query
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/calendars/{calendarId}/events/{eventId}/PATCH/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/calendars/{calendarId}/events/{eventId}/PATCH/responses/200/content/application\/json`.
                    case json(Components.Schemas.Event)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.Event {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.Calendar_events_patch.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.Calendar_events_patch.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Successful response
            ///
            /// - Remark: Generated from `#/paths//calendars/{calendarId}/events/{eventId}/patch(calendar.events.patch)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.Calendar_events_patch.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.Calendar_events_patch.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Updates an event.
    ///
    /// - Remark: HTTP `PUT /calendars/{calendarId}/events/{eventId}`.
    /// - Remark: Generated from `#/paths//calendars/{calendarId}/events/{eventId}/put(calendar.events.update)`.
    public enum Calendar_events_update {
        public static let id: Swift.String = "calendar.events.update"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/calendars/{calendarId}/events/{eventId}/PUT/path`.
            public struct Path: Sendable, Hashable {
                /// Calendar identifier. To retrieve calendar IDs call the calendarList.list method. If you want to access the primary calendar of the currently logged in user, use the "primary" keyword.
                ///
                /// - Remark: Generated from `#/paths/calendars/{calendarId}/events/{eventId}/PUT/path/calendarId`.
                public var calendarId: Swift.String
                /// Event identifier.
                ///
                /// - Remark: Generated from `#/paths/calendars/{calendarId}/events/{eventId}/PUT/path/eventId`.
                public var eventId: Swift.String
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - calendarId: Calendar identifier. To retrieve calendar IDs call the calendarList.list method. If you want to access the primary calendar of the currently logged in user, use the "primary" keyword.
                ///   - eventId: Event identifier.
                public init(
                    calendarId: Swift.String,
                    eventId: Swift.String
                ) {
                    self.calendarId = calendarId
                    self.eventId = eventId
                }
            }
            public var path: Operations.Calendar_events_update.Input.Path
            /// - Remark: Generated from `#/paths/calendars/{calendarId}/events/{eventId}/PUT/query`.
            public struct Query: Sendable, Hashable {
                /// - Remark: Generated from `#/components/parameters/alt`.
                @frozen public enum Alt: String, Codable, Hashable, Sendable, CaseIterable {
                    case json = "json"
                }
                /// Data format for the response.
                ///
                /// - Remark: Generated from `#/paths/calendars/{calendarId}/events/{eventId}/PUT/query/alt`.
                public var alt: Components.Parameters.Alt?
                /// Selector specifying which fields to include in a partial response.
                ///
                /// - Remark: Generated from `#/paths/calendars/{calendarId}/events/{eventId}/PUT/query/fields`.
                public var fields: Components.Parameters.Fields?
                /// API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
                ///
                /// - Remark: Generated from `#/paths/calendars/{calendarId}/events/{eventId}/PUT/query/key`.
                public var key: Components.Parameters.Key?
                /// OAuth 2.0 token for the current user.
                ///
                /// - Remark: Generated from `#/paths/calendars/{calendarId}/events/{eventId}/PUT/query/oauth_token`.
                public var oauthToken: Components.Parameters.OauthToken?
                /// Returns response with indentations and line breaks.
                ///
                /// - Remark: Generated from `#/paths/calendars/{calendarId}/events/{eventId}/PUT/query/prettyPrint`.
                public var prettyPrint: Components.Parameters.PrettyPrint?
                /// An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
                ///
                /// - Remark: Generated from `#/paths/calendars/{calendarId}/events/{eventId}/PUT/query/quotaUser`.
                public var quotaUser: Components.Parameters.QuotaUser?
                /// Deprecated. Please use quotaUser instead.
                ///
                /// - Remark: Generated from `#/paths/calendars/{calendarId}/events/{eventId}/PUT/query/userIp`.
                public var userIp: Components.Parameters.UserIp?
                /// Deprecated and ignored. A value will always be returned in the email field for the organizer, creator and attendees, even if no real email address is available (i.e. a generated, non-working value will be provided).
                ///
                /// - Remark: Generated from `#/paths/calendars/{calendarId}/events/{eventId}/PUT/query/alwaysIncludeEmail`.
                public var alwaysIncludeEmail: Swift.Bool?
                /// Version number of conference data supported by the API client. Version 0 assumes no conference data support and ignores conference data in the event's body. Version 1 enables support for copying of ConferenceData as well as for creating new conferences using the createRequest field of conferenceData. The default is 0.
                ///
                /// - Remark: Generated from `#/paths/calendars/{calendarId}/events/{eventId}/PUT/query/conferenceDataVersion`.
                public var conferenceDataVersion: Swift.Int?
                /// The maximum number of attendees to include in the response. If there are more than the specified number of attendees, only the participant is returned. Optional.
                ///
                /// - Remark: Generated from `#/paths/calendars/{calendarId}/events/{eventId}/PUT/query/maxAttendees`.
                public var maxAttendees: Swift.Int?
                /// Deprecated. Please use sendUpdates instead.
                ///
                /// Whether to send notifications about the event update (for example, description changes, etc.). Note that some emails might still be sent even if you set the value to false. The default is false.
                ///
                /// - Remark: Generated from `#/paths/calendars/{calendarId}/events/{eventId}/PUT/query/sendNotifications`.
                public var sendNotifications: Swift.Bool?
                /// - Remark: Generated from `#/paths/calendars/{calendarId}/events/{eventId}/PUT/query/sendUpdates`.
                @frozen public enum SendUpdatesPayload: String, Codable, Hashable, Sendable, CaseIterable {
                    case all = "all"
                    case externalOnly = "externalOnly"
                    case none = "none"
                }
                /// Guests who should receive notifications about the event update (for example, title changes, etc.).
                ///
                /// - Remark: Generated from `#/paths/calendars/{calendarId}/events/{eventId}/PUT/query/sendUpdates`.
                public var sendUpdates: Operations.Calendar_events_update.Input.Query.SendUpdatesPayload?
                /// Whether API client performing operation supports event attachments. Optional. The default is False.
                ///
                /// - Remark: Generated from `#/paths/calendars/{calendarId}/events/{eventId}/PUT/query/supportsAttachments`.
                public var supportsAttachments: Swift.Bool?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - alt: Data format for the response.
                ///   - fields: Selector specifying which fields to include in a partial response.
                ///   - key: API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
                ///   - oauthToken: OAuth 2.0 token for the current user.
                ///   - prettyPrint: Returns response with indentations and line breaks.
                ///   - quotaUser: An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
                ///   - userIp: Deprecated. Please use quotaUser instead.
                ///   - alwaysIncludeEmail: Deprecated and ignored. A value will always be returned in the email field for the organizer, creator and attendees, even if no real email address is available (i.e. a generated, non-working value will be provided).
                ///   - conferenceDataVersion: Version number of conference data supported by the API client. Version 0 assumes no conference data support and ignores conference data in the event's body. Version 1 enables support for copying of ConferenceData as well as for creating new conferences using the createRequest field of conferenceData. The default is 0.
                ///   - maxAttendees: The maximum number of attendees to include in the response. If there are more than the specified number of attendees, only the participant is returned. Optional.
                ///   - sendNotifications: Deprecated. Please use sendUpdates instead.
                ///   - sendUpdates: Guests who should receive notifications about the event update (for example, title changes, etc.).
                ///   - supportsAttachments: Whether API client performing operation supports event attachments. Optional. The default is False.
                public init(
                    alt: Components.Parameters.Alt? = nil,
                    fields: Components.Parameters.Fields? = nil,
                    key: Components.Parameters.Key? = nil,
                    oauthToken: Components.Parameters.OauthToken? = nil,
                    prettyPrint: Components.Parameters.PrettyPrint? = nil,
                    quotaUser: Components.Parameters.QuotaUser? = nil,
                    userIp: Components.Parameters.UserIp? = nil,
                    alwaysIncludeEmail: Swift.Bool? = nil,
                    conferenceDataVersion: Swift.Int? = nil,
                    maxAttendees: Swift.Int? = nil,
                    sendNotifications: Swift.Bool? = nil,
                    sendUpdates: Operations.Calendar_events_update.Input.Query.SendUpdatesPayload? = nil,
                    supportsAttachments: Swift.Bool? = nil
                ) {
                    self.alt = alt
                    self.fields = fields
                    self.key = key
                    self.oauthToken = oauthToken
                    self.prettyPrint = prettyPrint
                    self.quotaUser = quotaUser
                    self.userIp = userIp
                    self.alwaysIncludeEmail = alwaysIncludeEmail
                    self.conferenceDataVersion = conferenceDataVersion
                    self.maxAttendees = maxAttendees
                    self.sendNotifications = sendNotifications
                    self.sendUpdates = sendUpdates
                    self.supportsAttachments = supportsAttachments
                }
            }
            public var query: Operations.Calendar_events_update.Input.Query
            /// - Remark: Generated from `#/paths/calendars/{calendarId}/events/{eventId}/PUT/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.Calendar_events_update.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.Calendar_events_update.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.Calendar_events_update.Input.Headers
            /// - Remark: Generated from `#/paths/calendars/{calendarId}/events/{eventId}/PUT/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/calendars/{calendarId}/events/{eventId}/PUT/requestBody/content/application\/json`.
                case json(Components.Schemas.Event)
            }
            public var body: Operations.Calendar_events_update.Input.Body?
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - query:
            ///   - headers:
            ///   - body:
            public init(
                path: Operations.Calendar_events_update.Input.Path,
                query: Operations.Calendar_events_update.Input.Query = .init(),
                headers: Operations.Calendar_events_update.Input.Headers = .init(),
                body: Operations.Calendar_events_update.Input.Body? = nil
            ) {
                self.path = path
                self.query = query
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/calendars/{calendarId}/events/{eventId}/PUT/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/calendars/{calendarId}/events/{eventId}/PUT/responses/200/content/application\/json`.
                    case json(Components.Schemas.Event)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.Event {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.Calendar_events_update.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.Calendar_events_update.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Successful response
            ///
            /// - Remark: Generated from `#/paths//calendars/{calendarId}/events/{eventId}/put(calendar.events.update)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.Calendar_events_update.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.Calendar_events_update.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Deletes an event.
    ///
    /// - Remark: HTTP `DELETE /calendars/{calendarId}/events/{eventId}`.
    /// - Remark: Generated from `#/paths//calendars/{calendarId}/events/{eventId}/delete(calendar.events.delete)`.
    public enum Calendar_events_delete {
        public static let id: Swift.String = "calendar.events.delete"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/calendars/{calendarId}/events/{eventId}/DELETE/path`.
            public struct Path: Sendable, Hashable {
                /// Calendar identifier. To retrieve calendar IDs call the calendarList.list method. If you want to access the primary calendar of the currently logged in user, use the "primary" keyword.
                ///
                /// - Remark: Generated from `#/paths/calendars/{calendarId}/events/{eventId}/DELETE/path/calendarId`.
                public var calendarId: Swift.String
                /// Event identifier.
                ///
                /// - Remark: Generated from `#/paths/calendars/{calendarId}/events/{eventId}/DELETE/path/eventId`.
                public var eventId: Swift.String
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - calendarId: Calendar identifier. To retrieve calendar IDs call the calendarList.list method. If you want to access the primary calendar of the currently logged in user, use the "primary" keyword.
                ///   - eventId: Event identifier.
                public init(
                    calendarId: Swift.String,
                    eventId: Swift.String
                ) {
                    self.calendarId = calendarId
                    self.eventId = eventId
                }
            }
            public var path: Operations.Calendar_events_delete.Input.Path
            /// - Remark: Generated from `#/paths/calendars/{calendarId}/events/{eventId}/DELETE/query`.
            public struct Query: Sendable, Hashable {
                /// - Remark: Generated from `#/components/parameters/alt`.
                @frozen public enum Alt: String, Codable, Hashable, Sendable, CaseIterable {
                    case json = "json"
                }
                /// Data format for the response.
                ///
                /// - Remark: Generated from `#/paths/calendars/{calendarId}/events/{eventId}/DELETE/query/alt`.
                public var alt: Components.Parameters.Alt?
                /// Selector specifying which fields to include in a partial response.
                ///
                /// - Remark: Generated from `#/paths/calendars/{calendarId}/events/{eventId}/DELETE/query/fields`.
                public var fields: Components.Parameters.Fields?
                /// API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
                ///
                /// - Remark: Generated from `#/paths/calendars/{calendarId}/events/{eventId}/DELETE/query/key`.
                public var key: Components.Parameters.Key?
                /// OAuth 2.0 token for the current user.
                ///
                /// - Remark: Generated from `#/paths/calendars/{calendarId}/events/{eventId}/DELETE/query/oauth_token`.
                public var oauthToken: Components.Parameters.OauthToken?
                /// Returns response with indentations and line breaks.
                ///
                /// - Remark: Generated from `#/paths/calendars/{calendarId}/events/{eventId}/DELETE/query/prettyPrint`.
                public var prettyPrint: Components.Parameters.PrettyPrint?
                /// An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
                ///
                /// - Remark: Generated from `#/paths/calendars/{calendarId}/events/{eventId}/DELETE/query/quotaUser`.
                public var quotaUser: Components.Parameters.QuotaUser?
                /// Deprecated. Please use quotaUser instead.
                ///
                /// - Remark: Generated from `#/paths/calendars/{calendarId}/events/{eventId}/DELETE/query/userIp`.
                public var userIp: Components.Parameters.UserIp?
                /// Deprecated. Please use sendUpdates instead.
                ///
                /// Whether to send notifications about the deletion of the event. Note that some emails might still be sent even if you set the value to false. The default is false.
                ///
                /// - Remark: Generated from `#/paths/calendars/{calendarId}/events/{eventId}/DELETE/query/sendNotifications`.
                public var sendNotifications: Swift.Bool?
                /// - Remark: Generated from `#/paths/calendars/{calendarId}/events/{eventId}/DELETE/query/sendUpdates`.
                @frozen public enum SendUpdatesPayload: String, Codable, Hashable, Sendable, CaseIterable {
                    case all = "all"
                    case externalOnly = "externalOnly"
                    case none = "none"
                }
                /// Guests who should receive notifications about the deletion of the event.
                ///
                /// - Remark: Generated from `#/paths/calendars/{calendarId}/events/{eventId}/DELETE/query/sendUpdates`.
                public var sendUpdates: Operations.Calendar_events_delete.Input.Query.SendUpdatesPayload?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - alt: Data format for the response.
                ///   - fields: Selector specifying which fields to include in a partial response.
                ///   - key: API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
                ///   - oauthToken: OAuth 2.0 token for the current user.
                ///   - prettyPrint: Returns response with indentations and line breaks.
                ///   - quotaUser: An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
                ///   - userIp: Deprecated. Please use quotaUser instead.
                ///   - sendNotifications: Deprecated. Please use sendUpdates instead.
                ///   - sendUpdates: Guests who should receive notifications about the deletion of the event.
                public init(
                    alt: Components.Parameters.Alt? = nil,
                    fields: Components.Parameters.Fields? = nil,
                    key: Components.Parameters.Key? = nil,
                    oauthToken: Components.Parameters.OauthToken? = nil,
                    prettyPrint: Components.Parameters.PrettyPrint? = nil,
                    quotaUser: Components.Parameters.QuotaUser? = nil,
                    userIp: Components.Parameters.UserIp? = nil,
                    sendNotifications: Swift.Bool? = nil,
                    sendUpdates: Operations.Calendar_events_delete.Input.Query.SendUpdatesPayload? = nil
                ) {
                    self.alt = alt
                    self.fields = fields
                    self.key = key
                    self.oauthToken = oauthToken
                    self.prettyPrint = prettyPrint
                    self.quotaUser = quotaUser
                    self.userIp = userIp
                    self.sendNotifications = sendNotifications
                    self.sendUpdates = sendUpdates
                }
            }
            public var query: Operations.Calendar_events_delete.Input.Query
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - query:
            public init(
                path: Operations.Calendar_events_delete.Input.Path,
                query: Operations.Calendar_events_delete.Input.Query = .init()
            ) {
                self.path = path
                self.query = query
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// Creates a new `Ok`.
                public init() {}
            }
            /// Successful response
            ///
            /// - Remark: Generated from `#/paths//calendars/{calendarId}/events/{eventId}/delete(calendar.events.delete)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.Calendar_events_delete.Output.Ok)
            /// Successful response
            ///
            /// - Remark: Generated from `#/paths//calendars/{calendarId}/events/{eventId}/delete(calendar.events.delete)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            public static var ok: Self {
                .ok(.init())
            }
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.Calendar_events_delete.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
    }
    /// Returns instances of the specified recurring event.
    ///
    /// - Remark: HTTP `GET /calendars/{calendarId}/events/{eventId}/instances`.
    /// - Remark: Generated from `#/paths//calendars/{calendarId}/events/{eventId}/instances/get(calendar.events.instances)`.
    public enum Calendar_events_instances {
        public static let id: Swift.String = "calendar.events.instances"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/calendars/{calendarId}/events/{eventId}/instances/GET/path`.
            public struct Path: Sendable, Hashable {
                /// Calendar identifier. To retrieve calendar IDs call the calendarList.list method. If you want to access the primary calendar of the currently logged in user, use the "primary" keyword.
                ///
                /// - Remark: Generated from `#/paths/calendars/{calendarId}/events/{eventId}/instances/GET/path/calendarId`.
                public var calendarId: Swift.String
                /// Recurring event identifier.
                ///
                /// - Remark: Generated from `#/paths/calendars/{calendarId}/events/{eventId}/instances/GET/path/eventId`.
                public var eventId: Swift.String
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - calendarId: Calendar identifier. To retrieve calendar IDs call the calendarList.list method. If you want to access the primary calendar of the currently logged in user, use the "primary" keyword.
                ///   - eventId: Recurring event identifier.
                public init(
                    calendarId: Swift.String,
                    eventId: Swift.String
                ) {
                    self.calendarId = calendarId
                    self.eventId = eventId
                }
            }
            public var path: Operations.Calendar_events_instances.Input.Path
            /// - Remark: Generated from `#/paths/calendars/{calendarId}/events/{eventId}/instances/GET/query`.
            public struct Query: Sendable, Hashable {
                /// - Remark: Generated from `#/components/parameters/alt`.
                @frozen public enum Alt: String, Codable, Hashable, Sendable, CaseIterable {
                    case json = "json"
                }
                /// Data format for the response.
                ///
                /// - Remark: Generated from `#/paths/calendars/{calendarId}/events/{eventId}/instances/GET/query/alt`.
                public var alt: Components.Parameters.Alt?
                /// Selector specifying which fields to include in a partial response.
                ///
                /// - Remark: Generated from `#/paths/calendars/{calendarId}/events/{eventId}/instances/GET/query/fields`.
                public var fields: Components.Parameters.Fields?
                /// API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
                ///
                /// - Remark: Generated from `#/paths/calendars/{calendarId}/events/{eventId}/instances/GET/query/key`.
                public var key: Components.Parameters.Key?
                /// OAuth 2.0 token for the current user.
                ///
                /// - Remark: Generated from `#/paths/calendars/{calendarId}/events/{eventId}/instances/GET/query/oauth_token`.
                public var oauthToken: Components.Parameters.OauthToken?
                /// Returns response with indentations and line breaks.
                ///
                /// - Remark: Generated from `#/paths/calendars/{calendarId}/events/{eventId}/instances/GET/query/prettyPrint`.
                public var prettyPrint: Components.Parameters.PrettyPrint?
                /// An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
                ///
                /// - Remark: Generated from `#/paths/calendars/{calendarId}/events/{eventId}/instances/GET/query/quotaUser`.
                public var quotaUser: Components.Parameters.QuotaUser?
                /// Deprecated. Please use quotaUser instead.
                ///
                /// - Remark: Generated from `#/paths/calendars/{calendarId}/events/{eventId}/instances/GET/query/userIp`.
                public var userIp: Components.Parameters.UserIp?
                /// Deprecated and ignored. A value will always be returned in the email field for the organizer, creator and attendees, even if no real email address is available (i.e. a generated, non-working value will be provided).
                ///
                /// - Remark: Generated from `#/paths/calendars/{calendarId}/events/{eventId}/instances/GET/query/alwaysIncludeEmail`.
                public var alwaysIncludeEmail: Swift.Bool?
                /// The maximum number of attendees to include in the response. If there are more than the specified number of attendees, only the participant is returned. Optional.
                ///
                /// - Remark: Generated from `#/paths/calendars/{calendarId}/events/{eventId}/instances/GET/query/maxAttendees`.
                public var maxAttendees: Swift.Int?
                /// Maximum number of events returned on one result page. By default the value is 250 events. The page size can never be larger than 2500 events. Optional.
                ///
                /// - Remark: Generated from `#/paths/calendars/{calendarId}/events/{eventId}/instances/GET/query/maxResults`.
                public var maxResults: Swift.Int?
                /// The original start time of the instance in the result. Optional.
                ///
                /// - Remark: Generated from `#/paths/calendars/{calendarId}/events/{eventId}/instances/GET/query/originalStart`.
                public var originalStart: Swift.String?
                /// Token specifying which result page to return. Optional.
                ///
                /// - Remark: Generated from `#/paths/calendars/{calendarId}/events/{eventId}/instances/GET/query/pageToken`.
                public var pageToken: Swift.String?
                /// Whether to include deleted events (with status equals "cancelled") in the result. Cancelled instances of recurring events will still be included if singleEvents is False. Optional. The default is False.
                ///
                /// - Remark: Generated from `#/paths/calendars/{calendarId}/events/{eventId}/instances/GET/query/showDeleted`.
                public var showDeleted: Swift.Bool?
                /// Upper bound (exclusive) for an event's start time to filter by. Optional. The default is not to filter by start time. Must be an RFC3339 timestamp with mandatory time zone offset.
                ///
                /// - Remark: Generated from `#/paths/calendars/{calendarId}/events/{eventId}/instances/GET/query/timeMax`.
                public var timeMax: Swift.String?
                /// Lower bound (inclusive) for an event's end time to filter by. Optional. The default is not to filter by end time. Must be an RFC3339 timestamp with mandatory time zone offset.
                ///
                /// - Remark: Generated from `#/paths/calendars/{calendarId}/events/{eventId}/instances/GET/query/timeMin`.
                public var timeMin: Swift.String?
                /// Time zone used in the response. Optional. The default is the time zone of the calendar.
                ///
                /// - Remark: Generated from `#/paths/calendars/{calendarId}/events/{eventId}/instances/GET/query/timeZone`.
                public var timeZone: Swift.String?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - alt: Data format for the response.
                ///   - fields: Selector specifying which fields to include in a partial response.
                ///   - key: API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
                ///   - oauthToken: OAuth 2.0 token for the current user.
                ///   - prettyPrint: Returns response with indentations and line breaks.
                ///   - quotaUser: An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
                ///   - userIp: Deprecated. Please use quotaUser instead.
                ///   - alwaysIncludeEmail: Deprecated and ignored. A value will always be returned in the email field for the organizer, creator and attendees, even if no real email address is available (i.e. a generated, non-working value will be provided).
                ///   - maxAttendees: The maximum number of attendees to include in the response. If there are more than the specified number of attendees, only the participant is returned. Optional.
                ///   - maxResults: Maximum number of events returned on one result page. By default the value is 250 events. The page size can never be larger than 2500 events. Optional.
                ///   - originalStart: The original start time of the instance in the result. Optional.
                ///   - pageToken: Token specifying which result page to return. Optional.
                ///   - showDeleted: Whether to include deleted events (with status equals "cancelled") in the result. Cancelled instances of recurring events will still be included if singleEvents is False. Optional. The default is False.
                ///   - timeMax: Upper bound (exclusive) for an event's start time to filter by. Optional. The default is not to filter by start time. Must be an RFC3339 timestamp with mandatory time zone offset.
                ///   - timeMin: Lower bound (inclusive) for an event's end time to filter by. Optional. The default is not to filter by end time. Must be an RFC3339 timestamp with mandatory time zone offset.
                ///   - timeZone: Time zone used in the response. Optional. The default is the time zone of the calendar.
                public init(
                    alt: Components.Parameters.Alt? = nil,
                    fields: Components.Parameters.Fields? = nil,
                    key: Components.Parameters.Key? = nil,
                    oauthToken: Components.Parameters.OauthToken? = nil,
                    prettyPrint: Components.Parameters.PrettyPrint? = nil,
                    quotaUser: Components.Parameters.QuotaUser? = nil,
                    userIp: Components.Parameters.UserIp? = nil,
                    alwaysIncludeEmail: Swift.Bool? = nil,
                    maxAttendees: Swift.Int? = nil,
                    maxResults: Swift.Int? = nil,
                    originalStart: Swift.String? = nil,
                    pageToken: Swift.String? = nil,
                    showDeleted: Swift.Bool? = nil,
                    timeMax: Swift.String? = nil,
                    timeMin: Swift.String? = nil,
                    timeZone: Swift.String? = nil
                ) {
                    self.alt = alt
                    self.fields = fields
                    self.key = key
                    self.oauthToken = oauthToken
                    self.prettyPrint = prettyPrint
                    self.quotaUser = quotaUser
                    self.userIp = userIp
                    self.alwaysIncludeEmail = alwaysIncludeEmail
                    self.maxAttendees = maxAttendees
                    self.maxResults = maxResults
                    self.originalStart = originalStart
                    self.pageToken = pageToken
                    self.showDeleted = showDeleted
                    self.timeMax = timeMax
                    self.timeMin = timeMin
                    self.timeZone = timeZone
                }
            }
            public var query: Operations.Calendar_events_instances.Input.Query
            /// - Remark: Generated from `#/paths/calendars/{calendarId}/events/{eventId}/instances/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.Calendar_events_instances.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.Calendar_events_instances.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.Calendar_events_instances.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - query:
            ///   - headers:
            public init(
                path: Operations.Calendar_events_instances.Input.Path,
                query: Operations.Calendar_events_instances.Input.Query = .init(),
                headers: Operations.Calendar_events_instances.Input.Headers = .init()
            ) {
                self.path = path
                self.query = query
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/calendars/{calendarId}/events/{eventId}/instances/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/calendars/{calendarId}/events/{eventId}/instances/GET/responses/200/content/application\/json`.
                    case json(Components.Schemas.Events)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.Events {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.Calendar_events_instances.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.Calendar_events_instances.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Successful response
            ///
            /// - Remark: Generated from `#/paths//calendars/{calendarId}/events/{eventId}/instances/get(calendar.events.instances)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.Calendar_events_instances.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.Calendar_events_instances.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Moves an event to another calendar, i.e. changes an event's organizer. Note that only default events can be moved; outOfOffice, focusTime and workingLocation events cannot be moved.
    ///
    /// - Remark: HTTP `POST /calendars/{calendarId}/events/{eventId}/move`.
    /// - Remark: Generated from `#/paths//calendars/{calendarId}/events/{eventId}/move/post(calendar.events.move)`.
    public enum Calendar_events_move {
        public static let id: Swift.String = "calendar.events.move"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/calendars/{calendarId}/events/{eventId}/move/POST/path`.
            public struct Path: Sendable, Hashable {
                /// Calendar identifier of the source calendar where the event currently is on.
                ///
                /// - Remark: Generated from `#/paths/calendars/{calendarId}/events/{eventId}/move/POST/path/calendarId`.
                public var calendarId: Swift.String
                /// Event identifier.
                ///
                /// - Remark: Generated from `#/paths/calendars/{calendarId}/events/{eventId}/move/POST/path/eventId`.
                public var eventId: Swift.String
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - calendarId: Calendar identifier of the source calendar where the event currently is on.
                ///   - eventId: Event identifier.
                public init(
                    calendarId: Swift.String,
                    eventId: Swift.String
                ) {
                    self.calendarId = calendarId
                    self.eventId = eventId
                }
            }
            public var path: Operations.Calendar_events_move.Input.Path
            /// - Remark: Generated from `#/paths/calendars/{calendarId}/events/{eventId}/move/POST/query`.
            public struct Query: Sendable, Hashable {
                /// - Remark: Generated from `#/components/parameters/alt`.
                @frozen public enum Alt: String, Codable, Hashable, Sendable, CaseIterable {
                    case json = "json"
                }
                /// Data format for the response.
                ///
                /// - Remark: Generated from `#/paths/calendars/{calendarId}/events/{eventId}/move/POST/query/alt`.
                public var alt: Components.Parameters.Alt?
                /// Selector specifying which fields to include in a partial response.
                ///
                /// - Remark: Generated from `#/paths/calendars/{calendarId}/events/{eventId}/move/POST/query/fields`.
                public var fields: Components.Parameters.Fields?
                /// API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
                ///
                /// - Remark: Generated from `#/paths/calendars/{calendarId}/events/{eventId}/move/POST/query/key`.
                public var key: Components.Parameters.Key?
                /// OAuth 2.0 token for the current user.
                ///
                /// - Remark: Generated from `#/paths/calendars/{calendarId}/events/{eventId}/move/POST/query/oauth_token`.
                public var oauthToken: Components.Parameters.OauthToken?
                /// Returns response with indentations and line breaks.
                ///
                /// - Remark: Generated from `#/paths/calendars/{calendarId}/events/{eventId}/move/POST/query/prettyPrint`.
                public var prettyPrint: Components.Parameters.PrettyPrint?
                /// An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
                ///
                /// - Remark: Generated from `#/paths/calendars/{calendarId}/events/{eventId}/move/POST/query/quotaUser`.
                public var quotaUser: Components.Parameters.QuotaUser?
                /// Deprecated. Please use quotaUser instead.
                ///
                /// - Remark: Generated from `#/paths/calendars/{calendarId}/events/{eventId}/move/POST/query/userIp`.
                public var userIp: Components.Parameters.UserIp?
                /// Calendar identifier of the target calendar where the event is to be moved to.
                ///
                /// - Remark: Generated from `#/paths/calendars/{calendarId}/events/{eventId}/move/POST/query/destination`.
                public var destination: Swift.String
                /// Deprecated. Please use sendUpdates instead.
                ///
                /// Whether to send notifications about the change of the event's organizer. Note that some emails might still be sent even if you set the value to false. The default is false.
                ///
                /// - Remark: Generated from `#/paths/calendars/{calendarId}/events/{eventId}/move/POST/query/sendNotifications`.
                public var sendNotifications: Swift.Bool?
                /// - Remark: Generated from `#/paths/calendars/{calendarId}/events/{eventId}/move/POST/query/sendUpdates`.
                @frozen public enum SendUpdatesPayload: String, Codable, Hashable, Sendable, CaseIterable {
                    case all = "all"
                    case externalOnly = "externalOnly"
                    case none = "none"
                }
                /// Guests who should receive notifications about the change of the event's organizer.
                ///
                /// - Remark: Generated from `#/paths/calendars/{calendarId}/events/{eventId}/move/POST/query/sendUpdates`.
                public var sendUpdates: Operations.Calendar_events_move.Input.Query.SendUpdatesPayload?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - alt: Data format for the response.
                ///   - fields: Selector specifying which fields to include in a partial response.
                ///   - key: API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
                ///   - oauthToken: OAuth 2.0 token for the current user.
                ///   - prettyPrint: Returns response with indentations and line breaks.
                ///   - quotaUser: An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
                ///   - userIp: Deprecated. Please use quotaUser instead.
                ///   - destination: Calendar identifier of the target calendar where the event is to be moved to.
                ///   - sendNotifications: Deprecated. Please use sendUpdates instead.
                ///   - sendUpdates: Guests who should receive notifications about the change of the event's organizer.
                public init(
                    alt: Components.Parameters.Alt? = nil,
                    fields: Components.Parameters.Fields? = nil,
                    key: Components.Parameters.Key? = nil,
                    oauthToken: Components.Parameters.OauthToken? = nil,
                    prettyPrint: Components.Parameters.PrettyPrint? = nil,
                    quotaUser: Components.Parameters.QuotaUser? = nil,
                    userIp: Components.Parameters.UserIp? = nil,
                    destination: Swift.String,
                    sendNotifications: Swift.Bool? = nil,
                    sendUpdates: Operations.Calendar_events_move.Input.Query.SendUpdatesPayload? = nil
                ) {
                    self.alt = alt
                    self.fields = fields
                    self.key = key
                    self.oauthToken = oauthToken
                    self.prettyPrint = prettyPrint
                    self.quotaUser = quotaUser
                    self.userIp = userIp
                    self.destination = destination
                    self.sendNotifications = sendNotifications
                    self.sendUpdates = sendUpdates
                }
            }
            public var query: Operations.Calendar_events_move.Input.Query
            /// - Remark: Generated from `#/paths/calendars/{calendarId}/events/{eventId}/move/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.Calendar_events_move.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.Calendar_events_move.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.Calendar_events_move.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - query:
            ///   - headers:
            public init(
                path: Operations.Calendar_events_move.Input.Path,
                query: Operations.Calendar_events_move.Input.Query,
                headers: Operations.Calendar_events_move.Input.Headers = .init()
            ) {
                self.path = path
                self.query = query
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/calendars/{calendarId}/events/{eventId}/move/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/calendars/{calendarId}/events/{eventId}/move/POST/responses/200/content/application\/json`.
                    case json(Components.Schemas.Event)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.Event {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.Calendar_events_move.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.Calendar_events_move.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Successful response
            ///
            /// - Remark: Generated from `#/paths//calendars/{calendarId}/events/{eventId}/move/post(calendar.events.move)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.Calendar_events_move.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.Calendar_events_move.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Stop watching resources through this channel
    ///
    /// - Remark: HTTP `POST /channels/stop`.
    /// - Remark: Generated from `#/paths//channels/stop/post(calendar.channels.stop)`.
    public enum Calendar_channels_stop {
        public static let id: Swift.String = "calendar.channels.stop"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/channels/stop/POST/query`.
            public struct Query: Sendable, Hashable {
                /// - Remark: Generated from `#/components/parameters/alt`.
                @frozen public enum Alt: String, Codable, Hashable, Sendable, CaseIterable {
                    case json = "json"
                }
                /// Data format for the response.
                ///
                /// - Remark: Generated from `#/paths/channels/stop/POST/query/alt`.
                public var alt: Components.Parameters.Alt?
                /// Selector specifying which fields to include in a partial response.
                ///
                /// - Remark: Generated from `#/paths/channels/stop/POST/query/fields`.
                public var fields: Components.Parameters.Fields?
                /// API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
                ///
                /// - Remark: Generated from `#/paths/channels/stop/POST/query/key`.
                public var key: Components.Parameters.Key?
                /// OAuth 2.0 token for the current user.
                ///
                /// - Remark: Generated from `#/paths/channels/stop/POST/query/oauth_token`.
                public var oauthToken: Components.Parameters.OauthToken?
                /// Returns response with indentations and line breaks.
                ///
                /// - Remark: Generated from `#/paths/channels/stop/POST/query/prettyPrint`.
                public var prettyPrint: Components.Parameters.PrettyPrint?
                /// An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
                ///
                /// - Remark: Generated from `#/paths/channels/stop/POST/query/quotaUser`.
                public var quotaUser: Components.Parameters.QuotaUser?
                /// Deprecated. Please use quotaUser instead.
                ///
                /// - Remark: Generated from `#/paths/channels/stop/POST/query/userIp`.
                public var userIp: Components.Parameters.UserIp?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - alt: Data format for the response.
                ///   - fields: Selector specifying which fields to include in a partial response.
                ///   - key: API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
                ///   - oauthToken: OAuth 2.0 token for the current user.
                ///   - prettyPrint: Returns response with indentations and line breaks.
                ///   - quotaUser: An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
                ///   - userIp: Deprecated. Please use quotaUser instead.
                public init(
                    alt: Components.Parameters.Alt? = nil,
                    fields: Components.Parameters.Fields? = nil,
                    key: Components.Parameters.Key? = nil,
                    oauthToken: Components.Parameters.OauthToken? = nil,
                    prettyPrint: Components.Parameters.PrettyPrint? = nil,
                    quotaUser: Components.Parameters.QuotaUser? = nil,
                    userIp: Components.Parameters.UserIp? = nil
                ) {
                    self.alt = alt
                    self.fields = fields
                    self.key = key
                    self.oauthToken = oauthToken
                    self.prettyPrint = prettyPrint
                    self.quotaUser = quotaUser
                    self.userIp = userIp
                }
            }
            public var query: Operations.Calendar_channels_stop.Input.Query
            /// - Remark: Generated from `#/paths/channels/stop/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/channels/stop/POST/requestBody/content/application\/json`.
                case json(Components.Schemas.Channel)
            }
            public var body: Operations.Calendar_channels_stop.Input.Body?
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - query:
            ///   - body:
            public init(
                query: Operations.Calendar_channels_stop.Input.Query = .init(),
                body: Operations.Calendar_channels_stop.Input.Body? = nil
            ) {
                self.query = query
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// Creates a new `Ok`.
                public init() {}
            }
            /// Successful response
            ///
            /// - Remark: Generated from `#/paths//channels/stop/post(calendar.channels.stop)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.Calendar_channels_stop.Output.Ok)
            /// Successful response
            ///
            /// - Remark: Generated from `#/paths//channels/stop/post(calendar.channels.stop)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            public static var ok: Self {
                .ok(.init())
            }
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.Calendar_channels_stop.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
    }
    /// Returns the color definitions for calendars and events.
    ///
    /// - Remark: HTTP `GET /colors`.
    /// - Remark: Generated from `#/paths//colors/get(calendar.colors.get)`.
    public enum Calendar_colors_get {
        public static let id: Swift.String = "calendar.colors.get"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/colors/GET/query`.
            public struct Query: Sendable, Hashable {
                /// - Remark: Generated from `#/components/parameters/alt`.
                @frozen public enum Alt: String, Codable, Hashable, Sendable, CaseIterable {
                    case json = "json"
                }
                /// Data format for the response.
                ///
                /// - Remark: Generated from `#/paths/colors/GET/query/alt`.
                public var alt: Components.Parameters.Alt?
                /// Selector specifying which fields to include in a partial response.
                ///
                /// - Remark: Generated from `#/paths/colors/GET/query/fields`.
                public var fields: Components.Parameters.Fields?
                /// API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
                ///
                /// - Remark: Generated from `#/paths/colors/GET/query/key`.
                public var key: Components.Parameters.Key?
                /// OAuth 2.0 token for the current user.
                ///
                /// - Remark: Generated from `#/paths/colors/GET/query/oauth_token`.
                public var oauthToken: Components.Parameters.OauthToken?
                /// Returns response with indentations and line breaks.
                ///
                /// - Remark: Generated from `#/paths/colors/GET/query/prettyPrint`.
                public var prettyPrint: Components.Parameters.PrettyPrint?
                /// An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
                ///
                /// - Remark: Generated from `#/paths/colors/GET/query/quotaUser`.
                public var quotaUser: Components.Parameters.QuotaUser?
                /// Deprecated. Please use quotaUser instead.
                ///
                /// - Remark: Generated from `#/paths/colors/GET/query/userIp`.
                public var userIp: Components.Parameters.UserIp?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - alt: Data format for the response.
                ///   - fields: Selector specifying which fields to include in a partial response.
                ///   - key: API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
                ///   - oauthToken: OAuth 2.0 token for the current user.
                ///   - prettyPrint: Returns response with indentations and line breaks.
                ///   - quotaUser: An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
                ///   - userIp: Deprecated. Please use quotaUser instead.
                public init(
                    alt: Components.Parameters.Alt? = nil,
                    fields: Components.Parameters.Fields? = nil,
                    key: Components.Parameters.Key? = nil,
                    oauthToken: Components.Parameters.OauthToken? = nil,
                    prettyPrint: Components.Parameters.PrettyPrint? = nil,
                    quotaUser: Components.Parameters.QuotaUser? = nil,
                    userIp: Components.Parameters.UserIp? = nil
                ) {
                    self.alt = alt
                    self.fields = fields
                    self.key = key
                    self.oauthToken = oauthToken
                    self.prettyPrint = prettyPrint
                    self.quotaUser = quotaUser
                    self.userIp = userIp
                }
            }
            public var query: Operations.Calendar_colors_get.Input.Query
            /// - Remark: Generated from `#/paths/colors/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.Calendar_colors_get.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.Calendar_colors_get.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.Calendar_colors_get.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - query:
            ///   - headers:
            public init(
                query: Operations.Calendar_colors_get.Input.Query = .init(),
                headers: Operations.Calendar_colors_get.Input.Headers = .init()
            ) {
                self.query = query
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/colors/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/colors/GET/responses/200/content/application\/json`.
                    case json(Components.Schemas.Colors)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.Colors {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.Calendar_colors_get.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.Calendar_colors_get.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Successful response
            ///
            /// - Remark: Generated from `#/paths//colors/get(calendar.colors.get)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.Calendar_colors_get.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.Calendar_colors_get.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Returns free/busy information for a set of calendars.
    ///
    /// - Remark: HTTP `POST /freeBusy`.
    /// - Remark: Generated from `#/paths//freeBusy/post(calendar.freebusy.query)`.
    public enum Calendar_freebusy_query {
        public static let id: Swift.String = "calendar.freebusy.query"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/freeBusy/POST/query`.
            public struct Query: Sendable, Hashable {
                /// - Remark: Generated from `#/components/parameters/alt`.
                @frozen public enum Alt: String, Codable, Hashable, Sendable, CaseIterable {
                    case json = "json"
                }
                /// Data format for the response.
                ///
                /// - Remark: Generated from `#/paths/freeBusy/POST/query/alt`.
                public var alt: Components.Parameters.Alt?
                /// Selector specifying which fields to include in a partial response.
                ///
                /// - Remark: Generated from `#/paths/freeBusy/POST/query/fields`.
                public var fields: Components.Parameters.Fields?
                /// API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
                ///
                /// - Remark: Generated from `#/paths/freeBusy/POST/query/key`.
                public var key: Components.Parameters.Key?
                /// OAuth 2.0 token for the current user.
                ///
                /// - Remark: Generated from `#/paths/freeBusy/POST/query/oauth_token`.
                public var oauthToken: Components.Parameters.OauthToken?
                /// Returns response with indentations and line breaks.
                ///
                /// - Remark: Generated from `#/paths/freeBusy/POST/query/prettyPrint`.
                public var prettyPrint: Components.Parameters.PrettyPrint?
                /// An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
                ///
                /// - Remark: Generated from `#/paths/freeBusy/POST/query/quotaUser`.
                public var quotaUser: Components.Parameters.QuotaUser?
                /// Deprecated. Please use quotaUser instead.
                ///
                /// - Remark: Generated from `#/paths/freeBusy/POST/query/userIp`.
                public var userIp: Components.Parameters.UserIp?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - alt: Data format for the response.
                ///   - fields: Selector specifying which fields to include in a partial response.
                ///   - key: API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
                ///   - oauthToken: OAuth 2.0 token for the current user.
                ///   - prettyPrint: Returns response with indentations and line breaks.
                ///   - quotaUser: An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
                ///   - userIp: Deprecated. Please use quotaUser instead.
                public init(
                    alt: Components.Parameters.Alt? = nil,
                    fields: Components.Parameters.Fields? = nil,
                    key: Components.Parameters.Key? = nil,
                    oauthToken: Components.Parameters.OauthToken? = nil,
                    prettyPrint: Components.Parameters.PrettyPrint? = nil,
                    quotaUser: Components.Parameters.QuotaUser? = nil,
                    userIp: Components.Parameters.UserIp? = nil
                ) {
                    self.alt = alt
                    self.fields = fields
                    self.key = key
                    self.oauthToken = oauthToken
                    self.prettyPrint = prettyPrint
                    self.quotaUser = quotaUser
                    self.userIp = userIp
                }
            }
            public var query: Operations.Calendar_freebusy_query.Input.Query
            /// - Remark: Generated from `#/paths/freeBusy/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.Calendar_freebusy_query.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.Calendar_freebusy_query.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.Calendar_freebusy_query.Input.Headers
            /// - Remark: Generated from `#/paths/freeBusy/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/freeBusy/POST/requestBody/content/application\/json`.
                case json(Components.Schemas.FreeBusyRequest)
            }
            public var body: Operations.Calendar_freebusy_query.Input.Body?
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - query:
            ///   - headers:
            ///   - body:
            public init(
                query: Operations.Calendar_freebusy_query.Input.Query = .init(),
                headers: Operations.Calendar_freebusy_query.Input.Headers = .init(),
                body: Operations.Calendar_freebusy_query.Input.Body? = nil
            ) {
                self.query = query
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/freeBusy/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/freeBusy/POST/responses/200/content/application\/json`.
                    case json(Components.Schemas.FreeBusyResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.FreeBusyResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.Calendar_freebusy_query.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.Calendar_freebusy_query.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Successful response
            ///
            /// - Remark: Generated from `#/paths//freeBusy/post(calendar.freebusy.query)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.Calendar_freebusy_query.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.Calendar_freebusy_query.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Returns the calendars on the user's calendar list.
    ///
    /// - Remark: HTTP `GET /users/me/calendarList`.
    /// - Remark: Generated from `#/paths//users/me/calendarList/get(calendar.calendarList.list)`.
    public enum Calendar_calendarList_list {
        public static let id: Swift.String = "calendar.calendarList.list"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/users/me/calendarList/GET/query`.
            public struct Query: Sendable, Hashable {
                /// - Remark: Generated from `#/components/parameters/alt`.
                @frozen public enum Alt: String, Codable, Hashable, Sendable, CaseIterable {
                    case json = "json"
                }
                /// Data format for the response.
                ///
                /// - Remark: Generated from `#/paths/users/me/calendarList/GET/query/alt`.
                public var alt: Components.Parameters.Alt?
                /// Selector specifying which fields to include in a partial response.
                ///
                /// - Remark: Generated from `#/paths/users/me/calendarList/GET/query/fields`.
                public var fields: Components.Parameters.Fields?
                /// API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
                ///
                /// - Remark: Generated from `#/paths/users/me/calendarList/GET/query/key`.
                public var key: Components.Parameters.Key?
                /// OAuth 2.0 token for the current user.
                ///
                /// - Remark: Generated from `#/paths/users/me/calendarList/GET/query/oauth_token`.
                public var oauthToken: Components.Parameters.OauthToken?
                /// Returns response with indentations and line breaks.
                ///
                /// - Remark: Generated from `#/paths/users/me/calendarList/GET/query/prettyPrint`.
                public var prettyPrint: Components.Parameters.PrettyPrint?
                /// An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
                ///
                /// - Remark: Generated from `#/paths/users/me/calendarList/GET/query/quotaUser`.
                public var quotaUser: Components.Parameters.QuotaUser?
                /// Deprecated. Please use quotaUser instead.
                ///
                /// - Remark: Generated from `#/paths/users/me/calendarList/GET/query/userIp`.
                public var userIp: Components.Parameters.UserIp?
                /// Maximum number of entries returned on one result page. By default the value is 100 entries. The page size can never be larger than 250 entries. Optional.
                ///
                /// - Remark: Generated from `#/paths/users/me/calendarList/GET/query/maxResults`.
                public var maxResults: Swift.Int?
                /// - Remark: Generated from `#/paths/users/me/calendarList/GET/query/minAccessRole`.
                @frozen public enum MinAccessRolePayload: String, Codable, Hashable, Sendable, CaseIterable {
                    case freeBusyReader = "freeBusyReader"
                    case owner = "owner"
                    case reader = "reader"
                    case writer = "writer"
                }
                /// The minimum access role for the user in the returned entries. Optional. The default is no restriction.
                ///
                /// - Remark: Generated from `#/paths/users/me/calendarList/GET/query/minAccessRole`.
                public var minAccessRole: Operations.Calendar_calendarList_list.Input.Query.MinAccessRolePayload?
                /// Token specifying which result page to return. Optional.
                ///
                /// - Remark: Generated from `#/paths/users/me/calendarList/GET/query/pageToken`.
                public var pageToken: Swift.String?
                /// Whether to include deleted calendar list entries in the result. Optional. The default is False.
                ///
                /// - Remark: Generated from `#/paths/users/me/calendarList/GET/query/showDeleted`.
                public var showDeleted: Swift.Bool?
                /// Whether to show hidden entries. Optional. The default is False.
                ///
                /// - Remark: Generated from `#/paths/users/me/calendarList/GET/query/showHidden`.
                public var showHidden: Swift.Bool?
                /// Token obtained from the nextSyncToken field returned on the last page of results from the previous list request. It makes the result of this list request contain only entries that have changed since then. If only read-only fields such as calendar properties or ACLs have changed, the entry won't be returned. All entries deleted and hidden since the previous list request will always be in the result set and it is not allowed to set showDeleted neither showHidden to False.
                /// To ensure client state consistency minAccessRole query parameter cannot be specified together with nextSyncToken.
                /// If the syncToken expires, the server will respond with a 410 GONE response code and the client should clear its storage and perform a full synchronization without any syncToken.
                /// Learn more about incremental synchronization.
                /// Optional. The default is to return all entries.
                ///
                /// - Remark: Generated from `#/paths/users/me/calendarList/GET/query/syncToken`.
                public var syncToken: Swift.String?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - alt: Data format for the response.
                ///   - fields: Selector specifying which fields to include in a partial response.
                ///   - key: API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
                ///   - oauthToken: OAuth 2.0 token for the current user.
                ///   - prettyPrint: Returns response with indentations and line breaks.
                ///   - quotaUser: An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
                ///   - userIp: Deprecated. Please use quotaUser instead.
                ///   - maxResults: Maximum number of entries returned on one result page. By default the value is 100 entries. The page size can never be larger than 250 entries. Optional.
                ///   - minAccessRole: The minimum access role for the user in the returned entries. Optional. The default is no restriction.
                ///   - pageToken: Token specifying which result page to return. Optional.
                ///   - showDeleted: Whether to include deleted calendar list entries in the result. Optional. The default is False.
                ///   - showHidden: Whether to show hidden entries. Optional. The default is False.
                ///   - syncToken: Token obtained from the nextSyncToken field returned on the last page of results from the previous list request. It makes the result of this list request contain only entries that have changed since then. If only read-only fields such as calendar properties or ACLs have changed, the entry won't be returned. All entries deleted and hidden since the previous list request will always be in the result set and it is not allowed to set showDeleted neither showHidden to False.
                public init(
                    alt: Components.Parameters.Alt? = nil,
                    fields: Components.Parameters.Fields? = nil,
                    key: Components.Parameters.Key? = nil,
                    oauthToken: Components.Parameters.OauthToken? = nil,
                    prettyPrint: Components.Parameters.PrettyPrint? = nil,
                    quotaUser: Components.Parameters.QuotaUser? = nil,
                    userIp: Components.Parameters.UserIp? = nil,
                    maxResults: Swift.Int? = nil,
                    minAccessRole: Operations.Calendar_calendarList_list.Input.Query.MinAccessRolePayload? = nil,
                    pageToken: Swift.String? = nil,
                    showDeleted: Swift.Bool? = nil,
                    showHidden: Swift.Bool? = nil,
                    syncToken: Swift.String? = nil
                ) {
                    self.alt = alt
                    self.fields = fields
                    self.key = key
                    self.oauthToken = oauthToken
                    self.prettyPrint = prettyPrint
                    self.quotaUser = quotaUser
                    self.userIp = userIp
                    self.maxResults = maxResults
                    self.minAccessRole = minAccessRole
                    self.pageToken = pageToken
                    self.showDeleted = showDeleted
                    self.showHidden = showHidden
                    self.syncToken = syncToken
                }
            }
            public var query: Operations.Calendar_calendarList_list.Input.Query
            /// - Remark: Generated from `#/paths/users/me/calendarList/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.Calendar_calendarList_list.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.Calendar_calendarList_list.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.Calendar_calendarList_list.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - query:
            ///   - headers:
            public init(
                query: Operations.Calendar_calendarList_list.Input.Query = .init(),
                headers: Operations.Calendar_calendarList_list.Input.Headers = .init()
            ) {
                self.query = query
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/users/me/calendarList/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/users/me/calendarList/GET/responses/200/content/application\/json`.
                    case json(Components.Schemas.CalendarList)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.CalendarList {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.Calendar_calendarList_list.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.Calendar_calendarList_list.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Successful response
            ///
            /// - Remark: Generated from `#/paths//users/me/calendarList/get(calendar.calendarList.list)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.Calendar_calendarList_list.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.Calendar_calendarList_list.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Inserts an existing calendar into the user's calendar list.
    ///
    /// - Remark: HTTP `POST /users/me/calendarList`.
    /// - Remark: Generated from `#/paths//users/me/calendarList/post(calendar.calendarList.insert)`.
    public enum Calendar_calendarList_insert {
        public static let id: Swift.String = "calendar.calendarList.insert"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/users/me/calendarList/POST/query`.
            public struct Query: Sendable, Hashable {
                /// - Remark: Generated from `#/components/parameters/alt`.
                @frozen public enum Alt: String, Codable, Hashable, Sendable, CaseIterable {
                    case json = "json"
                }
                /// Data format for the response.
                ///
                /// - Remark: Generated from `#/paths/users/me/calendarList/POST/query/alt`.
                public var alt: Components.Parameters.Alt?
                /// Selector specifying which fields to include in a partial response.
                ///
                /// - Remark: Generated from `#/paths/users/me/calendarList/POST/query/fields`.
                public var fields: Components.Parameters.Fields?
                /// API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
                ///
                /// - Remark: Generated from `#/paths/users/me/calendarList/POST/query/key`.
                public var key: Components.Parameters.Key?
                /// OAuth 2.0 token for the current user.
                ///
                /// - Remark: Generated from `#/paths/users/me/calendarList/POST/query/oauth_token`.
                public var oauthToken: Components.Parameters.OauthToken?
                /// Returns response with indentations and line breaks.
                ///
                /// - Remark: Generated from `#/paths/users/me/calendarList/POST/query/prettyPrint`.
                public var prettyPrint: Components.Parameters.PrettyPrint?
                /// An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
                ///
                /// - Remark: Generated from `#/paths/users/me/calendarList/POST/query/quotaUser`.
                public var quotaUser: Components.Parameters.QuotaUser?
                /// Deprecated. Please use quotaUser instead.
                ///
                /// - Remark: Generated from `#/paths/users/me/calendarList/POST/query/userIp`.
                public var userIp: Components.Parameters.UserIp?
                /// Whether to use the foregroundColor and backgroundColor fields to write the calendar colors (RGB). If this feature is used, the index-based colorId field will be set to the best matching option automatically. Optional. The default is False.
                ///
                /// - Remark: Generated from `#/paths/users/me/calendarList/POST/query/colorRgbFormat`.
                public var colorRgbFormat: Swift.Bool?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - alt: Data format for the response.
                ///   - fields: Selector specifying which fields to include in a partial response.
                ///   - key: API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
                ///   - oauthToken: OAuth 2.0 token for the current user.
                ///   - prettyPrint: Returns response with indentations and line breaks.
                ///   - quotaUser: An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
                ///   - userIp: Deprecated. Please use quotaUser instead.
                ///   - colorRgbFormat: Whether to use the foregroundColor and backgroundColor fields to write the calendar colors (RGB). If this feature is used, the index-based colorId field will be set to the best matching option automatically. Optional. The default is False.
                public init(
                    alt: Components.Parameters.Alt? = nil,
                    fields: Components.Parameters.Fields? = nil,
                    key: Components.Parameters.Key? = nil,
                    oauthToken: Components.Parameters.OauthToken? = nil,
                    prettyPrint: Components.Parameters.PrettyPrint? = nil,
                    quotaUser: Components.Parameters.QuotaUser? = nil,
                    userIp: Components.Parameters.UserIp? = nil,
                    colorRgbFormat: Swift.Bool? = nil
                ) {
                    self.alt = alt
                    self.fields = fields
                    self.key = key
                    self.oauthToken = oauthToken
                    self.prettyPrint = prettyPrint
                    self.quotaUser = quotaUser
                    self.userIp = userIp
                    self.colorRgbFormat = colorRgbFormat
                }
            }
            public var query: Operations.Calendar_calendarList_insert.Input.Query
            /// - Remark: Generated from `#/paths/users/me/calendarList/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.Calendar_calendarList_insert.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.Calendar_calendarList_insert.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.Calendar_calendarList_insert.Input.Headers
            /// - Remark: Generated from `#/paths/users/me/calendarList/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/users/me/calendarList/POST/requestBody/content/application\/json`.
                case json(Components.Schemas.CalendarListEntry)
            }
            public var body: Operations.Calendar_calendarList_insert.Input.Body?
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - query:
            ///   - headers:
            ///   - body:
            public init(
                query: Operations.Calendar_calendarList_insert.Input.Query = .init(),
                headers: Operations.Calendar_calendarList_insert.Input.Headers = .init(),
                body: Operations.Calendar_calendarList_insert.Input.Body? = nil
            ) {
                self.query = query
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/users/me/calendarList/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/users/me/calendarList/POST/responses/200/content/application\/json`.
                    case json(Components.Schemas.CalendarListEntry)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.CalendarListEntry {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.Calendar_calendarList_insert.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.Calendar_calendarList_insert.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Successful response
            ///
            /// - Remark: Generated from `#/paths//users/me/calendarList/post(calendar.calendarList.insert)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.Calendar_calendarList_insert.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.Calendar_calendarList_insert.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Watch for changes to CalendarList resources.
    ///
    /// - Remark: HTTP `POST /users/me/calendarList/watch`.
    /// - Remark: Generated from `#/paths//users/me/calendarList/watch/post(calendar.calendarList.watch)`.
    public enum Calendar_calendarList_watch {
        public static let id: Swift.String = "calendar.calendarList.watch"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/users/me/calendarList/watch/POST/query`.
            public struct Query: Sendable, Hashable {
                /// - Remark: Generated from `#/components/parameters/alt`.
                @frozen public enum Alt: String, Codable, Hashable, Sendable, CaseIterable {
                    case json = "json"
                }
                /// Data format for the response.
                ///
                /// - Remark: Generated from `#/paths/users/me/calendarList/watch/POST/query/alt`.
                public var alt: Components.Parameters.Alt?
                /// Selector specifying which fields to include in a partial response.
                ///
                /// - Remark: Generated from `#/paths/users/me/calendarList/watch/POST/query/fields`.
                public var fields: Components.Parameters.Fields?
                /// API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
                ///
                /// - Remark: Generated from `#/paths/users/me/calendarList/watch/POST/query/key`.
                public var key: Components.Parameters.Key?
                /// OAuth 2.0 token for the current user.
                ///
                /// - Remark: Generated from `#/paths/users/me/calendarList/watch/POST/query/oauth_token`.
                public var oauthToken: Components.Parameters.OauthToken?
                /// Returns response with indentations and line breaks.
                ///
                /// - Remark: Generated from `#/paths/users/me/calendarList/watch/POST/query/prettyPrint`.
                public var prettyPrint: Components.Parameters.PrettyPrint?
                /// An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
                ///
                /// - Remark: Generated from `#/paths/users/me/calendarList/watch/POST/query/quotaUser`.
                public var quotaUser: Components.Parameters.QuotaUser?
                /// Deprecated. Please use quotaUser instead.
                ///
                /// - Remark: Generated from `#/paths/users/me/calendarList/watch/POST/query/userIp`.
                public var userIp: Components.Parameters.UserIp?
                /// Maximum number of entries returned on one result page. By default the value is 100 entries. The page size can never be larger than 250 entries. Optional.
                ///
                /// - Remark: Generated from `#/paths/users/me/calendarList/watch/POST/query/maxResults`.
                public var maxResults: Swift.Int?
                /// - Remark: Generated from `#/paths/users/me/calendarList/watch/POST/query/minAccessRole`.
                @frozen public enum MinAccessRolePayload: String, Codable, Hashable, Sendable, CaseIterable {
                    case freeBusyReader = "freeBusyReader"
                    case owner = "owner"
                    case reader = "reader"
                    case writer = "writer"
                }
                /// The minimum access role for the user in the returned entries. Optional. The default is no restriction.
                ///
                /// - Remark: Generated from `#/paths/users/me/calendarList/watch/POST/query/minAccessRole`.
                public var minAccessRole: Operations.Calendar_calendarList_watch.Input.Query.MinAccessRolePayload?
                /// Token specifying which result page to return. Optional.
                ///
                /// - Remark: Generated from `#/paths/users/me/calendarList/watch/POST/query/pageToken`.
                public var pageToken: Swift.String?
                /// Whether to include deleted calendar list entries in the result. Optional. The default is False.
                ///
                /// - Remark: Generated from `#/paths/users/me/calendarList/watch/POST/query/showDeleted`.
                public var showDeleted: Swift.Bool?
                /// Whether to show hidden entries. Optional. The default is False.
                ///
                /// - Remark: Generated from `#/paths/users/me/calendarList/watch/POST/query/showHidden`.
                public var showHidden: Swift.Bool?
                /// Token obtained from the nextSyncToken field returned on the last page of results from the previous list request. It makes the result of this list request contain only entries that have changed since then. If only read-only fields such as calendar properties or ACLs have changed, the entry won't be returned. All entries deleted and hidden since the previous list request will always be in the result set and it is not allowed to set showDeleted neither showHidden to False.
                /// To ensure client state consistency minAccessRole query parameter cannot be specified together with nextSyncToken.
                /// If the syncToken expires, the server will respond with a 410 GONE response code and the client should clear its storage and perform a full synchronization without any syncToken.
                /// Learn more about incremental synchronization.
                /// Optional. The default is to return all entries.
                ///
                /// - Remark: Generated from `#/paths/users/me/calendarList/watch/POST/query/syncToken`.
                public var syncToken: Swift.String?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - alt: Data format for the response.
                ///   - fields: Selector specifying which fields to include in a partial response.
                ///   - key: API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
                ///   - oauthToken: OAuth 2.0 token for the current user.
                ///   - prettyPrint: Returns response with indentations and line breaks.
                ///   - quotaUser: An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
                ///   - userIp: Deprecated. Please use quotaUser instead.
                ///   - maxResults: Maximum number of entries returned on one result page. By default the value is 100 entries. The page size can never be larger than 250 entries. Optional.
                ///   - minAccessRole: The minimum access role for the user in the returned entries. Optional. The default is no restriction.
                ///   - pageToken: Token specifying which result page to return. Optional.
                ///   - showDeleted: Whether to include deleted calendar list entries in the result. Optional. The default is False.
                ///   - showHidden: Whether to show hidden entries. Optional. The default is False.
                ///   - syncToken: Token obtained from the nextSyncToken field returned on the last page of results from the previous list request. It makes the result of this list request contain only entries that have changed since then. If only read-only fields such as calendar properties or ACLs have changed, the entry won't be returned. All entries deleted and hidden since the previous list request will always be in the result set and it is not allowed to set showDeleted neither showHidden to False.
                public init(
                    alt: Components.Parameters.Alt? = nil,
                    fields: Components.Parameters.Fields? = nil,
                    key: Components.Parameters.Key? = nil,
                    oauthToken: Components.Parameters.OauthToken? = nil,
                    prettyPrint: Components.Parameters.PrettyPrint? = nil,
                    quotaUser: Components.Parameters.QuotaUser? = nil,
                    userIp: Components.Parameters.UserIp? = nil,
                    maxResults: Swift.Int? = nil,
                    minAccessRole: Operations.Calendar_calendarList_watch.Input.Query.MinAccessRolePayload? = nil,
                    pageToken: Swift.String? = nil,
                    showDeleted: Swift.Bool? = nil,
                    showHidden: Swift.Bool? = nil,
                    syncToken: Swift.String? = nil
                ) {
                    self.alt = alt
                    self.fields = fields
                    self.key = key
                    self.oauthToken = oauthToken
                    self.prettyPrint = prettyPrint
                    self.quotaUser = quotaUser
                    self.userIp = userIp
                    self.maxResults = maxResults
                    self.minAccessRole = minAccessRole
                    self.pageToken = pageToken
                    self.showDeleted = showDeleted
                    self.showHidden = showHidden
                    self.syncToken = syncToken
                }
            }
            public var query: Operations.Calendar_calendarList_watch.Input.Query
            /// - Remark: Generated from `#/paths/users/me/calendarList/watch/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.Calendar_calendarList_watch.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.Calendar_calendarList_watch.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.Calendar_calendarList_watch.Input.Headers
            /// - Remark: Generated from `#/paths/users/me/calendarList/watch/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/users/me/calendarList/watch/POST/requestBody/content/application\/json`.
                case json(Components.Schemas.Channel)
            }
            public var body: Operations.Calendar_calendarList_watch.Input.Body?
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - query:
            ///   - headers:
            ///   - body:
            public init(
                query: Operations.Calendar_calendarList_watch.Input.Query = .init(),
                headers: Operations.Calendar_calendarList_watch.Input.Headers = .init(),
                body: Operations.Calendar_calendarList_watch.Input.Body? = nil
            ) {
                self.query = query
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/users/me/calendarList/watch/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/users/me/calendarList/watch/POST/responses/200/content/application\/json`.
                    case json(Components.Schemas.Channel)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.Channel {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.Calendar_calendarList_watch.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.Calendar_calendarList_watch.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Successful response
            ///
            /// - Remark: Generated from `#/paths//users/me/calendarList/watch/post(calendar.calendarList.watch)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.Calendar_calendarList_watch.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.Calendar_calendarList_watch.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Returns a calendar from the user's calendar list.
    ///
    /// - Remark: HTTP `GET /users/me/calendarList/{calendarId}`.
    /// - Remark: Generated from `#/paths//users/me/calendarList/{calendarId}/get(calendar.calendarList.get)`.
    public enum Calendar_calendarList_get {
        public static let id: Swift.String = "calendar.calendarList.get"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/users/me/calendarList/{calendarId}/GET/path`.
            public struct Path: Sendable, Hashable {
                /// Calendar identifier. To retrieve calendar IDs call the calendarList.list method. If you want to access the primary calendar of the currently logged in user, use the "primary" keyword.
                ///
                /// - Remark: Generated from `#/paths/users/me/calendarList/{calendarId}/GET/path/calendarId`.
                public var calendarId: Swift.String
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - calendarId: Calendar identifier. To retrieve calendar IDs call the calendarList.list method. If you want to access the primary calendar of the currently logged in user, use the "primary" keyword.
                public init(calendarId: Swift.String) {
                    self.calendarId = calendarId
                }
            }
            public var path: Operations.Calendar_calendarList_get.Input.Path
            /// - Remark: Generated from `#/paths/users/me/calendarList/{calendarId}/GET/query`.
            public struct Query: Sendable, Hashable {
                /// - Remark: Generated from `#/components/parameters/alt`.
                @frozen public enum Alt: String, Codable, Hashable, Sendable, CaseIterable {
                    case json = "json"
                }
                /// Data format for the response.
                ///
                /// - Remark: Generated from `#/paths/users/me/calendarList/{calendarId}/GET/query/alt`.
                public var alt: Components.Parameters.Alt?
                /// Selector specifying which fields to include in a partial response.
                ///
                /// - Remark: Generated from `#/paths/users/me/calendarList/{calendarId}/GET/query/fields`.
                public var fields: Components.Parameters.Fields?
                /// API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
                ///
                /// - Remark: Generated from `#/paths/users/me/calendarList/{calendarId}/GET/query/key`.
                public var key: Components.Parameters.Key?
                /// OAuth 2.0 token for the current user.
                ///
                /// - Remark: Generated from `#/paths/users/me/calendarList/{calendarId}/GET/query/oauth_token`.
                public var oauthToken: Components.Parameters.OauthToken?
                /// Returns response with indentations and line breaks.
                ///
                /// - Remark: Generated from `#/paths/users/me/calendarList/{calendarId}/GET/query/prettyPrint`.
                public var prettyPrint: Components.Parameters.PrettyPrint?
                /// An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
                ///
                /// - Remark: Generated from `#/paths/users/me/calendarList/{calendarId}/GET/query/quotaUser`.
                public var quotaUser: Components.Parameters.QuotaUser?
                /// Deprecated. Please use quotaUser instead.
                ///
                /// - Remark: Generated from `#/paths/users/me/calendarList/{calendarId}/GET/query/userIp`.
                public var userIp: Components.Parameters.UserIp?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - alt: Data format for the response.
                ///   - fields: Selector specifying which fields to include in a partial response.
                ///   - key: API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
                ///   - oauthToken: OAuth 2.0 token for the current user.
                ///   - prettyPrint: Returns response with indentations and line breaks.
                ///   - quotaUser: An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
                ///   - userIp: Deprecated. Please use quotaUser instead.
                public init(
                    alt: Components.Parameters.Alt? = nil,
                    fields: Components.Parameters.Fields? = nil,
                    key: Components.Parameters.Key? = nil,
                    oauthToken: Components.Parameters.OauthToken? = nil,
                    prettyPrint: Components.Parameters.PrettyPrint? = nil,
                    quotaUser: Components.Parameters.QuotaUser? = nil,
                    userIp: Components.Parameters.UserIp? = nil
                ) {
                    self.alt = alt
                    self.fields = fields
                    self.key = key
                    self.oauthToken = oauthToken
                    self.prettyPrint = prettyPrint
                    self.quotaUser = quotaUser
                    self.userIp = userIp
                }
            }
            public var query: Operations.Calendar_calendarList_get.Input.Query
            /// - Remark: Generated from `#/paths/users/me/calendarList/{calendarId}/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.Calendar_calendarList_get.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.Calendar_calendarList_get.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.Calendar_calendarList_get.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - query:
            ///   - headers:
            public init(
                path: Operations.Calendar_calendarList_get.Input.Path,
                query: Operations.Calendar_calendarList_get.Input.Query = .init(),
                headers: Operations.Calendar_calendarList_get.Input.Headers = .init()
            ) {
                self.path = path
                self.query = query
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/users/me/calendarList/{calendarId}/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/users/me/calendarList/{calendarId}/GET/responses/200/content/application\/json`.
                    case json(Components.Schemas.CalendarListEntry)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.CalendarListEntry {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.Calendar_calendarList_get.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.Calendar_calendarList_get.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Successful response
            ///
            /// - Remark: Generated from `#/paths//users/me/calendarList/{calendarId}/get(calendar.calendarList.get)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.Calendar_calendarList_get.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.Calendar_calendarList_get.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Updates an existing calendar on the user's calendar list. This method supports patch semantics.
    ///
    /// - Remark: HTTP `PATCH /users/me/calendarList/{calendarId}`.
    /// - Remark: Generated from `#/paths//users/me/calendarList/{calendarId}/patch(calendar.calendarList.patch)`.
    public enum Calendar_calendarList_patch {
        public static let id: Swift.String = "calendar.calendarList.patch"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/users/me/calendarList/{calendarId}/PATCH/path`.
            public struct Path: Sendable, Hashable {
                /// Calendar identifier. To retrieve calendar IDs call the calendarList.list method. If you want to access the primary calendar of the currently logged in user, use the "primary" keyword.
                ///
                /// - Remark: Generated from `#/paths/users/me/calendarList/{calendarId}/PATCH/path/calendarId`.
                public var calendarId: Swift.String
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - calendarId: Calendar identifier. To retrieve calendar IDs call the calendarList.list method. If you want to access the primary calendar of the currently logged in user, use the "primary" keyword.
                public init(calendarId: Swift.String) {
                    self.calendarId = calendarId
                }
            }
            public var path: Operations.Calendar_calendarList_patch.Input.Path
            /// - Remark: Generated from `#/paths/users/me/calendarList/{calendarId}/PATCH/query`.
            public struct Query: Sendable, Hashable {
                /// - Remark: Generated from `#/components/parameters/alt`.
                @frozen public enum Alt: String, Codable, Hashable, Sendable, CaseIterable {
                    case json = "json"
                }
                /// Data format for the response.
                ///
                /// - Remark: Generated from `#/paths/users/me/calendarList/{calendarId}/PATCH/query/alt`.
                public var alt: Components.Parameters.Alt?
                /// Selector specifying which fields to include in a partial response.
                ///
                /// - Remark: Generated from `#/paths/users/me/calendarList/{calendarId}/PATCH/query/fields`.
                public var fields: Components.Parameters.Fields?
                /// API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
                ///
                /// - Remark: Generated from `#/paths/users/me/calendarList/{calendarId}/PATCH/query/key`.
                public var key: Components.Parameters.Key?
                /// OAuth 2.0 token for the current user.
                ///
                /// - Remark: Generated from `#/paths/users/me/calendarList/{calendarId}/PATCH/query/oauth_token`.
                public var oauthToken: Components.Parameters.OauthToken?
                /// Returns response with indentations and line breaks.
                ///
                /// - Remark: Generated from `#/paths/users/me/calendarList/{calendarId}/PATCH/query/prettyPrint`.
                public var prettyPrint: Components.Parameters.PrettyPrint?
                /// An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
                ///
                /// - Remark: Generated from `#/paths/users/me/calendarList/{calendarId}/PATCH/query/quotaUser`.
                public var quotaUser: Components.Parameters.QuotaUser?
                /// Deprecated. Please use quotaUser instead.
                ///
                /// - Remark: Generated from `#/paths/users/me/calendarList/{calendarId}/PATCH/query/userIp`.
                public var userIp: Components.Parameters.UserIp?
                /// Whether to use the foregroundColor and backgroundColor fields to write the calendar colors (RGB). If this feature is used, the index-based colorId field will be set to the best matching option automatically. Optional. The default is False.
                ///
                /// - Remark: Generated from `#/paths/users/me/calendarList/{calendarId}/PATCH/query/colorRgbFormat`.
                public var colorRgbFormat: Swift.Bool?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - alt: Data format for the response.
                ///   - fields: Selector specifying which fields to include in a partial response.
                ///   - key: API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
                ///   - oauthToken: OAuth 2.0 token for the current user.
                ///   - prettyPrint: Returns response with indentations and line breaks.
                ///   - quotaUser: An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
                ///   - userIp: Deprecated. Please use quotaUser instead.
                ///   - colorRgbFormat: Whether to use the foregroundColor and backgroundColor fields to write the calendar colors (RGB). If this feature is used, the index-based colorId field will be set to the best matching option automatically. Optional. The default is False.
                public init(
                    alt: Components.Parameters.Alt? = nil,
                    fields: Components.Parameters.Fields? = nil,
                    key: Components.Parameters.Key? = nil,
                    oauthToken: Components.Parameters.OauthToken? = nil,
                    prettyPrint: Components.Parameters.PrettyPrint? = nil,
                    quotaUser: Components.Parameters.QuotaUser? = nil,
                    userIp: Components.Parameters.UserIp? = nil,
                    colorRgbFormat: Swift.Bool? = nil
                ) {
                    self.alt = alt
                    self.fields = fields
                    self.key = key
                    self.oauthToken = oauthToken
                    self.prettyPrint = prettyPrint
                    self.quotaUser = quotaUser
                    self.userIp = userIp
                    self.colorRgbFormat = colorRgbFormat
                }
            }
            public var query: Operations.Calendar_calendarList_patch.Input.Query
            /// - Remark: Generated from `#/paths/users/me/calendarList/{calendarId}/PATCH/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.Calendar_calendarList_patch.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.Calendar_calendarList_patch.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.Calendar_calendarList_patch.Input.Headers
            /// - Remark: Generated from `#/paths/users/me/calendarList/{calendarId}/PATCH/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/users/me/calendarList/{calendarId}/PATCH/requestBody/content/application\/json`.
                case json(Components.Schemas.CalendarListEntry)
            }
            public var body: Operations.Calendar_calendarList_patch.Input.Body?
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - query:
            ///   - headers:
            ///   - body:
            public init(
                path: Operations.Calendar_calendarList_patch.Input.Path,
                query: Operations.Calendar_calendarList_patch.Input.Query = .init(),
                headers: Operations.Calendar_calendarList_patch.Input.Headers = .init(),
                body: Operations.Calendar_calendarList_patch.Input.Body? = nil
            ) {
                self.path = path
                self.query = query
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/users/me/calendarList/{calendarId}/PATCH/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/users/me/calendarList/{calendarId}/PATCH/responses/200/content/application\/json`.
                    case json(Components.Schemas.CalendarListEntry)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.CalendarListEntry {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.Calendar_calendarList_patch.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.Calendar_calendarList_patch.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Successful response
            ///
            /// - Remark: Generated from `#/paths//users/me/calendarList/{calendarId}/patch(calendar.calendarList.patch)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.Calendar_calendarList_patch.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.Calendar_calendarList_patch.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Updates an existing calendar on the user's calendar list.
    ///
    /// - Remark: HTTP `PUT /users/me/calendarList/{calendarId}`.
    /// - Remark: Generated from `#/paths//users/me/calendarList/{calendarId}/put(calendar.calendarList.update)`.
    public enum Calendar_calendarList_update {
        public static let id: Swift.String = "calendar.calendarList.update"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/users/me/calendarList/{calendarId}/PUT/path`.
            public struct Path: Sendable, Hashable {
                /// Calendar identifier. To retrieve calendar IDs call the calendarList.list method. If you want to access the primary calendar of the currently logged in user, use the "primary" keyword.
                ///
                /// - Remark: Generated from `#/paths/users/me/calendarList/{calendarId}/PUT/path/calendarId`.
                public var calendarId: Swift.String
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - calendarId: Calendar identifier. To retrieve calendar IDs call the calendarList.list method. If you want to access the primary calendar of the currently logged in user, use the "primary" keyword.
                public init(calendarId: Swift.String) {
                    self.calendarId = calendarId
                }
            }
            public var path: Operations.Calendar_calendarList_update.Input.Path
            /// - Remark: Generated from `#/paths/users/me/calendarList/{calendarId}/PUT/query`.
            public struct Query: Sendable, Hashable {
                /// - Remark: Generated from `#/components/parameters/alt`.
                @frozen public enum Alt: String, Codable, Hashable, Sendable, CaseIterable {
                    case json = "json"
                }
                /// Data format for the response.
                ///
                /// - Remark: Generated from `#/paths/users/me/calendarList/{calendarId}/PUT/query/alt`.
                public var alt: Components.Parameters.Alt?
                /// Selector specifying which fields to include in a partial response.
                ///
                /// - Remark: Generated from `#/paths/users/me/calendarList/{calendarId}/PUT/query/fields`.
                public var fields: Components.Parameters.Fields?
                /// API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
                ///
                /// - Remark: Generated from `#/paths/users/me/calendarList/{calendarId}/PUT/query/key`.
                public var key: Components.Parameters.Key?
                /// OAuth 2.0 token for the current user.
                ///
                /// - Remark: Generated from `#/paths/users/me/calendarList/{calendarId}/PUT/query/oauth_token`.
                public var oauthToken: Components.Parameters.OauthToken?
                /// Returns response with indentations and line breaks.
                ///
                /// - Remark: Generated from `#/paths/users/me/calendarList/{calendarId}/PUT/query/prettyPrint`.
                public var prettyPrint: Components.Parameters.PrettyPrint?
                /// An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
                ///
                /// - Remark: Generated from `#/paths/users/me/calendarList/{calendarId}/PUT/query/quotaUser`.
                public var quotaUser: Components.Parameters.QuotaUser?
                /// Deprecated. Please use quotaUser instead.
                ///
                /// - Remark: Generated from `#/paths/users/me/calendarList/{calendarId}/PUT/query/userIp`.
                public var userIp: Components.Parameters.UserIp?
                /// Whether to use the foregroundColor and backgroundColor fields to write the calendar colors (RGB). If this feature is used, the index-based colorId field will be set to the best matching option automatically. Optional. The default is False.
                ///
                /// - Remark: Generated from `#/paths/users/me/calendarList/{calendarId}/PUT/query/colorRgbFormat`.
                public var colorRgbFormat: Swift.Bool?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - alt: Data format for the response.
                ///   - fields: Selector specifying which fields to include in a partial response.
                ///   - key: API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
                ///   - oauthToken: OAuth 2.0 token for the current user.
                ///   - prettyPrint: Returns response with indentations and line breaks.
                ///   - quotaUser: An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
                ///   - userIp: Deprecated. Please use quotaUser instead.
                ///   - colorRgbFormat: Whether to use the foregroundColor and backgroundColor fields to write the calendar colors (RGB). If this feature is used, the index-based colorId field will be set to the best matching option automatically. Optional. The default is False.
                public init(
                    alt: Components.Parameters.Alt? = nil,
                    fields: Components.Parameters.Fields? = nil,
                    key: Components.Parameters.Key? = nil,
                    oauthToken: Components.Parameters.OauthToken? = nil,
                    prettyPrint: Components.Parameters.PrettyPrint? = nil,
                    quotaUser: Components.Parameters.QuotaUser? = nil,
                    userIp: Components.Parameters.UserIp? = nil,
                    colorRgbFormat: Swift.Bool? = nil
                ) {
                    self.alt = alt
                    self.fields = fields
                    self.key = key
                    self.oauthToken = oauthToken
                    self.prettyPrint = prettyPrint
                    self.quotaUser = quotaUser
                    self.userIp = userIp
                    self.colorRgbFormat = colorRgbFormat
                }
            }
            public var query: Operations.Calendar_calendarList_update.Input.Query
            /// - Remark: Generated from `#/paths/users/me/calendarList/{calendarId}/PUT/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.Calendar_calendarList_update.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.Calendar_calendarList_update.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.Calendar_calendarList_update.Input.Headers
            /// - Remark: Generated from `#/paths/users/me/calendarList/{calendarId}/PUT/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/users/me/calendarList/{calendarId}/PUT/requestBody/content/application\/json`.
                case json(Components.Schemas.CalendarListEntry)
            }
            public var body: Operations.Calendar_calendarList_update.Input.Body?
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - query:
            ///   - headers:
            ///   - body:
            public init(
                path: Operations.Calendar_calendarList_update.Input.Path,
                query: Operations.Calendar_calendarList_update.Input.Query = .init(),
                headers: Operations.Calendar_calendarList_update.Input.Headers = .init(),
                body: Operations.Calendar_calendarList_update.Input.Body? = nil
            ) {
                self.path = path
                self.query = query
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/users/me/calendarList/{calendarId}/PUT/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/users/me/calendarList/{calendarId}/PUT/responses/200/content/application\/json`.
                    case json(Components.Schemas.CalendarListEntry)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.CalendarListEntry {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.Calendar_calendarList_update.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.Calendar_calendarList_update.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Successful response
            ///
            /// - Remark: Generated from `#/paths//users/me/calendarList/{calendarId}/put(calendar.calendarList.update)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.Calendar_calendarList_update.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.Calendar_calendarList_update.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Removes a calendar from the user's calendar list.
    ///
    /// - Remark: HTTP `DELETE /users/me/calendarList/{calendarId}`.
    /// - Remark: Generated from `#/paths//users/me/calendarList/{calendarId}/delete(calendar.calendarList.delete)`.
    public enum Calendar_calendarList_delete {
        public static let id: Swift.String = "calendar.calendarList.delete"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/users/me/calendarList/{calendarId}/DELETE/path`.
            public struct Path: Sendable, Hashable {
                /// Calendar identifier. To retrieve calendar IDs call the calendarList.list method. If you want to access the primary calendar of the currently logged in user, use the "primary" keyword.
                ///
                /// - Remark: Generated from `#/paths/users/me/calendarList/{calendarId}/DELETE/path/calendarId`.
                public var calendarId: Swift.String
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - calendarId: Calendar identifier. To retrieve calendar IDs call the calendarList.list method. If you want to access the primary calendar of the currently logged in user, use the "primary" keyword.
                public init(calendarId: Swift.String) {
                    self.calendarId = calendarId
                }
            }
            public var path: Operations.Calendar_calendarList_delete.Input.Path
            /// - Remark: Generated from `#/paths/users/me/calendarList/{calendarId}/DELETE/query`.
            public struct Query: Sendable, Hashable {
                /// - Remark: Generated from `#/components/parameters/alt`.
                @frozen public enum Alt: String, Codable, Hashable, Sendable, CaseIterable {
                    case json = "json"
                }
                /// Data format for the response.
                ///
                /// - Remark: Generated from `#/paths/users/me/calendarList/{calendarId}/DELETE/query/alt`.
                public var alt: Components.Parameters.Alt?
                /// Selector specifying which fields to include in a partial response.
                ///
                /// - Remark: Generated from `#/paths/users/me/calendarList/{calendarId}/DELETE/query/fields`.
                public var fields: Components.Parameters.Fields?
                /// API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
                ///
                /// - Remark: Generated from `#/paths/users/me/calendarList/{calendarId}/DELETE/query/key`.
                public var key: Components.Parameters.Key?
                /// OAuth 2.0 token for the current user.
                ///
                /// - Remark: Generated from `#/paths/users/me/calendarList/{calendarId}/DELETE/query/oauth_token`.
                public var oauthToken: Components.Parameters.OauthToken?
                /// Returns response with indentations and line breaks.
                ///
                /// - Remark: Generated from `#/paths/users/me/calendarList/{calendarId}/DELETE/query/prettyPrint`.
                public var prettyPrint: Components.Parameters.PrettyPrint?
                /// An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
                ///
                /// - Remark: Generated from `#/paths/users/me/calendarList/{calendarId}/DELETE/query/quotaUser`.
                public var quotaUser: Components.Parameters.QuotaUser?
                /// Deprecated. Please use quotaUser instead.
                ///
                /// - Remark: Generated from `#/paths/users/me/calendarList/{calendarId}/DELETE/query/userIp`.
                public var userIp: Components.Parameters.UserIp?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - alt: Data format for the response.
                ///   - fields: Selector specifying which fields to include in a partial response.
                ///   - key: API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
                ///   - oauthToken: OAuth 2.0 token for the current user.
                ///   - prettyPrint: Returns response with indentations and line breaks.
                ///   - quotaUser: An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
                ///   - userIp: Deprecated. Please use quotaUser instead.
                public init(
                    alt: Components.Parameters.Alt? = nil,
                    fields: Components.Parameters.Fields? = nil,
                    key: Components.Parameters.Key? = nil,
                    oauthToken: Components.Parameters.OauthToken? = nil,
                    prettyPrint: Components.Parameters.PrettyPrint? = nil,
                    quotaUser: Components.Parameters.QuotaUser? = nil,
                    userIp: Components.Parameters.UserIp? = nil
                ) {
                    self.alt = alt
                    self.fields = fields
                    self.key = key
                    self.oauthToken = oauthToken
                    self.prettyPrint = prettyPrint
                    self.quotaUser = quotaUser
                    self.userIp = userIp
                }
            }
            public var query: Operations.Calendar_calendarList_delete.Input.Query
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - query:
            public init(
                path: Operations.Calendar_calendarList_delete.Input.Path,
                query: Operations.Calendar_calendarList_delete.Input.Query = .init()
            ) {
                self.path = path
                self.query = query
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// Creates a new `Ok`.
                public init() {}
            }
            /// Successful response
            ///
            /// - Remark: Generated from `#/paths//users/me/calendarList/{calendarId}/delete(calendar.calendarList.delete)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.Calendar_calendarList_delete.Output.Ok)
            /// Successful response
            ///
            /// - Remark: Generated from `#/paths//users/me/calendarList/{calendarId}/delete(calendar.calendarList.delete)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            public static var ok: Self {
                .ok(.init())
            }
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.Calendar_calendarList_delete.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
    }
    /// Returns all user settings for the authenticated user.
    ///
    /// - Remark: HTTP `GET /users/me/settings`.
    /// - Remark: Generated from `#/paths//users/me/settings/get(calendar.settings.list)`.
    public enum Calendar_settings_list {
        public static let id: Swift.String = "calendar.settings.list"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/users/me/settings/GET/query`.
            public struct Query: Sendable, Hashable {
                /// - Remark: Generated from `#/components/parameters/alt`.
                @frozen public enum Alt: String, Codable, Hashable, Sendable, CaseIterable {
                    case json = "json"
                }
                /// Data format for the response.
                ///
                /// - Remark: Generated from `#/paths/users/me/settings/GET/query/alt`.
                public var alt: Components.Parameters.Alt?
                /// Selector specifying which fields to include in a partial response.
                ///
                /// - Remark: Generated from `#/paths/users/me/settings/GET/query/fields`.
                public var fields: Components.Parameters.Fields?
                /// API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
                ///
                /// - Remark: Generated from `#/paths/users/me/settings/GET/query/key`.
                public var key: Components.Parameters.Key?
                /// OAuth 2.0 token for the current user.
                ///
                /// - Remark: Generated from `#/paths/users/me/settings/GET/query/oauth_token`.
                public var oauthToken: Components.Parameters.OauthToken?
                /// Returns response with indentations and line breaks.
                ///
                /// - Remark: Generated from `#/paths/users/me/settings/GET/query/prettyPrint`.
                public var prettyPrint: Components.Parameters.PrettyPrint?
                /// An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
                ///
                /// - Remark: Generated from `#/paths/users/me/settings/GET/query/quotaUser`.
                public var quotaUser: Components.Parameters.QuotaUser?
                /// Deprecated. Please use quotaUser instead.
                ///
                /// - Remark: Generated from `#/paths/users/me/settings/GET/query/userIp`.
                public var userIp: Components.Parameters.UserIp?
                /// Maximum number of entries returned on one result page. By default the value is 100 entries. The page size can never be larger than 250 entries. Optional.
                ///
                /// - Remark: Generated from `#/paths/users/me/settings/GET/query/maxResults`.
                public var maxResults: Swift.Int?
                /// Token specifying which result page to return. Optional.
                ///
                /// - Remark: Generated from `#/paths/users/me/settings/GET/query/pageToken`.
                public var pageToken: Swift.String?
                /// Token obtained from the nextSyncToken field returned on the last page of results from the previous list request. It makes the result of this list request contain only entries that have changed since then.
                /// If the syncToken expires, the server will respond with a 410 GONE response code and the client should clear its storage and perform a full synchronization without any syncToken.
                /// Learn more about incremental synchronization.
                /// Optional. The default is to return all entries.
                ///
                /// - Remark: Generated from `#/paths/users/me/settings/GET/query/syncToken`.
                public var syncToken: Swift.String?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - alt: Data format for the response.
                ///   - fields: Selector specifying which fields to include in a partial response.
                ///   - key: API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
                ///   - oauthToken: OAuth 2.0 token for the current user.
                ///   - prettyPrint: Returns response with indentations and line breaks.
                ///   - quotaUser: An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
                ///   - userIp: Deprecated. Please use quotaUser instead.
                ///   - maxResults: Maximum number of entries returned on one result page. By default the value is 100 entries. The page size can never be larger than 250 entries. Optional.
                ///   - pageToken: Token specifying which result page to return. Optional.
                ///   - syncToken: Token obtained from the nextSyncToken field returned on the last page of results from the previous list request. It makes the result of this list request contain only entries that have changed since then.
                public init(
                    alt: Components.Parameters.Alt? = nil,
                    fields: Components.Parameters.Fields? = nil,
                    key: Components.Parameters.Key? = nil,
                    oauthToken: Components.Parameters.OauthToken? = nil,
                    prettyPrint: Components.Parameters.PrettyPrint? = nil,
                    quotaUser: Components.Parameters.QuotaUser? = nil,
                    userIp: Components.Parameters.UserIp? = nil,
                    maxResults: Swift.Int? = nil,
                    pageToken: Swift.String? = nil,
                    syncToken: Swift.String? = nil
                ) {
                    self.alt = alt
                    self.fields = fields
                    self.key = key
                    self.oauthToken = oauthToken
                    self.prettyPrint = prettyPrint
                    self.quotaUser = quotaUser
                    self.userIp = userIp
                    self.maxResults = maxResults
                    self.pageToken = pageToken
                    self.syncToken = syncToken
                }
            }
            public var query: Operations.Calendar_settings_list.Input.Query
            /// - Remark: Generated from `#/paths/users/me/settings/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.Calendar_settings_list.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.Calendar_settings_list.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.Calendar_settings_list.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - query:
            ///   - headers:
            public init(
                query: Operations.Calendar_settings_list.Input.Query = .init(),
                headers: Operations.Calendar_settings_list.Input.Headers = .init()
            ) {
                self.query = query
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/users/me/settings/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/users/me/settings/GET/responses/200/content/application\/json`.
                    case json(Components.Schemas.Settings)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.Settings {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.Calendar_settings_list.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.Calendar_settings_list.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Successful response
            ///
            /// - Remark: Generated from `#/paths//users/me/settings/get(calendar.settings.list)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.Calendar_settings_list.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.Calendar_settings_list.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Watch for changes to Settings resources.
    ///
    /// - Remark: HTTP `POST /users/me/settings/watch`.
    /// - Remark: Generated from `#/paths//users/me/settings/watch/post(calendar.settings.watch)`.
    public enum Calendar_settings_watch {
        public static let id: Swift.String = "calendar.settings.watch"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/users/me/settings/watch/POST/query`.
            public struct Query: Sendable, Hashable {
                /// - Remark: Generated from `#/components/parameters/alt`.
                @frozen public enum Alt: String, Codable, Hashable, Sendable, CaseIterable {
                    case json = "json"
                }
                /// Data format for the response.
                ///
                /// - Remark: Generated from `#/paths/users/me/settings/watch/POST/query/alt`.
                public var alt: Components.Parameters.Alt?
                /// Selector specifying which fields to include in a partial response.
                ///
                /// - Remark: Generated from `#/paths/users/me/settings/watch/POST/query/fields`.
                public var fields: Components.Parameters.Fields?
                /// API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
                ///
                /// - Remark: Generated from `#/paths/users/me/settings/watch/POST/query/key`.
                public var key: Components.Parameters.Key?
                /// OAuth 2.0 token for the current user.
                ///
                /// - Remark: Generated from `#/paths/users/me/settings/watch/POST/query/oauth_token`.
                public var oauthToken: Components.Parameters.OauthToken?
                /// Returns response with indentations and line breaks.
                ///
                /// - Remark: Generated from `#/paths/users/me/settings/watch/POST/query/prettyPrint`.
                public var prettyPrint: Components.Parameters.PrettyPrint?
                /// An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
                ///
                /// - Remark: Generated from `#/paths/users/me/settings/watch/POST/query/quotaUser`.
                public var quotaUser: Components.Parameters.QuotaUser?
                /// Deprecated. Please use quotaUser instead.
                ///
                /// - Remark: Generated from `#/paths/users/me/settings/watch/POST/query/userIp`.
                public var userIp: Components.Parameters.UserIp?
                /// Maximum number of entries returned on one result page. By default the value is 100 entries. The page size can never be larger than 250 entries. Optional.
                ///
                /// - Remark: Generated from `#/paths/users/me/settings/watch/POST/query/maxResults`.
                public var maxResults: Swift.Int?
                /// Token specifying which result page to return. Optional.
                ///
                /// - Remark: Generated from `#/paths/users/me/settings/watch/POST/query/pageToken`.
                public var pageToken: Swift.String?
                /// Token obtained from the nextSyncToken field returned on the last page of results from the previous list request. It makes the result of this list request contain only entries that have changed since then.
                /// If the syncToken expires, the server will respond with a 410 GONE response code and the client should clear its storage and perform a full synchronization without any syncToken.
                /// Learn more about incremental synchronization.
                /// Optional. The default is to return all entries.
                ///
                /// - Remark: Generated from `#/paths/users/me/settings/watch/POST/query/syncToken`.
                public var syncToken: Swift.String?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - alt: Data format for the response.
                ///   - fields: Selector specifying which fields to include in a partial response.
                ///   - key: API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
                ///   - oauthToken: OAuth 2.0 token for the current user.
                ///   - prettyPrint: Returns response with indentations and line breaks.
                ///   - quotaUser: An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
                ///   - userIp: Deprecated. Please use quotaUser instead.
                ///   - maxResults: Maximum number of entries returned on one result page. By default the value is 100 entries. The page size can never be larger than 250 entries. Optional.
                ///   - pageToken: Token specifying which result page to return. Optional.
                ///   - syncToken: Token obtained from the nextSyncToken field returned on the last page of results from the previous list request. It makes the result of this list request contain only entries that have changed since then.
                public init(
                    alt: Components.Parameters.Alt? = nil,
                    fields: Components.Parameters.Fields? = nil,
                    key: Components.Parameters.Key? = nil,
                    oauthToken: Components.Parameters.OauthToken? = nil,
                    prettyPrint: Components.Parameters.PrettyPrint? = nil,
                    quotaUser: Components.Parameters.QuotaUser? = nil,
                    userIp: Components.Parameters.UserIp? = nil,
                    maxResults: Swift.Int? = nil,
                    pageToken: Swift.String? = nil,
                    syncToken: Swift.String? = nil
                ) {
                    self.alt = alt
                    self.fields = fields
                    self.key = key
                    self.oauthToken = oauthToken
                    self.prettyPrint = prettyPrint
                    self.quotaUser = quotaUser
                    self.userIp = userIp
                    self.maxResults = maxResults
                    self.pageToken = pageToken
                    self.syncToken = syncToken
                }
            }
            public var query: Operations.Calendar_settings_watch.Input.Query
            /// - Remark: Generated from `#/paths/users/me/settings/watch/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.Calendar_settings_watch.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.Calendar_settings_watch.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.Calendar_settings_watch.Input.Headers
            /// - Remark: Generated from `#/paths/users/me/settings/watch/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/users/me/settings/watch/POST/requestBody/content/application\/json`.
                case json(Components.Schemas.Channel)
            }
            public var body: Operations.Calendar_settings_watch.Input.Body?
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - query:
            ///   - headers:
            ///   - body:
            public init(
                query: Operations.Calendar_settings_watch.Input.Query = .init(),
                headers: Operations.Calendar_settings_watch.Input.Headers = .init(),
                body: Operations.Calendar_settings_watch.Input.Body? = nil
            ) {
                self.query = query
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/users/me/settings/watch/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/users/me/settings/watch/POST/responses/200/content/application\/json`.
                    case json(Components.Schemas.Channel)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.Channel {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.Calendar_settings_watch.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.Calendar_settings_watch.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Successful response
            ///
            /// - Remark: Generated from `#/paths//users/me/settings/watch/post(calendar.settings.watch)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.Calendar_settings_watch.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.Calendar_settings_watch.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Returns a single user setting.
    ///
    /// - Remark: HTTP `GET /users/me/settings/{setting}`.
    /// - Remark: Generated from `#/paths//users/me/settings/{setting}/get(calendar.settings.get)`.
    public enum Calendar_settings_get {
        public static let id: Swift.String = "calendar.settings.get"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/users/me/settings/{setting}/GET/path`.
            public struct Path: Sendable, Hashable {
                /// The id of the user setting.
                ///
                /// - Remark: Generated from `#/paths/users/me/settings/{setting}/GET/path/setting`.
                public var setting: Swift.String
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - setting: The id of the user setting.
                public init(setting: Swift.String) {
                    self.setting = setting
                }
            }
            public var path: Operations.Calendar_settings_get.Input.Path
            /// - Remark: Generated from `#/paths/users/me/settings/{setting}/GET/query`.
            public struct Query: Sendable, Hashable {
                /// - Remark: Generated from `#/components/parameters/alt`.
                @frozen public enum Alt: String, Codable, Hashable, Sendable, CaseIterable {
                    case json = "json"
                }
                /// Data format for the response.
                ///
                /// - Remark: Generated from `#/paths/users/me/settings/{setting}/GET/query/alt`.
                public var alt: Components.Parameters.Alt?
                /// Selector specifying which fields to include in a partial response.
                ///
                /// - Remark: Generated from `#/paths/users/me/settings/{setting}/GET/query/fields`.
                public var fields: Components.Parameters.Fields?
                /// API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
                ///
                /// - Remark: Generated from `#/paths/users/me/settings/{setting}/GET/query/key`.
                public var key: Components.Parameters.Key?
                /// OAuth 2.0 token for the current user.
                ///
                /// - Remark: Generated from `#/paths/users/me/settings/{setting}/GET/query/oauth_token`.
                public var oauthToken: Components.Parameters.OauthToken?
                /// Returns response with indentations and line breaks.
                ///
                /// - Remark: Generated from `#/paths/users/me/settings/{setting}/GET/query/prettyPrint`.
                public var prettyPrint: Components.Parameters.PrettyPrint?
                /// An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
                ///
                /// - Remark: Generated from `#/paths/users/me/settings/{setting}/GET/query/quotaUser`.
                public var quotaUser: Components.Parameters.QuotaUser?
                /// Deprecated. Please use quotaUser instead.
                ///
                /// - Remark: Generated from `#/paths/users/me/settings/{setting}/GET/query/userIp`.
                public var userIp: Components.Parameters.UserIp?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - alt: Data format for the response.
                ///   - fields: Selector specifying which fields to include in a partial response.
                ///   - key: API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
                ///   - oauthToken: OAuth 2.0 token for the current user.
                ///   - prettyPrint: Returns response with indentations and line breaks.
                ///   - quotaUser: An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
                ///   - userIp: Deprecated. Please use quotaUser instead.
                public init(
                    alt: Components.Parameters.Alt? = nil,
                    fields: Components.Parameters.Fields? = nil,
                    key: Components.Parameters.Key? = nil,
                    oauthToken: Components.Parameters.OauthToken? = nil,
                    prettyPrint: Components.Parameters.PrettyPrint? = nil,
                    quotaUser: Components.Parameters.QuotaUser? = nil,
                    userIp: Components.Parameters.UserIp? = nil
                ) {
                    self.alt = alt
                    self.fields = fields
                    self.key = key
                    self.oauthToken = oauthToken
                    self.prettyPrint = prettyPrint
                    self.quotaUser = quotaUser
                    self.userIp = userIp
                }
            }
            public var query: Operations.Calendar_settings_get.Input.Query
            /// - Remark: Generated from `#/paths/users/me/settings/{setting}/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.Calendar_settings_get.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.Calendar_settings_get.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.Calendar_settings_get.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - query:
            ///   - headers:
            public init(
                path: Operations.Calendar_settings_get.Input.Path,
                query: Operations.Calendar_settings_get.Input.Query = .init(),
                headers: Operations.Calendar_settings_get.Input.Headers = .init()
            ) {
                self.path = path
                self.query = query
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/users/me/settings/{setting}/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/users/me/settings/{setting}/GET/responses/200/content/application\/json`.
                    case json(Components.Schemas.Setting)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.Setting {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.Calendar_settings_get.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.Calendar_settings_get.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Successful response
            ///
            /// - Remark: Generated from `#/paths//users/me/settings/{setting}/get(calendar.settings.get)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.Calendar_settings_get.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.Calendar_settings_get.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
}
