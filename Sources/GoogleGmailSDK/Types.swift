// Generated by swift-openapi-generator, do not modify.
@_spi(Generated) import OpenAPIRuntime
#if os(Linux)
@preconcurrency import struct Foundation.URL
@preconcurrency import struct Foundation.Data
@preconcurrency import struct Foundation.Date
#else
import struct Foundation.URL
import struct Foundation.Data
import struct Foundation.Date
#endif
/// A type that performs HTTP operations defined by the OpenAPI document.
public protocol APIProtocol: Sendable {
    /// Lists the drafts in the user's mailbox.
    ///
    /// - Remark: HTTP `GET /gmail/v1/users/{userId}/drafts`.
    /// - Remark: Generated from `#/paths//gmail/v1/users/{userId}/drafts/get(gmail.users.drafts.list)`.
    func gmail_users_drafts_list(_ input: Operations.Gmail_users_drafts_list.Input) async throws -> Operations.Gmail_users_drafts_list.Output
    /// Creates a new draft with the `DRAFT` label.
    ///
    /// - Remark: HTTP `POST /gmail/v1/users/{userId}/drafts`.
    /// - Remark: Generated from `#/paths//gmail/v1/users/{userId}/drafts/post(gmail.users.drafts.create)`.
    func gmail_users_drafts_create(_ input: Operations.Gmail_users_drafts_create.Input) async throws -> Operations.Gmail_users_drafts_create.Output
    /// Sends the specified, existing draft to the recipients in the `To`, `Cc`, and `Bcc` headers.
    ///
    /// - Remark: HTTP `POST /gmail/v1/users/{userId}/drafts/send`.
    /// - Remark: Generated from `#/paths//gmail/v1/users/{userId}/drafts/send/post(gmail.users.drafts.send)`.
    func gmail_users_drafts_send(_ input: Operations.Gmail_users_drafts_send.Input) async throws -> Operations.Gmail_users_drafts_send.Output
    /// Gets the specified draft.
    ///
    /// - Remark: HTTP `GET /gmail/v1/users/{userId}/drafts/{id}`.
    /// - Remark: Generated from `#/paths//gmail/v1/users/{userId}/drafts/{id}/get(gmail.users.drafts.get)`.
    func gmail_users_drafts_get(_ input: Operations.Gmail_users_drafts_get.Input) async throws -> Operations.Gmail_users_drafts_get.Output
    /// Replaces a draft's content.
    ///
    /// - Remark: HTTP `PUT /gmail/v1/users/{userId}/drafts/{id}`.
    /// - Remark: Generated from `#/paths//gmail/v1/users/{userId}/drafts/{id}/put(gmail.users.drafts.update)`.
    func gmail_users_drafts_update(_ input: Operations.Gmail_users_drafts_update.Input) async throws -> Operations.Gmail_users_drafts_update.Output
    /// Immediately and permanently deletes the specified draft. Does not simply trash it.
    ///
    /// - Remark: HTTP `DELETE /gmail/v1/users/{userId}/drafts/{id}`.
    /// - Remark: Generated from `#/paths//gmail/v1/users/{userId}/drafts/{id}/delete(gmail.users.drafts.delete)`.
    func gmail_users_drafts_delete(_ input: Operations.Gmail_users_drafts_delete.Input) async throws -> Operations.Gmail_users_drafts_delete.Output
    /// Lists the history of all changes to the given mailbox. History results are returned in chronological order (increasing `historyId`).
    ///
    /// - Remark: HTTP `GET /gmail/v1/users/{userId}/history`.
    /// - Remark: Generated from `#/paths//gmail/v1/users/{userId}/history/get(gmail.users.history.list)`.
    func gmail_users_history_list(_ input: Operations.Gmail_users_history_list.Input) async throws -> Operations.Gmail_users_history_list.Output
    /// Lists all labels in the user's mailbox.
    ///
    /// - Remark: HTTP `GET /gmail/v1/users/{userId}/labels`.
    /// - Remark: Generated from `#/paths//gmail/v1/users/{userId}/labels/get(gmail.users.labels.list)`.
    func gmail_users_labels_list(_ input: Operations.Gmail_users_labels_list.Input) async throws -> Operations.Gmail_users_labels_list.Output
    /// Creates a new label.
    ///
    /// - Remark: HTTP `POST /gmail/v1/users/{userId}/labels`.
    /// - Remark: Generated from `#/paths//gmail/v1/users/{userId}/labels/post(gmail.users.labels.create)`.
    func gmail_users_labels_create(_ input: Operations.Gmail_users_labels_create.Input) async throws -> Operations.Gmail_users_labels_create.Output
    /// Gets the specified label.
    ///
    /// - Remark: HTTP `GET /gmail/v1/users/{userId}/labels/{id}`.
    /// - Remark: Generated from `#/paths//gmail/v1/users/{userId}/labels/{id}/get(gmail.users.labels.get)`.
    func gmail_users_labels_get(_ input: Operations.Gmail_users_labels_get.Input) async throws -> Operations.Gmail_users_labels_get.Output
    /// Patch the specified label.
    ///
    /// - Remark: HTTP `PATCH /gmail/v1/users/{userId}/labels/{id}`.
    /// - Remark: Generated from `#/paths//gmail/v1/users/{userId}/labels/{id}/patch(gmail.users.labels.patch)`.
    func gmail_users_labels_patch(_ input: Operations.Gmail_users_labels_patch.Input) async throws -> Operations.Gmail_users_labels_patch.Output
    /// Updates the specified label.
    ///
    /// - Remark: HTTP `PUT /gmail/v1/users/{userId}/labels/{id}`.
    /// - Remark: Generated from `#/paths//gmail/v1/users/{userId}/labels/{id}/put(gmail.users.labels.update)`.
    func gmail_users_labels_update(_ input: Operations.Gmail_users_labels_update.Input) async throws -> Operations.Gmail_users_labels_update.Output
    /// Immediately and permanently deletes the specified label and removes it from any messages and threads that it is applied to.
    ///
    /// - Remark: HTTP `DELETE /gmail/v1/users/{userId}/labels/{id}`.
    /// - Remark: Generated from `#/paths//gmail/v1/users/{userId}/labels/{id}/delete(gmail.users.labels.delete)`.
    func gmail_users_labels_delete(_ input: Operations.Gmail_users_labels_delete.Input) async throws -> Operations.Gmail_users_labels_delete.Output
    /// Lists the messages in the user's mailbox.
    ///
    /// - Remark: HTTP `GET /gmail/v1/users/{userId}/messages`.
    /// - Remark: Generated from `#/paths//gmail/v1/users/{userId}/messages/get(gmail.users.messages.list)`.
    func gmail_users_messages_list(_ input: Operations.Gmail_users_messages_list.Input) async throws -> Operations.Gmail_users_messages_list.Output
    /// Directly inserts a message into only this user's mailbox similar to `IMAP APPEND`, bypassing most scanning and classification. Does not send a message.
    ///
    /// - Remark: HTTP `POST /gmail/v1/users/{userId}/messages`.
    /// - Remark: Generated from `#/paths//gmail/v1/users/{userId}/messages/post(gmail.users.messages.insert)`.
    func gmail_users_messages_insert(_ input: Operations.Gmail_users_messages_insert.Input) async throws -> Operations.Gmail_users_messages_insert.Output
    /// Deletes many messages by message ID. Provides no guarantees that messages were not already deleted or even existed at all.
    ///
    /// - Remark: HTTP `POST /gmail/v1/users/{userId}/messages/batchDelete`.
    /// - Remark: Generated from `#/paths//gmail/v1/users/{userId}/messages/batchDelete/post(gmail.users.messages.batchDelete)`.
    func gmail_users_messages_batchDelete(_ input: Operations.Gmail_users_messages_batchDelete.Input) async throws -> Operations.Gmail_users_messages_batchDelete.Output
    /// Modifies the labels on the specified messages.
    ///
    /// - Remark: HTTP `POST /gmail/v1/users/{userId}/messages/batchModify`.
    /// - Remark: Generated from `#/paths//gmail/v1/users/{userId}/messages/batchModify/post(gmail.users.messages.batchModify)`.
    func gmail_users_messages_batchModify(_ input: Operations.Gmail_users_messages_batchModify.Input) async throws -> Operations.Gmail_users_messages_batchModify.Output
    /// Imports a message into only this user's mailbox, with standard email delivery scanning and classification similar to receiving via SMTP. This method doesn't perform SPF checks, so it might not work for some spam messages, such as those attempting to perform domain spoofing. This method does not send a message.
    ///
    /// - Remark: HTTP `POST /gmail/v1/users/{userId}/messages/import`.
    /// - Remark: Generated from `#/paths//gmail/v1/users/{userId}/messages/import/post(gmail.users.messages.import)`.
    func gmail_users_messages_import(_ input: Operations.Gmail_users_messages_import.Input) async throws -> Operations.Gmail_users_messages_import.Output
    /// Sends the specified message to the recipients in the `To`, `Cc`, and `Bcc` headers. For example usage, see [Sending email](https://developers.google.com/gmail/api/guides/sending).
    ///
    /// - Remark: HTTP `POST /gmail/v1/users/{userId}/messages/send`.
    /// - Remark: Generated from `#/paths//gmail/v1/users/{userId}/messages/send/post(gmail.users.messages.send)`.
    func gmail_users_messages_send(_ input: Operations.Gmail_users_messages_send.Input) async throws -> Operations.Gmail_users_messages_send.Output
    /// Gets the specified message.
    ///
    /// - Remark: HTTP `GET /gmail/v1/users/{userId}/messages/{id}`.
    /// - Remark: Generated from `#/paths//gmail/v1/users/{userId}/messages/{id}/get(gmail.users.messages.get)`.
    func gmail_users_messages_get(_ input: Operations.Gmail_users_messages_get.Input) async throws -> Operations.Gmail_users_messages_get.Output
    /// Immediately and permanently deletes the specified message. This operation cannot be undone. Prefer `messages.trash` instead.
    ///
    /// - Remark: HTTP `DELETE /gmail/v1/users/{userId}/messages/{id}`.
    /// - Remark: Generated from `#/paths//gmail/v1/users/{userId}/messages/{id}/delete(gmail.users.messages.delete)`.
    func gmail_users_messages_delete(_ input: Operations.Gmail_users_messages_delete.Input) async throws -> Operations.Gmail_users_messages_delete.Output
    /// Modifies the labels on the specified message.
    ///
    /// - Remark: HTTP `POST /gmail/v1/users/{userId}/messages/{id}/modify`.
    /// - Remark: Generated from `#/paths//gmail/v1/users/{userId}/messages/{id}/modify/post(gmail.users.messages.modify)`.
    func gmail_users_messages_modify(_ input: Operations.Gmail_users_messages_modify.Input) async throws -> Operations.Gmail_users_messages_modify.Output
    /// Moves the specified message to the trash.
    ///
    /// - Remark: HTTP `POST /gmail/v1/users/{userId}/messages/{id}/trash`.
    /// - Remark: Generated from `#/paths//gmail/v1/users/{userId}/messages/{id}/trash/post(gmail.users.messages.trash)`.
    func gmail_users_messages_trash(_ input: Operations.Gmail_users_messages_trash.Input) async throws -> Operations.Gmail_users_messages_trash.Output
    /// Removes the specified message from the trash.
    ///
    /// - Remark: HTTP `POST /gmail/v1/users/{userId}/messages/{id}/untrash`.
    /// - Remark: Generated from `#/paths//gmail/v1/users/{userId}/messages/{id}/untrash/post(gmail.users.messages.untrash)`.
    func gmail_users_messages_untrash(_ input: Operations.Gmail_users_messages_untrash.Input) async throws -> Operations.Gmail_users_messages_untrash.Output
    /// Gets the specified message attachment.
    ///
    /// - Remark: HTTP `GET /gmail/v1/users/{userId}/messages/{messageId}/attachments/{id}`.
    /// - Remark: Generated from `#/paths//gmail/v1/users/{userId}/messages/{messageId}/attachments/{id}/get(gmail.users.messages.attachments.get)`.
    func gmail_users_messages_attachments_get(_ input: Operations.Gmail_users_messages_attachments_get.Input) async throws -> Operations.Gmail_users_messages_attachments_get.Output
    /// Gets the current user's Gmail profile.
    ///
    /// - Remark: HTTP `GET /gmail/v1/users/{userId}/profile`.
    /// - Remark: Generated from `#/paths//gmail/v1/users/{userId}/profile/get(gmail.users.getProfile)`.
    func gmail_users_getProfile(_ input: Operations.Gmail_users_getProfile.Input) async throws -> Operations.Gmail_users_getProfile.Output
    /// Gets the auto-forwarding setting for the specified account.
    ///
    /// - Remark: HTTP `GET /gmail/v1/users/{userId}/settings/autoForwarding`.
    /// - Remark: Generated from `#/paths//gmail/v1/users/{userId}/settings/autoForwarding/get(gmail.users.settings.getAutoForwarding)`.
    func gmail_users_settings_getAutoForwarding(_ input: Operations.Gmail_users_settings_getAutoForwarding.Input) async throws -> Operations.Gmail_users_settings_getAutoForwarding.Output
    /// Updates the auto-forwarding setting for the specified account. A verified forwarding address must be specified when auto-forwarding is enabled. This method is only available to service account clients that have been delegated domain-wide authority.
    ///
    /// - Remark: HTTP `PUT /gmail/v1/users/{userId}/settings/autoForwarding`.
    /// - Remark: Generated from `#/paths//gmail/v1/users/{userId}/settings/autoForwarding/put(gmail.users.settings.updateAutoForwarding)`.
    func gmail_users_settings_updateAutoForwarding(_ input: Operations.Gmail_users_settings_updateAutoForwarding.Input) async throws -> Operations.Gmail_users_settings_updateAutoForwarding.Output
    /// Lists the client-side encrypted identities for an authenticated user.
    ///
    /// - Remark: HTTP `GET /gmail/v1/users/{userId}/settings/cse/identities`.
    /// - Remark: Generated from `#/paths//gmail/v1/users/{userId}/settings/cse/identities/get(gmail.users.settings.cse.identities.list)`.
    func gmail_users_settings_cse_identities_list(_ input: Operations.Gmail_users_settings_cse_identities_list.Input) async throws -> Operations.Gmail_users_settings_cse_identities_list.Output
    /// Creates and configures a client-side encryption identity that's authorized to send mail from the user account. Google publishes the S/MIME certificate to a shared domain-wide directory so that people within a Google Workspace organization can encrypt and send mail to the identity.
    ///
    /// - Remark: HTTP `POST /gmail/v1/users/{userId}/settings/cse/identities`.
    /// - Remark: Generated from `#/paths//gmail/v1/users/{userId}/settings/cse/identities/post(gmail.users.settings.cse.identities.create)`.
    func gmail_users_settings_cse_identities_create(_ input: Operations.Gmail_users_settings_cse_identities_create.Input) async throws -> Operations.Gmail_users_settings_cse_identities_create.Output
    /// Retrieves a client-side encryption identity configuration.
    ///
    /// - Remark: HTTP `GET /gmail/v1/users/{userId}/settings/cse/identities/{cseEmailAddress}`.
    /// - Remark: Generated from `#/paths//gmail/v1/users/{userId}/settings/cse/identities/{cseEmailAddress}/get(gmail.users.settings.cse.identities.get)`.
    func gmail_users_settings_cse_identities_get(_ input: Operations.Gmail_users_settings_cse_identities_get.Input) async throws -> Operations.Gmail_users_settings_cse_identities_get.Output
    /// Deletes a client-side encryption identity. The authenticated user can no longer use the identity to send encrypted messages. You cannot restore the identity after you delete it. Instead, use the CreateCseIdentity method to create another identity with the same configuration.
    ///
    /// - Remark: HTTP `DELETE /gmail/v1/users/{userId}/settings/cse/identities/{cseEmailAddress}`.
    /// - Remark: Generated from `#/paths//gmail/v1/users/{userId}/settings/cse/identities/{cseEmailAddress}/delete(gmail.users.settings.cse.identities.delete)`.
    func gmail_users_settings_cse_identities_delete(_ input: Operations.Gmail_users_settings_cse_identities_delete.Input) async throws -> Operations.Gmail_users_settings_cse_identities_delete.Output
    /// Associates a different key pair with an existing client-side encryption identity. The updated key pair must validate against Google's [S/MIME certificate profiles](https://support.google.com/a/answer/7300887).
    ///
    /// - Remark: HTTP `PATCH /gmail/v1/users/{userId}/settings/cse/identities/{emailAddress}`.
    /// - Remark: Generated from `#/paths//gmail/v1/users/{userId}/settings/cse/identities/{emailAddress}/patch(gmail.users.settings.cse.identities.patch)`.
    func gmail_users_settings_cse_identities_patch(_ input: Operations.Gmail_users_settings_cse_identities_patch.Input) async throws -> Operations.Gmail_users_settings_cse_identities_patch.Output
    /// Lists client-side encryption key pairs for an authenticated user.
    ///
    /// - Remark: HTTP `GET /gmail/v1/users/{userId}/settings/cse/keypairs`.
    /// - Remark: Generated from `#/paths//gmail/v1/users/{userId}/settings/cse/keypairs/get(gmail.users.settings.cse.keypairs.list)`.
    func gmail_users_settings_cse_keypairs_list(_ input: Operations.Gmail_users_settings_cse_keypairs_list.Input) async throws -> Operations.Gmail_users_settings_cse_keypairs_list.Output
    /// Creates and uploads a client-side encryption S/MIME public key certificate chain and private key metadata for the authenticated user.
    ///
    /// - Remark: HTTP `POST /gmail/v1/users/{userId}/settings/cse/keypairs`.
    /// - Remark: Generated from `#/paths//gmail/v1/users/{userId}/settings/cse/keypairs/post(gmail.users.settings.cse.keypairs.create)`.
    func gmail_users_settings_cse_keypairs_create(_ input: Operations.Gmail_users_settings_cse_keypairs_create.Input) async throws -> Operations.Gmail_users_settings_cse_keypairs_create.Output
    /// Retrieves an existing client-side encryption key pair.
    ///
    /// - Remark: HTTP `GET /gmail/v1/users/{userId}/settings/cse/keypairs/{keyPairId}`.
    /// - Remark: Generated from `#/paths//gmail/v1/users/{userId}/settings/cse/keypairs/{keyPairId}/get(gmail.users.settings.cse.keypairs.get)`.
    func gmail_users_settings_cse_keypairs_get(_ input: Operations.Gmail_users_settings_cse_keypairs_get.Input) async throws -> Operations.Gmail_users_settings_cse_keypairs_get.Output
    /// Turns off a client-side encryption key pair. The authenticated user can no longer use the key pair to decrypt incoming CSE message texts or sign outgoing CSE mail. To regain access, use the EnableCseKeyPair to turn on the key pair. After 30 days, you can permanently delete the key pair by using the ObliterateCseKeyPair method.
    ///
    /// - Remark: HTTP `POST /gmail/v1/users/{userId}/settings/cse/keypairs/{keyPairId}:disable`.
    /// - Remark: Generated from `#/paths//gmail/v1/users/{userId}/settings/cse/keypairs/{keyPairId}:disable/post(gmail.users.settings.cse.keypairs.disable)`.
    func gmail_users_settings_cse_keypairs_disable(_ input: Operations.Gmail_users_settings_cse_keypairs_disable.Input) async throws -> Operations.Gmail_users_settings_cse_keypairs_disable.Output
    /// Turns on a client-side encryption key pair that was turned off. The key pair becomes active again for any associated client-side encryption identities.
    ///
    /// - Remark: HTTP `POST /gmail/v1/users/{userId}/settings/cse/keypairs/{keyPairId}:enable`.
    /// - Remark: Generated from `#/paths//gmail/v1/users/{userId}/settings/cse/keypairs/{keyPairId}:enable/post(gmail.users.settings.cse.keypairs.enable)`.
    func gmail_users_settings_cse_keypairs_enable(_ input: Operations.Gmail_users_settings_cse_keypairs_enable.Input) async throws -> Operations.Gmail_users_settings_cse_keypairs_enable.Output
    /// Deletes a client-side encryption key pair permanently and immediately. You can only permanently delete key pairs that have been turned off for more than 30 days. To turn off a key pair, use the DisableCseKeyPair method. Gmail can't restore or decrypt any messages that were encrypted by an obliterated key. Authenticated users and Google Workspace administrators lose access to reading the encrypted messages.
    ///
    /// - Remark: HTTP `POST /gmail/v1/users/{userId}/settings/cse/keypairs/{keyPairId}:obliterate`.
    /// - Remark: Generated from `#/paths//gmail/v1/users/{userId}/settings/cse/keypairs/{keyPairId}:obliterate/post(gmail.users.settings.cse.keypairs.obliterate)`.
    func gmail_users_settings_cse_keypairs_obliterate(_ input: Operations.Gmail_users_settings_cse_keypairs_obliterate.Input) async throws -> Operations.Gmail_users_settings_cse_keypairs_obliterate.Output
    /// Lists the delegates for the specified account. This method is only available to service account clients that have been delegated domain-wide authority.
    ///
    /// - Remark: HTTP `GET /gmail/v1/users/{userId}/settings/delegates`.
    /// - Remark: Generated from `#/paths//gmail/v1/users/{userId}/settings/delegates/get(gmail.users.settings.delegates.list)`.
    func gmail_users_settings_delegates_list(_ input: Operations.Gmail_users_settings_delegates_list.Input) async throws -> Operations.Gmail_users_settings_delegates_list.Output
    /// Adds a delegate with its verification status set directly to `accepted`, without sending any verification email. The delegate user must be a member of the same Google Workspace organization as the delegator user. Gmail imposes limitations on the number of delegates and delegators each user in a Google Workspace organization can have. These limits depend on your organization, but in general each user can have up to 25 delegates and up to 10 delegators. Note that a delegate user must be referred to by their primary email address, and not an email alias. Also note that when a new delegate is created, there may be up to a one minute delay before the new delegate is available for use. This method is only available to service account clients that have been delegated domain-wide authority.
    ///
    /// - Remark: HTTP `POST /gmail/v1/users/{userId}/settings/delegates`.
    /// - Remark: Generated from `#/paths//gmail/v1/users/{userId}/settings/delegates/post(gmail.users.settings.delegates.create)`.
    func gmail_users_settings_delegates_create(_ input: Operations.Gmail_users_settings_delegates_create.Input) async throws -> Operations.Gmail_users_settings_delegates_create.Output
    /// Gets the specified delegate. Note that a delegate user must be referred to by their primary email address, and not an email alias. This method is only available to service account clients that have been delegated domain-wide authority.
    ///
    /// - Remark: HTTP `GET /gmail/v1/users/{userId}/settings/delegates/{delegateEmail}`.
    /// - Remark: Generated from `#/paths//gmail/v1/users/{userId}/settings/delegates/{delegateEmail}/get(gmail.users.settings.delegates.get)`.
    func gmail_users_settings_delegates_get(_ input: Operations.Gmail_users_settings_delegates_get.Input) async throws -> Operations.Gmail_users_settings_delegates_get.Output
    /// Removes the specified delegate (which can be of any verification status), and revokes any verification that may have been required for using it. Note that a delegate user must be referred to by their primary email address, and not an email alias. This method is only available to service account clients that have been delegated domain-wide authority.
    ///
    /// - Remark: HTTP `DELETE /gmail/v1/users/{userId}/settings/delegates/{delegateEmail}`.
    /// - Remark: Generated from `#/paths//gmail/v1/users/{userId}/settings/delegates/{delegateEmail}/delete(gmail.users.settings.delegates.delete)`.
    func gmail_users_settings_delegates_delete(_ input: Operations.Gmail_users_settings_delegates_delete.Input) async throws -> Operations.Gmail_users_settings_delegates_delete.Output
    /// Lists the message filters of a Gmail user.
    ///
    /// - Remark: HTTP `GET /gmail/v1/users/{userId}/settings/filters`.
    /// - Remark: Generated from `#/paths//gmail/v1/users/{userId}/settings/filters/get(gmail.users.settings.filters.list)`.
    func gmail_users_settings_filters_list(_ input: Operations.Gmail_users_settings_filters_list.Input) async throws -> Operations.Gmail_users_settings_filters_list.Output
    /// Creates a filter. Note: you can only create a maximum of 1,000 filters.
    ///
    /// - Remark: HTTP `POST /gmail/v1/users/{userId}/settings/filters`.
    /// - Remark: Generated from `#/paths//gmail/v1/users/{userId}/settings/filters/post(gmail.users.settings.filters.create)`.
    func gmail_users_settings_filters_create(_ input: Operations.Gmail_users_settings_filters_create.Input) async throws -> Operations.Gmail_users_settings_filters_create.Output
    /// Gets a filter.
    ///
    /// - Remark: HTTP `GET /gmail/v1/users/{userId}/settings/filters/{id}`.
    /// - Remark: Generated from `#/paths//gmail/v1/users/{userId}/settings/filters/{id}/get(gmail.users.settings.filters.get)`.
    func gmail_users_settings_filters_get(_ input: Operations.Gmail_users_settings_filters_get.Input) async throws -> Operations.Gmail_users_settings_filters_get.Output
    /// Immediately and permanently deletes the specified filter.
    ///
    /// - Remark: HTTP `DELETE /gmail/v1/users/{userId}/settings/filters/{id}`.
    /// - Remark: Generated from `#/paths//gmail/v1/users/{userId}/settings/filters/{id}/delete(gmail.users.settings.filters.delete)`.
    func gmail_users_settings_filters_delete(_ input: Operations.Gmail_users_settings_filters_delete.Input) async throws -> Operations.Gmail_users_settings_filters_delete.Output
    /// Lists the forwarding addresses for the specified account.
    ///
    /// - Remark: HTTP `GET /gmail/v1/users/{userId}/settings/forwardingAddresses`.
    /// - Remark: Generated from `#/paths//gmail/v1/users/{userId}/settings/forwardingAddresses/get(gmail.users.settings.forwardingAddresses.list)`.
    func gmail_users_settings_forwardingAddresses_list(_ input: Operations.Gmail_users_settings_forwardingAddresses_list.Input) async throws -> Operations.Gmail_users_settings_forwardingAddresses_list.Output
    /// Creates a forwarding address. If ownership verification is required, a message will be sent to the recipient and the resource's verification status will be set to `pending`; otherwise, the resource will be created with verification status set to `accepted`. This method is only available to service account clients that have been delegated domain-wide authority.
    ///
    /// - Remark: HTTP `POST /gmail/v1/users/{userId}/settings/forwardingAddresses`.
    /// - Remark: Generated from `#/paths//gmail/v1/users/{userId}/settings/forwardingAddresses/post(gmail.users.settings.forwardingAddresses.create)`.
    func gmail_users_settings_forwardingAddresses_create(_ input: Operations.Gmail_users_settings_forwardingAddresses_create.Input) async throws -> Operations.Gmail_users_settings_forwardingAddresses_create.Output
    /// Gets the specified forwarding address.
    ///
    /// - Remark: HTTP `GET /gmail/v1/users/{userId}/settings/forwardingAddresses/{forwardingEmail}`.
    /// - Remark: Generated from `#/paths//gmail/v1/users/{userId}/settings/forwardingAddresses/{forwardingEmail}/get(gmail.users.settings.forwardingAddresses.get)`.
    func gmail_users_settings_forwardingAddresses_get(_ input: Operations.Gmail_users_settings_forwardingAddresses_get.Input) async throws -> Operations.Gmail_users_settings_forwardingAddresses_get.Output
    /// Deletes the specified forwarding address and revokes any verification that may have been required. This method is only available to service account clients that have been delegated domain-wide authority.
    ///
    /// - Remark: HTTP `DELETE /gmail/v1/users/{userId}/settings/forwardingAddresses/{forwardingEmail}`.
    /// - Remark: Generated from `#/paths//gmail/v1/users/{userId}/settings/forwardingAddresses/{forwardingEmail}/delete(gmail.users.settings.forwardingAddresses.delete)`.
    func gmail_users_settings_forwardingAddresses_delete(_ input: Operations.Gmail_users_settings_forwardingAddresses_delete.Input) async throws -> Operations.Gmail_users_settings_forwardingAddresses_delete.Output
    /// Gets IMAP settings.
    ///
    /// - Remark: HTTP `GET /gmail/v1/users/{userId}/settings/imap`.
    /// - Remark: Generated from `#/paths//gmail/v1/users/{userId}/settings/imap/get(gmail.users.settings.getImap)`.
    func gmail_users_settings_getImap(_ input: Operations.Gmail_users_settings_getImap.Input) async throws -> Operations.Gmail_users_settings_getImap.Output
    /// Updates IMAP settings.
    ///
    /// - Remark: HTTP `PUT /gmail/v1/users/{userId}/settings/imap`.
    /// - Remark: Generated from `#/paths//gmail/v1/users/{userId}/settings/imap/put(gmail.users.settings.updateImap)`.
    func gmail_users_settings_updateImap(_ input: Operations.Gmail_users_settings_updateImap.Input) async throws -> Operations.Gmail_users_settings_updateImap.Output
    /// Gets language settings.
    ///
    /// - Remark: HTTP `GET /gmail/v1/users/{userId}/settings/language`.
    /// - Remark: Generated from `#/paths//gmail/v1/users/{userId}/settings/language/get(gmail.users.settings.getLanguage)`.
    func gmail_users_settings_getLanguage(_ input: Operations.Gmail_users_settings_getLanguage.Input) async throws -> Operations.Gmail_users_settings_getLanguage.Output
    /// Updates language settings. If successful, the return object contains the `displayLanguage` that was saved for the user, which may differ from the value passed into the request. This is because the requested `displayLanguage` may not be directly supported by Gmail but have a close variant that is, and so the variant may be chosen and saved instead.
    ///
    /// - Remark: HTTP `PUT /gmail/v1/users/{userId}/settings/language`.
    /// - Remark: Generated from `#/paths//gmail/v1/users/{userId}/settings/language/put(gmail.users.settings.updateLanguage)`.
    func gmail_users_settings_updateLanguage(_ input: Operations.Gmail_users_settings_updateLanguage.Input) async throws -> Operations.Gmail_users_settings_updateLanguage.Output
    /// Gets POP settings.
    ///
    /// - Remark: HTTP `GET /gmail/v1/users/{userId}/settings/pop`.
    /// - Remark: Generated from `#/paths//gmail/v1/users/{userId}/settings/pop/get(gmail.users.settings.getPop)`.
    func gmail_users_settings_getPop(_ input: Operations.Gmail_users_settings_getPop.Input) async throws -> Operations.Gmail_users_settings_getPop.Output
    /// Updates POP settings.
    ///
    /// - Remark: HTTP `PUT /gmail/v1/users/{userId}/settings/pop`.
    /// - Remark: Generated from `#/paths//gmail/v1/users/{userId}/settings/pop/put(gmail.users.settings.updatePop)`.
    func gmail_users_settings_updatePop(_ input: Operations.Gmail_users_settings_updatePop.Input) async throws -> Operations.Gmail_users_settings_updatePop.Output
    /// Lists the send-as aliases for the specified account. The result includes the primary send-as address associated with the account as well as any custom "from" aliases.
    ///
    /// - Remark: HTTP `GET /gmail/v1/users/{userId}/settings/sendAs`.
    /// - Remark: Generated from `#/paths//gmail/v1/users/{userId}/settings/sendAs/get(gmail.users.settings.sendAs.list)`.
    func gmail_users_settings_sendAs_list(_ input: Operations.Gmail_users_settings_sendAs_list.Input) async throws -> Operations.Gmail_users_settings_sendAs_list.Output
    /// Creates a custom "from" send-as alias. If an SMTP MSA is specified, Gmail will attempt to connect to the SMTP service to validate the configuration before creating the alias. If ownership verification is required for the alias, a message will be sent to the email address and the resource's verification status will be set to `pending`; otherwise, the resource will be created with verification status set to `accepted`. If a signature is provided, Gmail will sanitize the HTML before saving it with the alias. This method is only available to service account clients that have been delegated domain-wide authority.
    ///
    /// - Remark: HTTP `POST /gmail/v1/users/{userId}/settings/sendAs`.
    /// - Remark: Generated from `#/paths//gmail/v1/users/{userId}/settings/sendAs/post(gmail.users.settings.sendAs.create)`.
    func gmail_users_settings_sendAs_create(_ input: Operations.Gmail_users_settings_sendAs_create.Input) async throws -> Operations.Gmail_users_settings_sendAs_create.Output
    /// Gets the specified send-as alias. Fails with an HTTP 404 error if the specified address is not a member of the collection.
    ///
    /// - Remark: HTTP `GET /gmail/v1/users/{userId}/settings/sendAs/{sendAsEmail}`.
    /// - Remark: Generated from `#/paths//gmail/v1/users/{userId}/settings/sendAs/{sendAsEmail}/get(gmail.users.settings.sendAs.get)`.
    func gmail_users_settings_sendAs_get(_ input: Operations.Gmail_users_settings_sendAs_get.Input) async throws -> Operations.Gmail_users_settings_sendAs_get.Output
    /// Patch the specified send-as alias.
    ///
    /// - Remark: HTTP `PATCH /gmail/v1/users/{userId}/settings/sendAs/{sendAsEmail}`.
    /// - Remark: Generated from `#/paths//gmail/v1/users/{userId}/settings/sendAs/{sendAsEmail}/patch(gmail.users.settings.sendAs.patch)`.
    func gmail_users_settings_sendAs_patch(_ input: Operations.Gmail_users_settings_sendAs_patch.Input) async throws -> Operations.Gmail_users_settings_sendAs_patch.Output
    /// Updates a send-as alias. If a signature is provided, Gmail will sanitize the HTML before saving it with the alias. Addresses other than the primary address for the account can only be updated by service account clients that have been delegated domain-wide authority.
    ///
    /// - Remark: HTTP `PUT /gmail/v1/users/{userId}/settings/sendAs/{sendAsEmail}`.
    /// - Remark: Generated from `#/paths//gmail/v1/users/{userId}/settings/sendAs/{sendAsEmail}/put(gmail.users.settings.sendAs.update)`.
    func gmail_users_settings_sendAs_update(_ input: Operations.Gmail_users_settings_sendAs_update.Input) async throws -> Operations.Gmail_users_settings_sendAs_update.Output
    /// Deletes the specified send-as alias. Revokes any verification that may have been required for using it. This method is only available to service account clients that have been delegated domain-wide authority.
    ///
    /// - Remark: HTTP `DELETE /gmail/v1/users/{userId}/settings/sendAs/{sendAsEmail}`.
    /// - Remark: Generated from `#/paths//gmail/v1/users/{userId}/settings/sendAs/{sendAsEmail}/delete(gmail.users.settings.sendAs.delete)`.
    func gmail_users_settings_sendAs_delete(_ input: Operations.Gmail_users_settings_sendAs_delete.Input) async throws -> Operations.Gmail_users_settings_sendAs_delete.Output
    /// Lists S/MIME configs for the specified send-as alias.
    ///
    /// - Remark: HTTP `GET /gmail/v1/users/{userId}/settings/sendAs/{sendAsEmail}/smimeInfo`.
    /// - Remark: Generated from `#/paths//gmail/v1/users/{userId}/settings/sendAs/{sendAsEmail}/smimeInfo/get(gmail.users.settings.sendAs.smimeInfo.list)`.
    func gmail_users_settings_sendAs_smimeInfo_list(_ input: Operations.Gmail_users_settings_sendAs_smimeInfo_list.Input) async throws -> Operations.Gmail_users_settings_sendAs_smimeInfo_list.Output
    /// Insert (upload) the given S/MIME config for the specified send-as alias. Note that pkcs12 format is required for the key.
    ///
    /// - Remark: HTTP `POST /gmail/v1/users/{userId}/settings/sendAs/{sendAsEmail}/smimeInfo`.
    /// - Remark: Generated from `#/paths//gmail/v1/users/{userId}/settings/sendAs/{sendAsEmail}/smimeInfo/post(gmail.users.settings.sendAs.smimeInfo.insert)`.
    func gmail_users_settings_sendAs_smimeInfo_insert(_ input: Operations.Gmail_users_settings_sendAs_smimeInfo_insert.Input) async throws -> Operations.Gmail_users_settings_sendAs_smimeInfo_insert.Output
    /// Gets the specified S/MIME config for the specified send-as alias.
    ///
    /// - Remark: HTTP `GET /gmail/v1/users/{userId}/settings/sendAs/{sendAsEmail}/smimeInfo/{id}`.
    /// - Remark: Generated from `#/paths//gmail/v1/users/{userId}/settings/sendAs/{sendAsEmail}/smimeInfo/{id}/get(gmail.users.settings.sendAs.smimeInfo.get)`.
    func gmail_users_settings_sendAs_smimeInfo_get(_ input: Operations.Gmail_users_settings_sendAs_smimeInfo_get.Input) async throws -> Operations.Gmail_users_settings_sendAs_smimeInfo_get.Output
    /// Deletes the specified S/MIME config for the specified send-as alias.
    ///
    /// - Remark: HTTP `DELETE /gmail/v1/users/{userId}/settings/sendAs/{sendAsEmail}/smimeInfo/{id}`.
    /// - Remark: Generated from `#/paths//gmail/v1/users/{userId}/settings/sendAs/{sendAsEmail}/smimeInfo/{id}/delete(gmail.users.settings.sendAs.smimeInfo.delete)`.
    func gmail_users_settings_sendAs_smimeInfo_delete(_ input: Operations.Gmail_users_settings_sendAs_smimeInfo_delete.Input) async throws -> Operations.Gmail_users_settings_sendAs_smimeInfo_delete.Output
    /// Sets the default S/MIME config for the specified send-as alias.
    ///
    /// - Remark: HTTP `POST /gmail/v1/users/{userId}/settings/sendAs/{sendAsEmail}/smimeInfo/{id}/setDefault`.
    /// - Remark: Generated from `#/paths//gmail/v1/users/{userId}/settings/sendAs/{sendAsEmail}/smimeInfo/{id}/setDefault/post(gmail.users.settings.sendAs.smimeInfo.setDefault)`.
    func gmail_users_settings_sendAs_smimeInfo_setDefault(_ input: Operations.Gmail_users_settings_sendAs_smimeInfo_setDefault.Input) async throws -> Operations.Gmail_users_settings_sendAs_smimeInfo_setDefault.Output
    /// Sends a verification email to the specified send-as alias address. The verification status must be `pending`. This method is only available to service account clients that have been delegated domain-wide authority.
    ///
    /// - Remark: HTTP `POST /gmail/v1/users/{userId}/settings/sendAs/{sendAsEmail}/verify`.
    /// - Remark: Generated from `#/paths//gmail/v1/users/{userId}/settings/sendAs/{sendAsEmail}/verify/post(gmail.users.settings.sendAs.verify)`.
    func gmail_users_settings_sendAs_verify(_ input: Operations.Gmail_users_settings_sendAs_verify.Input) async throws -> Operations.Gmail_users_settings_sendAs_verify.Output
    /// Gets vacation responder settings.
    ///
    /// - Remark: HTTP `GET /gmail/v1/users/{userId}/settings/vacation`.
    /// - Remark: Generated from `#/paths//gmail/v1/users/{userId}/settings/vacation/get(gmail.users.settings.getVacation)`.
    func gmail_users_settings_getVacation(_ input: Operations.Gmail_users_settings_getVacation.Input) async throws -> Operations.Gmail_users_settings_getVacation.Output
    /// Updates vacation responder settings.
    ///
    /// - Remark: HTTP `PUT /gmail/v1/users/{userId}/settings/vacation`.
    /// - Remark: Generated from `#/paths//gmail/v1/users/{userId}/settings/vacation/put(gmail.users.settings.updateVacation)`.
    func gmail_users_settings_updateVacation(_ input: Operations.Gmail_users_settings_updateVacation.Input) async throws -> Operations.Gmail_users_settings_updateVacation.Output
    /// Stop receiving push notifications for the given user mailbox.
    ///
    /// - Remark: HTTP `POST /gmail/v1/users/{userId}/stop`.
    /// - Remark: Generated from `#/paths//gmail/v1/users/{userId}/stop/post(gmail.users.stop)`.
    func gmail_users_stop(_ input: Operations.Gmail_users_stop.Input) async throws -> Operations.Gmail_users_stop.Output
    /// Lists the threads in the user's mailbox.
    ///
    /// - Remark: HTTP `GET /gmail/v1/users/{userId}/threads`.
    /// - Remark: Generated from `#/paths//gmail/v1/users/{userId}/threads/get(gmail.users.threads.list)`.
    func gmail_users_threads_list(_ input: Operations.Gmail_users_threads_list.Input) async throws -> Operations.Gmail_users_threads_list.Output
    /// Gets the specified thread.
    ///
    /// - Remark: HTTP `GET /gmail/v1/users/{userId}/threads/{id}`.
    /// - Remark: Generated from `#/paths//gmail/v1/users/{userId}/threads/{id}/get(gmail.users.threads.get)`.
    func gmail_users_threads_get(_ input: Operations.Gmail_users_threads_get.Input) async throws -> Operations.Gmail_users_threads_get.Output
    /// Immediately and permanently deletes the specified thread. Any messages that belong to the thread are also deleted. This operation cannot be undone. Prefer `threads.trash` instead.
    ///
    /// - Remark: HTTP `DELETE /gmail/v1/users/{userId}/threads/{id}`.
    /// - Remark: Generated from `#/paths//gmail/v1/users/{userId}/threads/{id}/delete(gmail.users.threads.delete)`.
    func gmail_users_threads_delete(_ input: Operations.Gmail_users_threads_delete.Input) async throws -> Operations.Gmail_users_threads_delete.Output
    /// Modifies the labels applied to the thread. This applies to all messages in the thread.
    ///
    /// - Remark: HTTP `POST /gmail/v1/users/{userId}/threads/{id}/modify`.
    /// - Remark: Generated from `#/paths//gmail/v1/users/{userId}/threads/{id}/modify/post(gmail.users.threads.modify)`.
    func gmail_users_threads_modify(_ input: Operations.Gmail_users_threads_modify.Input) async throws -> Operations.Gmail_users_threads_modify.Output
    /// Moves the specified thread to the trash. Any messages that belong to the thread are also moved to the trash.
    ///
    /// - Remark: HTTP `POST /gmail/v1/users/{userId}/threads/{id}/trash`.
    /// - Remark: Generated from `#/paths//gmail/v1/users/{userId}/threads/{id}/trash/post(gmail.users.threads.trash)`.
    func gmail_users_threads_trash(_ input: Operations.Gmail_users_threads_trash.Input) async throws -> Operations.Gmail_users_threads_trash.Output
    /// Removes the specified thread from the trash. Any messages that belong to the thread are also removed from the trash.
    ///
    /// - Remark: HTTP `POST /gmail/v1/users/{userId}/threads/{id}/untrash`.
    /// - Remark: Generated from `#/paths//gmail/v1/users/{userId}/threads/{id}/untrash/post(gmail.users.threads.untrash)`.
    func gmail_users_threads_untrash(_ input: Operations.Gmail_users_threads_untrash.Input) async throws -> Operations.Gmail_users_threads_untrash.Output
    /// Set up or update a push notification watch on the given user mailbox.
    ///
    /// - Remark: HTTP `POST /gmail/v1/users/{userId}/watch`.
    /// - Remark: Generated from `#/paths//gmail/v1/users/{userId}/watch/post(gmail.users.watch)`.
    func gmail_users_watch(_ input: Operations.Gmail_users_watch.Input) async throws -> Operations.Gmail_users_watch.Output
}

/// Convenience overloads for operation inputs.
extension APIProtocol {
    /// Lists the drafts in the user's mailbox.
    ///
    /// - Remark: HTTP `GET /gmail/v1/users/{userId}/drafts`.
    /// - Remark: Generated from `#/paths//gmail/v1/users/{userId}/drafts/get(gmail.users.drafts.list)`.
    public func gmail_users_drafts_list(
        path: Operations.Gmail_users_drafts_list.Input.Path,
        query: Operations.Gmail_users_drafts_list.Input.Query = .init(),
        headers: Operations.Gmail_users_drafts_list.Input.Headers = .init()
    ) async throws -> Operations.Gmail_users_drafts_list.Output {
        try await gmail_users_drafts_list(Operations.Gmail_users_drafts_list.Input(
            path: path,
            query: query,
            headers: headers
        ))
    }
    /// Creates a new draft with the `DRAFT` label.
    ///
    /// - Remark: HTTP `POST /gmail/v1/users/{userId}/drafts`.
    /// - Remark: Generated from `#/paths//gmail/v1/users/{userId}/drafts/post(gmail.users.drafts.create)`.
    public func gmail_users_drafts_create(
        path: Operations.Gmail_users_drafts_create.Input.Path,
        query: Operations.Gmail_users_drafts_create.Input.Query = .init(),
        headers: Operations.Gmail_users_drafts_create.Input.Headers = .init(),
        body: Operations.Gmail_users_drafts_create.Input.Body? = nil
    ) async throws -> Operations.Gmail_users_drafts_create.Output {
        try await gmail_users_drafts_create(Operations.Gmail_users_drafts_create.Input(
            path: path,
            query: query,
            headers: headers,
            body: body
        ))
    }
    /// Sends the specified, existing draft to the recipients in the `To`, `Cc`, and `Bcc` headers.
    ///
    /// - Remark: HTTP `POST /gmail/v1/users/{userId}/drafts/send`.
    /// - Remark: Generated from `#/paths//gmail/v1/users/{userId}/drafts/send/post(gmail.users.drafts.send)`.
    public func gmail_users_drafts_send(
        path: Operations.Gmail_users_drafts_send.Input.Path,
        query: Operations.Gmail_users_drafts_send.Input.Query = .init(),
        headers: Operations.Gmail_users_drafts_send.Input.Headers = .init(),
        body: Operations.Gmail_users_drafts_send.Input.Body? = nil
    ) async throws -> Operations.Gmail_users_drafts_send.Output {
        try await gmail_users_drafts_send(Operations.Gmail_users_drafts_send.Input(
            path: path,
            query: query,
            headers: headers,
            body: body
        ))
    }
    /// Gets the specified draft.
    ///
    /// - Remark: HTTP `GET /gmail/v1/users/{userId}/drafts/{id}`.
    /// - Remark: Generated from `#/paths//gmail/v1/users/{userId}/drafts/{id}/get(gmail.users.drafts.get)`.
    public func gmail_users_drafts_get(
        path: Operations.Gmail_users_drafts_get.Input.Path,
        query: Operations.Gmail_users_drafts_get.Input.Query = .init(),
        headers: Operations.Gmail_users_drafts_get.Input.Headers = .init()
    ) async throws -> Operations.Gmail_users_drafts_get.Output {
        try await gmail_users_drafts_get(Operations.Gmail_users_drafts_get.Input(
            path: path,
            query: query,
            headers: headers
        ))
    }
    /// Replaces a draft's content.
    ///
    /// - Remark: HTTP `PUT /gmail/v1/users/{userId}/drafts/{id}`.
    /// - Remark: Generated from `#/paths//gmail/v1/users/{userId}/drafts/{id}/put(gmail.users.drafts.update)`.
    public func gmail_users_drafts_update(
        path: Operations.Gmail_users_drafts_update.Input.Path,
        query: Operations.Gmail_users_drafts_update.Input.Query = .init(),
        headers: Operations.Gmail_users_drafts_update.Input.Headers = .init(),
        body: Operations.Gmail_users_drafts_update.Input.Body? = nil
    ) async throws -> Operations.Gmail_users_drafts_update.Output {
        try await gmail_users_drafts_update(Operations.Gmail_users_drafts_update.Input(
            path: path,
            query: query,
            headers: headers,
            body: body
        ))
    }
    /// Immediately and permanently deletes the specified draft. Does not simply trash it.
    ///
    /// - Remark: HTTP `DELETE /gmail/v1/users/{userId}/drafts/{id}`.
    /// - Remark: Generated from `#/paths//gmail/v1/users/{userId}/drafts/{id}/delete(gmail.users.drafts.delete)`.
    public func gmail_users_drafts_delete(
        path: Operations.Gmail_users_drafts_delete.Input.Path,
        query: Operations.Gmail_users_drafts_delete.Input.Query = .init()
    ) async throws -> Operations.Gmail_users_drafts_delete.Output {
        try await gmail_users_drafts_delete(Operations.Gmail_users_drafts_delete.Input(
            path: path,
            query: query
        ))
    }
    /// Lists the history of all changes to the given mailbox. History results are returned in chronological order (increasing `historyId`).
    ///
    /// - Remark: HTTP `GET /gmail/v1/users/{userId}/history`.
    /// - Remark: Generated from `#/paths//gmail/v1/users/{userId}/history/get(gmail.users.history.list)`.
    public func gmail_users_history_list(
        path: Operations.Gmail_users_history_list.Input.Path,
        query: Operations.Gmail_users_history_list.Input.Query = .init(),
        headers: Operations.Gmail_users_history_list.Input.Headers = .init()
    ) async throws -> Operations.Gmail_users_history_list.Output {
        try await gmail_users_history_list(Operations.Gmail_users_history_list.Input(
            path: path,
            query: query,
            headers: headers
        ))
    }
    /// Lists all labels in the user's mailbox.
    ///
    /// - Remark: HTTP `GET /gmail/v1/users/{userId}/labels`.
    /// - Remark: Generated from `#/paths//gmail/v1/users/{userId}/labels/get(gmail.users.labels.list)`.
    public func gmail_users_labels_list(
        path: Operations.Gmail_users_labels_list.Input.Path,
        query: Operations.Gmail_users_labels_list.Input.Query = .init(),
        headers: Operations.Gmail_users_labels_list.Input.Headers = .init()
    ) async throws -> Operations.Gmail_users_labels_list.Output {
        try await gmail_users_labels_list(Operations.Gmail_users_labels_list.Input(
            path: path,
            query: query,
            headers: headers
        ))
    }
    /// Creates a new label.
    ///
    /// - Remark: HTTP `POST /gmail/v1/users/{userId}/labels`.
    /// - Remark: Generated from `#/paths//gmail/v1/users/{userId}/labels/post(gmail.users.labels.create)`.
    public func gmail_users_labels_create(
        path: Operations.Gmail_users_labels_create.Input.Path,
        query: Operations.Gmail_users_labels_create.Input.Query = .init(),
        headers: Operations.Gmail_users_labels_create.Input.Headers = .init(),
        body: Operations.Gmail_users_labels_create.Input.Body? = nil
    ) async throws -> Operations.Gmail_users_labels_create.Output {
        try await gmail_users_labels_create(Operations.Gmail_users_labels_create.Input(
            path: path,
            query: query,
            headers: headers,
            body: body
        ))
    }
    /// Gets the specified label.
    ///
    /// - Remark: HTTP `GET /gmail/v1/users/{userId}/labels/{id}`.
    /// - Remark: Generated from `#/paths//gmail/v1/users/{userId}/labels/{id}/get(gmail.users.labels.get)`.
    public func gmail_users_labels_get(
        path: Operations.Gmail_users_labels_get.Input.Path,
        query: Operations.Gmail_users_labels_get.Input.Query = .init(),
        headers: Operations.Gmail_users_labels_get.Input.Headers = .init()
    ) async throws -> Operations.Gmail_users_labels_get.Output {
        try await gmail_users_labels_get(Operations.Gmail_users_labels_get.Input(
            path: path,
            query: query,
            headers: headers
        ))
    }
    /// Patch the specified label.
    ///
    /// - Remark: HTTP `PATCH /gmail/v1/users/{userId}/labels/{id}`.
    /// - Remark: Generated from `#/paths//gmail/v1/users/{userId}/labels/{id}/patch(gmail.users.labels.patch)`.
    public func gmail_users_labels_patch(
        path: Operations.Gmail_users_labels_patch.Input.Path,
        query: Operations.Gmail_users_labels_patch.Input.Query = .init(),
        headers: Operations.Gmail_users_labels_patch.Input.Headers = .init(),
        body: Operations.Gmail_users_labels_patch.Input.Body? = nil
    ) async throws -> Operations.Gmail_users_labels_patch.Output {
        try await gmail_users_labels_patch(Operations.Gmail_users_labels_patch.Input(
            path: path,
            query: query,
            headers: headers,
            body: body
        ))
    }
    /// Updates the specified label.
    ///
    /// - Remark: HTTP `PUT /gmail/v1/users/{userId}/labels/{id}`.
    /// - Remark: Generated from `#/paths//gmail/v1/users/{userId}/labels/{id}/put(gmail.users.labels.update)`.
    public func gmail_users_labels_update(
        path: Operations.Gmail_users_labels_update.Input.Path,
        query: Operations.Gmail_users_labels_update.Input.Query = .init(),
        headers: Operations.Gmail_users_labels_update.Input.Headers = .init(),
        body: Operations.Gmail_users_labels_update.Input.Body? = nil
    ) async throws -> Operations.Gmail_users_labels_update.Output {
        try await gmail_users_labels_update(Operations.Gmail_users_labels_update.Input(
            path: path,
            query: query,
            headers: headers,
            body: body
        ))
    }
    /// Immediately and permanently deletes the specified label and removes it from any messages and threads that it is applied to.
    ///
    /// - Remark: HTTP `DELETE /gmail/v1/users/{userId}/labels/{id}`.
    /// - Remark: Generated from `#/paths//gmail/v1/users/{userId}/labels/{id}/delete(gmail.users.labels.delete)`.
    public func gmail_users_labels_delete(
        path: Operations.Gmail_users_labels_delete.Input.Path,
        query: Operations.Gmail_users_labels_delete.Input.Query = .init()
    ) async throws -> Operations.Gmail_users_labels_delete.Output {
        try await gmail_users_labels_delete(Operations.Gmail_users_labels_delete.Input(
            path: path,
            query: query
        ))
    }
    /// Lists the messages in the user's mailbox.
    ///
    /// - Remark: HTTP `GET /gmail/v1/users/{userId}/messages`.
    /// - Remark: Generated from `#/paths//gmail/v1/users/{userId}/messages/get(gmail.users.messages.list)`.
    public func gmail_users_messages_list(
        path: Operations.Gmail_users_messages_list.Input.Path,
        query: Operations.Gmail_users_messages_list.Input.Query = .init(),
        headers: Operations.Gmail_users_messages_list.Input.Headers = .init()
    ) async throws -> Operations.Gmail_users_messages_list.Output {
        try await gmail_users_messages_list(Operations.Gmail_users_messages_list.Input(
            path: path,
            query: query,
            headers: headers
        ))
    }
    /// Directly inserts a message into only this user's mailbox similar to `IMAP APPEND`, bypassing most scanning and classification. Does not send a message.
    ///
    /// - Remark: HTTP `POST /gmail/v1/users/{userId}/messages`.
    /// - Remark: Generated from `#/paths//gmail/v1/users/{userId}/messages/post(gmail.users.messages.insert)`.
    public func gmail_users_messages_insert(
        path: Operations.Gmail_users_messages_insert.Input.Path,
        query: Operations.Gmail_users_messages_insert.Input.Query = .init(),
        headers: Operations.Gmail_users_messages_insert.Input.Headers = .init(),
        body: Operations.Gmail_users_messages_insert.Input.Body? = nil
    ) async throws -> Operations.Gmail_users_messages_insert.Output {
        try await gmail_users_messages_insert(Operations.Gmail_users_messages_insert.Input(
            path: path,
            query: query,
            headers: headers,
            body: body
        ))
    }
    /// Deletes many messages by message ID. Provides no guarantees that messages were not already deleted or even existed at all.
    ///
    /// - Remark: HTTP `POST /gmail/v1/users/{userId}/messages/batchDelete`.
    /// - Remark: Generated from `#/paths//gmail/v1/users/{userId}/messages/batchDelete/post(gmail.users.messages.batchDelete)`.
    public func gmail_users_messages_batchDelete(
        path: Operations.Gmail_users_messages_batchDelete.Input.Path,
        query: Operations.Gmail_users_messages_batchDelete.Input.Query = .init(),
        body: Operations.Gmail_users_messages_batchDelete.Input.Body? = nil
    ) async throws -> Operations.Gmail_users_messages_batchDelete.Output {
        try await gmail_users_messages_batchDelete(Operations.Gmail_users_messages_batchDelete.Input(
            path: path,
            query: query,
            body: body
        ))
    }
    /// Modifies the labels on the specified messages.
    ///
    /// - Remark: HTTP `POST /gmail/v1/users/{userId}/messages/batchModify`.
    /// - Remark: Generated from `#/paths//gmail/v1/users/{userId}/messages/batchModify/post(gmail.users.messages.batchModify)`.
    public func gmail_users_messages_batchModify(
        path: Operations.Gmail_users_messages_batchModify.Input.Path,
        query: Operations.Gmail_users_messages_batchModify.Input.Query = .init(),
        body: Operations.Gmail_users_messages_batchModify.Input.Body? = nil
    ) async throws -> Operations.Gmail_users_messages_batchModify.Output {
        try await gmail_users_messages_batchModify(Operations.Gmail_users_messages_batchModify.Input(
            path: path,
            query: query,
            body: body
        ))
    }
    /// Imports a message into only this user's mailbox, with standard email delivery scanning and classification similar to receiving via SMTP. This method doesn't perform SPF checks, so it might not work for some spam messages, such as those attempting to perform domain spoofing. This method does not send a message.
    ///
    /// - Remark: HTTP `POST /gmail/v1/users/{userId}/messages/import`.
    /// - Remark: Generated from `#/paths//gmail/v1/users/{userId}/messages/import/post(gmail.users.messages.import)`.
    public func gmail_users_messages_import(
        path: Operations.Gmail_users_messages_import.Input.Path,
        query: Operations.Gmail_users_messages_import.Input.Query = .init(),
        headers: Operations.Gmail_users_messages_import.Input.Headers = .init(),
        body: Operations.Gmail_users_messages_import.Input.Body? = nil
    ) async throws -> Operations.Gmail_users_messages_import.Output {
        try await gmail_users_messages_import(Operations.Gmail_users_messages_import.Input(
            path: path,
            query: query,
            headers: headers,
            body: body
        ))
    }
    /// Sends the specified message to the recipients in the `To`, `Cc`, and `Bcc` headers. For example usage, see [Sending email](https://developers.google.com/gmail/api/guides/sending).
    ///
    /// - Remark: HTTP `POST /gmail/v1/users/{userId}/messages/send`.
    /// - Remark: Generated from `#/paths//gmail/v1/users/{userId}/messages/send/post(gmail.users.messages.send)`.
    public func gmail_users_messages_send(
        path: Operations.Gmail_users_messages_send.Input.Path,
        query: Operations.Gmail_users_messages_send.Input.Query = .init(),
        headers: Operations.Gmail_users_messages_send.Input.Headers = .init(),
        body: Operations.Gmail_users_messages_send.Input.Body? = nil
    ) async throws -> Operations.Gmail_users_messages_send.Output {
        try await gmail_users_messages_send(Operations.Gmail_users_messages_send.Input(
            path: path,
            query: query,
            headers: headers,
            body: body
        ))
    }
    /// Gets the specified message.
    ///
    /// - Remark: HTTP `GET /gmail/v1/users/{userId}/messages/{id}`.
    /// - Remark: Generated from `#/paths//gmail/v1/users/{userId}/messages/{id}/get(gmail.users.messages.get)`.
    public func gmail_users_messages_get(
        path: Operations.Gmail_users_messages_get.Input.Path,
        query: Operations.Gmail_users_messages_get.Input.Query = .init(),
        headers: Operations.Gmail_users_messages_get.Input.Headers = .init()
    ) async throws -> Operations.Gmail_users_messages_get.Output {
        try await gmail_users_messages_get(Operations.Gmail_users_messages_get.Input(
            path: path,
            query: query,
            headers: headers
        ))
    }
    /// Immediately and permanently deletes the specified message. This operation cannot be undone. Prefer `messages.trash` instead.
    ///
    /// - Remark: HTTP `DELETE /gmail/v1/users/{userId}/messages/{id}`.
    /// - Remark: Generated from `#/paths//gmail/v1/users/{userId}/messages/{id}/delete(gmail.users.messages.delete)`.
    public func gmail_users_messages_delete(
        path: Operations.Gmail_users_messages_delete.Input.Path,
        query: Operations.Gmail_users_messages_delete.Input.Query = .init()
    ) async throws -> Operations.Gmail_users_messages_delete.Output {
        try await gmail_users_messages_delete(Operations.Gmail_users_messages_delete.Input(
            path: path,
            query: query
        ))
    }
    /// Modifies the labels on the specified message.
    ///
    /// - Remark: HTTP `POST /gmail/v1/users/{userId}/messages/{id}/modify`.
    /// - Remark: Generated from `#/paths//gmail/v1/users/{userId}/messages/{id}/modify/post(gmail.users.messages.modify)`.
    public func gmail_users_messages_modify(
        path: Operations.Gmail_users_messages_modify.Input.Path,
        query: Operations.Gmail_users_messages_modify.Input.Query = .init(),
        headers: Operations.Gmail_users_messages_modify.Input.Headers = .init(),
        body: Operations.Gmail_users_messages_modify.Input.Body? = nil
    ) async throws -> Operations.Gmail_users_messages_modify.Output {
        try await gmail_users_messages_modify(Operations.Gmail_users_messages_modify.Input(
            path: path,
            query: query,
            headers: headers,
            body: body
        ))
    }
    /// Moves the specified message to the trash.
    ///
    /// - Remark: HTTP `POST /gmail/v1/users/{userId}/messages/{id}/trash`.
    /// - Remark: Generated from `#/paths//gmail/v1/users/{userId}/messages/{id}/trash/post(gmail.users.messages.trash)`.
    public func gmail_users_messages_trash(
        path: Operations.Gmail_users_messages_trash.Input.Path,
        query: Operations.Gmail_users_messages_trash.Input.Query = .init(),
        headers: Operations.Gmail_users_messages_trash.Input.Headers = .init()
    ) async throws -> Operations.Gmail_users_messages_trash.Output {
        try await gmail_users_messages_trash(Operations.Gmail_users_messages_trash.Input(
            path: path,
            query: query,
            headers: headers
        ))
    }
    /// Removes the specified message from the trash.
    ///
    /// - Remark: HTTP `POST /gmail/v1/users/{userId}/messages/{id}/untrash`.
    /// - Remark: Generated from `#/paths//gmail/v1/users/{userId}/messages/{id}/untrash/post(gmail.users.messages.untrash)`.
    public func gmail_users_messages_untrash(
        path: Operations.Gmail_users_messages_untrash.Input.Path,
        query: Operations.Gmail_users_messages_untrash.Input.Query = .init(),
        headers: Operations.Gmail_users_messages_untrash.Input.Headers = .init()
    ) async throws -> Operations.Gmail_users_messages_untrash.Output {
        try await gmail_users_messages_untrash(Operations.Gmail_users_messages_untrash.Input(
            path: path,
            query: query,
            headers: headers
        ))
    }
    /// Gets the specified message attachment.
    ///
    /// - Remark: HTTP `GET /gmail/v1/users/{userId}/messages/{messageId}/attachments/{id}`.
    /// - Remark: Generated from `#/paths//gmail/v1/users/{userId}/messages/{messageId}/attachments/{id}/get(gmail.users.messages.attachments.get)`.
    public func gmail_users_messages_attachments_get(
        path: Operations.Gmail_users_messages_attachments_get.Input.Path,
        query: Operations.Gmail_users_messages_attachments_get.Input.Query = .init(),
        headers: Operations.Gmail_users_messages_attachments_get.Input.Headers = .init()
    ) async throws -> Operations.Gmail_users_messages_attachments_get.Output {
        try await gmail_users_messages_attachments_get(Operations.Gmail_users_messages_attachments_get.Input(
            path: path,
            query: query,
            headers: headers
        ))
    }
    /// Gets the current user's Gmail profile.
    ///
    /// - Remark: HTTP `GET /gmail/v1/users/{userId}/profile`.
    /// - Remark: Generated from `#/paths//gmail/v1/users/{userId}/profile/get(gmail.users.getProfile)`.
    public func gmail_users_getProfile(
        path: Operations.Gmail_users_getProfile.Input.Path,
        query: Operations.Gmail_users_getProfile.Input.Query = .init(),
        headers: Operations.Gmail_users_getProfile.Input.Headers = .init()
    ) async throws -> Operations.Gmail_users_getProfile.Output {
        try await gmail_users_getProfile(Operations.Gmail_users_getProfile.Input(
            path: path,
            query: query,
            headers: headers
        ))
    }
    /// Gets the auto-forwarding setting for the specified account.
    ///
    /// - Remark: HTTP `GET /gmail/v1/users/{userId}/settings/autoForwarding`.
    /// - Remark: Generated from `#/paths//gmail/v1/users/{userId}/settings/autoForwarding/get(gmail.users.settings.getAutoForwarding)`.
    public func gmail_users_settings_getAutoForwarding(
        path: Operations.Gmail_users_settings_getAutoForwarding.Input.Path,
        query: Operations.Gmail_users_settings_getAutoForwarding.Input.Query = .init(),
        headers: Operations.Gmail_users_settings_getAutoForwarding.Input.Headers = .init()
    ) async throws -> Operations.Gmail_users_settings_getAutoForwarding.Output {
        try await gmail_users_settings_getAutoForwarding(Operations.Gmail_users_settings_getAutoForwarding.Input(
            path: path,
            query: query,
            headers: headers
        ))
    }
    /// Updates the auto-forwarding setting for the specified account. A verified forwarding address must be specified when auto-forwarding is enabled. This method is only available to service account clients that have been delegated domain-wide authority.
    ///
    /// - Remark: HTTP `PUT /gmail/v1/users/{userId}/settings/autoForwarding`.
    /// - Remark: Generated from `#/paths//gmail/v1/users/{userId}/settings/autoForwarding/put(gmail.users.settings.updateAutoForwarding)`.
    public func gmail_users_settings_updateAutoForwarding(
        path: Operations.Gmail_users_settings_updateAutoForwarding.Input.Path,
        query: Operations.Gmail_users_settings_updateAutoForwarding.Input.Query = .init(),
        headers: Operations.Gmail_users_settings_updateAutoForwarding.Input.Headers = .init(),
        body: Operations.Gmail_users_settings_updateAutoForwarding.Input.Body? = nil
    ) async throws -> Operations.Gmail_users_settings_updateAutoForwarding.Output {
        try await gmail_users_settings_updateAutoForwarding(Operations.Gmail_users_settings_updateAutoForwarding.Input(
            path: path,
            query: query,
            headers: headers,
            body: body
        ))
    }
    /// Lists the client-side encrypted identities for an authenticated user.
    ///
    /// - Remark: HTTP `GET /gmail/v1/users/{userId}/settings/cse/identities`.
    /// - Remark: Generated from `#/paths//gmail/v1/users/{userId}/settings/cse/identities/get(gmail.users.settings.cse.identities.list)`.
    public func gmail_users_settings_cse_identities_list(
        path: Operations.Gmail_users_settings_cse_identities_list.Input.Path,
        query: Operations.Gmail_users_settings_cse_identities_list.Input.Query = .init(),
        headers: Operations.Gmail_users_settings_cse_identities_list.Input.Headers = .init()
    ) async throws -> Operations.Gmail_users_settings_cse_identities_list.Output {
        try await gmail_users_settings_cse_identities_list(Operations.Gmail_users_settings_cse_identities_list.Input(
            path: path,
            query: query,
            headers: headers
        ))
    }
    /// Creates and configures a client-side encryption identity that's authorized to send mail from the user account. Google publishes the S/MIME certificate to a shared domain-wide directory so that people within a Google Workspace organization can encrypt and send mail to the identity.
    ///
    /// - Remark: HTTP `POST /gmail/v1/users/{userId}/settings/cse/identities`.
    /// - Remark: Generated from `#/paths//gmail/v1/users/{userId}/settings/cse/identities/post(gmail.users.settings.cse.identities.create)`.
    public func gmail_users_settings_cse_identities_create(
        path: Operations.Gmail_users_settings_cse_identities_create.Input.Path,
        query: Operations.Gmail_users_settings_cse_identities_create.Input.Query = .init(),
        headers: Operations.Gmail_users_settings_cse_identities_create.Input.Headers = .init(),
        body: Operations.Gmail_users_settings_cse_identities_create.Input.Body? = nil
    ) async throws -> Operations.Gmail_users_settings_cse_identities_create.Output {
        try await gmail_users_settings_cse_identities_create(Operations.Gmail_users_settings_cse_identities_create.Input(
            path: path,
            query: query,
            headers: headers,
            body: body
        ))
    }
    /// Retrieves a client-side encryption identity configuration.
    ///
    /// - Remark: HTTP `GET /gmail/v1/users/{userId}/settings/cse/identities/{cseEmailAddress}`.
    /// - Remark: Generated from `#/paths//gmail/v1/users/{userId}/settings/cse/identities/{cseEmailAddress}/get(gmail.users.settings.cse.identities.get)`.
    public func gmail_users_settings_cse_identities_get(
        path: Operations.Gmail_users_settings_cse_identities_get.Input.Path,
        query: Operations.Gmail_users_settings_cse_identities_get.Input.Query = .init(),
        headers: Operations.Gmail_users_settings_cse_identities_get.Input.Headers = .init()
    ) async throws -> Operations.Gmail_users_settings_cse_identities_get.Output {
        try await gmail_users_settings_cse_identities_get(Operations.Gmail_users_settings_cse_identities_get.Input(
            path: path,
            query: query,
            headers: headers
        ))
    }
    /// Deletes a client-side encryption identity. The authenticated user can no longer use the identity to send encrypted messages. You cannot restore the identity after you delete it. Instead, use the CreateCseIdentity method to create another identity with the same configuration.
    ///
    /// - Remark: HTTP `DELETE /gmail/v1/users/{userId}/settings/cse/identities/{cseEmailAddress}`.
    /// - Remark: Generated from `#/paths//gmail/v1/users/{userId}/settings/cse/identities/{cseEmailAddress}/delete(gmail.users.settings.cse.identities.delete)`.
    public func gmail_users_settings_cse_identities_delete(
        path: Operations.Gmail_users_settings_cse_identities_delete.Input.Path,
        query: Operations.Gmail_users_settings_cse_identities_delete.Input.Query = .init()
    ) async throws -> Operations.Gmail_users_settings_cse_identities_delete.Output {
        try await gmail_users_settings_cse_identities_delete(Operations.Gmail_users_settings_cse_identities_delete.Input(
            path: path,
            query: query
        ))
    }
    /// Associates a different key pair with an existing client-side encryption identity. The updated key pair must validate against Google's [S/MIME certificate profiles](https://support.google.com/a/answer/7300887).
    ///
    /// - Remark: HTTP `PATCH /gmail/v1/users/{userId}/settings/cse/identities/{emailAddress}`.
    /// - Remark: Generated from `#/paths//gmail/v1/users/{userId}/settings/cse/identities/{emailAddress}/patch(gmail.users.settings.cse.identities.patch)`.
    public func gmail_users_settings_cse_identities_patch(
        path: Operations.Gmail_users_settings_cse_identities_patch.Input.Path,
        query: Operations.Gmail_users_settings_cse_identities_patch.Input.Query = .init(),
        headers: Operations.Gmail_users_settings_cse_identities_patch.Input.Headers = .init(),
        body: Operations.Gmail_users_settings_cse_identities_patch.Input.Body? = nil
    ) async throws -> Operations.Gmail_users_settings_cse_identities_patch.Output {
        try await gmail_users_settings_cse_identities_patch(Operations.Gmail_users_settings_cse_identities_patch.Input(
            path: path,
            query: query,
            headers: headers,
            body: body
        ))
    }
    /// Lists client-side encryption key pairs for an authenticated user.
    ///
    /// - Remark: HTTP `GET /gmail/v1/users/{userId}/settings/cse/keypairs`.
    /// - Remark: Generated from `#/paths//gmail/v1/users/{userId}/settings/cse/keypairs/get(gmail.users.settings.cse.keypairs.list)`.
    public func gmail_users_settings_cse_keypairs_list(
        path: Operations.Gmail_users_settings_cse_keypairs_list.Input.Path,
        query: Operations.Gmail_users_settings_cse_keypairs_list.Input.Query = .init(),
        headers: Operations.Gmail_users_settings_cse_keypairs_list.Input.Headers = .init()
    ) async throws -> Operations.Gmail_users_settings_cse_keypairs_list.Output {
        try await gmail_users_settings_cse_keypairs_list(Operations.Gmail_users_settings_cse_keypairs_list.Input(
            path: path,
            query: query,
            headers: headers
        ))
    }
    /// Creates and uploads a client-side encryption S/MIME public key certificate chain and private key metadata for the authenticated user.
    ///
    /// - Remark: HTTP `POST /gmail/v1/users/{userId}/settings/cse/keypairs`.
    /// - Remark: Generated from `#/paths//gmail/v1/users/{userId}/settings/cse/keypairs/post(gmail.users.settings.cse.keypairs.create)`.
    public func gmail_users_settings_cse_keypairs_create(
        path: Operations.Gmail_users_settings_cse_keypairs_create.Input.Path,
        query: Operations.Gmail_users_settings_cse_keypairs_create.Input.Query = .init(),
        headers: Operations.Gmail_users_settings_cse_keypairs_create.Input.Headers = .init(),
        body: Operations.Gmail_users_settings_cse_keypairs_create.Input.Body? = nil
    ) async throws -> Operations.Gmail_users_settings_cse_keypairs_create.Output {
        try await gmail_users_settings_cse_keypairs_create(Operations.Gmail_users_settings_cse_keypairs_create.Input(
            path: path,
            query: query,
            headers: headers,
            body: body
        ))
    }
    /// Retrieves an existing client-side encryption key pair.
    ///
    /// - Remark: HTTP `GET /gmail/v1/users/{userId}/settings/cse/keypairs/{keyPairId}`.
    /// - Remark: Generated from `#/paths//gmail/v1/users/{userId}/settings/cse/keypairs/{keyPairId}/get(gmail.users.settings.cse.keypairs.get)`.
    public func gmail_users_settings_cse_keypairs_get(
        path: Operations.Gmail_users_settings_cse_keypairs_get.Input.Path,
        query: Operations.Gmail_users_settings_cse_keypairs_get.Input.Query = .init(),
        headers: Operations.Gmail_users_settings_cse_keypairs_get.Input.Headers = .init()
    ) async throws -> Operations.Gmail_users_settings_cse_keypairs_get.Output {
        try await gmail_users_settings_cse_keypairs_get(Operations.Gmail_users_settings_cse_keypairs_get.Input(
            path: path,
            query: query,
            headers: headers
        ))
    }
    /// Turns off a client-side encryption key pair. The authenticated user can no longer use the key pair to decrypt incoming CSE message texts or sign outgoing CSE mail. To regain access, use the EnableCseKeyPair to turn on the key pair. After 30 days, you can permanently delete the key pair by using the ObliterateCseKeyPair method.
    ///
    /// - Remark: HTTP `POST /gmail/v1/users/{userId}/settings/cse/keypairs/{keyPairId}:disable`.
    /// - Remark: Generated from `#/paths//gmail/v1/users/{userId}/settings/cse/keypairs/{keyPairId}:disable/post(gmail.users.settings.cse.keypairs.disable)`.
    public func gmail_users_settings_cse_keypairs_disable(
        path: Operations.Gmail_users_settings_cse_keypairs_disable.Input.Path,
        query: Operations.Gmail_users_settings_cse_keypairs_disable.Input.Query = .init(),
        headers: Operations.Gmail_users_settings_cse_keypairs_disable.Input.Headers = .init(),
        body: Operations.Gmail_users_settings_cse_keypairs_disable.Input.Body? = nil
    ) async throws -> Operations.Gmail_users_settings_cse_keypairs_disable.Output {
        try await gmail_users_settings_cse_keypairs_disable(Operations.Gmail_users_settings_cse_keypairs_disable.Input(
            path: path,
            query: query,
            headers: headers,
            body: body
        ))
    }
    /// Turns on a client-side encryption key pair that was turned off. The key pair becomes active again for any associated client-side encryption identities.
    ///
    /// - Remark: HTTP `POST /gmail/v1/users/{userId}/settings/cse/keypairs/{keyPairId}:enable`.
    /// - Remark: Generated from `#/paths//gmail/v1/users/{userId}/settings/cse/keypairs/{keyPairId}:enable/post(gmail.users.settings.cse.keypairs.enable)`.
    public func gmail_users_settings_cse_keypairs_enable(
        path: Operations.Gmail_users_settings_cse_keypairs_enable.Input.Path,
        query: Operations.Gmail_users_settings_cse_keypairs_enable.Input.Query = .init(),
        headers: Operations.Gmail_users_settings_cse_keypairs_enable.Input.Headers = .init(),
        body: Operations.Gmail_users_settings_cse_keypairs_enable.Input.Body? = nil
    ) async throws -> Operations.Gmail_users_settings_cse_keypairs_enable.Output {
        try await gmail_users_settings_cse_keypairs_enable(Operations.Gmail_users_settings_cse_keypairs_enable.Input(
            path: path,
            query: query,
            headers: headers,
            body: body
        ))
    }
    /// Deletes a client-side encryption key pair permanently and immediately. You can only permanently delete key pairs that have been turned off for more than 30 days. To turn off a key pair, use the DisableCseKeyPair method. Gmail can't restore or decrypt any messages that were encrypted by an obliterated key. Authenticated users and Google Workspace administrators lose access to reading the encrypted messages.
    ///
    /// - Remark: HTTP `POST /gmail/v1/users/{userId}/settings/cse/keypairs/{keyPairId}:obliterate`.
    /// - Remark: Generated from `#/paths//gmail/v1/users/{userId}/settings/cse/keypairs/{keyPairId}:obliterate/post(gmail.users.settings.cse.keypairs.obliterate)`.
    public func gmail_users_settings_cse_keypairs_obliterate(
        path: Operations.Gmail_users_settings_cse_keypairs_obliterate.Input.Path,
        query: Operations.Gmail_users_settings_cse_keypairs_obliterate.Input.Query = .init(),
        body: Operations.Gmail_users_settings_cse_keypairs_obliterate.Input.Body? = nil
    ) async throws -> Operations.Gmail_users_settings_cse_keypairs_obliterate.Output {
        try await gmail_users_settings_cse_keypairs_obliterate(Operations.Gmail_users_settings_cse_keypairs_obliterate.Input(
            path: path,
            query: query,
            body: body
        ))
    }
    /// Lists the delegates for the specified account. This method is only available to service account clients that have been delegated domain-wide authority.
    ///
    /// - Remark: HTTP `GET /gmail/v1/users/{userId}/settings/delegates`.
    /// - Remark: Generated from `#/paths//gmail/v1/users/{userId}/settings/delegates/get(gmail.users.settings.delegates.list)`.
    public func gmail_users_settings_delegates_list(
        path: Operations.Gmail_users_settings_delegates_list.Input.Path,
        query: Operations.Gmail_users_settings_delegates_list.Input.Query = .init(),
        headers: Operations.Gmail_users_settings_delegates_list.Input.Headers = .init()
    ) async throws -> Operations.Gmail_users_settings_delegates_list.Output {
        try await gmail_users_settings_delegates_list(Operations.Gmail_users_settings_delegates_list.Input(
            path: path,
            query: query,
            headers: headers
        ))
    }
    /// Adds a delegate with its verification status set directly to `accepted`, without sending any verification email. The delegate user must be a member of the same Google Workspace organization as the delegator user. Gmail imposes limitations on the number of delegates and delegators each user in a Google Workspace organization can have. These limits depend on your organization, but in general each user can have up to 25 delegates and up to 10 delegators. Note that a delegate user must be referred to by their primary email address, and not an email alias. Also note that when a new delegate is created, there may be up to a one minute delay before the new delegate is available for use. This method is only available to service account clients that have been delegated domain-wide authority.
    ///
    /// - Remark: HTTP `POST /gmail/v1/users/{userId}/settings/delegates`.
    /// - Remark: Generated from `#/paths//gmail/v1/users/{userId}/settings/delegates/post(gmail.users.settings.delegates.create)`.
    public func gmail_users_settings_delegates_create(
        path: Operations.Gmail_users_settings_delegates_create.Input.Path,
        query: Operations.Gmail_users_settings_delegates_create.Input.Query = .init(),
        headers: Operations.Gmail_users_settings_delegates_create.Input.Headers = .init(),
        body: Operations.Gmail_users_settings_delegates_create.Input.Body? = nil
    ) async throws -> Operations.Gmail_users_settings_delegates_create.Output {
        try await gmail_users_settings_delegates_create(Operations.Gmail_users_settings_delegates_create.Input(
            path: path,
            query: query,
            headers: headers,
            body: body
        ))
    }
    /// Gets the specified delegate. Note that a delegate user must be referred to by their primary email address, and not an email alias. This method is only available to service account clients that have been delegated domain-wide authority.
    ///
    /// - Remark: HTTP `GET /gmail/v1/users/{userId}/settings/delegates/{delegateEmail}`.
    /// - Remark: Generated from `#/paths//gmail/v1/users/{userId}/settings/delegates/{delegateEmail}/get(gmail.users.settings.delegates.get)`.
    public func gmail_users_settings_delegates_get(
        path: Operations.Gmail_users_settings_delegates_get.Input.Path,
        query: Operations.Gmail_users_settings_delegates_get.Input.Query = .init(),
        headers: Operations.Gmail_users_settings_delegates_get.Input.Headers = .init()
    ) async throws -> Operations.Gmail_users_settings_delegates_get.Output {
        try await gmail_users_settings_delegates_get(Operations.Gmail_users_settings_delegates_get.Input(
            path: path,
            query: query,
            headers: headers
        ))
    }
    /// Removes the specified delegate (which can be of any verification status), and revokes any verification that may have been required for using it. Note that a delegate user must be referred to by their primary email address, and not an email alias. This method is only available to service account clients that have been delegated domain-wide authority.
    ///
    /// - Remark: HTTP `DELETE /gmail/v1/users/{userId}/settings/delegates/{delegateEmail}`.
    /// - Remark: Generated from `#/paths//gmail/v1/users/{userId}/settings/delegates/{delegateEmail}/delete(gmail.users.settings.delegates.delete)`.
    public func gmail_users_settings_delegates_delete(
        path: Operations.Gmail_users_settings_delegates_delete.Input.Path,
        query: Operations.Gmail_users_settings_delegates_delete.Input.Query = .init()
    ) async throws -> Operations.Gmail_users_settings_delegates_delete.Output {
        try await gmail_users_settings_delegates_delete(Operations.Gmail_users_settings_delegates_delete.Input(
            path: path,
            query: query
        ))
    }
    /// Lists the message filters of a Gmail user.
    ///
    /// - Remark: HTTP `GET /gmail/v1/users/{userId}/settings/filters`.
    /// - Remark: Generated from `#/paths//gmail/v1/users/{userId}/settings/filters/get(gmail.users.settings.filters.list)`.
    public func gmail_users_settings_filters_list(
        path: Operations.Gmail_users_settings_filters_list.Input.Path,
        query: Operations.Gmail_users_settings_filters_list.Input.Query = .init(),
        headers: Operations.Gmail_users_settings_filters_list.Input.Headers = .init()
    ) async throws -> Operations.Gmail_users_settings_filters_list.Output {
        try await gmail_users_settings_filters_list(Operations.Gmail_users_settings_filters_list.Input(
            path: path,
            query: query,
            headers: headers
        ))
    }
    /// Creates a filter. Note: you can only create a maximum of 1,000 filters.
    ///
    /// - Remark: HTTP `POST /gmail/v1/users/{userId}/settings/filters`.
    /// - Remark: Generated from `#/paths//gmail/v1/users/{userId}/settings/filters/post(gmail.users.settings.filters.create)`.
    public func gmail_users_settings_filters_create(
        path: Operations.Gmail_users_settings_filters_create.Input.Path,
        query: Operations.Gmail_users_settings_filters_create.Input.Query = .init(),
        headers: Operations.Gmail_users_settings_filters_create.Input.Headers = .init(),
        body: Operations.Gmail_users_settings_filters_create.Input.Body? = nil
    ) async throws -> Operations.Gmail_users_settings_filters_create.Output {
        try await gmail_users_settings_filters_create(Operations.Gmail_users_settings_filters_create.Input(
            path: path,
            query: query,
            headers: headers,
            body: body
        ))
    }
    /// Gets a filter.
    ///
    /// - Remark: HTTP `GET /gmail/v1/users/{userId}/settings/filters/{id}`.
    /// - Remark: Generated from `#/paths//gmail/v1/users/{userId}/settings/filters/{id}/get(gmail.users.settings.filters.get)`.
    public func gmail_users_settings_filters_get(
        path: Operations.Gmail_users_settings_filters_get.Input.Path,
        query: Operations.Gmail_users_settings_filters_get.Input.Query = .init(),
        headers: Operations.Gmail_users_settings_filters_get.Input.Headers = .init()
    ) async throws -> Operations.Gmail_users_settings_filters_get.Output {
        try await gmail_users_settings_filters_get(Operations.Gmail_users_settings_filters_get.Input(
            path: path,
            query: query,
            headers: headers
        ))
    }
    /// Immediately and permanently deletes the specified filter.
    ///
    /// - Remark: HTTP `DELETE /gmail/v1/users/{userId}/settings/filters/{id}`.
    /// - Remark: Generated from `#/paths//gmail/v1/users/{userId}/settings/filters/{id}/delete(gmail.users.settings.filters.delete)`.
    public func gmail_users_settings_filters_delete(
        path: Operations.Gmail_users_settings_filters_delete.Input.Path,
        query: Operations.Gmail_users_settings_filters_delete.Input.Query = .init()
    ) async throws -> Operations.Gmail_users_settings_filters_delete.Output {
        try await gmail_users_settings_filters_delete(Operations.Gmail_users_settings_filters_delete.Input(
            path: path,
            query: query
        ))
    }
    /// Lists the forwarding addresses for the specified account.
    ///
    /// - Remark: HTTP `GET /gmail/v1/users/{userId}/settings/forwardingAddresses`.
    /// - Remark: Generated from `#/paths//gmail/v1/users/{userId}/settings/forwardingAddresses/get(gmail.users.settings.forwardingAddresses.list)`.
    public func gmail_users_settings_forwardingAddresses_list(
        path: Operations.Gmail_users_settings_forwardingAddresses_list.Input.Path,
        query: Operations.Gmail_users_settings_forwardingAddresses_list.Input.Query = .init(),
        headers: Operations.Gmail_users_settings_forwardingAddresses_list.Input.Headers = .init()
    ) async throws -> Operations.Gmail_users_settings_forwardingAddresses_list.Output {
        try await gmail_users_settings_forwardingAddresses_list(Operations.Gmail_users_settings_forwardingAddresses_list.Input(
            path: path,
            query: query,
            headers: headers
        ))
    }
    /// Creates a forwarding address. If ownership verification is required, a message will be sent to the recipient and the resource's verification status will be set to `pending`; otherwise, the resource will be created with verification status set to `accepted`. This method is only available to service account clients that have been delegated domain-wide authority.
    ///
    /// - Remark: HTTP `POST /gmail/v1/users/{userId}/settings/forwardingAddresses`.
    /// - Remark: Generated from `#/paths//gmail/v1/users/{userId}/settings/forwardingAddresses/post(gmail.users.settings.forwardingAddresses.create)`.
    public func gmail_users_settings_forwardingAddresses_create(
        path: Operations.Gmail_users_settings_forwardingAddresses_create.Input.Path,
        query: Operations.Gmail_users_settings_forwardingAddresses_create.Input.Query = .init(),
        headers: Operations.Gmail_users_settings_forwardingAddresses_create.Input.Headers = .init(),
        body: Operations.Gmail_users_settings_forwardingAddresses_create.Input.Body? = nil
    ) async throws -> Operations.Gmail_users_settings_forwardingAddresses_create.Output {
        try await gmail_users_settings_forwardingAddresses_create(Operations.Gmail_users_settings_forwardingAddresses_create.Input(
            path: path,
            query: query,
            headers: headers,
            body: body
        ))
    }
    /// Gets the specified forwarding address.
    ///
    /// - Remark: HTTP `GET /gmail/v1/users/{userId}/settings/forwardingAddresses/{forwardingEmail}`.
    /// - Remark: Generated from `#/paths//gmail/v1/users/{userId}/settings/forwardingAddresses/{forwardingEmail}/get(gmail.users.settings.forwardingAddresses.get)`.
    public func gmail_users_settings_forwardingAddresses_get(
        path: Operations.Gmail_users_settings_forwardingAddresses_get.Input.Path,
        query: Operations.Gmail_users_settings_forwardingAddresses_get.Input.Query = .init(),
        headers: Operations.Gmail_users_settings_forwardingAddresses_get.Input.Headers = .init()
    ) async throws -> Operations.Gmail_users_settings_forwardingAddresses_get.Output {
        try await gmail_users_settings_forwardingAddresses_get(Operations.Gmail_users_settings_forwardingAddresses_get.Input(
            path: path,
            query: query,
            headers: headers
        ))
    }
    /// Deletes the specified forwarding address and revokes any verification that may have been required. This method is only available to service account clients that have been delegated domain-wide authority.
    ///
    /// - Remark: HTTP `DELETE /gmail/v1/users/{userId}/settings/forwardingAddresses/{forwardingEmail}`.
    /// - Remark: Generated from `#/paths//gmail/v1/users/{userId}/settings/forwardingAddresses/{forwardingEmail}/delete(gmail.users.settings.forwardingAddresses.delete)`.
    public func gmail_users_settings_forwardingAddresses_delete(
        path: Operations.Gmail_users_settings_forwardingAddresses_delete.Input.Path,
        query: Operations.Gmail_users_settings_forwardingAddresses_delete.Input.Query = .init()
    ) async throws -> Operations.Gmail_users_settings_forwardingAddresses_delete.Output {
        try await gmail_users_settings_forwardingAddresses_delete(Operations.Gmail_users_settings_forwardingAddresses_delete.Input(
            path: path,
            query: query
        ))
    }
    /// Gets IMAP settings.
    ///
    /// - Remark: HTTP `GET /gmail/v1/users/{userId}/settings/imap`.
    /// - Remark: Generated from `#/paths//gmail/v1/users/{userId}/settings/imap/get(gmail.users.settings.getImap)`.
    public func gmail_users_settings_getImap(
        path: Operations.Gmail_users_settings_getImap.Input.Path,
        query: Operations.Gmail_users_settings_getImap.Input.Query = .init(),
        headers: Operations.Gmail_users_settings_getImap.Input.Headers = .init()
    ) async throws -> Operations.Gmail_users_settings_getImap.Output {
        try await gmail_users_settings_getImap(Operations.Gmail_users_settings_getImap.Input(
            path: path,
            query: query,
            headers: headers
        ))
    }
    /// Updates IMAP settings.
    ///
    /// - Remark: HTTP `PUT /gmail/v1/users/{userId}/settings/imap`.
    /// - Remark: Generated from `#/paths//gmail/v1/users/{userId}/settings/imap/put(gmail.users.settings.updateImap)`.
    public func gmail_users_settings_updateImap(
        path: Operations.Gmail_users_settings_updateImap.Input.Path,
        query: Operations.Gmail_users_settings_updateImap.Input.Query = .init(),
        headers: Operations.Gmail_users_settings_updateImap.Input.Headers = .init(),
        body: Operations.Gmail_users_settings_updateImap.Input.Body? = nil
    ) async throws -> Operations.Gmail_users_settings_updateImap.Output {
        try await gmail_users_settings_updateImap(Operations.Gmail_users_settings_updateImap.Input(
            path: path,
            query: query,
            headers: headers,
            body: body
        ))
    }
    /// Gets language settings.
    ///
    /// - Remark: HTTP `GET /gmail/v1/users/{userId}/settings/language`.
    /// - Remark: Generated from `#/paths//gmail/v1/users/{userId}/settings/language/get(gmail.users.settings.getLanguage)`.
    public func gmail_users_settings_getLanguage(
        path: Operations.Gmail_users_settings_getLanguage.Input.Path,
        query: Operations.Gmail_users_settings_getLanguage.Input.Query = .init(),
        headers: Operations.Gmail_users_settings_getLanguage.Input.Headers = .init()
    ) async throws -> Operations.Gmail_users_settings_getLanguage.Output {
        try await gmail_users_settings_getLanguage(Operations.Gmail_users_settings_getLanguage.Input(
            path: path,
            query: query,
            headers: headers
        ))
    }
    /// Updates language settings. If successful, the return object contains the `displayLanguage` that was saved for the user, which may differ from the value passed into the request. This is because the requested `displayLanguage` may not be directly supported by Gmail but have a close variant that is, and so the variant may be chosen and saved instead.
    ///
    /// - Remark: HTTP `PUT /gmail/v1/users/{userId}/settings/language`.
    /// - Remark: Generated from `#/paths//gmail/v1/users/{userId}/settings/language/put(gmail.users.settings.updateLanguage)`.
    public func gmail_users_settings_updateLanguage(
        path: Operations.Gmail_users_settings_updateLanguage.Input.Path,
        query: Operations.Gmail_users_settings_updateLanguage.Input.Query = .init(),
        headers: Operations.Gmail_users_settings_updateLanguage.Input.Headers = .init(),
        body: Operations.Gmail_users_settings_updateLanguage.Input.Body? = nil
    ) async throws -> Operations.Gmail_users_settings_updateLanguage.Output {
        try await gmail_users_settings_updateLanguage(Operations.Gmail_users_settings_updateLanguage.Input(
            path: path,
            query: query,
            headers: headers,
            body: body
        ))
    }
    /// Gets POP settings.
    ///
    /// - Remark: HTTP `GET /gmail/v1/users/{userId}/settings/pop`.
    /// - Remark: Generated from `#/paths//gmail/v1/users/{userId}/settings/pop/get(gmail.users.settings.getPop)`.
    public func gmail_users_settings_getPop(
        path: Operations.Gmail_users_settings_getPop.Input.Path,
        query: Operations.Gmail_users_settings_getPop.Input.Query = .init(),
        headers: Operations.Gmail_users_settings_getPop.Input.Headers = .init()
    ) async throws -> Operations.Gmail_users_settings_getPop.Output {
        try await gmail_users_settings_getPop(Operations.Gmail_users_settings_getPop.Input(
            path: path,
            query: query,
            headers: headers
        ))
    }
    /// Updates POP settings.
    ///
    /// - Remark: HTTP `PUT /gmail/v1/users/{userId}/settings/pop`.
    /// - Remark: Generated from `#/paths//gmail/v1/users/{userId}/settings/pop/put(gmail.users.settings.updatePop)`.
    public func gmail_users_settings_updatePop(
        path: Operations.Gmail_users_settings_updatePop.Input.Path,
        query: Operations.Gmail_users_settings_updatePop.Input.Query = .init(),
        headers: Operations.Gmail_users_settings_updatePop.Input.Headers = .init(),
        body: Operations.Gmail_users_settings_updatePop.Input.Body? = nil
    ) async throws -> Operations.Gmail_users_settings_updatePop.Output {
        try await gmail_users_settings_updatePop(Operations.Gmail_users_settings_updatePop.Input(
            path: path,
            query: query,
            headers: headers,
            body: body
        ))
    }
    /// Lists the send-as aliases for the specified account. The result includes the primary send-as address associated with the account as well as any custom "from" aliases.
    ///
    /// - Remark: HTTP `GET /gmail/v1/users/{userId}/settings/sendAs`.
    /// - Remark: Generated from `#/paths//gmail/v1/users/{userId}/settings/sendAs/get(gmail.users.settings.sendAs.list)`.
    public func gmail_users_settings_sendAs_list(
        path: Operations.Gmail_users_settings_sendAs_list.Input.Path,
        query: Operations.Gmail_users_settings_sendAs_list.Input.Query = .init(),
        headers: Operations.Gmail_users_settings_sendAs_list.Input.Headers = .init()
    ) async throws -> Operations.Gmail_users_settings_sendAs_list.Output {
        try await gmail_users_settings_sendAs_list(Operations.Gmail_users_settings_sendAs_list.Input(
            path: path,
            query: query,
            headers: headers
        ))
    }
    /// Creates a custom "from" send-as alias. If an SMTP MSA is specified, Gmail will attempt to connect to the SMTP service to validate the configuration before creating the alias. If ownership verification is required for the alias, a message will be sent to the email address and the resource's verification status will be set to `pending`; otherwise, the resource will be created with verification status set to `accepted`. If a signature is provided, Gmail will sanitize the HTML before saving it with the alias. This method is only available to service account clients that have been delegated domain-wide authority.
    ///
    /// - Remark: HTTP `POST /gmail/v1/users/{userId}/settings/sendAs`.
    /// - Remark: Generated from `#/paths//gmail/v1/users/{userId}/settings/sendAs/post(gmail.users.settings.sendAs.create)`.
    public func gmail_users_settings_sendAs_create(
        path: Operations.Gmail_users_settings_sendAs_create.Input.Path,
        query: Operations.Gmail_users_settings_sendAs_create.Input.Query = .init(),
        headers: Operations.Gmail_users_settings_sendAs_create.Input.Headers = .init(),
        body: Operations.Gmail_users_settings_sendAs_create.Input.Body? = nil
    ) async throws -> Operations.Gmail_users_settings_sendAs_create.Output {
        try await gmail_users_settings_sendAs_create(Operations.Gmail_users_settings_sendAs_create.Input(
            path: path,
            query: query,
            headers: headers,
            body: body
        ))
    }
    /// Gets the specified send-as alias. Fails with an HTTP 404 error if the specified address is not a member of the collection.
    ///
    /// - Remark: HTTP `GET /gmail/v1/users/{userId}/settings/sendAs/{sendAsEmail}`.
    /// - Remark: Generated from `#/paths//gmail/v1/users/{userId}/settings/sendAs/{sendAsEmail}/get(gmail.users.settings.sendAs.get)`.
    public func gmail_users_settings_sendAs_get(
        path: Operations.Gmail_users_settings_sendAs_get.Input.Path,
        query: Operations.Gmail_users_settings_sendAs_get.Input.Query = .init(),
        headers: Operations.Gmail_users_settings_sendAs_get.Input.Headers = .init()
    ) async throws -> Operations.Gmail_users_settings_sendAs_get.Output {
        try await gmail_users_settings_sendAs_get(Operations.Gmail_users_settings_sendAs_get.Input(
            path: path,
            query: query,
            headers: headers
        ))
    }
    /// Patch the specified send-as alias.
    ///
    /// - Remark: HTTP `PATCH /gmail/v1/users/{userId}/settings/sendAs/{sendAsEmail}`.
    /// - Remark: Generated from `#/paths//gmail/v1/users/{userId}/settings/sendAs/{sendAsEmail}/patch(gmail.users.settings.sendAs.patch)`.
    public func gmail_users_settings_sendAs_patch(
        path: Operations.Gmail_users_settings_sendAs_patch.Input.Path,
        query: Operations.Gmail_users_settings_sendAs_patch.Input.Query = .init(),
        headers: Operations.Gmail_users_settings_sendAs_patch.Input.Headers = .init(),
        body: Operations.Gmail_users_settings_sendAs_patch.Input.Body? = nil
    ) async throws -> Operations.Gmail_users_settings_sendAs_patch.Output {
        try await gmail_users_settings_sendAs_patch(Operations.Gmail_users_settings_sendAs_patch.Input(
            path: path,
            query: query,
            headers: headers,
            body: body
        ))
    }
    /// Updates a send-as alias. If a signature is provided, Gmail will sanitize the HTML before saving it with the alias. Addresses other than the primary address for the account can only be updated by service account clients that have been delegated domain-wide authority.
    ///
    /// - Remark: HTTP `PUT /gmail/v1/users/{userId}/settings/sendAs/{sendAsEmail}`.
    /// - Remark: Generated from `#/paths//gmail/v1/users/{userId}/settings/sendAs/{sendAsEmail}/put(gmail.users.settings.sendAs.update)`.
    public func gmail_users_settings_sendAs_update(
        path: Operations.Gmail_users_settings_sendAs_update.Input.Path,
        query: Operations.Gmail_users_settings_sendAs_update.Input.Query = .init(),
        headers: Operations.Gmail_users_settings_sendAs_update.Input.Headers = .init(),
        body: Operations.Gmail_users_settings_sendAs_update.Input.Body? = nil
    ) async throws -> Operations.Gmail_users_settings_sendAs_update.Output {
        try await gmail_users_settings_sendAs_update(Operations.Gmail_users_settings_sendAs_update.Input(
            path: path,
            query: query,
            headers: headers,
            body: body
        ))
    }
    /// Deletes the specified send-as alias. Revokes any verification that may have been required for using it. This method is only available to service account clients that have been delegated domain-wide authority.
    ///
    /// - Remark: HTTP `DELETE /gmail/v1/users/{userId}/settings/sendAs/{sendAsEmail}`.
    /// - Remark: Generated from `#/paths//gmail/v1/users/{userId}/settings/sendAs/{sendAsEmail}/delete(gmail.users.settings.sendAs.delete)`.
    public func gmail_users_settings_sendAs_delete(
        path: Operations.Gmail_users_settings_sendAs_delete.Input.Path,
        query: Operations.Gmail_users_settings_sendAs_delete.Input.Query = .init()
    ) async throws -> Operations.Gmail_users_settings_sendAs_delete.Output {
        try await gmail_users_settings_sendAs_delete(Operations.Gmail_users_settings_sendAs_delete.Input(
            path: path,
            query: query
        ))
    }
    /// Lists S/MIME configs for the specified send-as alias.
    ///
    /// - Remark: HTTP `GET /gmail/v1/users/{userId}/settings/sendAs/{sendAsEmail}/smimeInfo`.
    /// - Remark: Generated from `#/paths//gmail/v1/users/{userId}/settings/sendAs/{sendAsEmail}/smimeInfo/get(gmail.users.settings.sendAs.smimeInfo.list)`.
    public func gmail_users_settings_sendAs_smimeInfo_list(
        path: Operations.Gmail_users_settings_sendAs_smimeInfo_list.Input.Path,
        query: Operations.Gmail_users_settings_sendAs_smimeInfo_list.Input.Query = .init(),
        headers: Operations.Gmail_users_settings_sendAs_smimeInfo_list.Input.Headers = .init()
    ) async throws -> Operations.Gmail_users_settings_sendAs_smimeInfo_list.Output {
        try await gmail_users_settings_sendAs_smimeInfo_list(Operations.Gmail_users_settings_sendAs_smimeInfo_list.Input(
            path: path,
            query: query,
            headers: headers
        ))
    }
    /// Insert (upload) the given S/MIME config for the specified send-as alias. Note that pkcs12 format is required for the key.
    ///
    /// - Remark: HTTP `POST /gmail/v1/users/{userId}/settings/sendAs/{sendAsEmail}/smimeInfo`.
    /// - Remark: Generated from `#/paths//gmail/v1/users/{userId}/settings/sendAs/{sendAsEmail}/smimeInfo/post(gmail.users.settings.sendAs.smimeInfo.insert)`.
    public func gmail_users_settings_sendAs_smimeInfo_insert(
        path: Operations.Gmail_users_settings_sendAs_smimeInfo_insert.Input.Path,
        query: Operations.Gmail_users_settings_sendAs_smimeInfo_insert.Input.Query = .init(),
        headers: Operations.Gmail_users_settings_sendAs_smimeInfo_insert.Input.Headers = .init(),
        body: Operations.Gmail_users_settings_sendAs_smimeInfo_insert.Input.Body? = nil
    ) async throws -> Operations.Gmail_users_settings_sendAs_smimeInfo_insert.Output {
        try await gmail_users_settings_sendAs_smimeInfo_insert(Operations.Gmail_users_settings_sendAs_smimeInfo_insert.Input(
            path: path,
            query: query,
            headers: headers,
            body: body
        ))
    }
    /// Gets the specified S/MIME config for the specified send-as alias.
    ///
    /// - Remark: HTTP `GET /gmail/v1/users/{userId}/settings/sendAs/{sendAsEmail}/smimeInfo/{id}`.
    /// - Remark: Generated from `#/paths//gmail/v1/users/{userId}/settings/sendAs/{sendAsEmail}/smimeInfo/{id}/get(gmail.users.settings.sendAs.smimeInfo.get)`.
    public func gmail_users_settings_sendAs_smimeInfo_get(
        path: Operations.Gmail_users_settings_sendAs_smimeInfo_get.Input.Path,
        query: Operations.Gmail_users_settings_sendAs_smimeInfo_get.Input.Query = .init(),
        headers: Operations.Gmail_users_settings_sendAs_smimeInfo_get.Input.Headers = .init()
    ) async throws -> Operations.Gmail_users_settings_sendAs_smimeInfo_get.Output {
        try await gmail_users_settings_sendAs_smimeInfo_get(Operations.Gmail_users_settings_sendAs_smimeInfo_get.Input(
            path: path,
            query: query,
            headers: headers
        ))
    }
    /// Deletes the specified S/MIME config for the specified send-as alias.
    ///
    /// - Remark: HTTP `DELETE /gmail/v1/users/{userId}/settings/sendAs/{sendAsEmail}/smimeInfo/{id}`.
    /// - Remark: Generated from `#/paths//gmail/v1/users/{userId}/settings/sendAs/{sendAsEmail}/smimeInfo/{id}/delete(gmail.users.settings.sendAs.smimeInfo.delete)`.
    public func gmail_users_settings_sendAs_smimeInfo_delete(
        path: Operations.Gmail_users_settings_sendAs_smimeInfo_delete.Input.Path,
        query: Operations.Gmail_users_settings_sendAs_smimeInfo_delete.Input.Query = .init()
    ) async throws -> Operations.Gmail_users_settings_sendAs_smimeInfo_delete.Output {
        try await gmail_users_settings_sendAs_smimeInfo_delete(Operations.Gmail_users_settings_sendAs_smimeInfo_delete.Input(
            path: path,
            query: query
        ))
    }
    /// Sets the default S/MIME config for the specified send-as alias.
    ///
    /// - Remark: HTTP `POST /gmail/v1/users/{userId}/settings/sendAs/{sendAsEmail}/smimeInfo/{id}/setDefault`.
    /// - Remark: Generated from `#/paths//gmail/v1/users/{userId}/settings/sendAs/{sendAsEmail}/smimeInfo/{id}/setDefault/post(gmail.users.settings.sendAs.smimeInfo.setDefault)`.
    public func gmail_users_settings_sendAs_smimeInfo_setDefault(
        path: Operations.Gmail_users_settings_sendAs_smimeInfo_setDefault.Input.Path,
        query: Operations.Gmail_users_settings_sendAs_smimeInfo_setDefault.Input.Query = .init()
    ) async throws -> Operations.Gmail_users_settings_sendAs_smimeInfo_setDefault.Output {
        try await gmail_users_settings_sendAs_smimeInfo_setDefault(Operations.Gmail_users_settings_sendAs_smimeInfo_setDefault.Input(
            path: path,
            query: query
        ))
    }
    /// Sends a verification email to the specified send-as alias address. The verification status must be `pending`. This method is only available to service account clients that have been delegated domain-wide authority.
    ///
    /// - Remark: HTTP `POST /gmail/v1/users/{userId}/settings/sendAs/{sendAsEmail}/verify`.
    /// - Remark: Generated from `#/paths//gmail/v1/users/{userId}/settings/sendAs/{sendAsEmail}/verify/post(gmail.users.settings.sendAs.verify)`.
    public func gmail_users_settings_sendAs_verify(
        path: Operations.Gmail_users_settings_sendAs_verify.Input.Path,
        query: Operations.Gmail_users_settings_sendAs_verify.Input.Query = .init()
    ) async throws -> Operations.Gmail_users_settings_sendAs_verify.Output {
        try await gmail_users_settings_sendAs_verify(Operations.Gmail_users_settings_sendAs_verify.Input(
            path: path,
            query: query
        ))
    }
    /// Gets vacation responder settings.
    ///
    /// - Remark: HTTP `GET /gmail/v1/users/{userId}/settings/vacation`.
    /// - Remark: Generated from `#/paths//gmail/v1/users/{userId}/settings/vacation/get(gmail.users.settings.getVacation)`.
    public func gmail_users_settings_getVacation(
        path: Operations.Gmail_users_settings_getVacation.Input.Path,
        query: Operations.Gmail_users_settings_getVacation.Input.Query = .init(),
        headers: Operations.Gmail_users_settings_getVacation.Input.Headers = .init()
    ) async throws -> Operations.Gmail_users_settings_getVacation.Output {
        try await gmail_users_settings_getVacation(Operations.Gmail_users_settings_getVacation.Input(
            path: path,
            query: query,
            headers: headers
        ))
    }
    /// Updates vacation responder settings.
    ///
    /// - Remark: HTTP `PUT /gmail/v1/users/{userId}/settings/vacation`.
    /// - Remark: Generated from `#/paths//gmail/v1/users/{userId}/settings/vacation/put(gmail.users.settings.updateVacation)`.
    public func gmail_users_settings_updateVacation(
        path: Operations.Gmail_users_settings_updateVacation.Input.Path,
        query: Operations.Gmail_users_settings_updateVacation.Input.Query = .init(),
        headers: Operations.Gmail_users_settings_updateVacation.Input.Headers = .init(),
        body: Operations.Gmail_users_settings_updateVacation.Input.Body? = nil
    ) async throws -> Operations.Gmail_users_settings_updateVacation.Output {
        try await gmail_users_settings_updateVacation(Operations.Gmail_users_settings_updateVacation.Input(
            path: path,
            query: query,
            headers: headers,
            body: body
        ))
    }
    /// Stop receiving push notifications for the given user mailbox.
    ///
    /// - Remark: HTTP `POST /gmail/v1/users/{userId}/stop`.
    /// - Remark: Generated from `#/paths//gmail/v1/users/{userId}/stop/post(gmail.users.stop)`.
    public func gmail_users_stop(
        path: Operations.Gmail_users_stop.Input.Path,
        query: Operations.Gmail_users_stop.Input.Query = .init()
    ) async throws -> Operations.Gmail_users_stop.Output {
        try await gmail_users_stop(Operations.Gmail_users_stop.Input(
            path: path,
            query: query
        ))
    }
    /// Lists the threads in the user's mailbox.
    ///
    /// - Remark: HTTP `GET /gmail/v1/users/{userId}/threads`.
    /// - Remark: Generated from `#/paths//gmail/v1/users/{userId}/threads/get(gmail.users.threads.list)`.
    public func gmail_users_threads_list(
        path: Operations.Gmail_users_threads_list.Input.Path,
        query: Operations.Gmail_users_threads_list.Input.Query = .init(),
        headers: Operations.Gmail_users_threads_list.Input.Headers = .init()
    ) async throws -> Operations.Gmail_users_threads_list.Output {
        try await gmail_users_threads_list(Operations.Gmail_users_threads_list.Input(
            path: path,
            query: query,
            headers: headers
        ))
    }
    /// Gets the specified thread.
    ///
    /// - Remark: HTTP `GET /gmail/v1/users/{userId}/threads/{id}`.
    /// - Remark: Generated from `#/paths//gmail/v1/users/{userId}/threads/{id}/get(gmail.users.threads.get)`.
    public func gmail_users_threads_get(
        path: Operations.Gmail_users_threads_get.Input.Path,
        query: Operations.Gmail_users_threads_get.Input.Query = .init(),
        headers: Operations.Gmail_users_threads_get.Input.Headers = .init()
    ) async throws -> Operations.Gmail_users_threads_get.Output {
        try await gmail_users_threads_get(Operations.Gmail_users_threads_get.Input(
            path: path,
            query: query,
            headers: headers
        ))
    }
    /// Immediately and permanently deletes the specified thread. Any messages that belong to the thread are also deleted. This operation cannot be undone. Prefer `threads.trash` instead.
    ///
    /// - Remark: HTTP `DELETE /gmail/v1/users/{userId}/threads/{id}`.
    /// - Remark: Generated from `#/paths//gmail/v1/users/{userId}/threads/{id}/delete(gmail.users.threads.delete)`.
    public func gmail_users_threads_delete(
        path: Operations.Gmail_users_threads_delete.Input.Path,
        query: Operations.Gmail_users_threads_delete.Input.Query = .init()
    ) async throws -> Operations.Gmail_users_threads_delete.Output {
        try await gmail_users_threads_delete(Operations.Gmail_users_threads_delete.Input(
            path: path,
            query: query
        ))
    }
    /// Modifies the labels applied to the thread. This applies to all messages in the thread.
    ///
    /// - Remark: HTTP `POST /gmail/v1/users/{userId}/threads/{id}/modify`.
    /// - Remark: Generated from `#/paths//gmail/v1/users/{userId}/threads/{id}/modify/post(gmail.users.threads.modify)`.
    public func gmail_users_threads_modify(
        path: Operations.Gmail_users_threads_modify.Input.Path,
        query: Operations.Gmail_users_threads_modify.Input.Query = .init(),
        headers: Operations.Gmail_users_threads_modify.Input.Headers = .init(),
        body: Operations.Gmail_users_threads_modify.Input.Body? = nil
    ) async throws -> Operations.Gmail_users_threads_modify.Output {
        try await gmail_users_threads_modify(Operations.Gmail_users_threads_modify.Input(
            path: path,
            query: query,
            headers: headers,
            body: body
        ))
    }
    /// Moves the specified thread to the trash. Any messages that belong to the thread are also moved to the trash.
    ///
    /// - Remark: HTTP `POST /gmail/v1/users/{userId}/threads/{id}/trash`.
    /// - Remark: Generated from `#/paths//gmail/v1/users/{userId}/threads/{id}/trash/post(gmail.users.threads.trash)`.
    public func gmail_users_threads_trash(
        path: Operations.Gmail_users_threads_trash.Input.Path,
        query: Operations.Gmail_users_threads_trash.Input.Query = .init(),
        headers: Operations.Gmail_users_threads_trash.Input.Headers = .init()
    ) async throws -> Operations.Gmail_users_threads_trash.Output {
        try await gmail_users_threads_trash(Operations.Gmail_users_threads_trash.Input(
            path: path,
            query: query,
            headers: headers
        ))
    }
    /// Removes the specified thread from the trash. Any messages that belong to the thread are also removed from the trash.
    ///
    /// - Remark: HTTP `POST /gmail/v1/users/{userId}/threads/{id}/untrash`.
    /// - Remark: Generated from `#/paths//gmail/v1/users/{userId}/threads/{id}/untrash/post(gmail.users.threads.untrash)`.
    public func gmail_users_threads_untrash(
        path: Operations.Gmail_users_threads_untrash.Input.Path,
        query: Operations.Gmail_users_threads_untrash.Input.Query = .init(),
        headers: Operations.Gmail_users_threads_untrash.Input.Headers = .init()
    ) async throws -> Operations.Gmail_users_threads_untrash.Output {
        try await gmail_users_threads_untrash(Operations.Gmail_users_threads_untrash.Input(
            path: path,
            query: query,
            headers: headers
        ))
    }
    /// Set up or update a push notification watch on the given user mailbox.
    ///
    /// - Remark: HTTP `POST /gmail/v1/users/{userId}/watch`.
    /// - Remark: Generated from `#/paths//gmail/v1/users/{userId}/watch/post(gmail.users.watch)`.
    public func gmail_users_watch(
        path: Operations.Gmail_users_watch.Input.Path,
        query: Operations.Gmail_users_watch.Input.Query = .init(),
        headers: Operations.Gmail_users_watch.Input.Headers = .init(),
        body: Operations.Gmail_users_watch.Input.Body? = nil
    ) async throws -> Operations.Gmail_users_watch.Output {
        try await gmail_users_watch(Operations.Gmail_users_watch.Input(
            path: path,
            query: query,
            headers: headers,
            body: body
        ))
    }
}

/// Server URLs defined in the OpenAPI document.
public enum Servers {
    public enum Server1 {
        public static func url() throws -> Foundation.URL {
            try Foundation.URL(
                validatingOpenAPIServerURL: "https://gmail.googleapis.com/",
                variables: []
            )
        }
    }
    @available(*, deprecated, renamed: "Servers.Server1.url")
    public static func server1() throws -> Foundation.URL {
        try Foundation.URL(
            validatingOpenAPIServerURL: "https://gmail.googleapis.com/",
            variables: []
        )
    }
}

/// Types generated from the components section of the OpenAPI document.
public enum Components {
    /// Types generated from the `#/components/schemas` section of the OpenAPI document.
    public enum Schemas {
        /// Auto-forwarding settings for an account.
        ///
        /// - Remark: Generated from `#/components/schemas/AutoForwarding`.
        public struct AutoForwarding: Codable, Hashable, Sendable {
            /// The state that a message should be left in after it has been forwarded.
            ///
            /// - Remark: Generated from `#/components/schemas/AutoForwarding/disposition`.
            @frozen public enum DispositionPayload: String, Codable, Hashable, Sendable, CaseIterable {
                case dispositionUnspecified = "dispositionUnspecified"
                case leaveInInbox = "leaveInInbox"
                case archive = "archive"
                case trash = "trash"
                case markRead = "markRead"
            }
            /// The state that a message should be left in after it has been forwarded.
            ///
            /// - Remark: Generated from `#/components/schemas/AutoForwarding/disposition`.
            public var disposition: Components.Schemas.AutoForwarding.DispositionPayload?
            /// Email address to which all incoming messages are forwarded. This email address must be a verified member of the forwarding addresses.
            ///
            /// - Remark: Generated from `#/components/schemas/AutoForwarding/emailAddress`.
            public var emailAddress: Swift.String?
            /// Whether all incoming mail is automatically forwarded to another address.
            ///
            /// - Remark: Generated from `#/components/schemas/AutoForwarding/enabled`.
            public var enabled: Swift.Bool?
            /// Creates a new `AutoForwarding`.
            ///
            /// - Parameters:
            ///   - disposition: The state that a message should be left in after it has been forwarded.
            ///   - emailAddress: Email address to which all incoming messages are forwarded. This email address must be a verified member of the forwarding addresses.
            ///   - enabled: Whether all incoming mail is automatically forwarded to another address.
            public init(
                disposition: Components.Schemas.AutoForwarding.DispositionPayload? = nil,
                emailAddress: Swift.String? = nil,
                enabled: Swift.Bool? = nil
            ) {
                self.disposition = disposition
                self.emailAddress = emailAddress
                self.enabled = enabled
            }
            public enum CodingKeys: String, CodingKey {
                case disposition
                case emailAddress
                case enabled
            }
        }
        /// - Remark: Generated from `#/components/schemas/BatchDeleteMessagesRequest`.
        public struct BatchDeleteMessagesRequest: Codable, Hashable, Sendable {
            /// The IDs of the messages to delete.
            ///
            /// - Remark: Generated from `#/components/schemas/BatchDeleteMessagesRequest/ids`.
            public var ids: [Swift.String]?
            /// Creates a new `BatchDeleteMessagesRequest`.
            ///
            /// - Parameters:
            ///   - ids: The IDs of the messages to delete.
            public init(ids: [Swift.String]? = nil) {
                self.ids = ids
            }
            public enum CodingKeys: String, CodingKey {
                case ids
            }
        }
        /// - Remark: Generated from `#/components/schemas/BatchModifyMessagesRequest`.
        public struct BatchModifyMessagesRequest: Codable, Hashable, Sendable {
            /// A list of label IDs to add to messages.
            ///
            /// - Remark: Generated from `#/components/schemas/BatchModifyMessagesRequest/addLabelIds`.
            public var addLabelIds: [Swift.String]?
            /// The IDs of the messages to modify. There is a limit of 1000 ids per request.
            ///
            /// - Remark: Generated from `#/components/schemas/BatchModifyMessagesRequest/ids`.
            public var ids: [Swift.String]?
            /// A list of label IDs to remove from messages.
            ///
            /// - Remark: Generated from `#/components/schemas/BatchModifyMessagesRequest/removeLabelIds`.
            public var removeLabelIds: [Swift.String]?
            /// Creates a new `BatchModifyMessagesRequest`.
            ///
            /// - Parameters:
            ///   - addLabelIds: A list of label IDs to add to messages.
            ///   - ids: The IDs of the messages to modify. There is a limit of 1000 ids per request.
            ///   - removeLabelIds: A list of label IDs to remove from messages.
            public init(
                addLabelIds: [Swift.String]? = nil,
                ids: [Swift.String]? = nil,
                removeLabelIds: [Swift.String]? = nil
            ) {
                self.addLabelIds = addLabelIds
                self.ids = ids
                self.removeLabelIds = removeLabelIds
            }
            public enum CodingKeys: String, CodingKey {
                case addLabelIds
                case ids
                case removeLabelIds
            }
        }
        /// The client-side encryption (CSE) configuration for the email address of an authenticated user. Gmail uses CSE configurations to save drafts of client-side encrypted email messages, and to sign and send encrypted email messages.
        ///
        /// - Remark: Generated from `#/components/schemas/CseIdentity`.
        public struct CseIdentity: Codable, Hashable, Sendable {
            /// The email address for the sending identity. The email address must be the primary email address of the authenticated user.
            ///
            /// - Remark: Generated from `#/components/schemas/CseIdentity/emailAddress`.
            public var emailAddress: Swift.String?
            /// If a key pair is associated, the ID of the key pair, CseKeyPair.
            ///
            /// - Remark: Generated from `#/components/schemas/CseIdentity/primaryKeyPairId`.
            public var primaryKeyPairId: Swift.String?
            /// - Remark: Generated from `#/components/schemas/CseIdentity/signAndEncryptKeyPairs`.
            public var signAndEncryptKeyPairs: Components.Schemas.SignAndEncryptKeyPairs?
            /// Creates a new `CseIdentity`.
            ///
            /// - Parameters:
            ///   - emailAddress: The email address for the sending identity. The email address must be the primary email address of the authenticated user.
            ///   - primaryKeyPairId: If a key pair is associated, the ID of the key pair, CseKeyPair.
            ///   - signAndEncryptKeyPairs:
            public init(
                emailAddress: Swift.String? = nil,
                primaryKeyPairId: Swift.String? = nil,
                signAndEncryptKeyPairs: Components.Schemas.SignAndEncryptKeyPairs? = nil
            ) {
                self.emailAddress = emailAddress
                self.primaryKeyPairId = primaryKeyPairId
                self.signAndEncryptKeyPairs = signAndEncryptKeyPairs
            }
            public enum CodingKeys: String, CodingKey {
                case emailAddress
                case primaryKeyPairId
                case signAndEncryptKeyPairs
            }
        }
        /// A client-side encryption S/MIME key pair, which is comprised of a public key, its certificate chain, and metadata for its paired private key. Gmail uses the key pair to complete the following tasks: - Sign outgoing client-side encrypted messages. - Save and reopen drafts of client-side encrypted messages. - Save and reopen sent messages. - Decrypt incoming or archived S/MIME messages.
        ///
        /// - Remark: Generated from `#/components/schemas/CseKeyPair`.
        public struct CseKeyPair: Codable, Hashable, Sendable {
            /// Output only. If a key pair is set to `DISABLED`, the time that the key pair's state changed from `ENABLED` to `DISABLED`. This field is present only when the key pair is in state `DISABLED`.
            ///
            /// - Remark: Generated from `#/components/schemas/CseKeyPair/disableTime`.
            public var disableTime: Swift.String?
            /// Output only. The current state of the key pair.
            ///
            /// - Remark: Generated from `#/components/schemas/CseKeyPair/enablementState`.
            @frozen public enum EnablementStatePayload: String, Codable, Hashable, Sendable, CaseIterable {
                case stateUnspecified = "stateUnspecified"
                case enabled = "enabled"
                case disabled = "disabled"
            }
            /// Output only. The current state of the key pair.
            ///
            /// - Remark: Generated from `#/components/schemas/CseKeyPair/enablementState`.
            public var enablementState: Components.Schemas.CseKeyPair.EnablementStatePayload?
            /// Output only. The immutable ID for the client-side encryption S/MIME key pair.
            ///
            /// - Remark: Generated from `#/components/schemas/CseKeyPair/keyPairId`.
            public var keyPairId: Swift.String?
            /// Output only. The public key and its certificate chain, in [PEM](https://en.wikipedia.org/wiki/Privacy-Enhanced_Mail) format.
            ///
            /// - Remark: Generated from `#/components/schemas/CseKeyPair/pem`.
            public var pem: Swift.String?
            /// Input only. The public key and its certificate chain. The chain must be in [PKCS#7](https://en.wikipedia.org/wiki/PKCS_7) format and use PEM encoding and ASCII armor.
            ///
            /// - Remark: Generated from `#/components/schemas/CseKeyPair/pkcs7`.
            public var pkcs7: Swift.String?
            /// Metadata for instances of this key pair's private key.
            ///
            /// - Remark: Generated from `#/components/schemas/CseKeyPair/privateKeyMetadata`.
            public var privateKeyMetadata: [Components.Schemas.CsePrivateKeyMetadata]?
            /// Output only. The email address identities that are specified on the leaf certificate.
            ///
            /// - Remark: Generated from `#/components/schemas/CseKeyPair/subjectEmailAddresses`.
            public var subjectEmailAddresses: [Swift.String]?
            /// Creates a new `CseKeyPair`.
            ///
            /// - Parameters:
            ///   - disableTime: Output only. If a key pair is set to `DISABLED`, the time that the key pair's state changed from `ENABLED` to `DISABLED`. This field is present only when the key pair is in state `DISABLED`.
            ///   - enablementState: Output only. The current state of the key pair.
            ///   - keyPairId: Output only. The immutable ID for the client-side encryption S/MIME key pair.
            ///   - pem: Output only. The public key and its certificate chain, in [PEM](https://en.wikipedia.org/wiki/Privacy-Enhanced_Mail) format.
            ///   - pkcs7: Input only. The public key and its certificate chain. The chain must be in [PKCS#7](https://en.wikipedia.org/wiki/PKCS_7) format and use PEM encoding and ASCII armor.
            ///   - privateKeyMetadata: Metadata for instances of this key pair's private key.
            ///   - subjectEmailAddresses: Output only. The email address identities that are specified on the leaf certificate.
            public init(
                disableTime: Swift.String? = nil,
                enablementState: Components.Schemas.CseKeyPair.EnablementStatePayload? = nil,
                keyPairId: Swift.String? = nil,
                pem: Swift.String? = nil,
                pkcs7: Swift.String? = nil,
                privateKeyMetadata: [Components.Schemas.CsePrivateKeyMetadata]? = nil,
                subjectEmailAddresses: [Swift.String]? = nil
            ) {
                self.disableTime = disableTime
                self.enablementState = enablementState
                self.keyPairId = keyPairId
                self.pem = pem
                self.pkcs7 = pkcs7
                self.privateKeyMetadata = privateKeyMetadata
                self.subjectEmailAddresses = subjectEmailAddresses
            }
            public enum CodingKeys: String, CodingKey {
                case disableTime
                case enablementState
                case keyPairId
                case pem
                case pkcs7
                case privateKeyMetadata
                case subjectEmailAddresses
            }
        }
        /// Metadata for a private key instance.
        ///
        /// - Remark: Generated from `#/components/schemas/CsePrivateKeyMetadata`.
        public struct CsePrivateKeyMetadata: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/CsePrivateKeyMetadata/hardwareKeyMetadata`.
            public var hardwareKeyMetadata: Components.Schemas.HardwareKeyMetadata?
            /// - Remark: Generated from `#/components/schemas/CsePrivateKeyMetadata/kaclsKeyMetadata`.
            public var kaclsKeyMetadata: Components.Schemas.KaclsKeyMetadata?
            /// Output only. The immutable ID for the private key metadata instance.
            ///
            /// - Remark: Generated from `#/components/schemas/CsePrivateKeyMetadata/privateKeyMetadataId`.
            public var privateKeyMetadataId: Swift.String?
            /// Creates a new `CsePrivateKeyMetadata`.
            ///
            /// - Parameters:
            ///   - hardwareKeyMetadata:
            ///   - kaclsKeyMetadata:
            ///   - privateKeyMetadataId: Output only. The immutable ID for the private key metadata instance.
            public init(
                hardwareKeyMetadata: Components.Schemas.HardwareKeyMetadata? = nil,
                kaclsKeyMetadata: Components.Schemas.KaclsKeyMetadata? = nil,
                privateKeyMetadataId: Swift.String? = nil
            ) {
                self.hardwareKeyMetadata = hardwareKeyMetadata
                self.kaclsKeyMetadata = kaclsKeyMetadata
                self.privateKeyMetadataId = privateKeyMetadataId
            }
            public enum CodingKeys: String, CodingKey {
                case hardwareKeyMetadata
                case kaclsKeyMetadata
                case privateKeyMetadataId
            }
        }
        /// Settings for a delegate. Delegates can read, send, and delete messages, as well as view and add contacts, for the delegator's account. See "Set up mail delegation" for more information about delegates.
        ///
        /// - Remark: Generated from `#/components/schemas/Delegate`.
        public struct Delegate: Codable, Hashable, Sendable {
            /// The email address of the delegate.
            ///
            /// - Remark: Generated from `#/components/schemas/Delegate/delegateEmail`.
            public var delegateEmail: Swift.String?
            /// Indicates whether this address has been verified and can act as a delegate for the account. Read-only.
            ///
            /// - Remark: Generated from `#/components/schemas/Delegate/verificationStatus`.
            @frozen public enum VerificationStatusPayload: String, Codable, Hashable, Sendable, CaseIterable {
                case verificationStatusUnspecified = "verificationStatusUnspecified"
                case accepted = "accepted"
                case pending = "pending"
                case rejected = "rejected"
                case expired = "expired"
            }
            /// Indicates whether this address has been verified and can act as a delegate for the account. Read-only.
            ///
            /// - Remark: Generated from `#/components/schemas/Delegate/verificationStatus`.
            public var verificationStatus: Components.Schemas.Delegate.VerificationStatusPayload?
            /// Creates a new `Delegate`.
            ///
            /// - Parameters:
            ///   - delegateEmail: The email address of the delegate.
            ///   - verificationStatus: Indicates whether this address has been verified and can act as a delegate for the account. Read-only.
            public init(
                delegateEmail: Swift.String? = nil,
                verificationStatus: Components.Schemas.Delegate.VerificationStatusPayload? = nil
            ) {
                self.delegateEmail = delegateEmail
                self.verificationStatus = verificationStatus
            }
            public enum CodingKeys: String, CodingKey {
                case delegateEmail
                case verificationStatus
            }
        }
        /// Requests to turn off a client-side encryption key pair.
        ///
        /// - Remark: Generated from `#/components/schemas/DisableCseKeyPairRequest`.
        public typealias DisableCseKeyPairRequest = OpenAPIRuntime.OpenAPIObjectContainer
        /// A draft email in the user's mailbox.
        ///
        /// - Remark: Generated from `#/components/schemas/Draft`.
        public struct Draft: Codable, Hashable, Sendable {
            /// The immutable ID of the draft.
            ///
            /// - Remark: Generated from `#/components/schemas/Draft/id`.
            public var id: Swift.String?
            /// - Remark: Generated from `#/components/schemas/Draft/message`.
            public var message: Components.Schemas.Message?
            /// Creates a new `Draft`.
            ///
            /// - Parameters:
            ///   - id: The immutable ID of the draft.
            ///   - message:
            public init(
                id: Swift.String? = nil,
                message: Components.Schemas.Message? = nil
            ) {
                self.id = id
                self.message = message
            }
            public enum CodingKeys: String, CodingKey {
                case id
                case message
            }
        }
        /// Requests to turn on a client-side encryption key pair.
        ///
        /// - Remark: Generated from `#/components/schemas/EnableCseKeyPairRequest`.
        public typealias EnableCseKeyPairRequest = OpenAPIRuntime.OpenAPIObjectContainer
        /// Resource definition for Gmail filters. Filters apply to specific messages instead of an entire email thread.
        ///
        /// - Remark: Generated from `#/components/schemas/Filter`.
        public struct Filter: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/Filter/action`.
            public var action: Components.Schemas.FilterAction?
            /// - Remark: Generated from `#/components/schemas/Filter/criteria`.
            public var criteria: Components.Schemas.FilterCriteria?
            /// The server assigned ID of the filter.
            ///
            /// - Remark: Generated from `#/components/schemas/Filter/id`.
            public var id: Swift.String?
            /// Creates a new `Filter`.
            ///
            /// - Parameters:
            ///   - action:
            ///   - criteria:
            ///   - id: The server assigned ID of the filter.
            public init(
                action: Components.Schemas.FilterAction? = nil,
                criteria: Components.Schemas.FilterCriteria? = nil,
                id: Swift.String? = nil
            ) {
                self.action = action
                self.criteria = criteria
                self.id = id
            }
            public enum CodingKeys: String, CodingKey {
                case action
                case criteria
                case id
            }
        }
        /// A set of actions to perform on a message.
        ///
        /// - Remark: Generated from `#/components/schemas/FilterAction`.
        public struct FilterAction: Codable, Hashable, Sendable {
            /// List of labels to add to the message.
            ///
            /// - Remark: Generated from `#/components/schemas/FilterAction/addLabelIds`.
            public var addLabelIds: [Swift.String]?
            /// Email address that the message should be forwarded to.
            ///
            /// - Remark: Generated from `#/components/schemas/FilterAction/forward`.
            public var forward: Swift.String?
            /// List of labels to remove from the message.
            ///
            /// - Remark: Generated from `#/components/schemas/FilterAction/removeLabelIds`.
            public var removeLabelIds: [Swift.String]?
            /// Creates a new `FilterAction`.
            ///
            /// - Parameters:
            ///   - addLabelIds: List of labels to add to the message.
            ///   - forward: Email address that the message should be forwarded to.
            ///   - removeLabelIds: List of labels to remove from the message.
            public init(
                addLabelIds: [Swift.String]? = nil,
                forward: Swift.String? = nil,
                removeLabelIds: [Swift.String]? = nil
            ) {
                self.addLabelIds = addLabelIds
                self.forward = forward
                self.removeLabelIds = removeLabelIds
            }
            public enum CodingKeys: String, CodingKey {
                case addLabelIds
                case forward
                case removeLabelIds
            }
        }
        /// Message matching criteria.
        ///
        /// - Remark: Generated from `#/components/schemas/FilterCriteria`.
        public struct FilterCriteria: Codable, Hashable, Sendable {
            /// Whether the response should exclude chats.
            ///
            /// - Remark: Generated from `#/components/schemas/FilterCriteria/excludeChats`.
            public var excludeChats: Swift.Bool?
            /// The sender's display name or email address.
            ///
            /// - Remark: Generated from `#/components/schemas/FilterCriteria/from`.
            public var from: Swift.String?
            /// Whether the message has any attachment.
            ///
            /// - Remark: Generated from `#/components/schemas/FilterCriteria/hasAttachment`.
            public var hasAttachment: Swift.Bool?
            /// Only return messages not matching the specified query. Supports the same query format as the Gmail search box. For example, `"from:someuser@example.com rfc822msgid: is:unread"`.
            ///
            /// - Remark: Generated from `#/components/schemas/FilterCriteria/negatedQuery`.
            public var negatedQuery: Swift.String?
            /// Only return messages matching the specified query. Supports the same query format as the Gmail search box. For example, `"from:someuser@example.com rfc822msgid: is:unread"`.
            ///
            /// - Remark: Generated from `#/components/schemas/FilterCriteria/query`.
            public var query: Swift.String?
            /// The size of the entire RFC822 message in bytes, including all headers and attachments.
            ///
            /// - Remark: Generated from `#/components/schemas/FilterCriteria/size`.
            public var size: Swift.Int32?
            /// How the message size in bytes should be in relation to the size field.
            ///
            /// - Remark: Generated from `#/components/schemas/FilterCriteria/sizeComparison`.
            @frozen public enum SizeComparisonPayload: String, Codable, Hashable, Sendable, CaseIterable {
                case unspecified = "unspecified"
                case smaller = "smaller"
                case larger = "larger"
            }
            /// How the message size in bytes should be in relation to the size field.
            ///
            /// - Remark: Generated from `#/components/schemas/FilterCriteria/sizeComparison`.
            public var sizeComparison: Components.Schemas.FilterCriteria.SizeComparisonPayload?
            /// Case-insensitive phrase found in the message's subject. Trailing and leading whitespace are be trimmed and adjacent spaces are collapsed.
            ///
            /// - Remark: Generated from `#/components/schemas/FilterCriteria/subject`.
            public var subject: Swift.String?
            /// The recipient's display name or email address. Includes recipients in the "to", "cc", and "bcc" header fields. You can use simply the local part of the email address. For example, "example" and "example@" both match "example@gmail.com". This field is case-insensitive.
            ///
            /// - Remark: Generated from `#/components/schemas/FilterCriteria/to`.
            public var to: Swift.String?
            /// Creates a new `FilterCriteria`.
            ///
            /// - Parameters:
            ///   - excludeChats: Whether the response should exclude chats.
            ///   - from: The sender's display name or email address.
            ///   - hasAttachment: Whether the message has any attachment.
            ///   - negatedQuery: Only return messages not matching the specified query. Supports the same query format as the Gmail search box. For example, `"from:someuser@example.com rfc822msgid: is:unread"`.
            ///   - query: Only return messages matching the specified query. Supports the same query format as the Gmail search box. For example, `"from:someuser@example.com rfc822msgid: is:unread"`.
            ///   - size: The size of the entire RFC822 message in bytes, including all headers and attachments.
            ///   - sizeComparison: How the message size in bytes should be in relation to the size field.
            ///   - subject: Case-insensitive phrase found in the message's subject. Trailing and leading whitespace are be trimmed and adjacent spaces are collapsed.
            ///   - to: The recipient's display name or email address. Includes recipients in the "to", "cc", and "bcc" header fields. You can use simply the local part of the email address. For example, "example" and "example@" both match "example@gmail.com". This field is case-insensitive.
            public init(
                excludeChats: Swift.Bool? = nil,
                from: Swift.String? = nil,
                hasAttachment: Swift.Bool? = nil,
                negatedQuery: Swift.String? = nil,
                query: Swift.String? = nil,
                size: Swift.Int32? = nil,
                sizeComparison: Components.Schemas.FilterCriteria.SizeComparisonPayload? = nil,
                subject: Swift.String? = nil,
                to: Swift.String? = nil
            ) {
                self.excludeChats = excludeChats
                self.from = from
                self.hasAttachment = hasAttachment
                self.negatedQuery = negatedQuery
                self.query = query
                self.size = size
                self.sizeComparison = sizeComparison
                self.subject = subject
                self.to = to
            }
            public enum CodingKeys: String, CodingKey {
                case excludeChats
                case from
                case hasAttachment
                case negatedQuery
                case query
                case size
                case sizeComparison
                case subject
                case to
            }
        }
        /// Settings for a forwarding address.
        ///
        /// - Remark: Generated from `#/components/schemas/ForwardingAddress`.
        public struct ForwardingAddress: Codable, Hashable, Sendable {
            /// An email address to which messages can be forwarded.
            ///
            /// - Remark: Generated from `#/components/schemas/ForwardingAddress/forwardingEmail`.
            public var forwardingEmail: Swift.String?
            /// Indicates whether this address has been verified and is usable for forwarding. Read-only.
            ///
            /// - Remark: Generated from `#/components/schemas/ForwardingAddress/verificationStatus`.
            @frozen public enum VerificationStatusPayload: String, Codable, Hashable, Sendable, CaseIterable {
                case verificationStatusUnspecified = "verificationStatusUnspecified"
                case accepted = "accepted"
                case pending = "pending"
            }
            /// Indicates whether this address has been verified and is usable for forwarding. Read-only.
            ///
            /// - Remark: Generated from `#/components/schemas/ForwardingAddress/verificationStatus`.
            public var verificationStatus: Components.Schemas.ForwardingAddress.VerificationStatusPayload?
            /// Creates a new `ForwardingAddress`.
            ///
            /// - Parameters:
            ///   - forwardingEmail: An email address to which messages can be forwarded.
            ///   - verificationStatus: Indicates whether this address has been verified and is usable for forwarding. Read-only.
            public init(
                forwardingEmail: Swift.String? = nil,
                verificationStatus: Components.Schemas.ForwardingAddress.VerificationStatusPayload? = nil
            ) {
                self.forwardingEmail = forwardingEmail
                self.verificationStatus = verificationStatus
            }
            public enum CodingKeys: String, CodingKey {
                case forwardingEmail
                case verificationStatus
            }
        }
        /// Metadata for hardware keys.
        ///
        /// - Remark: Generated from `#/components/schemas/HardwareKeyMetadata`.
        public struct HardwareKeyMetadata: Codable, Hashable, Sendable {
            /// Description about the hardware key.
            ///
            /// - Remark: Generated from `#/components/schemas/HardwareKeyMetadata/description`.
            public var description: Swift.String?
            /// Creates a new `HardwareKeyMetadata`.
            ///
            /// - Parameters:
            ///   - description: Description about the hardware key.
            public init(description: Swift.String? = nil) {
                self.description = description
            }
            public enum CodingKeys: String, CodingKey {
                case description
            }
        }
        /// A record of a change to the user's mailbox. Each history change may affect multiple messages in multiple ways.
        ///
        /// - Remark: Generated from `#/components/schemas/History`.
        public struct History: Codable, Hashable, Sendable {
            /// The mailbox sequence ID.
            ///
            /// - Remark: Generated from `#/components/schemas/History/id`.
            public var id: Swift.String?
            /// Labels added to messages in this history record.
            ///
            /// - Remark: Generated from `#/components/schemas/History/labelsAdded`.
            public var labelsAdded: [Components.Schemas.HistoryLabelAdded]?
            /// Labels removed from messages in this history record.
            ///
            /// - Remark: Generated from `#/components/schemas/History/labelsRemoved`.
            public var labelsRemoved: [Components.Schemas.HistoryLabelRemoved]?
            /// List of messages changed in this history record. The fields for specific change types, such as `messagesAdded` may duplicate messages in this field. We recommend using the specific change-type fields instead of this.
            ///
            /// - Remark: Generated from `#/components/schemas/History/messages`.
            public var messages: [Components.Schemas.Message]?
            /// Messages added to the mailbox in this history record.
            ///
            /// - Remark: Generated from `#/components/schemas/History/messagesAdded`.
            public var messagesAdded: [Components.Schemas.HistoryMessageAdded]?
            /// Messages deleted (not Trashed) from the mailbox in this history record.
            ///
            /// - Remark: Generated from `#/components/schemas/History/messagesDeleted`.
            public var messagesDeleted: [Components.Schemas.HistoryMessageDeleted]?
            /// Creates a new `History`.
            ///
            /// - Parameters:
            ///   - id: The mailbox sequence ID.
            ///   - labelsAdded: Labels added to messages in this history record.
            ///   - labelsRemoved: Labels removed from messages in this history record.
            ///   - messages: List of messages changed in this history record. The fields for specific change types, such as `messagesAdded` may duplicate messages in this field. We recommend using the specific change-type fields instead of this.
            ///   - messagesAdded: Messages added to the mailbox in this history record.
            ///   - messagesDeleted: Messages deleted (not Trashed) from the mailbox in this history record.
            public init(
                id: Swift.String? = nil,
                labelsAdded: [Components.Schemas.HistoryLabelAdded]? = nil,
                labelsRemoved: [Components.Schemas.HistoryLabelRemoved]? = nil,
                messages: [Components.Schemas.Message]? = nil,
                messagesAdded: [Components.Schemas.HistoryMessageAdded]? = nil,
                messagesDeleted: [Components.Schemas.HistoryMessageDeleted]? = nil
            ) {
                self.id = id
                self.labelsAdded = labelsAdded
                self.labelsRemoved = labelsRemoved
                self.messages = messages
                self.messagesAdded = messagesAdded
                self.messagesDeleted = messagesDeleted
            }
            public enum CodingKeys: String, CodingKey {
                case id
                case labelsAdded
                case labelsRemoved
                case messages
                case messagesAdded
                case messagesDeleted
            }
        }
        /// - Remark: Generated from `#/components/schemas/HistoryLabelAdded`.
        public struct HistoryLabelAdded: Codable, Hashable, Sendable {
            /// Label IDs added to the message.
            ///
            /// - Remark: Generated from `#/components/schemas/HistoryLabelAdded/labelIds`.
            public var labelIds: [Swift.String]?
            /// - Remark: Generated from `#/components/schemas/HistoryLabelAdded/message`.
            public var message: Components.Schemas.Message?
            /// Creates a new `HistoryLabelAdded`.
            ///
            /// - Parameters:
            ///   - labelIds: Label IDs added to the message.
            ///   - message:
            public init(
                labelIds: [Swift.String]? = nil,
                message: Components.Schemas.Message? = nil
            ) {
                self.labelIds = labelIds
                self.message = message
            }
            public enum CodingKeys: String, CodingKey {
                case labelIds
                case message
            }
        }
        /// - Remark: Generated from `#/components/schemas/HistoryLabelRemoved`.
        public struct HistoryLabelRemoved: Codable, Hashable, Sendable {
            /// Label IDs removed from the message.
            ///
            /// - Remark: Generated from `#/components/schemas/HistoryLabelRemoved/labelIds`.
            public var labelIds: [Swift.String]?
            /// - Remark: Generated from `#/components/schemas/HistoryLabelRemoved/message`.
            public var message: Components.Schemas.Message?
            /// Creates a new `HistoryLabelRemoved`.
            ///
            /// - Parameters:
            ///   - labelIds: Label IDs removed from the message.
            ///   - message:
            public init(
                labelIds: [Swift.String]? = nil,
                message: Components.Schemas.Message? = nil
            ) {
                self.labelIds = labelIds
                self.message = message
            }
            public enum CodingKeys: String, CodingKey {
                case labelIds
                case message
            }
        }
        /// - Remark: Generated from `#/components/schemas/HistoryMessageAdded`.
        public struct HistoryMessageAdded: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/HistoryMessageAdded/message`.
            public var message: Components.Schemas.Message?
            /// Creates a new `HistoryMessageAdded`.
            ///
            /// - Parameters:
            ///   - message:
            public init(message: Components.Schemas.Message? = nil) {
                self.message = message
            }
            public enum CodingKeys: String, CodingKey {
                case message
            }
        }
        /// - Remark: Generated from `#/components/schemas/HistoryMessageDeleted`.
        public struct HistoryMessageDeleted: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/HistoryMessageDeleted/message`.
            public var message: Components.Schemas.Message?
            /// Creates a new `HistoryMessageDeleted`.
            ///
            /// - Parameters:
            ///   - message:
            public init(message: Components.Schemas.Message? = nil) {
                self.message = message
            }
            public enum CodingKeys: String, CodingKey {
                case message
            }
        }
        /// IMAP settings for an account.
        ///
        /// - Remark: Generated from `#/components/schemas/ImapSettings`.
        public struct ImapSettings: Codable, Hashable, Sendable {
            /// If this value is true, Gmail will immediately expunge a message when it is marked as deleted in IMAP. Otherwise, Gmail will wait for an update from the client before expunging messages marked as deleted.
            ///
            /// - Remark: Generated from `#/components/schemas/ImapSettings/autoExpunge`.
            public var autoExpunge: Swift.Bool?
            /// Whether IMAP is enabled for the account.
            ///
            /// - Remark: Generated from `#/components/schemas/ImapSettings/enabled`.
            public var enabled: Swift.Bool?
            /// The action that will be executed on a message when it is marked as deleted and expunged from the last visible IMAP folder.
            ///
            /// - Remark: Generated from `#/components/schemas/ImapSettings/expungeBehavior`.
            @frozen public enum ExpungeBehaviorPayload: String, Codable, Hashable, Sendable, CaseIterable {
                case expungeBehaviorUnspecified = "expungeBehaviorUnspecified"
                case archive = "archive"
                case trash = "trash"
                case deleteForever = "deleteForever"
            }
            /// The action that will be executed on a message when it is marked as deleted and expunged from the last visible IMAP folder.
            ///
            /// - Remark: Generated from `#/components/schemas/ImapSettings/expungeBehavior`.
            public var expungeBehavior: Components.Schemas.ImapSettings.ExpungeBehaviorPayload?
            /// An optional limit on the number of messages that an IMAP folder may contain. Legal values are 0, 1000, 2000, 5000 or 10000. A value of zero is interpreted to mean that there is no limit.
            ///
            /// - Remark: Generated from `#/components/schemas/ImapSettings/maxFolderSize`.
            public var maxFolderSize: Swift.Int32?
            /// Creates a new `ImapSettings`.
            ///
            /// - Parameters:
            ///   - autoExpunge: If this value is true, Gmail will immediately expunge a message when it is marked as deleted in IMAP. Otherwise, Gmail will wait for an update from the client before expunging messages marked as deleted.
            ///   - enabled: Whether IMAP is enabled for the account.
            ///   - expungeBehavior: The action that will be executed on a message when it is marked as deleted and expunged from the last visible IMAP folder.
            ///   - maxFolderSize: An optional limit on the number of messages that an IMAP folder may contain. Legal values are 0, 1000, 2000, 5000 or 10000. A value of zero is interpreted to mean that there is no limit.
            public init(
                autoExpunge: Swift.Bool? = nil,
                enabled: Swift.Bool? = nil,
                expungeBehavior: Components.Schemas.ImapSettings.ExpungeBehaviorPayload? = nil,
                maxFolderSize: Swift.Int32? = nil
            ) {
                self.autoExpunge = autoExpunge
                self.enabled = enabled
                self.expungeBehavior = expungeBehavior
                self.maxFolderSize = maxFolderSize
            }
            public enum CodingKeys: String, CodingKey {
                case autoExpunge
                case enabled
                case expungeBehavior
                case maxFolderSize
            }
        }
        /// Metadata for private keys managed by an external key access control list service. For details about managing key access, see [Google Workspace CSE API Reference](https://developers.google.com/workspace/cse/reference).
        ///
        /// - Remark: Generated from `#/components/schemas/KaclsKeyMetadata`.
        public struct KaclsKeyMetadata: Codable, Hashable, Sendable {
            /// Opaque data generated and used by the key access control list service. Maximum size: 8 KiB.
            ///
            /// - Remark: Generated from `#/components/schemas/KaclsKeyMetadata/kaclsData`.
            public var kaclsData: Swift.String?
            /// The URI of the key access control list service that manages the private key.
            ///
            /// - Remark: Generated from `#/components/schemas/KaclsKeyMetadata/kaclsUri`.
            public var kaclsUri: Swift.String?
            /// Creates a new `KaclsKeyMetadata`.
            ///
            /// - Parameters:
            ///   - kaclsData: Opaque data generated and used by the key access control list service. Maximum size: 8 KiB.
            ///   - kaclsUri: The URI of the key access control list service that manages the private key.
            public init(
                kaclsData: Swift.String? = nil,
                kaclsUri: Swift.String? = nil
            ) {
                self.kaclsData = kaclsData
                self.kaclsUri = kaclsUri
            }
            public enum CodingKeys: String, CodingKey {
                case kaclsData
                case kaclsUri
            }
        }
        /// Labels are used to categorize messages and threads within the user's mailbox. The maximum number of labels supported for a user's mailbox is 10,000.
        ///
        /// - Remark: Generated from `#/components/schemas/Label`.
        public struct Label: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/Label/color`.
            public var color: Components.Schemas.LabelColor?
            /// The immutable ID of the label.
            ///
            /// - Remark: Generated from `#/components/schemas/Label/id`.
            public var id: Swift.String?
            /// The visibility of the label in the label list in the Gmail web interface.
            ///
            /// - Remark: Generated from `#/components/schemas/Label/labelListVisibility`.
            @frozen public enum LabelListVisibilityPayload: String, Codable, Hashable, Sendable, CaseIterable {
                case labelShow = "labelShow"
                case labelShowIfUnread = "labelShowIfUnread"
                case labelHide = "labelHide"
            }
            /// The visibility of the label in the label list in the Gmail web interface.
            ///
            /// - Remark: Generated from `#/components/schemas/Label/labelListVisibility`.
            public var labelListVisibility: Components.Schemas.Label.LabelListVisibilityPayload?
            /// The visibility of messages with this label in the message list in the Gmail web interface.
            ///
            /// - Remark: Generated from `#/components/schemas/Label/messageListVisibility`.
            @frozen public enum MessageListVisibilityPayload: String, Codable, Hashable, Sendable, CaseIterable {
                case show = "show"
                case hide = "hide"
            }
            /// The visibility of messages with this label in the message list in the Gmail web interface.
            ///
            /// - Remark: Generated from `#/components/schemas/Label/messageListVisibility`.
            public var messageListVisibility: Components.Schemas.Label.MessageListVisibilityPayload?
            /// The total number of messages with the label.
            ///
            /// - Remark: Generated from `#/components/schemas/Label/messagesTotal`.
            public var messagesTotal: Swift.Int32?
            /// The number of unread messages with the label.
            ///
            /// - Remark: Generated from `#/components/schemas/Label/messagesUnread`.
            public var messagesUnread: Swift.Int32?
            /// The display name of the label.
            ///
            /// - Remark: Generated from `#/components/schemas/Label/name`.
            public var name: Swift.String?
            /// The total number of threads with the label.
            ///
            /// - Remark: Generated from `#/components/schemas/Label/threadsTotal`.
            public var threadsTotal: Swift.Int32?
            /// The number of unread threads with the label.
            ///
            /// - Remark: Generated from `#/components/schemas/Label/threadsUnread`.
            public var threadsUnread: Swift.Int32?
            /// The owner type for the label. User labels are created by the user and can be modified and deleted by the user and can be applied to any message or thread. System labels are internally created and cannot be added, modified, or deleted. System labels may be able to be applied to or removed from messages and threads under some circumstances but this is not guaranteed. For example, users can apply and remove the `INBOX` and `UNREAD` labels from messages and threads, but cannot apply or remove the `DRAFTS` or `SENT` labels from messages or threads.
            ///
            /// - Remark: Generated from `#/components/schemas/Label/type`.
            @frozen public enum _TypePayload: String, Codable, Hashable, Sendable, CaseIterable {
                case system = "system"
                case user = "user"
            }
            /// The owner type for the label. User labels are created by the user and can be modified and deleted by the user and can be applied to any message or thread. System labels are internally created and cannot be added, modified, or deleted. System labels may be able to be applied to or removed from messages and threads under some circumstances but this is not guaranteed. For example, users can apply and remove the `INBOX` and `UNREAD` labels from messages and threads, but cannot apply or remove the `DRAFTS` or `SENT` labels from messages or threads.
            ///
            /// - Remark: Generated from `#/components/schemas/Label/type`.
            public var _type: Components.Schemas.Label._TypePayload?
            /// Creates a new `Label`.
            ///
            /// - Parameters:
            ///   - color:
            ///   - id: The immutable ID of the label.
            ///   - labelListVisibility: The visibility of the label in the label list in the Gmail web interface.
            ///   - messageListVisibility: The visibility of messages with this label in the message list in the Gmail web interface.
            ///   - messagesTotal: The total number of messages with the label.
            ///   - messagesUnread: The number of unread messages with the label.
            ///   - name: The display name of the label.
            ///   - threadsTotal: The total number of threads with the label.
            ///   - threadsUnread: The number of unread threads with the label.
            ///   - _type: The owner type for the label. User labels are created by the user and can be modified and deleted by the user and can be applied to any message or thread. System labels are internally created and cannot be added, modified, or deleted. System labels may be able to be applied to or removed from messages and threads under some circumstances but this is not guaranteed. For example, users can apply and remove the `INBOX` and `UNREAD` labels from messages and threads, but cannot apply or remove the `DRAFTS` or `SENT` labels from messages or threads.
            public init(
                color: Components.Schemas.LabelColor? = nil,
                id: Swift.String? = nil,
                labelListVisibility: Components.Schemas.Label.LabelListVisibilityPayload? = nil,
                messageListVisibility: Components.Schemas.Label.MessageListVisibilityPayload? = nil,
                messagesTotal: Swift.Int32? = nil,
                messagesUnread: Swift.Int32? = nil,
                name: Swift.String? = nil,
                threadsTotal: Swift.Int32? = nil,
                threadsUnread: Swift.Int32? = nil,
                _type: Components.Schemas.Label._TypePayload? = nil
            ) {
                self.color = color
                self.id = id
                self.labelListVisibility = labelListVisibility
                self.messageListVisibility = messageListVisibility
                self.messagesTotal = messagesTotal
                self.messagesUnread = messagesUnread
                self.name = name
                self.threadsTotal = threadsTotal
                self.threadsUnread = threadsUnread
                self._type = _type
            }
            public enum CodingKeys: String, CodingKey {
                case color
                case id
                case labelListVisibility
                case messageListVisibility
                case messagesTotal
                case messagesUnread
                case name
                case threadsTotal
                case threadsUnread
                case _type = "type"
            }
        }
        /// - Remark: Generated from `#/components/schemas/LabelColor`.
        public struct LabelColor: Codable, Hashable, Sendable {
            /// The background color represented as hex string #RRGGBB (ex #000000). This field is required in order to set the color of a label. Only the following predefined set of color values are allowed: \#000000, #434343, #666666, #999999, #cccccc, #efefef, #f3f3f3, #ffffff, \#fb4c2f, #ffad47, #fad165, #16a766, #43d692, #4a86e8, #a479e2, #f691b3, \#f6c5be, #ffe6c7, #fef1d1, #b9e4d0, #c6f3de, #c9daf8, #e4d7f5, #fcdee8, \#efa093, #ffd6a2, #fce8b3, #89d3b2, #a0eac9, #a4c2f4, #d0bcf1, #fbc8d9, \#e66550, #ffbc6b, #fcda83, #44b984, #68dfa9, #6d9eeb, #b694e8, #f7a7c0, \#cc3a21, #eaa041, #f2c960, #149e60, #3dc789, #3c78d8, #8e63ce, #e07798, \#ac2b16, #cf8933, #d5ae49, #0b804b, #2a9c68, #285bac, #653e9b, #b65775, \#822111, #a46a21, #aa8831, #076239, #1a764d, #1c4587, #41236d, #83334c \#464646, #e7e7e7, #0d3472, #b6cff5, #0d3b44, #98d7e4, #3d188e, #e3d7ff, \#711a36, #fbd3e0, #8a1c0a, #f2b2a8, #7a2e0b, #ffc8af, #7a4706, #ffdeb5, \#594c05, #fbe983, #684e07, #fdedc1, #0b4f30, #b3efd3, #04502e, #a2dcc1, \#c2c2c2, #4986e7, #2da2bb, #b99aff, #994a64, #f691b2, #ff7537, #ffad46, \#662e37, #ebdbde, #cca6ac, #094228, #42d692, #16a765
            ///
            /// - Remark: Generated from `#/components/schemas/LabelColor/backgroundColor`.
            public var backgroundColor: Swift.String?
            /// The text color of the label, represented as hex string. This field is required in order to set the color of a label. Only the following predefined set of color values are allowed: \#000000, #434343, #666666, #999999, #cccccc, #efefef, #f3f3f3, #ffffff, \#fb4c2f, #ffad47, #fad165, #16a766, #43d692, #4a86e8, #a479e2, #f691b3, \#f6c5be, #ffe6c7, #fef1d1, #b9e4d0, #c6f3de, #c9daf8, #e4d7f5, #fcdee8, \#efa093, #ffd6a2, #fce8b3, #89d3b2, #a0eac9, #a4c2f4, #d0bcf1, #fbc8d9, \#e66550, #ffbc6b, #fcda83, #44b984, #68dfa9, #6d9eeb, #b694e8, #f7a7c0, \#cc3a21, #eaa041, #f2c960, #149e60, #3dc789, #3c78d8, #8e63ce, #e07798, \#ac2b16, #cf8933, #d5ae49, #0b804b, #2a9c68, #285bac, #653e9b, #b65775, \#822111, #a46a21, #aa8831, #076239, #1a764d, #1c4587, #41236d, #83334c \#464646, #e7e7e7, #0d3472, #b6cff5, #0d3b44, #98d7e4, #3d188e, #e3d7ff, \#711a36, #fbd3e0, #8a1c0a, #f2b2a8, #7a2e0b, #ffc8af, #7a4706, #ffdeb5, \#594c05, #fbe983, #684e07, #fdedc1, #0b4f30, #b3efd3, #04502e, #a2dcc1, \#c2c2c2, #4986e7, #2da2bb, #b99aff, #994a64, #f691b2, #ff7537, #ffad46, \#662e37, #ebdbde, #cca6ac, #094228, #42d692, #16a765
            ///
            /// - Remark: Generated from `#/components/schemas/LabelColor/textColor`.
            public var textColor: Swift.String?
            /// Creates a new `LabelColor`.
            ///
            /// - Parameters:
            ///   - backgroundColor: The background color represented as hex string #RRGGBB (ex #000000). This field is required in order to set the color of a label. Only the following predefined set of color values are allowed: \#000000, #434343, #666666, #999999, #cccccc, #efefef, #f3f3f3, #ffffff, \#fb4c2f, #ffad47, #fad165, #16a766, #43d692, #4a86e8, #a479e2, #f691b3, \#f6c5be, #ffe6c7, #fef1d1, #b9e4d0, #c6f3de, #c9daf8, #e4d7f5, #fcdee8, \#efa093, #ffd6a2, #fce8b3, #89d3b2, #a0eac9, #a4c2f4, #d0bcf1, #fbc8d9, \#e66550, #ffbc6b, #fcda83, #44b984, #68dfa9, #6d9eeb, #b694e8, #f7a7c0, \#cc3a21, #eaa041, #f2c960, #149e60, #3dc789, #3c78d8, #8e63ce, #e07798, \#ac2b16, #cf8933, #d5ae49, #0b804b, #2a9c68, #285bac, #653e9b, #b65775, \#822111, #a46a21, #aa8831, #076239, #1a764d, #1c4587, #41236d, #83334c \#464646, #e7e7e7, #0d3472, #b6cff5, #0d3b44, #98d7e4, #3d188e, #e3d7ff, \#711a36, #fbd3e0, #8a1c0a, #f2b2a8, #7a2e0b, #ffc8af, #7a4706, #ffdeb5, \#594c05, #fbe983, #684e07, #fdedc1, #0b4f30, #b3efd3, #04502e, #a2dcc1, \#c2c2c2, #4986e7, #2da2bb, #b99aff, #994a64, #f691b2, #ff7537, #ffad46, \#662e37, #ebdbde, #cca6ac, #094228, #42d692, #16a765
            ///   - textColor: The text color of the label, represented as hex string. This field is required in order to set the color of a label. Only the following predefined set of color values are allowed: \#000000, #434343, #666666, #999999, #cccccc, #efefef, #f3f3f3, #ffffff, \#fb4c2f, #ffad47, #fad165, #16a766, #43d692, #4a86e8, #a479e2, #f691b3, \#f6c5be, #ffe6c7, #fef1d1, #b9e4d0, #c6f3de, #c9daf8, #e4d7f5, #fcdee8, \#efa093, #ffd6a2, #fce8b3, #89d3b2, #a0eac9, #a4c2f4, #d0bcf1, #fbc8d9, \#e66550, #ffbc6b, #fcda83, #44b984, #68dfa9, #6d9eeb, #b694e8, #f7a7c0, \#cc3a21, #eaa041, #f2c960, #149e60, #3dc789, #3c78d8, #8e63ce, #e07798, \#ac2b16, #cf8933, #d5ae49, #0b804b, #2a9c68, #285bac, #653e9b, #b65775, \#822111, #a46a21, #aa8831, #076239, #1a764d, #1c4587, #41236d, #83334c \#464646, #e7e7e7, #0d3472, #b6cff5, #0d3b44, #98d7e4, #3d188e, #e3d7ff, \#711a36, #fbd3e0, #8a1c0a, #f2b2a8, #7a2e0b, #ffc8af, #7a4706, #ffdeb5, \#594c05, #fbe983, #684e07, #fdedc1, #0b4f30, #b3efd3, #04502e, #a2dcc1, \#c2c2c2, #4986e7, #2da2bb, #b99aff, #994a64, #f691b2, #ff7537, #ffad46, \#662e37, #ebdbde, #cca6ac, #094228, #42d692, #16a765
            public init(
                backgroundColor: Swift.String? = nil,
                textColor: Swift.String? = nil
            ) {
                self.backgroundColor = backgroundColor
                self.textColor = textColor
            }
            public enum CodingKeys: String, CodingKey {
                case backgroundColor
                case textColor
            }
        }
        /// Language settings for an account. These settings correspond to the "Language settings" feature in the web interface.
        ///
        /// - Remark: Generated from `#/components/schemas/LanguageSettings`.
        public struct LanguageSettings: Codable, Hashable, Sendable {
            /// The language to display Gmail in, formatted as an RFC 3066 Language Tag (for example `en-GB`, `fr` or `ja` for British English, French, or Japanese respectively). The set of languages supported by Gmail evolves over time, so please refer to the "Language" dropdown in the Gmail settings for all available options, as described in the language settings help article. A table of sample values is also provided in the Managing Language Settings guide Not all Gmail clients can display the same set of languages. In the case that a user's display language is not available for use on a particular client, said client automatically chooses to display in the closest supported variant (or a reasonable default).
            ///
            /// - Remark: Generated from `#/components/schemas/LanguageSettings/displayLanguage`.
            public var displayLanguage: Swift.String?
            /// Creates a new `LanguageSettings`.
            ///
            /// - Parameters:
            ///   - displayLanguage: The language to display Gmail in, formatted as an RFC 3066 Language Tag (for example `en-GB`, `fr` or `ja` for British English, French, or Japanese respectively). The set of languages supported by Gmail evolves over time, so please refer to the "Language" dropdown in the Gmail settings for all available options, as described in the language settings help article. A table of sample values is also provided in the Managing Language Settings guide Not all Gmail clients can display the same set of languages. In the case that a user's display language is not available for use on a particular client, said client automatically chooses to display in the closest supported variant (or a reasonable default).
            public init(displayLanguage: Swift.String? = nil) {
                self.displayLanguage = displayLanguage
            }
            public enum CodingKeys: String, CodingKey {
                case displayLanguage
            }
        }
        /// - Remark: Generated from `#/components/schemas/ListCseIdentitiesResponse`.
        public struct ListCseIdentitiesResponse: Codable, Hashable, Sendable {
            /// One page of the list of CSE identities configured for the user.
            ///
            /// - Remark: Generated from `#/components/schemas/ListCseIdentitiesResponse/cseIdentities`.
            public var cseIdentities: [Components.Schemas.CseIdentity]?
            /// Pagination token to be passed to a subsequent ListCseIdentities call in order to retrieve the next page of identities. If this value is not returned or is the empty string, then no further pages remain.
            ///
            /// - Remark: Generated from `#/components/schemas/ListCseIdentitiesResponse/nextPageToken`.
            public var nextPageToken: Swift.String?
            /// Creates a new `ListCseIdentitiesResponse`.
            ///
            /// - Parameters:
            ///   - cseIdentities: One page of the list of CSE identities configured for the user.
            ///   - nextPageToken: Pagination token to be passed to a subsequent ListCseIdentities call in order to retrieve the next page of identities. If this value is not returned or is the empty string, then no further pages remain.
            public init(
                cseIdentities: [Components.Schemas.CseIdentity]? = nil,
                nextPageToken: Swift.String? = nil
            ) {
                self.cseIdentities = cseIdentities
                self.nextPageToken = nextPageToken
            }
            public enum CodingKeys: String, CodingKey {
                case cseIdentities
                case nextPageToken
            }
        }
        /// - Remark: Generated from `#/components/schemas/ListCseKeyPairsResponse`.
        public struct ListCseKeyPairsResponse: Codable, Hashable, Sendable {
            /// One page of the list of CSE key pairs installed for the user.
            ///
            /// - Remark: Generated from `#/components/schemas/ListCseKeyPairsResponse/cseKeyPairs`.
            public var cseKeyPairs: [Components.Schemas.CseKeyPair]?
            /// Pagination token to be passed to a subsequent ListCseKeyPairs call in order to retrieve the next page of key pairs. If this value is not returned, then no further pages remain.
            ///
            /// - Remark: Generated from `#/components/schemas/ListCseKeyPairsResponse/nextPageToken`.
            public var nextPageToken: Swift.String?
            /// Creates a new `ListCseKeyPairsResponse`.
            ///
            /// - Parameters:
            ///   - cseKeyPairs: One page of the list of CSE key pairs installed for the user.
            ///   - nextPageToken: Pagination token to be passed to a subsequent ListCseKeyPairs call in order to retrieve the next page of key pairs. If this value is not returned, then no further pages remain.
            public init(
                cseKeyPairs: [Components.Schemas.CseKeyPair]? = nil,
                nextPageToken: Swift.String? = nil
            ) {
                self.cseKeyPairs = cseKeyPairs
                self.nextPageToken = nextPageToken
            }
            public enum CodingKeys: String, CodingKey {
                case cseKeyPairs
                case nextPageToken
            }
        }
        /// Response for the ListDelegates method.
        ///
        /// - Remark: Generated from `#/components/schemas/ListDelegatesResponse`.
        public struct ListDelegatesResponse: Codable, Hashable, Sendable {
            /// List of the user's delegates (with any verification status). If an account doesn't have delegates, this field doesn't appear.
            ///
            /// - Remark: Generated from `#/components/schemas/ListDelegatesResponse/delegates`.
            public var delegates: [Components.Schemas.Delegate]?
            /// Creates a new `ListDelegatesResponse`.
            ///
            /// - Parameters:
            ///   - delegates: List of the user's delegates (with any verification status). If an account doesn't have delegates, this field doesn't appear.
            public init(delegates: [Components.Schemas.Delegate]? = nil) {
                self.delegates = delegates
            }
            public enum CodingKeys: String, CodingKey {
                case delegates
            }
        }
        /// - Remark: Generated from `#/components/schemas/ListDraftsResponse`.
        public struct ListDraftsResponse: Codable, Hashable, Sendable {
            /// List of drafts. Note that the `Message` property in each `Draft` resource only contains an `id` and a `threadId`. The messages.get method can fetch additional message details.
            ///
            /// - Remark: Generated from `#/components/schemas/ListDraftsResponse/drafts`.
            public var drafts: [Components.Schemas.Draft]?
            /// Token to retrieve the next page of results in the list.
            ///
            /// - Remark: Generated from `#/components/schemas/ListDraftsResponse/nextPageToken`.
            public var nextPageToken: Swift.String?
            /// Estimated total number of results.
            ///
            /// - Remark: Generated from `#/components/schemas/ListDraftsResponse/resultSizeEstimate`.
            public var resultSizeEstimate: Swift.Int?
            /// Creates a new `ListDraftsResponse`.
            ///
            /// - Parameters:
            ///   - drafts: List of drafts. Note that the `Message` property in each `Draft` resource only contains an `id` and a `threadId`. The messages.get method can fetch additional message details.
            ///   - nextPageToken: Token to retrieve the next page of results in the list.
            ///   - resultSizeEstimate: Estimated total number of results.
            public init(
                drafts: [Components.Schemas.Draft]? = nil,
                nextPageToken: Swift.String? = nil,
                resultSizeEstimate: Swift.Int? = nil
            ) {
                self.drafts = drafts
                self.nextPageToken = nextPageToken
                self.resultSizeEstimate = resultSizeEstimate
            }
            public enum CodingKeys: String, CodingKey {
                case drafts
                case nextPageToken
                case resultSizeEstimate
            }
        }
        /// Response for the ListFilters method.
        ///
        /// - Remark: Generated from `#/components/schemas/ListFiltersResponse`.
        public struct ListFiltersResponse: Codable, Hashable, Sendable {
            /// List of a user's filters.
            ///
            /// - Remark: Generated from `#/components/schemas/ListFiltersResponse/filter`.
            public var filter: [Components.Schemas.Filter]?
            /// Creates a new `ListFiltersResponse`.
            ///
            /// - Parameters:
            ///   - filter: List of a user's filters.
            public init(filter: [Components.Schemas.Filter]? = nil) {
                self.filter = filter
            }
            public enum CodingKeys: String, CodingKey {
                case filter
            }
        }
        /// Response for the ListForwardingAddresses method.
        ///
        /// - Remark: Generated from `#/components/schemas/ListForwardingAddressesResponse`.
        public struct ListForwardingAddressesResponse: Codable, Hashable, Sendable {
            /// List of addresses that may be used for forwarding.
            ///
            /// - Remark: Generated from `#/components/schemas/ListForwardingAddressesResponse/forwardingAddresses`.
            public var forwardingAddresses: [Components.Schemas.ForwardingAddress]?
            /// Creates a new `ListForwardingAddressesResponse`.
            ///
            /// - Parameters:
            ///   - forwardingAddresses: List of addresses that may be used for forwarding.
            public init(forwardingAddresses: [Components.Schemas.ForwardingAddress]? = nil) {
                self.forwardingAddresses = forwardingAddresses
            }
            public enum CodingKeys: String, CodingKey {
                case forwardingAddresses
            }
        }
        /// - Remark: Generated from `#/components/schemas/ListHistoryResponse`.
        public struct ListHistoryResponse: Codable, Hashable, Sendable {
            /// List of history records. Any `messages` contained in the response will typically only have `id` and `threadId` fields populated.
            ///
            /// - Remark: Generated from `#/components/schemas/ListHistoryResponse/history`.
            public var history: [Components.Schemas.History]?
            /// The ID of the mailbox's current history record.
            ///
            /// - Remark: Generated from `#/components/schemas/ListHistoryResponse/historyId`.
            public var historyId: Swift.String?
            /// Page token to retrieve the next page of results in the list.
            ///
            /// - Remark: Generated from `#/components/schemas/ListHistoryResponse/nextPageToken`.
            public var nextPageToken: Swift.String?
            /// Creates a new `ListHistoryResponse`.
            ///
            /// - Parameters:
            ///   - history: List of history records. Any `messages` contained in the response will typically only have `id` and `threadId` fields populated.
            ///   - historyId: The ID of the mailbox's current history record.
            ///   - nextPageToken: Page token to retrieve the next page of results in the list.
            public init(
                history: [Components.Schemas.History]? = nil,
                historyId: Swift.String? = nil,
                nextPageToken: Swift.String? = nil
            ) {
                self.history = history
                self.historyId = historyId
                self.nextPageToken = nextPageToken
            }
            public enum CodingKeys: String, CodingKey {
                case history
                case historyId
                case nextPageToken
            }
        }
        /// - Remark: Generated from `#/components/schemas/ListLabelsResponse`.
        public struct ListLabelsResponse: Codable, Hashable, Sendable {
            /// List of labels. Note that each label resource only contains an `id`, `name`, `messageListVisibility`, `labelListVisibility`, and `type`. The labels.get method can fetch additional label details.
            ///
            /// - Remark: Generated from `#/components/schemas/ListLabelsResponse/labels`.
            public var labels: [Components.Schemas.Label]?
            /// Creates a new `ListLabelsResponse`.
            ///
            /// - Parameters:
            ///   - labels: List of labels. Note that each label resource only contains an `id`, `name`, `messageListVisibility`, `labelListVisibility`, and `type`. The labels.get method can fetch additional label details.
            public init(labels: [Components.Schemas.Label]? = nil) {
                self.labels = labels
            }
            public enum CodingKeys: String, CodingKey {
                case labels
            }
        }
        /// - Remark: Generated from `#/components/schemas/ListMessagesResponse`.
        public struct ListMessagesResponse: Codable, Hashable, Sendable {
            /// List of messages. Note that each message resource contains only an `id` and a `threadId`. Additional message details can be fetched using the messages.get method.
            ///
            /// - Remark: Generated from `#/components/schemas/ListMessagesResponse/messages`.
            public var messages: [Components.Schemas.Message]?
            /// Token to retrieve the next page of results in the list.
            ///
            /// - Remark: Generated from `#/components/schemas/ListMessagesResponse/nextPageToken`.
            public var nextPageToken: Swift.String?
            /// Estimated total number of results.
            ///
            /// - Remark: Generated from `#/components/schemas/ListMessagesResponse/resultSizeEstimate`.
            public var resultSizeEstimate: Swift.Int?
            /// Creates a new `ListMessagesResponse`.
            ///
            /// - Parameters:
            ///   - messages: List of messages. Note that each message resource contains only an `id` and a `threadId`. Additional message details can be fetched using the messages.get method.
            ///   - nextPageToken: Token to retrieve the next page of results in the list.
            ///   - resultSizeEstimate: Estimated total number of results.
            public init(
                messages: [Components.Schemas.Message]? = nil,
                nextPageToken: Swift.String? = nil,
                resultSizeEstimate: Swift.Int? = nil
            ) {
                self.messages = messages
                self.nextPageToken = nextPageToken
                self.resultSizeEstimate = resultSizeEstimate
            }
            public enum CodingKeys: String, CodingKey {
                case messages
                case nextPageToken
                case resultSizeEstimate
            }
        }
        /// Response for the ListSendAs method.
        ///
        /// - Remark: Generated from `#/components/schemas/ListSendAsResponse`.
        public struct ListSendAsResponse: Codable, Hashable, Sendable {
            /// List of send-as aliases.
            ///
            /// - Remark: Generated from `#/components/schemas/ListSendAsResponse/sendAs`.
            public var sendAs: [Components.Schemas.SendAs]?
            /// Creates a new `ListSendAsResponse`.
            ///
            /// - Parameters:
            ///   - sendAs: List of send-as aliases.
            public init(sendAs: [Components.Schemas.SendAs]? = nil) {
                self.sendAs = sendAs
            }
            public enum CodingKeys: String, CodingKey {
                case sendAs
            }
        }
        /// - Remark: Generated from `#/components/schemas/ListSmimeInfoResponse`.
        public struct ListSmimeInfoResponse: Codable, Hashable, Sendable {
            /// List of SmimeInfo.
            ///
            /// - Remark: Generated from `#/components/schemas/ListSmimeInfoResponse/smimeInfo`.
            public var smimeInfo: [Components.Schemas.SmimeInfo]?
            /// Creates a new `ListSmimeInfoResponse`.
            ///
            /// - Parameters:
            ///   - smimeInfo: List of SmimeInfo.
            public init(smimeInfo: [Components.Schemas.SmimeInfo]? = nil) {
                self.smimeInfo = smimeInfo
            }
            public enum CodingKeys: String, CodingKey {
                case smimeInfo
            }
        }
        /// - Remark: Generated from `#/components/schemas/ListThreadsResponse`.
        public struct ListThreadsResponse: Codable, Hashable, Sendable {
            /// Page token to retrieve the next page of results in the list.
            ///
            /// - Remark: Generated from `#/components/schemas/ListThreadsResponse/nextPageToken`.
            public var nextPageToken: Swift.String?
            /// Estimated total number of results.
            ///
            /// - Remark: Generated from `#/components/schemas/ListThreadsResponse/resultSizeEstimate`.
            public var resultSizeEstimate: Swift.Int?
            /// List of threads. Note that each thread resource does not contain a list of `messages`. The list of `messages` for a given thread can be fetched using the threads.get method.
            ///
            /// - Remark: Generated from `#/components/schemas/ListThreadsResponse/threads`.
            public var threads: [Components.Schemas.Thread]?
            /// Creates a new `ListThreadsResponse`.
            ///
            /// - Parameters:
            ///   - nextPageToken: Page token to retrieve the next page of results in the list.
            ///   - resultSizeEstimate: Estimated total number of results.
            ///   - threads: List of threads. Note that each thread resource does not contain a list of `messages`. The list of `messages` for a given thread can be fetched using the threads.get method.
            public init(
                nextPageToken: Swift.String? = nil,
                resultSizeEstimate: Swift.Int? = nil,
                threads: [Components.Schemas.Thread]? = nil
            ) {
                self.nextPageToken = nextPageToken
                self.resultSizeEstimate = resultSizeEstimate
                self.threads = threads
            }
            public enum CodingKeys: String, CodingKey {
                case nextPageToken
                case resultSizeEstimate
                case threads
            }
        }
        /// An email message.
        ///
        /// - Remark: Generated from `#/components/schemas/Message`.
        public struct Message: Codable, Hashable, Sendable {
            /// The ID of the last history record that modified this message.
            ///
            /// - Remark: Generated from `#/components/schemas/Message/historyId`.
            public var historyId: Swift.String?
            /// The immutable ID of the message.
            ///
            /// - Remark: Generated from `#/components/schemas/Message/id`.
            public var id: Swift.String?
            /// The internal message creation timestamp (epoch ms), which determines ordering in the inbox. For normal SMTP-received email, this represents the time the message was originally accepted by Google, which is more reliable than the `Date` header. However, for API-migrated mail, it can be configured by client to be based on the `Date` header.
            ///
            /// - Remark: Generated from `#/components/schemas/Message/internalDate`.
            public var internalDate: Swift.String?
            /// List of IDs of labels applied to this message.
            ///
            /// - Remark: Generated from `#/components/schemas/Message/labelIds`.
            public var labelIds: [Swift.String]?
            /// - Remark: Generated from `#/components/schemas/Message/payload`.
            public var payload: Components.Schemas.MessagePart?
            /// The entire email message in an RFC 2822 formatted and base64url encoded string. Returned in `messages.get` and `drafts.get` responses when the `format=RAW` parameter is supplied.
            ///
            /// - Remark: Generated from `#/components/schemas/Message/raw`.
            public var raw: OpenAPIRuntime.Base64EncodedData?
            /// Estimated size in bytes of the message.
            ///
            /// - Remark: Generated from `#/components/schemas/Message/sizeEstimate`.
            public var sizeEstimate: Swift.Int32?
            /// A short part of the message text.
            ///
            /// - Remark: Generated from `#/components/schemas/Message/snippet`.
            public var snippet: Swift.String?
            /// The ID of the thread the message belongs to. To add a message or draft to a thread, the following criteria must be met: 1. The requested `threadId` must be specified on the `Message` or `Draft.Message` you supply with your request. 2. The `References` and `In-Reply-To` headers must be set in compliance with the [RFC 2822](https://tools.ietf.org/html/rfc2822) standard. 3. The `Subject` headers must match. 
            ///
            /// - Remark: Generated from `#/components/schemas/Message/threadId`.
            public var threadId: Swift.String?
            /// Creates a new `Message`.
            ///
            /// - Parameters:
            ///   - historyId: The ID of the last history record that modified this message.
            ///   - id: The immutable ID of the message.
            ///   - internalDate: The internal message creation timestamp (epoch ms), which determines ordering in the inbox. For normal SMTP-received email, this represents the time the message was originally accepted by Google, which is more reliable than the `Date` header. However, for API-migrated mail, it can be configured by client to be based on the `Date` header.
            ///   - labelIds: List of IDs of labels applied to this message.
            ///   - payload:
            ///   - raw: The entire email message in an RFC 2822 formatted and base64url encoded string. Returned in `messages.get` and `drafts.get` responses when the `format=RAW` parameter is supplied.
            ///   - sizeEstimate: Estimated size in bytes of the message.
            ///   - snippet: A short part of the message text.
            ///   - threadId: The ID of the thread the message belongs to. To add a message or draft to a thread, the following criteria must be met: 1. The requested `threadId` must be specified on the `Message` or `Draft.Message` you supply with your request. 2. The `References` and `In-Reply-To` headers must be set in compliance with the [RFC 2822](https://tools.ietf.org/html/rfc2822) standard. 3. The `Subject` headers must match. 
            public init(
                historyId: Swift.String? = nil,
                id: Swift.String? = nil,
                internalDate: Swift.String? = nil,
                labelIds: [Swift.String]? = nil,
                payload: Components.Schemas.MessagePart? = nil,
                raw: OpenAPIRuntime.Base64EncodedData? = nil,
                sizeEstimate: Swift.Int32? = nil,
                snippet: Swift.String? = nil,
                threadId: Swift.String? = nil
            ) {
                self.historyId = historyId
                self.id = id
                self.internalDate = internalDate
                self.labelIds = labelIds
                self.payload = payload
                self.raw = raw
                self.sizeEstimate = sizeEstimate
                self.snippet = snippet
                self.threadId = threadId
            }
            public enum CodingKeys: String, CodingKey {
                case historyId
                case id
                case internalDate
                case labelIds
                case payload
                case raw
                case sizeEstimate
                case snippet
                case threadId
            }
        }
        /// A single MIME message part.
        ///
        /// - Remark: Generated from `#/components/schemas/MessagePart`.
        public struct MessagePart: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/MessagePart/body`.
            public var body: Components.Schemas.MessagePartBody? {
                get  {
                    self.storage.value.body
                }
                _modify {
                    yield &self.storage.value.body
                }
            }
            /// The filename of the attachment. Only present if this message part represents an attachment.
            ///
            /// - Remark: Generated from `#/components/schemas/MessagePart/filename`.
            public var filename: Swift.String? {
                get  {
                    self.storage.value.filename
                }
                _modify {
                    yield &self.storage.value.filename
                }
            }
            /// List of headers on this message part. For the top-level message part, representing the entire message payload, it will contain the standard RFC 2822 email headers such as `To`, `From`, and `Subject`.
            ///
            /// - Remark: Generated from `#/components/schemas/MessagePart/headers`.
            public var headers: [Components.Schemas.MessagePartHeader]? {
                get  {
                    self.storage.value.headers
                }
                _modify {
                    yield &self.storage.value.headers
                }
            }
            /// The MIME type of the message part.
            ///
            /// - Remark: Generated from `#/components/schemas/MessagePart/mimeType`.
            public var mimeType: Swift.String? {
                get  {
                    self.storage.value.mimeType
                }
                _modify {
                    yield &self.storage.value.mimeType
                }
            }
            /// The immutable ID of the message part.
            ///
            /// - Remark: Generated from `#/components/schemas/MessagePart/partId`.
            public var partId: Swift.String? {
                get  {
                    self.storage.value.partId
                }
                _modify {
                    yield &self.storage.value.partId
                }
            }
            /// The child MIME message parts of this part. This only applies to container MIME message parts, for example `multipart/*`. For non- container MIME message part types, such as `text/plain`, this field is empty. For more information, see RFC 1521.
            ///
            /// - Remark: Generated from `#/components/schemas/MessagePart/parts`.
            public var parts: [Components.Schemas.MessagePart]? {
                get  {
                    self.storage.value.parts
                }
                _modify {
                    yield &self.storage.value.parts
                }
            }
            /// Creates a new `MessagePart`.
            ///
            /// - Parameters:
            ///   - body:
            ///   - filename: The filename of the attachment. Only present if this message part represents an attachment.
            ///   - headers: List of headers on this message part. For the top-level message part, representing the entire message payload, it will contain the standard RFC 2822 email headers such as `To`, `From`, and `Subject`.
            ///   - mimeType: The MIME type of the message part.
            ///   - partId: The immutable ID of the message part.
            ///   - parts: The child MIME message parts of this part. This only applies to container MIME message parts, for example `multipart/*`. For non- container MIME message part types, such as `text/plain`, this field is empty. For more information, see RFC 1521.
            public init(
                body: Components.Schemas.MessagePartBody? = nil,
                filename: Swift.String? = nil,
                headers: [Components.Schemas.MessagePartHeader]? = nil,
                mimeType: Swift.String? = nil,
                partId: Swift.String? = nil,
                parts: [Components.Schemas.MessagePart]? = nil
            ) {
                self.storage = .init(value: .init(
                    body: body,
                    filename: filename,
                    headers: headers,
                    mimeType: mimeType,
                    partId: partId,
                    parts: parts
                ))
            }
            public enum CodingKeys: String, CodingKey {
                case body
                case filename
                case headers
                case mimeType
                case partId
                case parts
            }
            public init(from decoder: any Decoder) throws {
                self.storage = try .init(from: decoder)
            }
            public func encode(to encoder: any Encoder) throws {
                try self.storage.encode(to: encoder)
            }
            /// Internal reference storage to allow type recursion.
            private var storage: OpenAPIRuntime.CopyOnWriteBox<Storage>
            private struct Storage: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/MessagePart/body`.
                var body: Components.Schemas.MessagePartBody?
                /// The filename of the attachment. Only present if this message part represents an attachment.
                ///
                /// - Remark: Generated from `#/components/schemas/MessagePart/filename`.
                var filename: Swift.String?
                /// List of headers on this message part. For the top-level message part, representing the entire message payload, it will contain the standard RFC 2822 email headers such as `To`, `From`, and `Subject`.
                ///
                /// - Remark: Generated from `#/components/schemas/MessagePart/headers`.
                var headers: [Components.Schemas.MessagePartHeader]?
                /// The MIME type of the message part.
                ///
                /// - Remark: Generated from `#/components/schemas/MessagePart/mimeType`.
                var mimeType: Swift.String?
                /// The immutable ID of the message part.
                ///
                /// - Remark: Generated from `#/components/schemas/MessagePart/partId`.
                var partId: Swift.String?
                /// The child MIME message parts of this part. This only applies to container MIME message parts, for example `multipart/*`. For non- container MIME message part types, such as `text/plain`, this field is empty. For more information, see RFC 1521.
                ///
                /// - Remark: Generated from `#/components/schemas/MessagePart/parts`.
                var parts: [Components.Schemas.MessagePart]?
                init(
                    body: Components.Schemas.MessagePartBody? = nil,
                    filename: Swift.String? = nil,
                    headers: [Components.Schemas.MessagePartHeader]? = nil,
                    mimeType: Swift.String? = nil,
                    partId: Swift.String? = nil,
                    parts: [Components.Schemas.MessagePart]? = nil
                ) {
                    self.body = body
                    self.filename = filename
                    self.headers = headers
                    self.mimeType = mimeType
                    self.partId = partId
                    self.parts = parts
                }
                typealias CodingKeys = Components.Schemas.MessagePart.CodingKeys
            }
        }
        /// The body of a single MIME message part.
        ///
        /// - Remark: Generated from `#/components/schemas/MessagePartBody`.
        public struct MessagePartBody: Codable, Hashable, Sendable {
            /// When present, contains the ID of an external attachment that can be retrieved in a separate `messages.attachments.get` request. When not present, the entire content of the message part body is contained in the data field.
            ///
            /// - Remark: Generated from `#/components/schemas/MessagePartBody/attachmentId`.
            public var attachmentId: Swift.String?
            /// The body data of a MIME message part as a base64url encoded string. May be empty for MIME container types that have no message body or when the body data is sent as a separate attachment. An attachment ID is present if the body data is contained in a separate attachment.
            ///
            /// - Remark: Generated from `#/components/schemas/MessagePartBody/data`.
            public var data: OpenAPIRuntime.Base64EncodedData?
            /// Number of bytes for the message part data (encoding notwithstanding).
            ///
            /// - Remark: Generated from `#/components/schemas/MessagePartBody/size`.
            public var size: Swift.Int32?
            /// Creates a new `MessagePartBody`.
            ///
            /// - Parameters:
            ///   - attachmentId: When present, contains the ID of an external attachment that can be retrieved in a separate `messages.attachments.get` request. When not present, the entire content of the message part body is contained in the data field.
            ///   - data: The body data of a MIME message part as a base64url encoded string. May be empty for MIME container types that have no message body or when the body data is sent as a separate attachment. An attachment ID is present if the body data is contained in a separate attachment.
            ///   - size: Number of bytes for the message part data (encoding notwithstanding).
            public init(
                attachmentId: Swift.String? = nil,
                data: OpenAPIRuntime.Base64EncodedData? = nil,
                size: Swift.Int32? = nil
            ) {
                self.attachmentId = attachmentId
                self.data = data
                self.size = size
            }
            public enum CodingKeys: String, CodingKey {
                case attachmentId
                case data
                case size
            }
        }
        /// - Remark: Generated from `#/components/schemas/MessagePartHeader`.
        public struct MessagePartHeader: Codable, Hashable, Sendable {
            /// The name of the header before the `:` separator. For example, `To`.
            ///
            /// - Remark: Generated from `#/components/schemas/MessagePartHeader/name`.
            public var name: Swift.String?
            /// The value of the header after the `:` separator. For example, `someuser@example.com`.
            ///
            /// - Remark: Generated from `#/components/schemas/MessagePartHeader/value`.
            public var value: Swift.String?
            /// Creates a new `MessagePartHeader`.
            ///
            /// - Parameters:
            ///   - name: The name of the header before the `:` separator. For example, `To`.
            ///   - value: The value of the header after the `:` separator. For example, `someuser@example.com`.
            public init(
                name: Swift.String? = nil,
                value: Swift.String? = nil
            ) {
                self.name = name
                self.value = value
            }
            public enum CodingKeys: String, CodingKey {
                case name
                case value
            }
        }
        /// - Remark: Generated from `#/components/schemas/ModifyMessageRequest`.
        public struct ModifyMessageRequest: Codable, Hashable, Sendable {
            /// A list of IDs of labels to add to this message. You can add up to 100 labels with each update.
            ///
            /// - Remark: Generated from `#/components/schemas/ModifyMessageRequest/addLabelIds`.
            public var addLabelIds: [Swift.String]?
            /// A list IDs of labels to remove from this message. You can remove up to 100 labels with each update.
            ///
            /// - Remark: Generated from `#/components/schemas/ModifyMessageRequest/removeLabelIds`.
            public var removeLabelIds: [Swift.String]?
            /// Creates a new `ModifyMessageRequest`.
            ///
            /// - Parameters:
            ///   - addLabelIds: A list of IDs of labels to add to this message. You can add up to 100 labels with each update.
            ///   - removeLabelIds: A list IDs of labels to remove from this message. You can remove up to 100 labels with each update.
            public init(
                addLabelIds: [Swift.String]? = nil,
                removeLabelIds: [Swift.String]? = nil
            ) {
                self.addLabelIds = addLabelIds
                self.removeLabelIds = removeLabelIds
            }
            public enum CodingKeys: String, CodingKey {
                case addLabelIds
                case removeLabelIds
            }
        }
        /// - Remark: Generated from `#/components/schemas/ModifyThreadRequest`.
        public struct ModifyThreadRequest: Codable, Hashable, Sendable {
            /// A list of IDs of labels to add to this thread. You can add up to 100 labels with each update.
            ///
            /// - Remark: Generated from `#/components/schemas/ModifyThreadRequest/addLabelIds`.
            public var addLabelIds: [Swift.String]?
            /// A list of IDs of labels to remove from this thread. You can remove up to 100 labels with each update.
            ///
            /// - Remark: Generated from `#/components/schemas/ModifyThreadRequest/removeLabelIds`.
            public var removeLabelIds: [Swift.String]?
            /// Creates a new `ModifyThreadRequest`.
            ///
            /// - Parameters:
            ///   - addLabelIds: A list of IDs of labels to add to this thread. You can add up to 100 labels with each update.
            ///   - removeLabelIds: A list of IDs of labels to remove from this thread. You can remove up to 100 labels with each update.
            public init(
                addLabelIds: [Swift.String]? = nil,
                removeLabelIds: [Swift.String]? = nil
            ) {
                self.addLabelIds = addLabelIds
                self.removeLabelIds = removeLabelIds
            }
            public enum CodingKeys: String, CodingKey {
                case addLabelIds
                case removeLabelIds
            }
        }
        /// Request to obliterate a CSE key pair.
        ///
        /// - Remark: Generated from `#/components/schemas/ObliterateCseKeyPairRequest`.
        public typealias ObliterateCseKeyPairRequest = OpenAPIRuntime.OpenAPIObjectContainer
        /// POP settings for an account.
        ///
        /// - Remark: Generated from `#/components/schemas/PopSettings`.
        public struct PopSettings: Codable, Hashable, Sendable {
            /// The range of messages which are accessible via POP.
            ///
            /// - Remark: Generated from `#/components/schemas/PopSettings/accessWindow`.
            @frozen public enum AccessWindowPayload: String, Codable, Hashable, Sendable, CaseIterable {
                case accessWindowUnspecified = "accessWindowUnspecified"
                case disabled = "disabled"
                case fromNowOn = "fromNowOn"
                case allMail = "allMail"
            }
            /// The range of messages which are accessible via POP.
            ///
            /// - Remark: Generated from `#/components/schemas/PopSettings/accessWindow`.
            public var accessWindow: Components.Schemas.PopSettings.AccessWindowPayload?
            /// The action that will be executed on a message after it has been fetched via POP.
            ///
            /// - Remark: Generated from `#/components/schemas/PopSettings/disposition`.
            @frozen public enum DispositionPayload: String, Codable, Hashable, Sendable, CaseIterable {
                case dispositionUnspecified = "dispositionUnspecified"
                case leaveInInbox = "leaveInInbox"
                case archive = "archive"
                case trash = "trash"
                case markRead = "markRead"
            }
            /// The action that will be executed on a message after it has been fetched via POP.
            ///
            /// - Remark: Generated from `#/components/schemas/PopSettings/disposition`.
            public var disposition: Components.Schemas.PopSettings.DispositionPayload?
            /// Creates a new `PopSettings`.
            ///
            /// - Parameters:
            ///   - accessWindow: The range of messages which are accessible via POP.
            ///   - disposition: The action that will be executed on a message after it has been fetched via POP.
            public init(
                accessWindow: Components.Schemas.PopSettings.AccessWindowPayload? = nil,
                disposition: Components.Schemas.PopSettings.DispositionPayload? = nil
            ) {
                self.accessWindow = accessWindow
                self.disposition = disposition
            }
            public enum CodingKeys: String, CodingKey {
                case accessWindow
                case disposition
            }
        }
        /// Profile for a Gmail user.
        ///
        /// - Remark: Generated from `#/components/schemas/Profile`.
        public struct Profile: Codable, Hashable, Sendable {
            /// The user's email address.
            ///
            /// - Remark: Generated from `#/components/schemas/Profile/emailAddress`.
            public var emailAddress: Swift.String?
            /// The ID of the mailbox's current history record.
            ///
            /// - Remark: Generated from `#/components/schemas/Profile/historyId`.
            public var historyId: Swift.String?
            /// The total number of messages in the mailbox.
            ///
            /// - Remark: Generated from `#/components/schemas/Profile/messagesTotal`.
            public var messagesTotal: Swift.Int32?
            /// The total number of threads in the mailbox.
            ///
            /// - Remark: Generated from `#/components/schemas/Profile/threadsTotal`.
            public var threadsTotal: Swift.Int32?
            /// Creates a new `Profile`.
            ///
            /// - Parameters:
            ///   - emailAddress: The user's email address.
            ///   - historyId: The ID of the mailbox's current history record.
            ///   - messagesTotal: The total number of messages in the mailbox.
            ///   - threadsTotal: The total number of threads in the mailbox.
            public init(
                emailAddress: Swift.String? = nil,
                historyId: Swift.String? = nil,
                messagesTotal: Swift.Int32? = nil,
                threadsTotal: Swift.Int32? = nil
            ) {
                self.emailAddress = emailAddress
                self.historyId = historyId
                self.messagesTotal = messagesTotal
                self.threadsTotal = threadsTotal
            }
            public enum CodingKeys: String, CodingKey {
                case emailAddress
                case historyId
                case messagesTotal
                case threadsTotal
            }
        }
        /// Settings associated with a send-as alias, which can be either the primary login address associated with the account or a custom "from" address. Send-as aliases correspond to the "Send Mail As" feature in the web interface.
        ///
        /// - Remark: Generated from `#/components/schemas/SendAs`.
        public struct SendAs: Codable, Hashable, Sendable {
            /// A name that appears in the "From:" header for mail sent using this alias. For custom "from" addresses, when this is empty, Gmail will populate the "From:" header with the name that is used for the primary address associated with the account. If the admin has disabled the ability for users to update their name format, requests to update this field for the primary login will silently fail.
            ///
            /// - Remark: Generated from `#/components/schemas/SendAs/displayName`.
            public var displayName: Swift.String?
            /// Whether this address is selected as the default "From:" address in situations such as composing a new message or sending a vacation auto-reply. Every Gmail account has exactly one default send-as address, so the only legal value that clients may write to this field is `true`. Changing this from `false` to `true` for an address will result in this field becoming `false` for the other previous default address.
            ///
            /// - Remark: Generated from `#/components/schemas/SendAs/isDefault`.
            public var isDefault: Swift.Bool?
            /// Whether this address is the primary address used to login to the account. Every Gmail account has exactly one primary address, and it cannot be deleted from the collection of send-as aliases. This field is read-only.
            ///
            /// - Remark: Generated from `#/components/schemas/SendAs/isPrimary`.
            public var isPrimary: Swift.Bool?
            /// An optional email address that is included in a "Reply-To:" header for mail sent using this alias. If this is empty, Gmail will not generate a "Reply-To:" header.
            ///
            /// - Remark: Generated from `#/components/schemas/SendAs/replyToAddress`.
            public var replyToAddress: Swift.String?
            /// The email address that appears in the "From:" header for mail sent using this alias. This is read-only for all operations except create.
            ///
            /// - Remark: Generated from `#/components/schemas/SendAs/sendAsEmail`.
            public var sendAsEmail: Swift.String?
            /// An optional HTML signature that is included in messages composed with this alias in the Gmail web UI. This signature is added to new emails only.
            ///
            /// - Remark: Generated from `#/components/schemas/SendAs/signature`.
            public var signature: Swift.String?
            /// - Remark: Generated from `#/components/schemas/SendAs/smtpMsa`.
            public var smtpMsa: Components.Schemas.SmtpMsa?
            /// Whether Gmail should treat this address as an alias for the user's primary email address. This setting only applies to custom "from" aliases.
            ///
            /// - Remark: Generated from `#/components/schemas/SendAs/treatAsAlias`.
            public var treatAsAlias: Swift.Bool?
            /// Indicates whether this address has been verified for use as a send-as alias. Read-only. This setting only applies to custom "from" aliases.
            ///
            /// - Remark: Generated from `#/components/schemas/SendAs/verificationStatus`.
            @frozen public enum VerificationStatusPayload: String, Codable, Hashable, Sendable, CaseIterable {
                case verificationStatusUnspecified = "verificationStatusUnspecified"
                case accepted = "accepted"
                case pending = "pending"
            }
            /// Indicates whether this address has been verified for use as a send-as alias. Read-only. This setting only applies to custom "from" aliases.
            ///
            /// - Remark: Generated from `#/components/schemas/SendAs/verificationStatus`.
            public var verificationStatus: Components.Schemas.SendAs.VerificationStatusPayload?
            /// Creates a new `SendAs`.
            ///
            /// - Parameters:
            ///   - displayName: A name that appears in the "From:" header for mail sent using this alias. For custom "from" addresses, when this is empty, Gmail will populate the "From:" header with the name that is used for the primary address associated with the account. If the admin has disabled the ability for users to update their name format, requests to update this field for the primary login will silently fail.
            ///   - isDefault: Whether this address is selected as the default "From:" address in situations such as composing a new message or sending a vacation auto-reply. Every Gmail account has exactly one default send-as address, so the only legal value that clients may write to this field is `true`. Changing this from `false` to `true` for an address will result in this field becoming `false` for the other previous default address.
            ///   - isPrimary: Whether this address is the primary address used to login to the account. Every Gmail account has exactly one primary address, and it cannot be deleted from the collection of send-as aliases. This field is read-only.
            ///   - replyToAddress: An optional email address that is included in a "Reply-To:" header for mail sent using this alias. If this is empty, Gmail will not generate a "Reply-To:" header.
            ///   - sendAsEmail: The email address that appears in the "From:" header for mail sent using this alias. This is read-only for all operations except create.
            ///   - signature: An optional HTML signature that is included in messages composed with this alias in the Gmail web UI. This signature is added to new emails only.
            ///   - smtpMsa:
            ///   - treatAsAlias: Whether Gmail should treat this address as an alias for the user's primary email address. This setting only applies to custom "from" aliases.
            ///   - verificationStatus: Indicates whether this address has been verified for use as a send-as alias. Read-only. This setting only applies to custom "from" aliases.
            public init(
                displayName: Swift.String? = nil,
                isDefault: Swift.Bool? = nil,
                isPrimary: Swift.Bool? = nil,
                replyToAddress: Swift.String? = nil,
                sendAsEmail: Swift.String? = nil,
                signature: Swift.String? = nil,
                smtpMsa: Components.Schemas.SmtpMsa? = nil,
                treatAsAlias: Swift.Bool? = nil,
                verificationStatus: Components.Schemas.SendAs.VerificationStatusPayload? = nil
            ) {
                self.displayName = displayName
                self.isDefault = isDefault
                self.isPrimary = isPrimary
                self.replyToAddress = replyToAddress
                self.sendAsEmail = sendAsEmail
                self.signature = signature
                self.smtpMsa = smtpMsa
                self.treatAsAlias = treatAsAlias
                self.verificationStatus = verificationStatus
            }
            public enum CodingKeys: String, CodingKey {
                case displayName
                case isDefault
                case isPrimary
                case replyToAddress
                case sendAsEmail
                case signature
                case smtpMsa
                case treatAsAlias
                case verificationStatus
            }
        }
        /// The configuration of a CSE identity that uses different key pairs for signing and encryption.
        ///
        /// - Remark: Generated from `#/components/schemas/SignAndEncryptKeyPairs`.
        public struct SignAndEncryptKeyPairs: Codable, Hashable, Sendable {
            /// The ID of the CseKeyPair that encrypts signed outgoing mail.
            ///
            /// - Remark: Generated from `#/components/schemas/SignAndEncryptKeyPairs/encryptionKeyPairId`.
            public var encryptionKeyPairId: Swift.String?
            /// The ID of the CseKeyPair that signs outgoing mail.
            ///
            /// - Remark: Generated from `#/components/schemas/SignAndEncryptKeyPairs/signingKeyPairId`.
            public var signingKeyPairId: Swift.String?
            /// Creates a new `SignAndEncryptKeyPairs`.
            ///
            /// - Parameters:
            ///   - encryptionKeyPairId: The ID of the CseKeyPair that encrypts signed outgoing mail.
            ///   - signingKeyPairId: The ID of the CseKeyPair that signs outgoing mail.
            public init(
                encryptionKeyPairId: Swift.String? = nil,
                signingKeyPairId: Swift.String? = nil
            ) {
                self.encryptionKeyPairId = encryptionKeyPairId
                self.signingKeyPairId = signingKeyPairId
            }
            public enum CodingKeys: String, CodingKey {
                case encryptionKeyPairId
                case signingKeyPairId
            }
        }
        /// An S/MIME email config.
        ///
        /// - Remark: Generated from `#/components/schemas/SmimeInfo`.
        public struct SmimeInfo: Codable, Hashable, Sendable {
            /// Encrypted key password, when key is encrypted.
            ///
            /// - Remark: Generated from `#/components/schemas/SmimeInfo/encryptedKeyPassword`.
            public var encryptedKeyPassword: Swift.String?
            /// When the certificate expires (in milliseconds since epoch).
            ///
            /// - Remark: Generated from `#/components/schemas/SmimeInfo/expiration`.
            public var expiration: Swift.String?
            /// The immutable ID for the SmimeInfo.
            ///
            /// - Remark: Generated from `#/components/schemas/SmimeInfo/id`.
            public var id: Swift.String?
            /// Whether this SmimeInfo is the default one for this user's send-as address.
            ///
            /// - Remark: Generated from `#/components/schemas/SmimeInfo/isDefault`.
            public var isDefault: Swift.Bool?
            /// The S/MIME certificate issuer's common name.
            ///
            /// - Remark: Generated from `#/components/schemas/SmimeInfo/issuerCn`.
            public var issuerCn: Swift.String?
            /// PEM formatted X509 concatenated certificate string (standard base64 encoding). Format used for returning key, which includes public key as well as certificate chain (not private key).
            ///
            /// - Remark: Generated from `#/components/schemas/SmimeInfo/pem`.
            public var pem: Swift.String?
            /// PKCS#12 format containing a single private/public key pair and certificate chain. This format is only accepted from client for creating a new SmimeInfo and is never returned, because the private key is not intended to be exported. PKCS#12 may be encrypted, in which case encryptedKeyPassword should be set appropriately.
            ///
            /// - Remark: Generated from `#/components/schemas/SmimeInfo/pkcs12`.
            public var pkcs12: OpenAPIRuntime.Base64EncodedData?
            /// Creates a new `SmimeInfo`.
            ///
            /// - Parameters:
            ///   - encryptedKeyPassword: Encrypted key password, when key is encrypted.
            ///   - expiration: When the certificate expires (in milliseconds since epoch).
            ///   - id: The immutable ID for the SmimeInfo.
            ///   - isDefault: Whether this SmimeInfo is the default one for this user's send-as address.
            ///   - issuerCn: The S/MIME certificate issuer's common name.
            ///   - pem: PEM formatted X509 concatenated certificate string (standard base64 encoding). Format used for returning key, which includes public key as well as certificate chain (not private key).
            ///   - pkcs12: PKCS#12 format containing a single private/public key pair and certificate chain. This format is only accepted from client for creating a new SmimeInfo and is never returned, because the private key is not intended to be exported. PKCS#12 may be encrypted, in which case encryptedKeyPassword should be set appropriately.
            public init(
                encryptedKeyPassword: Swift.String? = nil,
                expiration: Swift.String? = nil,
                id: Swift.String? = nil,
                isDefault: Swift.Bool? = nil,
                issuerCn: Swift.String? = nil,
                pem: Swift.String? = nil,
                pkcs12: OpenAPIRuntime.Base64EncodedData? = nil
            ) {
                self.encryptedKeyPassword = encryptedKeyPassword
                self.expiration = expiration
                self.id = id
                self.isDefault = isDefault
                self.issuerCn = issuerCn
                self.pem = pem
                self.pkcs12 = pkcs12
            }
            public enum CodingKeys: String, CodingKey {
                case encryptedKeyPassword
                case expiration
                case id
                case isDefault
                case issuerCn
                case pem
                case pkcs12
            }
        }
        /// Configuration for communication with an SMTP service.
        ///
        /// - Remark: Generated from `#/components/schemas/SmtpMsa`.
        public struct SmtpMsa: Codable, Hashable, Sendable {
            /// The hostname of the SMTP service. Required.
            ///
            /// - Remark: Generated from `#/components/schemas/SmtpMsa/host`.
            public var host: Swift.String?
            /// The password that will be used for authentication with the SMTP service. This is a write-only field that can be specified in requests to create or update SendAs settings; it is never populated in responses.
            ///
            /// - Remark: Generated from `#/components/schemas/SmtpMsa/password`.
            public var password: Swift.String?
            /// The port of the SMTP service. Required.
            ///
            /// - Remark: Generated from `#/components/schemas/SmtpMsa/port`.
            public var port: Swift.Int32?
            /// The protocol that will be used to secure communication with the SMTP service. Required.
            ///
            /// - Remark: Generated from `#/components/schemas/SmtpMsa/securityMode`.
            @frozen public enum SecurityModePayload: String, Codable, Hashable, Sendable, CaseIterable {
                case securityModeUnspecified = "securityModeUnspecified"
                case none = "none"
                case ssl = "ssl"
                case starttls = "starttls"
            }
            /// The protocol that will be used to secure communication with the SMTP service. Required.
            ///
            /// - Remark: Generated from `#/components/schemas/SmtpMsa/securityMode`.
            public var securityMode: Components.Schemas.SmtpMsa.SecurityModePayload?
            /// The username that will be used for authentication with the SMTP service. This is a write-only field that can be specified in requests to create or update SendAs settings; it is never populated in responses.
            ///
            /// - Remark: Generated from `#/components/schemas/SmtpMsa/username`.
            public var username: Swift.String?
            /// Creates a new `SmtpMsa`.
            ///
            /// - Parameters:
            ///   - host: The hostname of the SMTP service. Required.
            ///   - password: The password that will be used for authentication with the SMTP service. This is a write-only field that can be specified in requests to create or update SendAs settings; it is never populated in responses.
            ///   - port: The port of the SMTP service. Required.
            ///   - securityMode: The protocol that will be used to secure communication with the SMTP service. Required.
            ///   - username: The username that will be used for authentication with the SMTP service. This is a write-only field that can be specified in requests to create or update SendAs settings; it is never populated in responses.
            public init(
                host: Swift.String? = nil,
                password: Swift.String? = nil,
                port: Swift.Int32? = nil,
                securityMode: Components.Schemas.SmtpMsa.SecurityModePayload? = nil,
                username: Swift.String? = nil
            ) {
                self.host = host
                self.password = password
                self.port = port
                self.securityMode = securityMode
                self.username = username
            }
            public enum CodingKeys: String, CodingKey {
                case host
                case password
                case port
                case securityMode
                case username
            }
        }
        /// A collection of messages representing a conversation.
        ///
        /// - Remark: Generated from `#/components/schemas/Thread`.
        public struct Thread: Codable, Hashable, Sendable {
            /// The ID of the last history record that modified this thread.
            ///
            /// - Remark: Generated from `#/components/schemas/Thread/historyId`.
            public var historyId: Swift.String?
            /// The unique ID of the thread.
            ///
            /// - Remark: Generated from `#/components/schemas/Thread/id`.
            public var id: Swift.String?
            /// The list of messages in the thread.
            ///
            /// - Remark: Generated from `#/components/schemas/Thread/messages`.
            public var messages: [Components.Schemas.Message]?
            /// A short part of the message text.
            ///
            /// - Remark: Generated from `#/components/schemas/Thread/snippet`.
            public var snippet: Swift.String?
            /// Creates a new `Thread`.
            ///
            /// - Parameters:
            ///   - historyId: The ID of the last history record that modified this thread.
            ///   - id: The unique ID of the thread.
            ///   - messages: The list of messages in the thread.
            ///   - snippet: A short part of the message text.
            public init(
                historyId: Swift.String? = nil,
                id: Swift.String? = nil,
                messages: [Components.Schemas.Message]? = nil,
                snippet: Swift.String? = nil
            ) {
                self.historyId = historyId
                self.id = id
                self.messages = messages
                self.snippet = snippet
            }
            public enum CodingKeys: String, CodingKey {
                case historyId
                case id
                case messages
                case snippet
            }
        }
        /// Vacation auto-reply settings for an account. These settings correspond to the "Vacation responder" feature in the web interface.
        ///
        /// - Remark: Generated from `#/components/schemas/VacationSettings`.
        public struct VacationSettings: Codable, Hashable, Sendable {
            /// Flag that controls whether Gmail automatically replies to messages.
            ///
            /// - Remark: Generated from `#/components/schemas/VacationSettings/enableAutoReply`.
            public var enableAutoReply: Swift.Bool?
            /// An optional end time for sending auto-replies (epoch ms). When this is specified, Gmail will automatically reply only to messages that it receives before the end time. If both `startTime` and `endTime` are specified, `startTime` must precede `endTime`.
            ///
            /// - Remark: Generated from `#/components/schemas/VacationSettings/endTime`.
            public var endTime: Swift.String?
            /// Response body in HTML format. Gmail will sanitize the HTML before storing it. If both `response_body_plain_text` and `response_body_html` are specified, `response_body_html` will be used.
            ///
            /// - Remark: Generated from `#/components/schemas/VacationSettings/responseBodyHtml`.
            public var responseBodyHtml: Swift.String?
            /// Response body in plain text format. If both `response_body_plain_text` and `response_body_html` are specified, `response_body_html` will be used.
            ///
            /// - Remark: Generated from `#/components/schemas/VacationSettings/responseBodyPlainText`.
            public var responseBodyPlainText: Swift.String?
            /// Optional text to prepend to the subject line in vacation responses. In order to enable auto-replies, either the response subject or the response body must be nonempty.
            ///
            /// - Remark: Generated from `#/components/schemas/VacationSettings/responseSubject`.
            public var responseSubject: Swift.String?
            /// Flag that determines whether responses are sent to recipients who are not in the user's list of contacts.
            ///
            /// - Remark: Generated from `#/components/schemas/VacationSettings/restrictToContacts`.
            public var restrictToContacts: Swift.Bool?
            /// Flag that determines whether responses are sent to recipients who are outside of the user's domain. This feature is only available for Google Workspace users.
            ///
            /// - Remark: Generated from `#/components/schemas/VacationSettings/restrictToDomain`.
            public var restrictToDomain: Swift.Bool?
            /// An optional start time for sending auto-replies (epoch ms). When this is specified, Gmail will automatically reply only to messages that it receives after the start time. If both `startTime` and `endTime` are specified, `startTime` must precede `endTime`.
            ///
            /// - Remark: Generated from `#/components/schemas/VacationSettings/startTime`.
            public var startTime: Swift.String?
            /// Creates a new `VacationSettings`.
            ///
            /// - Parameters:
            ///   - enableAutoReply: Flag that controls whether Gmail automatically replies to messages.
            ///   - endTime: An optional end time for sending auto-replies (epoch ms). When this is specified, Gmail will automatically reply only to messages that it receives before the end time. If both `startTime` and `endTime` are specified, `startTime` must precede `endTime`.
            ///   - responseBodyHtml: Response body in HTML format. Gmail will sanitize the HTML before storing it. If both `response_body_plain_text` and `response_body_html` are specified, `response_body_html` will be used.
            ///   - responseBodyPlainText: Response body in plain text format. If both `response_body_plain_text` and `response_body_html` are specified, `response_body_html` will be used.
            ///   - responseSubject: Optional text to prepend to the subject line in vacation responses. In order to enable auto-replies, either the response subject or the response body must be nonempty.
            ///   - restrictToContacts: Flag that determines whether responses are sent to recipients who are not in the user's list of contacts.
            ///   - restrictToDomain: Flag that determines whether responses are sent to recipients who are outside of the user's domain. This feature is only available for Google Workspace users.
            ///   - startTime: An optional start time for sending auto-replies (epoch ms). When this is specified, Gmail will automatically reply only to messages that it receives after the start time. If both `startTime` and `endTime` are specified, `startTime` must precede `endTime`.
            public init(
                enableAutoReply: Swift.Bool? = nil,
                endTime: Swift.String? = nil,
                responseBodyHtml: Swift.String? = nil,
                responseBodyPlainText: Swift.String? = nil,
                responseSubject: Swift.String? = nil,
                restrictToContacts: Swift.Bool? = nil,
                restrictToDomain: Swift.Bool? = nil,
                startTime: Swift.String? = nil
            ) {
                self.enableAutoReply = enableAutoReply
                self.endTime = endTime
                self.responseBodyHtml = responseBodyHtml
                self.responseBodyPlainText = responseBodyPlainText
                self.responseSubject = responseSubject
                self.restrictToContacts = restrictToContacts
                self.restrictToDomain = restrictToDomain
                self.startTime = startTime
            }
            public enum CodingKeys: String, CodingKey {
                case enableAutoReply
                case endTime
                case responseBodyHtml
                case responseBodyPlainText
                case responseSubject
                case restrictToContacts
                case restrictToDomain
                case startTime
            }
        }
        /// Set up or update a new push notification watch on this user's mailbox.
        ///
        /// - Remark: Generated from `#/components/schemas/WatchRequest`.
        public struct WatchRequest: Codable, Hashable, Sendable {
            /// Filtering behavior of `labelIds list` specified. This field is deprecated because it caused incorrect behavior in some cases; use `label_filter_behavior` instead.
            ///
            /// - Remark: Generated from `#/components/schemas/WatchRequest/labelFilterAction`.
            @frozen public enum LabelFilterActionPayload: String, Codable, Hashable, Sendable, CaseIterable {
                case include = "include"
                case exclude = "exclude"
            }
            /// Filtering behavior of `labelIds list` specified. This field is deprecated because it caused incorrect behavior in some cases; use `label_filter_behavior` instead.
            ///
            /// - Remark: Generated from `#/components/schemas/WatchRequest/labelFilterAction`.
            @available(*, deprecated)
            public var labelFilterAction: Components.Schemas.WatchRequest.LabelFilterActionPayload?
            /// Filtering behavior of `labelIds list` specified. This field replaces `label_filter_action`; if set, `label_filter_action` is ignored.
            ///
            /// - Remark: Generated from `#/components/schemas/WatchRequest/labelFilterBehavior`.
            @frozen public enum LabelFilterBehaviorPayload: String, Codable, Hashable, Sendable, CaseIterable {
                case include = "include"
                case exclude = "exclude"
            }
            /// Filtering behavior of `labelIds list` specified. This field replaces `label_filter_action`; if set, `label_filter_action` is ignored.
            ///
            /// - Remark: Generated from `#/components/schemas/WatchRequest/labelFilterBehavior`.
            public var labelFilterBehavior: Components.Schemas.WatchRequest.LabelFilterBehaviorPayload?
            /// List of label_ids to restrict notifications about. By default, if unspecified, all changes are pushed out. If specified then dictates which labels are required for a push notification to be generated.
            ///
            /// - Remark: Generated from `#/components/schemas/WatchRequest/labelIds`.
            public var labelIds: [Swift.String]?
            /// A fully qualified Google Cloud Pub/Sub API topic name to publish the events to. This topic name **must** already exist in Cloud Pub/Sub and you **must** have already granted gmail "publish" permission on it. For example, "projects/my-project-identifier/topics/my-topic-name" (using the Cloud Pub/Sub "v1" topic naming format). Note that the "my-project-identifier" portion must exactly match your Google developer project id (the one executing this watch request).
            ///
            /// - Remark: Generated from `#/components/schemas/WatchRequest/topicName`.
            public var topicName: Swift.String?
            /// Creates a new `WatchRequest`.
            ///
            /// - Parameters:
            ///   - labelFilterAction: Filtering behavior of `labelIds list` specified. This field is deprecated because it caused incorrect behavior in some cases; use `label_filter_behavior` instead.
            ///   - labelFilterBehavior: Filtering behavior of `labelIds list` specified. This field replaces `label_filter_action`; if set, `label_filter_action` is ignored.
            ///   - labelIds: List of label_ids to restrict notifications about. By default, if unspecified, all changes are pushed out. If specified then dictates which labels are required for a push notification to be generated.
            ///   - topicName: A fully qualified Google Cloud Pub/Sub API topic name to publish the events to. This topic name **must** already exist in Cloud Pub/Sub and you **must** have already granted gmail "publish" permission on it. For example, "projects/my-project-identifier/topics/my-topic-name" (using the Cloud Pub/Sub "v1" topic naming format). Note that the "my-project-identifier" portion must exactly match your Google developer project id (the one executing this watch request).
            public init(
                labelFilterAction: Components.Schemas.WatchRequest.LabelFilterActionPayload? = nil,
                labelFilterBehavior: Components.Schemas.WatchRequest.LabelFilterBehaviorPayload? = nil,
                labelIds: [Swift.String]? = nil,
                topicName: Swift.String? = nil
            ) {
                self.labelFilterAction = labelFilterAction
                self.labelFilterBehavior = labelFilterBehavior
                self.labelIds = labelIds
                self.topicName = topicName
            }
            public enum CodingKeys: String, CodingKey {
                case labelFilterAction
                case labelFilterBehavior
                case labelIds
                case topicName
            }
        }
        /// Push notification watch response.
        ///
        /// - Remark: Generated from `#/components/schemas/WatchResponse`.
        public struct WatchResponse: Codable, Hashable, Sendable {
            /// When Gmail will stop sending notifications for mailbox updates (epoch millis). Call `watch` again before this time to renew the watch.
            ///
            /// - Remark: Generated from `#/components/schemas/WatchResponse/expiration`.
            public var expiration: Swift.String?
            /// The ID of the mailbox's current history record.
            ///
            /// - Remark: Generated from `#/components/schemas/WatchResponse/historyId`.
            public var historyId: Swift.String?
            /// Creates a new `WatchResponse`.
            ///
            /// - Parameters:
            ///   - expiration: When Gmail will stop sending notifications for mailbox updates (epoch millis). Call `watch` again before this time to renew the watch.
            ///   - historyId: The ID of the mailbox's current history record.
            public init(
                expiration: Swift.String? = nil,
                historyId: Swift.String? = nil
            ) {
                self.expiration = expiration
                self.historyId = historyId
            }
            public enum CodingKeys: String, CodingKey {
                case expiration
                case historyId
            }
        }
    }
    /// Types generated from the `#/components/parameters` section of the OpenAPI document.
    public enum Parameters {
        /// V1 error format.
        ///
        /// - Remark: Generated from `#/components/parameters/_.xgafv`.
        @frozen public enum __period_xgafv: String, Codable, Hashable, Sendable, CaseIterable {
            case _1 = "1"
            case _2 = "2"
        }
        /// OAuth access token.
        ///
        /// - Remark: Generated from `#/components/parameters/access_token`.
        public typealias AccessToken = Swift.String
        /// Data format for response.
        ///
        /// - Remark: Generated from `#/components/parameters/alt`.
        @frozen public enum Alt: String, Codable, Hashable, Sendable, CaseIterable {
            case json = "json"
            case media = "media"
            case proto = "proto"
        }
        /// JSONP
        ///
        /// - Remark: Generated from `#/components/parameters/callback`.
        public typealias Callback = Swift.String
        /// Selector specifying which fields to include in a partial response.
        ///
        /// - Remark: Generated from `#/components/parameters/fields`.
        public typealias Fields = Swift.String
        /// API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
        ///
        /// - Remark: Generated from `#/components/parameters/key`.
        public typealias Key = Swift.String
        /// OAuth 2.0 token for the current user.
        ///
        /// - Remark: Generated from `#/components/parameters/oauth_token`.
        public typealias OauthToken = Swift.String
        /// Returns response with indentations and line breaks.
        ///
        /// - Remark: Generated from `#/components/parameters/prettyPrint`.
        public typealias PrettyPrint = Swift.Bool
        /// Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
        ///
        /// - Remark: Generated from `#/components/parameters/quotaUser`.
        public typealias QuotaUser = Swift.String
        /// Legacy upload protocol for media (e.g. "media", "multipart").
        ///
        /// - Remark: Generated from `#/components/parameters/uploadType`.
        public typealias UploadType = Swift.String
        /// Upload protocol for media (e.g. "raw", "multipart").
        ///
        /// - Remark: Generated from `#/components/parameters/upload_protocol`.
        public typealias UploadProtocol = Swift.String
    }
    /// Types generated from the `#/components/requestBodies` section of the OpenAPI document.
    public enum RequestBodies {}
    /// Types generated from the `#/components/responses` section of the OpenAPI document.
    public enum Responses {}
    /// Types generated from the `#/components/headers` section of the OpenAPI document.
    public enum Headers {}
}

/// API operations, with input and output types, generated from `#/paths` in the OpenAPI document.
public enum Operations {
    /// Lists the drafts in the user's mailbox.
    ///
    /// - Remark: HTTP `GET /gmail/v1/users/{userId}/drafts`.
    /// - Remark: Generated from `#/paths//gmail/v1/users/{userId}/drafts/get(gmail.users.drafts.list)`.
    public enum Gmail_users_drafts_list {
        public static let id: Swift.String = "gmail.users.drafts.list"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/drafts/GET/path`.
            public struct Path: Sendable, Hashable {
                /// The user's email address. The special value `me` can be used to indicate the authenticated user.
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/drafts/GET/path/userId`.
                public var userId: Swift.String
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - userId: The user's email address. The special value `me` can be used to indicate the authenticated user.
                public init(userId: Swift.String) {
                    self.userId = userId
                }
            }
            public var path: Operations.Gmail_users_drafts_list.Input.Path
            /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/drafts/GET/query`.
            public struct Query: Sendable, Hashable {
                /// - Remark: Generated from `#/components/parameters/_.xgafv`.
                @frozen public enum __period_xgafv: String, Codable, Hashable, Sendable, CaseIterable {
                    case _1 = "1"
                    case _2 = "2"
                }
                /// V1 error format.
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/drafts/GET/query/$.xgafv`.
                public var _dollar__xgafv: Components.Parameters.__period_xgafv?
                /// OAuth access token.
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/drafts/GET/query/access_token`.
                public var accessToken: Components.Parameters.AccessToken?
                /// - Remark: Generated from `#/components/parameters/alt`.
                @frozen public enum Alt: String, Codable, Hashable, Sendable, CaseIterable {
                    case json = "json"
                    case media = "media"
                    case proto = "proto"
                }
                /// Data format for response.
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/drafts/GET/query/alt`.
                public var alt: Components.Parameters.Alt?
                /// JSONP
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/drafts/GET/query/callback`.
                public var callback: Components.Parameters.Callback?
                /// Selector specifying which fields to include in a partial response.
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/drafts/GET/query/fields`.
                public var fields: Components.Parameters.Fields?
                /// API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/drafts/GET/query/key`.
                public var key: Components.Parameters.Key?
                /// OAuth 2.0 token for the current user.
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/drafts/GET/query/oauth_token`.
                public var oauthToken: Components.Parameters.OauthToken?
                /// Returns response with indentations and line breaks.
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/drafts/GET/query/prettyPrint`.
                public var prettyPrint: Components.Parameters.PrettyPrint?
                /// Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/drafts/GET/query/quotaUser`.
                public var quotaUser: Components.Parameters.QuotaUser?
                /// Upload protocol for media (e.g. "raw", "multipart").
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/drafts/GET/query/upload_protocol`.
                public var uploadProtocol: Components.Parameters.UploadProtocol?
                /// Legacy upload protocol for media (e.g. "media", "multipart").
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/drafts/GET/query/uploadType`.
                public var uploadType: Components.Parameters.UploadType?
                /// Include drafts from `SPAM` and `TRASH` in the results.
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/drafts/GET/query/includeSpamTrash`.
                public var includeSpamTrash: Swift.Bool?
                /// Maximum number of drafts to return. This field defaults to 100. The maximum allowed value for this field is 500.
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/drafts/GET/query/maxResults`.
                public var maxResults: Swift.Int?
                /// Page token to retrieve a specific page of results in the list.
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/drafts/GET/query/pageToken`.
                public var pageToken: Swift.String?
                /// Only return draft messages matching the specified query. Supports the same query format as the Gmail search box. For example, `"from:someuser@example.com rfc822msgid: is:unread"`.
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/drafts/GET/query/q`.
                public var q: Swift.String?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - _dollar__xgafv: V1 error format.
                ///   - accessToken: OAuth access token.
                ///   - alt: Data format for response.
                ///   - callback: JSONP
                ///   - fields: Selector specifying which fields to include in a partial response.
                ///   - key: API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
                ///   - oauthToken: OAuth 2.0 token for the current user.
                ///   - prettyPrint: Returns response with indentations and line breaks.
                ///   - quotaUser: Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
                ///   - uploadProtocol: Upload protocol for media (e.g. "raw", "multipart").
                ///   - uploadType: Legacy upload protocol for media (e.g. "media", "multipart").
                ///   - includeSpamTrash: Include drafts from `SPAM` and `TRASH` in the results.
                ///   - maxResults: Maximum number of drafts to return. This field defaults to 100. The maximum allowed value for this field is 500.
                ///   - pageToken: Page token to retrieve a specific page of results in the list.
                ///   - q: Only return draft messages matching the specified query. Supports the same query format as the Gmail search box. For example, `"from:someuser@example.com rfc822msgid: is:unread"`.
                public init(
                    _dollar__xgafv: Components.Parameters.__period_xgafv? = nil,
                    accessToken: Components.Parameters.AccessToken? = nil,
                    alt: Components.Parameters.Alt? = nil,
                    callback: Components.Parameters.Callback? = nil,
                    fields: Components.Parameters.Fields? = nil,
                    key: Components.Parameters.Key? = nil,
                    oauthToken: Components.Parameters.OauthToken? = nil,
                    prettyPrint: Components.Parameters.PrettyPrint? = nil,
                    quotaUser: Components.Parameters.QuotaUser? = nil,
                    uploadProtocol: Components.Parameters.UploadProtocol? = nil,
                    uploadType: Components.Parameters.UploadType? = nil,
                    includeSpamTrash: Swift.Bool? = nil,
                    maxResults: Swift.Int? = nil,
                    pageToken: Swift.String? = nil,
                    q: Swift.String? = nil
                ) {
                    self._dollar__xgafv = _dollar__xgafv
                    self.accessToken = accessToken
                    self.alt = alt
                    self.callback = callback
                    self.fields = fields
                    self.key = key
                    self.oauthToken = oauthToken
                    self.prettyPrint = prettyPrint
                    self.quotaUser = quotaUser
                    self.uploadProtocol = uploadProtocol
                    self.uploadType = uploadType
                    self.includeSpamTrash = includeSpamTrash
                    self.maxResults = maxResults
                    self.pageToken = pageToken
                    self.q = q
                }
            }
            public var query: Operations.Gmail_users_drafts_list.Input.Query
            /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/drafts/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.Gmail_users_drafts_list.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.Gmail_users_drafts_list.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.Gmail_users_drafts_list.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - query:
            ///   - headers:
            public init(
                path: Operations.Gmail_users_drafts_list.Input.Path,
                query: Operations.Gmail_users_drafts_list.Input.Query = .init(),
                headers: Operations.Gmail_users_drafts_list.Input.Headers = .init()
            ) {
                self.path = path
                self.query = query
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/drafts/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/drafts/GET/responses/200/content/application\/json`.
                    case json(Components.Schemas.ListDraftsResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.ListDraftsResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.Gmail_users_drafts_list.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.Gmail_users_drafts_list.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Successful response
            ///
            /// - Remark: Generated from `#/paths//gmail/v1/users/{userId}/drafts/get(gmail.users.drafts.list)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.Gmail_users_drafts_list.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.Gmail_users_drafts_list.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Creates a new draft with the `DRAFT` label.
    ///
    /// - Remark: HTTP `POST /gmail/v1/users/{userId}/drafts`.
    /// - Remark: Generated from `#/paths//gmail/v1/users/{userId}/drafts/post(gmail.users.drafts.create)`.
    public enum Gmail_users_drafts_create {
        public static let id: Swift.String = "gmail.users.drafts.create"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/drafts/POST/path`.
            public struct Path: Sendable, Hashable {
                /// The user's email address. The special value `me` can be used to indicate the authenticated user.
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/drafts/POST/path/userId`.
                public var userId: Swift.String
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - userId: The user's email address. The special value `me` can be used to indicate the authenticated user.
                public init(userId: Swift.String) {
                    self.userId = userId
                }
            }
            public var path: Operations.Gmail_users_drafts_create.Input.Path
            /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/drafts/POST/query`.
            public struct Query: Sendable, Hashable {
                /// - Remark: Generated from `#/components/parameters/_.xgafv`.
                @frozen public enum __period_xgafv: String, Codable, Hashable, Sendable, CaseIterable {
                    case _1 = "1"
                    case _2 = "2"
                }
                /// V1 error format.
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/drafts/POST/query/$.xgafv`.
                public var _dollar__xgafv: Components.Parameters.__period_xgafv?
                /// OAuth access token.
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/drafts/POST/query/access_token`.
                public var accessToken: Components.Parameters.AccessToken?
                /// - Remark: Generated from `#/components/parameters/alt`.
                @frozen public enum Alt: String, Codable, Hashable, Sendable, CaseIterable {
                    case json = "json"
                    case media = "media"
                    case proto = "proto"
                }
                /// Data format for response.
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/drafts/POST/query/alt`.
                public var alt: Components.Parameters.Alt?
                /// JSONP
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/drafts/POST/query/callback`.
                public var callback: Components.Parameters.Callback?
                /// Selector specifying which fields to include in a partial response.
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/drafts/POST/query/fields`.
                public var fields: Components.Parameters.Fields?
                /// API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/drafts/POST/query/key`.
                public var key: Components.Parameters.Key?
                /// OAuth 2.0 token for the current user.
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/drafts/POST/query/oauth_token`.
                public var oauthToken: Components.Parameters.OauthToken?
                /// Returns response with indentations and line breaks.
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/drafts/POST/query/prettyPrint`.
                public var prettyPrint: Components.Parameters.PrettyPrint?
                /// Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/drafts/POST/query/quotaUser`.
                public var quotaUser: Components.Parameters.QuotaUser?
                /// Upload protocol for media (e.g. "raw", "multipart").
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/drafts/POST/query/upload_protocol`.
                public var uploadProtocol: Components.Parameters.UploadProtocol?
                /// Legacy upload protocol for media (e.g. "media", "multipart").
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/drafts/POST/query/uploadType`.
                public var uploadType: Components.Parameters.UploadType?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - _dollar__xgafv: V1 error format.
                ///   - accessToken: OAuth access token.
                ///   - alt: Data format for response.
                ///   - callback: JSONP
                ///   - fields: Selector specifying which fields to include in a partial response.
                ///   - key: API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
                ///   - oauthToken: OAuth 2.0 token for the current user.
                ///   - prettyPrint: Returns response with indentations and line breaks.
                ///   - quotaUser: Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
                ///   - uploadProtocol: Upload protocol for media (e.g. "raw", "multipart").
                ///   - uploadType: Legacy upload protocol for media (e.g. "media", "multipart").
                public init(
                    _dollar__xgafv: Components.Parameters.__period_xgafv? = nil,
                    accessToken: Components.Parameters.AccessToken? = nil,
                    alt: Components.Parameters.Alt? = nil,
                    callback: Components.Parameters.Callback? = nil,
                    fields: Components.Parameters.Fields? = nil,
                    key: Components.Parameters.Key? = nil,
                    oauthToken: Components.Parameters.OauthToken? = nil,
                    prettyPrint: Components.Parameters.PrettyPrint? = nil,
                    quotaUser: Components.Parameters.QuotaUser? = nil,
                    uploadProtocol: Components.Parameters.UploadProtocol? = nil,
                    uploadType: Components.Parameters.UploadType? = nil
                ) {
                    self._dollar__xgafv = _dollar__xgafv
                    self.accessToken = accessToken
                    self.alt = alt
                    self.callback = callback
                    self.fields = fields
                    self.key = key
                    self.oauthToken = oauthToken
                    self.prettyPrint = prettyPrint
                    self.quotaUser = quotaUser
                    self.uploadProtocol = uploadProtocol
                    self.uploadType = uploadType
                }
            }
            public var query: Operations.Gmail_users_drafts_create.Input.Query
            /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/drafts/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.Gmail_users_drafts_create.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.Gmail_users_drafts_create.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.Gmail_users_drafts_create.Input.Headers
            /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/drafts/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/drafts/POST/requestBody/content/message\/cpim`.
                case messageCpim(OpenAPIRuntime.HTTPBody)
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/drafts/POST/requestBody/content/message\/delivery-status`.
                case messageDeliveryStatus(OpenAPIRuntime.HTTPBody)
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/drafts/POST/requestBody/content/message\/disposition-notification`.
                case messageDispositionNotification(OpenAPIRuntime.HTTPBody)
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/drafts/POST/requestBody/content/message\/external-body`.
                case messageExternalBody(OpenAPIRuntime.HTTPBody)
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/drafts/POST/requestBody/content/message\/feedback-report`.
                case messageFeedbackReport(OpenAPIRuntime.HTTPBody)
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/drafts/POST/requestBody/content/message\/global`.
                case messageGlobal(OpenAPIRuntime.HTTPBody)
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/drafts/POST/requestBody/content/message\/global-delivery-status`.
                case messageGlobalDeliveryStatus(OpenAPIRuntime.HTTPBody)
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/drafts/POST/requestBody/content/message\/global-disposition-notification`.
                case messageGlobalDispositionNotification(OpenAPIRuntime.HTTPBody)
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/drafts/POST/requestBody/content/message\/global-headers`.
                case messageGlobalHeaders(OpenAPIRuntime.HTTPBody)
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/drafts/POST/requestBody/content/message\/http`.
                case messageHttp(OpenAPIRuntime.HTTPBody)
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/drafts/POST/requestBody/content/message\/imdn+xml`.
                case messageImdnXml(OpenAPIRuntime.HTTPBody)
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/drafts/POST/requestBody/content/message\/news`.
                case messageNews(OpenAPIRuntime.HTTPBody)
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/drafts/POST/requestBody/content/message\/partial`.
                case messagePartial(OpenAPIRuntime.HTTPBody)
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/drafts/POST/requestBody/content/message\/rfc822`.
                case messageRfc822(OpenAPIRuntime.HTTPBody)
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/drafts/POST/requestBody/content/message\/s-http`.
                case messageSHttp(OpenAPIRuntime.HTTPBody)
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/drafts/POST/requestBody/content/message\/sip`.
                case messageSip(OpenAPIRuntime.HTTPBody)
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/drafts/POST/requestBody/content/message\/sipfrag`.
                case messageSipfrag(OpenAPIRuntime.HTTPBody)
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/drafts/POST/requestBody/content/message\/tracking-status`.
                case messageTrackingStatus(OpenAPIRuntime.HTTPBody)
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/drafts/POST/requestBody/content/message\/vnd.si.simp`.
                case messageVnd_si_simp(OpenAPIRuntime.HTTPBody)
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/drafts/POST/requestBody/content/message\/vnd.wfa.wsc`.
                case messageVnd_wfa_wsc(OpenAPIRuntime.HTTPBody)
            }
            public var body: Operations.Gmail_users_drafts_create.Input.Body?
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - query:
            ///   - headers:
            ///   - body:
            public init(
                path: Operations.Gmail_users_drafts_create.Input.Path,
                query: Operations.Gmail_users_drafts_create.Input.Query = .init(),
                headers: Operations.Gmail_users_drafts_create.Input.Headers = .init(),
                body: Operations.Gmail_users_drafts_create.Input.Body? = nil
            ) {
                self.path = path
                self.query = query
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/drafts/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/drafts/POST/responses/200/content/application\/json`.
                    case json(Components.Schemas.Draft)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.Draft {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.Gmail_users_drafts_create.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.Gmail_users_drafts_create.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Successful response
            ///
            /// - Remark: Generated from `#/paths//gmail/v1/users/{userId}/drafts/post(gmail.users.drafts.create)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.Gmail_users_drafts_create.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.Gmail_users_drafts_create.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Sends the specified, existing draft to the recipients in the `To`, `Cc`, and `Bcc` headers.
    ///
    /// - Remark: HTTP `POST /gmail/v1/users/{userId}/drafts/send`.
    /// - Remark: Generated from `#/paths//gmail/v1/users/{userId}/drafts/send/post(gmail.users.drafts.send)`.
    public enum Gmail_users_drafts_send {
        public static let id: Swift.String = "gmail.users.drafts.send"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/drafts/send/POST/path`.
            public struct Path: Sendable, Hashable {
                /// The user's email address. The special value `me` can be used to indicate the authenticated user.
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/drafts/send/POST/path/userId`.
                public var userId: Swift.String
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - userId: The user's email address. The special value `me` can be used to indicate the authenticated user.
                public init(userId: Swift.String) {
                    self.userId = userId
                }
            }
            public var path: Operations.Gmail_users_drafts_send.Input.Path
            /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/drafts/send/POST/query`.
            public struct Query: Sendable, Hashable {
                /// - Remark: Generated from `#/components/parameters/_.xgafv`.
                @frozen public enum __period_xgafv: String, Codable, Hashable, Sendable, CaseIterable {
                    case _1 = "1"
                    case _2 = "2"
                }
                /// V1 error format.
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/drafts/send/POST/query/$.xgafv`.
                public var _dollar__xgafv: Components.Parameters.__period_xgafv?
                /// OAuth access token.
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/drafts/send/POST/query/access_token`.
                public var accessToken: Components.Parameters.AccessToken?
                /// - Remark: Generated from `#/components/parameters/alt`.
                @frozen public enum Alt: String, Codable, Hashable, Sendable, CaseIterable {
                    case json = "json"
                    case media = "media"
                    case proto = "proto"
                }
                /// Data format for response.
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/drafts/send/POST/query/alt`.
                public var alt: Components.Parameters.Alt?
                /// JSONP
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/drafts/send/POST/query/callback`.
                public var callback: Components.Parameters.Callback?
                /// Selector specifying which fields to include in a partial response.
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/drafts/send/POST/query/fields`.
                public var fields: Components.Parameters.Fields?
                /// API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/drafts/send/POST/query/key`.
                public var key: Components.Parameters.Key?
                /// OAuth 2.0 token for the current user.
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/drafts/send/POST/query/oauth_token`.
                public var oauthToken: Components.Parameters.OauthToken?
                /// Returns response with indentations and line breaks.
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/drafts/send/POST/query/prettyPrint`.
                public var prettyPrint: Components.Parameters.PrettyPrint?
                /// Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/drafts/send/POST/query/quotaUser`.
                public var quotaUser: Components.Parameters.QuotaUser?
                /// Upload protocol for media (e.g. "raw", "multipart").
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/drafts/send/POST/query/upload_protocol`.
                public var uploadProtocol: Components.Parameters.UploadProtocol?
                /// Legacy upload protocol for media (e.g. "media", "multipart").
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/drafts/send/POST/query/uploadType`.
                public var uploadType: Components.Parameters.UploadType?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - _dollar__xgafv: V1 error format.
                ///   - accessToken: OAuth access token.
                ///   - alt: Data format for response.
                ///   - callback: JSONP
                ///   - fields: Selector specifying which fields to include in a partial response.
                ///   - key: API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
                ///   - oauthToken: OAuth 2.0 token for the current user.
                ///   - prettyPrint: Returns response with indentations and line breaks.
                ///   - quotaUser: Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
                ///   - uploadProtocol: Upload protocol for media (e.g. "raw", "multipart").
                ///   - uploadType: Legacy upload protocol for media (e.g. "media", "multipart").
                public init(
                    _dollar__xgafv: Components.Parameters.__period_xgafv? = nil,
                    accessToken: Components.Parameters.AccessToken? = nil,
                    alt: Components.Parameters.Alt? = nil,
                    callback: Components.Parameters.Callback? = nil,
                    fields: Components.Parameters.Fields? = nil,
                    key: Components.Parameters.Key? = nil,
                    oauthToken: Components.Parameters.OauthToken? = nil,
                    prettyPrint: Components.Parameters.PrettyPrint? = nil,
                    quotaUser: Components.Parameters.QuotaUser? = nil,
                    uploadProtocol: Components.Parameters.UploadProtocol? = nil,
                    uploadType: Components.Parameters.UploadType? = nil
                ) {
                    self._dollar__xgafv = _dollar__xgafv
                    self.accessToken = accessToken
                    self.alt = alt
                    self.callback = callback
                    self.fields = fields
                    self.key = key
                    self.oauthToken = oauthToken
                    self.prettyPrint = prettyPrint
                    self.quotaUser = quotaUser
                    self.uploadProtocol = uploadProtocol
                    self.uploadType = uploadType
                }
            }
            public var query: Operations.Gmail_users_drafts_send.Input.Query
            /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/drafts/send/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.Gmail_users_drafts_send.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.Gmail_users_drafts_send.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.Gmail_users_drafts_send.Input.Headers
            /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/drafts/send/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/drafts/send/POST/requestBody/content/message\/cpim`.
                case messageCpim(OpenAPIRuntime.HTTPBody)
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/drafts/send/POST/requestBody/content/message\/delivery-status`.
                case messageDeliveryStatus(OpenAPIRuntime.HTTPBody)
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/drafts/send/POST/requestBody/content/message\/disposition-notification`.
                case messageDispositionNotification(OpenAPIRuntime.HTTPBody)
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/drafts/send/POST/requestBody/content/message\/external-body`.
                case messageExternalBody(OpenAPIRuntime.HTTPBody)
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/drafts/send/POST/requestBody/content/message\/feedback-report`.
                case messageFeedbackReport(OpenAPIRuntime.HTTPBody)
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/drafts/send/POST/requestBody/content/message\/global`.
                case messageGlobal(OpenAPIRuntime.HTTPBody)
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/drafts/send/POST/requestBody/content/message\/global-delivery-status`.
                case messageGlobalDeliveryStatus(OpenAPIRuntime.HTTPBody)
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/drafts/send/POST/requestBody/content/message\/global-disposition-notification`.
                case messageGlobalDispositionNotification(OpenAPIRuntime.HTTPBody)
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/drafts/send/POST/requestBody/content/message\/global-headers`.
                case messageGlobalHeaders(OpenAPIRuntime.HTTPBody)
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/drafts/send/POST/requestBody/content/message\/http`.
                case messageHttp(OpenAPIRuntime.HTTPBody)
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/drafts/send/POST/requestBody/content/message\/imdn+xml`.
                case messageImdnXml(OpenAPIRuntime.HTTPBody)
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/drafts/send/POST/requestBody/content/message\/news`.
                case messageNews(OpenAPIRuntime.HTTPBody)
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/drafts/send/POST/requestBody/content/message\/partial`.
                case messagePartial(OpenAPIRuntime.HTTPBody)
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/drafts/send/POST/requestBody/content/message\/rfc822`.
                case messageRfc822(OpenAPIRuntime.HTTPBody)
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/drafts/send/POST/requestBody/content/message\/s-http`.
                case messageSHttp(OpenAPIRuntime.HTTPBody)
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/drafts/send/POST/requestBody/content/message\/sip`.
                case messageSip(OpenAPIRuntime.HTTPBody)
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/drafts/send/POST/requestBody/content/message\/sipfrag`.
                case messageSipfrag(OpenAPIRuntime.HTTPBody)
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/drafts/send/POST/requestBody/content/message\/tracking-status`.
                case messageTrackingStatus(OpenAPIRuntime.HTTPBody)
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/drafts/send/POST/requestBody/content/message\/vnd.si.simp`.
                case messageVnd_si_simp(OpenAPIRuntime.HTTPBody)
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/drafts/send/POST/requestBody/content/message\/vnd.wfa.wsc`.
                case messageVnd_wfa_wsc(OpenAPIRuntime.HTTPBody)
            }
            public var body: Operations.Gmail_users_drafts_send.Input.Body?
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - query:
            ///   - headers:
            ///   - body:
            public init(
                path: Operations.Gmail_users_drafts_send.Input.Path,
                query: Operations.Gmail_users_drafts_send.Input.Query = .init(),
                headers: Operations.Gmail_users_drafts_send.Input.Headers = .init(),
                body: Operations.Gmail_users_drafts_send.Input.Body? = nil
            ) {
                self.path = path
                self.query = query
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/drafts/send/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/drafts/send/POST/responses/200/content/application\/json`.
                    case json(Components.Schemas.Message)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.Message {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.Gmail_users_drafts_send.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.Gmail_users_drafts_send.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Successful response
            ///
            /// - Remark: Generated from `#/paths//gmail/v1/users/{userId}/drafts/send/post(gmail.users.drafts.send)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.Gmail_users_drafts_send.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.Gmail_users_drafts_send.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Gets the specified draft.
    ///
    /// - Remark: HTTP `GET /gmail/v1/users/{userId}/drafts/{id}`.
    /// - Remark: Generated from `#/paths//gmail/v1/users/{userId}/drafts/{id}/get(gmail.users.drafts.get)`.
    public enum Gmail_users_drafts_get {
        public static let id: Swift.String = "gmail.users.drafts.get"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/drafts/{id}/GET/path`.
            public struct Path: Sendable, Hashable {
                /// The user's email address. The special value `me` can be used to indicate the authenticated user.
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/drafts/{id}/GET/path/userId`.
                public var userId: Swift.String
                /// The ID of the draft to retrieve.
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/drafts/{id}/GET/path/id`.
                public var id: Swift.String
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - userId: The user's email address. The special value `me` can be used to indicate the authenticated user.
                ///   - id: The ID of the draft to retrieve.
                public init(
                    userId: Swift.String,
                    id: Swift.String
                ) {
                    self.userId = userId
                    self.id = id
                }
            }
            public var path: Operations.Gmail_users_drafts_get.Input.Path
            /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/drafts/{id}/GET/query`.
            public struct Query: Sendable, Hashable {
                /// - Remark: Generated from `#/components/parameters/_.xgafv`.
                @frozen public enum __period_xgafv: String, Codable, Hashable, Sendable, CaseIterable {
                    case _1 = "1"
                    case _2 = "2"
                }
                /// V1 error format.
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/drafts/{id}/GET/query/$.xgafv`.
                public var _dollar__xgafv: Components.Parameters.__period_xgafv?
                /// OAuth access token.
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/drafts/{id}/GET/query/access_token`.
                public var accessToken: Components.Parameters.AccessToken?
                /// - Remark: Generated from `#/components/parameters/alt`.
                @frozen public enum Alt: String, Codable, Hashable, Sendable, CaseIterable {
                    case json = "json"
                    case media = "media"
                    case proto = "proto"
                }
                /// Data format for response.
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/drafts/{id}/GET/query/alt`.
                public var alt: Components.Parameters.Alt?
                /// JSONP
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/drafts/{id}/GET/query/callback`.
                public var callback: Components.Parameters.Callback?
                /// Selector specifying which fields to include in a partial response.
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/drafts/{id}/GET/query/fields`.
                public var fields: Components.Parameters.Fields?
                /// API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/drafts/{id}/GET/query/key`.
                public var key: Components.Parameters.Key?
                /// OAuth 2.0 token for the current user.
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/drafts/{id}/GET/query/oauth_token`.
                public var oauthToken: Components.Parameters.OauthToken?
                /// Returns response with indentations and line breaks.
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/drafts/{id}/GET/query/prettyPrint`.
                public var prettyPrint: Components.Parameters.PrettyPrint?
                /// Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/drafts/{id}/GET/query/quotaUser`.
                public var quotaUser: Components.Parameters.QuotaUser?
                /// Upload protocol for media (e.g. "raw", "multipart").
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/drafts/{id}/GET/query/upload_protocol`.
                public var uploadProtocol: Components.Parameters.UploadProtocol?
                /// Legacy upload protocol for media (e.g. "media", "multipart").
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/drafts/{id}/GET/query/uploadType`.
                public var uploadType: Components.Parameters.UploadType?
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/drafts/{id}/GET/query/format`.
                @frozen public enum FormatPayload: String, Codable, Hashable, Sendable, CaseIterable {
                    case minimal = "minimal"
                    case full = "full"
                    case raw = "raw"
                    case metadata = "metadata"
                }
                /// The format to return the draft in.
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/drafts/{id}/GET/query/format`.
                public var format: Operations.Gmail_users_drafts_get.Input.Query.FormatPayload?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - _dollar__xgafv: V1 error format.
                ///   - accessToken: OAuth access token.
                ///   - alt: Data format for response.
                ///   - callback: JSONP
                ///   - fields: Selector specifying which fields to include in a partial response.
                ///   - key: API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
                ///   - oauthToken: OAuth 2.0 token for the current user.
                ///   - prettyPrint: Returns response with indentations and line breaks.
                ///   - quotaUser: Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
                ///   - uploadProtocol: Upload protocol for media (e.g. "raw", "multipart").
                ///   - uploadType: Legacy upload protocol for media (e.g. "media", "multipart").
                ///   - format: The format to return the draft in.
                public init(
                    _dollar__xgafv: Components.Parameters.__period_xgafv? = nil,
                    accessToken: Components.Parameters.AccessToken? = nil,
                    alt: Components.Parameters.Alt? = nil,
                    callback: Components.Parameters.Callback? = nil,
                    fields: Components.Parameters.Fields? = nil,
                    key: Components.Parameters.Key? = nil,
                    oauthToken: Components.Parameters.OauthToken? = nil,
                    prettyPrint: Components.Parameters.PrettyPrint? = nil,
                    quotaUser: Components.Parameters.QuotaUser? = nil,
                    uploadProtocol: Components.Parameters.UploadProtocol? = nil,
                    uploadType: Components.Parameters.UploadType? = nil,
                    format: Operations.Gmail_users_drafts_get.Input.Query.FormatPayload? = nil
                ) {
                    self._dollar__xgafv = _dollar__xgafv
                    self.accessToken = accessToken
                    self.alt = alt
                    self.callback = callback
                    self.fields = fields
                    self.key = key
                    self.oauthToken = oauthToken
                    self.prettyPrint = prettyPrint
                    self.quotaUser = quotaUser
                    self.uploadProtocol = uploadProtocol
                    self.uploadType = uploadType
                    self.format = format
                }
            }
            public var query: Operations.Gmail_users_drafts_get.Input.Query
            /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/drafts/{id}/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.Gmail_users_drafts_get.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.Gmail_users_drafts_get.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.Gmail_users_drafts_get.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - query:
            ///   - headers:
            public init(
                path: Operations.Gmail_users_drafts_get.Input.Path,
                query: Operations.Gmail_users_drafts_get.Input.Query = .init(),
                headers: Operations.Gmail_users_drafts_get.Input.Headers = .init()
            ) {
                self.path = path
                self.query = query
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/drafts/{id}/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/drafts/{id}/GET/responses/200/content/application\/json`.
                    case json(Components.Schemas.Draft)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.Draft {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.Gmail_users_drafts_get.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.Gmail_users_drafts_get.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Successful response
            ///
            /// - Remark: Generated from `#/paths//gmail/v1/users/{userId}/drafts/{id}/get(gmail.users.drafts.get)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.Gmail_users_drafts_get.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.Gmail_users_drafts_get.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Replaces a draft's content.
    ///
    /// - Remark: HTTP `PUT /gmail/v1/users/{userId}/drafts/{id}`.
    /// - Remark: Generated from `#/paths//gmail/v1/users/{userId}/drafts/{id}/put(gmail.users.drafts.update)`.
    public enum Gmail_users_drafts_update {
        public static let id: Swift.String = "gmail.users.drafts.update"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/drafts/{id}/PUT/path`.
            public struct Path: Sendable, Hashable {
                /// The user's email address. The special value `me` can be used to indicate the authenticated user.
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/drafts/{id}/PUT/path/userId`.
                public var userId: Swift.String
                /// The ID of the draft to update.
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/drafts/{id}/PUT/path/id`.
                public var id: Swift.String
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - userId: The user's email address. The special value `me` can be used to indicate the authenticated user.
                ///   - id: The ID of the draft to update.
                public init(
                    userId: Swift.String,
                    id: Swift.String
                ) {
                    self.userId = userId
                    self.id = id
                }
            }
            public var path: Operations.Gmail_users_drafts_update.Input.Path
            /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/drafts/{id}/PUT/query`.
            public struct Query: Sendable, Hashable {
                /// - Remark: Generated from `#/components/parameters/_.xgafv`.
                @frozen public enum __period_xgafv: String, Codable, Hashable, Sendable, CaseIterable {
                    case _1 = "1"
                    case _2 = "2"
                }
                /// V1 error format.
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/drafts/{id}/PUT/query/$.xgafv`.
                public var _dollar__xgafv: Components.Parameters.__period_xgafv?
                /// OAuth access token.
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/drafts/{id}/PUT/query/access_token`.
                public var accessToken: Components.Parameters.AccessToken?
                /// - Remark: Generated from `#/components/parameters/alt`.
                @frozen public enum Alt: String, Codable, Hashable, Sendable, CaseIterable {
                    case json = "json"
                    case media = "media"
                    case proto = "proto"
                }
                /// Data format for response.
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/drafts/{id}/PUT/query/alt`.
                public var alt: Components.Parameters.Alt?
                /// JSONP
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/drafts/{id}/PUT/query/callback`.
                public var callback: Components.Parameters.Callback?
                /// Selector specifying which fields to include in a partial response.
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/drafts/{id}/PUT/query/fields`.
                public var fields: Components.Parameters.Fields?
                /// API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/drafts/{id}/PUT/query/key`.
                public var key: Components.Parameters.Key?
                /// OAuth 2.0 token for the current user.
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/drafts/{id}/PUT/query/oauth_token`.
                public var oauthToken: Components.Parameters.OauthToken?
                /// Returns response with indentations and line breaks.
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/drafts/{id}/PUT/query/prettyPrint`.
                public var prettyPrint: Components.Parameters.PrettyPrint?
                /// Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/drafts/{id}/PUT/query/quotaUser`.
                public var quotaUser: Components.Parameters.QuotaUser?
                /// Upload protocol for media (e.g. "raw", "multipart").
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/drafts/{id}/PUT/query/upload_protocol`.
                public var uploadProtocol: Components.Parameters.UploadProtocol?
                /// Legacy upload protocol for media (e.g. "media", "multipart").
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/drafts/{id}/PUT/query/uploadType`.
                public var uploadType: Components.Parameters.UploadType?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - _dollar__xgafv: V1 error format.
                ///   - accessToken: OAuth access token.
                ///   - alt: Data format for response.
                ///   - callback: JSONP
                ///   - fields: Selector specifying which fields to include in a partial response.
                ///   - key: API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
                ///   - oauthToken: OAuth 2.0 token for the current user.
                ///   - prettyPrint: Returns response with indentations and line breaks.
                ///   - quotaUser: Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
                ///   - uploadProtocol: Upload protocol for media (e.g. "raw", "multipart").
                ///   - uploadType: Legacy upload protocol for media (e.g. "media", "multipart").
                public init(
                    _dollar__xgafv: Components.Parameters.__period_xgafv? = nil,
                    accessToken: Components.Parameters.AccessToken? = nil,
                    alt: Components.Parameters.Alt? = nil,
                    callback: Components.Parameters.Callback? = nil,
                    fields: Components.Parameters.Fields? = nil,
                    key: Components.Parameters.Key? = nil,
                    oauthToken: Components.Parameters.OauthToken? = nil,
                    prettyPrint: Components.Parameters.PrettyPrint? = nil,
                    quotaUser: Components.Parameters.QuotaUser? = nil,
                    uploadProtocol: Components.Parameters.UploadProtocol? = nil,
                    uploadType: Components.Parameters.UploadType? = nil
                ) {
                    self._dollar__xgafv = _dollar__xgafv
                    self.accessToken = accessToken
                    self.alt = alt
                    self.callback = callback
                    self.fields = fields
                    self.key = key
                    self.oauthToken = oauthToken
                    self.prettyPrint = prettyPrint
                    self.quotaUser = quotaUser
                    self.uploadProtocol = uploadProtocol
                    self.uploadType = uploadType
                }
            }
            public var query: Operations.Gmail_users_drafts_update.Input.Query
            /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/drafts/{id}/PUT/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.Gmail_users_drafts_update.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.Gmail_users_drafts_update.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.Gmail_users_drafts_update.Input.Headers
            /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/drafts/{id}/PUT/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/drafts/{id}/PUT/requestBody/content/message\/cpim`.
                case messageCpim(OpenAPIRuntime.HTTPBody)
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/drafts/{id}/PUT/requestBody/content/message\/delivery-status`.
                case messageDeliveryStatus(OpenAPIRuntime.HTTPBody)
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/drafts/{id}/PUT/requestBody/content/message\/disposition-notification`.
                case messageDispositionNotification(OpenAPIRuntime.HTTPBody)
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/drafts/{id}/PUT/requestBody/content/message\/external-body`.
                case messageExternalBody(OpenAPIRuntime.HTTPBody)
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/drafts/{id}/PUT/requestBody/content/message\/feedback-report`.
                case messageFeedbackReport(OpenAPIRuntime.HTTPBody)
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/drafts/{id}/PUT/requestBody/content/message\/global`.
                case messageGlobal(OpenAPIRuntime.HTTPBody)
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/drafts/{id}/PUT/requestBody/content/message\/global-delivery-status`.
                case messageGlobalDeliveryStatus(OpenAPIRuntime.HTTPBody)
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/drafts/{id}/PUT/requestBody/content/message\/global-disposition-notification`.
                case messageGlobalDispositionNotification(OpenAPIRuntime.HTTPBody)
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/drafts/{id}/PUT/requestBody/content/message\/global-headers`.
                case messageGlobalHeaders(OpenAPIRuntime.HTTPBody)
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/drafts/{id}/PUT/requestBody/content/message\/http`.
                case messageHttp(OpenAPIRuntime.HTTPBody)
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/drafts/{id}/PUT/requestBody/content/message\/imdn+xml`.
                case messageImdnXml(OpenAPIRuntime.HTTPBody)
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/drafts/{id}/PUT/requestBody/content/message\/news`.
                case messageNews(OpenAPIRuntime.HTTPBody)
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/drafts/{id}/PUT/requestBody/content/message\/partial`.
                case messagePartial(OpenAPIRuntime.HTTPBody)
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/drafts/{id}/PUT/requestBody/content/message\/rfc822`.
                case messageRfc822(OpenAPIRuntime.HTTPBody)
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/drafts/{id}/PUT/requestBody/content/message\/s-http`.
                case messageSHttp(OpenAPIRuntime.HTTPBody)
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/drafts/{id}/PUT/requestBody/content/message\/sip`.
                case messageSip(OpenAPIRuntime.HTTPBody)
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/drafts/{id}/PUT/requestBody/content/message\/sipfrag`.
                case messageSipfrag(OpenAPIRuntime.HTTPBody)
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/drafts/{id}/PUT/requestBody/content/message\/tracking-status`.
                case messageTrackingStatus(OpenAPIRuntime.HTTPBody)
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/drafts/{id}/PUT/requestBody/content/message\/vnd.si.simp`.
                case messageVnd_si_simp(OpenAPIRuntime.HTTPBody)
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/drafts/{id}/PUT/requestBody/content/message\/vnd.wfa.wsc`.
                case messageVnd_wfa_wsc(OpenAPIRuntime.HTTPBody)
            }
            public var body: Operations.Gmail_users_drafts_update.Input.Body?
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - query:
            ///   - headers:
            ///   - body:
            public init(
                path: Operations.Gmail_users_drafts_update.Input.Path,
                query: Operations.Gmail_users_drafts_update.Input.Query = .init(),
                headers: Operations.Gmail_users_drafts_update.Input.Headers = .init(),
                body: Operations.Gmail_users_drafts_update.Input.Body? = nil
            ) {
                self.path = path
                self.query = query
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/drafts/{id}/PUT/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/drafts/{id}/PUT/responses/200/content/application\/json`.
                    case json(Components.Schemas.Draft)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.Draft {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.Gmail_users_drafts_update.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.Gmail_users_drafts_update.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Successful response
            ///
            /// - Remark: Generated from `#/paths//gmail/v1/users/{userId}/drafts/{id}/put(gmail.users.drafts.update)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.Gmail_users_drafts_update.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.Gmail_users_drafts_update.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Immediately and permanently deletes the specified draft. Does not simply trash it.
    ///
    /// - Remark: HTTP `DELETE /gmail/v1/users/{userId}/drafts/{id}`.
    /// - Remark: Generated from `#/paths//gmail/v1/users/{userId}/drafts/{id}/delete(gmail.users.drafts.delete)`.
    public enum Gmail_users_drafts_delete {
        public static let id: Swift.String = "gmail.users.drafts.delete"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/drafts/{id}/DELETE/path`.
            public struct Path: Sendable, Hashable {
                /// The user's email address. The special value `me` can be used to indicate the authenticated user.
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/drafts/{id}/DELETE/path/userId`.
                public var userId: Swift.String
                /// The ID of the draft to delete.
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/drafts/{id}/DELETE/path/id`.
                public var id: Swift.String
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - userId: The user's email address. The special value `me` can be used to indicate the authenticated user.
                ///   - id: The ID of the draft to delete.
                public init(
                    userId: Swift.String,
                    id: Swift.String
                ) {
                    self.userId = userId
                    self.id = id
                }
            }
            public var path: Operations.Gmail_users_drafts_delete.Input.Path
            /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/drafts/{id}/DELETE/query`.
            public struct Query: Sendable, Hashable {
                /// - Remark: Generated from `#/components/parameters/_.xgafv`.
                @frozen public enum __period_xgafv: String, Codable, Hashable, Sendable, CaseIterable {
                    case _1 = "1"
                    case _2 = "2"
                }
                /// V1 error format.
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/drafts/{id}/DELETE/query/$.xgafv`.
                public var _dollar__xgafv: Components.Parameters.__period_xgafv?
                /// OAuth access token.
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/drafts/{id}/DELETE/query/access_token`.
                public var accessToken: Components.Parameters.AccessToken?
                /// - Remark: Generated from `#/components/parameters/alt`.
                @frozen public enum Alt: String, Codable, Hashable, Sendable, CaseIterable {
                    case json = "json"
                    case media = "media"
                    case proto = "proto"
                }
                /// Data format for response.
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/drafts/{id}/DELETE/query/alt`.
                public var alt: Components.Parameters.Alt?
                /// JSONP
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/drafts/{id}/DELETE/query/callback`.
                public var callback: Components.Parameters.Callback?
                /// Selector specifying which fields to include in a partial response.
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/drafts/{id}/DELETE/query/fields`.
                public var fields: Components.Parameters.Fields?
                /// API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/drafts/{id}/DELETE/query/key`.
                public var key: Components.Parameters.Key?
                /// OAuth 2.0 token for the current user.
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/drafts/{id}/DELETE/query/oauth_token`.
                public var oauthToken: Components.Parameters.OauthToken?
                /// Returns response with indentations and line breaks.
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/drafts/{id}/DELETE/query/prettyPrint`.
                public var prettyPrint: Components.Parameters.PrettyPrint?
                /// Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/drafts/{id}/DELETE/query/quotaUser`.
                public var quotaUser: Components.Parameters.QuotaUser?
                /// Upload protocol for media (e.g. "raw", "multipart").
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/drafts/{id}/DELETE/query/upload_protocol`.
                public var uploadProtocol: Components.Parameters.UploadProtocol?
                /// Legacy upload protocol for media (e.g. "media", "multipart").
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/drafts/{id}/DELETE/query/uploadType`.
                public var uploadType: Components.Parameters.UploadType?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - _dollar__xgafv: V1 error format.
                ///   - accessToken: OAuth access token.
                ///   - alt: Data format for response.
                ///   - callback: JSONP
                ///   - fields: Selector specifying which fields to include in a partial response.
                ///   - key: API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
                ///   - oauthToken: OAuth 2.0 token for the current user.
                ///   - prettyPrint: Returns response with indentations and line breaks.
                ///   - quotaUser: Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
                ///   - uploadProtocol: Upload protocol for media (e.g. "raw", "multipart").
                ///   - uploadType: Legacy upload protocol for media (e.g. "media", "multipart").
                public init(
                    _dollar__xgafv: Components.Parameters.__period_xgafv? = nil,
                    accessToken: Components.Parameters.AccessToken? = nil,
                    alt: Components.Parameters.Alt? = nil,
                    callback: Components.Parameters.Callback? = nil,
                    fields: Components.Parameters.Fields? = nil,
                    key: Components.Parameters.Key? = nil,
                    oauthToken: Components.Parameters.OauthToken? = nil,
                    prettyPrint: Components.Parameters.PrettyPrint? = nil,
                    quotaUser: Components.Parameters.QuotaUser? = nil,
                    uploadProtocol: Components.Parameters.UploadProtocol? = nil,
                    uploadType: Components.Parameters.UploadType? = nil
                ) {
                    self._dollar__xgafv = _dollar__xgafv
                    self.accessToken = accessToken
                    self.alt = alt
                    self.callback = callback
                    self.fields = fields
                    self.key = key
                    self.oauthToken = oauthToken
                    self.prettyPrint = prettyPrint
                    self.quotaUser = quotaUser
                    self.uploadProtocol = uploadProtocol
                    self.uploadType = uploadType
                }
            }
            public var query: Operations.Gmail_users_drafts_delete.Input.Query
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - query:
            public init(
                path: Operations.Gmail_users_drafts_delete.Input.Path,
                query: Operations.Gmail_users_drafts_delete.Input.Query = .init()
            ) {
                self.path = path
                self.query = query
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// Creates a new `Ok`.
                public init() {}
            }
            /// Successful response
            ///
            /// - Remark: Generated from `#/paths//gmail/v1/users/{userId}/drafts/{id}/delete(gmail.users.drafts.delete)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.Gmail_users_drafts_delete.Output.Ok)
            /// Successful response
            ///
            /// - Remark: Generated from `#/paths//gmail/v1/users/{userId}/drafts/{id}/delete(gmail.users.drafts.delete)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            public static var ok: Self {
                .ok(.init())
            }
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.Gmail_users_drafts_delete.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
    }
    /// Lists the history of all changes to the given mailbox. History results are returned in chronological order (increasing `historyId`).
    ///
    /// - Remark: HTTP `GET /gmail/v1/users/{userId}/history`.
    /// - Remark: Generated from `#/paths//gmail/v1/users/{userId}/history/get(gmail.users.history.list)`.
    public enum Gmail_users_history_list {
        public static let id: Swift.String = "gmail.users.history.list"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/history/GET/path`.
            public struct Path: Sendable, Hashable {
                /// The user's email address. The special value `me` can be used to indicate the authenticated user.
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/history/GET/path/userId`.
                public var userId: Swift.String
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - userId: The user's email address. The special value `me` can be used to indicate the authenticated user.
                public init(userId: Swift.String) {
                    self.userId = userId
                }
            }
            public var path: Operations.Gmail_users_history_list.Input.Path
            /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/history/GET/query`.
            public struct Query: Sendable, Hashable {
                /// - Remark: Generated from `#/components/parameters/_.xgafv`.
                @frozen public enum __period_xgafv: String, Codable, Hashable, Sendable, CaseIterable {
                    case _1 = "1"
                    case _2 = "2"
                }
                /// V1 error format.
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/history/GET/query/$.xgafv`.
                public var _dollar__xgafv: Components.Parameters.__period_xgafv?
                /// OAuth access token.
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/history/GET/query/access_token`.
                public var accessToken: Components.Parameters.AccessToken?
                /// - Remark: Generated from `#/components/parameters/alt`.
                @frozen public enum Alt: String, Codable, Hashable, Sendable, CaseIterable {
                    case json = "json"
                    case media = "media"
                    case proto = "proto"
                }
                /// Data format for response.
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/history/GET/query/alt`.
                public var alt: Components.Parameters.Alt?
                /// JSONP
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/history/GET/query/callback`.
                public var callback: Components.Parameters.Callback?
                /// Selector specifying which fields to include in a partial response.
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/history/GET/query/fields`.
                public var fields: Components.Parameters.Fields?
                /// API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/history/GET/query/key`.
                public var key: Components.Parameters.Key?
                /// OAuth 2.0 token for the current user.
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/history/GET/query/oauth_token`.
                public var oauthToken: Components.Parameters.OauthToken?
                /// Returns response with indentations and line breaks.
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/history/GET/query/prettyPrint`.
                public var prettyPrint: Components.Parameters.PrettyPrint?
                /// Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/history/GET/query/quotaUser`.
                public var quotaUser: Components.Parameters.QuotaUser?
                /// Upload protocol for media (e.g. "raw", "multipart").
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/history/GET/query/upload_protocol`.
                public var uploadProtocol: Components.Parameters.UploadProtocol?
                /// Legacy upload protocol for media (e.g. "media", "multipart").
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/history/GET/query/uploadType`.
                public var uploadType: Components.Parameters.UploadType?
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/history/GET/query/HistoryTypesPayload`.
                @frozen public enum HistoryTypesPayloadPayload: String, Codable, Hashable, Sendable, CaseIterable {
                    case messageAdded = "messageAdded"
                    case messageDeleted = "messageDeleted"
                    case labelAdded = "labelAdded"
                    case labelRemoved = "labelRemoved"
                }
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/history/GET/query/historyTypes`.
                public typealias HistoryTypesPayload = [Operations.Gmail_users_history_list.Input.Query.HistoryTypesPayloadPayload]
                /// History types to be returned by the function
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/history/GET/query/historyTypes`.
                public var historyTypes: Operations.Gmail_users_history_list.Input.Query.HistoryTypesPayload?
                /// Only return messages with a label matching the ID.
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/history/GET/query/labelId`.
                public var labelId: Swift.String?
                /// Maximum number of history records to return. This field defaults to 100. The maximum allowed value for this field is 500.
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/history/GET/query/maxResults`.
                public var maxResults: Swift.Int?
                /// Page token to retrieve a specific page of results in the list.
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/history/GET/query/pageToken`.
                public var pageToken: Swift.String?
                /// Required. Returns history records after the specified `startHistoryId`. The supplied `startHistoryId` should be obtained from the `historyId` of a message, thread, or previous `list` response. History IDs increase chronologically but are not contiguous with random gaps in between valid IDs. Supplying an invalid or out of date `startHistoryId` typically returns an `HTTP 404` error code. A `historyId` is typically valid for at least a week, but in some rare circumstances may be valid for only a few hours. If you receive an `HTTP 404` error response, your application should perform a full sync. If you receive no `nextPageToken` in the response, there are no updates to retrieve and you can store the returned `historyId` for a future request.
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/history/GET/query/startHistoryId`.
                public var startHistoryId: Swift.String?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - _dollar__xgafv: V1 error format.
                ///   - accessToken: OAuth access token.
                ///   - alt: Data format for response.
                ///   - callback: JSONP
                ///   - fields: Selector specifying which fields to include in a partial response.
                ///   - key: API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
                ///   - oauthToken: OAuth 2.0 token for the current user.
                ///   - prettyPrint: Returns response with indentations and line breaks.
                ///   - quotaUser: Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
                ///   - uploadProtocol: Upload protocol for media (e.g. "raw", "multipart").
                ///   - uploadType: Legacy upload protocol for media (e.g. "media", "multipart").
                ///   - historyTypes: History types to be returned by the function
                ///   - labelId: Only return messages with a label matching the ID.
                ///   - maxResults: Maximum number of history records to return. This field defaults to 100. The maximum allowed value for this field is 500.
                ///   - pageToken: Page token to retrieve a specific page of results in the list.
                ///   - startHistoryId: Required. Returns history records after the specified `startHistoryId`. The supplied `startHistoryId` should be obtained from the `historyId` of a message, thread, or previous `list` response. History IDs increase chronologically but are not contiguous with random gaps in between valid IDs. Supplying an invalid or out of date `startHistoryId` typically returns an `HTTP 404` error code. A `historyId` is typically valid for at least a week, but in some rare circumstances may be valid for only a few hours. If you receive an `HTTP 404` error response, your application should perform a full sync. If you receive no `nextPageToken` in the response, there are no updates to retrieve and you can store the returned `historyId` for a future request.
                public init(
                    _dollar__xgafv: Components.Parameters.__period_xgafv? = nil,
                    accessToken: Components.Parameters.AccessToken? = nil,
                    alt: Components.Parameters.Alt? = nil,
                    callback: Components.Parameters.Callback? = nil,
                    fields: Components.Parameters.Fields? = nil,
                    key: Components.Parameters.Key? = nil,
                    oauthToken: Components.Parameters.OauthToken? = nil,
                    prettyPrint: Components.Parameters.PrettyPrint? = nil,
                    quotaUser: Components.Parameters.QuotaUser? = nil,
                    uploadProtocol: Components.Parameters.UploadProtocol? = nil,
                    uploadType: Components.Parameters.UploadType? = nil,
                    historyTypes: Operations.Gmail_users_history_list.Input.Query.HistoryTypesPayload? = nil,
                    labelId: Swift.String? = nil,
                    maxResults: Swift.Int? = nil,
                    pageToken: Swift.String? = nil,
                    startHistoryId: Swift.String? = nil
                ) {
                    self._dollar__xgafv = _dollar__xgafv
                    self.accessToken = accessToken
                    self.alt = alt
                    self.callback = callback
                    self.fields = fields
                    self.key = key
                    self.oauthToken = oauthToken
                    self.prettyPrint = prettyPrint
                    self.quotaUser = quotaUser
                    self.uploadProtocol = uploadProtocol
                    self.uploadType = uploadType
                    self.historyTypes = historyTypes
                    self.labelId = labelId
                    self.maxResults = maxResults
                    self.pageToken = pageToken
                    self.startHistoryId = startHistoryId
                }
            }
            public var query: Operations.Gmail_users_history_list.Input.Query
            /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/history/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.Gmail_users_history_list.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.Gmail_users_history_list.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.Gmail_users_history_list.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - query:
            ///   - headers:
            public init(
                path: Operations.Gmail_users_history_list.Input.Path,
                query: Operations.Gmail_users_history_list.Input.Query = .init(),
                headers: Operations.Gmail_users_history_list.Input.Headers = .init()
            ) {
                self.path = path
                self.query = query
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/history/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/history/GET/responses/200/content/application\/json`.
                    case json(Components.Schemas.ListHistoryResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.ListHistoryResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.Gmail_users_history_list.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.Gmail_users_history_list.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Successful response
            ///
            /// - Remark: Generated from `#/paths//gmail/v1/users/{userId}/history/get(gmail.users.history.list)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.Gmail_users_history_list.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.Gmail_users_history_list.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Lists all labels in the user's mailbox.
    ///
    /// - Remark: HTTP `GET /gmail/v1/users/{userId}/labels`.
    /// - Remark: Generated from `#/paths//gmail/v1/users/{userId}/labels/get(gmail.users.labels.list)`.
    public enum Gmail_users_labels_list {
        public static let id: Swift.String = "gmail.users.labels.list"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/labels/GET/path`.
            public struct Path: Sendable, Hashable {
                /// The user's email address. The special value `me` can be used to indicate the authenticated user.
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/labels/GET/path/userId`.
                public var userId: Swift.String
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - userId: The user's email address. The special value `me` can be used to indicate the authenticated user.
                public init(userId: Swift.String) {
                    self.userId = userId
                }
            }
            public var path: Operations.Gmail_users_labels_list.Input.Path
            /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/labels/GET/query`.
            public struct Query: Sendable, Hashable {
                /// - Remark: Generated from `#/components/parameters/_.xgafv`.
                @frozen public enum __period_xgafv: String, Codable, Hashable, Sendable, CaseIterable {
                    case _1 = "1"
                    case _2 = "2"
                }
                /// V1 error format.
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/labels/GET/query/$.xgafv`.
                public var _dollar__xgafv: Components.Parameters.__period_xgafv?
                /// OAuth access token.
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/labels/GET/query/access_token`.
                public var accessToken: Components.Parameters.AccessToken?
                /// - Remark: Generated from `#/components/parameters/alt`.
                @frozen public enum Alt: String, Codable, Hashable, Sendable, CaseIterable {
                    case json = "json"
                    case media = "media"
                    case proto = "proto"
                }
                /// Data format for response.
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/labels/GET/query/alt`.
                public var alt: Components.Parameters.Alt?
                /// JSONP
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/labels/GET/query/callback`.
                public var callback: Components.Parameters.Callback?
                /// Selector specifying which fields to include in a partial response.
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/labels/GET/query/fields`.
                public var fields: Components.Parameters.Fields?
                /// API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/labels/GET/query/key`.
                public var key: Components.Parameters.Key?
                /// OAuth 2.0 token for the current user.
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/labels/GET/query/oauth_token`.
                public var oauthToken: Components.Parameters.OauthToken?
                /// Returns response with indentations and line breaks.
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/labels/GET/query/prettyPrint`.
                public var prettyPrint: Components.Parameters.PrettyPrint?
                /// Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/labels/GET/query/quotaUser`.
                public var quotaUser: Components.Parameters.QuotaUser?
                /// Upload protocol for media (e.g. "raw", "multipart").
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/labels/GET/query/upload_protocol`.
                public var uploadProtocol: Components.Parameters.UploadProtocol?
                /// Legacy upload protocol for media (e.g. "media", "multipart").
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/labels/GET/query/uploadType`.
                public var uploadType: Components.Parameters.UploadType?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - _dollar__xgafv: V1 error format.
                ///   - accessToken: OAuth access token.
                ///   - alt: Data format for response.
                ///   - callback: JSONP
                ///   - fields: Selector specifying which fields to include in a partial response.
                ///   - key: API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
                ///   - oauthToken: OAuth 2.0 token for the current user.
                ///   - prettyPrint: Returns response with indentations and line breaks.
                ///   - quotaUser: Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
                ///   - uploadProtocol: Upload protocol for media (e.g. "raw", "multipart").
                ///   - uploadType: Legacy upload protocol for media (e.g. "media", "multipart").
                public init(
                    _dollar__xgafv: Components.Parameters.__period_xgafv? = nil,
                    accessToken: Components.Parameters.AccessToken? = nil,
                    alt: Components.Parameters.Alt? = nil,
                    callback: Components.Parameters.Callback? = nil,
                    fields: Components.Parameters.Fields? = nil,
                    key: Components.Parameters.Key? = nil,
                    oauthToken: Components.Parameters.OauthToken? = nil,
                    prettyPrint: Components.Parameters.PrettyPrint? = nil,
                    quotaUser: Components.Parameters.QuotaUser? = nil,
                    uploadProtocol: Components.Parameters.UploadProtocol? = nil,
                    uploadType: Components.Parameters.UploadType? = nil
                ) {
                    self._dollar__xgafv = _dollar__xgafv
                    self.accessToken = accessToken
                    self.alt = alt
                    self.callback = callback
                    self.fields = fields
                    self.key = key
                    self.oauthToken = oauthToken
                    self.prettyPrint = prettyPrint
                    self.quotaUser = quotaUser
                    self.uploadProtocol = uploadProtocol
                    self.uploadType = uploadType
                }
            }
            public var query: Operations.Gmail_users_labels_list.Input.Query
            /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/labels/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.Gmail_users_labels_list.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.Gmail_users_labels_list.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.Gmail_users_labels_list.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - query:
            ///   - headers:
            public init(
                path: Operations.Gmail_users_labels_list.Input.Path,
                query: Operations.Gmail_users_labels_list.Input.Query = .init(),
                headers: Operations.Gmail_users_labels_list.Input.Headers = .init()
            ) {
                self.path = path
                self.query = query
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/labels/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/labels/GET/responses/200/content/application\/json`.
                    case json(Components.Schemas.ListLabelsResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.ListLabelsResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.Gmail_users_labels_list.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.Gmail_users_labels_list.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Successful response
            ///
            /// - Remark: Generated from `#/paths//gmail/v1/users/{userId}/labels/get(gmail.users.labels.list)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.Gmail_users_labels_list.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.Gmail_users_labels_list.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Creates a new label.
    ///
    /// - Remark: HTTP `POST /gmail/v1/users/{userId}/labels`.
    /// - Remark: Generated from `#/paths//gmail/v1/users/{userId}/labels/post(gmail.users.labels.create)`.
    public enum Gmail_users_labels_create {
        public static let id: Swift.String = "gmail.users.labels.create"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/labels/POST/path`.
            public struct Path: Sendable, Hashable {
                /// The user's email address. The special value `me` can be used to indicate the authenticated user.
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/labels/POST/path/userId`.
                public var userId: Swift.String
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - userId: The user's email address. The special value `me` can be used to indicate the authenticated user.
                public init(userId: Swift.String) {
                    self.userId = userId
                }
            }
            public var path: Operations.Gmail_users_labels_create.Input.Path
            /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/labels/POST/query`.
            public struct Query: Sendable, Hashable {
                /// - Remark: Generated from `#/components/parameters/_.xgafv`.
                @frozen public enum __period_xgafv: String, Codable, Hashable, Sendable, CaseIterable {
                    case _1 = "1"
                    case _2 = "2"
                }
                /// V1 error format.
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/labels/POST/query/$.xgafv`.
                public var _dollar__xgafv: Components.Parameters.__period_xgafv?
                /// OAuth access token.
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/labels/POST/query/access_token`.
                public var accessToken: Components.Parameters.AccessToken?
                /// - Remark: Generated from `#/components/parameters/alt`.
                @frozen public enum Alt: String, Codable, Hashable, Sendable, CaseIterable {
                    case json = "json"
                    case media = "media"
                    case proto = "proto"
                }
                /// Data format for response.
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/labels/POST/query/alt`.
                public var alt: Components.Parameters.Alt?
                /// JSONP
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/labels/POST/query/callback`.
                public var callback: Components.Parameters.Callback?
                /// Selector specifying which fields to include in a partial response.
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/labels/POST/query/fields`.
                public var fields: Components.Parameters.Fields?
                /// API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/labels/POST/query/key`.
                public var key: Components.Parameters.Key?
                /// OAuth 2.0 token for the current user.
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/labels/POST/query/oauth_token`.
                public var oauthToken: Components.Parameters.OauthToken?
                /// Returns response with indentations and line breaks.
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/labels/POST/query/prettyPrint`.
                public var prettyPrint: Components.Parameters.PrettyPrint?
                /// Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/labels/POST/query/quotaUser`.
                public var quotaUser: Components.Parameters.QuotaUser?
                /// Upload protocol for media (e.g. "raw", "multipart").
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/labels/POST/query/upload_protocol`.
                public var uploadProtocol: Components.Parameters.UploadProtocol?
                /// Legacy upload protocol for media (e.g. "media", "multipart").
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/labels/POST/query/uploadType`.
                public var uploadType: Components.Parameters.UploadType?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - _dollar__xgafv: V1 error format.
                ///   - accessToken: OAuth access token.
                ///   - alt: Data format for response.
                ///   - callback: JSONP
                ///   - fields: Selector specifying which fields to include in a partial response.
                ///   - key: API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
                ///   - oauthToken: OAuth 2.0 token for the current user.
                ///   - prettyPrint: Returns response with indentations and line breaks.
                ///   - quotaUser: Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
                ///   - uploadProtocol: Upload protocol for media (e.g. "raw", "multipart").
                ///   - uploadType: Legacy upload protocol for media (e.g. "media", "multipart").
                public init(
                    _dollar__xgafv: Components.Parameters.__period_xgafv? = nil,
                    accessToken: Components.Parameters.AccessToken? = nil,
                    alt: Components.Parameters.Alt? = nil,
                    callback: Components.Parameters.Callback? = nil,
                    fields: Components.Parameters.Fields? = nil,
                    key: Components.Parameters.Key? = nil,
                    oauthToken: Components.Parameters.OauthToken? = nil,
                    prettyPrint: Components.Parameters.PrettyPrint? = nil,
                    quotaUser: Components.Parameters.QuotaUser? = nil,
                    uploadProtocol: Components.Parameters.UploadProtocol? = nil,
                    uploadType: Components.Parameters.UploadType? = nil
                ) {
                    self._dollar__xgafv = _dollar__xgafv
                    self.accessToken = accessToken
                    self.alt = alt
                    self.callback = callback
                    self.fields = fields
                    self.key = key
                    self.oauthToken = oauthToken
                    self.prettyPrint = prettyPrint
                    self.quotaUser = quotaUser
                    self.uploadProtocol = uploadProtocol
                    self.uploadType = uploadType
                }
            }
            public var query: Operations.Gmail_users_labels_create.Input.Query
            /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/labels/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.Gmail_users_labels_create.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.Gmail_users_labels_create.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.Gmail_users_labels_create.Input.Headers
            /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/labels/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/labels/POST/requestBody/content/application\/json`.
                case json(Components.Schemas.Label)
            }
            public var body: Operations.Gmail_users_labels_create.Input.Body?
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - query:
            ///   - headers:
            ///   - body:
            public init(
                path: Operations.Gmail_users_labels_create.Input.Path,
                query: Operations.Gmail_users_labels_create.Input.Query = .init(),
                headers: Operations.Gmail_users_labels_create.Input.Headers = .init(),
                body: Operations.Gmail_users_labels_create.Input.Body? = nil
            ) {
                self.path = path
                self.query = query
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/labels/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/labels/POST/responses/200/content/application\/json`.
                    case json(Components.Schemas.Label)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.Label {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.Gmail_users_labels_create.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.Gmail_users_labels_create.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Successful response
            ///
            /// - Remark: Generated from `#/paths//gmail/v1/users/{userId}/labels/post(gmail.users.labels.create)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.Gmail_users_labels_create.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.Gmail_users_labels_create.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Gets the specified label.
    ///
    /// - Remark: HTTP `GET /gmail/v1/users/{userId}/labels/{id}`.
    /// - Remark: Generated from `#/paths//gmail/v1/users/{userId}/labels/{id}/get(gmail.users.labels.get)`.
    public enum Gmail_users_labels_get {
        public static let id: Swift.String = "gmail.users.labels.get"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/labels/{id}/GET/path`.
            public struct Path: Sendable, Hashable {
                /// The user's email address. The special value `me` can be used to indicate the authenticated user.
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/labels/{id}/GET/path/userId`.
                public var userId: Swift.String
                /// The ID of the label to retrieve.
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/labels/{id}/GET/path/id`.
                public var id: Swift.String
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - userId: The user's email address. The special value `me` can be used to indicate the authenticated user.
                ///   - id: The ID of the label to retrieve.
                public init(
                    userId: Swift.String,
                    id: Swift.String
                ) {
                    self.userId = userId
                    self.id = id
                }
            }
            public var path: Operations.Gmail_users_labels_get.Input.Path
            /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/labels/{id}/GET/query`.
            public struct Query: Sendable, Hashable {
                /// - Remark: Generated from `#/components/parameters/_.xgafv`.
                @frozen public enum __period_xgafv: String, Codable, Hashable, Sendable, CaseIterable {
                    case _1 = "1"
                    case _2 = "2"
                }
                /// V1 error format.
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/labels/{id}/GET/query/$.xgafv`.
                public var _dollar__xgafv: Components.Parameters.__period_xgafv?
                /// OAuth access token.
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/labels/{id}/GET/query/access_token`.
                public var accessToken: Components.Parameters.AccessToken?
                /// - Remark: Generated from `#/components/parameters/alt`.
                @frozen public enum Alt: String, Codable, Hashable, Sendable, CaseIterable {
                    case json = "json"
                    case media = "media"
                    case proto = "proto"
                }
                /// Data format for response.
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/labels/{id}/GET/query/alt`.
                public var alt: Components.Parameters.Alt?
                /// JSONP
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/labels/{id}/GET/query/callback`.
                public var callback: Components.Parameters.Callback?
                /// Selector specifying which fields to include in a partial response.
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/labels/{id}/GET/query/fields`.
                public var fields: Components.Parameters.Fields?
                /// API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/labels/{id}/GET/query/key`.
                public var key: Components.Parameters.Key?
                /// OAuth 2.0 token for the current user.
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/labels/{id}/GET/query/oauth_token`.
                public var oauthToken: Components.Parameters.OauthToken?
                /// Returns response with indentations and line breaks.
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/labels/{id}/GET/query/prettyPrint`.
                public var prettyPrint: Components.Parameters.PrettyPrint?
                /// Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/labels/{id}/GET/query/quotaUser`.
                public var quotaUser: Components.Parameters.QuotaUser?
                /// Upload protocol for media (e.g. "raw", "multipart").
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/labels/{id}/GET/query/upload_protocol`.
                public var uploadProtocol: Components.Parameters.UploadProtocol?
                /// Legacy upload protocol for media (e.g. "media", "multipart").
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/labels/{id}/GET/query/uploadType`.
                public var uploadType: Components.Parameters.UploadType?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - _dollar__xgafv: V1 error format.
                ///   - accessToken: OAuth access token.
                ///   - alt: Data format for response.
                ///   - callback: JSONP
                ///   - fields: Selector specifying which fields to include in a partial response.
                ///   - key: API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
                ///   - oauthToken: OAuth 2.0 token for the current user.
                ///   - prettyPrint: Returns response with indentations and line breaks.
                ///   - quotaUser: Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
                ///   - uploadProtocol: Upload protocol for media (e.g. "raw", "multipart").
                ///   - uploadType: Legacy upload protocol for media (e.g. "media", "multipart").
                public init(
                    _dollar__xgafv: Components.Parameters.__period_xgafv? = nil,
                    accessToken: Components.Parameters.AccessToken? = nil,
                    alt: Components.Parameters.Alt? = nil,
                    callback: Components.Parameters.Callback? = nil,
                    fields: Components.Parameters.Fields? = nil,
                    key: Components.Parameters.Key? = nil,
                    oauthToken: Components.Parameters.OauthToken? = nil,
                    prettyPrint: Components.Parameters.PrettyPrint? = nil,
                    quotaUser: Components.Parameters.QuotaUser? = nil,
                    uploadProtocol: Components.Parameters.UploadProtocol? = nil,
                    uploadType: Components.Parameters.UploadType? = nil
                ) {
                    self._dollar__xgafv = _dollar__xgafv
                    self.accessToken = accessToken
                    self.alt = alt
                    self.callback = callback
                    self.fields = fields
                    self.key = key
                    self.oauthToken = oauthToken
                    self.prettyPrint = prettyPrint
                    self.quotaUser = quotaUser
                    self.uploadProtocol = uploadProtocol
                    self.uploadType = uploadType
                }
            }
            public var query: Operations.Gmail_users_labels_get.Input.Query
            /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/labels/{id}/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.Gmail_users_labels_get.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.Gmail_users_labels_get.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.Gmail_users_labels_get.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - query:
            ///   - headers:
            public init(
                path: Operations.Gmail_users_labels_get.Input.Path,
                query: Operations.Gmail_users_labels_get.Input.Query = .init(),
                headers: Operations.Gmail_users_labels_get.Input.Headers = .init()
            ) {
                self.path = path
                self.query = query
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/labels/{id}/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/labels/{id}/GET/responses/200/content/application\/json`.
                    case json(Components.Schemas.Label)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.Label {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.Gmail_users_labels_get.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.Gmail_users_labels_get.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Successful response
            ///
            /// - Remark: Generated from `#/paths//gmail/v1/users/{userId}/labels/{id}/get(gmail.users.labels.get)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.Gmail_users_labels_get.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.Gmail_users_labels_get.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Patch the specified label.
    ///
    /// - Remark: HTTP `PATCH /gmail/v1/users/{userId}/labels/{id}`.
    /// - Remark: Generated from `#/paths//gmail/v1/users/{userId}/labels/{id}/patch(gmail.users.labels.patch)`.
    public enum Gmail_users_labels_patch {
        public static let id: Swift.String = "gmail.users.labels.patch"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/labels/{id}/PATCH/path`.
            public struct Path: Sendable, Hashable {
                /// The user's email address. The special value `me` can be used to indicate the authenticated user.
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/labels/{id}/PATCH/path/userId`.
                public var userId: Swift.String
                /// The ID of the label to update.
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/labels/{id}/PATCH/path/id`.
                public var id: Swift.String
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - userId: The user's email address. The special value `me` can be used to indicate the authenticated user.
                ///   - id: The ID of the label to update.
                public init(
                    userId: Swift.String,
                    id: Swift.String
                ) {
                    self.userId = userId
                    self.id = id
                }
            }
            public var path: Operations.Gmail_users_labels_patch.Input.Path
            /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/labels/{id}/PATCH/query`.
            public struct Query: Sendable, Hashable {
                /// - Remark: Generated from `#/components/parameters/_.xgafv`.
                @frozen public enum __period_xgafv: String, Codable, Hashable, Sendable, CaseIterable {
                    case _1 = "1"
                    case _2 = "2"
                }
                /// V1 error format.
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/labels/{id}/PATCH/query/$.xgafv`.
                public var _dollar__xgafv: Components.Parameters.__period_xgafv?
                /// OAuth access token.
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/labels/{id}/PATCH/query/access_token`.
                public var accessToken: Components.Parameters.AccessToken?
                /// - Remark: Generated from `#/components/parameters/alt`.
                @frozen public enum Alt: String, Codable, Hashable, Sendable, CaseIterable {
                    case json = "json"
                    case media = "media"
                    case proto = "proto"
                }
                /// Data format for response.
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/labels/{id}/PATCH/query/alt`.
                public var alt: Components.Parameters.Alt?
                /// JSONP
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/labels/{id}/PATCH/query/callback`.
                public var callback: Components.Parameters.Callback?
                /// Selector specifying which fields to include in a partial response.
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/labels/{id}/PATCH/query/fields`.
                public var fields: Components.Parameters.Fields?
                /// API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/labels/{id}/PATCH/query/key`.
                public var key: Components.Parameters.Key?
                /// OAuth 2.0 token for the current user.
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/labels/{id}/PATCH/query/oauth_token`.
                public var oauthToken: Components.Parameters.OauthToken?
                /// Returns response with indentations and line breaks.
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/labels/{id}/PATCH/query/prettyPrint`.
                public var prettyPrint: Components.Parameters.PrettyPrint?
                /// Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/labels/{id}/PATCH/query/quotaUser`.
                public var quotaUser: Components.Parameters.QuotaUser?
                /// Upload protocol for media (e.g. "raw", "multipart").
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/labels/{id}/PATCH/query/upload_protocol`.
                public var uploadProtocol: Components.Parameters.UploadProtocol?
                /// Legacy upload protocol for media (e.g. "media", "multipart").
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/labels/{id}/PATCH/query/uploadType`.
                public var uploadType: Components.Parameters.UploadType?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - _dollar__xgafv: V1 error format.
                ///   - accessToken: OAuth access token.
                ///   - alt: Data format for response.
                ///   - callback: JSONP
                ///   - fields: Selector specifying which fields to include in a partial response.
                ///   - key: API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
                ///   - oauthToken: OAuth 2.0 token for the current user.
                ///   - prettyPrint: Returns response with indentations and line breaks.
                ///   - quotaUser: Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
                ///   - uploadProtocol: Upload protocol for media (e.g. "raw", "multipart").
                ///   - uploadType: Legacy upload protocol for media (e.g. "media", "multipart").
                public init(
                    _dollar__xgafv: Components.Parameters.__period_xgafv? = nil,
                    accessToken: Components.Parameters.AccessToken? = nil,
                    alt: Components.Parameters.Alt? = nil,
                    callback: Components.Parameters.Callback? = nil,
                    fields: Components.Parameters.Fields? = nil,
                    key: Components.Parameters.Key? = nil,
                    oauthToken: Components.Parameters.OauthToken? = nil,
                    prettyPrint: Components.Parameters.PrettyPrint? = nil,
                    quotaUser: Components.Parameters.QuotaUser? = nil,
                    uploadProtocol: Components.Parameters.UploadProtocol? = nil,
                    uploadType: Components.Parameters.UploadType? = nil
                ) {
                    self._dollar__xgafv = _dollar__xgafv
                    self.accessToken = accessToken
                    self.alt = alt
                    self.callback = callback
                    self.fields = fields
                    self.key = key
                    self.oauthToken = oauthToken
                    self.prettyPrint = prettyPrint
                    self.quotaUser = quotaUser
                    self.uploadProtocol = uploadProtocol
                    self.uploadType = uploadType
                }
            }
            public var query: Operations.Gmail_users_labels_patch.Input.Query
            /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/labels/{id}/PATCH/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.Gmail_users_labels_patch.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.Gmail_users_labels_patch.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.Gmail_users_labels_patch.Input.Headers
            /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/labels/{id}/PATCH/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/labels/{id}/PATCH/requestBody/content/application\/json`.
                case json(Components.Schemas.Label)
            }
            public var body: Operations.Gmail_users_labels_patch.Input.Body?
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - query:
            ///   - headers:
            ///   - body:
            public init(
                path: Operations.Gmail_users_labels_patch.Input.Path,
                query: Operations.Gmail_users_labels_patch.Input.Query = .init(),
                headers: Operations.Gmail_users_labels_patch.Input.Headers = .init(),
                body: Operations.Gmail_users_labels_patch.Input.Body? = nil
            ) {
                self.path = path
                self.query = query
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/labels/{id}/PATCH/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/labels/{id}/PATCH/responses/200/content/application\/json`.
                    case json(Components.Schemas.Label)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.Label {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.Gmail_users_labels_patch.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.Gmail_users_labels_patch.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Successful response
            ///
            /// - Remark: Generated from `#/paths//gmail/v1/users/{userId}/labels/{id}/patch(gmail.users.labels.patch)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.Gmail_users_labels_patch.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.Gmail_users_labels_patch.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Updates the specified label.
    ///
    /// - Remark: HTTP `PUT /gmail/v1/users/{userId}/labels/{id}`.
    /// - Remark: Generated from `#/paths//gmail/v1/users/{userId}/labels/{id}/put(gmail.users.labels.update)`.
    public enum Gmail_users_labels_update {
        public static let id: Swift.String = "gmail.users.labels.update"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/labels/{id}/PUT/path`.
            public struct Path: Sendable, Hashable {
                /// The user's email address. The special value `me` can be used to indicate the authenticated user.
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/labels/{id}/PUT/path/userId`.
                public var userId: Swift.String
                /// The ID of the label to update.
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/labels/{id}/PUT/path/id`.
                public var id: Swift.String
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - userId: The user's email address. The special value `me` can be used to indicate the authenticated user.
                ///   - id: The ID of the label to update.
                public init(
                    userId: Swift.String,
                    id: Swift.String
                ) {
                    self.userId = userId
                    self.id = id
                }
            }
            public var path: Operations.Gmail_users_labels_update.Input.Path
            /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/labels/{id}/PUT/query`.
            public struct Query: Sendable, Hashable {
                /// - Remark: Generated from `#/components/parameters/_.xgafv`.
                @frozen public enum __period_xgafv: String, Codable, Hashable, Sendable, CaseIterable {
                    case _1 = "1"
                    case _2 = "2"
                }
                /// V1 error format.
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/labels/{id}/PUT/query/$.xgafv`.
                public var _dollar__xgafv: Components.Parameters.__period_xgafv?
                /// OAuth access token.
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/labels/{id}/PUT/query/access_token`.
                public var accessToken: Components.Parameters.AccessToken?
                /// - Remark: Generated from `#/components/parameters/alt`.
                @frozen public enum Alt: String, Codable, Hashable, Sendable, CaseIterable {
                    case json = "json"
                    case media = "media"
                    case proto = "proto"
                }
                /// Data format for response.
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/labels/{id}/PUT/query/alt`.
                public var alt: Components.Parameters.Alt?
                /// JSONP
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/labels/{id}/PUT/query/callback`.
                public var callback: Components.Parameters.Callback?
                /// Selector specifying which fields to include in a partial response.
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/labels/{id}/PUT/query/fields`.
                public var fields: Components.Parameters.Fields?
                /// API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/labels/{id}/PUT/query/key`.
                public var key: Components.Parameters.Key?
                /// OAuth 2.0 token for the current user.
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/labels/{id}/PUT/query/oauth_token`.
                public var oauthToken: Components.Parameters.OauthToken?
                /// Returns response with indentations and line breaks.
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/labels/{id}/PUT/query/prettyPrint`.
                public var prettyPrint: Components.Parameters.PrettyPrint?
                /// Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/labels/{id}/PUT/query/quotaUser`.
                public var quotaUser: Components.Parameters.QuotaUser?
                /// Upload protocol for media (e.g. "raw", "multipart").
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/labels/{id}/PUT/query/upload_protocol`.
                public var uploadProtocol: Components.Parameters.UploadProtocol?
                /// Legacy upload protocol for media (e.g. "media", "multipart").
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/labels/{id}/PUT/query/uploadType`.
                public var uploadType: Components.Parameters.UploadType?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - _dollar__xgafv: V1 error format.
                ///   - accessToken: OAuth access token.
                ///   - alt: Data format for response.
                ///   - callback: JSONP
                ///   - fields: Selector specifying which fields to include in a partial response.
                ///   - key: API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
                ///   - oauthToken: OAuth 2.0 token for the current user.
                ///   - prettyPrint: Returns response with indentations and line breaks.
                ///   - quotaUser: Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
                ///   - uploadProtocol: Upload protocol for media (e.g. "raw", "multipart").
                ///   - uploadType: Legacy upload protocol for media (e.g. "media", "multipart").
                public init(
                    _dollar__xgafv: Components.Parameters.__period_xgafv? = nil,
                    accessToken: Components.Parameters.AccessToken? = nil,
                    alt: Components.Parameters.Alt? = nil,
                    callback: Components.Parameters.Callback? = nil,
                    fields: Components.Parameters.Fields? = nil,
                    key: Components.Parameters.Key? = nil,
                    oauthToken: Components.Parameters.OauthToken? = nil,
                    prettyPrint: Components.Parameters.PrettyPrint? = nil,
                    quotaUser: Components.Parameters.QuotaUser? = nil,
                    uploadProtocol: Components.Parameters.UploadProtocol? = nil,
                    uploadType: Components.Parameters.UploadType? = nil
                ) {
                    self._dollar__xgafv = _dollar__xgafv
                    self.accessToken = accessToken
                    self.alt = alt
                    self.callback = callback
                    self.fields = fields
                    self.key = key
                    self.oauthToken = oauthToken
                    self.prettyPrint = prettyPrint
                    self.quotaUser = quotaUser
                    self.uploadProtocol = uploadProtocol
                    self.uploadType = uploadType
                }
            }
            public var query: Operations.Gmail_users_labels_update.Input.Query
            /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/labels/{id}/PUT/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.Gmail_users_labels_update.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.Gmail_users_labels_update.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.Gmail_users_labels_update.Input.Headers
            /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/labels/{id}/PUT/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/labels/{id}/PUT/requestBody/content/application\/json`.
                case json(Components.Schemas.Label)
            }
            public var body: Operations.Gmail_users_labels_update.Input.Body?
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - query:
            ///   - headers:
            ///   - body:
            public init(
                path: Operations.Gmail_users_labels_update.Input.Path,
                query: Operations.Gmail_users_labels_update.Input.Query = .init(),
                headers: Operations.Gmail_users_labels_update.Input.Headers = .init(),
                body: Operations.Gmail_users_labels_update.Input.Body? = nil
            ) {
                self.path = path
                self.query = query
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/labels/{id}/PUT/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/labels/{id}/PUT/responses/200/content/application\/json`.
                    case json(Components.Schemas.Label)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.Label {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.Gmail_users_labels_update.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.Gmail_users_labels_update.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Successful response
            ///
            /// - Remark: Generated from `#/paths//gmail/v1/users/{userId}/labels/{id}/put(gmail.users.labels.update)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.Gmail_users_labels_update.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.Gmail_users_labels_update.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Immediately and permanently deletes the specified label and removes it from any messages and threads that it is applied to.
    ///
    /// - Remark: HTTP `DELETE /gmail/v1/users/{userId}/labels/{id}`.
    /// - Remark: Generated from `#/paths//gmail/v1/users/{userId}/labels/{id}/delete(gmail.users.labels.delete)`.
    public enum Gmail_users_labels_delete {
        public static let id: Swift.String = "gmail.users.labels.delete"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/labels/{id}/DELETE/path`.
            public struct Path: Sendable, Hashable {
                /// The user's email address. The special value `me` can be used to indicate the authenticated user.
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/labels/{id}/DELETE/path/userId`.
                public var userId: Swift.String
                /// The ID of the label to delete.
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/labels/{id}/DELETE/path/id`.
                public var id: Swift.String
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - userId: The user's email address. The special value `me` can be used to indicate the authenticated user.
                ///   - id: The ID of the label to delete.
                public init(
                    userId: Swift.String,
                    id: Swift.String
                ) {
                    self.userId = userId
                    self.id = id
                }
            }
            public var path: Operations.Gmail_users_labels_delete.Input.Path
            /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/labels/{id}/DELETE/query`.
            public struct Query: Sendable, Hashable {
                /// - Remark: Generated from `#/components/parameters/_.xgafv`.
                @frozen public enum __period_xgafv: String, Codable, Hashable, Sendable, CaseIterable {
                    case _1 = "1"
                    case _2 = "2"
                }
                /// V1 error format.
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/labels/{id}/DELETE/query/$.xgafv`.
                public var _dollar__xgafv: Components.Parameters.__period_xgafv?
                /// OAuth access token.
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/labels/{id}/DELETE/query/access_token`.
                public var accessToken: Components.Parameters.AccessToken?
                /// - Remark: Generated from `#/components/parameters/alt`.
                @frozen public enum Alt: String, Codable, Hashable, Sendable, CaseIterable {
                    case json = "json"
                    case media = "media"
                    case proto = "proto"
                }
                /// Data format for response.
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/labels/{id}/DELETE/query/alt`.
                public var alt: Components.Parameters.Alt?
                /// JSONP
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/labels/{id}/DELETE/query/callback`.
                public var callback: Components.Parameters.Callback?
                /// Selector specifying which fields to include in a partial response.
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/labels/{id}/DELETE/query/fields`.
                public var fields: Components.Parameters.Fields?
                /// API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/labels/{id}/DELETE/query/key`.
                public var key: Components.Parameters.Key?
                /// OAuth 2.0 token for the current user.
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/labels/{id}/DELETE/query/oauth_token`.
                public var oauthToken: Components.Parameters.OauthToken?
                /// Returns response with indentations and line breaks.
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/labels/{id}/DELETE/query/prettyPrint`.
                public var prettyPrint: Components.Parameters.PrettyPrint?
                /// Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/labels/{id}/DELETE/query/quotaUser`.
                public var quotaUser: Components.Parameters.QuotaUser?
                /// Upload protocol for media (e.g. "raw", "multipart").
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/labels/{id}/DELETE/query/upload_protocol`.
                public var uploadProtocol: Components.Parameters.UploadProtocol?
                /// Legacy upload protocol for media (e.g. "media", "multipart").
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/labels/{id}/DELETE/query/uploadType`.
                public var uploadType: Components.Parameters.UploadType?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - _dollar__xgafv: V1 error format.
                ///   - accessToken: OAuth access token.
                ///   - alt: Data format for response.
                ///   - callback: JSONP
                ///   - fields: Selector specifying which fields to include in a partial response.
                ///   - key: API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
                ///   - oauthToken: OAuth 2.0 token for the current user.
                ///   - prettyPrint: Returns response with indentations and line breaks.
                ///   - quotaUser: Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
                ///   - uploadProtocol: Upload protocol for media (e.g. "raw", "multipart").
                ///   - uploadType: Legacy upload protocol for media (e.g. "media", "multipart").
                public init(
                    _dollar__xgafv: Components.Parameters.__period_xgafv? = nil,
                    accessToken: Components.Parameters.AccessToken? = nil,
                    alt: Components.Parameters.Alt? = nil,
                    callback: Components.Parameters.Callback? = nil,
                    fields: Components.Parameters.Fields? = nil,
                    key: Components.Parameters.Key? = nil,
                    oauthToken: Components.Parameters.OauthToken? = nil,
                    prettyPrint: Components.Parameters.PrettyPrint? = nil,
                    quotaUser: Components.Parameters.QuotaUser? = nil,
                    uploadProtocol: Components.Parameters.UploadProtocol? = nil,
                    uploadType: Components.Parameters.UploadType? = nil
                ) {
                    self._dollar__xgafv = _dollar__xgafv
                    self.accessToken = accessToken
                    self.alt = alt
                    self.callback = callback
                    self.fields = fields
                    self.key = key
                    self.oauthToken = oauthToken
                    self.prettyPrint = prettyPrint
                    self.quotaUser = quotaUser
                    self.uploadProtocol = uploadProtocol
                    self.uploadType = uploadType
                }
            }
            public var query: Operations.Gmail_users_labels_delete.Input.Query
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - query:
            public init(
                path: Operations.Gmail_users_labels_delete.Input.Path,
                query: Operations.Gmail_users_labels_delete.Input.Query = .init()
            ) {
                self.path = path
                self.query = query
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// Creates a new `Ok`.
                public init() {}
            }
            /// Successful response
            ///
            /// - Remark: Generated from `#/paths//gmail/v1/users/{userId}/labels/{id}/delete(gmail.users.labels.delete)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.Gmail_users_labels_delete.Output.Ok)
            /// Successful response
            ///
            /// - Remark: Generated from `#/paths//gmail/v1/users/{userId}/labels/{id}/delete(gmail.users.labels.delete)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            public static var ok: Self {
                .ok(.init())
            }
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.Gmail_users_labels_delete.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
    }
    /// Lists the messages in the user's mailbox.
    ///
    /// - Remark: HTTP `GET /gmail/v1/users/{userId}/messages`.
    /// - Remark: Generated from `#/paths//gmail/v1/users/{userId}/messages/get(gmail.users.messages.list)`.
    public enum Gmail_users_messages_list {
        public static let id: Swift.String = "gmail.users.messages.list"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/messages/GET/path`.
            public struct Path: Sendable, Hashable {
                /// The user's email address. The special value `me` can be used to indicate the authenticated user.
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/messages/GET/path/userId`.
                public var userId: Swift.String
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - userId: The user's email address. The special value `me` can be used to indicate the authenticated user.
                public init(userId: Swift.String) {
                    self.userId = userId
                }
            }
            public var path: Operations.Gmail_users_messages_list.Input.Path
            /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/messages/GET/query`.
            public struct Query: Sendable, Hashable {
                /// - Remark: Generated from `#/components/parameters/_.xgafv`.
                @frozen public enum __period_xgafv: String, Codable, Hashable, Sendable, CaseIterable {
                    case _1 = "1"
                    case _2 = "2"
                }
                /// V1 error format.
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/messages/GET/query/$.xgafv`.
                public var _dollar__xgafv: Components.Parameters.__period_xgafv?
                /// OAuth access token.
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/messages/GET/query/access_token`.
                public var accessToken: Components.Parameters.AccessToken?
                /// - Remark: Generated from `#/components/parameters/alt`.
                @frozen public enum Alt: String, Codable, Hashable, Sendable, CaseIterable {
                    case json = "json"
                    case media = "media"
                    case proto = "proto"
                }
                /// Data format for response.
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/messages/GET/query/alt`.
                public var alt: Components.Parameters.Alt?
                /// JSONP
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/messages/GET/query/callback`.
                public var callback: Components.Parameters.Callback?
                /// Selector specifying which fields to include in a partial response.
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/messages/GET/query/fields`.
                public var fields: Components.Parameters.Fields?
                /// API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/messages/GET/query/key`.
                public var key: Components.Parameters.Key?
                /// OAuth 2.0 token for the current user.
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/messages/GET/query/oauth_token`.
                public var oauthToken: Components.Parameters.OauthToken?
                /// Returns response with indentations and line breaks.
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/messages/GET/query/prettyPrint`.
                public var prettyPrint: Components.Parameters.PrettyPrint?
                /// Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/messages/GET/query/quotaUser`.
                public var quotaUser: Components.Parameters.QuotaUser?
                /// Upload protocol for media (e.g. "raw", "multipart").
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/messages/GET/query/upload_protocol`.
                public var uploadProtocol: Components.Parameters.UploadProtocol?
                /// Legacy upload protocol for media (e.g. "media", "multipart").
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/messages/GET/query/uploadType`.
                public var uploadType: Components.Parameters.UploadType?
                /// Include messages from `SPAM` and `TRASH` in the results.
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/messages/GET/query/includeSpamTrash`.
                public var includeSpamTrash: Swift.Bool?
                /// Only return messages with labels that match all of the specified label IDs. Messages in a thread might have labels that other messages in the same thread don't have. To learn more, see [Manage labels on messages and threads](https://developers.google.com/gmail/api/guides/labels#manage_labels_on_messages_threads).
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/messages/GET/query/labelIds`.
                public var labelIds: [Swift.String]?
                /// Maximum number of messages to return. This field defaults to 100. The maximum allowed value for this field is 500.
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/messages/GET/query/maxResults`.
                public var maxResults: Swift.Int?
                /// Page token to retrieve a specific page of results in the list.
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/messages/GET/query/pageToken`.
                public var pageToken: Swift.String?
                /// Only return messages matching the specified query. Supports the same query format as the Gmail search box. For example, `"from:someuser@example.com rfc822msgid: is:unread"`. Parameter cannot be used when accessing the api using the gmail.metadata scope.
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/messages/GET/query/q`.
                public var q: Swift.String?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - _dollar__xgafv: V1 error format.
                ///   - accessToken: OAuth access token.
                ///   - alt: Data format for response.
                ///   - callback: JSONP
                ///   - fields: Selector specifying which fields to include in a partial response.
                ///   - key: API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
                ///   - oauthToken: OAuth 2.0 token for the current user.
                ///   - prettyPrint: Returns response with indentations and line breaks.
                ///   - quotaUser: Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
                ///   - uploadProtocol: Upload protocol for media (e.g. "raw", "multipart").
                ///   - uploadType: Legacy upload protocol for media (e.g. "media", "multipart").
                ///   - includeSpamTrash: Include messages from `SPAM` and `TRASH` in the results.
                ///   - labelIds: Only return messages with labels that match all of the specified label IDs. Messages in a thread might have labels that other messages in the same thread don't have. To learn more, see [Manage labels on messages and threads](https://developers.google.com/gmail/api/guides/labels#manage_labels_on_messages_threads).
                ///   - maxResults: Maximum number of messages to return. This field defaults to 100. The maximum allowed value for this field is 500.
                ///   - pageToken: Page token to retrieve a specific page of results in the list.
                ///   - q: Only return messages matching the specified query. Supports the same query format as the Gmail search box. For example, `"from:someuser@example.com rfc822msgid: is:unread"`. Parameter cannot be used when accessing the api using the gmail.metadata scope.
                public init(
                    _dollar__xgafv: Components.Parameters.__period_xgafv? = nil,
                    accessToken: Components.Parameters.AccessToken? = nil,
                    alt: Components.Parameters.Alt? = nil,
                    callback: Components.Parameters.Callback? = nil,
                    fields: Components.Parameters.Fields? = nil,
                    key: Components.Parameters.Key? = nil,
                    oauthToken: Components.Parameters.OauthToken? = nil,
                    prettyPrint: Components.Parameters.PrettyPrint? = nil,
                    quotaUser: Components.Parameters.QuotaUser? = nil,
                    uploadProtocol: Components.Parameters.UploadProtocol? = nil,
                    uploadType: Components.Parameters.UploadType? = nil,
                    includeSpamTrash: Swift.Bool? = nil,
                    labelIds: [Swift.String]? = nil,
                    maxResults: Swift.Int? = nil,
                    pageToken: Swift.String? = nil,
                    q: Swift.String? = nil
                ) {
                    self._dollar__xgafv = _dollar__xgafv
                    self.accessToken = accessToken
                    self.alt = alt
                    self.callback = callback
                    self.fields = fields
                    self.key = key
                    self.oauthToken = oauthToken
                    self.prettyPrint = prettyPrint
                    self.quotaUser = quotaUser
                    self.uploadProtocol = uploadProtocol
                    self.uploadType = uploadType
                    self.includeSpamTrash = includeSpamTrash
                    self.labelIds = labelIds
                    self.maxResults = maxResults
                    self.pageToken = pageToken
                    self.q = q
                }
            }
            public var query: Operations.Gmail_users_messages_list.Input.Query
            /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/messages/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.Gmail_users_messages_list.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.Gmail_users_messages_list.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.Gmail_users_messages_list.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - query:
            ///   - headers:
            public init(
                path: Operations.Gmail_users_messages_list.Input.Path,
                query: Operations.Gmail_users_messages_list.Input.Query = .init(),
                headers: Operations.Gmail_users_messages_list.Input.Headers = .init()
            ) {
                self.path = path
                self.query = query
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/messages/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/messages/GET/responses/200/content/application\/json`.
                    case json(Components.Schemas.ListMessagesResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.ListMessagesResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.Gmail_users_messages_list.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.Gmail_users_messages_list.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Successful response
            ///
            /// - Remark: Generated from `#/paths//gmail/v1/users/{userId}/messages/get(gmail.users.messages.list)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.Gmail_users_messages_list.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.Gmail_users_messages_list.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Directly inserts a message into only this user's mailbox similar to `IMAP APPEND`, bypassing most scanning and classification. Does not send a message.
    ///
    /// - Remark: HTTP `POST /gmail/v1/users/{userId}/messages`.
    /// - Remark: Generated from `#/paths//gmail/v1/users/{userId}/messages/post(gmail.users.messages.insert)`.
    public enum Gmail_users_messages_insert {
        public static let id: Swift.String = "gmail.users.messages.insert"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/messages/POST/path`.
            public struct Path: Sendable, Hashable {
                /// The user's email address. The special value `me` can be used to indicate the authenticated user.
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/messages/POST/path/userId`.
                public var userId: Swift.String
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - userId: The user's email address. The special value `me` can be used to indicate the authenticated user.
                public init(userId: Swift.String) {
                    self.userId = userId
                }
            }
            public var path: Operations.Gmail_users_messages_insert.Input.Path
            /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/messages/POST/query`.
            public struct Query: Sendable, Hashable {
                /// - Remark: Generated from `#/components/parameters/_.xgafv`.
                @frozen public enum __period_xgafv: String, Codable, Hashable, Sendable, CaseIterable {
                    case _1 = "1"
                    case _2 = "2"
                }
                /// V1 error format.
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/messages/POST/query/$.xgafv`.
                public var _dollar__xgafv: Components.Parameters.__period_xgafv?
                /// OAuth access token.
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/messages/POST/query/access_token`.
                public var accessToken: Components.Parameters.AccessToken?
                /// - Remark: Generated from `#/components/parameters/alt`.
                @frozen public enum Alt: String, Codable, Hashable, Sendable, CaseIterable {
                    case json = "json"
                    case media = "media"
                    case proto = "proto"
                }
                /// Data format for response.
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/messages/POST/query/alt`.
                public var alt: Components.Parameters.Alt?
                /// JSONP
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/messages/POST/query/callback`.
                public var callback: Components.Parameters.Callback?
                /// Selector specifying which fields to include in a partial response.
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/messages/POST/query/fields`.
                public var fields: Components.Parameters.Fields?
                /// API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/messages/POST/query/key`.
                public var key: Components.Parameters.Key?
                /// OAuth 2.0 token for the current user.
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/messages/POST/query/oauth_token`.
                public var oauthToken: Components.Parameters.OauthToken?
                /// Returns response with indentations and line breaks.
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/messages/POST/query/prettyPrint`.
                public var prettyPrint: Components.Parameters.PrettyPrint?
                /// Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/messages/POST/query/quotaUser`.
                public var quotaUser: Components.Parameters.QuotaUser?
                /// Upload protocol for media (e.g. "raw", "multipart").
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/messages/POST/query/upload_protocol`.
                public var uploadProtocol: Components.Parameters.UploadProtocol?
                /// Legacy upload protocol for media (e.g. "media", "multipart").
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/messages/POST/query/uploadType`.
                public var uploadType: Components.Parameters.UploadType?
                /// Mark the email as permanently deleted (not TRASH) and only visible in Google Vault to a Vault administrator. Only used for Google Workspace accounts.
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/messages/POST/query/deleted`.
                public var deleted: Swift.Bool?
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/messages/POST/query/internalDateSource`.
                @frozen public enum InternalDateSourcePayload: String, Codable, Hashable, Sendable, CaseIterable {
                    case receivedTime = "receivedTime"
                    case dateHeader = "dateHeader"
                }
                /// Source for Gmail's internal date of the message.
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/messages/POST/query/internalDateSource`.
                public var internalDateSource: Operations.Gmail_users_messages_insert.Input.Query.InternalDateSourcePayload?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - _dollar__xgafv: V1 error format.
                ///   - accessToken: OAuth access token.
                ///   - alt: Data format for response.
                ///   - callback: JSONP
                ///   - fields: Selector specifying which fields to include in a partial response.
                ///   - key: API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
                ///   - oauthToken: OAuth 2.0 token for the current user.
                ///   - prettyPrint: Returns response with indentations and line breaks.
                ///   - quotaUser: Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
                ///   - uploadProtocol: Upload protocol for media (e.g. "raw", "multipart").
                ///   - uploadType: Legacy upload protocol for media (e.g. "media", "multipart").
                ///   - deleted: Mark the email as permanently deleted (not TRASH) and only visible in Google Vault to a Vault administrator. Only used for Google Workspace accounts.
                ///   - internalDateSource: Source for Gmail's internal date of the message.
                public init(
                    _dollar__xgafv: Components.Parameters.__period_xgafv? = nil,
                    accessToken: Components.Parameters.AccessToken? = nil,
                    alt: Components.Parameters.Alt? = nil,
                    callback: Components.Parameters.Callback? = nil,
                    fields: Components.Parameters.Fields? = nil,
                    key: Components.Parameters.Key? = nil,
                    oauthToken: Components.Parameters.OauthToken? = nil,
                    prettyPrint: Components.Parameters.PrettyPrint? = nil,
                    quotaUser: Components.Parameters.QuotaUser? = nil,
                    uploadProtocol: Components.Parameters.UploadProtocol? = nil,
                    uploadType: Components.Parameters.UploadType? = nil,
                    deleted: Swift.Bool? = nil,
                    internalDateSource: Operations.Gmail_users_messages_insert.Input.Query.InternalDateSourcePayload? = nil
                ) {
                    self._dollar__xgafv = _dollar__xgafv
                    self.accessToken = accessToken
                    self.alt = alt
                    self.callback = callback
                    self.fields = fields
                    self.key = key
                    self.oauthToken = oauthToken
                    self.prettyPrint = prettyPrint
                    self.quotaUser = quotaUser
                    self.uploadProtocol = uploadProtocol
                    self.uploadType = uploadType
                    self.deleted = deleted
                    self.internalDateSource = internalDateSource
                }
            }
            public var query: Operations.Gmail_users_messages_insert.Input.Query
            /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/messages/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.Gmail_users_messages_insert.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.Gmail_users_messages_insert.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.Gmail_users_messages_insert.Input.Headers
            /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/messages/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/messages/POST/requestBody/content/message\/cpim`.
                case messageCpim(OpenAPIRuntime.HTTPBody)
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/messages/POST/requestBody/content/message\/delivery-status`.
                case messageDeliveryStatus(OpenAPIRuntime.HTTPBody)
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/messages/POST/requestBody/content/message\/disposition-notification`.
                case messageDispositionNotification(OpenAPIRuntime.HTTPBody)
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/messages/POST/requestBody/content/message\/external-body`.
                case messageExternalBody(OpenAPIRuntime.HTTPBody)
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/messages/POST/requestBody/content/message\/feedback-report`.
                case messageFeedbackReport(OpenAPIRuntime.HTTPBody)
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/messages/POST/requestBody/content/message\/global`.
                case messageGlobal(OpenAPIRuntime.HTTPBody)
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/messages/POST/requestBody/content/message\/global-delivery-status`.
                case messageGlobalDeliveryStatus(OpenAPIRuntime.HTTPBody)
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/messages/POST/requestBody/content/message\/global-disposition-notification`.
                case messageGlobalDispositionNotification(OpenAPIRuntime.HTTPBody)
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/messages/POST/requestBody/content/message\/global-headers`.
                case messageGlobalHeaders(OpenAPIRuntime.HTTPBody)
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/messages/POST/requestBody/content/message\/http`.
                case messageHttp(OpenAPIRuntime.HTTPBody)
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/messages/POST/requestBody/content/message\/imdn+xml`.
                case messageImdnXml(OpenAPIRuntime.HTTPBody)
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/messages/POST/requestBody/content/message\/news`.
                case messageNews(OpenAPIRuntime.HTTPBody)
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/messages/POST/requestBody/content/message\/partial`.
                case messagePartial(OpenAPIRuntime.HTTPBody)
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/messages/POST/requestBody/content/message\/rfc822`.
                case messageRfc822(OpenAPIRuntime.HTTPBody)
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/messages/POST/requestBody/content/message\/s-http`.
                case messageSHttp(OpenAPIRuntime.HTTPBody)
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/messages/POST/requestBody/content/message\/sip`.
                case messageSip(OpenAPIRuntime.HTTPBody)
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/messages/POST/requestBody/content/message\/sipfrag`.
                case messageSipfrag(OpenAPIRuntime.HTTPBody)
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/messages/POST/requestBody/content/message\/tracking-status`.
                case messageTrackingStatus(OpenAPIRuntime.HTTPBody)
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/messages/POST/requestBody/content/message\/vnd.si.simp`.
                case messageVnd_si_simp(OpenAPIRuntime.HTTPBody)
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/messages/POST/requestBody/content/message\/vnd.wfa.wsc`.
                case messageVnd_wfa_wsc(OpenAPIRuntime.HTTPBody)
            }
            public var body: Operations.Gmail_users_messages_insert.Input.Body?
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - query:
            ///   - headers:
            ///   - body:
            public init(
                path: Operations.Gmail_users_messages_insert.Input.Path,
                query: Operations.Gmail_users_messages_insert.Input.Query = .init(),
                headers: Operations.Gmail_users_messages_insert.Input.Headers = .init(),
                body: Operations.Gmail_users_messages_insert.Input.Body? = nil
            ) {
                self.path = path
                self.query = query
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/messages/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/messages/POST/responses/200/content/application\/json`.
                    case json(Components.Schemas.Message)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.Message {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.Gmail_users_messages_insert.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.Gmail_users_messages_insert.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Successful response
            ///
            /// - Remark: Generated from `#/paths//gmail/v1/users/{userId}/messages/post(gmail.users.messages.insert)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.Gmail_users_messages_insert.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.Gmail_users_messages_insert.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Deletes many messages by message ID. Provides no guarantees that messages were not already deleted or even existed at all.
    ///
    /// - Remark: HTTP `POST /gmail/v1/users/{userId}/messages/batchDelete`.
    /// - Remark: Generated from `#/paths//gmail/v1/users/{userId}/messages/batchDelete/post(gmail.users.messages.batchDelete)`.
    public enum Gmail_users_messages_batchDelete {
        public static let id: Swift.String = "gmail.users.messages.batchDelete"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/messages/batchDelete/POST/path`.
            public struct Path: Sendable, Hashable {
                /// The user's email address. The special value `me` can be used to indicate the authenticated user.
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/messages/batchDelete/POST/path/userId`.
                public var userId: Swift.String
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - userId: The user's email address. The special value `me` can be used to indicate the authenticated user.
                public init(userId: Swift.String) {
                    self.userId = userId
                }
            }
            public var path: Operations.Gmail_users_messages_batchDelete.Input.Path
            /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/messages/batchDelete/POST/query`.
            public struct Query: Sendable, Hashable {
                /// - Remark: Generated from `#/components/parameters/_.xgafv`.
                @frozen public enum __period_xgafv: String, Codable, Hashable, Sendable, CaseIterable {
                    case _1 = "1"
                    case _2 = "2"
                }
                /// V1 error format.
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/messages/batchDelete/POST/query/$.xgafv`.
                public var _dollar__xgafv: Components.Parameters.__period_xgafv?
                /// OAuth access token.
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/messages/batchDelete/POST/query/access_token`.
                public var accessToken: Components.Parameters.AccessToken?
                /// - Remark: Generated from `#/components/parameters/alt`.
                @frozen public enum Alt: String, Codable, Hashable, Sendable, CaseIterable {
                    case json = "json"
                    case media = "media"
                    case proto = "proto"
                }
                /// Data format for response.
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/messages/batchDelete/POST/query/alt`.
                public var alt: Components.Parameters.Alt?
                /// JSONP
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/messages/batchDelete/POST/query/callback`.
                public var callback: Components.Parameters.Callback?
                /// Selector specifying which fields to include in a partial response.
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/messages/batchDelete/POST/query/fields`.
                public var fields: Components.Parameters.Fields?
                /// API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/messages/batchDelete/POST/query/key`.
                public var key: Components.Parameters.Key?
                /// OAuth 2.0 token for the current user.
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/messages/batchDelete/POST/query/oauth_token`.
                public var oauthToken: Components.Parameters.OauthToken?
                /// Returns response with indentations and line breaks.
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/messages/batchDelete/POST/query/prettyPrint`.
                public var prettyPrint: Components.Parameters.PrettyPrint?
                /// Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/messages/batchDelete/POST/query/quotaUser`.
                public var quotaUser: Components.Parameters.QuotaUser?
                /// Upload protocol for media (e.g. "raw", "multipart").
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/messages/batchDelete/POST/query/upload_protocol`.
                public var uploadProtocol: Components.Parameters.UploadProtocol?
                /// Legacy upload protocol for media (e.g. "media", "multipart").
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/messages/batchDelete/POST/query/uploadType`.
                public var uploadType: Components.Parameters.UploadType?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - _dollar__xgafv: V1 error format.
                ///   - accessToken: OAuth access token.
                ///   - alt: Data format for response.
                ///   - callback: JSONP
                ///   - fields: Selector specifying which fields to include in a partial response.
                ///   - key: API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
                ///   - oauthToken: OAuth 2.0 token for the current user.
                ///   - prettyPrint: Returns response with indentations and line breaks.
                ///   - quotaUser: Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
                ///   - uploadProtocol: Upload protocol for media (e.g. "raw", "multipart").
                ///   - uploadType: Legacy upload protocol for media (e.g. "media", "multipart").
                public init(
                    _dollar__xgafv: Components.Parameters.__period_xgafv? = nil,
                    accessToken: Components.Parameters.AccessToken? = nil,
                    alt: Components.Parameters.Alt? = nil,
                    callback: Components.Parameters.Callback? = nil,
                    fields: Components.Parameters.Fields? = nil,
                    key: Components.Parameters.Key? = nil,
                    oauthToken: Components.Parameters.OauthToken? = nil,
                    prettyPrint: Components.Parameters.PrettyPrint? = nil,
                    quotaUser: Components.Parameters.QuotaUser? = nil,
                    uploadProtocol: Components.Parameters.UploadProtocol? = nil,
                    uploadType: Components.Parameters.UploadType? = nil
                ) {
                    self._dollar__xgafv = _dollar__xgafv
                    self.accessToken = accessToken
                    self.alt = alt
                    self.callback = callback
                    self.fields = fields
                    self.key = key
                    self.oauthToken = oauthToken
                    self.prettyPrint = prettyPrint
                    self.quotaUser = quotaUser
                    self.uploadProtocol = uploadProtocol
                    self.uploadType = uploadType
                }
            }
            public var query: Operations.Gmail_users_messages_batchDelete.Input.Query
            /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/messages/batchDelete/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/messages/batchDelete/POST/requestBody/content/application\/json`.
                case json(Components.Schemas.BatchDeleteMessagesRequest)
            }
            public var body: Operations.Gmail_users_messages_batchDelete.Input.Body?
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - query:
            ///   - body:
            public init(
                path: Operations.Gmail_users_messages_batchDelete.Input.Path,
                query: Operations.Gmail_users_messages_batchDelete.Input.Query = .init(),
                body: Operations.Gmail_users_messages_batchDelete.Input.Body? = nil
            ) {
                self.path = path
                self.query = query
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// Creates a new `Ok`.
                public init() {}
            }
            /// Successful response
            ///
            /// - Remark: Generated from `#/paths//gmail/v1/users/{userId}/messages/batchDelete/post(gmail.users.messages.batchDelete)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.Gmail_users_messages_batchDelete.Output.Ok)
            /// Successful response
            ///
            /// - Remark: Generated from `#/paths//gmail/v1/users/{userId}/messages/batchDelete/post(gmail.users.messages.batchDelete)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            public static var ok: Self {
                .ok(.init())
            }
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.Gmail_users_messages_batchDelete.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
    }
    /// Modifies the labels on the specified messages.
    ///
    /// - Remark: HTTP `POST /gmail/v1/users/{userId}/messages/batchModify`.
    /// - Remark: Generated from `#/paths//gmail/v1/users/{userId}/messages/batchModify/post(gmail.users.messages.batchModify)`.
    public enum Gmail_users_messages_batchModify {
        public static let id: Swift.String = "gmail.users.messages.batchModify"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/messages/batchModify/POST/path`.
            public struct Path: Sendable, Hashable {
                /// The user's email address. The special value `me` can be used to indicate the authenticated user.
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/messages/batchModify/POST/path/userId`.
                public var userId: Swift.String
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - userId: The user's email address. The special value `me` can be used to indicate the authenticated user.
                public init(userId: Swift.String) {
                    self.userId = userId
                }
            }
            public var path: Operations.Gmail_users_messages_batchModify.Input.Path
            /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/messages/batchModify/POST/query`.
            public struct Query: Sendable, Hashable {
                /// - Remark: Generated from `#/components/parameters/_.xgafv`.
                @frozen public enum __period_xgafv: String, Codable, Hashable, Sendable, CaseIterable {
                    case _1 = "1"
                    case _2 = "2"
                }
                /// V1 error format.
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/messages/batchModify/POST/query/$.xgafv`.
                public var _dollar__xgafv: Components.Parameters.__period_xgafv?
                /// OAuth access token.
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/messages/batchModify/POST/query/access_token`.
                public var accessToken: Components.Parameters.AccessToken?
                /// - Remark: Generated from `#/components/parameters/alt`.
                @frozen public enum Alt: String, Codable, Hashable, Sendable, CaseIterable {
                    case json = "json"
                    case media = "media"
                    case proto = "proto"
                }
                /// Data format for response.
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/messages/batchModify/POST/query/alt`.
                public var alt: Components.Parameters.Alt?
                /// JSONP
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/messages/batchModify/POST/query/callback`.
                public var callback: Components.Parameters.Callback?
                /// Selector specifying which fields to include in a partial response.
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/messages/batchModify/POST/query/fields`.
                public var fields: Components.Parameters.Fields?
                /// API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/messages/batchModify/POST/query/key`.
                public var key: Components.Parameters.Key?
                /// OAuth 2.0 token for the current user.
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/messages/batchModify/POST/query/oauth_token`.
                public var oauthToken: Components.Parameters.OauthToken?
                /// Returns response with indentations and line breaks.
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/messages/batchModify/POST/query/prettyPrint`.
                public var prettyPrint: Components.Parameters.PrettyPrint?
                /// Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/messages/batchModify/POST/query/quotaUser`.
                public var quotaUser: Components.Parameters.QuotaUser?
                /// Upload protocol for media (e.g. "raw", "multipart").
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/messages/batchModify/POST/query/upload_protocol`.
                public var uploadProtocol: Components.Parameters.UploadProtocol?
                /// Legacy upload protocol for media (e.g. "media", "multipart").
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/messages/batchModify/POST/query/uploadType`.
                public var uploadType: Components.Parameters.UploadType?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - _dollar__xgafv: V1 error format.
                ///   - accessToken: OAuth access token.
                ///   - alt: Data format for response.
                ///   - callback: JSONP
                ///   - fields: Selector specifying which fields to include in a partial response.
                ///   - key: API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
                ///   - oauthToken: OAuth 2.0 token for the current user.
                ///   - prettyPrint: Returns response with indentations and line breaks.
                ///   - quotaUser: Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
                ///   - uploadProtocol: Upload protocol for media (e.g. "raw", "multipart").
                ///   - uploadType: Legacy upload protocol for media (e.g. "media", "multipart").
                public init(
                    _dollar__xgafv: Components.Parameters.__period_xgafv? = nil,
                    accessToken: Components.Parameters.AccessToken? = nil,
                    alt: Components.Parameters.Alt? = nil,
                    callback: Components.Parameters.Callback? = nil,
                    fields: Components.Parameters.Fields? = nil,
                    key: Components.Parameters.Key? = nil,
                    oauthToken: Components.Parameters.OauthToken? = nil,
                    prettyPrint: Components.Parameters.PrettyPrint? = nil,
                    quotaUser: Components.Parameters.QuotaUser? = nil,
                    uploadProtocol: Components.Parameters.UploadProtocol? = nil,
                    uploadType: Components.Parameters.UploadType? = nil
                ) {
                    self._dollar__xgafv = _dollar__xgafv
                    self.accessToken = accessToken
                    self.alt = alt
                    self.callback = callback
                    self.fields = fields
                    self.key = key
                    self.oauthToken = oauthToken
                    self.prettyPrint = prettyPrint
                    self.quotaUser = quotaUser
                    self.uploadProtocol = uploadProtocol
                    self.uploadType = uploadType
                }
            }
            public var query: Operations.Gmail_users_messages_batchModify.Input.Query
            /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/messages/batchModify/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/messages/batchModify/POST/requestBody/content/application\/json`.
                case json(Components.Schemas.BatchModifyMessagesRequest)
            }
            public var body: Operations.Gmail_users_messages_batchModify.Input.Body?
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - query:
            ///   - body:
            public init(
                path: Operations.Gmail_users_messages_batchModify.Input.Path,
                query: Operations.Gmail_users_messages_batchModify.Input.Query = .init(),
                body: Operations.Gmail_users_messages_batchModify.Input.Body? = nil
            ) {
                self.path = path
                self.query = query
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// Creates a new `Ok`.
                public init() {}
            }
            /// Successful response
            ///
            /// - Remark: Generated from `#/paths//gmail/v1/users/{userId}/messages/batchModify/post(gmail.users.messages.batchModify)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.Gmail_users_messages_batchModify.Output.Ok)
            /// Successful response
            ///
            /// - Remark: Generated from `#/paths//gmail/v1/users/{userId}/messages/batchModify/post(gmail.users.messages.batchModify)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            public static var ok: Self {
                .ok(.init())
            }
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.Gmail_users_messages_batchModify.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
    }
    /// Imports a message into only this user's mailbox, with standard email delivery scanning and classification similar to receiving via SMTP. This method doesn't perform SPF checks, so it might not work for some spam messages, such as those attempting to perform domain spoofing. This method does not send a message.
    ///
    /// - Remark: HTTP `POST /gmail/v1/users/{userId}/messages/import`.
    /// - Remark: Generated from `#/paths//gmail/v1/users/{userId}/messages/import/post(gmail.users.messages.import)`.
    public enum Gmail_users_messages_import {
        public static let id: Swift.String = "gmail.users.messages.import"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/messages/import/POST/path`.
            public struct Path: Sendable, Hashable {
                /// The user's email address. The special value `me` can be used to indicate the authenticated user.
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/messages/import/POST/path/userId`.
                public var userId: Swift.String
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - userId: The user's email address. The special value `me` can be used to indicate the authenticated user.
                public init(userId: Swift.String) {
                    self.userId = userId
                }
            }
            public var path: Operations.Gmail_users_messages_import.Input.Path
            /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/messages/import/POST/query`.
            public struct Query: Sendable, Hashable {
                /// - Remark: Generated from `#/components/parameters/_.xgafv`.
                @frozen public enum __period_xgafv: String, Codable, Hashable, Sendable, CaseIterable {
                    case _1 = "1"
                    case _2 = "2"
                }
                /// V1 error format.
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/messages/import/POST/query/$.xgafv`.
                public var _dollar__xgafv: Components.Parameters.__period_xgafv?
                /// OAuth access token.
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/messages/import/POST/query/access_token`.
                public var accessToken: Components.Parameters.AccessToken?
                /// - Remark: Generated from `#/components/parameters/alt`.
                @frozen public enum Alt: String, Codable, Hashable, Sendable, CaseIterable {
                    case json = "json"
                    case media = "media"
                    case proto = "proto"
                }
                /// Data format for response.
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/messages/import/POST/query/alt`.
                public var alt: Components.Parameters.Alt?
                /// JSONP
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/messages/import/POST/query/callback`.
                public var callback: Components.Parameters.Callback?
                /// Selector specifying which fields to include in a partial response.
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/messages/import/POST/query/fields`.
                public var fields: Components.Parameters.Fields?
                /// API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/messages/import/POST/query/key`.
                public var key: Components.Parameters.Key?
                /// OAuth 2.0 token for the current user.
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/messages/import/POST/query/oauth_token`.
                public var oauthToken: Components.Parameters.OauthToken?
                /// Returns response with indentations and line breaks.
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/messages/import/POST/query/prettyPrint`.
                public var prettyPrint: Components.Parameters.PrettyPrint?
                /// Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/messages/import/POST/query/quotaUser`.
                public var quotaUser: Components.Parameters.QuotaUser?
                /// Upload protocol for media (e.g. "raw", "multipart").
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/messages/import/POST/query/upload_protocol`.
                public var uploadProtocol: Components.Parameters.UploadProtocol?
                /// Legacy upload protocol for media (e.g. "media", "multipart").
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/messages/import/POST/query/uploadType`.
                public var uploadType: Components.Parameters.UploadType?
                /// Mark the email as permanently deleted (not TRASH) and only visible in Google Vault to a Vault administrator. Only used for Google Workspace accounts.
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/messages/import/POST/query/deleted`.
                public var deleted: Swift.Bool?
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/messages/import/POST/query/internalDateSource`.
                @frozen public enum InternalDateSourcePayload: String, Codable, Hashable, Sendable, CaseIterable {
                    case receivedTime = "receivedTime"
                    case dateHeader = "dateHeader"
                }
                /// Source for Gmail's internal date of the message.
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/messages/import/POST/query/internalDateSource`.
                public var internalDateSource: Operations.Gmail_users_messages_import.Input.Query.InternalDateSourcePayload?
                /// Ignore the Gmail spam classifier decision and never mark this email as SPAM in the mailbox.
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/messages/import/POST/query/neverMarkSpam`.
                public var neverMarkSpam: Swift.Bool?
                /// Process calendar invites in the email and add any extracted meetings to the Google Calendar for this user.
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/messages/import/POST/query/processForCalendar`.
                public var processForCalendar: Swift.Bool?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - _dollar__xgafv: V1 error format.
                ///   - accessToken: OAuth access token.
                ///   - alt: Data format for response.
                ///   - callback: JSONP
                ///   - fields: Selector specifying which fields to include in a partial response.
                ///   - key: API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
                ///   - oauthToken: OAuth 2.0 token for the current user.
                ///   - prettyPrint: Returns response with indentations and line breaks.
                ///   - quotaUser: Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
                ///   - uploadProtocol: Upload protocol for media (e.g. "raw", "multipart").
                ///   - uploadType: Legacy upload protocol for media (e.g. "media", "multipart").
                ///   - deleted: Mark the email as permanently deleted (not TRASH) and only visible in Google Vault to a Vault administrator. Only used for Google Workspace accounts.
                ///   - internalDateSource: Source for Gmail's internal date of the message.
                ///   - neverMarkSpam: Ignore the Gmail spam classifier decision and never mark this email as SPAM in the mailbox.
                ///   - processForCalendar: Process calendar invites in the email and add any extracted meetings to the Google Calendar for this user.
                public init(
                    _dollar__xgafv: Components.Parameters.__period_xgafv? = nil,
                    accessToken: Components.Parameters.AccessToken? = nil,
                    alt: Components.Parameters.Alt? = nil,
                    callback: Components.Parameters.Callback? = nil,
                    fields: Components.Parameters.Fields? = nil,
                    key: Components.Parameters.Key? = nil,
                    oauthToken: Components.Parameters.OauthToken? = nil,
                    prettyPrint: Components.Parameters.PrettyPrint? = nil,
                    quotaUser: Components.Parameters.QuotaUser? = nil,
                    uploadProtocol: Components.Parameters.UploadProtocol? = nil,
                    uploadType: Components.Parameters.UploadType? = nil,
                    deleted: Swift.Bool? = nil,
                    internalDateSource: Operations.Gmail_users_messages_import.Input.Query.InternalDateSourcePayload? = nil,
                    neverMarkSpam: Swift.Bool? = nil,
                    processForCalendar: Swift.Bool? = nil
                ) {
                    self._dollar__xgafv = _dollar__xgafv
                    self.accessToken = accessToken
                    self.alt = alt
                    self.callback = callback
                    self.fields = fields
                    self.key = key
                    self.oauthToken = oauthToken
                    self.prettyPrint = prettyPrint
                    self.quotaUser = quotaUser
                    self.uploadProtocol = uploadProtocol
                    self.uploadType = uploadType
                    self.deleted = deleted
                    self.internalDateSource = internalDateSource
                    self.neverMarkSpam = neverMarkSpam
                    self.processForCalendar = processForCalendar
                }
            }
            public var query: Operations.Gmail_users_messages_import.Input.Query
            /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/messages/import/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.Gmail_users_messages_import.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.Gmail_users_messages_import.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.Gmail_users_messages_import.Input.Headers
            /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/messages/import/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/messages/import/POST/requestBody/content/message\/cpim`.
                case messageCpim(OpenAPIRuntime.HTTPBody)
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/messages/import/POST/requestBody/content/message\/delivery-status`.
                case messageDeliveryStatus(OpenAPIRuntime.HTTPBody)
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/messages/import/POST/requestBody/content/message\/disposition-notification`.
                case messageDispositionNotification(OpenAPIRuntime.HTTPBody)
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/messages/import/POST/requestBody/content/message\/external-body`.
                case messageExternalBody(OpenAPIRuntime.HTTPBody)
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/messages/import/POST/requestBody/content/message\/feedback-report`.
                case messageFeedbackReport(OpenAPIRuntime.HTTPBody)
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/messages/import/POST/requestBody/content/message\/global`.
                case messageGlobal(OpenAPIRuntime.HTTPBody)
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/messages/import/POST/requestBody/content/message\/global-delivery-status`.
                case messageGlobalDeliveryStatus(OpenAPIRuntime.HTTPBody)
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/messages/import/POST/requestBody/content/message\/global-disposition-notification`.
                case messageGlobalDispositionNotification(OpenAPIRuntime.HTTPBody)
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/messages/import/POST/requestBody/content/message\/global-headers`.
                case messageGlobalHeaders(OpenAPIRuntime.HTTPBody)
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/messages/import/POST/requestBody/content/message\/http`.
                case messageHttp(OpenAPIRuntime.HTTPBody)
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/messages/import/POST/requestBody/content/message\/imdn+xml`.
                case messageImdnXml(OpenAPIRuntime.HTTPBody)
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/messages/import/POST/requestBody/content/message\/news`.
                case messageNews(OpenAPIRuntime.HTTPBody)
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/messages/import/POST/requestBody/content/message\/partial`.
                case messagePartial(OpenAPIRuntime.HTTPBody)
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/messages/import/POST/requestBody/content/message\/rfc822`.
                case messageRfc822(OpenAPIRuntime.HTTPBody)
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/messages/import/POST/requestBody/content/message\/s-http`.
                case messageSHttp(OpenAPIRuntime.HTTPBody)
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/messages/import/POST/requestBody/content/message\/sip`.
                case messageSip(OpenAPIRuntime.HTTPBody)
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/messages/import/POST/requestBody/content/message\/sipfrag`.
                case messageSipfrag(OpenAPIRuntime.HTTPBody)
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/messages/import/POST/requestBody/content/message\/tracking-status`.
                case messageTrackingStatus(OpenAPIRuntime.HTTPBody)
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/messages/import/POST/requestBody/content/message\/vnd.si.simp`.
                case messageVnd_si_simp(OpenAPIRuntime.HTTPBody)
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/messages/import/POST/requestBody/content/message\/vnd.wfa.wsc`.
                case messageVnd_wfa_wsc(OpenAPIRuntime.HTTPBody)
            }
            public var body: Operations.Gmail_users_messages_import.Input.Body?
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - query:
            ///   - headers:
            ///   - body:
            public init(
                path: Operations.Gmail_users_messages_import.Input.Path,
                query: Operations.Gmail_users_messages_import.Input.Query = .init(),
                headers: Operations.Gmail_users_messages_import.Input.Headers = .init(),
                body: Operations.Gmail_users_messages_import.Input.Body? = nil
            ) {
                self.path = path
                self.query = query
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/messages/import/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/messages/import/POST/responses/200/content/application\/json`.
                    case json(Components.Schemas.Message)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.Message {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.Gmail_users_messages_import.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.Gmail_users_messages_import.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Successful response
            ///
            /// - Remark: Generated from `#/paths//gmail/v1/users/{userId}/messages/import/post(gmail.users.messages.import)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.Gmail_users_messages_import.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.Gmail_users_messages_import.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Sends the specified message to the recipients in the `To`, `Cc`, and `Bcc` headers. For example usage, see [Sending email](https://developers.google.com/gmail/api/guides/sending).
    ///
    /// - Remark: HTTP `POST /gmail/v1/users/{userId}/messages/send`.
    /// - Remark: Generated from `#/paths//gmail/v1/users/{userId}/messages/send/post(gmail.users.messages.send)`.
    public enum Gmail_users_messages_send {
        public static let id: Swift.String = "gmail.users.messages.send"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/messages/send/POST/path`.
            public struct Path: Sendable, Hashable {
                /// The user's email address. The special value `me` can be used to indicate the authenticated user.
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/messages/send/POST/path/userId`.
                public var userId: Swift.String
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - userId: The user's email address. The special value `me` can be used to indicate the authenticated user.
                public init(userId: Swift.String) {
                    self.userId = userId
                }
            }
            public var path: Operations.Gmail_users_messages_send.Input.Path
            /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/messages/send/POST/query`.
            public struct Query: Sendable, Hashable {
                /// - Remark: Generated from `#/components/parameters/_.xgafv`.
                @frozen public enum __period_xgafv: String, Codable, Hashable, Sendable, CaseIterable {
                    case _1 = "1"
                    case _2 = "2"
                }
                /// V1 error format.
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/messages/send/POST/query/$.xgafv`.
                public var _dollar__xgafv: Components.Parameters.__period_xgafv?
                /// OAuth access token.
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/messages/send/POST/query/access_token`.
                public var accessToken: Components.Parameters.AccessToken?
                /// - Remark: Generated from `#/components/parameters/alt`.
                @frozen public enum Alt: String, Codable, Hashable, Sendable, CaseIterable {
                    case json = "json"
                    case media = "media"
                    case proto = "proto"
                }
                /// Data format for response.
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/messages/send/POST/query/alt`.
                public var alt: Components.Parameters.Alt?
                /// JSONP
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/messages/send/POST/query/callback`.
                public var callback: Components.Parameters.Callback?
                /// Selector specifying which fields to include in a partial response.
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/messages/send/POST/query/fields`.
                public var fields: Components.Parameters.Fields?
                /// API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/messages/send/POST/query/key`.
                public var key: Components.Parameters.Key?
                /// OAuth 2.0 token for the current user.
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/messages/send/POST/query/oauth_token`.
                public var oauthToken: Components.Parameters.OauthToken?
                /// Returns response with indentations and line breaks.
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/messages/send/POST/query/prettyPrint`.
                public var prettyPrint: Components.Parameters.PrettyPrint?
                /// Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/messages/send/POST/query/quotaUser`.
                public var quotaUser: Components.Parameters.QuotaUser?
                /// Upload protocol for media (e.g. "raw", "multipart").
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/messages/send/POST/query/upload_protocol`.
                public var uploadProtocol: Components.Parameters.UploadProtocol?
                /// Legacy upload protocol for media (e.g. "media", "multipart").
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/messages/send/POST/query/uploadType`.
                public var uploadType: Components.Parameters.UploadType?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - _dollar__xgafv: V1 error format.
                ///   - accessToken: OAuth access token.
                ///   - alt: Data format for response.
                ///   - callback: JSONP
                ///   - fields: Selector specifying which fields to include in a partial response.
                ///   - key: API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
                ///   - oauthToken: OAuth 2.0 token for the current user.
                ///   - prettyPrint: Returns response with indentations and line breaks.
                ///   - quotaUser: Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
                ///   - uploadProtocol: Upload protocol for media (e.g. "raw", "multipart").
                ///   - uploadType: Legacy upload protocol for media (e.g. "media", "multipart").
                public init(
                    _dollar__xgafv: Components.Parameters.__period_xgafv? = nil,
                    accessToken: Components.Parameters.AccessToken? = nil,
                    alt: Components.Parameters.Alt? = nil,
                    callback: Components.Parameters.Callback? = nil,
                    fields: Components.Parameters.Fields? = nil,
                    key: Components.Parameters.Key? = nil,
                    oauthToken: Components.Parameters.OauthToken? = nil,
                    prettyPrint: Components.Parameters.PrettyPrint? = nil,
                    quotaUser: Components.Parameters.QuotaUser? = nil,
                    uploadProtocol: Components.Parameters.UploadProtocol? = nil,
                    uploadType: Components.Parameters.UploadType? = nil
                ) {
                    self._dollar__xgafv = _dollar__xgafv
                    self.accessToken = accessToken
                    self.alt = alt
                    self.callback = callback
                    self.fields = fields
                    self.key = key
                    self.oauthToken = oauthToken
                    self.prettyPrint = prettyPrint
                    self.quotaUser = quotaUser
                    self.uploadProtocol = uploadProtocol
                    self.uploadType = uploadType
                }
            }
            public var query: Operations.Gmail_users_messages_send.Input.Query
            /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/messages/send/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.Gmail_users_messages_send.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.Gmail_users_messages_send.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.Gmail_users_messages_send.Input.Headers
            /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/messages/send/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/messages/send/POST/requestBody/content/message\/cpim`.
                case messageCpim(OpenAPIRuntime.HTTPBody)
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/messages/send/POST/requestBody/content/message\/delivery-status`.
                case messageDeliveryStatus(OpenAPIRuntime.HTTPBody)
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/messages/send/POST/requestBody/content/message\/disposition-notification`.
                case messageDispositionNotification(OpenAPIRuntime.HTTPBody)
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/messages/send/POST/requestBody/content/message\/external-body`.
                case messageExternalBody(OpenAPIRuntime.HTTPBody)
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/messages/send/POST/requestBody/content/message\/feedback-report`.
                case messageFeedbackReport(OpenAPIRuntime.HTTPBody)
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/messages/send/POST/requestBody/content/message\/global`.
                case messageGlobal(OpenAPIRuntime.HTTPBody)
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/messages/send/POST/requestBody/content/message\/global-delivery-status`.
                case messageGlobalDeliveryStatus(OpenAPIRuntime.HTTPBody)
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/messages/send/POST/requestBody/content/message\/global-disposition-notification`.
                case messageGlobalDispositionNotification(OpenAPIRuntime.HTTPBody)
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/messages/send/POST/requestBody/content/message\/global-headers`.
                case messageGlobalHeaders(OpenAPIRuntime.HTTPBody)
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/messages/send/POST/requestBody/content/message\/http`.
                case messageHttp(OpenAPIRuntime.HTTPBody)
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/messages/send/POST/requestBody/content/message\/imdn+xml`.
                case messageImdnXml(OpenAPIRuntime.HTTPBody)
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/messages/send/POST/requestBody/content/message\/news`.
                case messageNews(OpenAPIRuntime.HTTPBody)
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/messages/send/POST/requestBody/content/message\/partial`.
                case messagePartial(OpenAPIRuntime.HTTPBody)
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/messages/send/POST/requestBody/content/message\/rfc822`.
                case messageRfc822(OpenAPIRuntime.HTTPBody)
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/messages/send/POST/requestBody/content/message\/s-http`.
                case messageSHttp(OpenAPIRuntime.HTTPBody)
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/messages/send/POST/requestBody/content/message\/sip`.
                case messageSip(OpenAPIRuntime.HTTPBody)
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/messages/send/POST/requestBody/content/message\/sipfrag`.
                case messageSipfrag(OpenAPIRuntime.HTTPBody)
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/messages/send/POST/requestBody/content/message\/tracking-status`.
                case messageTrackingStatus(OpenAPIRuntime.HTTPBody)
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/messages/send/POST/requestBody/content/message\/vnd.si.simp`.
                case messageVnd_si_simp(OpenAPIRuntime.HTTPBody)
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/messages/send/POST/requestBody/content/message\/vnd.wfa.wsc`.
                case messageVnd_wfa_wsc(OpenAPIRuntime.HTTPBody)
            }
            public var body: Operations.Gmail_users_messages_send.Input.Body?
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - query:
            ///   - headers:
            ///   - body:
            public init(
                path: Operations.Gmail_users_messages_send.Input.Path,
                query: Operations.Gmail_users_messages_send.Input.Query = .init(),
                headers: Operations.Gmail_users_messages_send.Input.Headers = .init(),
                body: Operations.Gmail_users_messages_send.Input.Body? = nil
            ) {
                self.path = path
                self.query = query
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/messages/send/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/messages/send/POST/responses/200/content/application\/json`.
                    case json(Components.Schemas.Message)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.Message {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.Gmail_users_messages_send.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.Gmail_users_messages_send.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Successful response
            ///
            /// - Remark: Generated from `#/paths//gmail/v1/users/{userId}/messages/send/post(gmail.users.messages.send)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.Gmail_users_messages_send.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.Gmail_users_messages_send.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Gets the specified message.
    ///
    /// - Remark: HTTP `GET /gmail/v1/users/{userId}/messages/{id}`.
    /// - Remark: Generated from `#/paths//gmail/v1/users/{userId}/messages/{id}/get(gmail.users.messages.get)`.
    public enum Gmail_users_messages_get {
        public static let id: Swift.String = "gmail.users.messages.get"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/messages/{id}/GET/path`.
            public struct Path: Sendable, Hashable {
                /// The user's email address. The special value `me` can be used to indicate the authenticated user.
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/messages/{id}/GET/path/userId`.
                public var userId: Swift.String
                /// The ID of the message to retrieve. This ID is usually retrieved using `messages.list`. The ID is also contained in the result when a message is inserted (`messages.insert`) or imported (`messages.import`).
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/messages/{id}/GET/path/id`.
                public var id: Swift.String
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - userId: The user's email address. The special value `me` can be used to indicate the authenticated user.
                ///   - id: The ID of the message to retrieve. This ID is usually retrieved using `messages.list`. The ID is also contained in the result when a message is inserted (`messages.insert`) or imported (`messages.import`).
                public init(
                    userId: Swift.String,
                    id: Swift.String
                ) {
                    self.userId = userId
                    self.id = id
                }
            }
            public var path: Operations.Gmail_users_messages_get.Input.Path
            /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/messages/{id}/GET/query`.
            public struct Query: Sendable, Hashable {
                /// - Remark: Generated from `#/components/parameters/_.xgafv`.
                @frozen public enum __period_xgafv: String, Codable, Hashable, Sendable, CaseIterable {
                    case _1 = "1"
                    case _2 = "2"
                }
                /// V1 error format.
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/messages/{id}/GET/query/$.xgafv`.
                public var _dollar__xgafv: Components.Parameters.__period_xgafv?
                /// OAuth access token.
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/messages/{id}/GET/query/access_token`.
                public var accessToken: Components.Parameters.AccessToken?
                /// - Remark: Generated from `#/components/parameters/alt`.
                @frozen public enum Alt: String, Codable, Hashable, Sendable, CaseIterable {
                    case json = "json"
                    case media = "media"
                    case proto = "proto"
                }
                /// Data format for response.
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/messages/{id}/GET/query/alt`.
                public var alt: Components.Parameters.Alt?
                /// JSONP
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/messages/{id}/GET/query/callback`.
                public var callback: Components.Parameters.Callback?
                /// Selector specifying which fields to include in a partial response.
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/messages/{id}/GET/query/fields`.
                public var fields: Components.Parameters.Fields?
                /// API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/messages/{id}/GET/query/key`.
                public var key: Components.Parameters.Key?
                /// OAuth 2.0 token for the current user.
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/messages/{id}/GET/query/oauth_token`.
                public var oauthToken: Components.Parameters.OauthToken?
                /// Returns response with indentations and line breaks.
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/messages/{id}/GET/query/prettyPrint`.
                public var prettyPrint: Components.Parameters.PrettyPrint?
                /// Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/messages/{id}/GET/query/quotaUser`.
                public var quotaUser: Components.Parameters.QuotaUser?
                /// Upload protocol for media (e.g. "raw", "multipart").
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/messages/{id}/GET/query/upload_protocol`.
                public var uploadProtocol: Components.Parameters.UploadProtocol?
                /// Legacy upload protocol for media (e.g. "media", "multipart").
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/messages/{id}/GET/query/uploadType`.
                public var uploadType: Components.Parameters.UploadType?
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/messages/{id}/GET/query/format`.
                @frozen public enum FormatPayload: String, Codable, Hashable, Sendable, CaseIterable {
                    case minimal = "minimal"
                    case full = "full"
                    case raw = "raw"
                    case metadata = "metadata"
                }
                /// The format to return the message in.
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/messages/{id}/GET/query/format`.
                public var format: Operations.Gmail_users_messages_get.Input.Query.FormatPayload?
                /// When given and format is `METADATA`, only include headers specified.
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/messages/{id}/GET/query/metadataHeaders`.
                public var metadataHeaders: [Swift.String]?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - _dollar__xgafv: V1 error format.
                ///   - accessToken: OAuth access token.
                ///   - alt: Data format for response.
                ///   - callback: JSONP
                ///   - fields: Selector specifying which fields to include in a partial response.
                ///   - key: API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
                ///   - oauthToken: OAuth 2.0 token for the current user.
                ///   - prettyPrint: Returns response with indentations and line breaks.
                ///   - quotaUser: Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
                ///   - uploadProtocol: Upload protocol for media (e.g. "raw", "multipart").
                ///   - uploadType: Legacy upload protocol for media (e.g. "media", "multipart").
                ///   - format: The format to return the message in.
                ///   - metadataHeaders: When given and format is `METADATA`, only include headers specified.
                public init(
                    _dollar__xgafv: Components.Parameters.__period_xgafv? = nil,
                    accessToken: Components.Parameters.AccessToken? = nil,
                    alt: Components.Parameters.Alt? = nil,
                    callback: Components.Parameters.Callback? = nil,
                    fields: Components.Parameters.Fields? = nil,
                    key: Components.Parameters.Key? = nil,
                    oauthToken: Components.Parameters.OauthToken? = nil,
                    prettyPrint: Components.Parameters.PrettyPrint? = nil,
                    quotaUser: Components.Parameters.QuotaUser? = nil,
                    uploadProtocol: Components.Parameters.UploadProtocol? = nil,
                    uploadType: Components.Parameters.UploadType? = nil,
                    format: Operations.Gmail_users_messages_get.Input.Query.FormatPayload? = nil,
                    metadataHeaders: [Swift.String]? = nil
                ) {
                    self._dollar__xgafv = _dollar__xgafv
                    self.accessToken = accessToken
                    self.alt = alt
                    self.callback = callback
                    self.fields = fields
                    self.key = key
                    self.oauthToken = oauthToken
                    self.prettyPrint = prettyPrint
                    self.quotaUser = quotaUser
                    self.uploadProtocol = uploadProtocol
                    self.uploadType = uploadType
                    self.format = format
                    self.metadataHeaders = metadataHeaders
                }
            }
            public var query: Operations.Gmail_users_messages_get.Input.Query
            /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/messages/{id}/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.Gmail_users_messages_get.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.Gmail_users_messages_get.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.Gmail_users_messages_get.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - query:
            ///   - headers:
            public init(
                path: Operations.Gmail_users_messages_get.Input.Path,
                query: Operations.Gmail_users_messages_get.Input.Query = .init(),
                headers: Operations.Gmail_users_messages_get.Input.Headers = .init()
            ) {
                self.path = path
                self.query = query
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/messages/{id}/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/messages/{id}/GET/responses/200/content/application\/json`.
                    case json(Components.Schemas.Message)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.Message {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.Gmail_users_messages_get.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.Gmail_users_messages_get.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Successful response
            ///
            /// - Remark: Generated from `#/paths//gmail/v1/users/{userId}/messages/{id}/get(gmail.users.messages.get)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.Gmail_users_messages_get.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.Gmail_users_messages_get.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Immediately and permanently deletes the specified message. This operation cannot be undone. Prefer `messages.trash` instead.
    ///
    /// - Remark: HTTP `DELETE /gmail/v1/users/{userId}/messages/{id}`.
    /// - Remark: Generated from `#/paths//gmail/v1/users/{userId}/messages/{id}/delete(gmail.users.messages.delete)`.
    public enum Gmail_users_messages_delete {
        public static let id: Swift.String = "gmail.users.messages.delete"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/messages/{id}/DELETE/path`.
            public struct Path: Sendable, Hashable {
                /// The user's email address. The special value `me` can be used to indicate the authenticated user.
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/messages/{id}/DELETE/path/userId`.
                public var userId: Swift.String
                /// The ID of the message to delete.
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/messages/{id}/DELETE/path/id`.
                public var id: Swift.String
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - userId: The user's email address. The special value `me` can be used to indicate the authenticated user.
                ///   - id: The ID of the message to delete.
                public init(
                    userId: Swift.String,
                    id: Swift.String
                ) {
                    self.userId = userId
                    self.id = id
                }
            }
            public var path: Operations.Gmail_users_messages_delete.Input.Path
            /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/messages/{id}/DELETE/query`.
            public struct Query: Sendable, Hashable {
                /// - Remark: Generated from `#/components/parameters/_.xgafv`.
                @frozen public enum __period_xgafv: String, Codable, Hashable, Sendable, CaseIterable {
                    case _1 = "1"
                    case _2 = "2"
                }
                /// V1 error format.
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/messages/{id}/DELETE/query/$.xgafv`.
                public var _dollar__xgafv: Components.Parameters.__period_xgafv?
                /// OAuth access token.
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/messages/{id}/DELETE/query/access_token`.
                public var accessToken: Components.Parameters.AccessToken?
                /// - Remark: Generated from `#/components/parameters/alt`.
                @frozen public enum Alt: String, Codable, Hashable, Sendable, CaseIterable {
                    case json = "json"
                    case media = "media"
                    case proto = "proto"
                }
                /// Data format for response.
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/messages/{id}/DELETE/query/alt`.
                public var alt: Components.Parameters.Alt?
                /// JSONP
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/messages/{id}/DELETE/query/callback`.
                public var callback: Components.Parameters.Callback?
                /// Selector specifying which fields to include in a partial response.
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/messages/{id}/DELETE/query/fields`.
                public var fields: Components.Parameters.Fields?
                /// API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/messages/{id}/DELETE/query/key`.
                public var key: Components.Parameters.Key?
                /// OAuth 2.0 token for the current user.
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/messages/{id}/DELETE/query/oauth_token`.
                public var oauthToken: Components.Parameters.OauthToken?
                /// Returns response with indentations and line breaks.
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/messages/{id}/DELETE/query/prettyPrint`.
                public var prettyPrint: Components.Parameters.PrettyPrint?
                /// Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/messages/{id}/DELETE/query/quotaUser`.
                public var quotaUser: Components.Parameters.QuotaUser?
                /// Upload protocol for media (e.g. "raw", "multipart").
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/messages/{id}/DELETE/query/upload_protocol`.
                public var uploadProtocol: Components.Parameters.UploadProtocol?
                /// Legacy upload protocol for media (e.g. "media", "multipart").
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/messages/{id}/DELETE/query/uploadType`.
                public var uploadType: Components.Parameters.UploadType?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - _dollar__xgafv: V1 error format.
                ///   - accessToken: OAuth access token.
                ///   - alt: Data format for response.
                ///   - callback: JSONP
                ///   - fields: Selector specifying which fields to include in a partial response.
                ///   - key: API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
                ///   - oauthToken: OAuth 2.0 token for the current user.
                ///   - prettyPrint: Returns response with indentations and line breaks.
                ///   - quotaUser: Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
                ///   - uploadProtocol: Upload protocol for media (e.g. "raw", "multipart").
                ///   - uploadType: Legacy upload protocol for media (e.g. "media", "multipart").
                public init(
                    _dollar__xgafv: Components.Parameters.__period_xgafv? = nil,
                    accessToken: Components.Parameters.AccessToken? = nil,
                    alt: Components.Parameters.Alt? = nil,
                    callback: Components.Parameters.Callback? = nil,
                    fields: Components.Parameters.Fields? = nil,
                    key: Components.Parameters.Key? = nil,
                    oauthToken: Components.Parameters.OauthToken? = nil,
                    prettyPrint: Components.Parameters.PrettyPrint? = nil,
                    quotaUser: Components.Parameters.QuotaUser? = nil,
                    uploadProtocol: Components.Parameters.UploadProtocol? = nil,
                    uploadType: Components.Parameters.UploadType? = nil
                ) {
                    self._dollar__xgafv = _dollar__xgafv
                    self.accessToken = accessToken
                    self.alt = alt
                    self.callback = callback
                    self.fields = fields
                    self.key = key
                    self.oauthToken = oauthToken
                    self.prettyPrint = prettyPrint
                    self.quotaUser = quotaUser
                    self.uploadProtocol = uploadProtocol
                    self.uploadType = uploadType
                }
            }
            public var query: Operations.Gmail_users_messages_delete.Input.Query
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - query:
            public init(
                path: Operations.Gmail_users_messages_delete.Input.Path,
                query: Operations.Gmail_users_messages_delete.Input.Query = .init()
            ) {
                self.path = path
                self.query = query
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// Creates a new `Ok`.
                public init() {}
            }
            /// Successful response
            ///
            /// - Remark: Generated from `#/paths//gmail/v1/users/{userId}/messages/{id}/delete(gmail.users.messages.delete)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.Gmail_users_messages_delete.Output.Ok)
            /// Successful response
            ///
            /// - Remark: Generated from `#/paths//gmail/v1/users/{userId}/messages/{id}/delete(gmail.users.messages.delete)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            public static var ok: Self {
                .ok(.init())
            }
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.Gmail_users_messages_delete.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
    }
    /// Modifies the labels on the specified message.
    ///
    /// - Remark: HTTP `POST /gmail/v1/users/{userId}/messages/{id}/modify`.
    /// - Remark: Generated from `#/paths//gmail/v1/users/{userId}/messages/{id}/modify/post(gmail.users.messages.modify)`.
    public enum Gmail_users_messages_modify {
        public static let id: Swift.String = "gmail.users.messages.modify"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/messages/{id}/modify/POST/path`.
            public struct Path: Sendable, Hashable {
                /// The user's email address. The special value `me` can be used to indicate the authenticated user.
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/messages/{id}/modify/POST/path/userId`.
                public var userId: Swift.String
                /// The ID of the message to modify.
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/messages/{id}/modify/POST/path/id`.
                public var id: Swift.String
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - userId: The user's email address. The special value `me` can be used to indicate the authenticated user.
                ///   - id: The ID of the message to modify.
                public init(
                    userId: Swift.String,
                    id: Swift.String
                ) {
                    self.userId = userId
                    self.id = id
                }
            }
            public var path: Operations.Gmail_users_messages_modify.Input.Path
            /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/messages/{id}/modify/POST/query`.
            public struct Query: Sendable, Hashable {
                /// - Remark: Generated from `#/components/parameters/_.xgafv`.
                @frozen public enum __period_xgafv: String, Codable, Hashable, Sendable, CaseIterable {
                    case _1 = "1"
                    case _2 = "2"
                }
                /// V1 error format.
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/messages/{id}/modify/POST/query/$.xgafv`.
                public var _dollar__xgafv: Components.Parameters.__period_xgafv?
                /// OAuth access token.
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/messages/{id}/modify/POST/query/access_token`.
                public var accessToken: Components.Parameters.AccessToken?
                /// - Remark: Generated from `#/components/parameters/alt`.
                @frozen public enum Alt: String, Codable, Hashable, Sendable, CaseIterable {
                    case json = "json"
                    case media = "media"
                    case proto = "proto"
                }
                /// Data format for response.
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/messages/{id}/modify/POST/query/alt`.
                public var alt: Components.Parameters.Alt?
                /// JSONP
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/messages/{id}/modify/POST/query/callback`.
                public var callback: Components.Parameters.Callback?
                /// Selector specifying which fields to include in a partial response.
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/messages/{id}/modify/POST/query/fields`.
                public var fields: Components.Parameters.Fields?
                /// API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/messages/{id}/modify/POST/query/key`.
                public var key: Components.Parameters.Key?
                /// OAuth 2.0 token for the current user.
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/messages/{id}/modify/POST/query/oauth_token`.
                public var oauthToken: Components.Parameters.OauthToken?
                /// Returns response with indentations and line breaks.
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/messages/{id}/modify/POST/query/prettyPrint`.
                public var prettyPrint: Components.Parameters.PrettyPrint?
                /// Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/messages/{id}/modify/POST/query/quotaUser`.
                public var quotaUser: Components.Parameters.QuotaUser?
                /// Upload protocol for media (e.g. "raw", "multipart").
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/messages/{id}/modify/POST/query/upload_protocol`.
                public var uploadProtocol: Components.Parameters.UploadProtocol?
                /// Legacy upload protocol for media (e.g. "media", "multipart").
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/messages/{id}/modify/POST/query/uploadType`.
                public var uploadType: Components.Parameters.UploadType?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - _dollar__xgafv: V1 error format.
                ///   - accessToken: OAuth access token.
                ///   - alt: Data format for response.
                ///   - callback: JSONP
                ///   - fields: Selector specifying which fields to include in a partial response.
                ///   - key: API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
                ///   - oauthToken: OAuth 2.0 token for the current user.
                ///   - prettyPrint: Returns response with indentations and line breaks.
                ///   - quotaUser: Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
                ///   - uploadProtocol: Upload protocol for media (e.g. "raw", "multipart").
                ///   - uploadType: Legacy upload protocol for media (e.g. "media", "multipart").
                public init(
                    _dollar__xgafv: Components.Parameters.__period_xgafv? = nil,
                    accessToken: Components.Parameters.AccessToken? = nil,
                    alt: Components.Parameters.Alt? = nil,
                    callback: Components.Parameters.Callback? = nil,
                    fields: Components.Parameters.Fields? = nil,
                    key: Components.Parameters.Key? = nil,
                    oauthToken: Components.Parameters.OauthToken? = nil,
                    prettyPrint: Components.Parameters.PrettyPrint? = nil,
                    quotaUser: Components.Parameters.QuotaUser? = nil,
                    uploadProtocol: Components.Parameters.UploadProtocol? = nil,
                    uploadType: Components.Parameters.UploadType? = nil
                ) {
                    self._dollar__xgafv = _dollar__xgafv
                    self.accessToken = accessToken
                    self.alt = alt
                    self.callback = callback
                    self.fields = fields
                    self.key = key
                    self.oauthToken = oauthToken
                    self.prettyPrint = prettyPrint
                    self.quotaUser = quotaUser
                    self.uploadProtocol = uploadProtocol
                    self.uploadType = uploadType
                }
            }
            public var query: Operations.Gmail_users_messages_modify.Input.Query
            /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/messages/{id}/modify/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.Gmail_users_messages_modify.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.Gmail_users_messages_modify.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.Gmail_users_messages_modify.Input.Headers
            /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/messages/{id}/modify/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/messages/{id}/modify/POST/requestBody/content/application\/json`.
                case json(Components.Schemas.ModifyMessageRequest)
            }
            public var body: Operations.Gmail_users_messages_modify.Input.Body?
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - query:
            ///   - headers:
            ///   - body:
            public init(
                path: Operations.Gmail_users_messages_modify.Input.Path,
                query: Operations.Gmail_users_messages_modify.Input.Query = .init(),
                headers: Operations.Gmail_users_messages_modify.Input.Headers = .init(),
                body: Operations.Gmail_users_messages_modify.Input.Body? = nil
            ) {
                self.path = path
                self.query = query
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/messages/{id}/modify/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/messages/{id}/modify/POST/responses/200/content/application\/json`.
                    case json(Components.Schemas.Message)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.Message {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.Gmail_users_messages_modify.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.Gmail_users_messages_modify.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Successful response
            ///
            /// - Remark: Generated from `#/paths//gmail/v1/users/{userId}/messages/{id}/modify/post(gmail.users.messages.modify)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.Gmail_users_messages_modify.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.Gmail_users_messages_modify.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Moves the specified message to the trash.
    ///
    /// - Remark: HTTP `POST /gmail/v1/users/{userId}/messages/{id}/trash`.
    /// - Remark: Generated from `#/paths//gmail/v1/users/{userId}/messages/{id}/trash/post(gmail.users.messages.trash)`.
    public enum Gmail_users_messages_trash {
        public static let id: Swift.String = "gmail.users.messages.trash"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/messages/{id}/trash/POST/path`.
            public struct Path: Sendable, Hashable {
                /// The user's email address. The special value `me` can be used to indicate the authenticated user.
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/messages/{id}/trash/POST/path/userId`.
                public var userId: Swift.String
                /// The ID of the message to Trash.
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/messages/{id}/trash/POST/path/id`.
                public var id: Swift.String
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - userId: The user's email address. The special value `me` can be used to indicate the authenticated user.
                ///   - id: The ID of the message to Trash.
                public init(
                    userId: Swift.String,
                    id: Swift.String
                ) {
                    self.userId = userId
                    self.id = id
                }
            }
            public var path: Operations.Gmail_users_messages_trash.Input.Path
            /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/messages/{id}/trash/POST/query`.
            public struct Query: Sendable, Hashable {
                /// - Remark: Generated from `#/components/parameters/_.xgafv`.
                @frozen public enum __period_xgafv: String, Codable, Hashable, Sendable, CaseIterable {
                    case _1 = "1"
                    case _2 = "2"
                }
                /// V1 error format.
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/messages/{id}/trash/POST/query/$.xgafv`.
                public var _dollar__xgafv: Components.Parameters.__period_xgafv?
                /// OAuth access token.
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/messages/{id}/trash/POST/query/access_token`.
                public var accessToken: Components.Parameters.AccessToken?
                /// - Remark: Generated from `#/components/parameters/alt`.
                @frozen public enum Alt: String, Codable, Hashable, Sendable, CaseIterable {
                    case json = "json"
                    case media = "media"
                    case proto = "proto"
                }
                /// Data format for response.
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/messages/{id}/trash/POST/query/alt`.
                public var alt: Components.Parameters.Alt?
                /// JSONP
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/messages/{id}/trash/POST/query/callback`.
                public var callback: Components.Parameters.Callback?
                /// Selector specifying which fields to include in a partial response.
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/messages/{id}/trash/POST/query/fields`.
                public var fields: Components.Parameters.Fields?
                /// API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/messages/{id}/trash/POST/query/key`.
                public var key: Components.Parameters.Key?
                /// OAuth 2.0 token for the current user.
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/messages/{id}/trash/POST/query/oauth_token`.
                public var oauthToken: Components.Parameters.OauthToken?
                /// Returns response with indentations and line breaks.
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/messages/{id}/trash/POST/query/prettyPrint`.
                public var prettyPrint: Components.Parameters.PrettyPrint?
                /// Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/messages/{id}/trash/POST/query/quotaUser`.
                public var quotaUser: Components.Parameters.QuotaUser?
                /// Upload protocol for media (e.g. "raw", "multipart").
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/messages/{id}/trash/POST/query/upload_protocol`.
                public var uploadProtocol: Components.Parameters.UploadProtocol?
                /// Legacy upload protocol for media (e.g. "media", "multipart").
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/messages/{id}/trash/POST/query/uploadType`.
                public var uploadType: Components.Parameters.UploadType?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - _dollar__xgafv: V1 error format.
                ///   - accessToken: OAuth access token.
                ///   - alt: Data format for response.
                ///   - callback: JSONP
                ///   - fields: Selector specifying which fields to include in a partial response.
                ///   - key: API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
                ///   - oauthToken: OAuth 2.0 token for the current user.
                ///   - prettyPrint: Returns response with indentations and line breaks.
                ///   - quotaUser: Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
                ///   - uploadProtocol: Upload protocol for media (e.g. "raw", "multipart").
                ///   - uploadType: Legacy upload protocol for media (e.g. "media", "multipart").
                public init(
                    _dollar__xgafv: Components.Parameters.__period_xgafv? = nil,
                    accessToken: Components.Parameters.AccessToken? = nil,
                    alt: Components.Parameters.Alt? = nil,
                    callback: Components.Parameters.Callback? = nil,
                    fields: Components.Parameters.Fields? = nil,
                    key: Components.Parameters.Key? = nil,
                    oauthToken: Components.Parameters.OauthToken? = nil,
                    prettyPrint: Components.Parameters.PrettyPrint? = nil,
                    quotaUser: Components.Parameters.QuotaUser? = nil,
                    uploadProtocol: Components.Parameters.UploadProtocol? = nil,
                    uploadType: Components.Parameters.UploadType? = nil
                ) {
                    self._dollar__xgafv = _dollar__xgafv
                    self.accessToken = accessToken
                    self.alt = alt
                    self.callback = callback
                    self.fields = fields
                    self.key = key
                    self.oauthToken = oauthToken
                    self.prettyPrint = prettyPrint
                    self.quotaUser = quotaUser
                    self.uploadProtocol = uploadProtocol
                    self.uploadType = uploadType
                }
            }
            public var query: Operations.Gmail_users_messages_trash.Input.Query
            /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/messages/{id}/trash/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.Gmail_users_messages_trash.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.Gmail_users_messages_trash.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.Gmail_users_messages_trash.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - query:
            ///   - headers:
            public init(
                path: Operations.Gmail_users_messages_trash.Input.Path,
                query: Operations.Gmail_users_messages_trash.Input.Query = .init(),
                headers: Operations.Gmail_users_messages_trash.Input.Headers = .init()
            ) {
                self.path = path
                self.query = query
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/messages/{id}/trash/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/messages/{id}/trash/POST/responses/200/content/application\/json`.
                    case json(Components.Schemas.Message)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.Message {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.Gmail_users_messages_trash.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.Gmail_users_messages_trash.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Successful response
            ///
            /// - Remark: Generated from `#/paths//gmail/v1/users/{userId}/messages/{id}/trash/post(gmail.users.messages.trash)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.Gmail_users_messages_trash.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.Gmail_users_messages_trash.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Removes the specified message from the trash.
    ///
    /// - Remark: HTTP `POST /gmail/v1/users/{userId}/messages/{id}/untrash`.
    /// - Remark: Generated from `#/paths//gmail/v1/users/{userId}/messages/{id}/untrash/post(gmail.users.messages.untrash)`.
    public enum Gmail_users_messages_untrash {
        public static let id: Swift.String = "gmail.users.messages.untrash"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/messages/{id}/untrash/POST/path`.
            public struct Path: Sendable, Hashable {
                /// The user's email address. The special value `me` can be used to indicate the authenticated user.
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/messages/{id}/untrash/POST/path/userId`.
                public var userId: Swift.String
                /// The ID of the message to remove from Trash.
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/messages/{id}/untrash/POST/path/id`.
                public var id: Swift.String
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - userId: The user's email address. The special value `me` can be used to indicate the authenticated user.
                ///   - id: The ID of the message to remove from Trash.
                public init(
                    userId: Swift.String,
                    id: Swift.String
                ) {
                    self.userId = userId
                    self.id = id
                }
            }
            public var path: Operations.Gmail_users_messages_untrash.Input.Path
            /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/messages/{id}/untrash/POST/query`.
            public struct Query: Sendable, Hashable {
                /// - Remark: Generated from `#/components/parameters/_.xgafv`.
                @frozen public enum __period_xgafv: String, Codable, Hashable, Sendable, CaseIterable {
                    case _1 = "1"
                    case _2 = "2"
                }
                /// V1 error format.
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/messages/{id}/untrash/POST/query/$.xgafv`.
                public var _dollar__xgafv: Components.Parameters.__period_xgafv?
                /// OAuth access token.
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/messages/{id}/untrash/POST/query/access_token`.
                public var accessToken: Components.Parameters.AccessToken?
                /// - Remark: Generated from `#/components/parameters/alt`.
                @frozen public enum Alt: String, Codable, Hashable, Sendable, CaseIterable {
                    case json = "json"
                    case media = "media"
                    case proto = "proto"
                }
                /// Data format for response.
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/messages/{id}/untrash/POST/query/alt`.
                public var alt: Components.Parameters.Alt?
                /// JSONP
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/messages/{id}/untrash/POST/query/callback`.
                public var callback: Components.Parameters.Callback?
                /// Selector specifying which fields to include in a partial response.
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/messages/{id}/untrash/POST/query/fields`.
                public var fields: Components.Parameters.Fields?
                /// API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/messages/{id}/untrash/POST/query/key`.
                public var key: Components.Parameters.Key?
                /// OAuth 2.0 token for the current user.
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/messages/{id}/untrash/POST/query/oauth_token`.
                public var oauthToken: Components.Parameters.OauthToken?
                /// Returns response with indentations and line breaks.
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/messages/{id}/untrash/POST/query/prettyPrint`.
                public var prettyPrint: Components.Parameters.PrettyPrint?
                /// Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/messages/{id}/untrash/POST/query/quotaUser`.
                public var quotaUser: Components.Parameters.QuotaUser?
                /// Upload protocol for media (e.g. "raw", "multipart").
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/messages/{id}/untrash/POST/query/upload_protocol`.
                public var uploadProtocol: Components.Parameters.UploadProtocol?
                /// Legacy upload protocol for media (e.g. "media", "multipart").
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/messages/{id}/untrash/POST/query/uploadType`.
                public var uploadType: Components.Parameters.UploadType?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - _dollar__xgafv: V1 error format.
                ///   - accessToken: OAuth access token.
                ///   - alt: Data format for response.
                ///   - callback: JSONP
                ///   - fields: Selector specifying which fields to include in a partial response.
                ///   - key: API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
                ///   - oauthToken: OAuth 2.0 token for the current user.
                ///   - prettyPrint: Returns response with indentations and line breaks.
                ///   - quotaUser: Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
                ///   - uploadProtocol: Upload protocol for media (e.g. "raw", "multipart").
                ///   - uploadType: Legacy upload protocol for media (e.g. "media", "multipart").
                public init(
                    _dollar__xgafv: Components.Parameters.__period_xgafv? = nil,
                    accessToken: Components.Parameters.AccessToken? = nil,
                    alt: Components.Parameters.Alt? = nil,
                    callback: Components.Parameters.Callback? = nil,
                    fields: Components.Parameters.Fields? = nil,
                    key: Components.Parameters.Key? = nil,
                    oauthToken: Components.Parameters.OauthToken? = nil,
                    prettyPrint: Components.Parameters.PrettyPrint? = nil,
                    quotaUser: Components.Parameters.QuotaUser? = nil,
                    uploadProtocol: Components.Parameters.UploadProtocol? = nil,
                    uploadType: Components.Parameters.UploadType? = nil
                ) {
                    self._dollar__xgafv = _dollar__xgafv
                    self.accessToken = accessToken
                    self.alt = alt
                    self.callback = callback
                    self.fields = fields
                    self.key = key
                    self.oauthToken = oauthToken
                    self.prettyPrint = prettyPrint
                    self.quotaUser = quotaUser
                    self.uploadProtocol = uploadProtocol
                    self.uploadType = uploadType
                }
            }
            public var query: Operations.Gmail_users_messages_untrash.Input.Query
            /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/messages/{id}/untrash/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.Gmail_users_messages_untrash.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.Gmail_users_messages_untrash.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.Gmail_users_messages_untrash.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - query:
            ///   - headers:
            public init(
                path: Operations.Gmail_users_messages_untrash.Input.Path,
                query: Operations.Gmail_users_messages_untrash.Input.Query = .init(),
                headers: Operations.Gmail_users_messages_untrash.Input.Headers = .init()
            ) {
                self.path = path
                self.query = query
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/messages/{id}/untrash/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/messages/{id}/untrash/POST/responses/200/content/application\/json`.
                    case json(Components.Schemas.Message)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.Message {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.Gmail_users_messages_untrash.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.Gmail_users_messages_untrash.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Successful response
            ///
            /// - Remark: Generated from `#/paths//gmail/v1/users/{userId}/messages/{id}/untrash/post(gmail.users.messages.untrash)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.Gmail_users_messages_untrash.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.Gmail_users_messages_untrash.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Gets the specified message attachment.
    ///
    /// - Remark: HTTP `GET /gmail/v1/users/{userId}/messages/{messageId}/attachments/{id}`.
    /// - Remark: Generated from `#/paths//gmail/v1/users/{userId}/messages/{messageId}/attachments/{id}/get(gmail.users.messages.attachments.get)`.
    public enum Gmail_users_messages_attachments_get {
        public static let id: Swift.String = "gmail.users.messages.attachments.get"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/messages/{messageId}/attachments/{id}/GET/path`.
            public struct Path: Sendable, Hashable {
                /// The user's email address. The special value `me` can be used to indicate the authenticated user.
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/messages/{messageId}/attachments/{id}/GET/path/userId`.
                public var userId: Swift.String
                /// The ID of the message containing the attachment.
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/messages/{messageId}/attachments/{id}/GET/path/messageId`.
                public var messageId: Swift.String
                /// The ID of the attachment.
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/messages/{messageId}/attachments/{id}/GET/path/id`.
                public var id: Swift.String
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - userId: The user's email address. The special value `me` can be used to indicate the authenticated user.
                ///   - messageId: The ID of the message containing the attachment.
                ///   - id: The ID of the attachment.
                public init(
                    userId: Swift.String,
                    messageId: Swift.String,
                    id: Swift.String
                ) {
                    self.userId = userId
                    self.messageId = messageId
                    self.id = id
                }
            }
            public var path: Operations.Gmail_users_messages_attachments_get.Input.Path
            /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/messages/{messageId}/attachments/{id}/GET/query`.
            public struct Query: Sendable, Hashable {
                /// - Remark: Generated from `#/components/parameters/_.xgafv`.
                @frozen public enum __period_xgafv: String, Codable, Hashable, Sendable, CaseIterable {
                    case _1 = "1"
                    case _2 = "2"
                }
                /// V1 error format.
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/messages/{messageId}/attachments/{id}/GET/query/$.xgafv`.
                public var _dollar__xgafv: Components.Parameters.__period_xgafv?
                /// OAuth access token.
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/messages/{messageId}/attachments/{id}/GET/query/access_token`.
                public var accessToken: Components.Parameters.AccessToken?
                /// - Remark: Generated from `#/components/parameters/alt`.
                @frozen public enum Alt: String, Codable, Hashable, Sendable, CaseIterable {
                    case json = "json"
                    case media = "media"
                    case proto = "proto"
                }
                /// Data format for response.
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/messages/{messageId}/attachments/{id}/GET/query/alt`.
                public var alt: Components.Parameters.Alt?
                /// JSONP
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/messages/{messageId}/attachments/{id}/GET/query/callback`.
                public var callback: Components.Parameters.Callback?
                /// Selector specifying which fields to include in a partial response.
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/messages/{messageId}/attachments/{id}/GET/query/fields`.
                public var fields: Components.Parameters.Fields?
                /// API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/messages/{messageId}/attachments/{id}/GET/query/key`.
                public var key: Components.Parameters.Key?
                /// OAuth 2.0 token for the current user.
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/messages/{messageId}/attachments/{id}/GET/query/oauth_token`.
                public var oauthToken: Components.Parameters.OauthToken?
                /// Returns response with indentations and line breaks.
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/messages/{messageId}/attachments/{id}/GET/query/prettyPrint`.
                public var prettyPrint: Components.Parameters.PrettyPrint?
                /// Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/messages/{messageId}/attachments/{id}/GET/query/quotaUser`.
                public var quotaUser: Components.Parameters.QuotaUser?
                /// Upload protocol for media (e.g. "raw", "multipart").
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/messages/{messageId}/attachments/{id}/GET/query/upload_protocol`.
                public var uploadProtocol: Components.Parameters.UploadProtocol?
                /// Legacy upload protocol for media (e.g. "media", "multipart").
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/messages/{messageId}/attachments/{id}/GET/query/uploadType`.
                public var uploadType: Components.Parameters.UploadType?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - _dollar__xgafv: V1 error format.
                ///   - accessToken: OAuth access token.
                ///   - alt: Data format for response.
                ///   - callback: JSONP
                ///   - fields: Selector specifying which fields to include in a partial response.
                ///   - key: API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
                ///   - oauthToken: OAuth 2.0 token for the current user.
                ///   - prettyPrint: Returns response with indentations and line breaks.
                ///   - quotaUser: Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
                ///   - uploadProtocol: Upload protocol for media (e.g. "raw", "multipart").
                ///   - uploadType: Legacy upload protocol for media (e.g. "media", "multipart").
                public init(
                    _dollar__xgafv: Components.Parameters.__period_xgafv? = nil,
                    accessToken: Components.Parameters.AccessToken? = nil,
                    alt: Components.Parameters.Alt? = nil,
                    callback: Components.Parameters.Callback? = nil,
                    fields: Components.Parameters.Fields? = nil,
                    key: Components.Parameters.Key? = nil,
                    oauthToken: Components.Parameters.OauthToken? = nil,
                    prettyPrint: Components.Parameters.PrettyPrint? = nil,
                    quotaUser: Components.Parameters.QuotaUser? = nil,
                    uploadProtocol: Components.Parameters.UploadProtocol? = nil,
                    uploadType: Components.Parameters.UploadType? = nil
                ) {
                    self._dollar__xgafv = _dollar__xgafv
                    self.accessToken = accessToken
                    self.alt = alt
                    self.callback = callback
                    self.fields = fields
                    self.key = key
                    self.oauthToken = oauthToken
                    self.prettyPrint = prettyPrint
                    self.quotaUser = quotaUser
                    self.uploadProtocol = uploadProtocol
                    self.uploadType = uploadType
                }
            }
            public var query: Operations.Gmail_users_messages_attachments_get.Input.Query
            /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/messages/{messageId}/attachments/{id}/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.Gmail_users_messages_attachments_get.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.Gmail_users_messages_attachments_get.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.Gmail_users_messages_attachments_get.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - query:
            ///   - headers:
            public init(
                path: Operations.Gmail_users_messages_attachments_get.Input.Path,
                query: Operations.Gmail_users_messages_attachments_get.Input.Query = .init(),
                headers: Operations.Gmail_users_messages_attachments_get.Input.Headers = .init()
            ) {
                self.path = path
                self.query = query
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/messages/{messageId}/attachments/{id}/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/messages/{messageId}/attachments/{id}/GET/responses/200/content/application\/json`.
                    case json(Components.Schemas.MessagePartBody)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.MessagePartBody {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.Gmail_users_messages_attachments_get.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.Gmail_users_messages_attachments_get.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Successful response
            ///
            /// - Remark: Generated from `#/paths//gmail/v1/users/{userId}/messages/{messageId}/attachments/{id}/get(gmail.users.messages.attachments.get)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.Gmail_users_messages_attachments_get.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.Gmail_users_messages_attachments_get.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Gets the current user's Gmail profile.
    ///
    /// - Remark: HTTP `GET /gmail/v1/users/{userId}/profile`.
    /// - Remark: Generated from `#/paths//gmail/v1/users/{userId}/profile/get(gmail.users.getProfile)`.
    public enum Gmail_users_getProfile {
        public static let id: Swift.String = "gmail.users.getProfile"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/profile/GET/path`.
            public struct Path: Sendable, Hashable {
                /// The user's email address. The special value `me` can be used to indicate the authenticated user.
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/profile/GET/path/userId`.
                public var userId: Swift.String
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - userId: The user's email address. The special value `me` can be used to indicate the authenticated user.
                public init(userId: Swift.String) {
                    self.userId = userId
                }
            }
            public var path: Operations.Gmail_users_getProfile.Input.Path
            /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/profile/GET/query`.
            public struct Query: Sendable, Hashable {
                /// - Remark: Generated from `#/components/parameters/_.xgafv`.
                @frozen public enum __period_xgafv: String, Codable, Hashable, Sendable, CaseIterable {
                    case _1 = "1"
                    case _2 = "2"
                }
                /// V1 error format.
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/profile/GET/query/$.xgafv`.
                public var _dollar__xgafv: Components.Parameters.__period_xgafv?
                /// OAuth access token.
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/profile/GET/query/access_token`.
                public var accessToken: Components.Parameters.AccessToken?
                /// - Remark: Generated from `#/components/parameters/alt`.
                @frozen public enum Alt: String, Codable, Hashable, Sendable, CaseIterable {
                    case json = "json"
                    case media = "media"
                    case proto = "proto"
                }
                /// Data format for response.
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/profile/GET/query/alt`.
                public var alt: Components.Parameters.Alt?
                /// JSONP
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/profile/GET/query/callback`.
                public var callback: Components.Parameters.Callback?
                /// Selector specifying which fields to include in a partial response.
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/profile/GET/query/fields`.
                public var fields: Components.Parameters.Fields?
                /// API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/profile/GET/query/key`.
                public var key: Components.Parameters.Key?
                /// OAuth 2.0 token for the current user.
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/profile/GET/query/oauth_token`.
                public var oauthToken: Components.Parameters.OauthToken?
                /// Returns response with indentations and line breaks.
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/profile/GET/query/prettyPrint`.
                public var prettyPrint: Components.Parameters.PrettyPrint?
                /// Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/profile/GET/query/quotaUser`.
                public var quotaUser: Components.Parameters.QuotaUser?
                /// Upload protocol for media (e.g. "raw", "multipart").
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/profile/GET/query/upload_protocol`.
                public var uploadProtocol: Components.Parameters.UploadProtocol?
                /// Legacy upload protocol for media (e.g. "media", "multipart").
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/profile/GET/query/uploadType`.
                public var uploadType: Components.Parameters.UploadType?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - _dollar__xgafv: V1 error format.
                ///   - accessToken: OAuth access token.
                ///   - alt: Data format for response.
                ///   - callback: JSONP
                ///   - fields: Selector specifying which fields to include in a partial response.
                ///   - key: API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
                ///   - oauthToken: OAuth 2.0 token for the current user.
                ///   - prettyPrint: Returns response with indentations and line breaks.
                ///   - quotaUser: Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
                ///   - uploadProtocol: Upload protocol for media (e.g. "raw", "multipart").
                ///   - uploadType: Legacy upload protocol for media (e.g. "media", "multipart").
                public init(
                    _dollar__xgafv: Components.Parameters.__period_xgafv? = nil,
                    accessToken: Components.Parameters.AccessToken? = nil,
                    alt: Components.Parameters.Alt? = nil,
                    callback: Components.Parameters.Callback? = nil,
                    fields: Components.Parameters.Fields? = nil,
                    key: Components.Parameters.Key? = nil,
                    oauthToken: Components.Parameters.OauthToken? = nil,
                    prettyPrint: Components.Parameters.PrettyPrint? = nil,
                    quotaUser: Components.Parameters.QuotaUser? = nil,
                    uploadProtocol: Components.Parameters.UploadProtocol? = nil,
                    uploadType: Components.Parameters.UploadType? = nil
                ) {
                    self._dollar__xgafv = _dollar__xgafv
                    self.accessToken = accessToken
                    self.alt = alt
                    self.callback = callback
                    self.fields = fields
                    self.key = key
                    self.oauthToken = oauthToken
                    self.prettyPrint = prettyPrint
                    self.quotaUser = quotaUser
                    self.uploadProtocol = uploadProtocol
                    self.uploadType = uploadType
                }
            }
            public var query: Operations.Gmail_users_getProfile.Input.Query
            /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/profile/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.Gmail_users_getProfile.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.Gmail_users_getProfile.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.Gmail_users_getProfile.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - query:
            ///   - headers:
            public init(
                path: Operations.Gmail_users_getProfile.Input.Path,
                query: Operations.Gmail_users_getProfile.Input.Query = .init(),
                headers: Operations.Gmail_users_getProfile.Input.Headers = .init()
            ) {
                self.path = path
                self.query = query
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/profile/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/profile/GET/responses/200/content/application\/json`.
                    case json(Components.Schemas.Profile)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.Profile {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.Gmail_users_getProfile.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.Gmail_users_getProfile.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Successful response
            ///
            /// - Remark: Generated from `#/paths//gmail/v1/users/{userId}/profile/get(gmail.users.getProfile)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.Gmail_users_getProfile.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.Gmail_users_getProfile.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Gets the auto-forwarding setting for the specified account.
    ///
    /// - Remark: HTTP `GET /gmail/v1/users/{userId}/settings/autoForwarding`.
    /// - Remark: Generated from `#/paths//gmail/v1/users/{userId}/settings/autoForwarding/get(gmail.users.settings.getAutoForwarding)`.
    public enum Gmail_users_settings_getAutoForwarding {
        public static let id: Swift.String = "gmail.users.settings.getAutoForwarding"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/settings/autoForwarding/GET/path`.
            public struct Path: Sendable, Hashable {
                /// User's email address. The special value "me" can be used to indicate the authenticated user.
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/settings/autoForwarding/GET/path/userId`.
                public var userId: Swift.String
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - userId: User's email address. The special value "me" can be used to indicate the authenticated user.
                public init(userId: Swift.String) {
                    self.userId = userId
                }
            }
            public var path: Operations.Gmail_users_settings_getAutoForwarding.Input.Path
            /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/settings/autoForwarding/GET/query`.
            public struct Query: Sendable, Hashable {
                /// - Remark: Generated from `#/components/parameters/_.xgafv`.
                @frozen public enum __period_xgafv: String, Codable, Hashable, Sendable, CaseIterable {
                    case _1 = "1"
                    case _2 = "2"
                }
                /// V1 error format.
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/settings/autoForwarding/GET/query/$.xgafv`.
                public var _dollar__xgafv: Components.Parameters.__period_xgafv?
                /// OAuth access token.
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/settings/autoForwarding/GET/query/access_token`.
                public var accessToken: Components.Parameters.AccessToken?
                /// - Remark: Generated from `#/components/parameters/alt`.
                @frozen public enum Alt: String, Codable, Hashable, Sendable, CaseIterable {
                    case json = "json"
                    case media = "media"
                    case proto = "proto"
                }
                /// Data format for response.
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/settings/autoForwarding/GET/query/alt`.
                public var alt: Components.Parameters.Alt?
                /// JSONP
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/settings/autoForwarding/GET/query/callback`.
                public var callback: Components.Parameters.Callback?
                /// Selector specifying which fields to include in a partial response.
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/settings/autoForwarding/GET/query/fields`.
                public var fields: Components.Parameters.Fields?
                /// API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/settings/autoForwarding/GET/query/key`.
                public var key: Components.Parameters.Key?
                /// OAuth 2.0 token for the current user.
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/settings/autoForwarding/GET/query/oauth_token`.
                public var oauthToken: Components.Parameters.OauthToken?
                /// Returns response with indentations and line breaks.
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/settings/autoForwarding/GET/query/prettyPrint`.
                public var prettyPrint: Components.Parameters.PrettyPrint?
                /// Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/settings/autoForwarding/GET/query/quotaUser`.
                public var quotaUser: Components.Parameters.QuotaUser?
                /// Upload protocol for media (e.g. "raw", "multipart").
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/settings/autoForwarding/GET/query/upload_protocol`.
                public var uploadProtocol: Components.Parameters.UploadProtocol?
                /// Legacy upload protocol for media (e.g. "media", "multipart").
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/settings/autoForwarding/GET/query/uploadType`.
                public var uploadType: Components.Parameters.UploadType?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - _dollar__xgafv: V1 error format.
                ///   - accessToken: OAuth access token.
                ///   - alt: Data format for response.
                ///   - callback: JSONP
                ///   - fields: Selector specifying which fields to include in a partial response.
                ///   - key: API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
                ///   - oauthToken: OAuth 2.0 token for the current user.
                ///   - prettyPrint: Returns response with indentations and line breaks.
                ///   - quotaUser: Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
                ///   - uploadProtocol: Upload protocol for media (e.g. "raw", "multipart").
                ///   - uploadType: Legacy upload protocol for media (e.g. "media", "multipart").
                public init(
                    _dollar__xgafv: Components.Parameters.__period_xgafv? = nil,
                    accessToken: Components.Parameters.AccessToken? = nil,
                    alt: Components.Parameters.Alt? = nil,
                    callback: Components.Parameters.Callback? = nil,
                    fields: Components.Parameters.Fields? = nil,
                    key: Components.Parameters.Key? = nil,
                    oauthToken: Components.Parameters.OauthToken? = nil,
                    prettyPrint: Components.Parameters.PrettyPrint? = nil,
                    quotaUser: Components.Parameters.QuotaUser? = nil,
                    uploadProtocol: Components.Parameters.UploadProtocol? = nil,
                    uploadType: Components.Parameters.UploadType? = nil
                ) {
                    self._dollar__xgafv = _dollar__xgafv
                    self.accessToken = accessToken
                    self.alt = alt
                    self.callback = callback
                    self.fields = fields
                    self.key = key
                    self.oauthToken = oauthToken
                    self.prettyPrint = prettyPrint
                    self.quotaUser = quotaUser
                    self.uploadProtocol = uploadProtocol
                    self.uploadType = uploadType
                }
            }
            public var query: Operations.Gmail_users_settings_getAutoForwarding.Input.Query
            /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/settings/autoForwarding/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.Gmail_users_settings_getAutoForwarding.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.Gmail_users_settings_getAutoForwarding.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.Gmail_users_settings_getAutoForwarding.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - query:
            ///   - headers:
            public init(
                path: Operations.Gmail_users_settings_getAutoForwarding.Input.Path,
                query: Operations.Gmail_users_settings_getAutoForwarding.Input.Query = .init(),
                headers: Operations.Gmail_users_settings_getAutoForwarding.Input.Headers = .init()
            ) {
                self.path = path
                self.query = query
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/settings/autoForwarding/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/settings/autoForwarding/GET/responses/200/content/application\/json`.
                    case json(Components.Schemas.AutoForwarding)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.AutoForwarding {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.Gmail_users_settings_getAutoForwarding.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.Gmail_users_settings_getAutoForwarding.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Successful response
            ///
            /// - Remark: Generated from `#/paths//gmail/v1/users/{userId}/settings/autoForwarding/get(gmail.users.settings.getAutoForwarding)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.Gmail_users_settings_getAutoForwarding.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.Gmail_users_settings_getAutoForwarding.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Updates the auto-forwarding setting for the specified account. A verified forwarding address must be specified when auto-forwarding is enabled. This method is only available to service account clients that have been delegated domain-wide authority.
    ///
    /// - Remark: HTTP `PUT /gmail/v1/users/{userId}/settings/autoForwarding`.
    /// - Remark: Generated from `#/paths//gmail/v1/users/{userId}/settings/autoForwarding/put(gmail.users.settings.updateAutoForwarding)`.
    public enum Gmail_users_settings_updateAutoForwarding {
        public static let id: Swift.String = "gmail.users.settings.updateAutoForwarding"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/settings/autoForwarding/PUT/path`.
            public struct Path: Sendable, Hashable {
                /// User's email address. The special value "me" can be used to indicate the authenticated user.
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/settings/autoForwarding/PUT/path/userId`.
                public var userId: Swift.String
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - userId: User's email address. The special value "me" can be used to indicate the authenticated user.
                public init(userId: Swift.String) {
                    self.userId = userId
                }
            }
            public var path: Operations.Gmail_users_settings_updateAutoForwarding.Input.Path
            /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/settings/autoForwarding/PUT/query`.
            public struct Query: Sendable, Hashable {
                /// - Remark: Generated from `#/components/parameters/_.xgafv`.
                @frozen public enum __period_xgafv: String, Codable, Hashable, Sendable, CaseIterable {
                    case _1 = "1"
                    case _2 = "2"
                }
                /// V1 error format.
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/settings/autoForwarding/PUT/query/$.xgafv`.
                public var _dollar__xgafv: Components.Parameters.__period_xgafv?
                /// OAuth access token.
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/settings/autoForwarding/PUT/query/access_token`.
                public var accessToken: Components.Parameters.AccessToken?
                /// - Remark: Generated from `#/components/parameters/alt`.
                @frozen public enum Alt: String, Codable, Hashable, Sendable, CaseIterable {
                    case json = "json"
                    case media = "media"
                    case proto = "proto"
                }
                /// Data format for response.
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/settings/autoForwarding/PUT/query/alt`.
                public var alt: Components.Parameters.Alt?
                /// JSONP
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/settings/autoForwarding/PUT/query/callback`.
                public var callback: Components.Parameters.Callback?
                /// Selector specifying which fields to include in a partial response.
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/settings/autoForwarding/PUT/query/fields`.
                public var fields: Components.Parameters.Fields?
                /// API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/settings/autoForwarding/PUT/query/key`.
                public var key: Components.Parameters.Key?
                /// OAuth 2.0 token for the current user.
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/settings/autoForwarding/PUT/query/oauth_token`.
                public var oauthToken: Components.Parameters.OauthToken?
                /// Returns response with indentations and line breaks.
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/settings/autoForwarding/PUT/query/prettyPrint`.
                public var prettyPrint: Components.Parameters.PrettyPrint?
                /// Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/settings/autoForwarding/PUT/query/quotaUser`.
                public var quotaUser: Components.Parameters.QuotaUser?
                /// Upload protocol for media (e.g. "raw", "multipart").
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/settings/autoForwarding/PUT/query/upload_protocol`.
                public var uploadProtocol: Components.Parameters.UploadProtocol?
                /// Legacy upload protocol for media (e.g. "media", "multipart").
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/settings/autoForwarding/PUT/query/uploadType`.
                public var uploadType: Components.Parameters.UploadType?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - _dollar__xgafv: V1 error format.
                ///   - accessToken: OAuth access token.
                ///   - alt: Data format for response.
                ///   - callback: JSONP
                ///   - fields: Selector specifying which fields to include in a partial response.
                ///   - key: API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
                ///   - oauthToken: OAuth 2.0 token for the current user.
                ///   - prettyPrint: Returns response with indentations and line breaks.
                ///   - quotaUser: Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
                ///   - uploadProtocol: Upload protocol for media (e.g. "raw", "multipart").
                ///   - uploadType: Legacy upload protocol for media (e.g. "media", "multipart").
                public init(
                    _dollar__xgafv: Components.Parameters.__period_xgafv? = nil,
                    accessToken: Components.Parameters.AccessToken? = nil,
                    alt: Components.Parameters.Alt? = nil,
                    callback: Components.Parameters.Callback? = nil,
                    fields: Components.Parameters.Fields? = nil,
                    key: Components.Parameters.Key? = nil,
                    oauthToken: Components.Parameters.OauthToken? = nil,
                    prettyPrint: Components.Parameters.PrettyPrint? = nil,
                    quotaUser: Components.Parameters.QuotaUser? = nil,
                    uploadProtocol: Components.Parameters.UploadProtocol? = nil,
                    uploadType: Components.Parameters.UploadType? = nil
                ) {
                    self._dollar__xgafv = _dollar__xgafv
                    self.accessToken = accessToken
                    self.alt = alt
                    self.callback = callback
                    self.fields = fields
                    self.key = key
                    self.oauthToken = oauthToken
                    self.prettyPrint = prettyPrint
                    self.quotaUser = quotaUser
                    self.uploadProtocol = uploadProtocol
                    self.uploadType = uploadType
                }
            }
            public var query: Operations.Gmail_users_settings_updateAutoForwarding.Input.Query
            /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/settings/autoForwarding/PUT/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.Gmail_users_settings_updateAutoForwarding.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.Gmail_users_settings_updateAutoForwarding.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.Gmail_users_settings_updateAutoForwarding.Input.Headers
            /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/settings/autoForwarding/PUT/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/settings/autoForwarding/PUT/requestBody/content/application\/json`.
                case json(Components.Schemas.AutoForwarding)
            }
            public var body: Operations.Gmail_users_settings_updateAutoForwarding.Input.Body?
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - query:
            ///   - headers:
            ///   - body:
            public init(
                path: Operations.Gmail_users_settings_updateAutoForwarding.Input.Path,
                query: Operations.Gmail_users_settings_updateAutoForwarding.Input.Query = .init(),
                headers: Operations.Gmail_users_settings_updateAutoForwarding.Input.Headers = .init(),
                body: Operations.Gmail_users_settings_updateAutoForwarding.Input.Body? = nil
            ) {
                self.path = path
                self.query = query
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/settings/autoForwarding/PUT/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/settings/autoForwarding/PUT/responses/200/content/application\/json`.
                    case json(Components.Schemas.AutoForwarding)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.AutoForwarding {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.Gmail_users_settings_updateAutoForwarding.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.Gmail_users_settings_updateAutoForwarding.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Successful response
            ///
            /// - Remark: Generated from `#/paths//gmail/v1/users/{userId}/settings/autoForwarding/put(gmail.users.settings.updateAutoForwarding)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.Gmail_users_settings_updateAutoForwarding.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.Gmail_users_settings_updateAutoForwarding.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Lists the client-side encrypted identities for an authenticated user.
    ///
    /// - Remark: HTTP `GET /gmail/v1/users/{userId}/settings/cse/identities`.
    /// - Remark: Generated from `#/paths//gmail/v1/users/{userId}/settings/cse/identities/get(gmail.users.settings.cse.identities.list)`.
    public enum Gmail_users_settings_cse_identities_list {
        public static let id: Swift.String = "gmail.users.settings.cse.identities.list"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/settings/cse/identities/GET/path`.
            public struct Path: Sendable, Hashable {
                /// The requester's primary email address. To indicate the authenticated user, you can use the special value `me`.
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/settings/cse/identities/GET/path/userId`.
                public var userId: Swift.String
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - userId: The requester's primary email address. To indicate the authenticated user, you can use the special value `me`.
                public init(userId: Swift.String) {
                    self.userId = userId
                }
            }
            public var path: Operations.Gmail_users_settings_cse_identities_list.Input.Path
            /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/settings/cse/identities/GET/query`.
            public struct Query: Sendable, Hashable {
                /// - Remark: Generated from `#/components/parameters/_.xgafv`.
                @frozen public enum __period_xgafv: String, Codable, Hashable, Sendable, CaseIterable {
                    case _1 = "1"
                    case _2 = "2"
                }
                /// V1 error format.
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/settings/cse/identities/GET/query/$.xgafv`.
                public var _dollar__xgafv: Components.Parameters.__period_xgafv?
                /// OAuth access token.
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/settings/cse/identities/GET/query/access_token`.
                public var accessToken: Components.Parameters.AccessToken?
                /// - Remark: Generated from `#/components/parameters/alt`.
                @frozen public enum Alt: String, Codable, Hashable, Sendable, CaseIterable {
                    case json = "json"
                    case media = "media"
                    case proto = "proto"
                }
                /// Data format for response.
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/settings/cse/identities/GET/query/alt`.
                public var alt: Components.Parameters.Alt?
                /// JSONP
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/settings/cse/identities/GET/query/callback`.
                public var callback: Components.Parameters.Callback?
                /// Selector specifying which fields to include in a partial response.
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/settings/cse/identities/GET/query/fields`.
                public var fields: Components.Parameters.Fields?
                /// API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/settings/cse/identities/GET/query/key`.
                public var key: Components.Parameters.Key?
                /// OAuth 2.0 token for the current user.
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/settings/cse/identities/GET/query/oauth_token`.
                public var oauthToken: Components.Parameters.OauthToken?
                /// Returns response with indentations and line breaks.
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/settings/cse/identities/GET/query/prettyPrint`.
                public var prettyPrint: Components.Parameters.PrettyPrint?
                /// Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/settings/cse/identities/GET/query/quotaUser`.
                public var quotaUser: Components.Parameters.QuotaUser?
                /// Upload protocol for media (e.g. "raw", "multipart").
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/settings/cse/identities/GET/query/upload_protocol`.
                public var uploadProtocol: Components.Parameters.UploadProtocol?
                /// Legacy upload protocol for media (e.g. "media", "multipart").
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/settings/cse/identities/GET/query/uploadType`.
                public var uploadType: Components.Parameters.UploadType?
                /// The number of identities to return. If not provided, the page size will default to 20 entries.
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/settings/cse/identities/GET/query/pageSize`.
                public var pageSize: Swift.Int?
                /// Pagination token indicating which page of identities to return. If the token is not supplied, then the API will return the first page of results.
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/settings/cse/identities/GET/query/pageToken`.
                public var pageToken: Swift.String?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - _dollar__xgafv: V1 error format.
                ///   - accessToken: OAuth access token.
                ///   - alt: Data format for response.
                ///   - callback: JSONP
                ///   - fields: Selector specifying which fields to include in a partial response.
                ///   - key: API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
                ///   - oauthToken: OAuth 2.0 token for the current user.
                ///   - prettyPrint: Returns response with indentations and line breaks.
                ///   - quotaUser: Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
                ///   - uploadProtocol: Upload protocol for media (e.g. "raw", "multipart").
                ///   - uploadType: Legacy upload protocol for media (e.g. "media", "multipart").
                ///   - pageSize: The number of identities to return. If not provided, the page size will default to 20 entries.
                ///   - pageToken: Pagination token indicating which page of identities to return. If the token is not supplied, then the API will return the first page of results.
                public init(
                    _dollar__xgafv: Components.Parameters.__period_xgafv? = nil,
                    accessToken: Components.Parameters.AccessToken? = nil,
                    alt: Components.Parameters.Alt? = nil,
                    callback: Components.Parameters.Callback? = nil,
                    fields: Components.Parameters.Fields? = nil,
                    key: Components.Parameters.Key? = nil,
                    oauthToken: Components.Parameters.OauthToken? = nil,
                    prettyPrint: Components.Parameters.PrettyPrint? = nil,
                    quotaUser: Components.Parameters.QuotaUser? = nil,
                    uploadProtocol: Components.Parameters.UploadProtocol? = nil,
                    uploadType: Components.Parameters.UploadType? = nil,
                    pageSize: Swift.Int? = nil,
                    pageToken: Swift.String? = nil
                ) {
                    self._dollar__xgafv = _dollar__xgafv
                    self.accessToken = accessToken
                    self.alt = alt
                    self.callback = callback
                    self.fields = fields
                    self.key = key
                    self.oauthToken = oauthToken
                    self.prettyPrint = prettyPrint
                    self.quotaUser = quotaUser
                    self.uploadProtocol = uploadProtocol
                    self.uploadType = uploadType
                    self.pageSize = pageSize
                    self.pageToken = pageToken
                }
            }
            public var query: Operations.Gmail_users_settings_cse_identities_list.Input.Query
            /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/settings/cse/identities/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.Gmail_users_settings_cse_identities_list.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.Gmail_users_settings_cse_identities_list.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.Gmail_users_settings_cse_identities_list.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - query:
            ///   - headers:
            public init(
                path: Operations.Gmail_users_settings_cse_identities_list.Input.Path,
                query: Operations.Gmail_users_settings_cse_identities_list.Input.Query = .init(),
                headers: Operations.Gmail_users_settings_cse_identities_list.Input.Headers = .init()
            ) {
                self.path = path
                self.query = query
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/settings/cse/identities/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/settings/cse/identities/GET/responses/200/content/application\/json`.
                    case json(Components.Schemas.ListCseIdentitiesResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.ListCseIdentitiesResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.Gmail_users_settings_cse_identities_list.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.Gmail_users_settings_cse_identities_list.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Successful response
            ///
            /// - Remark: Generated from `#/paths//gmail/v1/users/{userId}/settings/cse/identities/get(gmail.users.settings.cse.identities.list)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.Gmail_users_settings_cse_identities_list.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.Gmail_users_settings_cse_identities_list.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Creates and configures a client-side encryption identity that's authorized to send mail from the user account. Google publishes the S/MIME certificate to a shared domain-wide directory so that people within a Google Workspace organization can encrypt and send mail to the identity.
    ///
    /// - Remark: HTTP `POST /gmail/v1/users/{userId}/settings/cse/identities`.
    /// - Remark: Generated from `#/paths//gmail/v1/users/{userId}/settings/cse/identities/post(gmail.users.settings.cse.identities.create)`.
    public enum Gmail_users_settings_cse_identities_create {
        public static let id: Swift.String = "gmail.users.settings.cse.identities.create"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/settings/cse/identities/POST/path`.
            public struct Path: Sendable, Hashable {
                /// The requester's primary email address. To indicate the authenticated user, you can use the special value `me`.
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/settings/cse/identities/POST/path/userId`.
                public var userId: Swift.String
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - userId: The requester's primary email address. To indicate the authenticated user, you can use the special value `me`.
                public init(userId: Swift.String) {
                    self.userId = userId
                }
            }
            public var path: Operations.Gmail_users_settings_cse_identities_create.Input.Path
            /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/settings/cse/identities/POST/query`.
            public struct Query: Sendable, Hashable {
                /// - Remark: Generated from `#/components/parameters/_.xgafv`.
                @frozen public enum __period_xgafv: String, Codable, Hashable, Sendable, CaseIterable {
                    case _1 = "1"
                    case _2 = "2"
                }
                /// V1 error format.
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/settings/cse/identities/POST/query/$.xgafv`.
                public var _dollar__xgafv: Components.Parameters.__period_xgafv?
                /// OAuth access token.
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/settings/cse/identities/POST/query/access_token`.
                public var accessToken: Components.Parameters.AccessToken?
                /// - Remark: Generated from `#/components/parameters/alt`.
                @frozen public enum Alt: String, Codable, Hashable, Sendable, CaseIterable {
                    case json = "json"
                    case media = "media"
                    case proto = "proto"
                }
                /// Data format for response.
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/settings/cse/identities/POST/query/alt`.
                public var alt: Components.Parameters.Alt?
                /// JSONP
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/settings/cse/identities/POST/query/callback`.
                public var callback: Components.Parameters.Callback?
                /// Selector specifying which fields to include in a partial response.
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/settings/cse/identities/POST/query/fields`.
                public var fields: Components.Parameters.Fields?
                /// API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/settings/cse/identities/POST/query/key`.
                public var key: Components.Parameters.Key?
                /// OAuth 2.0 token for the current user.
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/settings/cse/identities/POST/query/oauth_token`.
                public var oauthToken: Components.Parameters.OauthToken?
                /// Returns response with indentations and line breaks.
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/settings/cse/identities/POST/query/prettyPrint`.
                public var prettyPrint: Components.Parameters.PrettyPrint?
                /// Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/settings/cse/identities/POST/query/quotaUser`.
                public var quotaUser: Components.Parameters.QuotaUser?
                /// Upload protocol for media (e.g. "raw", "multipart").
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/settings/cse/identities/POST/query/upload_protocol`.
                public var uploadProtocol: Components.Parameters.UploadProtocol?
                /// Legacy upload protocol for media (e.g. "media", "multipart").
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/settings/cse/identities/POST/query/uploadType`.
                public var uploadType: Components.Parameters.UploadType?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - _dollar__xgafv: V1 error format.
                ///   - accessToken: OAuth access token.
                ///   - alt: Data format for response.
                ///   - callback: JSONP
                ///   - fields: Selector specifying which fields to include in a partial response.
                ///   - key: API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
                ///   - oauthToken: OAuth 2.0 token for the current user.
                ///   - prettyPrint: Returns response with indentations and line breaks.
                ///   - quotaUser: Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
                ///   - uploadProtocol: Upload protocol for media (e.g. "raw", "multipart").
                ///   - uploadType: Legacy upload protocol for media (e.g. "media", "multipart").
                public init(
                    _dollar__xgafv: Components.Parameters.__period_xgafv? = nil,
                    accessToken: Components.Parameters.AccessToken? = nil,
                    alt: Components.Parameters.Alt? = nil,
                    callback: Components.Parameters.Callback? = nil,
                    fields: Components.Parameters.Fields? = nil,
                    key: Components.Parameters.Key? = nil,
                    oauthToken: Components.Parameters.OauthToken? = nil,
                    prettyPrint: Components.Parameters.PrettyPrint? = nil,
                    quotaUser: Components.Parameters.QuotaUser? = nil,
                    uploadProtocol: Components.Parameters.UploadProtocol? = nil,
                    uploadType: Components.Parameters.UploadType? = nil
                ) {
                    self._dollar__xgafv = _dollar__xgafv
                    self.accessToken = accessToken
                    self.alt = alt
                    self.callback = callback
                    self.fields = fields
                    self.key = key
                    self.oauthToken = oauthToken
                    self.prettyPrint = prettyPrint
                    self.quotaUser = quotaUser
                    self.uploadProtocol = uploadProtocol
                    self.uploadType = uploadType
                }
            }
            public var query: Operations.Gmail_users_settings_cse_identities_create.Input.Query
            /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/settings/cse/identities/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.Gmail_users_settings_cse_identities_create.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.Gmail_users_settings_cse_identities_create.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.Gmail_users_settings_cse_identities_create.Input.Headers
            /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/settings/cse/identities/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/settings/cse/identities/POST/requestBody/content/application\/json`.
                case json(Components.Schemas.CseIdentity)
            }
            public var body: Operations.Gmail_users_settings_cse_identities_create.Input.Body?
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - query:
            ///   - headers:
            ///   - body:
            public init(
                path: Operations.Gmail_users_settings_cse_identities_create.Input.Path,
                query: Operations.Gmail_users_settings_cse_identities_create.Input.Query = .init(),
                headers: Operations.Gmail_users_settings_cse_identities_create.Input.Headers = .init(),
                body: Operations.Gmail_users_settings_cse_identities_create.Input.Body? = nil
            ) {
                self.path = path
                self.query = query
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/settings/cse/identities/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/settings/cse/identities/POST/responses/200/content/application\/json`.
                    case json(Components.Schemas.CseIdentity)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.CseIdentity {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.Gmail_users_settings_cse_identities_create.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.Gmail_users_settings_cse_identities_create.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Successful response
            ///
            /// - Remark: Generated from `#/paths//gmail/v1/users/{userId}/settings/cse/identities/post(gmail.users.settings.cse.identities.create)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.Gmail_users_settings_cse_identities_create.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.Gmail_users_settings_cse_identities_create.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Retrieves a client-side encryption identity configuration.
    ///
    /// - Remark: HTTP `GET /gmail/v1/users/{userId}/settings/cse/identities/{cseEmailAddress}`.
    /// - Remark: Generated from `#/paths//gmail/v1/users/{userId}/settings/cse/identities/{cseEmailAddress}/get(gmail.users.settings.cse.identities.get)`.
    public enum Gmail_users_settings_cse_identities_get {
        public static let id: Swift.String = "gmail.users.settings.cse.identities.get"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/settings/cse/identities/{cseEmailAddress}/GET/path`.
            public struct Path: Sendable, Hashable {
                /// The requester's primary email address. To indicate the authenticated user, you can use the special value `me`.
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/settings/cse/identities/{cseEmailAddress}/GET/path/userId`.
                public var userId: Swift.String
                /// The primary email address associated with the client-side encryption identity configuration that's retrieved.
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/settings/cse/identities/{cseEmailAddress}/GET/path/cseEmailAddress`.
                public var cseEmailAddress: Swift.String
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - userId: The requester's primary email address. To indicate the authenticated user, you can use the special value `me`.
                ///   - cseEmailAddress: The primary email address associated with the client-side encryption identity configuration that's retrieved.
                public init(
                    userId: Swift.String,
                    cseEmailAddress: Swift.String
                ) {
                    self.userId = userId
                    self.cseEmailAddress = cseEmailAddress
                }
            }
            public var path: Operations.Gmail_users_settings_cse_identities_get.Input.Path
            /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/settings/cse/identities/{cseEmailAddress}/GET/query`.
            public struct Query: Sendable, Hashable {
                /// - Remark: Generated from `#/components/parameters/_.xgafv`.
                @frozen public enum __period_xgafv: String, Codable, Hashable, Sendable, CaseIterable {
                    case _1 = "1"
                    case _2 = "2"
                }
                /// V1 error format.
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/settings/cse/identities/{cseEmailAddress}/GET/query/$.xgafv`.
                public var _dollar__xgafv: Components.Parameters.__period_xgafv?
                /// OAuth access token.
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/settings/cse/identities/{cseEmailAddress}/GET/query/access_token`.
                public var accessToken: Components.Parameters.AccessToken?
                /// - Remark: Generated from `#/components/parameters/alt`.
                @frozen public enum Alt: String, Codable, Hashable, Sendable, CaseIterable {
                    case json = "json"
                    case media = "media"
                    case proto = "proto"
                }
                /// Data format for response.
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/settings/cse/identities/{cseEmailAddress}/GET/query/alt`.
                public var alt: Components.Parameters.Alt?
                /// JSONP
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/settings/cse/identities/{cseEmailAddress}/GET/query/callback`.
                public var callback: Components.Parameters.Callback?
                /// Selector specifying which fields to include in a partial response.
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/settings/cse/identities/{cseEmailAddress}/GET/query/fields`.
                public var fields: Components.Parameters.Fields?
                /// API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/settings/cse/identities/{cseEmailAddress}/GET/query/key`.
                public var key: Components.Parameters.Key?
                /// OAuth 2.0 token for the current user.
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/settings/cse/identities/{cseEmailAddress}/GET/query/oauth_token`.
                public var oauthToken: Components.Parameters.OauthToken?
                /// Returns response with indentations and line breaks.
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/settings/cse/identities/{cseEmailAddress}/GET/query/prettyPrint`.
                public var prettyPrint: Components.Parameters.PrettyPrint?
                /// Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/settings/cse/identities/{cseEmailAddress}/GET/query/quotaUser`.
                public var quotaUser: Components.Parameters.QuotaUser?
                /// Upload protocol for media (e.g. "raw", "multipart").
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/settings/cse/identities/{cseEmailAddress}/GET/query/upload_protocol`.
                public var uploadProtocol: Components.Parameters.UploadProtocol?
                /// Legacy upload protocol for media (e.g. "media", "multipart").
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/settings/cse/identities/{cseEmailAddress}/GET/query/uploadType`.
                public var uploadType: Components.Parameters.UploadType?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - _dollar__xgafv: V1 error format.
                ///   - accessToken: OAuth access token.
                ///   - alt: Data format for response.
                ///   - callback: JSONP
                ///   - fields: Selector specifying which fields to include in a partial response.
                ///   - key: API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
                ///   - oauthToken: OAuth 2.0 token for the current user.
                ///   - prettyPrint: Returns response with indentations and line breaks.
                ///   - quotaUser: Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
                ///   - uploadProtocol: Upload protocol for media (e.g. "raw", "multipart").
                ///   - uploadType: Legacy upload protocol for media (e.g. "media", "multipart").
                public init(
                    _dollar__xgafv: Components.Parameters.__period_xgafv? = nil,
                    accessToken: Components.Parameters.AccessToken? = nil,
                    alt: Components.Parameters.Alt? = nil,
                    callback: Components.Parameters.Callback? = nil,
                    fields: Components.Parameters.Fields? = nil,
                    key: Components.Parameters.Key? = nil,
                    oauthToken: Components.Parameters.OauthToken? = nil,
                    prettyPrint: Components.Parameters.PrettyPrint? = nil,
                    quotaUser: Components.Parameters.QuotaUser? = nil,
                    uploadProtocol: Components.Parameters.UploadProtocol? = nil,
                    uploadType: Components.Parameters.UploadType? = nil
                ) {
                    self._dollar__xgafv = _dollar__xgafv
                    self.accessToken = accessToken
                    self.alt = alt
                    self.callback = callback
                    self.fields = fields
                    self.key = key
                    self.oauthToken = oauthToken
                    self.prettyPrint = prettyPrint
                    self.quotaUser = quotaUser
                    self.uploadProtocol = uploadProtocol
                    self.uploadType = uploadType
                }
            }
            public var query: Operations.Gmail_users_settings_cse_identities_get.Input.Query
            /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/settings/cse/identities/{cseEmailAddress}/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.Gmail_users_settings_cse_identities_get.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.Gmail_users_settings_cse_identities_get.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.Gmail_users_settings_cse_identities_get.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - query:
            ///   - headers:
            public init(
                path: Operations.Gmail_users_settings_cse_identities_get.Input.Path,
                query: Operations.Gmail_users_settings_cse_identities_get.Input.Query = .init(),
                headers: Operations.Gmail_users_settings_cse_identities_get.Input.Headers = .init()
            ) {
                self.path = path
                self.query = query
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/settings/cse/identities/{cseEmailAddress}/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/settings/cse/identities/{cseEmailAddress}/GET/responses/200/content/application\/json`.
                    case json(Components.Schemas.CseIdentity)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.CseIdentity {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.Gmail_users_settings_cse_identities_get.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.Gmail_users_settings_cse_identities_get.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Successful response
            ///
            /// - Remark: Generated from `#/paths//gmail/v1/users/{userId}/settings/cse/identities/{cseEmailAddress}/get(gmail.users.settings.cse.identities.get)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.Gmail_users_settings_cse_identities_get.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.Gmail_users_settings_cse_identities_get.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Deletes a client-side encryption identity. The authenticated user can no longer use the identity to send encrypted messages. You cannot restore the identity after you delete it. Instead, use the CreateCseIdentity method to create another identity with the same configuration.
    ///
    /// - Remark: HTTP `DELETE /gmail/v1/users/{userId}/settings/cse/identities/{cseEmailAddress}`.
    /// - Remark: Generated from `#/paths//gmail/v1/users/{userId}/settings/cse/identities/{cseEmailAddress}/delete(gmail.users.settings.cse.identities.delete)`.
    public enum Gmail_users_settings_cse_identities_delete {
        public static let id: Swift.String = "gmail.users.settings.cse.identities.delete"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/settings/cse/identities/{cseEmailAddress}/DELETE/path`.
            public struct Path: Sendable, Hashable {
                /// The requester's primary email address. To indicate the authenticated user, you can use the special value `me`.
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/settings/cse/identities/{cseEmailAddress}/DELETE/path/userId`.
                public var userId: Swift.String
                /// The primary email address associated with the client-side encryption identity configuration that's removed.
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/settings/cse/identities/{cseEmailAddress}/DELETE/path/cseEmailAddress`.
                public var cseEmailAddress: Swift.String
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - userId: The requester's primary email address. To indicate the authenticated user, you can use the special value `me`.
                ///   - cseEmailAddress: The primary email address associated with the client-side encryption identity configuration that's removed.
                public init(
                    userId: Swift.String,
                    cseEmailAddress: Swift.String
                ) {
                    self.userId = userId
                    self.cseEmailAddress = cseEmailAddress
                }
            }
            public var path: Operations.Gmail_users_settings_cse_identities_delete.Input.Path
            /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/settings/cse/identities/{cseEmailAddress}/DELETE/query`.
            public struct Query: Sendable, Hashable {
                /// - Remark: Generated from `#/components/parameters/_.xgafv`.
                @frozen public enum __period_xgafv: String, Codable, Hashable, Sendable, CaseIterable {
                    case _1 = "1"
                    case _2 = "2"
                }
                /// V1 error format.
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/settings/cse/identities/{cseEmailAddress}/DELETE/query/$.xgafv`.
                public var _dollar__xgafv: Components.Parameters.__period_xgafv?
                /// OAuth access token.
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/settings/cse/identities/{cseEmailAddress}/DELETE/query/access_token`.
                public var accessToken: Components.Parameters.AccessToken?
                /// - Remark: Generated from `#/components/parameters/alt`.
                @frozen public enum Alt: String, Codable, Hashable, Sendable, CaseIterable {
                    case json = "json"
                    case media = "media"
                    case proto = "proto"
                }
                /// Data format for response.
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/settings/cse/identities/{cseEmailAddress}/DELETE/query/alt`.
                public var alt: Components.Parameters.Alt?
                /// JSONP
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/settings/cse/identities/{cseEmailAddress}/DELETE/query/callback`.
                public var callback: Components.Parameters.Callback?
                /// Selector specifying which fields to include in a partial response.
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/settings/cse/identities/{cseEmailAddress}/DELETE/query/fields`.
                public var fields: Components.Parameters.Fields?
                /// API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/settings/cse/identities/{cseEmailAddress}/DELETE/query/key`.
                public var key: Components.Parameters.Key?
                /// OAuth 2.0 token for the current user.
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/settings/cse/identities/{cseEmailAddress}/DELETE/query/oauth_token`.
                public var oauthToken: Components.Parameters.OauthToken?
                /// Returns response with indentations and line breaks.
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/settings/cse/identities/{cseEmailAddress}/DELETE/query/prettyPrint`.
                public var prettyPrint: Components.Parameters.PrettyPrint?
                /// Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/settings/cse/identities/{cseEmailAddress}/DELETE/query/quotaUser`.
                public var quotaUser: Components.Parameters.QuotaUser?
                /// Upload protocol for media (e.g. "raw", "multipart").
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/settings/cse/identities/{cseEmailAddress}/DELETE/query/upload_protocol`.
                public var uploadProtocol: Components.Parameters.UploadProtocol?
                /// Legacy upload protocol for media (e.g. "media", "multipart").
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/settings/cse/identities/{cseEmailAddress}/DELETE/query/uploadType`.
                public var uploadType: Components.Parameters.UploadType?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - _dollar__xgafv: V1 error format.
                ///   - accessToken: OAuth access token.
                ///   - alt: Data format for response.
                ///   - callback: JSONP
                ///   - fields: Selector specifying which fields to include in a partial response.
                ///   - key: API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
                ///   - oauthToken: OAuth 2.0 token for the current user.
                ///   - prettyPrint: Returns response with indentations and line breaks.
                ///   - quotaUser: Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
                ///   - uploadProtocol: Upload protocol for media (e.g. "raw", "multipart").
                ///   - uploadType: Legacy upload protocol for media (e.g. "media", "multipart").
                public init(
                    _dollar__xgafv: Components.Parameters.__period_xgafv? = nil,
                    accessToken: Components.Parameters.AccessToken? = nil,
                    alt: Components.Parameters.Alt? = nil,
                    callback: Components.Parameters.Callback? = nil,
                    fields: Components.Parameters.Fields? = nil,
                    key: Components.Parameters.Key? = nil,
                    oauthToken: Components.Parameters.OauthToken? = nil,
                    prettyPrint: Components.Parameters.PrettyPrint? = nil,
                    quotaUser: Components.Parameters.QuotaUser? = nil,
                    uploadProtocol: Components.Parameters.UploadProtocol? = nil,
                    uploadType: Components.Parameters.UploadType? = nil
                ) {
                    self._dollar__xgafv = _dollar__xgafv
                    self.accessToken = accessToken
                    self.alt = alt
                    self.callback = callback
                    self.fields = fields
                    self.key = key
                    self.oauthToken = oauthToken
                    self.prettyPrint = prettyPrint
                    self.quotaUser = quotaUser
                    self.uploadProtocol = uploadProtocol
                    self.uploadType = uploadType
                }
            }
            public var query: Operations.Gmail_users_settings_cse_identities_delete.Input.Query
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - query:
            public init(
                path: Operations.Gmail_users_settings_cse_identities_delete.Input.Path,
                query: Operations.Gmail_users_settings_cse_identities_delete.Input.Query = .init()
            ) {
                self.path = path
                self.query = query
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// Creates a new `Ok`.
                public init() {}
            }
            /// Successful response
            ///
            /// - Remark: Generated from `#/paths//gmail/v1/users/{userId}/settings/cse/identities/{cseEmailAddress}/delete(gmail.users.settings.cse.identities.delete)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.Gmail_users_settings_cse_identities_delete.Output.Ok)
            /// Successful response
            ///
            /// - Remark: Generated from `#/paths//gmail/v1/users/{userId}/settings/cse/identities/{cseEmailAddress}/delete(gmail.users.settings.cse.identities.delete)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            public static var ok: Self {
                .ok(.init())
            }
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.Gmail_users_settings_cse_identities_delete.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
    }
    /// Associates a different key pair with an existing client-side encryption identity. The updated key pair must validate against Google's [S/MIME certificate profiles](https://support.google.com/a/answer/7300887).
    ///
    /// - Remark: HTTP `PATCH /gmail/v1/users/{userId}/settings/cse/identities/{emailAddress}`.
    /// - Remark: Generated from `#/paths//gmail/v1/users/{userId}/settings/cse/identities/{emailAddress}/patch(gmail.users.settings.cse.identities.patch)`.
    public enum Gmail_users_settings_cse_identities_patch {
        public static let id: Swift.String = "gmail.users.settings.cse.identities.patch"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/settings/cse/identities/{emailAddress}/PATCH/path`.
            public struct Path: Sendable, Hashable {
                /// The requester's primary email address. To indicate the authenticated user, you can use the special value `me`.
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/settings/cse/identities/{emailAddress}/PATCH/path/userId`.
                public var userId: Swift.String
                /// The email address of the client-side encryption identity to update.
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/settings/cse/identities/{emailAddress}/PATCH/path/emailAddress`.
                public var emailAddress: Swift.String
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - userId: The requester's primary email address. To indicate the authenticated user, you can use the special value `me`.
                ///   - emailAddress: The email address of the client-side encryption identity to update.
                public init(
                    userId: Swift.String,
                    emailAddress: Swift.String
                ) {
                    self.userId = userId
                    self.emailAddress = emailAddress
                }
            }
            public var path: Operations.Gmail_users_settings_cse_identities_patch.Input.Path
            /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/settings/cse/identities/{emailAddress}/PATCH/query`.
            public struct Query: Sendable, Hashable {
                /// - Remark: Generated from `#/components/parameters/_.xgafv`.
                @frozen public enum __period_xgafv: String, Codable, Hashable, Sendable, CaseIterable {
                    case _1 = "1"
                    case _2 = "2"
                }
                /// V1 error format.
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/settings/cse/identities/{emailAddress}/PATCH/query/$.xgafv`.
                public var _dollar__xgafv: Components.Parameters.__period_xgafv?
                /// OAuth access token.
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/settings/cse/identities/{emailAddress}/PATCH/query/access_token`.
                public var accessToken: Components.Parameters.AccessToken?
                /// - Remark: Generated from `#/components/parameters/alt`.
                @frozen public enum Alt: String, Codable, Hashable, Sendable, CaseIterable {
                    case json = "json"
                    case media = "media"
                    case proto = "proto"
                }
                /// Data format for response.
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/settings/cse/identities/{emailAddress}/PATCH/query/alt`.
                public var alt: Components.Parameters.Alt?
                /// JSONP
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/settings/cse/identities/{emailAddress}/PATCH/query/callback`.
                public var callback: Components.Parameters.Callback?
                /// Selector specifying which fields to include in a partial response.
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/settings/cse/identities/{emailAddress}/PATCH/query/fields`.
                public var fields: Components.Parameters.Fields?
                /// API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/settings/cse/identities/{emailAddress}/PATCH/query/key`.
                public var key: Components.Parameters.Key?
                /// OAuth 2.0 token for the current user.
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/settings/cse/identities/{emailAddress}/PATCH/query/oauth_token`.
                public var oauthToken: Components.Parameters.OauthToken?
                /// Returns response with indentations and line breaks.
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/settings/cse/identities/{emailAddress}/PATCH/query/prettyPrint`.
                public var prettyPrint: Components.Parameters.PrettyPrint?
                /// Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/settings/cse/identities/{emailAddress}/PATCH/query/quotaUser`.
                public var quotaUser: Components.Parameters.QuotaUser?
                /// Upload protocol for media (e.g. "raw", "multipart").
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/settings/cse/identities/{emailAddress}/PATCH/query/upload_protocol`.
                public var uploadProtocol: Components.Parameters.UploadProtocol?
                /// Legacy upload protocol for media (e.g. "media", "multipart").
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/settings/cse/identities/{emailAddress}/PATCH/query/uploadType`.
                public var uploadType: Components.Parameters.UploadType?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - _dollar__xgafv: V1 error format.
                ///   - accessToken: OAuth access token.
                ///   - alt: Data format for response.
                ///   - callback: JSONP
                ///   - fields: Selector specifying which fields to include in a partial response.
                ///   - key: API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
                ///   - oauthToken: OAuth 2.0 token for the current user.
                ///   - prettyPrint: Returns response with indentations and line breaks.
                ///   - quotaUser: Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
                ///   - uploadProtocol: Upload protocol for media (e.g. "raw", "multipart").
                ///   - uploadType: Legacy upload protocol for media (e.g. "media", "multipart").
                public init(
                    _dollar__xgafv: Components.Parameters.__period_xgafv? = nil,
                    accessToken: Components.Parameters.AccessToken? = nil,
                    alt: Components.Parameters.Alt? = nil,
                    callback: Components.Parameters.Callback? = nil,
                    fields: Components.Parameters.Fields? = nil,
                    key: Components.Parameters.Key? = nil,
                    oauthToken: Components.Parameters.OauthToken? = nil,
                    prettyPrint: Components.Parameters.PrettyPrint? = nil,
                    quotaUser: Components.Parameters.QuotaUser? = nil,
                    uploadProtocol: Components.Parameters.UploadProtocol? = nil,
                    uploadType: Components.Parameters.UploadType? = nil
                ) {
                    self._dollar__xgafv = _dollar__xgafv
                    self.accessToken = accessToken
                    self.alt = alt
                    self.callback = callback
                    self.fields = fields
                    self.key = key
                    self.oauthToken = oauthToken
                    self.prettyPrint = prettyPrint
                    self.quotaUser = quotaUser
                    self.uploadProtocol = uploadProtocol
                    self.uploadType = uploadType
                }
            }
            public var query: Operations.Gmail_users_settings_cse_identities_patch.Input.Query
            /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/settings/cse/identities/{emailAddress}/PATCH/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.Gmail_users_settings_cse_identities_patch.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.Gmail_users_settings_cse_identities_patch.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.Gmail_users_settings_cse_identities_patch.Input.Headers
            /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/settings/cse/identities/{emailAddress}/PATCH/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/settings/cse/identities/{emailAddress}/PATCH/requestBody/content/application\/json`.
                case json(Components.Schemas.CseIdentity)
            }
            public var body: Operations.Gmail_users_settings_cse_identities_patch.Input.Body?
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - query:
            ///   - headers:
            ///   - body:
            public init(
                path: Operations.Gmail_users_settings_cse_identities_patch.Input.Path,
                query: Operations.Gmail_users_settings_cse_identities_patch.Input.Query = .init(),
                headers: Operations.Gmail_users_settings_cse_identities_patch.Input.Headers = .init(),
                body: Operations.Gmail_users_settings_cse_identities_patch.Input.Body? = nil
            ) {
                self.path = path
                self.query = query
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/settings/cse/identities/{emailAddress}/PATCH/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/settings/cse/identities/{emailAddress}/PATCH/responses/200/content/application\/json`.
                    case json(Components.Schemas.CseIdentity)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.CseIdentity {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.Gmail_users_settings_cse_identities_patch.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.Gmail_users_settings_cse_identities_patch.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Successful response
            ///
            /// - Remark: Generated from `#/paths//gmail/v1/users/{userId}/settings/cse/identities/{emailAddress}/patch(gmail.users.settings.cse.identities.patch)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.Gmail_users_settings_cse_identities_patch.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.Gmail_users_settings_cse_identities_patch.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Lists client-side encryption key pairs for an authenticated user.
    ///
    /// - Remark: HTTP `GET /gmail/v1/users/{userId}/settings/cse/keypairs`.
    /// - Remark: Generated from `#/paths//gmail/v1/users/{userId}/settings/cse/keypairs/get(gmail.users.settings.cse.keypairs.list)`.
    public enum Gmail_users_settings_cse_keypairs_list {
        public static let id: Swift.String = "gmail.users.settings.cse.keypairs.list"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/settings/cse/keypairs/GET/path`.
            public struct Path: Sendable, Hashable {
                /// The requester's primary email address. To indicate the authenticated user, you can use the special value `me`.
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/settings/cse/keypairs/GET/path/userId`.
                public var userId: Swift.String
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - userId: The requester's primary email address. To indicate the authenticated user, you can use the special value `me`.
                public init(userId: Swift.String) {
                    self.userId = userId
                }
            }
            public var path: Operations.Gmail_users_settings_cse_keypairs_list.Input.Path
            /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/settings/cse/keypairs/GET/query`.
            public struct Query: Sendable, Hashable {
                /// - Remark: Generated from `#/components/parameters/_.xgafv`.
                @frozen public enum __period_xgafv: String, Codable, Hashable, Sendable, CaseIterable {
                    case _1 = "1"
                    case _2 = "2"
                }
                /// V1 error format.
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/settings/cse/keypairs/GET/query/$.xgafv`.
                public var _dollar__xgafv: Components.Parameters.__period_xgafv?
                /// OAuth access token.
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/settings/cse/keypairs/GET/query/access_token`.
                public var accessToken: Components.Parameters.AccessToken?
                /// - Remark: Generated from `#/components/parameters/alt`.
                @frozen public enum Alt: String, Codable, Hashable, Sendable, CaseIterable {
                    case json = "json"
                    case media = "media"
                    case proto = "proto"
                }
                /// Data format for response.
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/settings/cse/keypairs/GET/query/alt`.
                public var alt: Components.Parameters.Alt?
                /// JSONP
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/settings/cse/keypairs/GET/query/callback`.
                public var callback: Components.Parameters.Callback?
                /// Selector specifying which fields to include in a partial response.
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/settings/cse/keypairs/GET/query/fields`.
                public var fields: Components.Parameters.Fields?
                /// API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/settings/cse/keypairs/GET/query/key`.
                public var key: Components.Parameters.Key?
                /// OAuth 2.0 token for the current user.
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/settings/cse/keypairs/GET/query/oauth_token`.
                public var oauthToken: Components.Parameters.OauthToken?
                /// Returns response with indentations and line breaks.
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/settings/cse/keypairs/GET/query/prettyPrint`.
                public var prettyPrint: Components.Parameters.PrettyPrint?
                /// Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/settings/cse/keypairs/GET/query/quotaUser`.
                public var quotaUser: Components.Parameters.QuotaUser?
                /// Upload protocol for media (e.g. "raw", "multipart").
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/settings/cse/keypairs/GET/query/upload_protocol`.
                public var uploadProtocol: Components.Parameters.UploadProtocol?
                /// Legacy upload protocol for media (e.g. "media", "multipart").
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/settings/cse/keypairs/GET/query/uploadType`.
                public var uploadType: Components.Parameters.UploadType?
                /// The number of key pairs to return. If not provided, the page size will default to 20 entries.
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/settings/cse/keypairs/GET/query/pageSize`.
                public var pageSize: Swift.Int?
                /// Pagination token indicating which page of key pairs to return. If the token is not supplied, then the API will return the first page of results.
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/settings/cse/keypairs/GET/query/pageToken`.
                public var pageToken: Swift.String?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - _dollar__xgafv: V1 error format.
                ///   - accessToken: OAuth access token.
                ///   - alt: Data format for response.
                ///   - callback: JSONP
                ///   - fields: Selector specifying which fields to include in a partial response.
                ///   - key: API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
                ///   - oauthToken: OAuth 2.0 token for the current user.
                ///   - prettyPrint: Returns response with indentations and line breaks.
                ///   - quotaUser: Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
                ///   - uploadProtocol: Upload protocol for media (e.g. "raw", "multipart").
                ///   - uploadType: Legacy upload protocol for media (e.g. "media", "multipart").
                ///   - pageSize: The number of key pairs to return. If not provided, the page size will default to 20 entries.
                ///   - pageToken: Pagination token indicating which page of key pairs to return. If the token is not supplied, then the API will return the first page of results.
                public init(
                    _dollar__xgafv: Components.Parameters.__period_xgafv? = nil,
                    accessToken: Components.Parameters.AccessToken? = nil,
                    alt: Components.Parameters.Alt? = nil,
                    callback: Components.Parameters.Callback? = nil,
                    fields: Components.Parameters.Fields? = nil,
                    key: Components.Parameters.Key? = nil,
                    oauthToken: Components.Parameters.OauthToken? = nil,
                    prettyPrint: Components.Parameters.PrettyPrint? = nil,
                    quotaUser: Components.Parameters.QuotaUser? = nil,
                    uploadProtocol: Components.Parameters.UploadProtocol? = nil,
                    uploadType: Components.Parameters.UploadType? = nil,
                    pageSize: Swift.Int? = nil,
                    pageToken: Swift.String? = nil
                ) {
                    self._dollar__xgafv = _dollar__xgafv
                    self.accessToken = accessToken
                    self.alt = alt
                    self.callback = callback
                    self.fields = fields
                    self.key = key
                    self.oauthToken = oauthToken
                    self.prettyPrint = prettyPrint
                    self.quotaUser = quotaUser
                    self.uploadProtocol = uploadProtocol
                    self.uploadType = uploadType
                    self.pageSize = pageSize
                    self.pageToken = pageToken
                }
            }
            public var query: Operations.Gmail_users_settings_cse_keypairs_list.Input.Query
            /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/settings/cse/keypairs/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.Gmail_users_settings_cse_keypairs_list.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.Gmail_users_settings_cse_keypairs_list.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.Gmail_users_settings_cse_keypairs_list.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - query:
            ///   - headers:
            public init(
                path: Operations.Gmail_users_settings_cse_keypairs_list.Input.Path,
                query: Operations.Gmail_users_settings_cse_keypairs_list.Input.Query = .init(),
                headers: Operations.Gmail_users_settings_cse_keypairs_list.Input.Headers = .init()
            ) {
                self.path = path
                self.query = query
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/settings/cse/keypairs/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/settings/cse/keypairs/GET/responses/200/content/application\/json`.
                    case json(Components.Schemas.ListCseKeyPairsResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.ListCseKeyPairsResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.Gmail_users_settings_cse_keypairs_list.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.Gmail_users_settings_cse_keypairs_list.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Successful response
            ///
            /// - Remark: Generated from `#/paths//gmail/v1/users/{userId}/settings/cse/keypairs/get(gmail.users.settings.cse.keypairs.list)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.Gmail_users_settings_cse_keypairs_list.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.Gmail_users_settings_cse_keypairs_list.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Creates and uploads a client-side encryption S/MIME public key certificate chain and private key metadata for the authenticated user.
    ///
    /// - Remark: HTTP `POST /gmail/v1/users/{userId}/settings/cse/keypairs`.
    /// - Remark: Generated from `#/paths//gmail/v1/users/{userId}/settings/cse/keypairs/post(gmail.users.settings.cse.keypairs.create)`.
    public enum Gmail_users_settings_cse_keypairs_create {
        public static let id: Swift.String = "gmail.users.settings.cse.keypairs.create"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/settings/cse/keypairs/POST/path`.
            public struct Path: Sendable, Hashable {
                /// The requester's primary email address. To indicate the authenticated user, you can use the special value `me`.
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/settings/cse/keypairs/POST/path/userId`.
                public var userId: Swift.String
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - userId: The requester's primary email address. To indicate the authenticated user, you can use the special value `me`.
                public init(userId: Swift.String) {
                    self.userId = userId
                }
            }
            public var path: Operations.Gmail_users_settings_cse_keypairs_create.Input.Path
            /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/settings/cse/keypairs/POST/query`.
            public struct Query: Sendable, Hashable {
                /// - Remark: Generated from `#/components/parameters/_.xgafv`.
                @frozen public enum __period_xgafv: String, Codable, Hashable, Sendable, CaseIterable {
                    case _1 = "1"
                    case _2 = "2"
                }
                /// V1 error format.
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/settings/cse/keypairs/POST/query/$.xgafv`.
                public var _dollar__xgafv: Components.Parameters.__period_xgafv?
                /// OAuth access token.
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/settings/cse/keypairs/POST/query/access_token`.
                public var accessToken: Components.Parameters.AccessToken?
                /// - Remark: Generated from `#/components/parameters/alt`.
                @frozen public enum Alt: String, Codable, Hashable, Sendable, CaseIterable {
                    case json = "json"
                    case media = "media"
                    case proto = "proto"
                }
                /// Data format for response.
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/settings/cse/keypairs/POST/query/alt`.
                public var alt: Components.Parameters.Alt?
                /// JSONP
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/settings/cse/keypairs/POST/query/callback`.
                public var callback: Components.Parameters.Callback?
                /// Selector specifying which fields to include in a partial response.
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/settings/cse/keypairs/POST/query/fields`.
                public var fields: Components.Parameters.Fields?
                /// API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/settings/cse/keypairs/POST/query/key`.
                public var key: Components.Parameters.Key?
                /// OAuth 2.0 token for the current user.
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/settings/cse/keypairs/POST/query/oauth_token`.
                public var oauthToken: Components.Parameters.OauthToken?
                /// Returns response with indentations and line breaks.
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/settings/cse/keypairs/POST/query/prettyPrint`.
                public var prettyPrint: Components.Parameters.PrettyPrint?
                /// Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/settings/cse/keypairs/POST/query/quotaUser`.
                public var quotaUser: Components.Parameters.QuotaUser?
                /// Upload protocol for media (e.g. "raw", "multipart").
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/settings/cse/keypairs/POST/query/upload_protocol`.
                public var uploadProtocol: Components.Parameters.UploadProtocol?
                /// Legacy upload protocol for media (e.g. "media", "multipart").
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/settings/cse/keypairs/POST/query/uploadType`.
                public var uploadType: Components.Parameters.UploadType?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - _dollar__xgafv: V1 error format.
                ///   - accessToken: OAuth access token.
                ///   - alt: Data format for response.
                ///   - callback: JSONP
                ///   - fields: Selector specifying which fields to include in a partial response.
                ///   - key: API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
                ///   - oauthToken: OAuth 2.0 token for the current user.
                ///   - prettyPrint: Returns response with indentations and line breaks.
                ///   - quotaUser: Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
                ///   - uploadProtocol: Upload protocol for media (e.g. "raw", "multipart").
                ///   - uploadType: Legacy upload protocol for media (e.g. "media", "multipart").
                public init(
                    _dollar__xgafv: Components.Parameters.__period_xgafv? = nil,
                    accessToken: Components.Parameters.AccessToken? = nil,
                    alt: Components.Parameters.Alt? = nil,
                    callback: Components.Parameters.Callback? = nil,
                    fields: Components.Parameters.Fields? = nil,
                    key: Components.Parameters.Key? = nil,
                    oauthToken: Components.Parameters.OauthToken? = nil,
                    prettyPrint: Components.Parameters.PrettyPrint? = nil,
                    quotaUser: Components.Parameters.QuotaUser? = nil,
                    uploadProtocol: Components.Parameters.UploadProtocol? = nil,
                    uploadType: Components.Parameters.UploadType? = nil
                ) {
                    self._dollar__xgafv = _dollar__xgafv
                    self.accessToken = accessToken
                    self.alt = alt
                    self.callback = callback
                    self.fields = fields
                    self.key = key
                    self.oauthToken = oauthToken
                    self.prettyPrint = prettyPrint
                    self.quotaUser = quotaUser
                    self.uploadProtocol = uploadProtocol
                    self.uploadType = uploadType
                }
            }
            public var query: Operations.Gmail_users_settings_cse_keypairs_create.Input.Query
            /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/settings/cse/keypairs/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.Gmail_users_settings_cse_keypairs_create.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.Gmail_users_settings_cse_keypairs_create.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.Gmail_users_settings_cse_keypairs_create.Input.Headers
            /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/settings/cse/keypairs/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/settings/cse/keypairs/POST/requestBody/content/application\/json`.
                case json(Components.Schemas.CseKeyPair)
            }
            public var body: Operations.Gmail_users_settings_cse_keypairs_create.Input.Body?
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - query:
            ///   - headers:
            ///   - body:
            public init(
                path: Operations.Gmail_users_settings_cse_keypairs_create.Input.Path,
                query: Operations.Gmail_users_settings_cse_keypairs_create.Input.Query = .init(),
                headers: Operations.Gmail_users_settings_cse_keypairs_create.Input.Headers = .init(),
                body: Operations.Gmail_users_settings_cse_keypairs_create.Input.Body? = nil
            ) {
                self.path = path
                self.query = query
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/settings/cse/keypairs/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/settings/cse/keypairs/POST/responses/200/content/application\/json`.
                    case json(Components.Schemas.CseKeyPair)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.CseKeyPair {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.Gmail_users_settings_cse_keypairs_create.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.Gmail_users_settings_cse_keypairs_create.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Successful response
            ///
            /// - Remark: Generated from `#/paths//gmail/v1/users/{userId}/settings/cse/keypairs/post(gmail.users.settings.cse.keypairs.create)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.Gmail_users_settings_cse_keypairs_create.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.Gmail_users_settings_cse_keypairs_create.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Retrieves an existing client-side encryption key pair.
    ///
    /// - Remark: HTTP `GET /gmail/v1/users/{userId}/settings/cse/keypairs/{keyPairId}`.
    /// - Remark: Generated from `#/paths//gmail/v1/users/{userId}/settings/cse/keypairs/{keyPairId}/get(gmail.users.settings.cse.keypairs.get)`.
    public enum Gmail_users_settings_cse_keypairs_get {
        public static let id: Swift.String = "gmail.users.settings.cse.keypairs.get"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/settings/cse/keypairs/{keyPairId}/GET/path`.
            public struct Path: Sendable, Hashable {
                /// The requester's primary email address. To indicate the authenticated user, you can use the special value `me`.
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/settings/cse/keypairs/{keyPairId}/GET/path/userId`.
                public var userId: Swift.String
                /// The identifier of the key pair to retrieve.
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/settings/cse/keypairs/{keyPairId}/GET/path/keyPairId`.
                public var keyPairId: Swift.String
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - userId: The requester's primary email address. To indicate the authenticated user, you can use the special value `me`.
                ///   - keyPairId: The identifier of the key pair to retrieve.
                public init(
                    userId: Swift.String,
                    keyPairId: Swift.String
                ) {
                    self.userId = userId
                    self.keyPairId = keyPairId
                }
            }
            public var path: Operations.Gmail_users_settings_cse_keypairs_get.Input.Path
            /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/settings/cse/keypairs/{keyPairId}/GET/query`.
            public struct Query: Sendable, Hashable {
                /// - Remark: Generated from `#/components/parameters/_.xgafv`.
                @frozen public enum __period_xgafv: String, Codable, Hashable, Sendable, CaseIterable {
                    case _1 = "1"
                    case _2 = "2"
                }
                /// V1 error format.
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/settings/cse/keypairs/{keyPairId}/GET/query/$.xgafv`.
                public var _dollar__xgafv: Components.Parameters.__period_xgafv?
                /// OAuth access token.
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/settings/cse/keypairs/{keyPairId}/GET/query/access_token`.
                public var accessToken: Components.Parameters.AccessToken?
                /// - Remark: Generated from `#/components/parameters/alt`.
                @frozen public enum Alt: String, Codable, Hashable, Sendable, CaseIterable {
                    case json = "json"
                    case media = "media"
                    case proto = "proto"
                }
                /// Data format for response.
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/settings/cse/keypairs/{keyPairId}/GET/query/alt`.
                public var alt: Components.Parameters.Alt?
                /// JSONP
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/settings/cse/keypairs/{keyPairId}/GET/query/callback`.
                public var callback: Components.Parameters.Callback?
                /// Selector specifying which fields to include in a partial response.
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/settings/cse/keypairs/{keyPairId}/GET/query/fields`.
                public var fields: Components.Parameters.Fields?
                /// API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/settings/cse/keypairs/{keyPairId}/GET/query/key`.
                public var key: Components.Parameters.Key?
                /// OAuth 2.0 token for the current user.
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/settings/cse/keypairs/{keyPairId}/GET/query/oauth_token`.
                public var oauthToken: Components.Parameters.OauthToken?
                /// Returns response with indentations and line breaks.
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/settings/cse/keypairs/{keyPairId}/GET/query/prettyPrint`.
                public var prettyPrint: Components.Parameters.PrettyPrint?
                /// Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/settings/cse/keypairs/{keyPairId}/GET/query/quotaUser`.
                public var quotaUser: Components.Parameters.QuotaUser?
                /// Upload protocol for media (e.g. "raw", "multipart").
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/settings/cse/keypairs/{keyPairId}/GET/query/upload_protocol`.
                public var uploadProtocol: Components.Parameters.UploadProtocol?
                /// Legacy upload protocol for media (e.g. "media", "multipart").
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/settings/cse/keypairs/{keyPairId}/GET/query/uploadType`.
                public var uploadType: Components.Parameters.UploadType?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - _dollar__xgafv: V1 error format.
                ///   - accessToken: OAuth access token.
                ///   - alt: Data format for response.
                ///   - callback: JSONP
                ///   - fields: Selector specifying which fields to include in a partial response.
                ///   - key: API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
                ///   - oauthToken: OAuth 2.0 token for the current user.
                ///   - prettyPrint: Returns response with indentations and line breaks.
                ///   - quotaUser: Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
                ///   - uploadProtocol: Upload protocol for media (e.g. "raw", "multipart").
                ///   - uploadType: Legacy upload protocol for media (e.g. "media", "multipart").
                public init(
                    _dollar__xgafv: Components.Parameters.__period_xgafv? = nil,
                    accessToken: Components.Parameters.AccessToken? = nil,
                    alt: Components.Parameters.Alt? = nil,
                    callback: Components.Parameters.Callback? = nil,
                    fields: Components.Parameters.Fields? = nil,
                    key: Components.Parameters.Key? = nil,
                    oauthToken: Components.Parameters.OauthToken? = nil,
                    prettyPrint: Components.Parameters.PrettyPrint? = nil,
                    quotaUser: Components.Parameters.QuotaUser? = nil,
                    uploadProtocol: Components.Parameters.UploadProtocol? = nil,
                    uploadType: Components.Parameters.UploadType? = nil
                ) {
                    self._dollar__xgafv = _dollar__xgafv
                    self.accessToken = accessToken
                    self.alt = alt
                    self.callback = callback
                    self.fields = fields
                    self.key = key
                    self.oauthToken = oauthToken
                    self.prettyPrint = prettyPrint
                    self.quotaUser = quotaUser
                    self.uploadProtocol = uploadProtocol
                    self.uploadType = uploadType
                }
            }
            public var query: Operations.Gmail_users_settings_cse_keypairs_get.Input.Query
            /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/settings/cse/keypairs/{keyPairId}/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.Gmail_users_settings_cse_keypairs_get.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.Gmail_users_settings_cse_keypairs_get.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.Gmail_users_settings_cse_keypairs_get.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - query:
            ///   - headers:
            public init(
                path: Operations.Gmail_users_settings_cse_keypairs_get.Input.Path,
                query: Operations.Gmail_users_settings_cse_keypairs_get.Input.Query = .init(),
                headers: Operations.Gmail_users_settings_cse_keypairs_get.Input.Headers = .init()
            ) {
                self.path = path
                self.query = query
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/settings/cse/keypairs/{keyPairId}/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/settings/cse/keypairs/{keyPairId}/GET/responses/200/content/application\/json`.
                    case json(Components.Schemas.CseKeyPair)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.CseKeyPair {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.Gmail_users_settings_cse_keypairs_get.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.Gmail_users_settings_cse_keypairs_get.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Successful response
            ///
            /// - Remark: Generated from `#/paths//gmail/v1/users/{userId}/settings/cse/keypairs/{keyPairId}/get(gmail.users.settings.cse.keypairs.get)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.Gmail_users_settings_cse_keypairs_get.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.Gmail_users_settings_cse_keypairs_get.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Turns off a client-side encryption key pair. The authenticated user can no longer use the key pair to decrypt incoming CSE message texts or sign outgoing CSE mail. To regain access, use the EnableCseKeyPair to turn on the key pair. After 30 days, you can permanently delete the key pair by using the ObliterateCseKeyPair method.
    ///
    /// - Remark: HTTP `POST /gmail/v1/users/{userId}/settings/cse/keypairs/{keyPairId}:disable`.
    /// - Remark: Generated from `#/paths//gmail/v1/users/{userId}/settings/cse/keypairs/{keyPairId}:disable/post(gmail.users.settings.cse.keypairs.disable)`.
    public enum Gmail_users_settings_cse_keypairs_disable {
        public static let id: Swift.String = "gmail.users.settings.cse.keypairs.disable"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/settings/cse/keypairs/{keyPairId}:disable/POST/path`.
            public struct Path: Sendable, Hashable {
                /// The requester's primary email address. To indicate the authenticated user, you can use the special value `me`.
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/settings/cse/keypairs/{keyPairId}:disable/POST/path/userId`.
                public var userId: Swift.String
                /// The identifier of the key pair to turn off.
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/settings/cse/keypairs/{keyPairId}:disable/POST/path/keyPairId`.
                public var keyPairId: Swift.String
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - userId: The requester's primary email address. To indicate the authenticated user, you can use the special value `me`.
                ///   - keyPairId: The identifier of the key pair to turn off.
                public init(
                    userId: Swift.String,
                    keyPairId: Swift.String
                ) {
                    self.userId = userId
                    self.keyPairId = keyPairId
                }
            }
            public var path: Operations.Gmail_users_settings_cse_keypairs_disable.Input.Path
            /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/settings/cse/keypairs/{keyPairId}:disable/POST/query`.
            public struct Query: Sendable, Hashable {
                /// - Remark: Generated from `#/components/parameters/_.xgafv`.
                @frozen public enum __period_xgafv: String, Codable, Hashable, Sendable, CaseIterable {
                    case _1 = "1"
                    case _2 = "2"
                }
                /// V1 error format.
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/settings/cse/keypairs/{keyPairId}:disable/POST/query/$.xgafv`.
                public var _dollar__xgafv: Components.Parameters.__period_xgafv?
                /// OAuth access token.
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/settings/cse/keypairs/{keyPairId}:disable/POST/query/access_token`.
                public var accessToken: Components.Parameters.AccessToken?
                /// - Remark: Generated from `#/components/parameters/alt`.
                @frozen public enum Alt: String, Codable, Hashable, Sendable, CaseIterable {
                    case json = "json"
                    case media = "media"
                    case proto = "proto"
                }
                /// Data format for response.
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/settings/cse/keypairs/{keyPairId}:disable/POST/query/alt`.
                public var alt: Components.Parameters.Alt?
                /// JSONP
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/settings/cse/keypairs/{keyPairId}:disable/POST/query/callback`.
                public var callback: Components.Parameters.Callback?
                /// Selector specifying which fields to include in a partial response.
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/settings/cse/keypairs/{keyPairId}:disable/POST/query/fields`.
                public var fields: Components.Parameters.Fields?
                /// API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/settings/cse/keypairs/{keyPairId}:disable/POST/query/key`.
                public var key: Components.Parameters.Key?
                /// OAuth 2.0 token for the current user.
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/settings/cse/keypairs/{keyPairId}:disable/POST/query/oauth_token`.
                public var oauthToken: Components.Parameters.OauthToken?
                /// Returns response with indentations and line breaks.
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/settings/cse/keypairs/{keyPairId}:disable/POST/query/prettyPrint`.
                public var prettyPrint: Components.Parameters.PrettyPrint?
                /// Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/settings/cse/keypairs/{keyPairId}:disable/POST/query/quotaUser`.
                public var quotaUser: Components.Parameters.QuotaUser?
                /// Upload protocol for media (e.g. "raw", "multipart").
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/settings/cse/keypairs/{keyPairId}:disable/POST/query/upload_protocol`.
                public var uploadProtocol: Components.Parameters.UploadProtocol?
                /// Legacy upload protocol for media (e.g. "media", "multipart").
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/settings/cse/keypairs/{keyPairId}:disable/POST/query/uploadType`.
                public var uploadType: Components.Parameters.UploadType?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - _dollar__xgafv: V1 error format.
                ///   - accessToken: OAuth access token.
                ///   - alt: Data format for response.
                ///   - callback: JSONP
                ///   - fields: Selector specifying which fields to include in a partial response.
                ///   - key: API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
                ///   - oauthToken: OAuth 2.0 token for the current user.
                ///   - prettyPrint: Returns response with indentations and line breaks.
                ///   - quotaUser: Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
                ///   - uploadProtocol: Upload protocol for media (e.g. "raw", "multipart").
                ///   - uploadType: Legacy upload protocol for media (e.g. "media", "multipart").
                public init(
                    _dollar__xgafv: Components.Parameters.__period_xgafv? = nil,
                    accessToken: Components.Parameters.AccessToken? = nil,
                    alt: Components.Parameters.Alt? = nil,
                    callback: Components.Parameters.Callback? = nil,
                    fields: Components.Parameters.Fields? = nil,
                    key: Components.Parameters.Key? = nil,
                    oauthToken: Components.Parameters.OauthToken? = nil,
                    prettyPrint: Components.Parameters.PrettyPrint? = nil,
                    quotaUser: Components.Parameters.QuotaUser? = nil,
                    uploadProtocol: Components.Parameters.UploadProtocol? = nil,
                    uploadType: Components.Parameters.UploadType? = nil
                ) {
                    self._dollar__xgafv = _dollar__xgafv
                    self.accessToken = accessToken
                    self.alt = alt
                    self.callback = callback
                    self.fields = fields
                    self.key = key
                    self.oauthToken = oauthToken
                    self.prettyPrint = prettyPrint
                    self.quotaUser = quotaUser
                    self.uploadProtocol = uploadProtocol
                    self.uploadType = uploadType
                }
            }
            public var query: Operations.Gmail_users_settings_cse_keypairs_disable.Input.Query
            /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/settings/cse/keypairs/{keyPairId}:disable/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.Gmail_users_settings_cse_keypairs_disable.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.Gmail_users_settings_cse_keypairs_disable.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.Gmail_users_settings_cse_keypairs_disable.Input.Headers
            /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/settings/cse/keypairs/{keyPairId}:disable/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/settings/cse/keypairs/{keyPairId}:disable/POST/requestBody/content/application\/json`.
                case json(Components.Schemas.DisableCseKeyPairRequest)
            }
            public var body: Operations.Gmail_users_settings_cse_keypairs_disable.Input.Body?
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - query:
            ///   - headers:
            ///   - body:
            public init(
                path: Operations.Gmail_users_settings_cse_keypairs_disable.Input.Path,
                query: Operations.Gmail_users_settings_cse_keypairs_disable.Input.Query = .init(),
                headers: Operations.Gmail_users_settings_cse_keypairs_disable.Input.Headers = .init(),
                body: Operations.Gmail_users_settings_cse_keypairs_disable.Input.Body? = nil
            ) {
                self.path = path
                self.query = query
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/settings/cse/keypairs/{keyPairId}:disable/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/settings/cse/keypairs/{keyPairId}:disable/POST/responses/200/content/application\/json`.
                    case json(Components.Schemas.CseKeyPair)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.CseKeyPair {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.Gmail_users_settings_cse_keypairs_disable.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.Gmail_users_settings_cse_keypairs_disable.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Successful response
            ///
            /// - Remark: Generated from `#/paths//gmail/v1/users/{userId}/settings/cse/keypairs/{keyPairId}:disable/post(gmail.users.settings.cse.keypairs.disable)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.Gmail_users_settings_cse_keypairs_disable.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.Gmail_users_settings_cse_keypairs_disable.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Turns on a client-side encryption key pair that was turned off. The key pair becomes active again for any associated client-side encryption identities.
    ///
    /// - Remark: HTTP `POST /gmail/v1/users/{userId}/settings/cse/keypairs/{keyPairId}:enable`.
    /// - Remark: Generated from `#/paths//gmail/v1/users/{userId}/settings/cse/keypairs/{keyPairId}:enable/post(gmail.users.settings.cse.keypairs.enable)`.
    public enum Gmail_users_settings_cse_keypairs_enable {
        public static let id: Swift.String = "gmail.users.settings.cse.keypairs.enable"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/settings/cse/keypairs/{keyPairId}:enable/POST/path`.
            public struct Path: Sendable, Hashable {
                /// The requester's primary email address. To indicate the authenticated user, you can use the special value `me`.
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/settings/cse/keypairs/{keyPairId}:enable/POST/path/userId`.
                public var userId: Swift.String
                /// The identifier of the key pair to turn on.
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/settings/cse/keypairs/{keyPairId}:enable/POST/path/keyPairId`.
                public var keyPairId: Swift.String
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - userId: The requester's primary email address. To indicate the authenticated user, you can use the special value `me`.
                ///   - keyPairId: The identifier of the key pair to turn on.
                public init(
                    userId: Swift.String,
                    keyPairId: Swift.String
                ) {
                    self.userId = userId
                    self.keyPairId = keyPairId
                }
            }
            public var path: Operations.Gmail_users_settings_cse_keypairs_enable.Input.Path
            /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/settings/cse/keypairs/{keyPairId}:enable/POST/query`.
            public struct Query: Sendable, Hashable {
                /// - Remark: Generated from `#/components/parameters/_.xgafv`.
                @frozen public enum __period_xgafv: String, Codable, Hashable, Sendable, CaseIterable {
                    case _1 = "1"
                    case _2 = "2"
                }
                /// V1 error format.
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/settings/cse/keypairs/{keyPairId}:enable/POST/query/$.xgafv`.
                public var _dollar__xgafv: Components.Parameters.__period_xgafv?
                /// OAuth access token.
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/settings/cse/keypairs/{keyPairId}:enable/POST/query/access_token`.
                public var accessToken: Components.Parameters.AccessToken?
                /// - Remark: Generated from `#/components/parameters/alt`.
                @frozen public enum Alt: String, Codable, Hashable, Sendable, CaseIterable {
                    case json = "json"
                    case media = "media"
                    case proto = "proto"
                }
                /// Data format for response.
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/settings/cse/keypairs/{keyPairId}:enable/POST/query/alt`.
                public var alt: Components.Parameters.Alt?
                /// JSONP
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/settings/cse/keypairs/{keyPairId}:enable/POST/query/callback`.
                public var callback: Components.Parameters.Callback?
                /// Selector specifying which fields to include in a partial response.
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/settings/cse/keypairs/{keyPairId}:enable/POST/query/fields`.
                public var fields: Components.Parameters.Fields?
                /// API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/settings/cse/keypairs/{keyPairId}:enable/POST/query/key`.
                public var key: Components.Parameters.Key?
                /// OAuth 2.0 token for the current user.
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/settings/cse/keypairs/{keyPairId}:enable/POST/query/oauth_token`.
                public var oauthToken: Components.Parameters.OauthToken?
                /// Returns response with indentations and line breaks.
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/settings/cse/keypairs/{keyPairId}:enable/POST/query/prettyPrint`.
                public var prettyPrint: Components.Parameters.PrettyPrint?
                /// Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/settings/cse/keypairs/{keyPairId}:enable/POST/query/quotaUser`.
                public var quotaUser: Components.Parameters.QuotaUser?
                /// Upload protocol for media (e.g. "raw", "multipart").
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/settings/cse/keypairs/{keyPairId}:enable/POST/query/upload_protocol`.
                public var uploadProtocol: Components.Parameters.UploadProtocol?
                /// Legacy upload protocol for media (e.g. "media", "multipart").
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/settings/cse/keypairs/{keyPairId}:enable/POST/query/uploadType`.
                public var uploadType: Components.Parameters.UploadType?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - _dollar__xgafv: V1 error format.
                ///   - accessToken: OAuth access token.
                ///   - alt: Data format for response.
                ///   - callback: JSONP
                ///   - fields: Selector specifying which fields to include in a partial response.
                ///   - key: API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
                ///   - oauthToken: OAuth 2.0 token for the current user.
                ///   - prettyPrint: Returns response with indentations and line breaks.
                ///   - quotaUser: Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
                ///   - uploadProtocol: Upload protocol for media (e.g. "raw", "multipart").
                ///   - uploadType: Legacy upload protocol for media (e.g. "media", "multipart").
                public init(
                    _dollar__xgafv: Components.Parameters.__period_xgafv? = nil,
                    accessToken: Components.Parameters.AccessToken? = nil,
                    alt: Components.Parameters.Alt? = nil,
                    callback: Components.Parameters.Callback? = nil,
                    fields: Components.Parameters.Fields? = nil,
                    key: Components.Parameters.Key? = nil,
                    oauthToken: Components.Parameters.OauthToken? = nil,
                    prettyPrint: Components.Parameters.PrettyPrint? = nil,
                    quotaUser: Components.Parameters.QuotaUser? = nil,
                    uploadProtocol: Components.Parameters.UploadProtocol? = nil,
                    uploadType: Components.Parameters.UploadType? = nil
                ) {
                    self._dollar__xgafv = _dollar__xgafv
                    self.accessToken = accessToken
                    self.alt = alt
                    self.callback = callback
                    self.fields = fields
                    self.key = key
                    self.oauthToken = oauthToken
                    self.prettyPrint = prettyPrint
                    self.quotaUser = quotaUser
                    self.uploadProtocol = uploadProtocol
                    self.uploadType = uploadType
                }
            }
            public var query: Operations.Gmail_users_settings_cse_keypairs_enable.Input.Query
            /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/settings/cse/keypairs/{keyPairId}:enable/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.Gmail_users_settings_cse_keypairs_enable.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.Gmail_users_settings_cse_keypairs_enable.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.Gmail_users_settings_cse_keypairs_enable.Input.Headers
            /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/settings/cse/keypairs/{keyPairId}:enable/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/settings/cse/keypairs/{keyPairId}:enable/POST/requestBody/content/application\/json`.
                case json(Components.Schemas.EnableCseKeyPairRequest)
            }
            public var body: Operations.Gmail_users_settings_cse_keypairs_enable.Input.Body?
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - query:
            ///   - headers:
            ///   - body:
            public init(
                path: Operations.Gmail_users_settings_cse_keypairs_enable.Input.Path,
                query: Operations.Gmail_users_settings_cse_keypairs_enable.Input.Query = .init(),
                headers: Operations.Gmail_users_settings_cse_keypairs_enable.Input.Headers = .init(),
                body: Operations.Gmail_users_settings_cse_keypairs_enable.Input.Body? = nil
            ) {
                self.path = path
                self.query = query
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/settings/cse/keypairs/{keyPairId}:enable/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/settings/cse/keypairs/{keyPairId}:enable/POST/responses/200/content/application\/json`.
                    case json(Components.Schemas.CseKeyPair)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.CseKeyPair {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.Gmail_users_settings_cse_keypairs_enable.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.Gmail_users_settings_cse_keypairs_enable.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Successful response
            ///
            /// - Remark: Generated from `#/paths//gmail/v1/users/{userId}/settings/cse/keypairs/{keyPairId}:enable/post(gmail.users.settings.cse.keypairs.enable)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.Gmail_users_settings_cse_keypairs_enable.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.Gmail_users_settings_cse_keypairs_enable.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Deletes a client-side encryption key pair permanently and immediately. You can only permanently delete key pairs that have been turned off for more than 30 days. To turn off a key pair, use the DisableCseKeyPair method. Gmail can't restore or decrypt any messages that were encrypted by an obliterated key. Authenticated users and Google Workspace administrators lose access to reading the encrypted messages.
    ///
    /// - Remark: HTTP `POST /gmail/v1/users/{userId}/settings/cse/keypairs/{keyPairId}:obliterate`.
    /// - Remark: Generated from `#/paths//gmail/v1/users/{userId}/settings/cse/keypairs/{keyPairId}:obliterate/post(gmail.users.settings.cse.keypairs.obliterate)`.
    public enum Gmail_users_settings_cse_keypairs_obliterate {
        public static let id: Swift.String = "gmail.users.settings.cse.keypairs.obliterate"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/settings/cse/keypairs/{keyPairId}:obliterate/POST/path`.
            public struct Path: Sendable, Hashable {
                /// The requester's primary email address. To indicate the authenticated user, you can use the special value `me`.
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/settings/cse/keypairs/{keyPairId}:obliterate/POST/path/userId`.
                public var userId: Swift.String
                /// The identifier of the key pair to obliterate.
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/settings/cse/keypairs/{keyPairId}:obliterate/POST/path/keyPairId`.
                public var keyPairId: Swift.String
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - userId: The requester's primary email address. To indicate the authenticated user, you can use the special value `me`.
                ///   - keyPairId: The identifier of the key pair to obliterate.
                public init(
                    userId: Swift.String,
                    keyPairId: Swift.String
                ) {
                    self.userId = userId
                    self.keyPairId = keyPairId
                }
            }
            public var path: Operations.Gmail_users_settings_cse_keypairs_obliterate.Input.Path
            /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/settings/cse/keypairs/{keyPairId}:obliterate/POST/query`.
            public struct Query: Sendable, Hashable {
                /// - Remark: Generated from `#/components/parameters/_.xgafv`.
                @frozen public enum __period_xgafv: String, Codable, Hashable, Sendable, CaseIterable {
                    case _1 = "1"
                    case _2 = "2"
                }
                /// V1 error format.
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/settings/cse/keypairs/{keyPairId}:obliterate/POST/query/$.xgafv`.
                public var _dollar__xgafv: Components.Parameters.__period_xgafv?
                /// OAuth access token.
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/settings/cse/keypairs/{keyPairId}:obliterate/POST/query/access_token`.
                public var accessToken: Components.Parameters.AccessToken?
                /// - Remark: Generated from `#/components/parameters/alt`.
                @frozen public enum Alt: String, Codable, Hashable, Sendable, CaseIterable {
                    case json = "json"
                    case media = "media"
                    case proto = "proto"
                }
                /// Data format for response.
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/settings/cse/keypairs/{keyPairId}:obliterate/POST/query/alt`.
                public var alt: Components.Parameters.Alt?
                /// JSONP
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/settings/cse/keypairs/{keyPairId}:obliterate/POST/query/callback`.
                public var callback: Components.Parameters.Callback?
                /// Selector specifying which fields to include in a partial response.
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/settings/cse/keypairs/{keyPairId}:obliterate/POST/query/fields`.
                public var fields: Components.Parameters.Fields?
                /// API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/settings/cse/keypairs/{keyPairId}:obliterate/POST/query/key`.
                public var key: Components.Parameters.Key?
                /// OAuth 2.0 token for the current user.
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/settings/cse/keypairs/{keyPairId}:obliterate/POST/query/oauth_token`.
                public var oauthToken: Components.Parameters.OauthToken?
                /// Returns response with indentations and line breaks.
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/settings/cse/keypairs/{keyPairId}:obliterate/POST/query/prettyPrint`.
                public var prettyPrint: Components.Parameters.PrettyPrint?
                /// Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/settings/cse/keypairs/{keyPairId}:obliterate/POST/query/quotaUser`.
                public var quotaUser: Components.Parameters.QuotaUser?
                /// Upload protocol for media (e.g. "raw", "multipart").
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/settings/cse/keypairs/{keyPairId}:obliterate/POST/query/upload_protocol`.
                public var uploadProtocol: Components.Parameters.UploadProtocol?
                /// Legacy upload protocol for media (e.g. "media", "multipart").
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/settings/cse/keypairs/{keyPairId}:obliterate/POST/query/uploadType`.
                public var uploadType: Components.Parameters.UploadType?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - _dollar__xgafv: V1 error format.
                ///   - accessToken: OAuth access token.
                ///   - alt: Data format for response.
                ///   - callback: JSONP
                ///   - fields: Selector specifying which fields to include in a partial response.
                ///   - key: API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
                ///   - oauthToken: OAuth 2.0 token for the current user.
                ///   - prettyPrint: Returns response with indentations and line breaks.
                ///   - quotaUser: Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
                ///   - uploadProtocol: Upload protocol for media (e.g. "raw", "multipart").
                ///   - uploadType: Legacy upload protocol for media (e.g. "media", "multipart").
                public init(
                    _dollar__xgafv: Components.Parameters.__period_xgafv? = nil,
                    accessToken: Components.Parameters.AccessToken? = nil,
                    alt: Components.Parameters.Alt? = nil,
                    callback: Components.Parameters.Callback? = nil,
                    fields: Components.Parameters.Fields? = nil,
                    key: Components.Parameters.Key? = nil,
                    oauthToken: Components.Parameters.OauthToken? = nil,
                    prettyPrint: Components.Parameters.PrettyPrint? = nil,
                    quotaUser: Components.Parameters.QuotaUser? = nil,
                    uploadProtocol: Components.Parameters.UploadProtocol? = nil,
                    uploadType: Components.Parameters.UploadType? = nil
                ) {
                    self._dollar__xgafv = _dollar__xgafv
                    self.accessToken = accessToken
                    self.alt = alt
                    self.callback = callback
                    self.fields = fields
                    self.key = key
                    self.oauthToken = oauthToken
                    self.prettyPrint = prettyPrint
                    self.quotaUser = quotaUser
                    self.uploadProtocol = uploadProtocol
                    self.uploadType = uploadType
                }
            }
            public var query: Operations.Gmail_users_settings_cse_keypairs_obliterate.Input.Query
            /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/settings/cse/keypairs/{keyPairId}:obliterate/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/settings/cse/keypairs/{keyPairId}:obliterate/POST/requestBody/content/application\/json`.
                case json(Components.Schemas.ObliterateCseKeyPairRequest)
            }
            public var body: Operations.Gmail_users_settings_cse_keypairs_obliterate.Input.Body?
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - query:
            ///   - body:
            public init(
                path: Operations.Gmail_users_settings_cse_keypairs_obliterate.Input.Path,
                query: Operations.Gmail_users_settings_cse_keypairs_obliterate.Input.Query = .init(),
                body: Operations.Gmail_users_settings_cse_keypairs_obliterate.Input.Body? = nil
            ) {
                self.path = path
                self.query = query
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// Creates a new `Ok`.
                public init() {}
            }
            /// Successful response
            ///
            /// - Remark: Generated from `#/paths//gmail/v1/users/{userId}/settings/cse/keypairs/{keyPairId}:obliterate/post(gmail.users.settings.cse.keypairs.obliterate)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.Gmail_users_settings_cse_keypairs_obliterate.Output.Ok)
            /// Successful response
            ///
            /// - Remark: Generated from `#/paths//gmail/v1/users/{userId}/settings/cse/keypairs/{keyPairId}:obliterate/post(gmail.users.settings.cse.keypairs.obliterate)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            public static var ok: Self {
                .ok(.init())
            }
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.Gmail_users_settings_cse_keypairs_obliterate.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
    }
    /// Lists the delegates for the specified account. This method is only available to service account clients that have been delegated domain-wide authority.
    ///
    /// - Remark: HTTP `GET /gmail/v1/users/{userId}/settings/delegates`.
    /// - Remark: Generated from `#/paths//gmail/v1/users/{userId}/settings/delegates/get(gmail.users.settings.delegates.list)`.
    public enum Gmail_users_settings_delegates_list {
        public static let id: Swift.String = "gmail.users.settings.delegates.list"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/settings/delegates/GET/path`.
            public struct Path: Sendable, Hashable {
                /// User's email address. The special value "me" can be used to indicate the authenticated user.
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/settings/delegates/GET/path/userId`.
                public var userId: Swift.String
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - userId: User's email address. The special value "me" can be used to indicate the authenticated user.
                public init(userId: Swift.String) {
                    self.userId = userId
                }
            }
            public var path: Operations.Gmail_users_settings_delegates_list.Input.Path
            /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/settings/delegates/GET/query`.
            public struct Query: Sendable, Hashable {
                /// - Remark: Generated from `#/components/parameters/_.xgafv`.
                @frozen public enum __period_xgafv: String, Codable, Hashable, Sendable, CaseIterable {
                    case _1 = "1"
                    case _2 = "2"
                }
                /// V1 error format.
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/settings/delegates/GET/query/$.xgafv`.
                public var _dollar__xgafv: Components.Parameters.__period_xgafv?
                /// OAuth access token.
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/settings/delegates/GET/query/access_token`.
                public var accessToken: Components.Parameters.AccessToken?
                /// - Remark: Generated from `#/components/parameters/alt`.
                @frozen public enum Alt: String, Codable, Hashable, Sendable, CaseIterable {
                    case json = "json"
                    case media = "media"
                    case proto = "proto"
                }
                /// Data format for response.
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/settings/delegates/GET/query/alt`.
                public var alt: Components.Parameters.Alt?
                /// JSONP
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/settings/delegates/GET/query/callback`.
                public var callback: Components.Parameters.Callback?
                /// Selector specifying which fields to include in a partial response.
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/settings/delegates/GET/query/fields`.
                public var fields: Components.Parameters.Fields?
                /// API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/settings/delegates/GET/query/key`.
                public var key: Components.Parameters.Key?
                /// OAuth 2.0 token for the current user.
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/settings/delegates/GET/query/oauth_token`.
                public var oauthToken: Components.Parameters.OauthToken?
                /// Returns response with indentations and line breaks.
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/settings/delegates/GET/query/prettyPrint`.
                public var prettyPrint: Components.Parameters.PrettyPrint?
                /// Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/settings/delegates/GET/query/quotaUser`.
                public var quotaUser: Components.Parameters.QuotaUser?
                /// Upload protocol for media (e.g. "raw", "multipart").
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/settings/delegates/GET/query/upload_protocol`.
                public var uploadProtocol: Components.Parameters.UploadProtocol?
                /// Legacy upload protocol for media (e.g. "media", "multipart").
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/settings/delegates/GET/query/uploadType`.
                public var uploadType: Components.Parameters.UploadType?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - _dollar__xgafv: V1 error format.
                ///   - accessToken: OAuth access token.
                ///   - alt: Data format for response.
                ///   - callback: JSONP
                ///   - fields: Selector specifying which fields to include in a partial response.
                ///   - key: API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
                ///   - oauthToken: OAuth 2.0 token for the current user.
                ///   - prettyPrint: Returns response with indentations and line breaks.
                ///   - quotaUser: Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
                ///   - uploadProtocol: Upload protocol for media (e.g. "raw", "multipart").
                ///   - uploadType: Legacy upload protocol for media (e.g. "media", "multipart").
                public init(
                    _dollar__xgafv: Components.Parameters.__period_xgafv? = nil,
                    accessToken: Components.Parameters.AccessToken? = nil,
                    alt: Components.Parameters.Alt? = nil,
                    callback: Components.Parameters.Callback? = nil,
                    fields: Components.Parameters.Fields? = nil,
                    key: Components.Parameters.Key? = nil,
                    oauthToken: Components.Parameters.OauthToken? = nil,
                    prettyPrint: Components.Parameters.PrettyPrint? = nil,
                    quotaUser: Components.Parameters.QuotaUser? = nil,
                    uploadProtocol: Components.Parameters.UploadProtocol? = nil,
                    uploadType: Components.Parameters.UploadType? = nil
                ) {
                    self._dollar__xgafv = _dollar__xgafv
                    self.accessToken = accessToken
                    self.alt = alt
                    self.callback = callback
                    self.fields = fields
                    self.key = key
                    self.oauthToken = oauthToken
                    self.prettyPrint = prettyPrint
                    self.quotaUser = quotaUser
                    self.uploadProtocol = uploadProtocol
                    self.uploadType = uploadType
                }
            }
            public var query: Operations.Gmail_users_settings_delegates_list.Input.Query
            /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/settings/delegates/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.Gmail_users_settings_delegates_list.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.Gmail_users_settings_delegates_list.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.Gmail_users_settings_delegates_list.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - query:
            ///   - headers:
            public init(
                path: Operations.Gmail_users_settings_delegates_list.Input.Path,
                query: Operations.Gmail_users_settings_delegates_list.Input.Query = .init(),
                headers: Operations.Gmail_users_settings_delegates_list.Input.Headers = .init()
            ) {
                self.path = path
                self.query = query
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/settings/delegates/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/settings/delegates/GET/responses/200/content/application\/json`.
                    case json(Components.Schemas.ListDelegatesResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.ListDelegatesResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.Gmail_users_settings_delegates_list.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.Gmail_users_settings_delegates_list.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Successful response
            ///
            /// - Remark: Generated from `#/paths//gmail/v1/users/{userId}/settings/delegates/get(gmail.users.settings.delegates.list)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.Gmail_users_settings_delegates_list.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.Gmail_users_settings_delegates_list.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Adds a delegate with its verification status set directly to `accepted`, without sending any verification email. The delegate user must be a member of the same Google Workspace organization as the delegator user. Gmail imposes limitations on the number of delegates and delegators each user in a Google Workspace organization can have. These limits depend on your organization, but in general each user can have up to 25 delegates and up to 10 delegators. Note that a delegate user must be referred to by their primary email address, and not an email alias. Also note that when a new delegate is created, there may be up to a one minute delay before the new delegate is available for use. This method is only available to service account clients that have been delegated domain-wide authority.
    ///
    /// - Remark: HTTP `POST /gmail/v1/users/{userId}/settings/delegates`.
    /// - Remark: Generated from `#/paths//gmail/v1/users/{userId}/settings/delegates/post(gmail.users.settings.delegates.create)`.
    public enum Gmail_users_settings_delegates_create {
        public static let id: Swift.String = "gmail.users.settings.delegates.create"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/settings/delegates/POST/path`.
            public struct Path: Sendable, Hashable {
                /// User's email address. The special value "me" can be used to indicate the authenticated user.
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/settings/delegates/POST/path/userId`.
                public var userId: Swift.String
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - userId: User's email address. The special value "me" can be used to indicate the authenticated user.
                public init(userId: Swift.String) {
                    self.userId = userId
                }
            }
            public var path: Operations.Gmail_users_settings_delegates_create.Input.Path
            /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/settings/delegates/POST/query`.
            public struct Query: Sendable, Hashable {
                /// - Remark: Generated from `#/components/parameters/_.xgafv`.
                @frozen public enum __period_xgafv: String, Codable, Hashable, Sendable, CaseIterable {
                    case _1 = "1"
                    case _2 = "2"
                }
                /// V1 error format.
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/settings/delegates/POST/query/$.xgafv`.
                public var _dollar__xgafv: Components.Parameters.__period_xgafv?
                /// OAuth access token.
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/settings/delegates/POST/query/access_token`.
                public var accessToken: Components.Parameters.AccessToken?
                /// - Remark: Generated from `#/components/parameters/alt`.
                @frozen public enum Alt: String, Codable, Hashable, Sendable, CaseIterable {
                    case json = "json"
                    case media = "media"
                    case proto = "proto"
                }
                /// Data format for response.
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/settings/delegates/POST/query/alt`.
                public var alt: Components.Parameters.Alt?
                /// JSONP
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/settings/delegates/POST/query/callback`.
                public var callback: Components.Parameters.Callback?
                /// Selector specifying which fields to include in a partial response.
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/settings/delegates/POST/query/fields`.
                public var fields: Components.Parameters.Fields?
                /// API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/settings/delegates/POST/query/key`.
                public var key: Components.Parameters.Key?
                /// OAuth 2.0 token for the current user.
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/settings/delegates/POST/query/oauth_token`.
                public var oauthToken: Components.Parameters.OauthToken?
                /// Returns response with indentations and line breaks.
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/settings/delegates/POST/query/prettyPrint`.
                public var prettyPrint: Components.Parameters.PrettyPrint?
                /// Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/settings/delegates/POST/query/quotaUser`.
                public var quotaUser: Components.Parameters.QuotaUser?
                /// Upload protocol for media (e.g. "raw", "multipart").
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/settings/delegates/POST/query/upload_protocol`.
                public var uploadProtocol: Components.Parameters.UploadProtocol?
                /// Legacy upload protocol for media (e.g. "media", "multipart").
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/settings/delegates/POST/query/uploadType`.
                public var uploadType: Components.Parameters.UploadType?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - _dollar__xgafv: V1 error format.
                ///   - accessToken: OAuth access token.
                ///   - alt: Data format for response.
                ///   - callback: JSONP
                ///   - fields: Selector specifying which fields to include in a partial response.
                ///   - key: API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
                ///   - oauthToken: OAuth 2.0 token for the current user.
                ///   - prettyPrint: Returns response with indentations and line breaks.
                ///   - quotaUser: Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
                ///   - uploadProtocol: Upload protocol for media (e.g. "raw", "multipart").
                ///   - uploadType: Legacy upload protocol for media (e.g. "media", "multipart").
                public init(
                    _dollar__xgafv: Components.Parameters.__period_xgafv? = nil,
                    accessToken: Components.Parameters.AccessToken? = nil,
                    alt: Components.Parameters.Alt? = nil,
                    callback: Components.Parameters.Callback? = nil,
                    fields: Components.Parameters.Fields? = nil,
                    key: Components.Parameters.Key? = nil,
                    oauthToken: Components.Parameters.OauthToken? = nil,
                    prettyPrint: Components.Parameters.PrettyPrint? = nil,
                    quotaUser: Components.Parameters.QuotaUser? = nil,
                    uploadProtocol: Components.Parameters.UploadProtocol? = nil,
                    uploadType: Components.Parameters.UploadType? = nil
                ) {
                    self._dollar__xgafv = _dollar__xgafv
                    self.accessToken = accessToken
                    self.alt = alt
                    self.callback = callback
                    self.fields = fields
                    self.key = key
                    self.oauthToken = oauthToken
                    self.prettyPrint = prettyPrint
                    self.quotaUser = quotaUser
                    self.uploadProtocol = uploadProtocol
                    self.uploadType = uploadType
                }
            }
            public var query: Operations.Gmail_users_settings_delegates_create.Input.Query
            /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/settings/delegates/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.Gmail_users_settings_delegates_create.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.Gmail_users_settings_delegates_create.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.Gmail_users_settings_delegates_create.Input.Headers
            /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/settings/delegates/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/settings/delegates/POST/requestBody/content/application\/json`.
                case json(Components.Schemas.Delegate)
            }
            public var body: Operations.Gmail_users_settings_delegates_create.Input.Body?
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - query:
            ///   - headers:
            ///   - body:
            public init(
                path: Operations.Gmail_users_settings_delegates_create.Input.Path,
                query: Operations.Gmail_users_settings_delegates_create.Input.Query = .init(),
                headers: Operations.Gmail_users_settings_delegates_create.Input.Headers = .init(),
                body: Operations.Gmail_users_settings_delegates_create.Input.Body? = nil
            ) {
                self.path = path
                self.query = query
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/settings/delegates/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/settings/delegates/POST/responses/200/content/application\/json`.
                    case json(Components.Schemas.Delegate)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.Delegate {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.Gmail_users_settings_delegates_create.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.Gmail_users_settings_delegates_create.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Successful response
            ///
            /// - Remark: Generated from `#/paths//gmail/v1/users/{userId}/settings/delegates/post(gmail.users.settings.delegates.create)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.Gmail_users_settings_delegates_create.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.Gmail_users_settings_delegates_create.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Gets the specified delegate. Note that a delegate user must be referred to by their primary email address, and not an email alias. This method is only available to service account clients that have been delegated domain-wide authority.
    ///
    /// - Remark: HTTP `GET /gmail/v1/users/{userId}/settings/delegates/{delegateEmail}`.
    /// - Remark: Generated from `#/paths//gmail/v1/users/{userId}/settings/delegates/{delegateEmail}/get(gmail.users.settings.delegates.get)`.
    public enum Gmail_users_settings_delegates_get {
        public static let id: Swift.String = "gmail.users.settings.delegates.get"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/settings/delegates/{delegateEmail}/GET/path`.
            public struct Path: Sendable, Hashable {
                /// User's email address. The special value "me" can be used to indicate the authenticated user.
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/settings/delegates/{delegateEmail}/GET/path/userId`.
                public var userId: Swift.String
                /// The email address of the user whose delegate relationship is to be retrieved.
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/settings/delegates/{delegateEmail}/GET/path/delegateEmail`.
                public var delegateEmail: Swift.String
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - userId: User's email address. The special value "me" can be used to indicate the authenticated user.
                ///   - delegateEmail: The email address of the user whose delegate relationship is to be retrieved.
                public init(
                    userId: Swift.String,
                    delegateEmail: Swift.String
                ) {
                    self.userId = userId
                    self.delegateEmail = delegateEmail
                }
            }
            public var path: Operations.Gmail_users_settings_delegates_get.Input.Path
            /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/settings/delegates/{delegateEmail}/GET/query`.
            public struct Query: Sendable, Hashable {
                /// - Remark: Generated from `#/components/parameters/_.xgafv`.
                @frozen public enum __period_xgafv: String, Codable, Hashable, Sendable, CaseIterable {
                    case _1 = "1"
                    case _2 = "2"
                }
                /// V1 error format.
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/settings/delegates/{delegateEmail}/GET/query/$.xgafv`.
                public var _dollar__xgafv: Components.Parameters.__period_xgafv?
                /// OAuth access token.
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/settings/delegates/{delegateEmail}/GET/query/access_token`.
                public var accessToken: Components.Parameters.AccessToken?
                /// - Remark: Generated from `#/components/parameters/alt`.
                @frozen public enum Alt: String, Codable, Hashable, Sendable, CaseIterable {
                    case json = "json"
                    case media = "media"
                    case proto = "proto"
                }
                /// Data format for response.
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/settings/delegates/{delegateEmail}/GET/query/alt`.
                public var alt: Components.Parameters.Alt?
                /// JSONP
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/settings/delegates/{delegateEmail}/GET/query/callback`.
                public var callback: Components.Parameters.Callback?
                /// Selector specifying which fields to include in a partial response.
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/settings/delegates/{delegateEmail}/GET/query/fields`.
                public var fields: Components.Parameters.Fields?
                /// API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/settings/delegates/{delegateEmail}/GET/query/key`.
                public var key: Components.Parameters.Key?
                /// OAuth 2.0 token for the current user.
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/settings/delegates/{delegateEmail}/GET/query/oauth_token`.
                public var oauthToken: Components.Parameters.OauthToken?
                /// Returns response with indentations and line breaks.
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/settings/delegates/{delegateEmail}/GET/query/prettyPrint`.
                public var prettyPrint: Components.Parameters.PrettyPrint?
                /// Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/settings/delegates/{delegateEmail}/GET/query/quotaUser`.
                public var quotaUser: Components.Parameters.QuotaUser?
                /// Upload protocol for media (e.g. "raw", "multipart").
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/settings/delegates/{delegateEmail}/GET/query/upload_protocol`.
                public var uploadProtocol: Components.Parameters.UploadProtocol?
                /// Legacy upload protocol for media (e.g. "media", "multipart").
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/settings/delegates/{delegateEmail}/GET/query/uploadType`.
                public var uploadType: Components.Parameters.UploadType?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - _dollar__xgafv: V1 error format.
                ///   - accessToken: OAuth access token.
                ///   - alt: Data format for response.
                ///   - callback: JSONP
                ///   - fields: Selector specifying which fields to include in a partial response.
                ///   - key: API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
                ///   - oauthToken: OAuth 2.0 token for the current user.
                ///   - prettyPrint: Returns response with indentations and line breaks.
                ///   - quotaUser: Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
                ///   - uploadProtocol: Upload protocol for media (e.g. "raw", "multipart").
                ///   - uploadType: Legacy upload protocol for media (e.g. "media", "multipart").
                public init(
                    _dollar__xgafv: Components.Parameters.__period_xgafv? = nil,
                    accessToken: Components.Parameters.AccessToken? = nil,
                    alt: Components.Parameters.Alt? = nil,
                    callback: Components.Parameters.Callback? = nil,
                    fields: Components.Parameters.Fields? = nil,
                    key: Components.Parameters.Key? = nil,
                    oauthToken: Components.Parameters.OauthToken? = nil,
                    prettyPrint: Components.Parameters.PrettyPrint? = nil,
                    quotaUser: Components.Parameters.QuotaUser? = nil,
                    uploadProtocol: Components.Parameters.UploadProtocol? = nil,
                    uploadType: Components.Parameters.UploadType? = nil
                ) {
                    self._dollar__xgafv = _dollar__xgafv
                    self.accessToken = accessToken
                    self.alt = alt
                    self.callback = callback
                    self.fields = fields
                    self.key = key
                    self.oauthToken = oauthToken
                    self.prettyPrint = prettyPrint
                    self.quotaUser = quotaUser
                    self.uploadProtocol = uploadProtocol
                    self.uploadType = uploadType
                }
            }
            public var query: Operations.Gmail_users_settings_delegates_get.Input.Query
            /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/settings/delegates/{delegateEmail}/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.Gmail_users_settings_delegates_get.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.Gmail_users_settings_delegates_get.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.Gmail_users_settings_delegates_get.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - query:
            ///   - headers:
            public init(
                path: Operations.Gmail_users_settings_delegates_get.Input.Path,
                query: Operations.Gmail_users_settings_delegates_get.Input.Query = .init(),
                headers: Operations.Gmail_users_settings_delegates_get.Input.Headers = .init()
            ) {
                self.path = path
                self.query = query
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/settings/delegates/{delegateEmail}/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/settings/delegates/{delegateEmail}/GET/responses/200/content/application\/json`.
                    case json(Components.Schemas.Delegate)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.Delegate {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.Gmail_users_settings_delegates_get.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.Gmail_users_settings_delegates_get.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Successful response
            ///
            /// - Remark: Generated from `#/paths//gmail/v1/users/{userId}/settings/delegates/{delegateEmail}/get(gmail.users.settings.delegates.get)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.Gmail_users_settings_delegates_get.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.Gmail_users_settings_delegates_get.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Removes the specified delegate (which can be of any verification status), and revokes any verification that may have been required for using it. Note that a delegate user must be referred to by their primary email address, and not an email alias. This method is only available to service account clients that have been delegated domain-wide authority.
    ///
    /// - Remark: HTTP `DELETE /gmail/v1/users/{userId}/settings/delegates/{delegateEmail}`.
    /// - Remark: Generated from `#/paths//gmail/v1/users/{userId}/settings/delegates/{delegateEmail}/delete(gmail.users.settings.delegates.delete)`.
    public enum Gmail_users_settings_delegates_delete {
        public static let id: Swift.String = "gmail.users.settings.delegates.delete"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/settings/delegates/{delegateEmail}/DELETE/path`.
            public struct Path: Sendable, Hashable {
                /// User's email address. The special value "me" can be used to indicate the authenticated user.
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/settings/delegates/{delegateEmail}/DELETE/path/userId`.
                public var userId: Swift.String
                /// The email address of the user to be removed as a delegate.
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/settings/delegates/{delegateEmail}/DELETE/path/delegateEmail`.
                public var delegateEmail: Swift.String
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - userId: User's email address. The special value "me" can be used to indicate the authenticated user.
                ///   - delegateEmail: The email address of the user to be removed as a delegate.
                public init(
                    userId: Swift.String,
                    delegateEmail: Swift.String
                ) {
                    self.userId = userId
                    self.delegateEmail = delegateEmail
                }
            }
            public var path: Operations.Gmail_users_settings_delegates_delete.Input.Path
            /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/settings/delegates/{delegateEmail}/DELETE/query`.
            public struct Query: Sendable, Hashable {
                /// - Remark: Generated from `#/components/parameters/_.xgafv`.
                @frozen public enum __period_xgafv: String, Codable, Hashable, Sendable, CaseIterable {
                    case _1 = "1"
                    case _2 = "2"
                }
                /// V1 error format.
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/settings/delegates/{delegateEmail}/DELETE/query/$.xgafv`.
                public var _dollar__xgafv: Components.Parameters.__period_xgafv?
                /// OAuth access token.
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/settings/delegates/{delegateEmail}/DELETE/query/access_token`.
                public var accessToken: Components.Parameters.AccessToken?
                /// - Remark: Generated from `#/components/parameters/alt`.
                @frozen public enum Alt: String, Codable, Hashable, Sendable, CaseIterable {
                    case json = "json"
                    case media = "media"
                    case proto = "proto"
                }
                /// Data format for response.
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/settings/delegates/{delegateEmail}/DELETE/query/alt`.
                public var alt: Components.Parameters.Alt?
                /// JSONP
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/settings/delegates/{delegateEmail}/DELETE/query/callback`.
                public var callback: Components.Parameters.Callback?
                /// Selector specifying which fields to include in a partial response.
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/settings/delegates/{delegateEmail}/DELETE/query/fields`.
                public var fields: Components.Parameters.Fields?
                /// API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/settings/delegates/{delegateEmail}/DELETE/query/key`.
                public var key: Components.Parameters.Key?
                /// OAuth 2.0 token for the current user.
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/settings/delegates/{delegateEmail}/DELETE/query/oauth_token`.
                public var oauthToken: Components.Parameters.OauthToken?
                /// Returns response with indentations and line breaks.
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/settings/delegates/{delegateEmail}/DELETE/query/prettyPrint`.
                public var prettyPrint: Components.Parameters.PrettyPrint?
                /// Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/settings/delegates/{delegateEmail}/DELETE/query/quotaUser`.
                public var quotaUser: Components.Parameters.QuotaUser?
                /// Upload protocol for media (e.g. "raw", "multipart").
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/settings/delegates/{delegateEmail}/DELETE/query/upload_protocol`.
                public var uploadProtocol: Components.Parameters.UploadProtocol?
                /// Legacy upload protocol for media (e.g. "media", "multipart").
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/settings/delegates/{delegateEmail}/DELETE/query/uploadType`.
                public var uploadType: Components.Parameters.UploadType?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - _dollar__xgafv: V1 error format.
                ///   - accessToken: OAuth access token.
                ///   - alt: Data format for response.
                ///   - callback: JSONP
                ///   - fields: Selector specifying which fields to include in a partial response.
                ///   - key: API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
                ///   - oauthToken: OAuth 2.0 token for the current user.
                ///   - prettyPrint: Returns response with indentations and line breaks.
                ///   - quotaUser: Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
                ///   - uploadProtocol: Upload protocol for media (e.g. "raw", "multipart").
                ///   - uploadType: Legacy upload protocol for media (e.g. "media", "multipart").
                public init(
                    _dollar__xgafv: Components.Parameters.__period_xgafv? = nil,
                    accessToken: Components.Parameters.AccessToken? = nil,
                    alt: Components.Parameters.Alt? = nil,
                    callback: Components.Parameters.Callback? = nil,
                    fields: Components.Parameters.Fields? = nil,
                    key: Components.Parameters.Key? = nil,
                    oauthToken: Components.Parameters.OauthToken? = nil,
                    prettyPrint: Components.Parameters.PrettyPrint? = nil,
                    quotaUser: Components.Parameters.QuotaUser? = nil,
                    uploadProtocol: Components.Parameters.UploadProtocol? = nil,
                    uploadType: Components.Parameters.UploadType? = nil
                ) {
                    self._dollar__xgafv = _dollar__xgafv
                    self.accessToken = accessToken
                    self.alt = alt
                    self.callback = callback
                    self.fields = fields
                    self.key = key
                    self.oauthToken = oauthToken
                    self.prettyPrint = prettyPrint
                    self.quotaUser = quotaUser
                    self.uploadProtocol = uploadProtocol
                    self.uploadType = uploadType
                }
            }
            public var query: Operations.Gmail_users_settings_delegates_delete.Input.Query
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - query:
            public init(
                path: Operations.Gmail_users_settings_delegates_delete.Input.Path,
                query: Operations.Gmail_users_settings_delegates_delete.Input.Query = .init()
            ) {
                self.path = path
                self.query = query
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// Creates a new `Ok`.
                public init() {}
            }
            /// Successful response
            ///
            /// - Remark: Generated from `#/paths//gmail/v1/users/{userId}/settings/delegates/{delegateEmail}/delete(gmail.users.settings.delegates.delete)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.Gmail_users_settings_delegates_delete.Output.Ok)
            /// Successful response
            ///
            /// - Remark: Generated from `#/paths//gmail/v1/users/{userId}/settings/delegates/{delegateEmail}/delete(gmail.users.settings.delegates.delete)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            public static var ok: Self {
                .ok(.init())
            }
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.Gmail_users_settings_delegates_delete.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
    }
    /// Lists the message filters of a Gmail user.
    ///
    /// - Remark: HTTP `GET /gmail/v1/users/{userId}/settings/filters`.
    /// - Remark: Generated from `#/paths//gmail/v1/users/{userId}/settings/filters/get(gmail.users.settings.filters.list)`.
    public enum Gmail_users_settings_filters_list {
        public static let id: Swift.String = "gmail.users.settings.filters.list"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/settings/filters/GET/path`.
            public struct Path: Sendable, Hashable {
                /// User's email address. The special value "me" can be used to indicate the authenticated user.
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/settings/filters/GET/path/userId`.
                public var userId: Swift.String
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - userId: User's email address. The special value "me" can be used to indicate the authenticated user.
                public init(userId: Swift.String) {
                    self.userId = userId
                }
            }
            public var path: Operations.Gmail_users_settings_filters_list.Input.Path
            /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/settings/filters/GET/query`.
            public struct Query: Sendable, Hashable {
                /// - Remark: Generated from `#/components/parameters/_.xgafv`.
                @frozen public enum __period_xgafv: String, Codable, Hashable, Sendable, CaseIterable {
                    case _1 = "1"
                    case _2 = "2"
                }
                /// V1 error format.
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/settings/filters/GET/query/$.xgafv`.
                public var _dollar__xgafv: Components.Parameters.__period_xgafv?
                /// OAuth access token.
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/settings/filters/GET/query/access_token`.
                public var accessToken: Components.Parameters.AccessToken?
                /// - Remark: Generated from `#/components/parameters/alt`.
                @frozen public enum Alt: String, Codable, Hashable, Sendable, CaseIterable {
                    case json = "json"
                    case media = "media"
                    case proto = "proto"
                }
                /// Data format for response.
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/settings/filters/GET/query/alt`.
                public var alt: Components.Parameters.Alt?
                /// JSONP
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/settings/filters/GET/query/callback`.
                public var callback: Components.Parameters.Callback?
                /// Selector specifying which fields to include in a partial response.
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/settings/filters/GET/query/fields`.
                public var fields: Components.Parameters.Fields?
                /// API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/settings/filters/GET/query/key`.
                public var key: Components.Parameters.Key?
                /// OAuth 2.0 token for the current user.
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/settings/filters/GET/query/oauth_token`.
                public var oauthToken: Components.Parameters.OauthToken?
                /// Returns response with indentations and line breaks.
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/settings/filters/GET/query/prettyPrint`.
                public var prettyPrint: Components.Parameters.PrettyPrint?
                /// Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/settings/filters/GET/query/quotaUser`.
                public var quotaUser: Components.Parameters.QuotaUser?
                /// Upload protocol for media (e.g. "raw", "multipart").
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/settings/filters/GET/query/upload_protocol`.
                public var uploadProtocol: Components.Parameters.UploadProtocol?
                /// Legacy upload protocol for media (e.g. "media", "multipart").
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/settings/filters/GET/query/uploadType`.
                public var uploadType: Components.Parameters.UploadType?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - _dollar__xgafv: V1 error format.
                ///   - accessToken: OAuth access token.
                ///   - alt: Data format for response.
                ///   - callback: JSONP
                ///   - fields: Selector specifying which fields to include in a partial response.
                ///   - key: API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
                ///   - oauthToken: OAuth 2.0 token for the current user.
                ///   - prettyPrint: Returns response with indentations and line breaks.
                ///   - quotaUser: Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
                ///   - uploadProtocol: Upload protocol for media (e.g. "raw", "multipart").
                ///   - uploadType: Legacy upload protocol for media (e.g. "media", "multipart").
                public init(
                    _dollar__xgafv: Components.Parameters.__period_xgafv? = nil,
                    accessToken: Components.Parameters.AccessToken? = nil,
                    alt: Components.Parameters.Alt? = nil,
                    callback: Components.Parameters.Callback? = nil,
                    fields: Components.Parameters.Fields? = nil,
                    key: Components.Parameters.Key? = nil,
                    oauthToken: Components.Parameters.OauthToken? = nil,
                    prettyPrint: Components.Parameters.PrettyPrint? = nil,
                    quotaUser: Components.Parameters.QuotaUser? = nil,
                    uploadProtocol: Components.Parameters.UploadProtocol? = nil,
                    uploadType: Components.Parameters.UploadType? = nil
                ) {
                    self._dollar__xgafv = _dollar__xgafv
                    self.accessToken = accessToken
                    self.alt = alt
                    self.callback = callback
                    self.fields = fields
                    self.key = key
                    self.oauthToken = oauthToken
                    self.prettyPrint = prettyPrint
                    self.quotaUser = quotaUser
                    self.uploadProtocol = uploadProtocol
                    self.uploadType = uploadType
                }
            }
            public var query: Operations.Gmail_users_settings_filters_list.Input.Query
            /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/settings/filters/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.Gmail_users_settings_filters_list.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.Gmail_users_settings_filters_list.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.Gmail_users_settings_filters_list.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - query:
            ///   - headers:
            public init(
                path: Operations.Gmail_users_settings_filters_list.Input.Path,
                query: Operations.Gmail_users_settings_filters_list.Input.Query = .init(),
                headers: Operations.Gmail_users_settings_filters_list.Input.Headers = .init()
            ) {
                self.path = path
                self.query = query
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/settings/filters/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/settings/filters/GET/responses/200/content/application\/json`.
                    case json(Components.Schemas.ListFiltersResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.ListFiltersResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.Gmail_users_settings_filters_list.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.Gmail_users_settings_filters_list.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Successful response
            ///
            /// - Remark: Generated from `#/paths//gmail/v1/users/{userId}/settings/filters/get(gmail.users.settings.filters.list)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.Gmail_users_settings_filters_list.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.Gmail_users_settings_filters_list.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Creates a filter. Note: you can only create a maximum of 1,000 filters.
    ///
    /// - Remark: HTTP `POST /gmail/v1/users/{userId}/settings/filters`.
    /// - Remark: Generated from `#/paths//gmail/v1/users/{userId}/settings/filters/post(gmail.users.settings.filters.create)`.
    public enum Gmail_users_settings_filters_create {
        public static let id: Swift.String = "gmail.users.settings.filters.create"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/settings/filters/POST/path`.
            public struct Path: Sendable, Hashable {
                /// User's email address. The special value "me" can be used to indicate the authenticated user.
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/settings/filters/POST/path/userId`.
                public var userId: Swift.String
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - userId: User's email address. The special value "me" can be used to indicate the authenticated user.
                public init(userId: Swift.String) {
                    self.userId = userId
                }
            }
            public var path: Operations.Gmail_users_settings_filters_create.Input.Path
            /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/settings/filters/POST/query`.
            public struct Query: Sendable, Hashable {
                /// - Remark: Generated from `#/components/parameters/_.xgafv`.
                @frozen public enum __period_xgafv: String, Codable, Hashable, Sendable, CaseIterable {
                    case _1 = "1"
                    case _2 = "2"
                }
                /// V1 error format.
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/settings/filters/POST/query/$.xgafv`.
                public var _dollar__xgafv: Components.Parameters.__period_xgafv?
                /// OAuth access token.
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/settings/filters/POST/query/access_token`.
                public var accessToken: Components.Parameters.AccessToken?
                /// - Remark: Generated from `#/components/parameters/alt`.
                @frozen public enum Alt: String, Codable, Hashable, Sendable, CaseIterable {
                    case json = "json"
                    case media = "media"
                    case proto = "proto"
                }
                /// Data format for response.
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/settings/filters/POST/query/alt`.
                public var alt: Components.Parameters.Alt?
                /// JSONP
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/settings/filters/POST/query/callback`.
                public var callback: Components.Parameters.Callback?
                /// Selector specifying which fields to include in a partial response.
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/settings/filters/POST/query/fields`.
                public var fields: Components.Parameters.Fields?
                /// API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/settings/filters/POST/query/key`.
                public var key: Components.Parameters.Key?
                /// OAuth 2.0 token for the current user.
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/settings/filters/POST/query/oauth_token`.
                public var oauthToken: Components.Parameters.OauthToken?
                /// Returns response with indentations and line breaks.
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/settings/filters/POST/query/prettyPrint`.
                public var prettyPrint: Components.Parameters.PrettyPrint?
                /// Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/settings/filters/POST/query/quotaUser`.
                public var quotaUser: Components.Parameters.QuotaUser?
                /// Upload protocol for media (e.g. "raw", "multipart").
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/settings/filters/POST/query/upload_protocol`.
                public var uploadProtocol: Components.Parameters.UploadProtocol?
                /// Legacy upload protocol for media (e.g. "media", "multipart").
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/settings/filters/POST/query/uploadType`.
                public var uploadType: Components.Parameters.UploadType?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - _dollar__xgafv: V1 error format.
                ///   - accessToken: OAuth access token.
                ///   - alt: Data format for response.
                ///   - callback: JSONP
                ///   - fields: Selector specifying which fields to include in a partial response.
                ///   - key: API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
                ///   - oauthToken: OAuth 2.0 token for the current user.
                ///   - prettyPrint: Returns response with indentations and line breaks.
                ///   - quotaUser: Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
                ///   - uploadProtocol: Upload protocol for media (e.g. "raw", "multipart").
                ///   - uploadType: Legacy upload protocol for media (e.g. "media", "multipart").
                public init(
                    _dollar__xgafv: Components.Parameters.__period_xgafv? = nil,
                    accessToken: Components.Parameters.AccessToken? = nil,
                    alt: Components.Parameters.Alt? = nil,
                    callback: Components.Parameters.Callback? = nil,
                    fields: Components.Parameters.Fields? = nil,
                    key: Components.Parameters.Key? = nil,
                    oauthToken: Components.Parameters.OauthToken? = nil,
                    prettyPrint: Components.Parameters.PrettyPrint? = nil,
                    quotaUser: Components.Parameters.QuotaUser? = nil,
                    uploadProtocol: Components.Parameters.UploadProtocol? = nil,
                    uploadType: Components.Parameters.UploadType? = nil
                ) {
                    self._dollar__xgafv = _dollar__xgafv
                    self.accessToken = accessToken
                    self.alt = alt
                    self.callback = callback
                    self.fields = fields
                    self.key = key
                    self.oauthToken = oauthToken
                    self.prettyPrint = prettyPrint
                    self.quotaUser = quotaUser
                    self.uploadProtocol = uploadProtocol
                    self.uploadType = uploadType
                }
            }
            public var query: Operations.Gmail_users_settings_filters_create.Input.Query
            /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/settings/filters/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.Gmail_users_settings_filters_create.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.Gmail_users_settings_filters_create.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.Gmail_users_settings_filters_create.Input.Headers
            /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/settings/filters/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/settings/filters/POST/requestBody/content/application\/json`.
                case json(Components.Schemas.Filter)
            }
            public var body: Operations.Gmail_users_settings_filters_create.Input.Body?
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - query:
            ///   - headers:
            ///   - body:
            public init(
                path: Operations.Gmail_users_settings_filters_create.Input.Path,
                query: Operations.Gmail_users_settings_filters_create.Input.Query = .init(),
                headers: Operations.Gmail_users_settings_filters_create.Input.Headers = .init(),
                body: Operations.Gmail_users_settings_filters_create.Input.Body? = nil
            ) {
                self.path = path
                self.query = query
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/settings/filters/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/settings/filters/POST/responses/200/content/application\/json`.
                    case json(Components.Schemas.Filter)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.Filter {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.Gmail_users_settings_filters_create.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.Gmail_users_settings_filters_create.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Successful response
            ///
            /// - Remark: Generated from `#/paths//gmail/v1/users/{userId}/settings/filters/post(gmail.users.settings.filters.create)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.Gmail_users_settings_filters_create.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.Gmail_users_settings_filters_create.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Gets a filter.
    ///
    /// - Remark: HTTP `GET /gmail/v1/users/{userId}/settings/filters/{id}`.
    /// - Remark: Generated from `#/paths//gmail/v1/users/{userId}/settings/filters/{id}/get(gmail.users.settings.filters.get)`.
    public enum Gmail_users_settings_filters_get {
        public static let id: Swift.String = "gmail.users.settings.filters.get"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/settings/filters/{id}/GET/path`.
            public struct Path: Sendable, Hashable {
                /// User's email address. The special value "me" can be used to indicate the authenticated user.
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/settings/filters/{id}/GET/path/userId`.
                public var userId: Swift.String
                /// The ID of the filter to be fetched.
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/settings/filters/{id}/GET/path/id`.
                public var id: Swift.String
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - userId: User's email address. The special value "me" can be used to indicate the authenticated user.
                ///   - id: The ID of the filter to be fetched.
                public init(
                    userId: Swift.String,
                    id: Swift.String
                ) {
                    self.userId = userId
                    self.id = id
                }
            }
            public var path: Operations.Gmail_users_settings_filters_get.Input.Path
            /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/settings/filters/{id}/GET/query`.
            public struct Query: Sendable, Hashable {
                /// - Remark: Generated from `#/components/parameters/_.xgafv`.
                @frozen public enum __period_xgafv: String, Codable, Hashable, Sendable, CaseIterable {
                    case _1 = "1"
                    case _2 = "2"
                }
                /// V1 error format.
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/settings/filters/{id}/GET/query/$.xgafv`.
                public var _dollar__xgafv: Components.Parameters.__period_xgafv?
                /// OAuth access token.
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/settings/filters/{id}/GET/query/access_token`.
                public var accessToken: Components.Parameters.AccessToken?
                /// - Remark: Generated from `#/components/parameters/alt`.
                @frozen public enum Alt: String, Codable, Hashable, Sendable, CaseIterable {
                    case json = "json"
                    case media = "media"
                    case proto = "proto"
                }
                /// Data format for response.
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/settings/filters/{id}/GET/query/alt`.
                public var alt: Components.Parameters.Alt?
                /// JSONP
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/settings/filters/{id}/GET/query/callback`.
                public var callback: Components.Parameters.Callback?
                /// Selector specifying which fields to include in a partial response.
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/settings/filters/{id}/GET/query/fields`.
                public var fields: Components.Parameters.Fields?
                /// API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/settings/filters/{id}/GET/query/key`.
                public var key: Components.Parameters.Key?
                /// OAuth 2.0 token for the current user.
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/settings/filters/{id}/GET/query/oauth_token`.
                public var oauthToken: Components.Parameters.OauthToken?
                /// Returns response with indentations and line breaks.
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/settings/filters/{id}/GET/query/prettyPrint`.
                public var prettyPrint: Components.Parameters.PrettyPrint?
                /// Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/settings/filters/{id}/GET/query/quotaUser`.
                public var quotaUser: Components.Parameters.QuotaUser?
                /// Upload protocol for media (e.g. "raw", "multipart").
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/settings/filters/{id}/GET/query/upload_protocol`.
                public var uploadProtocol: Components.Parameters.UploadProtocol?
                /// Legacy upload protocol for media (e.g. "media", "multipart").
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/settings/filters/{id}/GET/query/uploadType`.
                public var uploadType: Components.Parameters.UploadType?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - _dollar__xgafv: V1 error format.
                ///   - accessToken: OAuth access token.
                ///   - alt: Data format for response.
                ///   - callback: JSONP
                ///   - fields: Selector specifying which fields to include in a partial response.
                ///   - key: API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
                ///   - oauthToken: OAuth 2.0 token for the current user.
                ///   - prettyPrint: Returns response with indentations and line breaks.
                ///   - quotaUser: Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
                ///   - uploadProtocol: Upload protocol for media (e.g. "raw", "multipart").
                ///   - uploadType: Legacy upload protocol for media (e.g. "media", "multipart").
                public init(
                    _dollar__xgafv: Components.Parameters.__period_xgafv? = nil,
                    accessToken: Components.Parameters.AccessToken? = nil,
                    alt: Components.Parameters.Alt? = nil,
                    callback: Components.Parameters.Callback? = nil,
                    fields: Components.Parameters.Fields? = nil,
                    key: Components.Parameters.Key? = nil,
                    oauthToken: Components.Parameters.OauthToken? = nil,
                    prettyPrint: Components.Parameters.PrettyPrint? = nil,
                    quotaUser: Components.Parameters.QuotaUser? = nil,
                    uploadProtocol: Components.Parameters.UploadProtocol? = nil,
                    uploadType: Components.Parameters.UploadType? = nil
                ) {
                    self._dollar__xgafv = _dollar__xgafv
                    self.accessToken = accessToken
                    self.alt = alt
                    self.callback = callback
                    self.fields = fields
                    self.key = key
                    self.oauthToken = oauthToken
                    self.prettyPrint = prettyPrint
                    self.quotaUser = quotaUser
                    self.uploadProtocol = uploadProtocol
                    self.uploadType = uploadType
                }
            }
            public var query: Operations.Gmail_users_settings_filters_get.Input.Query
            /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/settings/filters/{id}/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.Gmail_users_settings_filters_get.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.Gmail_users_settings_filters_get.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.Gmail_users_settings_filters_get.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - query:
            ///   - headers:
            public init(
                path: Operations.Gmail_users_settings_filters_get.Input.Path,
                query: Operations.Gmail_users_settings_filters_get.Input.Query = .init(),
                headers: Operations.Gmail_users_settings_filters_get.Input.Headers = .init()
            ) {
                self.path = path
                self.query = query
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/settings/filters/{id}/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/settings/filters/{id}/GET/responses/200/content/application\/json`.
                    case json(Components.Schemas.Filter)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.Filter {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.Gmail_users_settings_filters_get.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.Gmail_users_settings_filters_get.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Successful response
            ///
            /// - Remark: Generated from `#/paths//gmail/v1/users/{userId}/settings/filters/{id}/get(gmail.users.settings.filters.get)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.Gmail_users_settings_filters_get.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.Gmail_users_settings_filters_get.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Immediately and permanently deletes the specified filter.
    ///
    /// - Remark: HTTP `DELETE /gmail/v1/users/{userId}/settings/filters/{id}`.
    /// - Remark: Generated from `#/paths//gmail/v1/users/{userId}/settings/filters/{id}/delete(gmail.users.settings.filters.delete)`.
    public enum Gmail_users_settings_filters_delete {
        public static let id: Swift.String = "gmail.users.settings.filters.delete"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/settings/filters/{id}/DELETE/path`.
            public struct Path: Sendable, Hashable {
                /// User's email address. The special value "me" can be used to indicate the authenticated user.
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/settings/filters/{id}/DELETE/path/userId`.
                public var userId: Swift.String
                /// The ID of the filter to be deleted.
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/settings/filters/{id}/DELETE/path/id`.
                public var id: Swift.String
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - userId: User's email address. The special value "me" can be used to indicate the authenticated user.
                ///   - id: The ID of the filter to be deleted.
                public init(
                    userId: Swift.String,
                    id: Swift.String
                ) {
                    self.userId = userId
                    self.id = id
                }
            }
            public var path: Operations.Gmail_users_settings_filters_delete.Input.Path
            /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/settings/filters/{id}/DELETE/query`.
            public struct Query: Sendable, Hashable {
                /// - Remark: Generated from `#/components/parameters/_.xgafv`.
                @frozen public enum __period_xgafv: String, Codable, Hashable, Sendable, CaseIterable {
                    case _1 = "1"
                    case _2 = "2"
                }
                /// V1 error format.
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/settings/filters/{id}/DELETE/query/$.xgafv`.
                public var _dollar__xgafv: Components.Parameters.__period_xgafv?
                /// OAuth access token.
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/settings/filters/{id}/DELETE/query/access_token`.
                public var accessToken: Components.Parameters.AccessToken?
                /// - Remark: Generated from `#/components/parameters/alt`.
                @frozen public enum Alt: String, Codable, Hashable, Sendable, CaseIterable {
                    case json = "json"
                    case media = "media"
                    case proto = "proto"
                }
                /// Data format for response.
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/settings/filters/{id}/DELETE/query/alt`.
                public var alt: Components.Parameters.Alt?
                /// JSONP
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/settings/filters/{id}/DELETE/query/callback`.
                public var callback: Components.Parameters.Callback?
                /// Selector specifying which fields to include in a partial response.
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/settings/filters/{id}/DELETE/query/fields`.
                public var fields: Components.Parameters.Fields?
                /// API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/settings/filters/{id}/DELETE/query/key`.
                public var key: Components.Parameters.Key?
                /// OAuth 2.0 token for the current user.
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/settings/filters/{id}/DELETE/query/oauth_token`.
                public var oauthToken: Components.Parameters.OauthToken?
                /// Returns response with indentations and line breaks.
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/settings/filters/{id}/DELETE/query/prettyPrint`.
                public var prettyPrint: Components.Parameters.PrettyPrint?
                /// Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/settings/filters/{id}/DELETE/query/quotaUser`.
                public var quotaUser: Components.Parameters.QuotaUser?
                /// Upload protocol for media (e.g. "raw", "multipart").
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/settings/filters/{id}/DELETE/query/upload_protocol`.
                public var uploadProtocol: Components.Parameters.UploadProtocol?
                /// Legacy upload protocol for media (e.g. "media", "multipart").
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/settings/filters/{id}/DELETE/query/uploadType`.
                public var uploadType: Components.Parameters.UploadType?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - _dollar__xgafv: V1 error format.
                ///   - accessToken: OAuth access token.
                ///   - alt: Data format for response.
                ///   - callback: JSONP
                ///   - fields: Selector specifying which fields to include in a partial response.
                ///   - key: API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
                ///   - oauthToken: OAuth 2.0 token for the current user.
                ///   - prettyPrint: Returns response with indentations and line breaks.
                ///   - quotaUser: Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
                ///   - uploadProtocol: Upload protocol for media (e.g. "raw", "multipart").
                ///   - uploadType: Legacy upload protocol for media (e.g. "media", "multipart").
                public init(
                    _dollar__xgafv: Components.Parameters.__period_xgafv? = nil,
                    accessToken: Components.Parameters.AccessToken? = nil,
                    alt: Components.Parameters.Alt? = nil,
                    callback: Components.Parameters.Callback? = nil,
                    fields: Components.Parameters.Fields? = nil,
                    key: Components.Parameters.Key? = nil,
                    oauthToken: Components.Parameters.OauthToken? = nil,
                    prettyPrint: Components.Parameters.PrettyPrint? = nil,
                    quotaUser: Components.Parameters.QuotaUser? = nil,
                    uploadProtocol: Components.Parameters.UploadProtocol? = nil,
                    uploadType: Components.Parameters.UploadType? = nil
                ) {
                    self._dollar__xgafv = _dollar__xgafv
                    self.accessToken = accessToken
                    self.alt = alt
                    self.callback = callback
                    self.fields = fields
                    self.key = key
                    self.oauthToken = oauthToken
                    self.prettyPrint = prettyPrint
                    self.quotaUser = quotaUser
                    self.uploadProtocol = uploadProtocol
                    self.uploadType = uploadType
                }
            }
            public var query: Operations.Gmail_users_settings_filters_delete.Input.Query
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - query:
            public init(
                path: Operations.Gmail_users_settings_filters_delete.Input.Path,
                query: Operations.Gmail_users_settings_filters_delete.Input.Query = .init()
            ) {
                self.path = path
                self.query = query
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// Creates a new `Ok`.
                public init() {}
            }
            /// Successful response
            ///
            /// - Remark: Generated from `#/paths//gmail/v1/users/{userId}/settings/filters/{id}/delete(gmail.users.settings.filters.delete)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.Gmail_users_settings_filters_delete.Output.Ok)
            /// Successful response
            ///
            /// - Remark: Generated from `#/paths//gmail/v1/users/{userId}/settings/filters/{id}/delete(gmail.users.settings.filters.delete)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            public static var ok: Self {
                .ok(.init())
            }
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.Gmail_users_settings_filters_delete.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
    }
    /// Lists the forwarding addresses for the specified account.
    ///
    /// - Remark: HTTP `GET /gmail/v1/users/{userId}/settings/forwardingAddresses`.
    /// - Remark: Generated from `#/paths//gmail/v1/users/{userId}/settings/forwardingAddresses/get(gmail.users.settings.forwardingAddresses.list)`.
    public enum Gmail_users_settings_forwardingAddresses_list {
        public static let id: Swift.String = "gmail.users.settings.forwardingAddresses.list"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/settings/forwardingAddresses/GET/path`.
            public struct Path: Sendable, Hashable {
                /// User's email address. The special value "me" can be used to indicate the authenticated user.
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/settings/forwardingAddresses/GET/path/userId`.
                public var userId: Swift.String
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - userId: User's email address. The special value "me" can be used to indicate the authenticated user.
                public init(userId: Swift.String) {
                    self.userId = userId
                }
            }
            public var path: Operations.Gmail_users_settings_forwardingAddresses_list.Input.Path
            /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/settings/forwardingAddresses/GET/query`.
            public struct Query: Sendable, Hashable {
                /// - Remark: Generated from `#/components/parameters/_.xgafv`.
                @frozen public enum __period_xgafv: String, Codable, Hashable, Sendable, CaseIterable {
                    case _1 = "1"
                    case _2 = "2"
                }
                /// V1 error format.
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/settings/forwardingAddresses/GET/query/$.xgafv`.
                public var _dollar__xgafv: Components.Parameters.__period_xgafv?
                /// OAuth access token.
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/settings/forwardingAddresses/GET/query/access_token`.
                public var accessToken: Components.Parameters.AccessToken?
                /// - Remark: Generated from `#/components/parameters/alt`.
                @frozen public enum Alt: String, Codable, Hashable, Sendable, CaseIterable {
                    case json = "json"
                    case media = "media"
                    case proto = "proto"
                }
                /// Data format for response.
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/settings/forwardingAddresses/GET/query/alt`.
                public var alt: Components.Parameters.Alt?
                /// JSONP
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/settings/forwardingAddresses/GET/query/callback`.
                public var callback: Components.Parameters.Callback?
                /// Selector specifying which fields to include in a partial response.
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/settings/forwardingAddresses/GET/query/fields`.
                public var fields: Components.Parameters.Fields?
                /// API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/settings/forwardingAddresses/GET/query/key`.
                public var key: Components.Parameters.Key?
                /// OAuth 2.0 token for the current user.
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/settings/forwardingAddresses/GET/query/oauth_token`.
                public var oauthToken: Components.Parameters.OauthToken?
                /// Returns response with indentations and line breaks.
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/settings/forwardingAddresses/GET/query/prettyPrint`.
                public var prettyPrint: Components.Parameters.PrettyPrint?
                /// Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/settings/forwardingAddresses/GET/query/quotaUser`.
                public var quotaUser: Components.Parameters.QuotaUser?
                /// Upload protocol for media (e.g. "raw", "multipart").
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/settings/forwardingAddresses/GET/query/upload_protocol`.
                public var uploadProtocol: Components.Parameters.UploadProtocol?
                /// Legacy upload protocol for media (e.g. "media", "multipart").
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/settings/forwardingAddresses/GET/query/uploadType`.
                public var uploadType: Components.Parameters.UploadType?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - _dollar__xgafv: V1 error format.
                ///   - accessToken: OAuth access token.
                ///   - alt: Data format for response.
                ///   - callback: JSONP
                ///   - fields: Selector specifying which fields to include in a partial response.
                ///   - key: API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
                ///   - oauthToken: OAuth 2.0 token for the current user.
                ///   - prettyPrint: Returns response with indentations and line breaks.
                ///   - quotaUser: Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
                ///   - uploadProtocol: Upload protocol for media (e.g. "raw", "multipart").
                ///   - uploadType: Legacy upload protocol for media (e.g. "media", "multipart").
                public init(
                    _dollar__xgafv: Components.Parameters.__period_xgafv? = nil,
                    accessToken: Components.Parameters.AccessToken? = nil,
                    alt: Components.Parameters.Alt? = nil,
                    callback: Components.Parameters.Callback? = nil,
                    fields: Components.Parameters.Fields? = nil,
                    key: Components.Parameters.Key? = nil,
                    oauthToken: Components.Parameters.OauthToken? = nil,
                    prettyPrint: Components.Parameters.PrettyPrint? = nil,
                    quotaUser: Components.Parameters.QuotaUser? = nil,
                    uploadProtocol: Components.Parameters.UploadProtocol? = nil,
                    uploadType: Components.Parameters.UploadType? = nil
                ) {
                    self._dollar__xgafv = _dollar__xgafv
                    self.accessToken = accessToken
                    self.alt = alt
                    self.callback = callback
                    self.fields = fields
                    self.key = key
                    self.oauthToken = oauthToken
                    self.prettyPrint = prettyPrint
                    self.quotaUser = quotaUser
                    self.uploadProtocol = uploadProtocol
                    self.uploadType = uploadType
                }
            }
            public var query: Operations.Gmail_users_settings_forwardingAddresses_list.Input.Query
            /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/settings/forwardingAddresses/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.Gmail_users_settings_forwardingAddresses_list.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.Gmail_users_settings_forwardingAddresses_list.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.Gmail_users_settings_forwardingAddresses_list.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - query:
            ///   - headers:
            public init(
                path: Operations.Gmail_users_settings_forwardingAddresses_list.Input.Path,
                query: Operations.Gmail_users_settings_forwardingAddresses_list.Input.Query = .init(),
                headers: Operations.Gmail_users_settings_forwardingAddresses_list.Input.Headers = .init()
            ) {
                self.path = path
                self.query = query
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/settings/forwardingAddresses/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/settings/forwardingAddresses/GET/responses/200/content/application\/json`.
                    case json(Components.Schemas.ListForwardingAddressesResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.ListForwardingAddressesResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.Gmail_users_settings_forwardingAddresses_list.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.Gmail_users_settings_forwardingAddresses_list.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Successful response
            ///
            /// - Remark: Generated from `#/paths//gmail/v1/users/{userId}/settings/forwardingAddresses/get(gmail.users.settings.forwardingAddresses.list)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.Gmail_users_settings_forwardingAddresses_list.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.Gmail_users_settings_forwardingAddresses_list.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Creates a forwarding address. If ownership verification is required, a message will be sent to the recipient and the resource's verification status will be set to `pending`; otherwise, the resource will be created with verification status set to `accepted`. This method is only available to service account clients that have been delegated domain-wide authority.
    ///
    /// - Remark: HTTP `POST /gmail/v1/users/{userId}/settings/forwardingAddresses`.
    /// - Remark: Generated from `#/paths//gmail/v1/users/{userId}/settings/forwardingAddresses/post(gmail.users.settings.forwardingAddresses.create)`.
    public enum Gmail_users_settings_forwardingAddresses_create {
        public static let id: Swift.String = "gmail.users.settings.forwardingAddresses.create"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/settings/forwardingAddresses/POST/path`.
            public struct Path: Sendable, Hashable {
                /// User's email address. The special value "me" can be used to indicate the authenticated user.
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/settings/forwardingAddresses/POST/path/userId`.
                public var userId: Swift.String
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - userId: User's email address. The special value "me" can be used to indicate the authenticated user.
                public init(userId: Swift.String) {
                    self.userId = userId
                }
            }
            public var path: Operations.Gmail_users_settings_forwardingAddresses_create.Input.Path
            /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/settings/forwardingAddresses/POST/query`.
            public struct Query: Sendable, Hashable {
                /// - Remark: Generated from `#/components/parameters/_.xgafv`.
                @frozen public enum __period_xgafv: String, Codable, Hashable, Sendable, CaseIterable {
                    case _1 = "1"
                    case _2 = "2"
                }
                /// V1 error format.
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/settings/forwardingAddresses/POST/query/$.xgafv`.
                public var _dollar__xgafv: Components.Parameters.__period_xgafv?
                /// OAuth access token.
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/settings/forwardingAddresses/POST/query/access_token`.
                public var accessToken: Components.Parameters.AccessToken?
                /// - Remark: Generated from `#/components/parameters/alt`.
                @frozen public enum Alt: String, Codable, Hashable, Sendable, CaseIterable {
                    case json = "json"
                    case media = "media"
                    case proto = "proto"
                }
                /// Data format for response.
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/settings/forwardingAddresses/POST/query/alt`.
                public var alt: Components.Parameters.Alt?
                /// JSONP
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/settings/forwardingAddresses/POST/query/callback`.
                public var callback: Components.Parameters.Callback?
                /// Selector specifying which fields to include in a partial response.
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/settings/forwardingAddresses/POST/query/fields`.
                public var fields: Components.Parameters.Fields?
                /// API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/settings/forwardingAddresses/POST/query/key`.
                public var key: Components.Parameters.Key?
                /// OAuth 2.0 token for the current user.
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/settings/forwardingAddresses/POST/query/oauth_token`.
                public var oauthToken: Components.Parameters.OauthToken?
                /// Returns response with indentations and line breaks.
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/settings/forwardingAddresses/POST/query/prettyPrint`.
                public var prettyPrint: Components.Parameters.PrettyPrint?
                /// Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/settings/forwardingAddresses/POST/query/quotaUser`.
                public var quotaUser: Components.Parameters.QuotaUser?
                /// Upload protocol for media (e.g. "raw", "multipart").
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/settings/forwardingAddresses/POST/query/upload_protocol`.
                public var uploadProtocol: Components.Parameters.UploadProtocol?
                /// Legacy upload protocol for media (e.g. "media", "multipart").
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/settings/forwardingAddresses/POST/query/uploadType`.
                public var uploadType: Components.Parameters.UploadType?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - _dollar__xgafv: V1 error format.
                ///   - accessToken: OAuth access token.
                ///   - alt: Data format for response.
                ///   - callback: JSONP
                ///   - fields: Selector specifying which fields to include in a partial response.
                ///   - key: API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
                ///   - oauthToken: OAuth 2.0 token for the current user.
                ///   - prettyPrint: Returns response with indentations and line breaks.
                ///   - quotaUser: Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
                ///   - uploadProtocol: Upload protocol for media (e.g. "raw", "multipart").
                ///   - uploadType: Legacy upload protocol for media (e.g. "media", "multipart").
                public init(
                    _dollar__xgafv: Components.Parameters.__period_xgafv? = nil,
                    accessToken: Components.Parameters.AccessToken? = nil,
                    alt: Components.Parameters.Alt? = nil,
                    callback: Components.Parameters.Callback? = nil,
                    fields: Components.Parameters.Fields? = nil,
                    key: Components.Parameters.Key? = nil,
                    oauthToken: Components.Parameters.OauthToken? = nil,
                    prettyPrint: Components.Parameters.PrettyPrint? = nil,
                    quotaUser: Components.Parameters.QuotaUser? = nil,
                    uploadProtocol: Components.Parameters.UploadProtocol? = nil,
                    uploadType: Components.Parameters.UploadType? = nil
                ) {
                    self._dollar__xgafv = _dollar__xgafv
                    self.accessToken = accessToken
                    self.alt = alt
                    self.callback = callback
                    self.fields = fields
                    self.key = key
                    self.oauthToken = oauthToken
                    self.prettyPrint = prettyPrint
                    self.quotaUser = quotaUser
                    self.uploadProtocol = uploadProtocol
                    self.uploadType = uploadType
                }
            }
            public var query: Operations.Gmail_users_settings_forwardingAddresses_create.Input.Query
            /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/settings/forwardingAddresses/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.Gmail_users_settings_forwardingAddresses_create.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.Gmail_users_settings_forwardingAddresses_create.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.Gmail_users_settings_forwardingAddresses_create.Input.Headers
            /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/settings/forwardingAddresses/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/settings/forwardingAddresses/POST/requestBody/content/application\/json`.
                case json(Components.Schemas.ForwardingAddress)
            }
            public var body: Operations.Gmail_users_settings_forwardingAddresses_create.Input.Body?
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - query:
            ///   - headers:
            ///   - body:
            public init(
                path: Operations.Gmail_users_settings_forwardingAddresses_create.Input.Path,
                query: Operations.Gmail_users_settings_forwardingAddresses_create.Input.Query = .init(),
                headers: Operations.Gmail_users_settings_forwardingAddresses_create.Input.Headers = .init(),
                body: Operations.Gmail_users_settings_forwardingAddresses_create.Input.Body? = nil
            ) {
                self.path = path
                self.query = query
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/settings/forwardingAddresses/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/settings/forwardingAddresses/POST/responses/200/content/application\/json`.
                    case json(Components.Schemas.ForwardingAddress)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.ForwardingAddress {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.Gmail_users_settings_forwardingAddresses_create.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.Gmail_users_settings_forwardingAddresses_create.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Successful response
            ///
            /// - Remark: Generated from `#/paths//gmail/v1/users/{userId}/settings/forwardingAddresses/post(gmail.users.settings.forwardingAddresses.create)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.Gmail_users_settings_forwardingAddresses_create.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.Gmail_users_settings_forwardingAddresses_create.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Gets the specified forwarding address.
    ///
    /// - Remark: HTTP `GET /gmail/v1/users/{userId}/settings/forwardingAddresses/{forwardingEmail}`.
    /// - Remark: Generated from `#/paths//gmail/v1/users/{userId}/settings/forwardingAddresses/{forwardingEmail}/get(gmail.users.settings.forwardingAddresses.get)`.
    public enum Gmail_users_settings_forwardingAddresses_get {
        public static let id: Swift.String = "gmail.users.settings.forwardingAddresses.get"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/settings/forwardingAddresses/{forwardingEmail}/GET/path`.
            public struct Path: Sendable, Hashable {
                /// User's email address. The special value "me" can be used to indicate the authenticated user.
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/settings/forwardingAddresses/{forwardingEmail}/GET/path/userId`.
                public var userId: Swift.String
                /// The forwarding address to be retrieved.
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/settings/forwardingAddresses/{forwardingEmail}/GET/path/forwardingEmail`.
                public var forwardingEmail: Swift.String
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - userId: User's email address. The special value "me" can be used to indicate the authenticated user.
                ///   - forwardingEmail: The forwarding address to be retrieved.
                public init(
                    userId: Swift.String,
                    forwardingEmail: Swift.String
                ) {
                    self.userId = userId
                    self.forwardingEmail = forwardingEmail
                }
            }
            public var path: Operations.Gmail_users_settings_forwardingAddresses_get.Input.Path
            /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/settings/forwardingAddresses/{forwardingEmail}/GET/query`.
            public struct Query: Sendable, Hashable {
                /// - Remark: Generated from `#/components/parameters/_.xgafv`.
                @frozen public enum __period_xgafv: String, Codable, Hashable, Sendable, CaseIterable {
                    case _1 = "1"
                    case _2 = "2"
                }
                /// V1 error format.
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/settings/forwardingAddresses/{forwardingEmail}/GET/query/$.xgafv`.
                public var _dollar__xgafv: Components.Parameters.__period_xgafv?
                /// OAuth access token.
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/settings/forwardingAddresses/{forwardingEmail}/GET/query/access_token`.
                public var accessToken: Components.Parameters.AccessToken?
                /// - Remark: Generated from `#/components/parameters/alt`.
                @frozen public enum Alt: String, Codable, Hashable, Sendable, CaseIterable {
                    case json = "json"
                    case media = "media"
                    case proto = "proto"
                }
                /// Data format for response.
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/settings/forwardingAddresses/{forwardingEmail}/GET/query/alt`.
                public var alt: Components.Parameters.Alt?
                /// JSONP
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/settings/forwardingAddresses/{forwardingEmail}/GET/query/callback`.
                public var callback: Components.Parameters.Callback?
                /// Selector specifying which fields to include in a partial response.
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/settings/forwardingAddresses/{forwardingEmail}/GET/query/fields`.
                public var fields: Components.Parameters.Fields?
                /// API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/settings/forwardingAddresses/{forwardingEmail}/GET/query/key`.
                public var key: Components.Parameters.Key?
                /// OAuth 2.0 token for the current user.
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/settings/forwardingAddresses/{forwardingEmail}/GET/query/oauth_token`.
                public var oauthToken: Components.Parameters.OauthToken?
                /// Returns response with indentations and line breaks.
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/settings/forwardingAddresses/{forwardingEmail}/GET/query/prettyPrint`.
                public var prettyPrint: Components.Parameters.PrettyPrint?
                /// Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/settings/forwardingAddresses/{forwardingEmail}/GET/query/quotaUser`.
                public var quotaUser: Components.Parameters.QuotaUser?
                /// Upload protocol for media (e.g. "raw", "multipart").
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/settings/forwardingAddresses/{forwardingEmail}/GET/query/upload_protocol`.
                public var uploadProtocol: Components.Parameters.UploadProtocol?
                /// Legacy upload protocol for media (e.g. "media", "multipart").
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/settings/forwardingAddresses/{forwardingEmail}/GET/query/uploadType`.
                public var uploadType: Components.Parameters.UploadType?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - _dollar__xgafv: V1 error format.
                ///   - accessToken: OAuth access token.
                ///   - alt: Data format for response.
                ///   - callback: JSONP
                ///   - fields: Selector specifying which fields to include in a partial response.
                ///   - key: API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
                ///   - oauthToken: OAuth 2.0 token for the current user.
                ///   - prettyPrint: Returns response with indentations and line breaks.
                ///   - quotaUser: Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
                ///   - uploadProtocol: Upload protocol for media (e.g. "raw", "multipart").
                ///   - uploadType: Legacy upload protocol for media (e.g. "media", "multipart").
                public init(
                    _dollar__xgafv: Components.Parameters.__period_xgafv? = nil,
                    accessToken: Components.Parameters.AccessToken? = nil,
                    alt: Components.Parameters.Alt? = nil,
                    callback: Components.Parameters.Callback? = nil,
                    fields: Components.Parameters.Fields? = nil,
                    key: Components.Parameters.Key? = nil,
                    oauthToken: Components.Parameters.OauthToken? = nil,
                    prettyPrint: Components.Parameters.PrettyPrint? = nil,
                    quotaUser: Components.Parameters.QuotaUser? = nil,
                    uploadProtocol: Components.Parameters.UploadProtocol? = nil,
                    uploadType: Components.Parameters.UploadType? = nil
                ) {
                    self._dollar__xgafv = _dollar__xgafv
                    self.accessToken = accessToken
                    self.alt = alt
                    self.callback = callback
                    self.fields = fields
                    self.key = key
                    self.oauthToken = oauthToken
                    self.prettyPrint = prettyPrint
                    self.quotaUser = quotaUser
                    self.uploadProtocol = uploadProtocol
                    self.uploadType = uploadType
                }
            }
            public var query: Operations.Gmail_users_settings_forwardingAddresses_get.Input.Query
            /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/settings/forwardingAddresses/{forwardingEmail}/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.Gmail_users_settings_forwardingAddresses_get.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.Gmail_users_settings_forwardingAddresses_get.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.Gmail_users_settings_forwardingAddresses_get.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - query:
            ///   - headers:
            public init(
                path: Operations.Gmail_users_settings_forwardingAddresses_get.Input.Path,
                query: Operations.Gmail_users_settings_forwardingAddresses_get.Input.Query = .init(),
                headers: Operations.Gmail_users_settings_forwardingAddresses_get.Input.Headers = .init()
            ) {
                self.path = path
                self.query = query
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/settings/forwardingAddresses/{forwardingEmail}/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/settings/forwardingAddresses/{forwardingEmail}/GET/responses/200/content/application\/json`.
                    case json(Components.Schemas.ForwardingAddress)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.ForwardingAddress {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.Gmail_users_settings_forwardingAddresses_get.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.Gmail_users_settings_forwardingAddresses_get.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Successful response
            ///
            /// - Remark: Generated from `#/paths//gmail/v1/users/{userId}/settings/forwardingAddresses/{forwardingEmail}/get(gmail.users.settings.forwardingAddresses.get)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.Gmail_users_settings_forwardingAddresses_get.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.Gmail_users_settings_forwardingAddresses_get.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Deletes the specified forwarding address and revokes any verification that may have been required. This method is only available to service account clients that have been delegated domain-wide authority.
    ///
    /// - Remark: HTTP `DELETE /gmail/v1/users/{userId}/settings/forwardingAddresses/{forwardingEmail}`.
    /// - Remark: Generated from `#/paths//gmail/v1/users/{userId}/settings/forwardingAddresses/{forwardingEmail}/delete(gmail.users.settings.forwardingAddresses.delete)`.
    public enum Gmail_users_settings_forwardingAddresses_delete {
        public static let id: Swift.String = "gmail.users.settings.forwardingAddresses.delete"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/settings/forwardingAddresses/{forwardingEmail}/DELETE/path`.
            public struct Path: Sendable, Hashable {
                /// User's email address. The special value "me" can be used to indicate the authenticated user.
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/settings/forwardingAddresses/{forwardingEmail}/DELETE/path/userId`.
                public var userId: Swift.String
                /// The forwarding address to be deleted.
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/settings/forwardingAddresses/{forwardingEmail}/DELETE/path/forwardingEmail`.
                public var forwardingEmail: Swift.String
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - userId: User's email address. The special value "me" can be used to indicate the authenticated user.
                ///   - forwardingEmail: The forwarding address to be deleted.
                public init(
                    userId: Swift.String,
                    forwardingEmail: Swift.String
                ) {
                    self.userId = userId
                    self.forwardingEmail = forwardingEmail
                }
            }
            public var path: Operations.Gmail_users_settings_forwardingAddresses_delete.Input.Path
            /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/settings/forwardingAddresses/{forwardingEmail}/DELETE/query`.
            public struct Query: Sendable, Hashable {
                /// - Remark: Generated from `#/components/parameters/_.xgafv`.
                @frozen public enum __period_xgafv: String, Codable, Hashable, Sendable, CaseIterable {
                    case _1 = "1"
                    case _2 = "2"
                }
                /// V1 error format.
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/settings/forwardingAddresses/{forwardingEmail}/DELETE/query/$.xgafv`.
                public var _dollar__xgafv: Components.Parameters.__period_xgafv?
                /// OAuth access token.
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/settings/forwardingAddresses/{forwardingEmail}/DELETE/query/access_token`.
                public var accessToken: Components.Parameters.AccessToken?
                /// - Remark: Generated from `#/components/parameters/alt`.
                @frozen public enum Alt: String, Codable, Hashable, Sendable, CaseIterable {
                    case json = "json"
                    case media = "media"
                    case proto = "proto"
                }
                /// Data format for response.
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/settings/forwardingAddresses/{forwardingEmail}/DELETE/query/alt`.
                public var alt: Components.Parameters.Alt?
                /// JSONP
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/settings/forwardingAddresses/{forwardingEmail}/DELETE/query/callback`.
                public var callback: Components.Parameters.Callback?
                /// Selector specifying which fields to include in a partial response.
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/settings/forwardingAddresses/{forwardingEmail}/DELETE/query/fields`.
                public var fields: Components.Parameters.Fields?
                /// API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/settings/forwardingAddresses/{forwardingEmail}/DELETE/query/key`.
                public var key: Components.Parameters.Key?
                /// OAuth 2.0 token for the current user.
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/settings/forwardingAddresses/{forwardingEmail}/DELETE/query/oauth_token`.
                public var oauthToken: Components.Parameters.OauthToken?
                /// Returns response with indentations and line breaks.
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/settings/forwardingAddresses/{forwardingEmail}/DELETE/query/prettyPrint`.
                public var prettyPrint: Components.Parameters.PrettyPrint?
                /// Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/settings/forwardingAddresses/{forwardingEmail}/DELETE/query/quotaUser`.
                public var quotaUser: Components.Parameters.QuotaUser?
                /// Upload protocol for media (e.g. "raw", "multipart").
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/settings/forwardingAddresses/{forwardingEmail}/DELETE/query/upload_protocol`.
                public var uploadProtocol: Components.Parameters.UploadProtocol?
                /// Legacy upload protocol for media (e.g. "media", "multipart").
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/settings/forwardingAddresses/{forwardingEmail}/DELETE/query/uploadType`.
                public var uploadType: Components.Parameters.UploadType?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - _dollar__xgafv: V1 error format.
                ///   - accessToken: OAuth access token.
                ///   - alt: Data format for response.
                ///   - callback: JSONP
                ///   - fields: Selector specifying which fields to include in a partial response.
                ///   - key: API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
                ///   - oauthToken: OAuth 2.0 token for the current user.
                ///   - prettyPrint: Returns response with indentations and line breaks.
                ///   - quotaUser: Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
                ///   - uploadProtocol: Upload protocol for media (e.g. "raw", "multipart").
                ///   - uploadType: Legacy upload protocol for media (e.g. "media", "multipart").
                public init(
                    _dollar__xgafv: Components.Parameters.__period_xgafv? = nil,
                    accessToken: Components.Parameters.AccessToken? = nil,
                    alt: Components.Parameters.Alt? = nil,
                    callback: Components.Parameters.Callback? = nil,
                    fields: Components.Parameters.Fields? = nil,
                    key: Components.Parameters.Key? = nil,
                    oauthToken: Components.Parameters.OauthToken? = nil,
                    prettyPrint: Components.Parameters.PrettyPrint? = nil,
                    quotaUser: Components.Parameters.QuotaUser? = nil,
                    uploadProtocol: Components.Parameters.UploadProtocol? = nil,
                    uploadType: Components.Parameters.UploadType? = nil
                ) {
                    self._dollar__xgafv = _dollar__xgafv
                    self.accessToken = accessToken
                    self.alt = alt
                    self.callback = callback
                    self.fields = fields
                    self.key = key
                    self.oauthToken = oauthToken
                    self.prettyPrint = prettyPrint
                    self.quotaUser = quotaUser
                    self.uploadProtocol = uploadProtocol
                    self.uploadType = uploadType
                }
            }
            public var query: Operations.Gmail_users_settings_forwardingAddresses_delete.Input.Query
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - query:
            public init(
                path: Operations.Gmail_users_settings_forwardingAddresses_delete.Input.Path,
                query: Operations.Gmail_users_settings_forwardingAddresses_delete.Input.Query = .init()
            ) {
                self.path = path
                self.query = query
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// Creates a new `Ok`.
                public init() {}
            }
            /// Successful response
            ///
            /// - Remark: Generated from `#/paths//gmail/v1/users/{userId}/settings/forwardingAddresses/{forwardingEmail}/delete(gmail.users.settings.forwardingAddresses.delete)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.Gmail_users_settings_forwardingAddresses_delete.Output.Ok)
            /// Successful response
            ///
            /// - Remark: Generated from `#/paths//gmail/v1/users/{userId}/settings/forwardingAddresses/{forwardingEmail}/delete(gmail.users.settings.forwardingAddresses.delete)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            public static var ok: Self {
                .ok(.init())
            }
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.Gmail_users_settings_forwardingAddresses_delete.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
    }
    /// Gets IMAP settings.
    ///
    /// - Remark: HTTP `GET /gmail/v1/users/{userId}/settings/imap`.
    /// - Remark: Generated from `#/paths//gmail/v1/users/{userId}/settings/imap/get(gmail.users.settings.getImap)`.
    public enum Gmail_users_settings_getImap {
        public static let id: Swift.String = "gmail.users.settings.getImap"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/settings/imap/GET/path`.
            public struct Path: Sendable, Hashable {
                /// User's email address. The special value "me" can be used to indicate the authenticated user.
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/settings/imap/GET/path/userId`.
                public var userId: Swift.String
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - userId: User's email address. The special value "me" can be used to indicate the authenticated user.
                public init(userId: Swift.String) {
                    self.userId = userId
                }
            }
            public var path: Operations.Gmail_users_settings_getImap.Input.Path
            /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/settings/imap/GET/query`.
            public struct Query: Sendable, Hashable {
                /// - Remark: Generated from `#/components/parameters/_.xgafv`.
                @frozen public enum __period_xgafv: String, Codable, Hashable, Sendable, CaseIterable {
                    case _1 = "1"
                    case _2 = "2"
                }
                /// V1 error format.
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/settings/imap/GET/query/$.xgafv`.
                public var _dollar__xgafv: Components.Parameters.__period_xgafv?
                /// OAuth access token.
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/settings/imap/GET/query/access_token`.
                public var accessToken: Components.Parameters.AccessToken?
                /// - Remark: Generated from `#/components/parameters/alt`.
                @frozen public enum Alt: String, Codable, Hashable, Sendable, CaseIterable {
                    case json = "json"
                    case media = "media"
                    case proto = "proto"
                }
                /// Data format for response.
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/settings/imap/GET/query/alt`.
                public var alt: Components.Parameters.Alt?
                /// JSONP
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/settings/imap/GET/query/callback`.
                public var callback: Components.Parameters.Callback?
                /// Selector specifying which fields to include in a partial response.
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/settings/imap/GET/query/fields`.
                public var fields: Components.Parameters.Fields?
                /// API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/settings/imap/GET/query/key`.
                public var key: Components.Parameters.Key?
                /// OAuth 2.0 token for the current user.
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/settings/imap/GET/query/oauth_token`.
                public var oauthToken: Components.Parameters.OauthToken?
                /// Returns response with indentations and line breaks.
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/settings/imap/GET/query/prettyPrint`.
                public var prettyPrint: Components.Parameters.PrettyPrint?
                /// Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/settings/imap/GET/query/quotaUser`.
                public var quotaUser: Components.Parameters.QuotaUser?
                /// Upload protocol for media (e.g. "raw", "multipart").
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/settings/imap/GET/query/upload_protocol`.
                public var uploadProtocol: Components.Parameters.UploadProtocol?
                /// Legacy upload protocol for media (e.g. "media", "multipart").
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/settings/imap/GET/query/uploadType`.
                public var uploadType: Components.Parameters.UploadType?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - _dollar__xgafv: V1 error format.
                ///   - accessToken: OAuth access token.
                ///   - alt: Data format for response.
                ///   - callback: JSONP
                ///   - fields: Selector specifying which fields to include in a partial response.
                ///   - key: API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
                ///   - oauthToken: OAuth 2.0 token for the current user.
                ///   - prettyPrint: Returns response with indentations and line breaks.
                ///   - quotaUser: Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
                ///   - uploadProtocol: Upload protocol for media (e.g. "raw", "multipart").
                ///   - uploadType: Legacy upload protocol for media (e.g. "media", "multipart").
                public init(
                    _dollar__xgafv: Components.Parameters.__period_xgafv? = nil,
                    accessToken: Components.Parameters.AccessToken? = nil,
                    alt: Components.Parameters.Alt? = nil,
                    callback: Components.Parameters.Callback? = nil,
                    fields: Components.Parameters.Fields? = nil,
                    key: Components.Parameters.Key? = nil,
                    oauthToken: Components.Parameters.OauthToken? = nil,
                    prettyPrint: Components.Parameters.PrettyPrint? = nil,
                    quotaUser: Components.Parameters.QuotaUser? = nil,
                    uploadProtocol: Components.Parameters.UploadProtocol? = nil,
                    uploadType: Components.Parameters.UploadType? = nil
                ) {
                    self._dollar__xgafv = _dollar__xgafv
                    self.accessToken = accessToken
                    self.alt = alt
                    self.callback = callback
                    self.fields = fields
                    self.key = key
                    self.oauthToken = oauthToken
                    self.prettyPrint = prettyPrint
                    self.quotaUser = quotaUser
                    self.uploadProtocol = uploadProtocol
                    self.uploadType = uploadType
                }
            }
            public var query: Operations.Gmail_users_settings_getImap.Input.Query
            /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/settings/imap/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.Gmail_users_settings_getImap.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.Gmail_users_settings_getImap.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.Gmail_users_settings_getImap.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - query:
            ///   - headers:
            public init(
                path: Operations.Gmail_users_settings_getImap.Input.Path,
                query: Operations.Gmail_users_settings_getImap.Input.Query = .init(),
                headers: Operations.Gmail_users_settings_getImap.Input.Headers = .init()
            ) {
                self.path = path
                self.query = query
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/settings/imap/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/settings/imap/GET/responses/200/content/application\/json`.
                    case json(Components.Schemas.ImapSettings)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.ImapSettings {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.Gmail_users_settings_getImap.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.Gmail_users_settings_getImap.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Successful response
            ///
            /// - Remark: Generated from `#/paths//gmail/v1/users/{userId}/settings/imap/get(gmail.users.settings.getImap)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.Gmail_users_settings_getImap.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.Gmail_users_settings_getImap.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Updates IMAP settings.
    ///
    /// - Remark: HTTP `PUT /gmail/v1/users/{userId}/settings/imap`.
    /// - Remark: Generated from `#/paths//gmail/v1/users/{userId}/settings/imap/put(gmail.users.settings.updateImap)`.
    public enum Gmail_users_settings_updateImap {
        public static let id: Swift.String = "gmail.users.settings.updateImap"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/settings/imap/PUT/path`.
            public struct Path: Sendable, Hashable {
                /// User's email address. The special value "me" can be used to indicate the authenticated user.
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/settings/imap/PUT/path/userId`.
                public var userId: Swift.String
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - userId: User's email address. The special value "me" can be used to indicate the authenticated user.
                public init(userId: Swift.String) {
                    self.userId = userId
                }
            }
            public var path: Operations.Gmail_users_settings_updateImap.Input.Path
            /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/settings/imap/PUT/query`.
            public struct Query: Sendable, Hashable {
                /// - Remark: Generated from `#/components/parameters/_.xgafv`.
                @frozen public enum __period_xgafv: String, Codable, Hashable, Sendable, CaseIterable {
                    case _1 = "1"
                    case _2 = "2"
                }
                /// V1 error format.
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/settings/imap/PUT/query/$.xgafv`.
                public var _dollar__xgafv: Components.Parameters.__period_xgafv?
                /// OAuth access token.
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/settings/imap/PUT/query/access_token`.
                public var accessToken: Components.Parameters.AccessToken?
                /// - Remark: Generated from `#/components/parameters/alt`.
                @frozen public enum Alt: String, Codable, Hashable, Sendable, CaseIterable {
                    case json = "json"
                    case media = "media"
                    case proto = "proto"
                }
                /// Data format for response.
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/settings/imap/PUT/query/alt`.
                public var alt: Components.Parameters.Alt?
                /// JSONP
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/settings/imap/PUT/query/callback`.
                public var callback: Components.Parameters.Callback?
                /// Selector specifying which fields to include in a partial response.
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/settings/imap/PUT/query/fields`.
                public var fields: Components.Parameters.Fields?
                /// API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/settings/imap/PUT/query/key`.
                public var key: Components.Parameters.Key?
                /// OAuth 2.0 token for the current user.
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/settings/imap/PUT/query/oauth_token`.
                public var oauthToken: Components.Parameters.OauthToken?
                /// Returns response with indentations and line breaks.
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/settings/imap/PUT/query/prettyPrint`.
                public var prettyPrint: Components.Parameters.PrettyPrint?
                /// Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/settings/imap/PUT/query/quotaUser`.
                public var quotaUser: Components.Parameters.QuotaUser?
                /// Upload protocol for media (e.g. "raw", "multipart").
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/settings/imap/PUT/query/upload_protocol`.
                public var uploadProtocol: Components.Parameters.UploadProtocol?
                /// Legacy upload protocol for media (e.g. "media", "multipart").
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/settings/imap/PUT/query/uploadType`.
                public var uploadType: Components.Parameters.UploadType?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - _dollar__xgafv: V1 error format.
                ///   - accessToken: OAuth access token.
                ///   - alt: Data format for response.
                ///   - callback: JSONP
                ///   - fields: Selector specifying which fields to include in a partial response.
                ///   - key: API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
                ///   - oauthToken: OAuth 2.0 token for the current user.
                ///   - prettyPrint: Returns response with indentations and line breaks.
                ///   - quotaUser: Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
                ///   - uploadProtocol: Upload protocol for media (e.g. "raw", "multipart").
                ///   - uploadType: Legacy upload protocol for media (e.g. "media", "multipart").
                public init(
                    _dollar__xgafv: Components.Parameters.__period_xgafv? = nil,
                    accessToken: Components.Parameters.AccessToken? = nil,
                    alt: Components.Parameters.Alt? = nil,
                    callback: Components.Parameters.Callback? = nil,
                    fields: Components.Parameters.Fields? = nil,
                    key: Components.Parameters.Key? = nil,
                    oauthToken: Components.Parameters.OauthToken? = nil,
                    prettyPrint: Components.Parameters.PrettyPrint? = nil,
                    quotaUser: Components.Parameters.QuotaUser? = nil,
                    uploadProtocol: Components.Parameters.UploadProtocol? = nil,
                    uploadType: Components.Parameters.UploadType? = nil
                ) {
                    self._dollar__xgafv = _dollar__xgafv
                    self.accessToken = accessToken
                    self.alt = alt
                    self.callback = callback
                    self.fields = fields
                    self.key = key
                    self.oauthToken = oauthToken
                    self.prettyPrint = prettyPrint
                    self.quotaUser = quotaUser
                    self.uploadProtocol = uploadProtocol
                    self.uploadType = uploadType
                }
            }
            public var query: Operations.Gmail_users_settings_updateImap.Input.Query
            /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/settings/imap/PUT/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.Gmail_users_settings_updateImap.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.Gmail_users_settings_updateImap.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.Gmail_users_settings_updateImap.Input.Headers
            /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/settings/imap/PUT/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/settings/imap/PUT/requestBody/content/application\/json`.
                case json(Components.Schemas.ImapSettings)
            }
            public var body: Operations.Gmail_users_settings_updateImap.Input.Body?
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - query:
            ///   - headers:
            ///   - body:
            public init(
                path: Operations.Gmail_users_settings_updateImap.Input.Path,
                query: Operations.Gmail_users_settings_updateImap.Input.Query = .init(),
                headers: Operations.Gmail_users_settings_updateImap.Input.Headers = .init(),
                body: Operations.Gmail_users_settings_updateImap.Input.Body? = nil
            ) {
                self.path = path
                self.query = query
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/settings/imap/PUT/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/settings/imap/PUT/responses/200/content/application\/json`.
                    case json(Components.Schemas.ImapSettings)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.ImapSettings {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.Gmail_users_settings_updateImap.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.Gmail_users_settings_updateImap.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Successful response
            ///
            /// - Remark: Generated from `#/paths//gmail/v1/users/{userId}/settings/imap/put(gmail.users.settings.updateImap)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.Gmail_users_settings_updateImap.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.Gmail_users_settings_updateImap.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Gets language settings.
    ///
    /// - Remark: HTTP `GET /gmail/v1/users/{userId}/settings/language`.
    /// - Remark: Generated from `#/paths//gmail/v1/users/{userId}/settings/language/get(gmail.users.settings.getLanguage)`.
    public enum Gmail_users_settings_getLanguage {
        public static let id: Swift.String = "gmail.users.settings.getLanguage"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/settings/language/GET/path`.
            public struct Path: Sendable, Hashable {
                /// User's email address. The special value "me" can be used to indicate the authenticated user.
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/settings/language/GET/path/userId`.
                public var userId: Swift.String
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - userId: User's email address. The special value "me" can be used to indicate the authenticated user.
                public init(userId: Swift.String) {
                    self.userId = userId
                }
            }
            public var path: Operations.Gmail_users_settings_getLanguage.Input.Path
            /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/settings/language/GET/query`.
            public struct Query: Sendable, Hashable {
                /// - Remark: Generated from `#/components/parameters/_.xgafv`.
                @frozen public enum __period_xgafv: String, Codable, Hashable, Sendable, CaseIterable {
                    case _1 = "1"
                    case _2 = "2"
                }
                /// V1 error format.
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/settings/language/GET/query/$.xgafv`.
                public var _dollar__xgafv: Components.Parameters.__period_xgafv?
                /// OAuth access token.
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/settings/language/GET/query/access_token`.
                public var accessToken: Components.Parameters.AccessToken?
                /// - Remark: Generated from `#/components/parameters/alt`.
                @frozen public enum Alt: String, Codable, Hashable, Sendable, CaseIterable {
                    case json = "json"
                    case media = "media"
                    case proto = "proto"
                }
                /// Data format for response.
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/settings/language/GET/query/alt`.
                public var alt: Components.Parameters.Alt?
                /// JSONP
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/settings/language/GET/query/callback`.
                public var callback: Components.Parameters.Callback?
                /// Selector specifying which fields to include in a partial response.
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/settings/language/GET/query/fields`.
                public var fields: Components.Parameters.Fields?
                /// API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/settings/language/GET/query/key`.
                public var key: Components.Parameters.Key?
                /// OAuth 2.0 token for the current user.
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/settings/language/GET/query/oauth_token`.
                public var oauthToken: Components.Parameters.OauthToken?
                /// Returns response with indentations and line breaks.
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/settings/language/GET/query/prettyPrint`.
                public var prettyPrint: Components.Parameters.PrettyPrint?
                /// Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/settings/language/GET/query/quotaUser`.
                public var quotaUser: Components.Parameters.QuotaUser?
                /// Upload protocol for media (e.g. "raw", "multipart").
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/settings/language/GET/query/upload_protocol`.
                public var uploadProtocol: Components.Parameters.UploadProtocol?
                /// Legacy upload protocol for media (e.g. "media", "multipart").
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/settings/language/GET/query/uploadType`.
                public var uploadType: Components.Parameters.UploadType?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - _dollar__xgafv: V1 error format.
                ///   - accessToken: OAuth access token.
                ///   - alt: Data format for response.
                ///   - callback: JSONP
                ///   - fields: Selector specifying which fields to include in a partial response.
                ///   - key: API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
                ///   - oauthToken: OAuth 2.0 token for the current user.
                ///   - prettyPrint: Returns response with indentations and line breaks.
                ///   - quotaUser: Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
                ///   - uploadProtocol: Upload protocol for media (e.g. "raw", "multipart").
                ///   - uploadType: Legacy upload protocol for media (e.g. "media", "multipart").
                public init(
                    _dollar__xgafv: Components.Parameters.__period_xgafv? = nil,
                    accessToken: Components.Parameters.AccessToken? = nil,
                    alt: Components.Parameters.Alt? = nil,
                    callback: Components.Parameters.Callback? = nil,
                    fields: Components.Parameters.Fields? = nil,
                    key: Components.Parameters.Key? = nil,
                    oauthToken: Components.Parameters.OauthToken? = nil,
                    prettyPrint: Components.Parameters.PrettyPrint? = nil,
                    quotaUser: Components.Parameters.QuotaUser? = nil,
                    uploadProtocol: Components.Parameters.UploadProtocol? = nil,
                    uploadType: Components.Parameters.UploadType? = nil
                ) {
                    self._dollar__xgafv = _dollar__xgafv
                    self.accessToken = accessToken
                    self.alt = alt
                    self.callback = callback
                    self.fields = fields
                    self.key = key
                    self.oauthToken = oauthToken
                    self.prettyPrint = prettyPrint
                    self.quotaUser = quotaUser
                    self.uploadProtocol = uploadProtocol
                    self.uploadType = uploadType
                }
            }
            public var query: Operations.Gmail_users_settings_getLanguage.Input.Query
            /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/settings/language/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.Gmail_users_settings_getLanguage.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.Gmail_users_settings_getLanguage.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.Gmail_users_settings_getLanguage.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - query:
            ///   - headers:
            public init(
                path: Operations.Gmail_users_settings_getLanguage.Input.Path,
                query: Operations.Gmail_users_settings_getLanguage.Input.Query = .init(),
                headers: Operations.Gmail_users_settings_getLanguage.Input.Headers = .init()
            ) {
                self.path = path
                self.query = query
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/settings/language/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/settings/language/GET/responses/200/content/application\/json`.
                    case json(Components.Schemas.LanguageSettings)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.LanguageSettings {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.Gmail_users_settings_getLanguage.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.Gmail_users_settings_getLanguage.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Successful response
            ///
            /// - Remark: Generated from `#/paths//gmail/v1/users/{userId}/settings/language/get(gmail.users.settings.getLanguage)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.Gmail_users_settings_getLanguage.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.Gmail_users_settings_getLanguage.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Updates language settings. If successful, the return object contains the `displayLanguage` that was saved for the user, which may differ from the value passed into the request. This is because the requested `displayLanguage` may not be directly supported by Gmail but have a close variant that is, and so the variant may be chosen and saved instead.
    ///
    /// - Remark: HTTP `PUT /gmail/v1/users/{userId}/settings/language`.
    /// - Remark: Generated from `#/paths//gmail/v1/users/{userId}/settings/language/put(gmail.users.settings.updateLanguage)`.
    public enum Gmail_users_settings_updateLanguage {
        public static let id: Swift.String = "gmail.users.settings.updateLanguage"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/settings/language/PUT/path`.
            public struct Path: Sendable, Hashable {
                /// User's email address. The special value "me" can be used to indicate the authenticated user.
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/settings/language/PUT/path/userId`.
                public var userId: Swift.String
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - userId: User's email address. The special value "me" can be used to indicate the authenticated user.
                public init(userId: Swift.String) {
                    self.userId = userId
                }
            }
            public var path: Operations.Gmail_users_settings_updateLanguage.Input.Path
            /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/settings/language/PUT/query`.
            public struct Query: Sendable, Hashable {
                /// - Remark: Generated from `#/components/parameters/_.xgafv`.
                @frozen public enum __period_xgafv: String, Codable, Hashable, Sendable, CaseIterable {
                    case _1 = "1"
                    case _2 = "2"
                }
                /// V1 error format.
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/settings/language/PUT/query/$.xgafv`.
                public var _dollar__xgafv: Components.Parameters.__period_xgafv?
                /// OAuth access token.
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/settings/language/PUT/query/access_token`.
                public var accessToken: Components.Parameters.AccessToken?
                /// - Remark: Generated from `#/components/parameters/alt`.
                @frozen public enum Alt: String, Codable, Hashable, Sendable, CaseIterable {
                    case json = "json"
                    case media = "media"
                    case proto = "proto"
                }
                /// Data format for response.
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/settings/language/PUT/query/alt`.
                public var alt: Components.Parameters.Alt?
                /// JSONP
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/settings/language/PUT/query/callback`.
                public var callback: Components.Parameters.Callback?
                /// Selector specifying which fields to include in a partial response.
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/settings/language/PUT/query/fields`.
                public var fields: Components.Parameters.Fields?
                /// API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/settings/language/PUT/query/key`.
                public var key: Components.Parameters.Key?
                /// OAuth 2.0 token for the current user.
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/settings/language/PUT/query/oauth_token`.
                public var oauthToken: Components.Parameters.OauthToken?
                /// Returns response with indentations and line breaks.
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/settings/language/PUT/query/prettyPrint`.
                public var prettyPrint: Components.Parameters.PrettyPrint?
                /// Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/settings/language/PUT/query/quotaUser`.
                public var quotaUser: Components.Parameters.QuotaUser?
                /// Upload protocol for media (e.g. "raw", "multipart").
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/settings/language/PUT/query/upload_protocol`.
                public var uploadProtocol: Components.Parameters.UploadProtocol?
                /// Legacy upload protocol for media (e.g. "media", "multipart").
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/settings/language/PUT/query/uploadType`.
                public var uploadType: Components.Parameters.UploadType?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - _dollar__xgafv: V1 error format.
                ///   - accessToken: OAuth access token.
                ///   - alt: Data format for response.
                ///   - callback: JSONP
                ///   - fields: Selector specifying which fields to include in a partial response.
                ///   - key: API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
                ///   - oauthToken: OAuth 2.0 token for the current user.
                ///   - prettyPrint: Returns response with indentations and line breaks.
                ///   - quotaUser: Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
                ///   - uploadProtocol: Upload protocol for media (e.g. "raw", "multipart").
                ///   - uploadType: Legacy upload protocol for media (e.g. "media", "multipart").
                public init(
                    _dollar__xgafv: Components.Parameters.__period_xgafv? = nil,
                    accessToken: Components.Parameters.AccessToken? = nil,
                    alt: Components.Parameters.Alt? = nil,
                    callback: Components.Parameters.Callback? = nil,
                    fields: Components.Parameters.Fields? = nil,
                    key: Components.Parameters.Key? = nil,
                    oauthToken: Components.Parameters.OauthToken? = nil,
                    prettyPrint: Components.Parameters.PrettyPrint? = nil,
                    quotaUser: Components.Parameters.QuotaUser? = nil,
                    uploadProtocol: Components.Parameters.UploadProtocol? = nil,
                    uploadType: Components.Parameters.UploadType? = nil
                ) {
                    self._dollar__xgafv = _dollar__xgafv
                    self.accessToken = accessToken
                    self.alt = alt
                    self.callback = callback
                    self.fields = fields
                    self.key = key
                    self.oauthToken = oauthToken
                    self.prettyPrint = prettyPrint
                    self.quotaUser = quotaUser
                    self.uploadProtocol = uploadProtocol
                    self.uploadType = uploadType
                }
            }
            public var query: Operations.Gmail_users_settings_updateLanguage.Input.Query
            /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/settings/language/PUT/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.Gmail_users_settings_updateLanguage.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.Gmail_users_settings_updateLanguage.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.Gmail_users_settings_updateLanguage.Input.Headers
            /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/settings/language/PUT/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/settings/language/PUT/requestBody/content/application\/json`.
                case json(Components.Schemas.LanguageSettings)
            }
            public var body: Operations.Gmail_users_settings_updateLanguage.Input.Body?
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - query:
            ///   - headers:
            ///   - body:
            public init(
                path: Operations.Gmail_users_settings_updateLanguage.Input.Path,
                query: Operations.Gmail_users_settings_updateLanguage.Input.Query = .init(),
                headers: Operations.Gmail_users_settings_updateLanguage.Input.Headers = .init(),
                body: Operations.Gmail_users_settings_updateLanguage.Input.Body? = nil
            ) {
                self.path = path
                self.query = query
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/settings/language/PUT/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/settings/language/PUT/responses/200/content/application\/json`.
                    case json(Components.Schemas.LanguageSettings)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.LanguageSettings {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.Gmail_users_settings_updateLanguage.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.Gmail_users_settings_updateLanguage.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Successful response
            ///
            /// - Remark: Generated from `#/paths//gmail/v1/users/{userId}/settings/language/put(gmail.users.settings.updateLanguage)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.Gmail_users_settings_updateLanguage.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.Gmail_users_settings_updateLanguage.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Gets POP settings.
    ///
    /// - Remark: HTTP `GET /gmail/v1/users/{userId}/settings/pop`.
    /// - Remark: Generated from `#/paths//gmail/v1/users/{userId}/settings/pop/get(gmail.users.settings.getPop)`.
    public enum Gmail_users_settings_getPop {
        public static let id: Swift.String = "gmail.users.settings.getPop"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/settings/pop/GET/path`.
            public struct Path: Sendable, Hashable {
                /// User's email address. The special value "me" can be used to indicate the authenticated user.
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/settings/pop/GET/path/userId`.
                public var userId: Swift.String
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - userId: User's email address. The special value "me" can be used to indicate the authenticated user.
                public init(userId: Swift.String) {
                    self.userId = userId
                }
            }
            public var path: Operations.Gmail_users_settings_getPop.Input.Path
            /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/settings/pop/GET/query`.
            public struct Query: Sendable, Hashable {
                /// - Remark: Generated from `#/components/parameters/_.xgafv`.
                @frozen public enum __period_xgafv: String, Codable, Hashable, Sendable, CaseIterable {
                    case _1 = "1"
                    case _2 = "2"
                }
                /// V1 error format.
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/settings/pop/GET/query/$.xgafv`.
                public var _dollar__xgafv: Components.Parameters.__period_xgafv?
                /// OAuth access token.
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/settings/pop/GET/query/access_token`.
                public var accessToken: Components.Parameters.AccessToken?
                /// - Remark: Generated from `#/components/parameters/alt`.
                @frozen public enum Alt: String, Codable, Hashable, Sendable, CaseIterable {
                    case json = "json"
                    case media = "media"
                    case proto = "proto"
                }
                /// Data format for response.
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/settings/pop/GET/query/alt`.
                public var alt: Components.Parameters.Alt?
                /// JSONP
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/settings/pop/GET/query/callback`.
                public var callback: Components.Parameters.Callback?
                /// Selector specifying which fields to include in a partial response.
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/settings/pop/GET/query/fields`.
                public var fields: Components.Parameters.Fields?
                /// API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/settings/pop/GET/query/key`.
                public var key: Components.Parameters.Key?
                /// OAuth 2.0 token for the current user.
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/settings/pop/GET/query/oauth_token`.
                public var oauthToken: Components.Parameters.OauthToken?
                /// Returns response with indentations and line breaks.
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/settings/pop/GET/query/prettyPrint`.
                public var prettyPrint: Components.Parameters.PrettyPrint?
                /// Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/settings/pop/GET/query/quotaUser`.
                public var quotaUser: Components.Parameters.QuotaUser?
                /// Upload protocol for media (e.g. "raw", "multipart").
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/settings/pop/GET/query/upload_protocol`.
                public var uploadProtocol: Components.Parameters.UploadProtocol?
                /// Legacy upload protocol for media (e.g. "media", "multipart").
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/settings/pop/GET/query/uploadType`.
                public var uploadType: Components.Parameters.UploadType?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - _dollar__xgafv: V1 error format.
                ///   - accessToken: OAuth access token.
                ///   - alt: Data format for response.
                ///   - callback: JSONP
                ///   - fields: Selector specifying which fields to include in a partial response.
                ///   - key: API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
                ///   - oauthToken: OAuth 2.0 token for the current user.
                ///   - prettyPrint: Returns response with indentations and line breaks.
                ///   - quotaUser: Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
                ///   - uploadProtocol: Upload protocol for media (e.g. "raw", "multipart").
                ///   - uploadType: Legacy upload protocol for media (e.g. "media", "multipart").
                public init(
                    _dollar__xgafv: Components.Parameters.__period_xgafv? = nil,
                    accessToken: Components.Parameters.AccessToken? = nil,
                    alt: Components.Parameters.Alt? = nil,
                    callback: Components.Parameters.Callback? = nil,
                    fields: Components.Parameters.Fields? = nil,
                    key: Components.Parameters.Key? = nil,
                    oauthToken: Components.Parameters.OauthToken? = nil,
                    prettyPrint: Components.Parameters.PrettyPrint? = nil,
                    quotaUser: Components.Parameters.QuotaUser? = nil,
                    uploadProtocol: Components.Parameters.UploadProtocol? = nil,
                    uploadType: Components.Parameters.UploadType? = nil
                ) {
                    self._dollar__xgafv = _dollar__xgafv
                    self.accessToken = accessToken
                    self.alt = alt
                    self.callback = callback
                    self.fields = fields
                    self.key = key
                    self.oauthToken = oauthToken
                    self.prettyPrint = prettyPrint
                    self.quotaUser = quotaUser
                    self.uploadProtocol = uploadProtocol
                    self.uploadType = uploadType
                }
            }
            public var query: Operations.Gmail_users_settings_getPop.Input.Query
            /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/settings/pop/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.Gmail_users_settings_getPop.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.Gmail_users_settings_getPop.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.Gmail_users_settings_getPop.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - query:
            ///   - headers:
            public init(
                path: Operations.Gmail_users_settings_getPop.Input.Path,
                query: Operations.Gmail_users_settings_getPop.Input.Query = .init(),
                headers: Operations.Gmail_users_settings_getPop.Input.Headers = .init()
            ) {
                self.path = path
                self.query = query
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/settings/pop/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/settings/pop/GET/responses/200/content/application\/json`.
                    case json(Components.Schemas.PopSettings)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.PopSettings {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.Gmail_users_settings_getPop.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.Gmail_users_settings_getPop.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Successful response
            ///
            /// - Remark: Generated from `#/paths//gmail/v1/users/{userId}/settings/pop/get(gmail.users.settings.getPop)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.Gmail_users_settings_getPop.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.Gmail_users_settings_getPop.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Updates POP settings.
    ///
    /// - Remark: HTTP `PUT /gmail/v1/users/{userId}/settings/pop`.
    /// - Remark: Generated from `#/paths//gmail/v1/users/{userId}/settings/pop/put(gmail.users.settings.updatePop)`.
    public enum Gmail_users_settings_updatePop {
        public static let id: Swift.String = "gmail.users.settings.updatePop"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/settings/pop/PUT/path`.
            public struct Path: Sendable, Hashable {
                /// User's email address. The special value "me" can be used to indicate the authenticated user.
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/settings/pop/PUT/path/userId`.
                public var userId: Swift.String
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - userId: User's email address. The special value "me" can be used to indicate the authenticated user.
                public init(userId: Swift.String) {
                    self.userId = userId
                }
            }
            public var path: Operations.Gmail_users_settings_updatePop.Input.Path
            /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/settings/pop/PUT/query`.
            public struct Query: Sendable, Hashable {
                /// - Remark: Generated from `#/components/parameters/_.xgafv`.
                @frozen public enum __period_xgafv: String, Codable, Hashable, Sendable, CaseIterable {
                    case _1 = "1"
                    case _2 = "2"
                }
                /// V1 error format.
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/settings/pop/PUT/query/$.xgafv`.
                public var _dollar__xgafv: Components.Parameters.__period_xgafv?
                /// OAuth access token.
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/settings/pop/PUT/query/access_token`.
                public var accessToken: Components.Parameters.AccessToken?
                /// - Remark: Generated from `#/components/parameters/alt`.
                @frozen public enum Alt: String, Codable, Hashable, Sendable, CaseIterable {
                    case json = "json"
                    case media = "media"
                    case proto = "proto"
                }
                /// Data format for response.
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/settings/pop/PUT/query/alt`.
                public var alt: Components.Parameters.Alt?
                /// JSONP
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/settings/pop/PUT/query/callback`.
                public var callback: Components.Parameters.Callback?
                /// Selector specifying which fields to include in a partial response.
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/settings/pop/PUT/query/fields`.
                public var fields: Components.Parameters.Fields?
                /// API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/settings/pop/PUT/query/key`.
                public var key: Components.Parameters.Key?
                /// OAuth 2.0 token for the current user.
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/settings/pop/PUT/query/oauth_token`.
                public var oauthToken: Components.Parameters.OauthToken?
                /// Returns response with indentations and line breaks.
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/settings/pop/PUT/query/prettyPrint`.
                public var prettyPrint: Components.Parameters.PrettyPrint?
                /// Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/settings/pop/PUT/query/quotaUser`.
                public var quotaUser: Components.Parameters.QuotaUser?
                /// Upload protocol for media (e.g. "raw", "multipart").
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/settings/pop/PUT/query/upload_protocol`.
                public var uploadProtocol: Components.Parameters.UploadProtocol?
                /// Legacy upload protocol for media (e.g. "media", "multipart").
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/settings/pop/PUT/query/uploadType`.
                public var uploadType: Components.Parameters.UploadType?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - _dollar__xgafv: V1 error format.
                ///   - accessToken: OAuth access token.
                ///   - alt: Data format for response.
                ///   - callback: JSONP
                ///   - fields: Selector specifying which fields to include in a partial response.
                ///   - key: API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
                ///   - oauthToken: OAuth 2.0 token for the current user.
                ///   - prettyPrint: Returns response with indentations and line breaks.
                ///   - quotaUser: Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
                ///   - uploadProtocol: Upload protocol for media (e.g. "raw", "multipart").
                ///   - uploadType: Legacy upload protocol for media (e.g. "media", "multipart").
                public init(
                    _dollar__xgafv: Components.Parameters.__period_xgafv? = nil,
                    accessToken: Components.Parameters.AccessToken? = nil,
                    alt: Components.Parameters.Alt? = nil,
                    callback: Components.Parameters.Callback? = nil,
                    fields: Components.Parameters.Fields? = nil,
                    key: Components.Parameters.Key? = nil,
                    oauthToken: Components.Parameters.OauthToken? = nil,
                    prettyPrint: Components.Parameters.PrettyPrint? = nil,
                    quotaUser: Components.Parameters.QuotaUser? = nil,
                    uploadProtocol: Components.Parameters.UploadProtocol? = nil,
                    uploadType: Components.Parameters.UploadType? = nil
                ) {
                    self._dollar__xgafv = _dollar__xgafv
                    self.accessToken = accessToken
                    self.alt = alt
                    self.callback = callback
                    self.fields = fields
                    self.key = key
                    self.oauthToken = oauthToken
                    self.prettyPrint = prettyPrint
                    self.quotaUser = quotaUser
                    self.uploadProtocol = uploadProtocol
                    self.uploadType = uploadType
                }
            }
            public var query: Operations.Gmail_users_settings_updatePop.Input.Query
            /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/settings/pop/PUT/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.Gmail_users_settings_updatePop.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.Gmail_users_settings_updatePop.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.Gmail_users_settings_updatePop.Input.Headers
            /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/settings/pop/PUT/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/settings/pop/PUT/requestBody/content/application\/json`.
                case json(Components.Schemas.PopSettings)
            }
            public var body: Operations.Gmail_users_settings_updatePop.Input.Body?
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - query:
            ///   - headers:
            ///   - body:
            public init(
                path: Operations.Gmail_users_settings_updatePop.Input.Path,
                query: Operations.Gmail_users_settings_updatePop.Input.Query = .init(),
                headers: Operations.Gmail_users_settings_updatePop.Input.Headers = .init(),
                body: Operations.Gmail_users_settings_updatePop.Input.Body? = nil
            ) {
                self.path = path
                self.query = query
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/settings/pop/PUT/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/settings/pop/PUT/responses/200/content/application\/json`.
                    case json(Components.Schemas.PopSettings)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.PopSettings {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.Gmail_users_settings_updatePop.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.Gmail_users_settings_updatePop.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Successful response
            ///
            /// - Remark: Generated from `#/paths//gmail/v1/users/{userId}/settings/pop/put(gmail.users.settings.updatePop)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.Gmail_users_settings_updatePop.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.Gmail_users_settings_updatePop.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Lists the send-as aliases for the specified account. The result includes the primary send-as address associated with the account as well as any custom "from" aliases.
    ///
    /// - Remark: HTTP `GET /gmail/v1/users/{userId}/settings/sendAs`.
    /// - Remark: Generated from `#/paths//gmail/v1/users/{userId}/settings/sendAs/get(gmail.users.settings.sendAs.list)`.
    public enum Gmail_users_settings_sendAs_list {
        public static let id: Swift.String = "gmail.users.settings.sendAs.list"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/settings/sendAs/GET/path`.
            public struct Path: Sendable, Hashable {
                /// User's email address. The special value "me" can be used to indicate the authenticated user.
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/settings/sendAs/GET/path/userId`.
                public var userId: Swift.String
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - userId: User's email address. The special value "me" can be used to indicate the authenticated user.
                public init(userId: Swift.String) {
                    self.userId = userId
                }
            }
            public var path: Operations.Gmail_users_settings_sendAs_list.Input.Path
            /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/settings/sendAs/GET/query`.
            public struct Query: Sendable, Hashable {
                /// - Remark: Generated from `#/components/parameters/_.xgafv`.
                @frozen public enum __period_xgafv: String, Codable, Hashable, Sendable, CaseIterable {
                    case _1 = "1"
                    case _2 = "2"
                }
                /// V1 error format.
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/settings/sendAs/GET/query/$.xgafv`.
                public var _dollar__xgafv: Components.Parameters.__period_xgafv?
                /// OAuth access token.
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/settings/sendAs/GET/query/access_token`.
                public var accessToken: Components.Parameters.AccessToken?
                /// - Remark: Generated from `#/components/parameters/alt`.
                @frozen public enum Alt: String, Codable, Hashable, Sendable, CaseIterable {
                    case json = "json"
                    case media = "media"
                    case proto = "proto"
                }
                /// Data format for response.
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/settings/sendAs/GET/query/alt`.
                public var alt: Components.Parameters.Alt?
                /// JSONP
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/settings/sendAs/GET/query/callback`.
                public var callback: Components.Parameters.Callback?
                /// Selector specifying which fields to include in a partial response.
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/settings/sendAs/GET/query/fields`.
                public var fields: Components.Parameters.Fields?
                /// API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/settings/sendAs/GET/query/key`.
                public var key: Components.Parameters.Key?
                /// OAuth 2.0 token for the current user.
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/settings/sendAs/GET/query/oauth_token`.
                public var oauthToken: Components.Parameters.OauthToken?
                /// Returns response with indentations and line breaks.
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/settings/sendAs/GET/query/prettyPrint`.
                public var prettyPrint: Components.Parameters.PrettyPrint?
                /// Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/settings/sendAs/GET/query/quotaUser`.
                public var quotaUser: Components.Parameters.QuotaUser?
                /// Upload protocol for media (e.g. "raw", "multipart").
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/settings/sendAs/GET/query/upload_protocol`.
                public var uploadProtocol: Components.Parameters.UploadProtocol?
                /// Legacy upload protocol for media (e.g. "media", "multipart").
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/settings/sendAs/GET/query/uploadType`.
                public var uploadType: Components.Parameters.UploadType?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - _dollar__xgafv: V1 error format.
                ///   - accessToken: OAuth access token.
                ///   - alt: Data format for response.
                ///   - callback: JSONP
                ///   - fields: Selector specifying which fields to include in a partial response.
                ///   - key: API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
                ///   - oauthToken: OAuth 2.0 token for the current user.
                ///   - prettyPrint: Returns response with indentations and line breaks.
                ///   - quotaUser: Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
                ///   - uploadProtocol: Upload protocol for media (e.g. "raw", "multipart").
                ///   - uploadType: Legacy upload protocol for media (e.g. "media", "multipart").
                public init(
                    _dollar__xgafv: Components.Parameters.__period_xgafv? = nil,
                    accessToken: Components.Parameters.AccessToken? = nil,
                    alt: Components.Parameters.Alt? = nil,
                    callback: Components.Parameters.Callback? = nil,
                    fields: Components.Parameters.Fields? = nil,
                    key: Components.Parameters.Key? = nil,
                    oauthToken: Components.Parameters.OauthToken? = nil,
                    prettyPrint: Components.Parameters.PrettyPrint? = nil,
                    quotaUser: Components.Parameters.QuotaUser? = nil,
                    uploadProtocol: Components.Parameters.UploadProtocol? = nil,
                    uploadType: Components.Parameters.UploadType? = nil
                ) {
                    self._dollar__xgafv = _dollar__xgafv
                    self.accessToken = accessToken
                    self.alt = alt
                    self.callback = callback
                    self.fields = fields
                    self.key = key
                    self.oauthToken = oauthToken
                    self.prettyPrint = prettyPrint
                    self.quotaUser = quotaUser
                    self.uploadProtocol = uploadProtocol
                    self.uploadType = uploadType
                }
            }
            public var query: Operations.Gmail_users_settings_sendAs_list.Input.Query
            /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/settings/sendAs/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.Gmail_users_settings_sendAs_list.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.Gmail_users_settings_sendAs_list.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.Gmail_users_settings_sendAs_list.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - query:
            ///   - headers:
            public init(
                path: Operations.Gmail_users_settings_sendAs_list.Input.Path,
                query: Operations.Gmail_users_settings_sendAs_list.Input.Query = .init(),
                headers: Operations.Gmail_users_settings_sendAs_list.Input.Headers = .init()
            ) {
                self.path = path
                self.query = query
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/settings/sendAs/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/settings/sendAs/GET/responses/200/content/application\/json`.
                    case json(Components.Schemas.ListSendAsResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.ListSendAsResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.Gmail_users_settings_sendAs_list.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.Gmail_users_settings_sendAs_list.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Successful response
            ///
            /// - Remark: Generated from `#/paths//gmail/v1/users/{userId}/settings/sendAs/get(gmail.users.settings.sendAs.list)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.Gmail_users_settings_sendAs_list.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.Gmail_users_settings_sendAs_list.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Creates a custom "from" send-as alias. If an SMTP MSA is specified, Gmail will attempt to connect to the SMTP service to validate the configuration before creating the alias. If ownership verification is required for the alias, a message will be sent to the email address and the resource's verification status will be set to `pending`; otherwise, the resource will be created with verification status set to `accepted`. If a signature is provided, Gmail will sanitize the HTML before saving it with the alias. This method is only available to service account clients that have been delegated domain-wide authority.
    ///
    /// - Remark: HTTP `POST /gmail/v1/users/{userId}/settings/sendAs`.
    /// - Remark: Generated from `#/paths//gmail/v1/users/{userId}/settings/sendAs/post(gmail.users.settings.sendAs.create)`.
    public enum Gmail_users_settings_sendAs_create {
        public static let id: Swift.String = "gmail.users.settings.sendAs.create"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/settings/sendAs/POST/path`.
            public struct Path: Sendable, Hashable {
                /// User's email address. The special value "me" can be used to indicate the authenticated user.
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/settings/sendAs/POST/path/userId`.
                public var userId: Swift.String
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - userId: User's email address. The special value "me" can be used to indicate the authenticated user.
                public init(userId: Swift.String) {
                    self.userId = userId
                }
            }
            public var path: Operations.Gmail_users_settings_sendAs_create.Input.Path
            /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/settings/sendAs/POST/query`.
            public struct Query: Sendable, Hashable {
                /// - Remark: Generated from `#/components/parameters/_.xgafv`.
                @frozen public enum __period_xgafv: String, Codable, Hashable, Sendable, CaseIterable {
                    case _1 = "1"
                    case _2 = "2"
                }
                /// V1 error format.
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/settings/sendAs/POST/query/$.xgafv`.
                public var _dollar__xgafv: Components.Parameters.__period_xgafv?
                /// OAuth access token.
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/settings/sendAs/POST/query/access_token`.
                public var accessToken: Components.Parameters.AccessToken?
                /// - Remark: Generated from `#/components/parameters/alt`.
                @frozen public enum Alt: String, Codable, Hashable, Sendable, CaseIterable {
                    case json = "json"
                    case media = "media"
                    case proto = "proto"
                }
                /// Data format for response.
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/settings/sendAs/POST/query/alt`.
                public var alt: Components.Parameters.Alt?
                /// JSONP
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/settings/sendAs/POST/query/callback`.
                public var callback: Components.Parameters.Callback?
                /// Selector specifying which fields to include in a partial response.
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/settings/sendAs/POST/query/fields`.
                public var fields: Components.Parameters.Fields?
                /// API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/settings/sendAs/POST/query/key`.
                public var key: Components.Parameters.Key?
                /// OAuth 2.0 token for the current user.
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/settings/sendAs/POST/query/oauth_token`.
                public var oauthToken: Components.Parameters.OauthToken?
                /// Returns response with indentations and line breaks.
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/settings/sendAs/POST/query/prettyPrint`.
                public var prettyPrint: Components.Parameters.PrettyPrint?
                /// Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/settings/sendAs/POST/query/quotaUser`.
                public var quotaUser: Components.Parameters.QuotaUser?
                /// Upload protocol for media (e.g. "raw", "multipart").
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/settings/sendAs/POST/query/upload_protocol`.
                public var uploadProtocol: Components.Parameters.UploadProtocol?
                /// Legacy upload protocol for media (e.g. "media", "multipart").
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/settings/sendAs/POST/query/uploadType`.
                public var uploadType: Components.Parameters.UploadType?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - _dollar__xgafv: V1 error format.
                ///   - accessToken: OAuth access token.
                ///   - alt: Data format for response.
                ///   - callback: JSONP
                ///   - fields: Selector specifying which fields to include in a partial response.
                ///   - key: API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
                ///   - oauthToken: OAuth 2.0 token for the current user.
                ///   - prettyPrint: Returns response with indentations and line breaks.
                ///   - quotaUser: Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
                ///   - uploadProtocol: Upload protocol for media (e.g. "raw", "multipart").
                ///   - uploadType: Legacy upload protocol for media (e.g. "media", "multipart").
                public init(
                    _dollar__xgafv: Components.Parameters.__period_xgafv? = nil,
                    accessToken: Components.Parameters.AccessToken? = nil,
                    alt: Components.Parameters.Alt? = nil,
                    callback: Components.Parameters.Callback? = nil,
                    fields: Components.Parameters.Fields? = nil,
                    key: Components.Parameters.Key? = nil,
                    oauthToken: Components.Parameters.OauthToken? = nil,
                    prettyPrint: Components.Parameters.PrettyPrint? = nil,
                    quotaUser: Components.Parameters.QuotaUser? = nil,
                    uploadProtocol: Components.Parameters.UploadProtocol? = nil,
                    uploadType: Components.Parameters.UploadType? = nil
                ) {
                    self._dollar__xgafv = _dollar__xgafv
                    self.accessToken = accessToken
                    self.alt = alt
                    self.callback = callback
                    self.fields = fields
                    self.key = key
                    self.oauthToken = oauthToken
                    self.prettyPrint = prettyPrint
                    self.quotaUser = quotaUser
                    self.uploadProtocol = uploadProtocol
                    self.uploadType = uploadType
                }
            }
            public var query: Operations.Gmail_users_settings_sendAs_create.Input.Query
            /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/settings/sendAs/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.Gmail_users_settings_sendAs_create.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.Gmail_users_settings_sendAs_create.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.Gmail_users_settings_sendAs_create.Input.Headers
            /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/settings/sendAs/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/settings/sendAs/POST/requestBody/content/application\/json`.
                case json(Components.Schemas.SendAs)
            }
            public var body: Operations.Gmail_users_settings_sendAs_create.Input.Body?
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - query:
            ///   - headers:
            ///   - body:
            public init(
                path: Operations.Gmail_users_settings_sendAs_create.Input.Path,
                query: Operations.Gmail_users_settings_sendAs_create.Input.Query = .init(),
                headers: Operations.Gmail_users_settings_sendAs_create.Input.Headers = .init(),
                body: Operations.Gmail_users_settings_sendAs_create.Input.Body? = nil
            ) {
                self.path = path
                self.query = query
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/settings/sendAs/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/settings/sendAs/POST/responses/200/content/application\/json`.
                    case json(Components.Schemas.SendAs)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.SendAs {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.Gmail_users_settings_sendAs_create.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.Gmail_users_settings_sendAs_create.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Successful response
            ///
            /// - Remark: Generated from `#/paths//gmail/v1/users/{userId}/settings/sendAs/post(gmail.users.settings.sendAs.create)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.Gmail_users_settings_sendAs_create.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.Gmail_users_settings_sendAs_create.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Gets the specified send-as alias. Fails with an HTTP 404 error if the specified address is not a member of the collection.
    ///
    /// - Remark: HTTP `GET /gmail/v1/users/{userId}/settings/sendAs/{sendAsEmail}`.
    /// - Remark: Generated from `#/paths//gmail/v1/users/{userId}/settings/sendAs/{sendAsEmail}/get(gmail.users.settings.sendAs.get)`.
    public enum Gmail_users_settings_sendAs_get {
        public static let id: Swift.String = "gmail.users.settings.sendAs.get"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/settings/sendAs/{sendAsEmail}/GET/path`.
            public struct Path: Sendable, Hashable {
                /// User's email address. The special value "me" can be used to indicate the authenticated user.
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/settings/sendAs/{sendAsEmail}/GET/path/userId`.
                public var userId: Swift.String
                /// The send-as alias to be retrieved.
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/settings/sendAs/{sendAsEmail}/GET/path/sendAsEmail`.
                public var sendAsEmail: Swift.String
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - userId: User's email address. The special value "me" can be used to indicate the authenticated user.
                ///   - sendAsEmail: The send-as alias to be retrieved.
                public init(
                    userId: Swift.String,
                    sendAsEmail: Swift.String
                ) {
                    self.userId = userId
                    self.sendAsEmail = sendAsEmail
                }
            }
            public var path: Operations.Gmail_users_settings_sendAs_get.Input.Path
            /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/settings/sendAs/{sendAsEmail}/GET/query`.
            public struct Query: Sendable, Hashable {
                /// - Remark: Generated from `#/components/parameters/_.xgafv`.
                @frozen public enum __period_xgafv: String, Codable, Hashable, Sendable, CaseIterable {
                    case _1 = "1"
                    case _2 = "2"
                }
                /// V1 error format.
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/settings/sendAs/{sendAsEmail}/GET/query/$.xgafv`.
                public var _dollar__xgafv: Components.Parameters.__period_xgafv?
                /// OAuth access token.
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/settings/sendAs/{sendAsEmail}/GET/query/access_token`.
                public var accessToken: Components.Parameters.AccessToken?
                /// - Remark: Generated from `#/components/parameters/alt`.
                @frozen public enum Alt: String, Codable, Hashable, Sendable, CaseIterable {
                    case json = "json"
                    case media = "media"
                    case proto = "proto"
                }
                /// Data format for response.
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/settings/sendAs/{sendAsEmail}/GET/query/alt`.
                public var alt: Components.Parameters.Alt?
                /// JSONP
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/settings/sendAs/{sendAsEmail}/GET/query/callback`.
                public var callback: Components.Parameters.Callback?
                /// Selector specifying which fields to include in a partial response.
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/settings/sendAs/{sendAsEmail}/GET/query/fields`.
                public var fields: Components.Parameters.Fields?
                /// API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/settings/sendAs/{sendAsEmail}/GET/query/key`.
                public var key: Components.Parameters.Key?
                /// OAuth 2.0 token for the current user.
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/settings/sendAs/{sendAsEmail}/GET/query/oauth_token`.
                public var oauthToken: Components.Parameters.OauthToken?
                /// Returns response with indentations and line breaks.
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/settings/sendAs/{sendAsEmail}/GET/query/prettyPrint`.
                public var prettyPrint: Components.Parameters.PrettyPrint?
                /// Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/settings/sendAs/{sendAsEmail}/GET/query/quotaUser`.
                public var quotaUser: Components.Parameters.QuotaUser?
                /// Upload protocol for media (e.g. "raw", "multipart").
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/settings/sendAs/{sendAsEmail}/GET/query/upload_protocol`.
                public var uploadProtocol: Components.Parameters.UploadProtocol?
                /// Legacy upload protocol for media (e.g. "media", "multipart").
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/settings/sendAs/{sendAsEmail}/GET/query/uploadType`.
                public var uploadType: Components.Parameters.UploadType?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - _dollar__xgafv: V1 error format.
                ///   - accessToken: OAuth access token.
                ///   - alt: Data format for response.
                ///   - callback: JSONP
                ///   - fields: Selector specifying which fields to include in a partial response.
                ///   - key: API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
                ///   - oauthToken: OAuth 2.0 token for the current user.
                ///   - prettyPrint: Returns response with indentations and line breaks.
                ///   - quotaUser: Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
                ///   - uploadProtocol: Upload protocol for media (e.g. "raw", "multipart").
                ///   - uploadType: Legacy upload protocol for media (e.g. "media", "multipart").
                public init(
                    _dollar__xgafv: Components.Parameters.__period_xgafv? = nil,
                    accessToken: Components.Parameters.AccessToken? = nil,
                    alt: Components.Parameters.Alt? = nil,
                    callback: Components.Parameters.Callback? = nil,
                    fields: Components.Parameters.Fields? = nil,
                    key: Components.Parameters.Key? = nil,
                    oauthToken: Components.Parameters.OauthToken? = nil,
                    prettyPrint: Components.Parameters.PrettyPrint? = nil,
                    quotaUser: Components.Parameters.QuotaUser? = nil,
                    uploadProtocol: Components.Parameters.UploadProtocol? = nil,
                    uploadType: Components.Parameters.UploadType? = nil
                ) {
                    self._dollar__xgafv = _dollar__xgafv
                    self.accessToken = accessToken
                    self.alt = alt
                    self.callback = callback
                    self.fields = fields
                    self.key = key
                    self.oauthToken = oauthToken
                    self.prettyPrint = prettyPrint
                    self.quotaUser = quotaUser
                    self.uploadProtocol = uploadProtocol
                    self.uploadType = uploadType
                }
            }
            public var query: Operations.Gmail_users_settings_sendAs_get.Input.Query
            /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/settings/sendAs/{sendAsEmail}/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.Gmail_users_settings_sendAs_get.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.Gmail_users_settings_sendAs_get.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.Gmail_users_settings_sendAs_get.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - query:
            ///   - headers:
            public init(
                path: Operations.Gmail_users_settings_sendAs_get.Input.Path,
                query: Operations.Gmail_users_settings_sendAs_get.Input.Query = .init(),
                headers: Operations.Gmail_users_settings_sendAs_get.Input.Headers = .init()
            ) {
                self.path = path
                self.query = query
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/settings/sendAs/{sendAsEmail}/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/settings/sendAs/{sendAsEmail}/GET/responses/200/content/application\/json`.
                    case json(Components.Schemas.SendAs)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.SendAs {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.Gmail_users_settings_sendAs_get.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.Gmail_users_settings_sendAs_get.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Successful response
            ///
            /// - Remark: Generated from `#/paths//gmail/v1/users/{userId}/settings/sendAs/{sendAsEmail}/get(gmail.users.settings.sendAs.get)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.Gmail_users_settings_sendAs_get.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.Gmail_users_settings_sendAs_get.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Patch the specified send-as alias.
    ///
    /// - Remark: HTTP `PATCH /gmail/v1/users/{userId}/settings/sendAs/{sendAsEmail}`.
    /// - Remark: Generated from `#/paths//gmail/v1/users/{userId}/settings/sendAs/{sendAsEmail}/patch(gmail.users.settings.sendAs.patch)`.
    public enum Gmail_users_settings_sendAs_patch {
        public static let id: Swift.String = "gmail.users.settings.sendAs.patch"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/settings/sendAs/{sendAsEmail}/PATCH/path`.
            public struct Path: Sendable, Hashable {
                /// User's email address. The special value "me" can be used to indicate the authenticated user.
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/settings/sendAs/{sendAsEmail}/PATCH/path/userId`.
                public var userId: Swift.String
                /// The send-as alias to be updated.
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/settings/sendAs/{sendAsEmail}/PATCH/path/sendAsEmail`.
                public var sendAsEmail: Swift.String
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - userId: User's email address. The special value "me" can be used to indicate the authenticated user.
                ///   - sendAsEmail: The send-as alias to be updated.
                public init(
                    userId: Swift.String,
                    sendAsEmail: Swift.String
                ) {
                    self.userId = userId
                    self.sendAsEmail = sendAsEmail
                }
            }
            public var path: Operations.Gmail_users_settings_sendAs_patch.Input.Path
            /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/settings/sendAs/{sendAsEmail}/PATCH/query`.
            public struct Query: Sendable, Hashable {
                /// - Remark: Generated from `#/components/parameters/_.xgafv`.
                @frozen public enum __period_xgafv: String, Codable, Hashable, Sendable, CaseIterable {
                    case _1 = "1"
                    case _2 = "2"
                }
                /// V1 error format.
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/settings/sendAs/{sendAsEmail}/PATCH/query/$.xgafv`.
                public var _dollar__xgafv: Components.Parameters.__period_xgafv?
                /// OAuth access token.
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/settings/sendAs/{sendAsEmail}/PATCH/query/access_token`.
                public var accessToken: Components.Parameters.AccessToken?
                /// - Remark: Generated from `#/components/parameters/alt`.
                @frozen public enum Alt: String, Codable, Hashable, Sendable, CaseIterable {
                    case json = "json"
                    case media = "media"
                    case proto = "proto"
                }
                /// Data format for response.
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/settings/sendAs/{sendAsEmail}/PATCH/query/alt`.
                public var alt: Components.Parameters.Alt?
                /// JSONP
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/settings/sendAs/{sendAsEmail}/PATCH/query/callback`.
                public var callback: Components.Parameters.Callback?
                /// Selector specifying which fields to include in a partial response.
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/settings/sendAs/{sendAsEmail}/PATCH/query/fields`.
                public var fields: Components.Parameters.Fields?
                /// API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/settings/sendAs/{sendAsEmail}/PATCH/query/key`.
                public var key: Components.Parameters.Key?
                /// OAuth 2.0 token for the current user.
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/settings/sendAs/{sendAsEmail}/PATCH/query/oauth_token`.
                public var oauthToken: Components.Parameters.OauthToken?
                /// Returns response with indentations and line breaks.
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/settings/sendAs/{sendAsEmail}/PATCH/query/prettyPrint`.
                public var prettyPrint: Components.Parameters.PrettyPrint?
                /// Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/settings/sendAs/{sendAsEmail}/PATCH/query/quotaUser`.
                public var quotaUser: Components.Parameters.QuotaUser?
                /// Upload protocol for media (e.g. "raw", "multipart").
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/settings/sendAs/{sendAsEmail}/PATCH/query/upload_protocol`.
                public var uploadProtocol: Components.Parameters.UploadProtocol?
                /// Legacy upload protocol for media (e.g. "media", "multipart").
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/settings/sendAs/{sendAsEmail}/PATCH/query/uploadType`.
                public var uploadType: Components.Parameters.UploadType?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - _dollar__xgafv: V1 error format.
                ///   - accessToken: OAuth access token.
                ///   - alt: Data format for response.
                ///   - callback: JSONP
                ///   - fields: Selector specifying which fields to include in a partial response.
                ///   - key: API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
                ///   - oauthToken: OAuth 2.0 token for the current user.
                ///   - prettyPrint: Returns response with indentations and line breaks.
                ///   - quotaUser: Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
                ///   - uploadProtocol: Upload protocol for media (e.g. "raw", "multipart").
                ///   - uploadType: Legacy upload protocol for media (e.g. "media", "multipart").
                public init(
                    _dollar__xgafv: Components.Parameters.__period_xgafv? = nil,
                    accessToken: Components.Parameters.AccessToken? = nil,
                    alt: Components.Parameters.Alt? = nil,
                    callback: Components.Parameters.Callback? = nil,
                    fields: Components.Parameters.Fields? = nil,
                    key: Components.Parameters.Key? = nil,
                    oauthToken: Components.Parameters.OauthToken? = nil,
                    prettyPrint: Components.Parameters.PrettyPrint? = nil,
                    quotaUser: Components.Parameters.QuotaUser? = nil,
                    uploadProtocol: Components.Parameters.UploadProtocol? = nil,
                    uploadType: Components.Parameters.UploadType? = nil
                ) {
                    self._dollar__xgafv = _dollar__xgafv
                    self.accessToken = accessToken
                    self.alt = alt
                    self.callback = callback
                    self.fields = fields
                    self.key = key
                    self.oauthToken = oauthToken
                    self.prettyPrint = prettyPrint
                    self.quotaUser = quotaUser
                    self.uploadProtocol = uploadProtocol
                    self.uploadType = uploadType
                }
            }
            public var query: Operations.Gmail_users_settings_sendAs_patch.Input.Query
            /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/settings/sendAs/{sendAsEmail}/PATCH/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.Gmail_users_settings_sendAs_patch.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.Gmail_users_settings_sendAs_patch.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.Gmail_users_settings_sendAs_patch.Input.Headers
            /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/settings/sendAs/{sendAsEmail}/PATCH/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/settings/sendAs/{sendAsEmail}/PATCH/requestBody/content/application\/json`.
                case json(Components.Schemas.SendAs)
            }
            public var body: Operations.Gmail_users_settings_sendAs_patch.Input.Body?
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - query:
            ///   - headers:
            ///   - body:
            public init(
                path: Operations.Gmail_users_settings_sendAs_patch.Input.Path,
                query: Operations.Gmail_users_settings_sendAs_patch.Input.Query = .init(),
                headers: Operations.Gmail_users_settings_sendAs_patch.Input.Headers = .init(),
                body: Operations.Gmail_users_settings_sendAs_patch.Input.Body? = nil
            ) {
                self.path = path
                self.query = query
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/settings/sendAs/{sendAsEmail}/PATCH/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/settings/sendAs/{sendAsEmail}/PATCH/responses/200/content/application\/json`.
                    case json(Components.Schemas.SendAs)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.SendAs {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.Gmail_users_settings_sendAs_patch.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.Gmail_users_settings_sendAs_patch.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Successful response
            ///
            /// - Remark: Generated from `#/paths//gmail/v1/users/{userId}/settings/sendAs/{sendAsEmail}/patch(gmail.users.settings.sendAs.patch)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.Gmail_users_settings_sendAs_patch.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.Gmail_users_settings_sendAs_patch.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Updates a send-as alias. If a signature is provided, Gmail will sanitize the HTML before saving it with the alias. Addresses other than the primary address for the account can only be updated by service account clients that have been delegated domain-wide authority.
    ///
    /// - Remark: HTTP `PUT /gmail/v1/users/{userId}/settings/sendAs/{sendAsEmail}`.
    /// - Remark: Generated from `#/paths//gmail/v1/users/{userId}/settings/sendAs/{sendAsEmail}/put(gmail.users.settings.sendAs.update)`.
    public enum Gmail_users_settings_sendAs_update {
        public static let id: Swift.String = "gmail.users.settings.sendAs.update"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/settings/sendAs/{sendAsEmail}/PUT/path`.
            public struct Path: Sendable, Hashable {
                /// User's email address. The special value "me" can be used to indicate the authenticated user.
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/settings/sendAs/{sendAsEmail}/PUT/path/userId`.
                public var userId: Swift.String
                /// The send-as alias to be updated.
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/settings/sendAs/{sendAsEmail}/PUT/path/sendAsEmail`.
                public var sendAsEmail: Swift.String
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - userId: User's email address. The special value "me" can be used to indicate the authenticated user.
                ///   - sendAsEmail: The send-as alias to be updated.
                public init(
                    userId: Swift.String,
                    sendAsEmail: Swift.String
                ) {
                    self.userId = userId
                    self.sendAsEmail = sendAsEmail
                }
            }
            public var path: Operations.Gmail_users_settings_sendAs_update.Input.Path
            /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/settings/sendAs/{sendAsEmail}/PUT/query`.
            public struct Query: Sendable, Hashable {
                /// - Remark: Generated from `#/components/parameters/_.xgafv`.
                @frozen public enum __period_xgafv: String, Codable, Hashable, Sendable, CaseIterable {
                    case _1 = "1"
                    case _2 = "2"
                }
                /// V1 error format.
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/settings/sendAs/{sendAsEmail}/PUT/query/$.xgafv`.
                public var _dollar__xgafv: Components.Parameters.__period_xgafv?
                /// OAuth access token.
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/settings/sendAs/{sendAsEmail}/PUT/query/access_token`.
                public var accessToken: Components.Parameters.AccessToken?
                /// - Remark: Generated from `#/components/parameters/alt`.
                @frozen public enum Alt: String, Codable, Hashable, Sendable, CaseIterable {
                    case json = "json"
                    case media = "media"
                    case proto = "proto"
                }
                /// Data format for response.
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/settings/sendAs/{sendAsEmail}/PUT/query/alt`.
                public var alt: Components.Parameters.Alt?
                /// JSONP
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/settings/sendAs/{sendAsEmail}/PUT/query/callback`.
                public var callback: Components.Parameters.Callback?
                /// Selector specifying which fields to include in a partial response.
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/settings/sendAs/{sendAsEmail}/PUT/query/fields`.
                public var fields: Components.Parameters.Fields?
                /// API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/settings/sendAs/{sendAsEmail}/PUT/query/key`.
                public var key: Components.Parameters.Key?
                /// OAuth 2.0 token for the current user.
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/settings/sendAs/{sendAsEmail}/PUT/query/oauth_token`.
                public var oauthToken: Components.Parameters.OauthToken?
                /// Returns response with indentations and line breaks.
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/settings/sendAs/{sendAsEmail}/PUT/query/prettyPrint`.
                public var prettyPrint: Components.Parameters.PrettyPrint?
                /// Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/settings/sendAs/{sendAsEmail}/PUT/query/quotaUser`.
                public var quotaUser: Components.Parameters.QuotaUser?
                /// Upload protocol for media (e.g. "raw", "multipart").
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/settings/sendAs/{sendAsEmail}/PUT/query/upload_protocol`.
                public var uploadProtocol: Components.Parameters.UploadProtocol?
                /// Legacy upload protocol for media (e.g. "media", "multipart").
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/settings/sendAs/{sendAsEmail}/PUT/query/uploadType`.
                public var uploadType: Components.Parameters.UploadType?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - _dollar__xgafv: V1 error format.
                ///   - accessToken: OAuth access token.
                ///   - alt: Data format for response.
                ///   - callback: JSONP
                ///   - fields: Selector specifying which fields to include in a partial response.
                ///   - key: API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
                ///   - oauthToken: OAuth 2.0 token for the current user.
                ///   - prettyPrint: Returns response with indentations and line breaks.
                ///   - quotaUser: Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
                ///   - uploadProtocol: Upload protocol for media (e.g. "raw", "multipart").
                ///   - uploadType: Legacy upload protocol for media (e.g. "media", "multipart").
                public init(
                    _dollar__xgafv: Components.Parameters.__period_xgafv? = nil,
                    accessToken: Components.Parameters.AccessToken? = nil,
                    alt: Components.Parameters.Alt? = nil,
                    callback: Components.Parameters.Callback? = nil,
                    fields: Components.Parameters.Fields? = nil,
                    key: Components.Parameters.Key? = nil,
                    oauthToken: Components.Parameters.OauthToken? = nil,
                    prettyPrint: Components.Parameters.PrettyPrint? = nil,
                    quotaUser: Components.Parameters.QuotaUser? = nil,
                    uploadProtocol: Components.Parameters.UploadProtocol? = nil,
                    uploadType: Components.Parameters.UploadType? = nil
                ) {
                    self._dollar__xgafv = _dollar__xgafv
                    self.accessToken = accessToken
                    self.alt = alt
                    self.callback = callback
                    self.fields = fields
                    self.key = key
                    self.oauthToken = oauthToken
                    self.prettyPrint = prettyPrint
                    self.quotaUser = quotaUser
                    self.uploadProtocol = uploadProtocol
                    self.uploadType = uploadType
                }
            }
            public var query: Operations.Gmail_users_settings_sendAs_update.Input.Query
            /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/settings/sendAs/{sendAsEmail}/PUT/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.Gmail_users_settings_sendAs_update.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.Gmail_users_settings_sendAs_update.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.Gmail_users_settings_sendAs_update.Input.Headers
            /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/settings/sendAs/{sendAsEmail}/PUT/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/settings/sendAs/{sendAsEmail}/PUT/requestBody/content/application\/json`.
                case json(Components.Schemas.SendAs)
            }
            public var body: Operations.Gmail_users_settings_sendAs_update.Input.Body?
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - query:
            ///   - headers:
            ///   - body:
            public init(
                path: Operations.Gmail_users_settings_sendAs_update.Input.Path,
                query: Operations.Gmail_users_settings_sendAs_update.Input.Query = .init(),
                headers: Operations.Gmail_users_settings_sendAs_update.Input.Headers = .init(),
                body: Operations.Gmail_users_settings_sendAs_update.Input.Body? = nil
            ) {
                self.path = path
                self.query = query
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/settings/sendAs/{sendAsEmail}/PUT/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/settings/sendAs/{sendAsEmail}/PUT/responses/200/content/application\/json`.
                    case json(Components.Schemas.SendAs)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.SendAs {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.Gmail_users_settings_sendAs_update.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.Gmail_users_settings_sendAs_update.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Successful response
            ///
            /// - Remark: Generated from `#/paths//gmail/v1/users/{userId}/settings/sendAs/{sendAsEmail}/put(gmail.users.settings.sendAs.update)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.Gmail_users_settings_sendAs_update.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.Gmail_users_settings_sendAs_update.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Deletes the specified send-as alias. Revokes any verification that may have been required for using it. This method is only available to service account clients that have been delegated domain-wide authority.
    ///
    /// - Remark: HTTP `DELETE /gmail/v1/users/{userId}/settings/sendAs/{sendAsEmail}`.
    /// - Remark: Generated from `#/paths//gmail/v1/users/{userId}/settings/sendAs/{sendAsEmail}/delete(gmail.users.settings.sendAs.delete)`.
    public enum Gmail_users_settings_sendAs_delete {
        public static let id: Swift.String = "gmail.users.settings.sendAs.delete"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/settings/sendAs/{sendAsEmail}/DELETE/path`.
            public struct Path: Sendable, Hashable {
                /// User's email address. The special value "me" can be used to indicate the authenticated user.
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/settings/sendAs/{sendAsEmail}/DELETE/path/userId`.
                public var userId: Swift.String
                /// The send-as alias to be deleted.
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/settings/sendAs/{sendAsEmail}/DELETE/path/sendAsEmail`.
                public var sendAsEmail: Swift.String
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - userId: User's email address. The special value "me" can be used to indicate the authenticated user.
                ///   - sendAsEmail: The send-as alias to be deleted.
                public init(
                    userId: Swift.String,
                    sendAsEmail: Swift.String
                ) {
                    self.userId = userId
                    self.sendAsEmail = sendAsEmail
                }
            }
            public var path: Operations.Gmail_users_settings_sendAs_delete.Input.Path
            /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/settings/sendAs/{sendAsEmail}/DELETE/query`.
            public struct Query: Sendable, Hashable {
                /// - Remark: Generated from `#/components/parameters/_.xgafv`.
                @frozen public enum __period_xgafv: String, Codable, Hashable, Sendable, CaseIterable {
                    case _1 = "1"
                    case _2 = "2"
                }
                /// V1 error format.
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/settings/sendAs/{sendAsEmail}/DELETE/query/$.xgafv`.
                public var _dollar__xgafv: Components.Parameters.__period_xgafv?
                /// OAuth access token.
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/settings/sendAs/{sendAsEmail}/DELETE/query/access_token`.
                public var accessToken: Components.Parameters.AccessToken?
                /// - Remark: Generated from `#/components/parameters/alt`.
                @frozen public enum Alt: String, Codable, Hashable, Sendable, CaseIterable {
                    case json = "json"
                    case media = "media"
                    case proto = "proto"
                }
                /// Data format for response.
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/settings/sendAs/{sendAsEmail}/DELETE/query/alt`.
                public var alt: Components.Parameters.Alt?
                /// JSONP
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/settings/sendAs/{sendAsEmail}/DELETE/query/callback`.
                public var callback: Components.Parameters.Callback?
                /// Selector specifying which fields to include in a partial response.
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/settings/sendAs/{sendAsEmail}/DELETE/query/fields`.
                public var fields: Components.Parameters.Fields?
                /// API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/settings/sendAs/{sendAsEmail}/DELETE/query/key`.
                public var key: Components.Parameters.Key?
                /// OAuth 2.0 token for the current user.
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/settings/sendAs/{sendAsEmail}/DELETE/query/oauth_token`.
                public var oauthToken: Components.Parameters.OauthToken?
                /// Returns response with indentations and line breaks.
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/settings/sendAs/{sendAsEmail}/DELETE/query/prettyPrint`.
                public var prettyPrint: Components.Parameters.PrettyPrint?
                /// Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/settings/sendAs/{sendAsEmail}/DELETE/query/quotaUser`.
                public var quotaUser: Components.Parameters.QuotaUser?
                /// Upload protocol for media (e.g. "raw", "multipart").
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/settings/sendAs/{sendAsEmail}/DELETE/query/upload_protocol`.
                public var uploadProtocol: Components.Parameters.UploadProtocol?
                /// Legacy upload protocol for media (e.g. "media", "multipart").
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/settings/sendAs/{sendAsEmail}/DELETE/query/uploadType`.
                public var uploadType: Components.Parameters.UploadType?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - _dollar__xgafv: V1 error format.
                ///   - accessToken: OAuth access token.
                ///   - alt: Data format for response.
                ///   - callback: JSONP
                ///   - fields: Selector specifying which fields to include in a partial response.
                ///   - key: API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
                ///   - oauthToken: OAuth 2.0 token for the current user.
                ///   - prettyPrint: Returns response with indentations and line breaks.
                ///   - quotaUser: Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
                ///   - uploadProtocol: Upload protocol for media (e.g. "raw", "multipart").
                ///   - uploadType: Legacy upload protocol for media (e.g. "media", "multipart").
                public init(
                    _dollar__xgafv: Components.Parameters.__period_xgafv? = nil,
                    accessToken: Components.Parameters.AccessToken? = nil,
                    alt: Components.Parameters.Alt? = nil,
                    callback: Components.Parameters.Callback? = nil,
                    fields: Components.Parameters.Fields? = nil,
                    key: Components.Parameters.Key? = nil,
                    oauthToken: Components.Parameters.OauthToken? = nil,
                    prettyPrint: Components.Parameters.PrettyPrint? = nil,
                    quotaUser: Components.Parameters.QuotaUser? = nil,
                    uploadProtocol: Components.Parameters.UploadProtocol? = nil,
                    uploadType: Components.Parameters.UploadType? = nil
                ) {
                    self._dollar__xgafv = _dollar__xgafv
                    self.accessToken = accessToken
                    self.alt = alt
                    self.callback = callback
                    self.fields = fields
                    self.key = key
                    self.oauthToken = oauthToken
                    self.prettyPrint = prettyPrint
                    self.quotaUser = quotaUser
                    self.uploadProtocol = uploadProtocol
                    self.uploadType = uploadType
                }
            }
            public var query: Operations.Gmail_users_settings_sendAs_delete.Input.Query
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - query:
            public init(
                path: Operations.Gmail_users_settings_sendAs_delete.Input.Path,
                query: Operations.Gmail_users_settings_sendAs_delete.Input.Query = .init()
            ) {
                self.path = path
                self.query = query
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// Creates a new `Ok`.
                public init() {}
            }
            /// Successful response
            ///
            /// - Remark: Generated from `#/paths//gmail/v1/users/{userId}/settings/sendAs/{sendAsEmail}/delete(gmail.users.settings.sendAs.delete)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.Gmail_users_settings_sendAs_delete.Output.Ok)
            /// Successful response
            ///
            /// - Remark: Generated from `#/paths//gmail/v1/users/{userId}/settings/sendAs/{sendAsEmail}/delete(gmail.users.settings.sendAs.delete)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            public static var ok: Self {
                .ok(.init())
            }
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.Gmail_users_settings_sendAs_delete.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
    }
    /// Lists S/MIME configs for the specified send-as alias.
    ///
    /// - Remark: HTTP `GET /gmail/v1/users/{userId}/settings/sendAs/{sendAsEmail}/smimeInfo`.
    /// - Remark: Generated from `#/paths//gmail/v1/users/{userId}/settings/sendAs/{sendAsEmail}/smimeInfo/get(gmail.users.settings.sendAs.smimeInfo.list)`.
    public enum Gmail_users_settings_sendAs_smimeInfo_list {
        public static let id: Swift.String = "gmail.users.settings.sendAs.smimeInfo.list"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/settings/sendAs/{sendAsEmail}/smimeInfo/GET/path`.
            public struct Path: Sendable, Hashable {
                /// The user's email address. The special value `me` can be used to indicate the authenticated user.
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/settings/sendAs/{sendAsEmail}/smimeInfo/GET/path/userId`.
                public var userId: Swift.String
                /// The email address that appears in the "From:" header for mail sent using this alias.
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/settings/sendAs/{sendAsEmail}/smimeInfo/GET/path/sendAsEmail`.
                public var sendAsEmail: Swift.String
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - userId: The user's email address. The special value `me` can be used to indicate the authenticated user.
                ///   - sendAsEmail: The email address that appears in the "From:" header for mail sent using this alias.
                public init(
                    userId: Swift.String,
                    sendAsEmail: Swift.String
                ) {
                    self.userId = userId
                    self.sendAsEmail = sendAsEmail
                }
            }
            public var path: Operations.Gmail_users_settings_sendAs_smimeInfo_list.Input.Path
            /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/settings/sendAs/{sendAsEmail}/smimeInfo/GET/query`.
            public struct Query: Sendable, Hashable {
                /// - Remark: Generated from `#/components/parameters/_.xgafv`.
                @frozen public enum __period_xgafv: String, Codable, Hashable, Sendable, CaseIterable {
                    case _1 = "1"
                    case _2 = "2"
                }
                /// V1 error format.
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/settings/sendAs/{sendAsEmail}/smimeInfo/GET/query/$.xgafv`.
                public var _dollar__xgafv: Components.Parameters.__period_xgafv?
                /// OAuth access token.
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/settings/sendAs/{sendAsEmail}/smimeInfo/GET/query/access_token`.
                public var accessToken: Components.Parameters.AccessToken?
                /// - Remark: Generated from `#/components/parameters/alt`.
                @frozen public enum Alt: String, Codable, Hashable, Sendable, CaseIterable {
                    case json = "json"
                    case media = "media"
                    case proto = "proto"
                }
                /// Data format for response.
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/settings/sendAs/{sendAsEmail}/smimeInfo/GET/query/alt`.
                public var alt: Components.Parameters.Alt?
                /// JSONP
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/settings/sendAs/{sendAsEmail}/smimeInfo/GET/query/callback`.
                public var callback: Components.Parameters.Callback?
                /// Selector specifying which fields to include in a partial response.
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/settings/sendAs/{sendAsEmail}/smimeInfo/GET/query/fields`.
                public var fields: Components.Parameters.Fields?
                /// API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/settings/sendAs/{sendAsEmail}/smimeInfo/GET/query/key`.
                public var key: Components.Parameters.Key?
                /// OAuth 2.0 token for the current user.
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/settings/sendAs/{sendAsEmail}/smimeInfo/GET/query/oauth_token`.
                public var oauthToken: Components.Parameters.OauthToken?
                /// Returns response with indentations and line breaks.
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/settings/sendAs/{sendAsEmail}/smimeInfo/GET/query/prettyPrint`.
                public var prettyPrint: Components.Parameters.PrettyPrint?
                /// Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/settings/sendAs/{sendAsEmail}/smimeInfo/GET/query/quotaUser`.
                public var quotaUser: Components.Parameters.QuotaUser?
                /// Upload protocol for media (e.g. "raw", "multipart").
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/settings/sendAs/{sendAsEmail}/smimeInfo/GET/query/upload_protocol`.
                public var uploadProtocol: Components.Parameters.UploadProtocol?
                /// Legacy upload protocol for media (e.g. "media", "multipart").
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/settings/sendAs/{sendAsEmail}/smimeInfo/GET/query/uploadType`.
                public var uploadType: Components.Parameters.UploadType?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - _dollar__xgafv: V1 error format.
                ///   - accessToken: OAuth access token.
                ///   - alt: Data format for response.
                ///   - callback: JSONP
                ///   - fields: Selector specifying which fields to include in a partial response.
                ///   - key: API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
                ///   - oauthToken: OAuth 2.0 token for the current user.
                ///   - prettyPrint: Returns response with indentations and line breaks.
                ///   - quotaUser: Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
                ///   - uploadProtocol: Upload protocol for media (e.g. "raw", "multipart").
                ///   - uploadType: Legacy upload protocol for media (e.g. "media", "multipart").
                public init(
                    _dollar__xgafv: Components.Parameters.__period_xgafv? = nil,
                    accessToken: Components.Parameters.AccessToken? = nil,
                    alt: Components.Parameters.Alt? = nil,
                    callback: Components.Parameters.Callback? = nil,
                    fields: Components.Parameters.Fields? = nil,
                    key: Components.Parameters.Key? = nil,
                    oauthToken: Components.Parameters.OauthToken? = nil,
                    prettyPrint: Components.Parameters.PrettyPrint? = nil,
                    quotaUser: Components.Parameters.QuotaUser? = nil,
                    uploadProtocol: Components.Parameters.UploadProtocol? = nil,
                    uploadType: Components.Parameters.UploadType? = nil
                ) {
                    self._dollar__xgafv = _dollar__xgafv
                    self.accessToken = accessToken
                    self.alt = alt
                    self.callback = callback
                    self.fields = fields
                    self.key = key
                    self.oauthToken = oauthToken
                    self.prettyPrint = prettyPrint
                    self.quotaUser = quotaUser
                    self.uploadProtocol = uploadProtocol
                    self.uploadType = uploadType
                }
            }
            public var query: Operations.Gmail_users_settings_sendAs_smimeInfo_list.Input.Query
            /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/settings/sendAs/{sendAsEmail}/smimeInfo/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.Gmail_users_settings_sendAs_smimeInfo_list.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.Gmail_users_settings_sendAs_smimeInfo_list.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.Gmail_users_settings_sendAs_smimeInfo_list.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - query:
            ///   - headers:
            public init(
                path: Operations.Gmail_users_settings_sendAs_smimeInfo_list.Input.Path,
                query: Operations.Gmail_users_settings_sendAs_smimeInfo_list.Input.Query = .init(),
                headers: Operations.Gmail_users_settings_sendAs_smimeInfo_list.Input.Headers = .init()
            ) {
                self.path = path
                self.query = query
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/settings/sendAs/{sendAsEmail}/smimeInfo/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/settings/sendAs/{sendAsEmail}/smimeInfo/GET/responses/200/content/application\/json`.
                    case json(Components.Schemas.ListSmimeInfoResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.ListSmimeInfoResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.Gmail_users_settings_sendAs_smimeInfo_list.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.Gmail_users_settings_sendAs_smimeInfo_list.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Successful response
            ///
            /// - Remark: Generated from `#/paths//gmail/v1/users/{userId}/settings/sendAs/{sendAsEmail}/smimeInfo/get(gmail.users.settings.sendAs.smimeInfo.list)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.Gmail_users_settings_sendAs_smimeInfo_list.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.Gmail_users_settings_sendAs_smimeInfo_list.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Insert (upload) the given S/MIME config for the specified send-as alias. Note that pkcs12 format is required for the key.
    ///
    /// - Remark: HTTP `POST /gmail/v1/users/{userId}/settings/sendAs/{sendAsEmail}/smimeInfo`.
    /// - Remark: Generated from `#/paths//gmail/v1/users/{userId}/settings/sendAs/{sendAsEmail}/smimeInfo/post(gmail.users.settings.sendAs.smimeInfo.insert)`.
    public enum Gmail_users_settings_sendAs_smimeInfo_insert {
        public static let id: Swift.String = "gmail.users.settings.sendAs.smimeInfo.insert"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/settings/sendAs/{sendAsEmail}/smimeInfo/POST/path`.
            public struct Path: Sendable, Hashable {
                /// The user's email address. The special value `me` can be used to indicate the authenticated user.
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/settings/sendAs/{sendAsEmail}/smimeInfo/POST/path/userId`.
                public var userId: Swift.String
                /// The email address that appears in the "From:" header for mail sent using this alias.
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/settings/sendAs/{sendAsEmail}/smimeInfo/POST/path/sendAsEmail`.
                public var sendAsEmail: Swift.String
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - userId: The user's email address. The special value `me` can be used to indicate the authenticated user.
                ///   - sendAsEmail: The email address that appears in the "From:" header for mail sent using this alias.
                public init(
                    userId: Swift.String,
                    sendAsEmail: Swift.String
                ) {
                    self.userId = userId
                    self.sendAsEmail = sendAsEmail
                }
            }
            public var path: Operations.Gmail_users_settings_sendAs_smimeInfo_insert.Input.Path
            /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/settings/sendAs/{sendAsEmail}/smimeInfo/POST/query`.
            public struct Query: Sendable, Hashable {
                /// - Remark: Generated from `#/components/parameters/_.xgafv`.
                @frozen public enum __period_xgafv: String, Codable, Hashable, Sendable, CaseIterable {
                    case _1 = "1"
                    case _2 = "2"
                }
                /// V1 error format.
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/settings/sendAs/{sendAsEmail}/smimeInfo/POST/query/$.xgafv`.
                public var _dollar__xgafv: Components.Parameters.__period_xgafv?
                /// OAuth access token.
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/settings/sendAs/{sendAsEmail}/smimeInfo/POST/query/access_token`.
                public var accessToken: Components.Parameters.AccessToken?
                /// - Remark: Generated from `#/components/parameters/alt`.
                @frozen public enum Alt: String, Codable, Hashable, Sendable, CaseIterable {
                    case json = "json"
                    case media = "media"
                    case proto = "proto"
                }
                /// Data format for response.
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/settings/sendAs/{sendAsEmail}/smimeInfo/POST/query/alt`.
                public var alt: Components.Parameters.Alt?
                /// JSONP
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/settings/sendAs/{sendAsEmail}/smimeInfo/POST/query/callback`.
                public var callback: Components.Parameters.Callback?
                /// Selector specifying which fields to include in a partial response.
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/settings/sendAs/{sendAsEmail}/smimeInfo/POST/query/fields`.
                public var fields: Components.Parameters.Fields?
                /// API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/settings/sendAs/{sendAsEmail}/smimeInfo/POST/query/key`.
                public var key: Components.Parameters.Key?
                /// OAuth 2.0 token for the current user.
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/settings/sendAs/{sendAsEmail}/smimeInfo/POST/query/oauth_token`.
                public var oauthToken: Components.Parameters.OauthToken?
                /// Returns response with indentations and line breaks.
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/settings/sendAs/{sendAsEmail}/smimeInfo/POST/query/prettyPrint`.
                public var prettyPrint: Components.Parameters.PrettyPrint?
                /// Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/settings/sendAs/{sendAsEmail}/smimeInfo/POST/query/quotaUser`.
                public var quotaUser: Components.Parameters.QuotaUser?
                /// Upload protocol for media (e.g. "raw", "multipart").
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/settings/sendAs/{sendAsEmail}/smimeInfo/POST/query/upload_protocol`.
                public var uploadProtocol: Components.Parameters.UploadProtocol?
                /// Legacy upload protocol for media (e.g. "media", "multipart").
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/settings/sendAs/{sendAsEmail}/smimeInfo/POST/query/uploadType`.
                public var uploadType: Components.Parameters.UploadType?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - _dollar__xgafv: V1 error format.
                ///   - accessToken: OAuth access token.
                ///   - alt: Data format for response.
                ///   - callback: JSONP
                ///   - fields: Selector specifying which fields to include in a partial response.
                ///   - key: API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
                ///   - oauthToken: OAuth 2.0 token for the current user.
                ///   - prettyPrint: Returns response with indentations and line breaks.
                ///   - quotaUser: Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
                ///   - uploadProtocol: Upload protocol for media (e.g. "raw", "multipart").
                ///   - uploadType: Legacy upload protocol for media (e.g. "media", "multipart").
                public init(
                    _dollar__xgafv: Components.Parameters.__period_xgafv? = nil,
                    accessToken: Components.Parameters.AccessToken? = nil,
                    alt: Components.Parameters.Alt? = nil,
                    callback: Components.Parameters.Callback? = nil,
                    fields: Components.Parameters.Fields? = nil,
                    key: Components.Parameters.Key? = nil,
                    oauthToken: Components.Parameters.OauthToken? = nil,
                    prettyPrint: Components.Parameters.PrettyPrint? = nil,
                    quotaUser: Components.Parameters.QuotaUser? = nil,
                    uploadProtocol: Components.Parameters.UploadProtocol? = nil,
                    uploadType: Components.Parameters.UploadType? = nil
                ) {
                    self._dollar__xgafv = _dollar__xgafv
                    self.accessToken = accessToken
                    self.alt = alt
                    self.callback = callback
                    self.fields = fields
                    self.key = key
                    self.oauthToken = oauthToken
                    self.prettyPrint = prettyPrint
                    self.quotaUser = quotaUser
                    self.uploadProtocol = uploadProtocol
                    self.uploadType = uploadType
                }
            }
            public var query: Operations.Gmail_users_settings_sendAs_smimeInfo_insert.Input.Query
            /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/settings/sendAs/{sendAsEmail}/smimeInfo/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.Gmail_users_settings_sendAs_smimeInfo_insert.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.Gmail_users_settings_sendAs_smimeInfo_insert.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.Gmail_users_settings_sendAs_smimeInfo_insert.Input.Headers
            /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/settings/sendAs/{sendAsEmail}/smimeInfo/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/settings/sendAs/{sendAsEmail}/smimeInfo/POST/requestBody/content/application\/json`.
                case json(Components.Schemas.SmimeInfo)
            }
            public var body: Operations.Gmail_users_settings_sendAs_smimeInfo_insert.Input.Body?
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - query:
            ///   - headers:
            ///   - body:
            public init(
                path: Operations.Gmail_users_settings_sendAs_smimeInfo_insert.Input.Path,
                query: Operations.Gmail_users_settings_sendAs_smimeInfo_insert.Input.Query = .init(),
                headers: Operations.Gmail_users_settings_sendAs_smimeInfo_insert.Input.Headers = .init(),
                body: Operations.Gmail_users_settings_sendAs_smimeInfo_insert.Input.Body? = nil
            ) {
                self.path = path
                self.query = query
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/settings/sendAs/{sendAsEmail}/smimeInfo/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/settings/sendAs/{sendAsEmail}/smimeInfo/POST/responses/200/content/application\/json`.
                    case json(Components.Schemas.SmimeInfo)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.SmimeInfo {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.Gmail_users_settings_sendAs_smimeInfo_insert.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.Gmail_users_settings_sendAs_smimeInfo_insert.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Successful response
            ///
            /// - Remark: Generated from `#/paths//gmail/v1/users/{userId}/settings/sendAs/{sendAsEmail}/smimeInfo/post(gmail.users.settings.sendAs.smimeInfo.insert)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.Gmail_users_settings_sendAs_smimeInfo_insert.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.Gmail_users_settings_sendAs_smimeInfo_insert.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Gets the specified S/MIME config for the specified send-as alias.
    ///
    /// - Remark: HTTP `GET /gmail/v1/users/{userId}/settings/sendAs/{sendAsEmail}/smimeInfo/{id}`.
    /// - Remark: Generated from `#/paths//gmail/v1/users/{userId}/settings/sendAs/{sendAsEmail}/smimeInfo/{id}/get(gmail.users.settings.sendAs.smimeInfo.get)`.
    public enum Gmail_users_settings_sendAs_smimeInfo_get {
        public static let id: Swift.String = "gmail.users.settings.sendAs.smimeInfo.get"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/settings/sendAs/{sendAsEmail}/smimeInfo/{id}/GET/path`.
            public struct Path: Sendable, Hashable {
                /// The user's email address. The special value `me` can be used to indicate the authenticated user.
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/settings/sendAs/{sendAsEmail}/smimeInfo/{id}/GET/path/userId`.
                public var userId: Swift.String
                /// The email address that appears in the "From:" header for mail sent using this alias.
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/settings/sendAs/{sendAsEmail}/smimeInfo/{id}/GET/path/sendAsEmail`.
                public var sendAsEmail: Swift.String
                /// The immutable ID for the SmimeInfo.
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/settings/sendAs/{sendAsEmail}/smimeInfo/{id}/GET/path/id`.
                public var id: Swift.String
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - userId: The user's email address. The special value `me` can be used to indicate the authenticated user.
                ///   - sendAsEmail: The email address that appears in the "From:" header for mail sent using this alias.
                ///   - id: The immutable ID for the SmimeInfo.
                public init(
                    userId: Swift.String,
                    sendAsEmail: Swift.String,
                    id: Swift.String
                ) {
                    self.userId = userId
                    self.sendAsEmail = sendAsEmail
                    self.id = id
                }
            }
            public var path: Operations.Gmail_users_settings_sendAs_smimeInfo_get.Input.Path
            /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/settings/sendAs/{sendAsEmail}/smimeInfo/{id}/GET/query`.
            public struct Query: Sendable, Hashable {
                /// - Remark: Generated from `#/components/parameters/_.xgafv`.
                @frozen public enum __period_xgafv: String, Codable, Hashable, Sendable, CaseIterable {
                    case _1 = "1"
                    case _2 = "2"
                }
                /// V1 error format.
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/settings/sendAs/{sendAsEmail}/smimeInfo/{id}/GET/query/$.xgafv`.
                public var _dollar__xgafv: Components.Parameters.__period_xgafv?
                /// OAuth access token.
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/settings/sendAs/{sendAsEmail}/smimeInfo/{id}/GET/query/access_token`.
                public var accessToken: Components.Parameters.AccessToken?
                /// - Remark: Generated from `#/components/parameters/alt`.
                @frozen public enum Alt: String, Codable, Hashable, Sendable, CaseIterable {
                    case json = "json"
                    case media = "media"
                    case proto = "proto"
                }
                /// Data format for response.
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/settings/sendAs/{sendAsEmail}/smimeInfo/{id}/GET/query/alt`.
                public var alt: Components.Parameters.Alt?
                /// JSONP
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/settings/sendAs/{sendAsEmail}/smimeInfo/{id}/GET/query/callback`.
                public var callback: Components.Parameters.Callback?
                /// Selector specifying which fields to include in a partial response.
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/settings/sendAs/{sendAsEmail}/smimeInfo/{id}/GET/query/fields`.
                public var fields: Components.Parameters.Fields?
                /// API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/settings/sendAs/{sendAsEmail}/smimeInfo/{id}/GET/query/key`.
                public var key: Components.Parameters.Key?
                /// OAuth 2.0 token for the current user.
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/settings/sendAs/{sendAsEmail}/smimeInfo/{id}/GET/query/oauth_token`.
                public var oauthToken: Components.Parameters.OauthToken?
                /// Returns response with indentations and line breaks.
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/settings/sendAs/{sendAsEmail}/smimeInfo/{id}/GET/query/prettyPrint`.
                public var prettyPrint: Components.Parameters.PrettyPrint?
                /// Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/settings/sendAs/{sendAsEmail}/smimeInfo/{id}/GET/query/quotaUser`.
                public var quotaUser: Components.Parameters.QuotaUser?
                /// Upload protocol for media (e.g. "raw", "multipart").
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/settings/sendAs/{sendAsEmail}/smimeInfo/{id}/GET/query/upload_protocol`.
                public var uploadProtocol: Components.Parameters.UploadProtocol?
                /// Legacy upload protocol for media (e.g. "media", "multipart").
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/settings/sendAs/{sendAsEmail}/smimeInfo/{id}/GET/query/uploadType`.
                public var uploadType: Components.Parameters.UploadType?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - _dollar__xgafv: V1 error format.
                ///   - accessToken: OAuth access token.
                ///   - alt: Data format for response.
                ///   - callback: JSONP
                ///   - fields: Selector specifying which fields to include in a partial response.
                ///   - key: API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
                ///   - oauthToken: OAuth 2.0 token for the current user.
                ///   - prettyPrint: Returns response with indentations and line breaks.
                ///   - quotaUser: Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
                ///   - uploadProtocol: Upload protocol for media (e.g. "raw", "multipart").
                ///   - uploadType: Legacy upload protocol for media (e.g. "media", "multipart").
                public init(
                    _dollar__xgafv: Components.Parameters.__period_xgafv? = nil,
                    accessToken: Components.Parameters.AccessToken? = nil,
                    alt: Components.Parameters.Alt? = nil,
                    callback: Components.Parameters.Callback? = nil,
                    fields: Components.Parameters.Fields? = nil,
                    key: Components.Parameters.Key? = nil,
                    oauthToken: Components.Parameters.OauthToken? = nil,
                    prettyPrint: Components.Parameters.PrettyPrint? = nil,
                    quotaUser: Components.Parameters.QuotaUser? = nil,
                    uploadProtocol: Components.Parameters.UploadProtocol? = nil,
                    uploadType: Components.Parameters.UploadType? = nil
                ) {
                    self._dollar__xgafv = _dollar__xgafv
                    self.accessToken = accessToken
                    self.alt = alt
                    self.callback = callback
                    self.fields = fields
                    self.key = key
                    self.oauthToken = oauthToken
                    self.prettyPrint = prettyPrint
                    self.quotaUser = quotaUser
                    self.uploadProtocol = uploadProtocol
                    self.uploadType = uploadType
                }
            }
            public var query: Operations.Gmail_users_settings_sendAs_smimeInfo_get.Input.Query
            /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/settings/sendAs/{sendAsEmail}/smimeInfo/{id}/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.Gmail_users_settings_sendAs_smimeInfo_get.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.Gmail_users_settings_sendAs_smimeInfo_get.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.Gmail_users_settings_sendAs_smimeInfo_get.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - query:
            ///   - headers:
            public init(
                path: Operations.Gmail_users_settings_sendAs_smimeInfo_get.Input.Path,
                query: Operations.Gmail_users_settings_sendAs_smimeInfo_get.Input.Query = .init(),
                headers: Operations.Gmail_users_settings_sendAs_smimeInfo_get.Input.Headers = .init()
            ) {
                self.path = path
                self.query = query
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/settings/sendAs/{sendAsEmail}/smimeInfo/{id}/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/settings/sendAs/{sendAsEmail}/smimeInfo/{id}/GET/responses/200/content/application\/json`.
                    case json(Components.Schemas.SmimeInfo)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.SmimeInfo {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.Gmail_users_settings_sendAs_smimeInfo_get.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.Gmail_users_settings_sendAs_smimeInfo_get.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Successful response
            ///
            /// - Remark: Generated from `#/paths//gmail/v1/users/{userId}/settings/sendAs/{sendAsEmail}/smimeInfo/{id}/get(gmail.users.settings.sendAs.smimeInfo.get)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.Gmail_users_settings_sendAs_smimeInfo_get.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.Gmail_users_settings_sendAs_smimeInfo_get.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Deletes the specified S/MIME config for the specified send-as alias.
    ///
    /// - Remark: HTTP `DELETE /gmail/v1/users/{userId}/settings/sendAs/{sendAsEmail}/smimeInfo/{id}`.
    /// - Remark: Generated from `#/paths//gmail/v1/users/{userId}/settings/sendAs/{sendAsEmail}/smimeInfo/{id}/delete(gmail.users.settings.sendAs.smimeInfo.delete)`.
    public enum Gmail_users_settings_sendAs_smimeInfo_delete {
        public static let id: Swift.String = "gmail.users.settings.sendAs.smimeInfo.delete"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/settings/sendAs/{sendAsEmail}/smimeInfo/{id}/DELETE/path`.
            public struct Path: Sendable, Hashable {
                /// The user's email address. The special value `me` can be used to indicate the authenticated user.
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/settings/sendAs/{sendAsEmail}/smimeInfo/{id}/DELETE/path/userId`.
                public var userId: Swift.String
                /// The email address that appears in the "From:" header for mail sent using this alias.
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/settings/sendAs/{sendAsEmail}/smimeInfo/{id}/DELETE/path/sendAsEmail`.
                public var sendAsEmail: Swift.String
                /// The immutable ID for the SmimeInfo.
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/settings/sendAs/{sendAsEmail}/smimeInfo/{id}/DELETE/path/id`.
                public var id: Swift.String
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - userId: The user's email address. The special value `me` can be used to indicate the authenticated user.
                ///   - sendAsEmail: The email address that appears in the "From:" header for mail sent using this alias.
                ///   - id: The immutable ID for the SmimeInfo.
                public init(
                    userId: Swift.String,
                    sendAsEmail: Swift.String,
                    id: Swift.String
                ) {
                    self.userId = userId
                    self.sendAsEmail = sendAsEmail
                    self.id = id
                }
            }
            public var path: Operations.Gmail_users_settings_sendAs_smimeInfo_delete.Input.Path
            /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/settings/sendAs/{sendAsEmail}/smimeInfo/{id}/DELETE/query`.
            public struct Query: Sendable, Hashable {
                /// - Remark: Generated from `#/components/parameters/_.xgafv`.
                @frozen public enum __period_xgafv: String, Codable, Hashable, Sendable, CaseIterable {
                    case _1 = "1"
                    case _2 = "2"
                }
                /// V1 error format.
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/settings/sendAs/{sendAsEmail}/smimeInfo/{id}/DELETE/query/$.xgafv`.
                public var _dollar__xgafv: Components.Parameters.__period_xgafv?
                /// OAuth access token.
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/settings/sendAs/{sendAsEmail}/smimeInfo/{id}/DELETE/query/access_token`.
                public var accessToken: Components.Parameters.AccessToken?
                /// - Remark: Generated from `#/components/parameters/alt`.
                @frozen public enum Alt: String, Codable, Hashable, Sendable, CaseIterable {
                    case json = "json"
                    case media = "media"
                    case proto = "proto"
                }
                /// Data format for response.
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/settings/sendAs/{sendAsEmail}/smimeInfo/{id}/DELETE/query/alt`.
                public var alt: Components.Parameters.Alt?
                /// JSONP
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/settings/sendAs/{sendAsEmail}/smimeInfo/{id}/DELETE/query/callback`.
                public var callback: Components.Parameters.Callback?
                /// Selector specifying which fields to include in a partial response.
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/settings/sendAs/{sendAsEmail}/smimeInfo/{id}/DELETE/query/fields`.
                public var fields: Components.Parameters.Fields?
                /// API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/settings/sendAs/{sendAsEmail}/smimeInfo/{id}/DELETE/query/key`.
                public var key: Components.Parameters.Key?
                /// OAuth 2.0 token for the current user.
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/settings/sendAs/{sendAsEmail}/smimeInfo/{id}/DELETE/query/oauth_token`.
                public var oauthToken: Components.Parameters.OauthToken?
                /// Returns response with indentations and line breaks.
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/settings/sendAs/{sendAsEmail}/smimeInfo/{id}/DELETE/query/prettyPrint`.
                public var prettyPrint: Components.Parameters.PrettyPrint?
                /// Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/settings/sendAs/{sendAsEmail}/smimeInfo/{id}/DELETE/query/quotaUser`.
                public var quotaUser: Components.Parameters.QuotaUser?
                /// Upload protocol for media (e.g. "raw", "multipart").
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/settings/sendAs/{sendAsEmail}/smimeInfo/{id}/DELETE/query/upload_protocol`.
                public var uploadProtocol: Components.Parameters.UploadProtocol?
                /// Legacy upload protocol for media (e.g. "media", "multipart").
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/settings/sendAs/{sendAsEmail}/smimeInfo/{id}/DELETE/query/uploadType`.
                public var uploadType: Components.Parameters.UploadType?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - _dollar__xgafv: V1 error format.
                ///   - accessToken: OAuth access token.
                ///   - alt: Data format for response.
                ///   - callback: JSONP
                ///   - fields: Selector specifying which fields to include in a partial response.
                ///   - key: API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
                ///   - oauthToken: OAuth 2.0 token for the current user.
                ///   - prettyPrint: Returns response with indentations and line breaks.
                ///   - quotaUser: Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
                ///   - uploadProtocol: Upload protocol for media (e.g. "raw", "multipart").
                ///   - uploadType: Legacy upload protocol for media (e.g. "media", "multipart").
                public init(
                    _dollar__xgafv: Components.Parameters.__period_xgafv? = nil,
                    accessToken: Components.Parameters.AccessToken? = nil,
                    alt: Components.Parameters.Alt? = nil,
                    callback: Components.Parameters.Callback? = nil,
                    fields: Components.Parameters.Fields? = nil,
                    key: Components.Parameters.Key? = nil,
                    oauthToken: Components.Parameters.OauthToken? = nil,
                    prettyPrint: Components.Parameters.PrettyPrint? = nil,
                    quotaUser: Components.Parameters.QuotaUser? = nil,
                    uploadProtocol: Components.Parameters.UploadProtocol? = nil,
                    uploadType: Components.Parameters.UploadType? = nil
                ) {
                    self._dollar__xgafv = _dollar__xgafv
                    self.accessToken = accessToken
                    self.alt = alt
                    self.callback = callback
                    self.fields = fields
                    self.key = key
                    self.oauthToken = oauthToken
                    self.prettyPrint = prettyPrint
                    self.quotaUser = quotaUser
                    self.uploadProtocol = uploadProtocol
                    self.uploadType = uploadType
                }
            }
            public var query: Operations.Gmail_users_settings_sendAs_smimeInfo_delete.Input.Query
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - query:
            public init(
                path: Operations.Gmail_users_settings_sendAs_smimeInfo_delete.Input.Path,
                query: Operations.Gmail_users_settings_sendAs_smimeInfo_delete.Input.Query = .init()
            ) {
                self.path = path
                self.query = query
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// Creates a new `Ok`.
                public init() {}
            }
            /// Successful response
            ///
            /// - Remark: Generated from `#/paths//gmail/v1/users/{userId}/settings/sendAs/{sendAsEmail}/smimeInfo/{id}/delete(gmail.users.settings.sendAs.smimeInfo.delete)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.Gmail_users_settings_sendAs_smimeInfo_delete.Output.Ok)
            /// Successful response
            ///
            /// - Remark: Generated from `#/paths//gmail/v1/users/{userId}/settings/sendAs/{sendAsEmail}/smimeInfo/{id}/delete(gmail.users.settings.sendAs.smimeInfo.delete)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            public static var ok: Self {
                .ok(.init())
            }
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.Gmail_users_settings_sendAs_smimeInfo_delete.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
    }
    /// Sets the default S/MIME config for the specified send-as alias.
    ///
    /// - Remark: HTTP `POST /gmail/v1/users/{userId}/settings/sendAs/{sendAsEmail}/smimeInfo/{id}/setDefault`.
    /// - Remark: Generated from `#/paths//gmail/v1/users/{userId}/settings/sendAs/{sendAsEmail}/smimeInfo/{id}/setDefault/post(gmail.users.settings.sendAs.smimeInfo.setDefault)`.
    public enum Gmail_users_settings_sendAs_smimeInfo_setDefault {
        public static let id: Swift.String = "gmail.users.settings.sendAs.smimeInfo.setDefault"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/settings/sendAs/{sendAsEmail}/smimeInfo/{id}/setDefault/POST/path`.
            public struct Path: Sendable, Hashable {
                /// The user's email address. The special value `me` can be used to indicate the authenticated user.
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/settings/sendAs/{sendAsEmail}/smimeInfo/{id}/setDefault/POST/path/userId`.
                public var userId: Swift.String
                /// The email address that appears in the "From:" header for mail sent using this alias.
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/settings/sendAs/{sendAsEmail}/smimeInfo/{id}/setDefault/POST/path/sendAsEmail`.
                public var sendAsEmail: Swift.String
                /// The immutable ID for the SmimeInfo.
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/settings/sendAs/{sendAsEmail}/smimeInfo/{id}/setDefault/POST/path/id`.
                public var id: Swift.String
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - userId: The user's email address. The special value `me` can be used to indicate the authenticated user.
                ///   - sendAsEmail: The email address that appears in the "From:" header for mail sent using this alias.
                ///   - id: The immutable ID for the SmimeInfo.
                public init(
                    userId: Swift.String,
                    sendAsEmail: Swift.String,
                    id: Swift.String
                ) {
                    self.userId = userId
                    self.sendAsEmail = sendAsEmail
                    self.id = id
                }
            }
            public var path: Operations.Gmail_users_settings_sendAs_smimeInfo_setDefault.Input.Path
            /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/settings/sendAs/{sendAsEmail}/smimeInfo/{id}/setDefault/POST/query`.
            public struct Query: Sendable, Hashable {
                /// - Remark: Generated from `#/components/parameters/_.xgafv`.
                @frozen public enum __period_xgafv: String, Codable, Hashable, Sendable, CaseIterable {
                    case _1 = "1"
                    case _2 = "2"
                }
                /// V1 error format.
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/settings/sendAs/{sendAsEmail}/smimeInfo/{id}/setDefault/POST/query/$.xgafv`.
                public var _dollar__xgafv: Components.Parameters.__period_xgafv?
                /// OAuth access token.
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/settings/sendAs/{sendAsEmail}/smimeInfo/{id}/setDefault/POST/query/access_token`.
                public var accessToken: Components.Parameters.AccessToken?
                /// - Remark: Generated from `#/components/parameters/alt`.
                @frozen public enum Alt: String, Codable, Hashable, Sendable, CaseIterable {
                    case json = "json"
                    case media = "media"
                    case proto = "proto"
                }
                /// Data format for response.
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/settings/sendAs/{sendAsEmail}/smimeInfo/{id}/setDefault/POST/query/alt`.
                public var alt: Components.Parameters.Alt?
                /// JSONP
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/settings/sendAs/{sendAsEmail}/smimeInfo/{id}/setDefault/POST/query/callback`.
                public var callback: Components.Parameters.Callback?
                /// Selector specifying which fields to include in a partial response.
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/settings/sendAs/{sendAsEmail}/smimeInfo/{id}/setDefault/POST/query/fields`.
                public var fields: Components.Parameters.Fields?
                /// API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/settings/sendAs/{sendAsEmail}/smimeInfo/{id}/setDefault/POST/query/key`.
                public var key: Components.Parameters.Key?
                /// OAuth 2.0 token for the current user.
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/settings/sendAs/{sendAsEmail}/smimeInfo/{id}/setDefault/POST/query/oauth_token`.
                public var oauthToken: Components.Parameters.OauthToken?
                /// Returns response with indentations and line breaks.
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/settings/sendAs/{sendAsEmail}/smimeInfo/{id}/setDefault/POST/query/prettyPrint`.
                public var prettyPrint: Components.Parameters.PrettyPrint?
                /// Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/settings/sendAs/{sendAsEmail}/smimeInfo/{id}/setDefault/POST/query/quotaUser`.
                public var quotaUser: Components.Parameters.QuotaUser?
                /// Upload protocol for media (e.g. "raw", "multipart").
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/settings/sendAs/{sendAsEmail}/smimeInfo/{id}/setDefault/POST/query/upload_protocol`.
                public var uploadProtocol: Components.Parameters.UploadProtocol?
                /// Legacy upload protocol for media (e.g. "media", "multipart").
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/settings/sendAs/{sendAsEmail}/smimeInfo/{id}/setDefault/POST/query/uploadType`.
                public var uploadType: Components.Parameters.UploadType?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - _dollar__xgafv: V1 error format.
                ///   - accessToken: OAuth access token.
                ///   - alt: Data format for response.
                ///   - callback: JSONP
                ///   - fields: Selector specifying which fields to include in a partial response.
                ///   - key: API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
                ///   - oauthToken: OAuth 2.0 token for the current user.
                ///   - prettyPrint: Returns response with indentations and line breaks.
                ///   - quotaUser: Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
                ///   - uploadProtocol: Upload protocol for media (e.g. "raw", "multipart").
                ///   - uploadType: Legacy upload protocol for media (e.g. "media", "multipart").
                public init(
                    _dollar__xgafv: Components.Parameters.__period_xgafv? = nil,
                    accessToken: Components.Parameters.AccessToken? = nil,
                    alt: Components.Parameters.Alt? = nil,
                    callback: Components.Parameters.Callback? = nil,
                    fields: Components.Parameters.Fields? = nil,
                    key: Components.Parameters.Key? = nil,
                    oauthToken: Components.Parameters.OauthToken? = nil,
                    prettyPrint: Components.Parameters.PrettyPrint? = nil,
                    quotaUser: Components.Parameters.QuotaUser? = nil,
                    uploadProtocol: Components.Parameters.UploadProtocol? = nil,
                    uploadType: Components.Parameters.UploadType? = nil
                ) {
                    self._dollar__xgafv = _dollar__xgafv
                    self.accessToken = accessToken
                    self.alt = alt
                    self.callback = callback
                    self.fields = fields
                    self.key = key
                    self.oauthToken = oauthToken
                    self.prettyPrint = prettyPrint
                    self.quotaUser = quotaUser
                    self.uploadProtocol = uploadProtocol
                    self.uploadType = uploadType
                }
            }
            public var query: Operations.Gmail_users_settings_sendAs_smimeInfo_setDefault.Input.Query
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - query:
            public init(
                path: Operations.Gmail_users_settings_sendAs_smimeInfo_setDefault.Input.Path,
                query: Operations.Gmail_users_settings_sendAs_smimeInfo_setDefault.Input.Query = .init()
            ) {
                self.path = path
                self.query = query
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// Creates a new `Ok`.
                public init() {}
            }
            /// Successful response
            ///
            /// - Remark: Generated from `#/paths//gmail/v1/users/{userId}/settings/sendAs/{sendAsEmail}/smimeInfo/{id}/setDefault/post(gmail.users.settings.sendAs.smimeInfo.setDefault)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.Gmail_users_settings_sendAs_smimeInfo_setDefault.Output.Ok)
            /// Successful response
            ///
            /// - Remark: Generated from `#/paths//gmail/v1/users/{userId}/settings/sendAs/{sendAsEmail}/smimeInfo/{id}/setDefault/post(gmail.users.settings.sendAs.smimeInfo.setDefault)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            public static var ok: Self {
                .ok(.init())
            }
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.Gmail_users_settings_sendAs_smimeInfo_setDefault.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
    }
    /// Sends a verification email to the specified send-as alias address. The verification status must be `pending`. This method is only available to service account clients that have been delegated domain-wide authority.
    ///
    /// - Remark: HTTP `POST /gmail/v1/users/{userId}/settings/sendAs/{sendAsEmail}/verify`.
    /// - Remark: Generated from `#/paths//gmail/v1/users/{userId}/settings/sendAs/{sendAsEmail}/verify/post(gmail.users.settings.sendAs.verify)`.
    public enum Gmail_users_settings_sendAs_verify {
        public static let id: Swift.String = "gmail.users.settings.sendAs.verify"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/settings/sendAs/{sendAsEmail}/verify/POST/path`.
            public struct Path: Sendable, Hashable {
                /// User's email address. The special value "me" can be used to indicate the authenticated user.
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/settings/sendAs/{sendAsEmail}/verify/POST/path/userId`.
                public var userId: Swift.String
                /// The send-as alias to be verified.
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/settings/sendAs/{sendAsEmail}/verify/POST/path/sendAsEmail`.
                public var sendAsEmail: Swift.String
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - userId: User's email address. The special value "me" can be used to indicate the authenticated user.
                ///   - sendAsEmail: The send-as alias to be verified.
                public init(
                    userId: Swift.String,
                    sendAsEmail: Swift.String
                ) {
                    self.userId = userId
                    self.sendAsEmail = sendAsEmail
                }
            }
            public var path: Operations.Gmail_users_settings_sendAs_verify.Input.Path
            /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/settings/sendAs/{sendAsEmail}/verify/POST/query`.
            public struct Query: Sendable, Hashable {
                /// - Remark: Generated from `#/components/parameters/_.xgafv`.
                @frozen public enum __period_xgafv: String, Codable, Hashable, Sendable, CaseIterable {
                    case _1 = "1"
                    case _2 = "2"
                }
                /// V1 error format.
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/settings/sendAs/{sendAsEmail}/verify/POST/query/$.xgafv`.
                public var _dollar__xgafv: Components.Parameters.__period_xgafv?
                /// OAuth access token.
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/settings/sendAs/{sendAsEmail}/verify/POST/query/access_token`.
                public var accessToken: Components.Parameters.AccessToken?
                /// - Remark: Generated from `#/components/parameters/alt`.
                @frozen public enum Alt: String, Codable, Hashable, Sendable, CaseIterable {
                    case json = "json"
                    case media = "media"
                    case proto = "proto"
                }
                /// Data format for response.
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/settings/sendAs/{sendAsEmail}/verify/POST/query/alt`.
                public var alt: Components.Parameters.Alt?
                /// JSONP
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/settings/sendAs/{sendAsEmail}/verify/POST/query/callback`.
                public var callback: Components.Parameters.Callback?
                /// Selector specifying which fields to include in a partial response.
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/settings/sendAs/{sendAsEmail}/verify/POST/query/fields`.
                public var fields: Components.Parameters.Fields?
                /// API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/settings/sendAs/{sendAsEmail}/verify/POST/query/key`.
                public var key: Components.Parameters.Key?
                /// OAuth 2.0 token for the current user.
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/settings/sendAs/{sendAsEmail}/verify/POST/query/oauth_token`.
                public var oauthToken: Components.Parameters.OauthToken?
                /// Returns response with indentations and line breaks.
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/settings/sendAs/{sendAsEmail}/verify/POST/query/prettyPrint`.
                public var prettyPrint: Components.Parameters.PrettyPrint?
                /// Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/settings/sendAs/{sendAsEmail}/verify/POST/query/quotaUser`.
                public var quotaUser: Components.Parameters.QuotaUser?
                /// Upload protocol for media (e.g. "raw", "multipart").
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/settings/sendAs/{sendAsEmail}/verify/POST/query/upload_protocol`.
                public var uploadProtocol: Components.Parameters.UploadProtocol?
                /// Legacy upload protocol for media (e.g. "media", "multipart").
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/settings/sendAs/{sendAsEmail}/verify/POST/query/uploadType`.
                public var uploadType: Components.Parameters.UploadType?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - _dollar__xgafv: V1 error format.
                ///   - accessToken: OAuth access token.
                ///   - alt: Data format for response.
                ///   - callback: JSONP
                ///   - fields: Selector specifying which fields to include in a partial response.
                ///   - key: API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
                ///   - oauthToken: OAuth 2.0 token for the current user.
                ///   - prettyPrint: Returns response with indentations and line breaks.
                ///   - quotaUser: Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
                ///   - uploadProtocol: Upload protocol for media (e.g. "raw", "multipart").
                ///   - uploadType: Legacy upload protocol for media (e.g. "media", "multipart").
                public init(
                    _dollar__xgafv: Components.Parameters.__period_xgafv? = nil,
                    accessToken: Components.Parameters.AccessToken? = nil,
                    alt: Components.Parameters.Alt? = nil,
                    callback: Components.Parameters.Callback? = nil,
                    fields: Components.Parameters.Fields? = nil,
                    key: Components.Parameters.Key? = nil,
                    oauthToken: Components.Parameters.OauthToken? = nil,
                    prettyPrint: Components.Parameters.PrettyPrint? = nil,
                    quotaUser: Components.Parameters.QuotaUser? = nil,
                    uploadProtocol: Components.Parameters.UploadProtocol? = nil,
                    uploadType: Components.Parameters.UploadType? = nil
                ) {
                    self._dollar__xgafv = _dollar__xgafv
                    self.accessToken = accessToken
                    self.alt = alt
                    self.callback = callback
                    self.fields = fields
                    self.key = key
                    self.oauthToken = oauthToken
                    self.prettyPrint = prettyPrint
                    self.quotaUser = quotaUser
                    self.uploadProtocol = uploadProtocol
                    self.uploadType = uploadType
                }
            }
            public var query: Operations.Gmail_users_settings_sendAs_verify.Input.Query
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - query:
            public init(
                path: Operations.Gmail_users_settings_sendAs_verify.Input.Path,
                query: Operations.Gmail_users_settings_sendAs_verify.Input.Query = .init()
            ) {
                self.path = path
                self.query = query
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// Creates a new `Ok`.
                public init() {}
            }
            /// Successful response
            ///
            /// - Remark: Generated from `#/paths//gmail/v1/users/{userId}/settings/sendAs/{sendAsEmail}/verify/post(gmail.users.settings.sendAs.verify)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.Gmail_users_settings_sendAs_verify.Output.Ok)
            /// Successful response
            ///
            /// - Remark: Generated from `#/paths//gmail/v1/users/{userId}/settings/sendAs/{sendAsEmail}/verify/post(gmail.users.settings.sendAs.verify)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            public static var ok: Self {
                .ok(.init())
            }
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.Gmail_users_settings_sendAs_verify.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
    }
    /// Gets vacation responder settings.
    ///
    /// - Remark: HTTP `GET /gmail/v1/users/{userId}/settings/vacation`.
    /// - Remark: Generated from `#/paths//gmail/v1/users/{userId}/settings/vacation/get(gmail.users.settings.getVacation)`.
    public enum Gmail_users_settings_getVacation {
        public static let id: Swift.String = "gmail.users.settings.getVacation"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/settings/vacation/GET/path`.
            public struct Path: Sendable, Hashable {
                /// User's email address. The special value "me" can be used to indicate the authenticated user.
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/settings/vacation/GET/path/userId`.
                public var userId: Swift.String
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - userId: User's email address. The special value "me" can be used to indicate the authenticated user.
                public init(userId: Swift.String) {
                    self.userId = userId
                }
            }
            public var path: Operations.Gmail_users_settings_getVacation.Input.Path
            /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/settings/vacation/GET/query`.
            public struct Query: Sendable, Hashable {
                /// - Remark: Generated from `#/components/parameters/_.xgafv`.
                @frozen public enum __period_xgafv: String, Codable, Hashable, Sendable, CaseIterable {
                    case _1 = "1"
                    case _2 = "2"
                }
                /// V1 error format.
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/settings/vacation/GET/query/$.xgafv`.
                public var _dollar__xgafv: Components.Parameters.__period_xgafv?
                /// OAuth access token.
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/settings/vacation/GET/query/access_token`.
                public var accessToken: Components.Parameters.AccessToken?
                /// - Remark: Generated from `#/components/parameters/alt`.
                @frozen public enum Alt: String, Codable, Hashable, Sendable, CaseIterable {
                    case json = "json"
                    case media = "media"
                    case proto = "proto"
                }
                /// Data format for response.
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/settings/vacation/GET/query/alt`.
                public var alt: Components.Parameters.Alt?
                /// JSONP
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/settings/vacation/GET/query/callback`.
                public var callback: Components.Parameters.Callback?
                /// Selector specifying which fields to include in a partial response.
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/settings/vacation/GET/query/fields`.
                public var fields: Components.Parameters.Fields?
                /// API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/settings/vacation/GET/query/key`.
                public var key: Components.Parameters.Key?
                /// OAuth 2.0 token for the current user.
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/settings/vacation/GET/query/oauth_token`.
                public var oauthToken: Components.Parameters.OauthToken?
                /// Returns response with indentations and line breaks.
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/settings/vacation/GET/query/prettyPrint`.
                public var prettyPrint: Components.Parameters.PrettyPrint?
                /// Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/settings/vacation/GET/query/quotaUser`.
                public var quotaUser: Components.Parameters.QuotaUser?
                /// Upload protocol for media (e.g. "raw", "multipart").
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/settings/vacation/GET/query/upload_protocol`.
                public var uploadProtocol: Components.Parameters.UploadProtocol?
                /// Legacy upload protocol for media (e.g. "media", "multipart").
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/settings/vacation/GET/query/uploadType`.
                public var uploadType: Components.Parameters.UploadType?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - _dollar__xgafv: V1 error format.
                ///   - accessToken: OAuth access token.
                ///   - alt: Data format for response.
                ///   - callback: JSONP
                ///   - fields: Selector specifying which fields to include in a partial response.
                ///   - key: API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
                ///   - oauthToken: OAuth 2.0 token for the current user.
                ///   - prettyPrint: Returns response with indentations and line breaks.
                ///   - quotaUser: Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
                ///   - uploadProtocol: Upload protocol for media (e.g. "raw", "multipart").
                ///   - uploadType: Legacy upload protocol for media (e.g. "media", "multipart").
                public init(
                    _dollar__xgafv: Components.Parameters.__period_xgafv? = nil,
                    accessToken: Components.Parameters.AccessToken? = nil,
                    alt: Components.Parameters.Alt? = nil,
                    callback: Components.Parameters.Callback? = nil,
                    fields: Components.Parameters.Fields? = nil,
                    key: Components.Parameters.Key? = nil,
                    oauthToken: Components.Parameters.OauthToken? = nil,
                    prettyPrint: Components.Parameters.PrettyPrint? = nil,
                    quotaUser: Components.Parameters.QuotaUser? = nil,
                    uploadProtocol: Components.Parameters.UploadProtocol? = nil,
                    uploadType: Components.Parameters.UploadType? = nil
                ) {
                    self._dollar__xgafv = _dollar__xgafv
                    self.accessToken = accessToken
                    self.alt = alt
                    self.callback = callback
                    self.fields = fields
                    self.key = key
                    self.oauthToken = oauthToken
                    self.prettyPrint = prettyPrint
                    self.quotaUser = quotaUser
                    self.uploadProtocol = uploadProtocol
                    self.uploadType = uploadType
                }
            }
            public var query: Operations.Gmail_users_settings_getVacation.Input.Query
            /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/settings/vacation/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.Gmail_users_settings_getVacation.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.Gmail_users_settings_getVacation.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.Gmail_users_settings_getVacation.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - query:
            ///   - headers:
            public init(
                path: Operations.Gmail_users_settings_getVacation.Input.Path,
                query: Operations.Gmail_users_settings_getVacation.Input.Query = .init(),
                headers: Operations.Gmail_users_settings_getVacation.Input.Headers = .init()
            ) {
                self.path = path
                self.query = query
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/settings/vacation/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/settings/vacation/GET/responses/200/content/application\/json`.
                    case json(Components.Schemas.VacationSettings)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.VacationSettings {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.Gmail_users_settings_getVacation.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.Gmail_users_settings_getVacation.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Successful response
            ///
            /// - Remark: Generated from `#/paths//gmail/v1/users/{userId}/settings/vacation/get(gmail.users.settings.getVacation)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.Gmail_users_settings_getVacation.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.Gmail_users_settings_getVacation.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Updates vacation responder settings.
    ///
    /// - Remark: HTTP `PUT /gmail/v1/users/{userId}/settings/vacation`.
    /// - Remark: Generated from `#/paths//gmail/v1/users/{userId}/settings/vacation/put(gmail.users.settings.updateVacation)`.
    public enum Gmail_users_settings_updateVacation {
        public static let id: Swift.String = "gmail.users.settings.updateVacation"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/settings/vacation/PUT/path`.
            public struct Path: Sendable, Hashable {
                /// User's email address. The special value "me" can be used to indicate the authenticated user.
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/settings/vacation/PUT/path/userId`.
                public var userId: Swift.String
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - userId: User's email address. The special value "me" can be used to indicate the authenticated user.
                public init(userId: Swift.String) {
                    self.userId = userId
                }
            }
            public var path: Operations.Gmail_users_settings_updateVacation.Input.Path
            /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/settings/vacation/PUT/query`.
            public struct Query: Sendable, Hashable {
                /// - Remark: Generated from `#/components/parameters/_.xgafv`.
                @frozen public enum __period_xgafv: String, Codable, Hashable, Sendable, CaseIterable {
                    case _1 = "1"
                    case _2 = "2"
                }
                /// V1 error format.
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/settings/vacation/PUT/query/$.xgafv`.
                public var _dollar__xgafv: Components.Parameters.__period_xgafv?
                /// OAuth access token.
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/settings/vacation/PUT/query/access_token`.
                public var accessToken: Components.Parameters.AccessToken?
                /// - Remark: Generated from `#/components/parameters/alt`.
                @frozen public enum Alt: String, Codable, Hashable, Sendable, CaseIterable {
                    case json = "json"
                    case media = "media"
                    case proto = "proto"
                }
                /// Data format for response.
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/settings/vacation/PUT/query/alt`.
                public var alt: Components.Parameters.Alt?
                /// JSONP
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/settings/vacation/PUT/query/callback`.
                public var callback: Components.Parameters.Callback?
                /// Selector specifying which fields to include in a partial response.
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/settings/vacation/PUT/query/fields`.
                public var fields: Components.Parameters.Fields?
                /// API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/settings/vacation/PUT/query/key`.
                public var key: Components.Parameters.Key?
                /// OAuth 2.0 token for the current user.
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/settings/vacation/PUT/query/oauth_token`.
                public var oauthToken: Components.Parameters.OauthToken?
                /// Returns response with indentations and line breaks.
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/settings/vacation/PUT/query/prettyPrint`.
                public var prettyPrint: Components.Parameters.PrettyPrint?
                /// Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/settings/vacation/PUT/query/quotaUser`.
                public var quotaUser: Components.Parameters.QuotaUser?
                /// Upload protocol for media (e.g. "raw", "multipart").
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/settings/vacation/PUT/query/upload_protocol`.
                public var uploadProtocol: Components.Parameters.UploadProtocol?
                /// Legacy upload protocol for media (e.g. "media", "multipart").
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/settings/vacation/PUT/query/uploadType`.
                public var uploadType: Components.Parameters.UploadType?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - _dollar__xgafv: V1 error format.
                ///   - accessToken: OAuth access token.
                ///   - alt: Data format for response.
                ///   - callback: JSONP
                ///   - fields: Selector specifying which fields to include in a partial response.
                ///   - key: API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
                ///   - oauthToken: OAuth 2.0 token for the current user.
                ///   - prettyPrint: Returns response with indentations and line breaks.
                ///   - quotaUser: Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
                ///   - uploadProtocol: Upload protocol for media (e.g. "raw", "multipart").
                ///   - uploadType: Legacy upload protocol for media (e.g. "media", "multipart").
                public init(
                    _dollar__xgafv: Components.Parameters.__period_xgafv? = nil,
                    accessToken: Components.Parameters.AccessToken? = nil,
                    alt: Components.Parameters.Alt? = nil,
                    callback: Components.Parameters.Callback? = nil,
                    fields: Components.Parameters.Fields? = nil,
                    key: Components.Parameters.Key? = nil,
                    oauthToken: Components.Parameters.OauthToken? = nil,
                    prettyPrint: Components.Parameters.PrettyPrint? = nil,
                    quotaUser: Components.Parameters.QuotaUser? = nil,
                    uploadProtocol: Components.Parameters.UploadProtocol? = nil,
                    uploadType: Components.Parameters.UploadType? = nil
                ) {
                    self._dollar__xgafv = _dollar__xgafv
                    self.accessToken = accessToken
                    self.alt = alt
                    self.callback = callback
                    self.fields = fields
                    self.key = key
                    self.oauthToken = oauthToken
                    self.prettyPrint = prettyPrint
                    self.quotaUser = quotaUser
                    self.uploadProtocol = uploadProtocol
                    self.uploadType = uploadType
                }
            }
            public var query: Operations.Gmail_users_settings_updateVacation.Input.Query
            /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/settings/vacation/PUT/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.Gmail_users_settings_updateVacation.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.Gmail_users_settings_updateVacation.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.Gmail_users_settings_updateVacation.Input.Headers
            /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/settings/vacation/PUT/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/settings/vacation/PUT/requestBody/content/application\/json`.
                case json(Components.Schemas.VacationSettings)
            }
            public var body: Operations.Gmail_users_settings_updateVacation.Input.Body?
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - query:
            ///   - headers:
            ///   - body:
            public init(
                path: Operations.Gmail_users_settings_updateVacation.Input.Path,
                query: Operations.Gmail_users_settings_updateVacation.Input.Query = .init(),
                headers: Operations.Gmail_users_settings_updateVacation.Input.Headers = .init(),
                body: Operations.Gmail_users_settings_updateVacation.Input.Body? = nil
            ) {
                self.path = path
                self.query = query
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/settings/vacation/PUT/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/settings/vacation/PUT/responses/200/content/application\/json`.
                    case json(Components.Schemas.VacationSettings)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.VacationSettings {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.Gmail_users_settings_updateVacation.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.Gmail_users_settings_updateVacation.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Successful response
            ///
            /// - Remark: Generated from `#/paths//gmail/v1/users/{userId}/settings/vacation/put(gmail.users.settings.updateVacation)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.Gmail_users_settings_updateVacation.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.Gmail_users_settings_updateVacation.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Stop receiving push notifications for the given user mailbox.
    ///
    /// - Remark: HTTP `POST /gmail/v1/users/{userId}/stop`.
    /// - Remark: Generated from `#/paths//gmail/v1/users/{userId}/stop/post(gmail.users.stop)`.
    public enum Gmail_users_stop {
        public static let id: Swift.String = "gmail.users.stop"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/stop/POST/path`.
            public struct Path: Sendable, Hashable {
                /// The user's email address. The special value `me` can be used to indicate the authenticated user.
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/stop/POST/path/userId`.
                public var userId: Swift.String
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - userId: The user's email address. The special value `me` can be used to indicate the authenticated user.
                public init(userId: Swift.String) {
                    self.userId = userId
                }
            }
            public var path: Operations.Gmail_users_stop.Input.Path
            /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/stop/POST/query`.
            public struct Query: Sendable, Hashable {
                /// - Remark: Generated from `#/components/parameters/_.xgafv`.
                @frozen public enum __period_xgafv: String, Codable, Hashable, Sendable, CaseIterable {
                    case _1 = "1"
                    case _2 = "2"
                }
                /// V1 error format.
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/stop/POST/query/$.xgafv`.
                public var _dollar__xgafv: Components.Parameters.__period_xgafv?
                /// OAuth access token.
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/stop/POST/query/access_token`.
                public var accessToken: Components.Parameters.AccessToken?
                /// - Remark: Generated from `#/components/parameters/alt`.
                @frozen public enum Alt: String, Codable, Hashable, Sendable, CaseIterable {
                    case json = "json"
                    case media = "media"
                    case proto = "proto"
                }
                /// Data format for response.
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/stop/POST/query/alt`.
                public var alt: Components.Parameters.Alt?
                /// JSONP
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/stop/POST/query/callback`.
                public var callback: Components.Parameters.Callback?
                /// Selector specifying which fields to include in a partial response.
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/stop/POST/query/fields`.
                public var fields: Components.Parameters.Fields?
                /// API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/stop/POST/query/key`.
                public var key: Components.Parameters.Key?
                /// OAuth 2.0 token for the current user.
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/stop/POST/query/oauth_token`.
                public var oauthToken: Components.Parameters.OauthToken?
                /// Returns response with indentations and line breaks.
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/stop/POST/query/prettyPrint`.
                public var prettyPrint: Components.Parameters.PrettyPrint?
                /// Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/stop/POST/query/quotaUser`.
                public var quotaUser: Components.Parameters.QuotaUser?
                /// Upload protocol for media (e.g. "raw", "multipart").
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/stop/POST/query/upload_protocol`.
                public var uploadProtocol: Components.Parameters.UploadProtocol?
                /// Legacy upload protocol for media (e.g. "media", "multipart").
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/stop/POST/query/uploadType`.
                public var uploadType: Components.Parameters.UploadType?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - _dollar__xgafv: V1 error format.
                ///   - accessToken: OAuth access token.
                ///   - alt: Data format for response.
                ///   - callback: JSONP
                ///   - fields: Selector specifying which fields to include in a partial response.
                ///   - key: API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
                ///   - oauthToken: OAuth 2.0 token for the current user.
                ///   - prettyPrint: Returns response with indentations and line breaks.
                ///   - quotaUser: Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
                ///   - uploadProtocol: Upload protocol for media (e.g. "raw", "multipart").
                ///   - uploadType: Legacy upload protocol for media (e.g. "media", "multipart").
                public init(
                    _dollar__xgafv: Components.Parameters.__period_xgafv? = nil,
                    accessToken: Components.Parameters.AccessToken? = nil,
                    alt: Components.Parameters.Alt? = nil,
                    callback: Components.Parameters.Callback? = nil,
                    fields: Components.Parameters.Fields? = nil,
                    key: Components.Parameters.Key? = nil,
                    oauthToken: Components.Parameters.OauthToken? = nil,
                    prettyPrint: Components.Parameters.PrettyPrint? = nil,
                    quotaUser: Components.Parameters.QuotaUser? = nil,
                    uploadProtocol: Components.Parameters.UploadProtocol? = nil,
                    uploadType: Components.Parameters.UploadType? = nil
                ) {
                    self._dollar__xgafv = _dollar__xgafv
                    self.accessToken = accessToken
                    self.alt = alt
                    self.callback = callback
                    self.fields = fields
                    self.key = key
                    self.oauthToken = oauthToken
                    self.prettyPrint = prettyPrint
                    self.quotaUser = quotaUser
                    self.uploadProtocol = uploadProtocol
                    self.uploadType = uploadType
                }
            }
            public var query: Operations.Gmail_users_stop.Input.Query
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - query:
            public init(
                path: Operations.Gmail_users_stop.Input.Path,
                query: Operations.Gmail_users_stop.Input.Query = .init()
            ) {
                self.path = path
                self.query = query
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// Creates a new `Ok`.
                public init() {}
            }
            /// Successful response
            ///
            /// - Remark: Generated from `#/paths//gmail/v1/users/{userId}/stop/post(gmail.users.stop)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.Gmail_users_stop.Output.Ok)
            /// Successful response
            ///
            /// - Remark: Generated from `#/paths//gmail/v1/users/{userId}/stop/post(gmail.users.stop)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            public static var ok: Self {
                .ok(.init())
            }
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.Gmail_users_stop.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
    }
    /// Lists the threads in the user's mailbox.
    ///
    /// - Remark: HTTP `GET /gmail/v1/users/{userId}/threads`.
    /// - Remark: Generated from `#/paths//gmail/v1/users/{userId}/threads/get(gmail.users.threads.list)`.
    public enum Gmail_users_threads_list {
        public static let id: Swift.String = "gmail.users.threads.list"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/threads/GET/path`.
            public struct Path: Sendable, Hashable {
                /// The user's email address. The special value `me` can be used to indicate the authenticated user.
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/threads/GET/path/userId`.
                public var userId: Swift.String
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - userId: The user's email address. The special value `me` can be used to indicate the authenticated user.
                public init(userId: Swift.String) {
                    self.userId = userId
                }
            }
            public var path: Operations.Gmail_users_threads_list.Input.Path
            /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/threads/GET/query`.
            public struct Query: Sendable, Hashable {
                /// - Remark: Generated from `#/components/parameters/_.xgafv`.
                @frozen public enum __period_xgafv: String, Codable, Hashable, Sendable, CaseIterable {
                    case _1 = "1"
                    case _2 = "2"
                }
                /// V1 error format.
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/threads/GET/query/$.xgafv`.
                public var _dollar__xgafv: Components.Parameters.__period_xgafv?
                /// OAuth access token.
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/threads/GET/query/access_token`.
                public var accessToken: Components.Parameters.AccessToken?
                /// - Remark: Generated from `#/components/parameters/alt`.
                @frozen public enum Alt: String, Codable, Hashable, Sendable, CaseIterable {
                    case json = "json"
                    case media = "media"
                    case proto = "proto"
                }
                /// Data format for response.
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/threads/GET/query/alt`.
                public var alt: Components.Parameters.Alt?
                /// JSONP
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/threads/GET/query/callback`.
                public var callback: Components.Parameters.Callback?
                /// Selector specifying which fields to include in a partial response.
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/threads/GET/query/fields`.
                public var fields: Components.Parameters.Fields?
                /// API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/threads/GET/query/key`.
                public var key: Components.Parameters.Key?
                /// OAuth 2.0 token for the current user.
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/threads/GET/query/oauth_token`.
                public var oauthToken: Components.Parameters.OauthToken?
                /// Returns response with indentations and line breaks.
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/threads/GET/query/prettyPrint`.
                public var prettyPrint: Components.Parameters.PrettyPrint?
                /// Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/threads/GET/query/quotaUser`.
                public var quotaUser: Components.Parameters.QuotaUser?
                /// Upload protocol for media (e.g. "raw", "multipart").
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/threads/GET/query/upload_protocol`.
                public var uploadProtocol: Components.Parameters.UploadProtocol?
                /// Legacy upload protocol for media (e.g. "media", "multipart").
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/threads/GET/query/uploadType`.
                public var uploadType: Components.Parameters.UploadType?
                /// Include threads from `SPAM` and `TRASH` in the results.
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/threads/GET/query/includeSpamTrash`.
                public var includeSpamTrash: Swift.Bool?
                /// Only return threads with labels that match all of the specified label IDs.
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/threads/GET/query/labelIds`.
                public var labelIds: [Swift.String]?
                /// Maximum number of threads to return. This field defaults to 100. The maximum allowed value for this field is 500.
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/threads/GET/query/maxResults`.
                public var maxResults: Swift.Int?
                /// Page token to retrieve a specific page of results in the list.
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/threads/GET/query/pageToken`.
                public var pageToken: Swift.String?
                /// Only return threads matching the specified query. Supports the same query format as the Gmail search box. For example, `"from:someuser@example.com rfc822msgid: is:unread"`. Parameter cannot be used when accessing the api using the gmail.metadata scope.
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/threads/GET/query/q`.
                public var q: Swift.String?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - _dollar__xgafv: V1 error format.
                ///   - accessToken: OAuth access token.
                ///   - alt: Data format for response.
                ///   - callback: JSONP
                ///   - fields: Selector specifying which fields to include in a partial response.
                ///   - key: API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
                ///   - oauthToken: OAuth 2.0 token for the current user.
                ///   - prettyPrint: Returns response with indentations and line breaks.
                ///   - quotaUser: Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
                ///   - uploadProtocol: Upload protocol for media (e.g. "raw", "multipart").
                ///   - uploadType: Legacy upload protocol for media (e.g. "media", "multipart").
                ///   - includeSpamTrash: Include threads from `SPAM` and `TRASH` in the results.
                ///   - labelIds: Only return threads with labels that match all of the specified label IDs.
                ///   - maxResults: Maximum number of threads to return. This field defaults to 100. The maximum allowed value for this field is 500.
                ///   - pageToken: Page token to retrieve a specific page of results in the list.
                ///   - q: Only return threads matching the specified query. Supports the same query format as the Gmail search box. For example, `"from:someuser@example.com rfc822msgid: is:unread"`. Parameter cannot be used when accessing the api using the gmail.metadata scope.
                public init(
                    _dollar__xgafv: Components.Parameters.__period_xgafv? = nil,
                    accessToken: Components.Parameters.AccessToken? = nil,
                    alt: Components.Parameters.Alt? = nil,
                    callback: Components.Parameters.Callback? = nil,
                    fields: Components.Parameters.Fields? = nil,
                    key: Components.Parameters.Key? = nil,
                    oauthToken: Components.Parameters.OauthToken? = nil,
                    prettyPrint: Components.Parameters.PrettyPrint? = nil,
                    quotaUser: Components.Parameters.QuotaUser? = nil,
                    uploadProtocol: Components.Parameters.UploadProtocol? = nil,
                    uploadType: Components.Parameters.UploadType? = nil,
                    includeSpamTrash: Swift.Bool? = nil,
                    labelIds: [Swift.String]? = nil,
                    maxResults: Swift.Int? = nil,
                    pageToken: Swift.String? = nil,
                    q: Swift.String? = nil
                ) {
                    self._dollar__xgafv = _dollar__xgafv
                    self.accessToken = accessToken
                    self.alt = alt
                    self.callback = callback
                    self.fields = fields
                    self.key = key
                    self.oauthToken = oauthToken
                    self.prettyPrint = prettyPrint
                    self.quotaUser = quotaUser
                    self.uploadProtocol = uploadProtocol
                    self.uploadType = uploadType
                    self.includeSpamTrash = includeSpamTrash
                    self.labelIds = labelIds
                    self.maxResults = maxResults
                    self.pageToken = pageToken
                    self.q = q
                }
            }
            public var query: Operations.Gmail_users_threads_list.Input.Query
            /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/threads/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.Gmail_users_threads_list.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.Gmail_users_threads_list.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.Gmail_users_threads_list.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - query:
            ///   - headers:
            public init(
                path: Operations.Gmail_users_threads_list.Input.Path,
                query: Operations.Gmail_users_threads_list.Input.Query = .init(),
                headers: Operations.Gmail_users_threads_list.Input.Headers = .init()
            ) {
                self.path = path
                self.query = query
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/threads/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/threads/GET/responses/200/content/application\/json`.
                    case json(Components.Schemas.ListThreadsResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.ListThreadsResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.Gmail_users_threads_list.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.Gmail_users_threads_list.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Successful response
            ///
            /// - Remark: Generated from `#/paths//gmail/v1/users/{userId}/threads/get(gmail.users.threads.list)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.Gmail_users_threads_list.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.Gmail_users_threads_list.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Gets the specified thread.
    ///
    /// - Remark: HTTP `GET /gmail/v1/users/{userId}/threads/{id}`.
    /// - Remark: Generated from `#/paths//gmail/v1/users/{userId}/threads/{id}/get(gmail.users.threads.get)`.
    public enum Gmail_users_threads_get {
        public static let id: Swift.String = "gmail.users.threads.get"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/threads/{id}/GET/path`.
            public struct Path: Sendable, Hashable {
                /// The user's email address. The special value `me` can be used to indicate the authenticated user.
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/threads/{id}/GET/path/userId`.
                public var userId: Swift.String
                /// The ID of the thread to retrieve.
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/threads/{id}/GET/path/id`.
                public var id: Swift.String
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - userId: The user's email address. The special value `me` can be used to indicate the authenticated user.
                ///   - id: The ID of the thread to retrieve.
                public init(
                    userId: Swift.String,
                    id: Swift.String
                ) {
                    self.userId = userId
                    self.id = id
                }
            }
            public var path: Operations.Gmail_users_threads_get.Input.Path
            /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/threads/{id}/GET/query`.
            public struct Query: Sendable, Hashable {
                /// - Remark: Generated from `#/components/parameters/_.xgafv`.
                @frozen public enum __period_xgafv: String, Codable, Hashable, Sendable, CaseIterable {
                    case _1 = "1"
                    case _2 = "2"
                }
                /// V1 error format.
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/threads/{id}/GET/query/$.xgafv`.
                public var _dollar__xgafv: Components.Parameters.__period_xgafv?
                /// OAuth access token.
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/threads/{id}/GET/query/access_token`.
                public var accessToken: Components.Parameters.AccessToken?
                /// - Remark: Generated from `#/components/parameters/alt`.
                @frozen public enum Alt: String, Codable, Hashable, Sendable, CaseIterable {
                    case json = "json"
                    case media = "media"
                    case proto = "proto"
                }
                /// Data format for response.
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/threads/{id}/GET/query/alt`.
                public var alt: Components.Parameters.Alt?
                /// JSONP
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/threads/{id}/GET/query/callback`.
                public var callback: Components.Parameters.Callback?
                /// Selector specifying which fields to include in a partial response.
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/threads/{id}/GET/query/fields`.
                public var fields: Components.Parameters.Fields?
                /// API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/threads/{id}/GET/query/key`.
                public var key: Components.Parameters.Key?
                /// OAuth 2.0 token for the current user.
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/threads/{id}/GET/query/oauth_token`.
                public var oauthToken: Components.Parameters.OauthToken?
                /// Returns response with indentations and line breaks.
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/threads/{id}/GET/query/prettyPrint`.
                public var prettyPrint: Components.Parameters.PrettyPrint?
                /// Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/threads/{id}/GET/query/quotaUser`.
                public var quotaUser: Components.Parameters.QuotaUser?
                /// Upload protocol for media (e.g. "raw", "multipart").
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/threads/{id}/GET/query/upload_protocol`.
                public var uploadProtocol: Components.Parameters.UploadProtocol?
                /// Legacy upload protocol for media (e.g. "media", "multipart").
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/threads/{id}/GET/query/uploadType`.
                public var uploadType: Components.Parameters.UploadType?
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/threads/{id}/GET/query/format`.
                @frozen public enum FormatPayload: String, Codable, Hashable, Sendable, CaseIterable {
                    case full = "full"
                    case metadata = "metadata"
                    case minimal = "minimal"
                }
                /// The format to return the messages in.
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/threads/{id}/GET/query/format`.
                public var format: Operations.Gmail_users_threads_get.Input.Query.FormatPayload?
                /// When given and format is METADATA, only include headers specified.
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/threads/{id}/GET/query/metadataHeaders`.
                public var metadataHeaders: [Swift.String]?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - _dollar__xgafv: V1 error format.
                ///   - accessToken: OAuth access token.
                ///   - alt: Data format for response.
                ///   - callback: JSONP
                ///   - fields: Selector specifying which fields to include in a partial response.
                ///   - key: API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
                ///   - oauthToken: OAuth 2.0 token for the current user.
                ///   - prettyPrint: Returns response with indentations and line breaks.
                ///   - quotaUser: Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
                ///   - uploadProtocol: Upload protocol for media (e.g. "raw", "multipart").
                ///   - uploadType: Legacy upload protocol for media (e.g. "media", "multipart").
                ///   - format: The format to return the messages in.
                ///   - metadataHeaders: When given and format is METADATA, only include headers specified.
                public init(
                    _dollar__xgafv: Components.Parameters.__period_xgafv? = nil,
                    accessToken: Components.Parameters.AccessToken? = nil,
                    alt: Components.Parameters.Alt? = nil,
                    callback: Components.Parameters.Callback? = nil,
                    fields: Components.Parameters.Fields? = nil,
                    key: Components.Parameters.Key? = nil,
                    oauthToken: Components.Parameters.OauthToken? = nil,
                    prettyPrint: Components.Parameters.PrettyPrint? = nil,
                    quotaUser: Components.Parameters.QuotaUser? = nil,
                    uploadProtocol: Components.Parameters.UploadProtocol? = nil,
                    uploadType: Components.Parameters.UploadType? = nil,
                    format: Operations.Gmail_users_threads_get.Input.Query.FormatPayload? = nil,
                    metadataHeaders: [Swift.String]? = nil
                ) {
                    self._dollar__xgafv = _dollar__xgafv
                    self.accessToken = accessToken
                    self.alt = alt
                    self.callback = callback
                    self.fields = fields
                    self.key = key
                    self.oauthToken = oauthToken
                    self.prettyPrint = prettyPrint
                    self.quotaUser = quotaUser
                    self.uploadProtocol = uploadProtocol
                    self.uploadType = uploadType
                    self.format = format
                    self.metadataHeaders = metadataHeaders
                }
            }
            public var query: Operations.Gmail_users_threads_get.Input.Query
            /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/threads/{id}/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.Gmail_users_threads_get.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.Gmail_users_threads_get.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.Gmail_users_threads_get.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - query:
            ///   - headers:
            public init(
                path: Operations.Gmail_users_threads_get.Input.Path,
                query: Operations.Gmail_users_threads_get.Input.Query = .init(),
                headers: Operations.Gmail_users_threads_get.Input.Headers = .init()
            ) {
                self.path = path
                self.query = query
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/threads/{id}/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/threads/{id}/GET/responses/200/content/application\/json`.
                    case json(Components.Schemas.Thread)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.Thread {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.Gmail_users_threads_get.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.Gmail_users_threads_get.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Successful response
            ///
            /// - Remark: Generated from `#/paths//gmail/v1/users/{userId}/threads/{id}/get(gmail.users.threads.get)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.Gmail_users_threads_get.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.Gmail_users_threads_get.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Immediately and permanently deletes the specified thread. Any messages that belong to the thread are also deleted. This operation cannot be undone. Prefer `threads.trash` instead.
    ///
    /// - Remark: HTTP `DELETE /gmail/v1/users/{userId}/threads/{id}`.
    /// - Remark: Generated from `#/paths//gmail/v1/users/{userId}/threads/{id}/delete(gmail.users.threads.delete)`.
    public enum Gmail_users_threads_delete {
        public static let id: Swift.String = "gmail.users.threads.delete"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/threads/{id}/DELETE/path`.
            public struct Path: Sendable, Hashable {
                /// The user's email address. The special value `me` can be used to indicate the authenticated user.
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/threads/{id}/DELETE/path/userId`.
                public var userId: Swift.String
                /// ID of the Thread to delete.
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/threads/{id}/DELETE/path/id`.
                public var id: Swift.String
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - userId: The user's email address. The special value `me` can be used to indicate the authenticated user.
                ///   - id: ID of the Thread to delete.
                public init(
                    userId: Swift.String,
                    id: Swift.String
                ) {
                    self.userId = userId
                    self.id = id
                }
            }
            public var path: Operations.Gmail_users_threads_delete.Input.Path
            /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/threads/{id}/DELETE/query`.
            public struct Query: Sendable, Hashable {
                /// - Remark: Generated from `#/components/parameters/_.xgafv`.
                @frozen public enum __period_xgafv: String, Codable, Hashable, Sendable, CaseIterable {
                    case _1 = "1"
                    case _2 = "2"
                }
                /// V1 error format.
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/threads/{id}/DELETE/query/$.xgafv`.
                public var _dollar__xgafv: Components.Parameters.__period_xgafv?
                /// OAuth access token.
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/threads/{id}/DELETE/query/access_token`.
                public var accessToken: Components.Parameters.AccessToken?
                /// - Remark: Generated from `#/components/parameters/alt`.
                @frozen public enum Alt: String, Codable, Hashable, Sendable, CaseIterable {
                    case json = "json"
                    case media = "media"
                    case proto = "proto"
                }
                /// Data format for response.
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/threads/{id}/DELETE/query/alt`.
                public var alt: Components.Parameters.Alt?
                /// JSONP
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/threads/{id}/DELETE/query/callback`.
                public var callback: Components.Parameters.Callback?
                /// Selector specifying which fields to include in a partial response.
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/threads/{id}/DELETE/query/fields`.
                public var fields: Components.Parameters.Fields?
                /// API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/threads/{id}/DELETE/query/key`.
                public var key: Components.Parameters.Key?
                /// OAuth 2.0 token for the current user.
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/threads/{id}/DELETE/query/oauth_token`.
                public var oauthToken: Components.Parameters.OauthToken?
                /// Returns response with indentations and line breaks.
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/threads/{id}/DELETE/query/prettyPrint`.
                public var prettyPrint: Components.Parameters.PrettyPrint?
                /// Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/threads/{id}/DELETE/query/quotaUser`.
                public var quotaUser: Components.Parameters.QuotaUser?
                /// Upload protocol for media (e.g. "raw", "multipart").
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/threads/{id}/DELETE/query/upload_protocol`.
                public var uploadProtocol: Components.Parameters.UploadProtocol?
                /// Legacy upload protocol for media (e.g. "media", "multipart").
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/threads/{id}/DELETE/query/uploadType`.
                public var uploadType: Components.Parameters.UploadType?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - _dollar__xgafv: V1 error format.
                ///   - accessToken: OAuth access token.
                ///   - alt: Data format for response.
                ///   - callback: JSONP
                ///   - fields: Selector specifying which fields to include in a partial response.
                ///   - key: API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
                ///   - oauthToken: OAuth 2.0 token for the current user.
                ///   - prettyPrint: Returns response with indentations and line breaks.
                ///   - quotaUser: Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
                ///   - uploadProtocol: Upload protocol for media (e.g. "raw", "multipart").
                ///   - uploadType: Legacy upload protocol for media (e.g. "media", "multipart").
                public init(
                    _dollar__xgafv: Components.Parameters.__period_xgafv? = nil,
                    accessToken: Components.Parameters.AccessToken? = nil,
                    alt: Components.Parameters.Alt? = nil,
                    callback: Components.Parameters.Callback? = nil,
                    fields: Components.Parameters.Fields? = nil,
                    key: Components.Parameters.Key? = nil,
                    oauthToken: Components.Parameters.OauthToken? = nil,
                    prettyPrint: Components.Parameters.PrettyPrint? = nil,
                    quotaUser: Components.Parameters.QuotaUser? = nil,
                    uploadProtocol: Components.Parameters.UploadProtocol? = nil,
                    uploadType: Components.Parameters.UploadType? = nil
                ) {
                    self._dollar__xgafv = _dollar__xgafv
                    self.accessToken = accessToken
                    self.alt = alt
                    self.callback = callback
                    self.fields = fields
                    self.key = key
                    self.oauthToken = oauthToken
                    self.prettyPrint = prettyPrint
                    self.quotaUser = quotaUser
                    self.uploadProtocol = uploadProtocol
                    self.uploadType = uploadType
                }
            }
            public var query: Operations.Gmail_users_threads_delete.Input.Query
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - query:
            public init(
                path: Operations.Gmail_users_threads_delete.Input.Path,
                query: Operations.Gmail_users_threads_delete.Input.Query = .init()
            ) {
                self.path = path
                self.query = query
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// Creates a new `Ok`.
                public init() {}
            }
            /// Successful response
            ///
            /// - Remark: Generated from `#/paths//gmail/v1/users/{userId}/threads/{id}/delete(gmail.users.threads.delete)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.Gmail_users_threads_delete.Output.Ok)
            /// Successful response
            ///
            /// - Remark: Generated from `#/paths//gmail/v1/users/{userId}/threads/{id}/delete(gmail.users.threads.delete)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            public static var ok: Self {
                .ok(.init())
            }
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.Gmail_users_threads_delete.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
    }
    /// Modifies the labels applied to the thread. This applies to all messages in the thread.
    ///
    /// - Remark: HTTP `POST /gmail/v1/users/{userId}/threads/{id}/modify`.
    /// - Remark: Generated from `#/paths//gmail/v1/users/{userId}/threads/{id}/modify/post(gmail.users.threads.modify)`.
    public enum Gmail_users_threads_modify {
        public static let id: Swift.String = "gmail.users.threads.modify"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/threads/{id}/modify/POST/path`.
            public struct Path: Sendable, Hashable {
                /// The user's email address. The special value `me` can be used to indicate the authenticated user.
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/threads/{id}/modify/POST/path/userId`.
                public var userId: Swift.String
                /// The ID of the thread to modify.
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/threads/{id}/modify/POST/path/id`.
                public var id: Swift.String
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - userId: The user's email address. The special value `me` can be used to indicate the authenticated user.
                ///   - id: The ID of the thread to modify.
                public init(
                    userId: Swift.String,
                    id: Swift.String
                ) {
                    self.userId = userId
                    self.id = id
                }
            }
            public var path: Operations.Gmail_users_threads_modify.Input.Path
            /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/threads/{id}/modify/POST/query`.
            public struct Query: Sendable, Hashable {
                /// - Remark: Generated from `#/components/parameters/_.xgafv`.
                @frozen public enum __period_xgafv: String, Codable, Hashable, Sendable, CaseIterable {
                    case _1 = "1"
                    case _2 = "2"
                }
                /// V1 error format.
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/threads/{id}/modify/POST/query/$.xgafv`.
                public var _dollar__xgafv: Components.Parameters.__period_xgafv?
                /// OAuth access token.
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/threads/{id}/modify/POST/query/access_token`.
                public var accessToken: Components.Parameters.AccessToken?
                /// - Remark: Generated from `#/components/parameters/alt`.
                @frozen public enum Alt: String, Codable, Hashable, Sendable, CaseIterable {
                    case json = "json"
                    case media = "media"
                    case proto = "proto"
                }
                /// Data format for response.
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/threads/{id}/modify/POST/query/alt`.
                public var alt: Components.Parameters.Alt?
                /// JSONP
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/threads/{id}/modify/POST/query/callback`.
                public var callback: Components.Parameters.Callback?
                /// Selector specifying which fields to include in a partial response.
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/threads/{id}/modify/POST/query/fields`.
                public var fields: Components.Parameters.Fields?
                /// API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/threads/{id}/modify/POST/query/key`.
                public var key: Components.Parameters.Key?
                /// OAuth 2.0 token for the current user.
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/threads/{id}/modify/POST/query/oauth_token`.
                public var oauthToken: Components.Parameters.OauthToken?
                /// Returns response with indentations and line breaks.
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/threads/{id}/modify/POST/query/prettyPrint`.
                public var prettyPrint: Components.Parameters.PrettyPrint?
                /// Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/threads/{id}/modify/POST/query/quotaUser`.
                public var quotaUser: Components.Parameters.QuotaUser?
                /// Upload protocol for media (e.g. "raw", "multipart").
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/threads/{id}/modify/POST/query/upload_protocol`.
                public var uploadProtocol: Components.Parameters.UploadProtocol?
                /// Legacy upload protocol for media (e.g. "media", "multipart").
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/threads/{id}/modify/POST/query/uploadType`.
                public var uploadType: Components.Parameters.UploadType?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - _dollar__xgafv: V1 error format.
                ///   - accessToken: OAuth access token.
                ///   - alt: Data format for response.
                ///   - callback: JSONP
                ///   - fields: Selector specifying which fields to include in a partial response.
                ///   - key: API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
                ///   - oauthToken: OAuth 2.0 token for the current user.
                ///   - prettyPrint: Returns response with indentations and line breaks.
                ///   - quotaUser: Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
                ///   - uploadProtocol: Upload protocol for media (e.g. "raw", "multipart").
                ///   - uploadType: Legacy upload protocol for media (e.g. "media", "multipart").
                public init(
                    _dollar__xgafv: Components.Parameters.__period_xgafv? = nil,
                    accessToken: Components.Parameters.AccessToken? = nil,
                    alt: Components.Parameters.Alt? = nil,
                    callback: Components.Parameters.Callback? = nil,
                    fields: Components.Parameters.Fields? = nil,
                    key: Components.Parameters.Key? = nil,
                    oauthToken: Components.Parameters.OauthToken? = nil,
                    prettyPrint: Components.Parameters.PrettyPrint? = nil,
                    quotaUser: Components.Parameters.QuotaUser? = nil,
                    uploadProtocol: Components.Parameters.UploadProtocol? = nil,
                    uploadType: Components.Parameters.UploadType? = nil
                ) {
                    self._dollar__xgafv = _dollar__xgafv
                    self.accessToken = accessToken
                    self.alt = alt
                    self.callback = callback
                    self.fields = fields
                    self.key = key
                    self.oauthToken = oauthToken
                    self.prettyPrint = prettyPrint
                    self.quotaUser = quotaUser
                    self.uploadProtocol = uploadProtocol
                    self.uploadType = uploadType
                }
            }
            public var query: Operations.Gmail_users_threads_modify.Input.Query
            /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/threads/{id}/modify/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.Gmail_users_threads_modify.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.Gmail_users_threads_modify.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.Gmail_users_threads_modify.Input.Headers
            /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/threads/{id}/modify/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/threads/{id}/modify/POST/requestBody/content/application\/json`.
                case json(Components.Schemas.ModifyThreadRequest)
            }
            public var body: Operations.Gmail_users_threads_modify.Input.Body?
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - query:
            ///   - headers:
            ///   - body:
            public init(
                path: Operations.Gmail_users_threads_modify.Input.Path,
                query: Operations.Gmail_users_threads_modify.Input.Query = .init(),
                headers: Operations.Gmail_users_threads_modify.Input.Headers = .init(),
                body: Operations.Gmail_users_threads_modify.Input.Body? = nil
            ) {
                self.path = path
                self.query = query
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/threads/{id}/modify/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/threads/{id}/modify/POST/responses/200/content/application\/json`.
                    case json(Components.Schemas.Thread)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.Thread {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.Gmail_users_threads_modify.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.Gmail_users_threads_modify.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Successful response
            ///
            /// - Remark: Generated from `#/paths//gmail/v1/users/{userId}/threads/{id}/modify/post(gmail.users.threads.modify)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.Gmail_users_threads_modify.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.Gmail_users_threads_modify.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Moves the specified thread to the trash. Any messages that belong to the thread are also moved to the trash.
    ///
    /// - Remark: HTTP `POST /gmail/v1/users/{userId}/threads/{id}/trash`.
    /// - Remark: Generated from `#/paths//gmail/v1/users/{userId}/threads/{id}/trash/post(gmail.users.threads.trash)`.
    public enum Gmail_users_threads_trash {
        public static let id: Swift.String = "gmail.users.threads.trash"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/threads/{id}/trash/POST/path`.
            public struct Path: Sendable, Hashable {
                /// The user's email address. The special value `me` can be used to indicate the authenticated user.
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/threads/{id}/trash/POST/path/userId`.
                public var userId: Swift.String
                /// The ID of the thread to Trash.
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/threads/{id}/trash/POST/path/id`.
                public var id: Swift.String
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - userId: The user's email address. The special value `me` can be used to indicate the authenticated user.
                ///   - id: The ID of the thread to Trash.
                public init(
                    userId: Swift.String,
                    id: Swift.String
                ) {
                    self.userId = userId
                    self.id = id
                }
            }
            public var path: Operations.Gmail_users_threads_trash.Input.Path
            /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/threads/{id}/trash/POST/query`.
            public struct Query: Sendable, Hashable {
                /// - Remark: Generated from `#/components/parameters/_.xgafv`.
                @frozen public enum __period_xgafv: String, Codable, Hashable, Sendable, CaseIterable {
                    case _1 = "1"
                    case _2 = "2"
                }
                /// V1 error format.
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/threads/{id}/trash/POST/query/$.xgafv`.
                public var _dollar__xgafv: Components.Parameters.__period_xgafv?
                /// OAuth access token.
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/threads/{id}/trash/POST/query/access_token`.
                public var accessToken: Components.Parameters.AccessToken?
                /// - Remark: Generated from `#/components/parameters/alt`.
                @frozen public enum Alt: String, Codable, Hashable, Sendable, CaseIterable {
                    case json = "json"
                    case media = "media"
                    case proto = "proto"
                }
                /// Data format for response.
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/threads/{id}/trash/POST/query/alt`.
                public var alt: Components.Parameters.Alt?
                /// JSONP
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/threads/{id}/trash/POST/query/callback`.
                public var callback: Components.Parameters.Callback?
                /// Selector specifying which fields to include in a partial response.
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/threads/{id}/trash/POST/query/fields`.
                public var fields: Components.Parameters.Fields?
                /// API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/threads/{id}/trash/POST/query/key`.
                public var key: Components.Parameters.Key?
                /// OAuth 2.0 token for the current user.
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/threads/{id}/trash/POST/query/oauth_token`.
                public var oauthToken: Components.Parameters.OauthToken?
                /// Returns response with indentations and line breaks.
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/threads/{id}/trash/POST/query/prettyPrint`.
                public var prettyPrint: Components.Parameters.PrettyPrint?
                /// Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/threads/{id}/trash/POST/query/quotaUser`.
                public var quotaUser: Components.Parameters.QuotaUser?
                /// Upload protocol for media (e.g. "raw", "multipart").
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/threads/{id}/trash/POST/query/upload_protocol`.
                public var uploadProtocol: Components.Parameters.UploadProtocol?
                /// Legacy upload protocol for media (e.g. "media", "multipart").
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/threads/{id}/trash/POST/query/uploadType`.
                public var uploadType: Components.Parameters.UploadType?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - _dollar__xgafv: V1 error format.
                ///   - accessToken: OAuth access token.
                ///   - alt: Data format for response.
                ///   - callback: JSONP
                ///   - fields: Selector specifying which fields to include in a partial response.
                ///   - key: API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
                ///   - oauthToken: OAuth 2.0 token for the current user.
                ///   - prettyPrint: Returns response with indentations and line breaks.
                ///   - quotaUser: Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
                ///   - uploadProtocol: Upload protocol for media (e.g. "raw", "multipart").
                ///   - uploadType: Legacy upload protocol for media (e.g. "media", "multipart").
                public init(
                    _dollar__xgafv: Components.Parameters.__period_xgafv? = nil,
                    accessToken: Components.Parameters.AccessToken? = nil,
                    alt: Components.Parameters.Alt? = nil,
                    callback: Components.Parameters.Callback? = nil,
                    fields: Components.Parameters.Fields? = nil,
                    key: Components.Parameters.Key? = nil,
                    oauthToken: Components.Parameters.OauthToken? = nil,
                    prettyPrint: Components.Parameters.PrettyPrint? = nil,
                    quotaUser: Components.Parameters.QuotaUser? = nil,
                    uploadProtocol: Components.Parameters.UploadProtocol? = nil,
                    uploadType: Components.Parameters.UploadType? = nil
                ) {
                    self._dollar__xgafv = _dollar__xgafv
                    self.accessToken = accessToken
                    self.alt = alt
                    self.callback = callback
                    self.fields = fields
                    self.key = key
                    self.oauthToken = oauthToken
                    self.prettyPrint = prettyPrint
                    self.quotaUser = quotaUser
                    self.uploadProtocol = uploadProtocol
                    self.uploadType = uploadType
                }
            }
            public var query: Operations.Gmail_users_threads_trash.Input.Query
            /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/threads/{id}/trash/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.Gmail_users_threads_trash.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.Gmail_users_threads_trash.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.Gmail_users_threads_trash.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - query:
            ///   - headers:
            public init(
                path: Operations.Gmail_users_threads_trash.Input.Path,
                query: Operations.Gmail_users_threads_trash.Input.Query = .init(),
                headers: Operations.Gmail_users_threads_trash.Input.Headers = .init()
            ) {
                self.path = path
                self.query = query
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/threads/{id}/trash/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/threads/{id}/trash/POST/responses/200/content/application\/json`.
                    case json(Components.Schemas.Thread)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.Thread {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.Gmail_users_threads_trash.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.Gmail_users_threads_trash.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Successful response
            ///
            /// - Remark: Generated from `#/paths//gmail/v1/users/{userId}/threads/{id}/trash/post(gmail.users.threads.trash)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.Gmail_users_threads_trash.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.Gmail_users_threads_trash.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Removes the specified thread from the trash. Any messages that belong to the thread are also removed from the trash.
    ///
    /// - Remark: HTTP `POST /gmail/v1/users/{userId}/threads/{id}/untrash`.
    /// - Remark: Generated from `#/paths//gmail/v1/users/{userId}/threads/{id}/untrash/post(gmail.users.threads.untrash)`.
    public enum Gmail_users_threads_untrash {
        public static let id: Swift.String = "gmail.users.threads.untrash"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/threads/{id}/untrash/POST/path`.
            public struct Path: Sendable, Hashable {
                /// The user's email address. The special value `me` can be used to indicate the authenticated user.
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/threads/{id}/untrash/POST/path/userId`.
                public var userId: Swift.String
                /// The ID of the thread to remove from Trash.
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/threads/{id}/untrash/POST/path/id`.
                public var id: Swift.String
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - userId: The user's email address. The special value `me` can be used to indicate the authenticated user.
                ///   - id: The ID of the thread to remove from Trash.
                public init(
                    userId: Swift.String,
                    id: Swift.String
                ) {
                    self.userId = userId
                    self.id = id
                }
            }
            public var path: Operations.Gmail_users_threads_untrash.Input.Path
            /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/threads/{id}/untrash/POST/query`.
            public struct Query: Sendable, Hashable {
                /// - Remark: Generated from `#/components/parameters/_.xgafv`.
                @frozen public enum __period_xgafv: String, Codable, Hashable, Sendable, CaseIterable {
                    case _1 = "1"
                    case _2 = "2"
                }
                /// V1 error format.
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/threads/{id}/untrash/POST/query/$.xgafv`.
                public var _dollar__xgafv: Components.Parameters.__period_xgafv?
                /// OAuth access token.
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/threads/{id}/untrash/POST/query/access_token`.
                public var accessToken: Components.Parameters.AccessToken?
                /// - Remark: Generated from `#/components/parameters/alt`.
                @frozen public enum Alt: String, Codable, Hashable, Sendable, CaseIterable {
                    case json = "json"
                    case media = "media"
                    case proto = "proto"
                }
                /// Data format for response.
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/threads/{id}/untrash/POST/query/alt`.
                public var alt: Components.Parameters.Alt?
                /// JSONP
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/threads/{id}/untrash/POST/query/callback`.
                public var callback: Components.Parameters.Callback?
                /// Selector specifying which fields to include in a partial response.
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/threads/{id}/untrash/POST/query/fields`.
                public var fields: Components.Parameters.Fields?
                /// API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/threads/{id}/untrash/POST/query/key`.
                public var key: Components.Parameters.Key?
                /// OAuth 2.0 token for the current user.
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/threads/{id}/untrash/POST/query/oauth_token`.
                public var oauthToken: Components.Parameters.OauthToken?
                /// Returns response with indentations and line breaks.
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/threads/{id}/untrash/POST/query/prettyPrint`.
                public var prettyPrint: Components.Parameters.PrettyPrint?
                /// Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/threads/{id}/untrash/POST/query/quotaUser`.
                public var quotaUser: Components.Parameters.QuotaUser?
                /// Upload protocol for media (e.g. "raw", "multipart").
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/threads/{id}/untrash/POST/query/upload_protocol`.
                public var uploadProtocol: Components.Parameters.UploadProtocol?
                /// Legacy upload protocol for media (e.g. "media", "multipart").
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/threads/{id}/untrash/POST/query/uploadType`.
                public var uploadType: Components.Parameters.UploadType?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - _dollar__xgafv: V1 error format.
                ///   - accessToken: OAuth access token.
                ///   - alt: Data format for response.
                ///   - callback: JSONP
                ///   - fields: Selector specifying which fields to include in a partial response.
                ///   - key: API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
                ///   - oauthToken: OAuth 2.0 token for the current user.
                ///   - prettyPrint: Returns response with indentations and line breaks.
                ///   - quotaUser: Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
                ///   - uploadProtocol: Upload protocol for media (e.g. "raw", "multipart").
                ///   - uploadType: Legacy upload protocol for media (e.g. "media", "multipart").
                public init(
                    _dollar__xgafv: Components.Parameters.__period_xgafv? = nil,
                    accessToken: Components.Parameters.AccessToken? = nil,
                    alt: Components.Parameters.Alt? = nil,
                    callback: Components.Parameters.Callback? = nil,
                    fields: Components.Parameters.Fields? = nil,
                    key: Components.Parameters.Key? = nil,
                    oauthToken: Components.Parameters.OauthToken? = nil,
                    prettyPrint: Components.Parameters.PrettyPrint? = nil,
                    quotaUser: Components.Parameters.QuotaUser? = nil,
                    uploadProtocol: Components.Parameters.UploadProtocol? = nil,
                    uploadType: Components.Parameters.UploadType? = nil
                ) {
                    self._dollar__xgafv = _dollar__xgafv
                    self.accessToken = accessToken
                    self.alt = alt
                    self.callback = callback
                    self.fields = fields
                    self.key = key
                    self.oauthToken = oauthToken
                    self.prettyPrint = prettyPrint
                    self.quotaUser = quotaUser
                    self.uploadProtocol = uploadProtocol
                    self.uploadType = uploadType
                }
            }
            public var query: Operations.Gmail_users_threads_untrash.Input.Query
            /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/threads/{id}/untrash/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.Gmail_users_threads_untrash.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.Gmail_users_threads_untrash.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.Gmail_users_threads_untrash.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - query:
            ///   - headers:
            public init(
                path: Operations.Gmail_users_threads_untrash.Input.Path,
                query: Operations.Gmail_users_threads_untrash.Input.Query = .init(),
                headers: Operations.Gmail_users_threads_untrash.Input.Headers = .init()
            ) {
                self.path = path
                self.query = query
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/threads/{id}/untrash/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/threads/{id}/untrash/POST/responses/200/content/application\/json`.
                    case json(Components.Schemas.Thread)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.Thread {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.Gmail_users_threads_untrash.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.Gmail_users_threads_untrash.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Successful response
            ///
            /// - Remark: Generated from `#/paths//gmail/v1/users/{userId}/threads/{id}/untrash/post(gmail.users.threads.untrash)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.Gmail_users_threads_untrash.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.Gmail_users_threads_untrash.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Set up or update a push notification watch on the given user mailbox.
    ///
    /// - Remark: HTTP `POST /gmail/v1/users/{userId}/watch`.
    /// - Remark: Generated from `#/paths//gmail/v1/users/{userId}/watch/post(gmail.users.watch)`.
    public enum Gmail_users_watch {
        public static let id: Swift.String = "gmail.users.watch"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/watch/POST/path`.
            public struct Path: Sendable, Hashable {
                /// The user's email address. The special value `me` can be used to indicate the authenticated user.
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/watch/POST/path/userId`.
                public var userId: Swift.String
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - userId: The user's email address. The special value `me` can be used to indicate the authenticated user.
                public init(userId: Swift.String) {
                    self.userId = userId
                }
            }
            public var path: Operations.Gmail_users_watch.Input.Path
            /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/watch/POST/query`.
            public struct Query: Sendable, Hashable {
                /// - Remark: Generated from `#/components/parameters/_.xgafv`.
                @frozen public enum __period_xgafv: String, Codable, Hashable, Sendable, CaseIterable {
                    case _1 = "1"
                    case _2 = "2"
                }
                /// V1 error format.
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/watch/POST/query/$.xgafv`.
                public var _dollar__xgafv: Components.Parameters.__period_xgafv?
                /// OAuth access token.
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/watch/POST/query/access_token`.
                public var accessToken: Components.Parameters.AccessToken?
                /// - Remark: Generated from `#/components/parameters/alt`.
                @frozen public enum Alt: String, Codable, Hashable, Sendable, CaseIterable {
                    case json = "json"
                    case media = "media"
                    case proto = "proto"
                }
                /// Data format for response.
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/watch/POST/query/alt`.
                public var alt: Components.Parameters.Alt?
                /// JSONP
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/watch/POST/query/callback`.
                public var callback: Components.Parameters.Callback?
                /// Selector specifying which fields to include in a partial response.
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/watch/POST/query/fields`.
                public var fields: Components.Parameters.Fields?
                /// API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/watch/POST/query/key`.
                public var key: Components.Parameters.Key?
                /// OAuth 2.0 token for the current user.
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/watch/POST/query/oauth_token`.
                public var oauthToken: Components.Parameters.OauthToken?
                /// Returns response with indentations and line breaks.
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/watch/POST/query/prettyPrint`.
                public var prettyPrint: Components.Parameters.PrettyPrint?
                /// Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/watch/POST/query/quotaUser`.
                public var quotaUser: Components.Parameters.QuotaUser?
                /// Upload protocol for media (e.g. "raw", "multipart").
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/watch/POST/query/upload_protocol`.
                public var uploadProtocol: Components.Parameters.UploadProtocol?
                /// Legacy upload protocol for media (e.g. "media", "multipart").
                ///
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/watch/POST/query/uploadType`.
                public var uploadType: Components.Parameters.UploadType?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - _dollar__xgafv: V1 error format.
                ///   - accessToken: OAuth access token.
                ///   - alt: Data format for response.
                ///   - callback: JSONP
                ///   - fields: Selector specifying which fields to include in a partial response.
                ///   - key: API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
                ///   - oauthToken: OAuth 2.0 token for the current user.
                ///   - prettyPrint: Returns response with indentations and line breaks.
                ///   - quotaUser: Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
                ///   - uploadProtocol: Upload protocol for media (e.g. "raw", "multipart").
                ///   - uploadType: Legacy upload protocol for media (e.g. "media", "multipart").
                public init(
                    _dollar__xgafv: Components.Parameters.__period_xgafv? = nil,
                    accessToken: Components.Parameters.AccessToken? = nil,
                    alt: Components.Parameters.Alt? = nil,
                    callback: Components.Parameters.Callback? = nil,
                    fields: Components.Parameters.Fields? = nil,
                    key: Components.Parameters.Key? = nil,
                    oauthToken: Components.Parameters.OauthToken? = nil,
                    prettyPrint: Components.Parameters.PrettyPrint? = nil,
                    quotaUser: Components.Parameters.QuotaUser? = nil,
                    uploadProtocol: Components.Parameters.UploadProtocol? = nil,
                    uploadType: Components.Parameters.UploadType? = nil
                ) {
                    self._dollar__xgafv = _dollar__xgafv
                    self.accessToken = accessToken
                    self.alt = alt
                    self.callback = callback
                    self.fields = fields
                    self.key = key
                    self.oauthToken = oauthToken
                    self.prettyPrint = prettyPrint
                    self.quotaUser = quotaUser
                    self.uploadProtocol = uploadProtocol
                    self.uploadType = uploadType
                }
            }
            public var query: Operations.Gmail_users_watch.Input.Query
            /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/watch/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.Gmail_users_watch.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.Gmail_users_watch.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.Gmail_users_watch.Input.Headers
            /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/watch/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/watch/POST/requestBody/content/application\/json`.
                case json(Components.Schemas.WatchRequest)
            }
            public var body: Operations.Gmail_users_watch.Input.Body?
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - query:
            ///   - headers:
            ///   - body:
            public init(
                path: Operations.Gmail_users_watch.Input.Path,
                query: Operations.Gmail_users_watch.Input.Query = .init(),
                headers: Operations.Gmail_users_watch.Input.Headers = .init(),
                body: Operations.Gmail_users_watch.Input.Body? = nil
            ) {
                self.path = path
                self.query = query
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/watch/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/gmail/v1/users/{userId}/watch/POST/responses/200/content/application\/json`.
                    case json(Components.Schemas.WatchResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.WatchResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.Gmail_users_watch.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.Gmail_users_watch.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Successful response
            ///
            /// - Remark: Generated from `#/paths//gmail/v1/users/{userId}/watch/post(gmail.users.watch)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.Gmail_users_watch.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.Gmail_users_watch.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
}
