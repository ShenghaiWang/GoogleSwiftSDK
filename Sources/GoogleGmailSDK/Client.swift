// Generated by swift-openapi-generator, do not modify.
@_spi(Generated) import OpenAPIRuntime
#if os(Linux)
@preconcurrency import struct Foundation.URL
@preconcurrency import struct Foundation.Data
@preconcurrency import struct Foundation.Date
#else
import struct Foundation.URL
import struct Foundation.Data
import struct Foundation.Date
#endif
import HTTPTypes
/// The Gmail API lets you view and manage Gmail mailbox data like threads, messages, and labels.
public struct Client: APIProtocol {
    /// The underlying HTTP client.
    private let client: UniversalClient
    /// Creates a new client.
    /// - Parameters:
    ///   - serverURL: The server URL that the client connects to. Any server
    ///   URLs defined in the OpenAPI document are available as static methods
    ///   on the ``Servers`` type.
    ///   - configuration: A set of configuration values for the client.
    ///   - transport: A transport that performs HTTP operations.
    ///   - middlewares: A list of middlewares to call before the transport.
    public init(
        serverURL: Foundation.URL,
        configuration: Configuration = .init(),
        transport: any ClientTransport,
        middlewares: [any ClientMiddleware] = []
    ) {
        self.client = .init(
            serverURL: serverURL,
            configuration: configuration,
            transport: transport,
            middlewares: middlewares
        )
    }
    private var converter: Converter {
        client.converter
    }
    /// Lists the drafts in the user's mailbox.
    ///
    /// - Remark: HTTP `GET /gmail/v1/users/{userId}/drafts`.
    /// - Remark: Generated from `#/paths//gmail/v1/users/{userId}/drafts/get(gmail.users.drafts.list)`.
    public func gmail_users_drafts_list(_ input: Operations.Gmail_users_drafts_list.Input) async throws -> Operations.Gmail_users_drafts_list.Output {
        try await client.send(
            input: input,
            forOperation: Operations.Gmail_users_drafts_list.id,
            serializer: { input in
                let path = try converter.renderedPath(
                    template: "/gmail/v1/users/{}/drafts",
                    parameters: [
                        input.path.userId
                    ]
                )
                var request: HTTPTypes.HTTPRequest = .init(
                    soar_path: path,
                    method: .get
                )
                suppressMutabilityWarning(&request)
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "$.xgafv",
                    value: input.query._dollar__xgafv
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "access_token",
                    value: input.query.accessToken
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "alt",
                    value: input.query.alt
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "callback",
                    value: input.query.callback
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "fields",
                    value: input.query.fields
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "key",
                    value: input.query.key
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "oauth_token",
                    value: input.query.oauthToken
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "prettyPrint",
                    value: input.query.prettyPrint
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "quotaUser",
                    value: input.query.quotaUser
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "upload_protocol",
                    value: input.query.uploadProtocol
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "uploadType",
                    value: input.query.uploadType
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "includeSpamTrash",
                    value: input.query.includeSpamTrash
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "maxResults",
                    value: input.query.maxResults
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "pageToken",
                    value: input.query.pageToken
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "q",
                    value: input.query.q
                )
                converter.setAcceptHeader(
                    in: &request.headerFields,
                    contentTypes: input.headers.accept
                )
                return (request, nil)
            },
            deserializer: { response, responseBody in
                switch response.status.code {
                case 200:
                    let contentType = converter.extractContentTypeIfPresent(in: response.headerFields)
                    let body: Operations.Gmail_users_drafts_list.Output.Ok.Body
                    let chosenContentType = try converter.bestContentType(
                        received: contentType,
                        options: [
                            "application/json"
                        ]
                    )
                    switch chosenContentType {
                    case "application/json":
                        body = try await converter.getResponseBodyAsJSON(
                            Components.Schemas.ListDraftsResponse.self,
                            from: responseBody,
                            transforming: { value in
                                .json(value)
                            }
                        )
                    default:
                        preconditionFailure("bestContentType chose an invalid content type.")
                    }
                    return .ok(.init(body: body))
                default:
                    return .undocumented(
                        statusCode: response.status.code,
                        .init(
                            headerFields: response.headerFields,
                            body: responseBody
                        )
                    )
                }
            }
        )
    }
    /// Creates a new draft with the `DRAFT` label.
    ///
    /// - Remark: HTTP `POST /gmail/v1/users/{userId}/drafts`.
    /// - Remark: Generated from `#/paths//gmail/v1/users/{userId}/drafts/post(gmail.users.drafts.create)`.
    public func gmail_users_drafts_create(_ input: Operations.Gmail_users_drafts_create.Input) async throws -> Operations.Gmail_users_drafts_create.Output {
        try await client.send(
            input: input,
            forOperation: Operations.Gmail_users_drafts_create.id,
            serializer: { input in
                let path = try converter.renderedPath(
                    template: "/gmail/v1/users/{}/drafts",
                    parameters: [
                        input.path.userId
                    ]
                )
                var request: HTTPTypes.HTTPRequest = .init(
                    soar_path: path,
                    method: .post
                )
                suppressMutabilityWarning(&request)
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "$.xgafv",
                    value: input.query._dollar__xgafv
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "access_token",
                    value: input.query.accessToken
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "alt",
                    value: input.query.alt
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "callback",
                    value: input.query.callback
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "fields",
                    value: input.query.fields
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "key",
                    value: input.query.key
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "oauth_token",
                    value: input.query.oauthToken
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "prettyPrint",
                    value: input.query.prettyPrint
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "quotaUser",
                    value: input.query.quotaUser
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "upload_protocol",
                    value: input.query.uploadProtocol
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "uploadType",
                    value: input.query.uploadType
                )
                converter.setAcceptHeader(
                    in: &request.headerFields,
                    contentTypes: input.headers.accept
                )
                let body: OpenAPIRuntime.HTTPBody?
                switch input.body {
                case .none:
                    body = nil
                case let .messageCpim(value):
                    body = try converter.setOptionalRequestBodyAsBinary(
                        value,
                        headerFields: &request.headerFields,
                        contentType: "message/cpim"
                    )
                case let .messageDeliveryStatus(value):
                    body = try converter.setOptionalRequestBodyAsBinary(
                        value,
                        headerFields: &request.headerFields,
                        contentType: "message/delivery-status"
                    )
                case let .messageDispositionNotification(value):
                    body = try converter.setOptionalRequestBodyAsBinary(
                        value,
                        headerFields: &request.headerFields,
                        contentType: "message/disposition-notification"
                    )
                case let .messageExternalBody(value):
                    body = try converter.setOptionalRequestBodyAsBinary(
                        value,
                        headerFields: &request.headerFields,
                        contentType: "message/external-body"
                    )
                case let .messageFeedbackReport(value):
                    body = try converter.setOptionalRequestBodyAsBinary(
                        value,
                        headerFields: &request.headerFields,
                        contentType: "message/feedback-report"
                    )
                case let .messageGlobal(value):
                    body = try converter.setOptionalRequestBodyAsBinary(
                        value,
                        headerFields: &request.headerFields,
                        contentType: "message/global"
                    )
                case let .messageGlobalDeliveryStatus(value):
                    body = try converter.setOptionalRequestBodyAsBinary(
                        value,
                        headerFields: &request.headerFields,
                        contentType: "message/global-delivery-status"
                    )
                case let .messageGlobalDispositionNotification(value):
                    body = try converter.setOptionalRequestBodyAsBinary(
                        value,
                        headerFields: &request.headerFields,
                        contentType: "message/global-disposition-notification"
                    )
                case let .messageGlobalHeaders(value):
                    body = try converter.setOptionalRequestBodyAsBinary(
                        value,
                        headerFields: &request.headerFields,
                        contentType: "message/global-headers"
                    )
                case let .messageHttp(value):
                    body = try converter.setOptionalRequestBodyAsBinary(
                        value,
                        headerFields: &request.headerFields,
                        contentType: "message/http"
                    )
                case let .messageImdnXml(value):
                    body = try converter.setOptionalRequestBodyAsBinary(
                        value,
                        headerFields: &request.headerFields,
                        contentType: "message/imdn+xml"
                    )
                case let .messageNews(value):
                    body = try converter.setOptionalRequestBodyAsBinary(
                        value,
                        headerFields: &request.headerFields,
                        contentType: "message/news"
                    )
                case let .messagePartial(value):
                    body = try converter.setOptionalRequestBodyAsBinary(
                        value,
                        headerFields: &request.headerFields,
                        contentType: "message/partial"
                    )
                case let .messageRfc822(value):
                    body = try converter.setOptionalRequestBodyAsBinary(
                        value,
                        headerFields: &request.headerFields,
                        contentType: "message/rfc822"
                    )
                case let .messageSHttp(value):
                    body = try converter.setOptionalRequestBodyAsBinary(
                        value,
                        headerFields: &request.headerFields,
                        contentType: "message/s-http"
                    )
                case let .messageSip(value):
                    body = try converter.setOptionalRequestBodyAsBinary(
                        value,
                        headerFields: &request.headerFields,
                        contentType: "message/sip"
                    )
                case let .messageSipfrag(value):
                    body = try converter.setOptionalRequestBodyAsBinary(
                        value,
                        headerFields: &request.headerFields,
                        contentType: "message/sipfrag"
                    )
                case let .messageTrackingStatus(value):
                    body = try converter.setOptionalRequestBodyAsBinary(
                        value,
                        headerFields: &request.headerFields,
                        contentType: "message/tracking-status"
                    )
                case let .messageVnd_si_simp(value):
                    body = try converter.setOptionalRequestBodyAsBinary(
                        value,
                        headerFields: &request.headerFields,
                        contentType: "message/vnd.si.simp"
                    )
                case let .messageVnd_wfa_wsc(value):
                    body = try converter.setOptionalRequestBodyAsBinary(
                        value,
                        headerFields: &request.headerFields,
                        contentType: "message/vnd.wfa.wsc"
                    )
                }
                return (request, body)
            },
            deserializer: { response, responseBody in
                switch response.status.code {
                case 200:
                    let contentType = converter.extractContentTypeIfPresent(in: response.headerFields)
                    let body: Operations.Gmail_users_drafts_create.Output.Ok.Body
                    let chosenContentType = try converter.bestContentType(
                        received: contentType,
                        options: [
                            "application/json"
                        ]
                    )
                    switch chosenContentType {
                    case "application/json":
                        body = try await converter.getResponseBodyAsJSON(
                            Components.Schemas.Draft.self,
                            from: responseBody,
                            transforming: { value in
                                .json(value)
                            }
                        )
                    default:
                        preconditionFailure("bestContentType chose an invalid content type.")
                    }
                    return .ok(.init(body: body))
                default:
                    return .undocumented(
                        statusCode: response.status.code,
                        .init(
                            headerFields: response.headerFields,
                            body: responseBody
                        )
                    )
                }
            }
        )
    }
    /// Sends the specified, existing draft to the recipients in the `To`, `Cc`, and `Bcc` headers.
    ///
    /// - Remark: HTTP `POST /gmail/v1/users/{userId}/drafts/send`.
    /// - Remark: Generated from `#/paths//gmail/v1/users/{userId}/drafts/send/post(gmail.users.drafts.send)`.
    public func gmail_users_drafts_send(_ input: Operations.Gmail_users_drafts_send.Input) async throws -> Operations.Gmail_users_drafts_send.Output {
        try await client.send(
            input: input,
            forOperation: Operations.Gmail_users_drafts_send.id,
            serializer: { input in
                let path = try converter.renderedPath(
                    template: "/gmail/v1/users/{}/drafts/send",
                    parameters: [
                        input.path.userId
                    ]
                )
                var request: HTTPTypes.HTTPRequest = .init(
                    soar_path: path,
                    method: .post
                )
                suppressMutabilityWarning(&request)
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "$.xgafv",
                    value: input.query._dollar__xgafv
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "access_token",
                    value: input.query.accessToken
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "alt",
                    value: input.query.alt
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "callback",
                    value: input.query.callback
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "fields",
                    value: input.query.fields
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "key",
                    value: input.query.key
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "oauth_token",
                    value: input.query.oauthToken
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "prettyPrint",
                    value: input.query.prettyPrint
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "quotaUser",
                    value: input.query.quotaUser
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "upload_protocol",
                    value: input.query.uploadProtocol
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "uploadType",
                    value: input.query.uploadType
                )
                converter.setAcceptHeader(
                    in: &request.headerFields,
                    contentTypes: input.headers.accept
                )
                let body: OpenAPIRuntime.HTTPBody?
                switch input.body {
                case .none:
                    body = nil
                case let .messageCpim(value):
                    body = try converter.setOptionalRequestBodyAsBinary(
                        value,
                        headerFields: &request.headerFields,
                        contentType: "message/cpim"
                    )
                case let .messageDeliveryStatus(value):
                    body = try converter.setOptionalRequestBodyAsBinary(
                        value,
                        headerFields: &request.headerFields,
                        contentType: "message/delivery-status"
                    )
                case let .messageDispositionNotification(value):
                    body = try converter.setOptionalRequestBodyAsBinary(
                        value,
                        headerFields: &request.headerFields,
                        contentType: "message/disposition-notification"
                    )
                case let .messageExternalBody(value):
                    body = try converter.setOptionalRequestBodyAsBinary(
                        value,
                        headerFields: &request.headerFields,
                        contentType: "message/external-body"
                    )
                case let .messageFeedbackReport(value):
                    body = try converter.setOptionalRequestBodyAsBinary(
                        value,
                        headerFields: &request.headerFields,
                        contentType: "message/feedback-report"
                    )
                case let .messageGlobal(value):
                    body = try converter.setOptionalRequestBodyAsBinary(
                        value,
                        headerFields: &request.headerFields,
                        contentType: "message/global"
                    )
                case let .messageGlobalDeliveryStatus(value):
                    body = try converter.setOptionalRequestBodyAsBinary(
                        value,
                        headerFields: &request.headerFields,
                        contentType: "message/global-delivery-status"
                    )
                case let .messageGlobalDispositionNotification(value):
                    body = try converter.setOptionalRequestBodyAsBinary(
                        value,
                        headerFields: &request.headerFields,
                        contentType: "message/global-disposition-notification"
                    )
                case let .messageGlobalHeaders(value):
                    body = try converter.setOptionalRequestBodyAsBinary(
                        value,
                        headerFields: &request.headerFields,
                        contentType: "message/global-headers"
                    )
                case let .messageHttp(value):
                    body = try converter.setOptionalRequestBodyAsBinary(
                        value,
                        headerFields: &request.headerFields,
                        contentType: "message/http"
                    )
                case let .messageImdnXml(value):
                    body = try converter.setOptionalRequestBodyAsBinary(
                        value,
                        headerFields: &request.headerFields,
                        contentType: "message/imdn+xml"
                    )
                case let .messageNews(value):
                    body = try converter.setOptionalRequestBodyAsBinary(
                        value,
                        headerFields: &request.headerFields,
                        contentType: "message/news"
                    )
                case let .messagePartial(value):
                    body = try converter.setOptionalRequestBodyAsBinary(
                        value,
                        headerFields: &request.headerFields,
                        contentType: "message/partial"
                    )
                case let .messageRfc822(value):
                    body = try converter.setOptionalRequestBodyAsBinary(
                        value,
                        headerFields: &request.headerFields,
                        contentType: "message/rfc822"
                    )
                case let .messageSHttp(value):
                    body = try converter.setOptionalRequestBodyAsBinary(
                        value,
                        headerFields: &request.headerFields,
                        contentType: "message/s-http"
                    )
                case let .messageSip(value):
                    body = try converter.setOptionalRequestBodyAsBinary(
                        value,
                        headerFields: &request.headerFields,
                        contentType: "message/sip"
                    )
                case let .messageSipfrag(value):
                    body = try converter.setOptionalRequestBodyAsBinary(
                        value,
                        headerFields: &request.headerFields,
                        contentType: "message/sipfrag"
                    )
                case let .messageTrackingStatus(value):
                    body = try converter.setOptionalRequestBodyAsBinary(
                        value,
                        headerFields: &request.headerFields,
                        contentType: "message/tracking-status"
                    )
                case let .messageVnd_si_simp(value):
                    body = try converter.setOptionalRequestBodyAsBinary(
                        value,
                        headerFields: &request.headerFields,
                        contentType: "message/vnd.si.simp"
                    )
                case let .messageVnd_wfa_wsc(value):
                    body = try converter.setOptionalRequestBodyAsBinary(
                        value,
                        headerFields: &request.headerFields,
                        contentType: "message/vnd.wfa.wsc"
                    )
                }
                return (request, body)
            },
            deserializer: { response, responseBody in
                switch response.status.code {
                case 200:
                    let contentType = converter.extractContentTypeIfPresent(in: response.headerFields)
                    let body: Operations.Gmail_users_drafts_send.Output.Ok.Body
                    let chosenContentType = try converter.bestContentType(
                        received: contentType,
                        options: [
                            "application/json"
                        ]
                    )
                    switch chosenContentType {
                    case "application/json":
                        body = try await converter.getResponseBodyAsJSON(
                            Components.Schemas.Message.self,
                            from: responseBody,
                            transforming: { value in
                                .json(value)
                            }
                        )
                    default:
                        preconditionFailure("bestContentType chose an invalid content type.")
                    }
                    return .ok(.init(body: body))
                default:
                    return .undocumented(
                        statusCode: response.status.code,
                        .init(
                            headerFields: response.headerFields,
                            body: responseBody
                        )
                    )
                }
            }
        )
    }
    /// Gets the specified draft.
    ///
    /// - Remark: HTTP `GET /gmail/v1/users/{userId}/drafts/{id}`.
    /// - Remark: Generated from `#/paths//gmail/v1/users/{userId}/drafts/{id}/get(gmail.users.drafts.get)`.
    public func gmail_users_drafts_get(_ input: Operations.Gmail_users_drafts_get.Input) async throws -> Operations.Gmail_users_drafts_get.Output {
        try await client.send(
            input: input,
            forOperation: Operations.Gmail_users_drafts_get.id,
            serializer: { input in
                let path = try converter.renderedPath(
                    template: "/gmail/v1/users/{}/drafts/{}",
                    parameters: [
                        input.path.userId,
                        input.path.id
                    ]
                )
                var request: HTTPTypes.HTTPRequest = .init(
                    soar_path: path,
                    method: .get
                )
                suppressMutabilityWarning(&request)
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "$.xgafv",
                    value: input.query._dollar__xgafv
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "access_token",
                    value: input.query.accessToken
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "alt",
                    value: input.query.alt
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "callback",
                    value: input.query.callback
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "fields",
                    value: input.query.fields
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "key",
                    value: input.query.key
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "oauth_token",
                    value: input.query.oauthToken
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "prettyPrint",
                    value: input.query.prettyPrint
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "quotaUser",
                    value: input.query.quotaUser
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "upload_protocol",
                    value: input.query.uploadProtocol
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "uploadType",
                    value: input.query.uploadType
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "format",
                    value: input.query.format
                )
                converter.setAcceptHeader(
                    in: &request.headerFields,
                    contentTypes: input.headers.accept
                )
                return (request, nil)
            },
            deserializer: { response, responseBody in
                switch response.status.code {
                case 200:
                    let contentType = converter.extractContentTypeIfPresent(in: response.headerFields)
                    let body: Operations.Gmail_users_drafts_get.Output.Ok.Body
                    let chosenContentType = try converter.bestContentType(
                        received: contentType,
                        options: [
                            "application/json"
                        ]
                    )
                    switch chosenContentType {
                    case "application/json":
                        body = try await converter.getResponseBodyAsJSON(
                            Components.Schemas.Draft.self,
                            from: responseBody,
                            transforming: { value in
                                .json(value)
                            }
                        )
                    default:
                        preconditionFailure("bestContentType chose an invalid content type.")
                    }
                    return .ok(.init(body: body))
                default:
                    return .undocumented(
                        statusCode: response.status.code,
                        .init(
                            headerFields: response.headerFields,
                            body: responseBody
                        )
                    )
                }
            }
        )
    }
    /// Replaces a draft's content.
    ///
    /// - Remark: HTTP `PUT /gmail/v1/users/{userId}/drafts/{id}`.
    /// - Remark: Generated from `#/paths//gmail/v1/users/{userId}/drafts/{id}/put(gmail.users.drafts.update)`.
    public func gmail_users_drafts_update(_ input: Operations.Gmail_users_drafts_update.Input) async throws -> Operations.Gmail_users_drafts_update.Output {
        try await client.send(
            input: input,
            forOperation: Operations.Gmail_users_drafts_update.id,
            serializer: { input in
                let path = try converter.renderedPath(
                    template: "/gmail/v1/users/{}/drafts/{}",
                    parameters: [
                        input.path.userId,
                        input.path.id
                    ]
                )
                var request: HTTPTypes.HTTPRequest = .init(
                    soar_path: path,
                    method: .put
                )
                suppressMutabilityWarning(&request)
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "$.xgafv",
                    value: input.query._dollar__xgafv
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "access_token",
                    value: input.query.accessToken
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "alt",
                    value: input.query.alt
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "callback",
                    value: input.query.callback
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "fields",
                    value: input.query.fields
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "key",
                    value: input.query.key
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "oauth_token",
                    value: input.query.oauthToken
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "prettyPrint",
                    value: input.query.prettyPrint
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "quotaUser",
                    value: input.query.quotaUser
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "upload_protocol",
                    value: input.query.uploadProtocol
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "uploadType",
                    value: input.query.uploadType
                )
                converter.setAcceptHeader(
                    in: &request.headerFields,
                    contentTypes: input.headers.accept
                )
                let body: OpenAPIRuntime.HTTPBody?
                switch input.body {
                case .none:
                    body = nil
                case let .messageCpim(value):
                    body = try converter.setOptionalRequestBodyAsBinary(
                        value,
                        headerFields: &request.headerFields,
                        contentType: "message/cpim"
                    )
                case let .messageDeliveryStatus(value):
                    body = try converter.setOptionalRequestBodyAsBinary(
                        value,
                        headerFields: &request.headerFields,
                        contentType: "message/delivery-status"
                    )
                case let .messageDispositionNotification(value):
                    body = try converter.setOptionalRequestBodyAsBinary(
                        value,
                        headerFields: &request.headerFields,
                        contentType: "message/disposition-notification"
                    )
                case let .messageExternalBody(value):
                    body = try converter.setOptionalRequestBodyAsBinary(
                        value,
                        headerFields: &request.headerFields,
                        contentType: "message/external-body"
                    )
                case let .messageFeedbackReport(value):
                    body = try converter.setOptionalRequestBodyAsBinary(
                        value,
                        headerFields: &request.headerFields,
                        contentType: "message/feedback-report"
                    )
                case let .messageGlobal(value):
                    body = try converter.setOptionalRequestBodyAsBinary(
                        value,
                        headerFields: &request.headerFields,
                        contentType: "message/global"
                    )
                case let .messageGlobalDeliveryStatus(value):
                    body = try converter.setOptionalRequestBodyAsBinary(
                        value,
                        headerFields: &request.headerFields,
                        contentType: "message/global-delivery-status"
                    )
                case let .messageGlobalDispositionNotification(value):
                    body = try converter.setOptionalRequestBodyAsBinary(
                        value,
                        headerFields: &request.headerFields,
                        contentType: "message/global-disposition-notification"
                    )
                case let .messageGlobalHeaders(value):
                    body = try converter.setOptionalRequestBodyAsBinary(
                        value,
                        headerFields: &request.headerFields,
                        contentType: "message/global-headers"
                    )
                case let .messageHttp(value):
                    body = try converter.setOptionalRequestBodyAsBinary(
                        value,
                        headerFields: &request.headerFields,
                        contentType: "message/http"
                    )
                case let .messageImdnXml(value):
                    body = try converter.setOptionalRequestBodyAsBinary(
                        value,
                        headerFields: &request.headerFields,
                        contentType: "message/imdn+xml"
                    )
                case let .messageNews(value):
                    body = try converter.setOptionalRequestBodyAsBinary(
                        value,
                        headerFields: &request.headerFields,
                        contentType: "message/news"
                    )
                case let .messagePartial(value):
                    body = try converter.setOptionalRequestBodyAsBinary(
                        value,
                        headerFields: &request.headerFields,
                        contentType: "message/partial"
                    )
                case let .messageRfc822(value):
                    body = try converter.setOptionalRequestBodyAsBinary(
                        value,
                        headerFields: &request.headerFields,
                        contentType: "message/rfc822"
                    )
                case let .messageSHttp(value):
                    body = try converter.setOptionalRequestBodyAsBinary(
                        value,
                        headerFields: &request.headerFields,
                        contentType: "message/s-http"
                    )
                case let .messageSip(value):
                    body = try converter.setOptionalRequestBodyAsBinary(
                        value,
                        headerFields: &request.headerFields,
                        contentType: "message/sip"
                    )
                case let .messageSipfrag(value):
                    body = try converter.setOptionalRequestBodyAsBinary(
                        value,
                        headerFields: &request.headerFields,
                        contentType: "message/sipfrag"
                    )
                case let .messageTrackingStatus(value):
                    body = try converter.setOptionalRequestBodyAsBinary(
                        value,
                        headerFields: &request.headerFields,
                        contentType: "message/tracking-status"
                    )
                case let .messageVnd_si_simp(value):
                    body = try converter.setOptionalRequestBodyAsBinary(
                        value,
                        headerFields: &request.headerFields,
                        contentType: "message/vnd.si.simp"
                    )
                case let .messageVnd_wfa_wsc(value):
                    body = try converter.setOptionalRequestBodyAsBinary(
                        value,
                        headerFields: &request.headerFields,
                        contentType: "message/vnd.wfa.wsc"
                    )
                }
                return (request, body)
            },
            deserializer: { response, responseBody in
                switch response.status.code {
                case 200:
                    let contentType = converter.extractContentTypeIfPresent(in: response.headerFields)
                    let body: Operations.Gmail_users_drafts_update.Output.Ok.Body
                    let chosenContentType = try converter.bestContentType(
                        received: contentType,
                        options: [
                            "application/json"
                        ]
                    )
                    switch chosenContentType {
                    case "application/json":
                        body = try await converter.getResponseBodyAsJSON(
                            Components.Schemas.Draft.self,
                            from: responseBody,
                            transforming: { value in
                                .json(value)
                            }
                        )
                    default:
                        preconditionFailure("bestContentType chose an invalid content type.")
                    }
                    return .ok(.init(body: body))
                default:
                    return .undocumented(
                        statusCode: response.status.code,
                        .init(
                            headerFields: response.headerFields,
                            body: responseBody
                        )
                    )
                }
            }
        )
    }
    /// Immediately and permanently deletes the specified draft. Does not simply trash it.
    ///
    /// - Remark: HTTP `DELETE /gmail/v1/users/{userId}/drafts/{id}`.
    /// - Remark: Generated from `#/paths//gmail/v1/users/{userId}/drafts/{id}/delete(gmail.users.drafts.delete)`.
    public func gmail_users_drafts_delete(_ input: Operations.Gmail_users_drafts_delete.Input) async throws -> Operations.Gmail_users_drafts_delete.Output {
        try await client.send(
            input: input,
            forOperation: Operations.Gmail_users_drafts_delete.id,
            serializer: { input in
                let path = try converter.renderedPath(
                    template: "/gmail/v1/users/{}/drafts/{}",
                    parameters: [
                        input.path.userId,
                        input.path.id
                    ]
                )
                var request: HTTPTypes.HTTPRequest = .init(
                    soar_path: path,
                    method: .delete
                )
                suppressMutabilityWarning(&request)
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "$.xgafv",
                    value: input.query._dollar__xgafv
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "access_token",
                    value: input.query.accessToken
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "alt",
                    value: input.query.alt
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "callback",
                    value: input.query.callback
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "fields",
                    value: input.query.fields
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "key",
                    value: input.query.key
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "oauth_token",
                    value: input.query.oauthToken
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "prettyPrint",
                    value: input.query.prettyPrint
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "quotaUser",
                    value: input.query.quotaUser
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "upload_protocol",
                    value: input.query.uploadProtocol
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "uploadType",
                    value: input.query.uploadType
                )
                return (request, nil)
            },
            deserializer: { response, responseBody in
                switch response.status.code {
                case 200:
                    return .ok(.init())
                default:
                    return .undocumented(
                        statusCode: response.status.code,
                        .init(
                            headerFields: response.headerFields,
                            body: responseBody
                        )
                    )
                }
            }
        )
    }
    /// Lists the history of all changes to the given mailbox. History results are returned in chronological order (increasing `historyId`).
    ///
    /// - Remark: HTTP `GET /gmail/v1/users/{userId}/history`.
    /// - Remark: Generated from `#/paths//gmail/v1/users/{userId}/history/get(gmail.users.history.list)`.
    public func gmail_users_history_list(_ input: Operations.Gmail_users_history_list.Input) async throws -> Operations.Gmail_users_history_list.Output {
        try await client.send(
            input: input,
            forOperation: Operations.Gmail_users_history_list.id,
            serializer: { input in
                let path = try converter.renderedPath(
                    template: "/gmail/v1/users/{}/history",
                    parameters: [
                        input.path.userId
                    ]
                )
                var request: HTTPTypes.HTTPRequest = .init(
                    soar_path: path,
                    method: .get
                )
                suppressMutabilityWarning(&request)
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "$.xgafv",
                    value: input.query._dollar__xgafv
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "access_token",
                    value: input.query.accessToken
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "alt",
                    value: input.query.alt
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "callback",
                    value: input.query.callback
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "fields",
                    value: input.query.fields
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "key",
                    value: input.query.key
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "oauth_token",
                    value: input.query.oauthToken
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "prettyPrint",
                    value: input.query.prettyPrint
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "quotaUser",
                    value: input.query.quotaUser
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "upload_protocol",
                    value: input.query.uploadProtocol
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "uploadType",
                    value: input.query.uploadType
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "historyTypes",
                    value: input.query.historyTypes
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "labelId",
                    value: input.query.labelId
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "maxResults",
                    value: input.query.maxResults
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "pageToken",
                    value: input.query.pageToken
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "startHistoryId",
                    value: input.query.startHistoryId
                )
                converter.setAcceptHeader(
                    in: &request.headerFields,
                    contentTypes: input.headers.accept
                )
                return (request, nil)
            },
            deserializer: { response, responseBody in
                switch response.status.code {
                case 200:
                    let contentType = converter.extractContentTypeIfPresent(in: response.headerFields)
                    let body: Operations.Gmail_users_history_list.Output.Ok.Body
                    let chosenContentType = try converter.bestContentType(
                        received: contentType,
                        options: [
                            "application/json"
                        ]
                    )
                    switch chosenContentType {
                    case "application/json":
                        body = try await converter.getResponseBodyAsJSON(
                            Components.Schemas.ListHistoryResponse.self,
                            from: responseBody,
                            transforming: { value in
                                .json(value)
                            }
                        )
                    default:
                        preconditionFailure("bestContentType chose an invalid content type.")
                    }
                    return .ok(.init(body: body))
                default:
                    return .undocumented(
                        statusCode: response.status.code,
                        .init(
                            headerFields: response.headerFields,
                            body: responseBody
                        )
                    )
                }
            }
        )
    }
    /// Lists all labels in the user's mailbox.
    ///
    /// - Remark: HTTP `GET /gmail/v1/users/{userId}/labels`.
    /// - Remark: Generated from `#/paths//gmail/v1/users/{userId}/labels/get(gmail.users.labels.list)`.
    public func gmail_users_labels_list(_ input: Operations.Gmail_users_labels_list.Input) async throws -> Operations.Gmail_users_labels_list.Output {
        try await client.send(
            input: input,
            forOperation: Operations.Gmail_users_labels_list.id,
            serializer: { input in
                let path = try converter.renderedPath(
                    template: "/gmail/v1/users/{}/labels",
                    parameters: [
                        input.path.userId
                    ]
                )
                var request: HTTPTypes.HTTPRequest = .init(
                    soar_path: path,
                    method: .get
                )
                suppressMutabilityWarning(&request)
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "$.xgafv",
                    value: input.query._dollar__xgafv
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "access_token",
                    value: input.query.accessToken
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "alt",
                    value: input.query.alt
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "callback",
                    value: input.query.callback
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "fields",
                    value: input.query.fields
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "key",
                    value: input.query.key
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "oauth_token",
                    value: input.query.oauthToken
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "prettyPrint",
                    value: input.query.prettyPrint
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "quotaUser",
                    value: input.query.quotaUser
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "upload_protocol",
                    value: input.query.uploadProtocol
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "uploadType",
                    value: input.query.uploadType
                )
                converter.setAcceptHeader(
                    in: &request.headerFields,
                    contentTypes: input.headers.accept
                )
                return (request, nil)
            },
            deserializer: { response, responseBody in
                switch response.status.code {
                case 200:
                    let contentType = converter.extractContentTypeIfPresent(in: response.headerFields)
                    let body: Operations.Gmail_users_labels_list.Output.Ok.Body
                    let chosenContentType = try converter.bestContentType(
                        received: contentType,
                        options: [
                            "application/json"
                        ]
                    )
                    switch chosenContentType {
                    case "application/json":
                        body = try await converter.getResponseBodyAsJSON(
                            Components.Schemas.ListLabelsResponse.self,
                            from: responseBody,
                            transforming: { value in
                                .json(value)
                            }
                        )
                    default:
                        preconditionFailure("bestContentType chose an invalid content type.")
                    }
                    return .ok(.init(body: body))
                default:
                    return .undocumented(
                        statusCode: response.status.code,
                        .init(
                            headerFields: response.headerFields,
                            body: responseBody
                        )
                    )
                }
            }
        )
    }
    /// Creates a new label.
    ///
    /// - Remark: HTTP `POST /gmail/v1/users/{userId}/labels`.
    /// - Remark: Generated from `#/paths//gmail/v1/users/{userId}/labels/post(gmail.users.labels.create)`.
    public func gmail_users_labels_create(_ input: Operations.Gmail_users_labels_create.Input) async throws -> Operations.Gmail_users_labels_create.Output {
        try await client.send(
            input: input,
            forOperation: Operations.Gmail_users_labels_create.id,
            serializer: { input in
                let path = try converter.renderedPath(
                    template: "/gmail/v1/users/{}/labels",
                    parameters: [
                        input.path.userId
                    ]
                )
                var request: HTTPTypes.HTTPRequest = .init(
                    soar_path: path,
                    method: .post
                )
                suppressMutabilityWarning(&request)
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "$.xgafv",
                    value: input.query._dollar__xgafv
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "access_token",
                    value: input.query.accessToken
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "alt",
                    value: input.query.alt
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "callback",
                    value: input.query.callback
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "fields",
                    value: input.query.fields
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "key",
                    value: input.query.key
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "oauth_token",
                    value: input.query.oauthToken
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "prettyPrint",
                    value: input.query.prettyPrint
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "quotaUser",
                    value: input.query.quotaUser
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "upload_protocol",
                    value: input.query.uploadProtocol
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "uploadType",
                    value: input.query.uploadType
                )
                converter.setAcceptHeader(
                    in: &request.headerFields,
                    contentTypes: input.headers.accept
                )
                let body: OpenAPIRuntime.HTTPBody?
                switch input.body {
                case .none:
                    body = nil
                case let .json(value):
                    body = try converter.setOptionalRequestBodyAsJSON(
                        value,
                        headerFields: &request.headerFields,
                        contentType: "application/json; charset=utf-8"
                    )
                }
                return (request, body)
            },
            deserializer: { response, responseBody in
                switch response.status.code {
                case 200:
                    let contentType = converter.extractContentTypeIfPresent(in: response.headerFields)
                    let body: Operations.Gmail_users_labels_create.Output.Ok.Body
                    let chosenContentType = try converter.bestContentType(
                        received: contentType,
                        options: [
                            "application/json"
                        ]
                    )
                    switch chosenContentType {
                    case "application/json":
                        body = try await converter.getResponseBodyAsJSON(
                            Components.Schemas.Label.self,
                            from: responseBody,
                            transforming: { value in
                                .json(value)
                            }
                        )
                    default:
                        preconditionFailure("bestContentType chose an invalid content type.")
                    }
                    return .ok(.init(body: body))
                default:
                    return .undocumented(
                        statusCode: response.status.code,
                        .init(
                            headerFields: response.headerFields,
                            body: responseBody
                        )
                    )
                }
            }
        )
    }
    /// Gets the specified label.
    ///
    /// - Remark: HTTP `GET /gmail/v1/users/{userId}/labels/{id}`.
    /// - Remark: Generated from `#/paths//gmail/v1/users/{userId}/labels/{id}/get(gmail.users.labels.get)`.
    public func gmail_users_labels_get(_ input: Operations.Gmail_users_labels_get.Input) async throws -> Operations.Gmail_users_labels_get.Output {
        try await client.send(
            input: input,
            forOperation: Operations.Gmail_users_labels_get.id,
            serializer: { input in
                let path = try converter.renderedPath(
                    template: "/gmail/v1/users/{}/labels/{}",
                    parameters: [
                        input.path.userId,
                        input.path.id
                    ]
                )
                var request: HTTPTypes.HTTPRequest = .init(
                    soar_path: path,
                    method: .get
                )
                suppressMutabilityWarning(&request)
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "$.xgafv",
                    value: input.query._dollar__xgafv
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "access_token",
                    value: input.query.accessToken
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "alt",
                    value: input.query.alt
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "callback",
                    value: input.query.callback
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "fields",
                    value: input.query.fields
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "key",
                    value: input.query.key
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "oauth_token",
                    value: input.query.oauthToken
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "prettyPrint",
                    value: input.query.prettyPrint
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "quotaUser",
                    value: input.query.quotaUser
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "upload_protocol",
                    value: input.query.uploadProtocol
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "uploadType",
                    value: input.query.uploadType
                )
                converter.setAcceptHeader(
                    in: &request.headerFields,
                    contentTypes: input.headers.accept
                )
                return (request, nil)
            },
            deserializer: { response, responseBody in
                switch response.status.code {
                case 200:
                    let contentType = converter.extractContentTypeIfPresent(in: response.headerFields)
                    let body: Operations.Gmail_users_labels_get.Output.Ok.Body
                    let chosenContentType = try converter.bestContentType(
                        received: contentType,
                        options: [
                            "application/json"
                        ]
                    )
                    switch chosenContentType {
                    case "application/json":
                        body = try await converter.getResponseBodyAsJSON(
                            Components.Schemas.Label.self,
                            from: responseBody,
                            transforming: { value in
                                .json(value)
                            }
                        )
                    default:
                        preconditionFailure("bestContentType chose an invalid content type.")
                    }
                    return .ok(.init(body: body))
                default:
                    return .undocumented(
                        statusCode: response.status.code,
                        .init(
                            headerFields: response.headerFields,
                            body: responseBody
                        )
                    )
                }
            }
        )
    }
    /// Patch the specified label.
    ///
    /// - Remark: HTTP `PATCH /gmail/v1/users/{userId}/labels/{id}`.
    /// - Remark: Generated from `#/paths//gmail/v1/users/{userId}/labels/{id}/patch(gmail.users.labels.patch)`.
    public func gmail_users_labels_patch(_ input: Operations.Gmail_users_labels_patch.Input) async throws -> Operations.Gmail_users_labels_patch.Output {
        try await client.send(
            input: input,
            forOperation: Operations.Gmail_users_labels_patch.id,
            serializer: { input in
                let path = try converter.renderedPath(
                    template: "/gmail/v1/users/{}/labels/{}",
                    parameters: [
                        input.path.userId,
                        input.path.id
                    ]
                )
                var request: HTTPTypes.HTTPRequest = .init(
                    soar_path: path,
                    method: .patch
                )
                suppressMutabilityWarning(&request)
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "$.xgafv",
                    value: input.query._dollar__xgafv
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "access_token",
                    value: input.query.accessToken
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "alt",
                    value: input.query.alt
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "callback",
                    value: input.query.callback
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "fields",
                    value: input.query.fields
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "key",
                    value: input.query.key
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "oauth_token",
                    value: input.query.oauthToken
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "prettyPrint",
                    value: input.query.prettyPrint
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "quotaUser",
                    value: input.query.quotaUser
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "upload_protocol",
                    value: input.query.uploadProtocol
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "uploadType",
                    value: input.query.uploadType
                )
                converter.setAcceptHeader(
                    in: &request.headerFields,
                    contentTypes: input.headers.accept
                )
                let body: OpenAPIRuntime.HTTPBody?
                switch input.body {
                case .none:
                    body = nil
                case let .json(value):
                    body = try converter.setOptionalRequestBodyAsJSON(
                        value,
                        headerFields: &request.headerFields,
                        contentType: "application/json; charset=utf-8"
                    )
                }
                return (request, body)
            },
            deserializer: { response, responseBody in
                switch response.status.code {
                case 200:
                    let contentType = converter.extractContentTypeIfPresent(in: response.headerFields)
                    let body: Operations.Gmail_users_labels_patch.Output.Ok.Body
                    let chosenContentType = try converter.bestContentType(
                        received: contentType,
                        options: [
                            "application/json"
                        ]
                    )
                    switch chosenContentType {
                    case "application/json":
                        body = try await converter.getResponseBodyAsJSON(
                            Components.Schemas.Label.self,
                            from: responseBody,
                            transforming: { value in
                                .json(value)
                            }
                        )
                    default:
                        preconditionFailure("bestContentType chose an invalid content type.")
                    }
                    return .ok(.init(body: body))
                default:
                    return .undocumented(
                        statusCode: response.status.code,
                        .init(
                            headerFields: response.headerFields,
                            body: responseBody
                        )
                    )
                }
            }
        )
    }
    /// Updates the specified label.
    ///
    /// - Remark: HTTP `PUT /gmail/v1/users/{userId}/labels/{id}`.
    /// - Remark: Generated from `#/paths//gmail/v1/users/{userId}/labels/{id}/put(gmail.users.labels.update)`.
    public func gmail_users_labels_update(_ input: Operations.Gmail_users_labels_update.Input) async throws -> Operations.Gmail_users_labels_update.Output {
        try await client.send(
            input: input,
            forOperation: Operations.Gmail_users_labels_update.id,
            serializer: { input in
                let path = try converter.renderedPath(
                    template: "/gmail/v1/users/{}/labels/{}",
                    parameters: [
                        input.path.userId,
                        input.path.id
                    ]
                )
                var request: HTTPTypes.HTTPRequest = .init(
                    soar_path: path,
                    method: .put
                )
                suppressMutabilityWarning(&request)
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "$.xgafv",
                    value: input.query._dollar__xgafv
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "access_token",
                    value: input.query.accessToken
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "alt",
                    value: input.query.alt
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "callback",
                    value: input.query.callback
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "fields",
                    value: input.query.fields
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "key",
                    value: input.query.key
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "oauth_token",
                    value: input.query.oauthToken
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "prettyPrint",
                    value: input.query.prettyPrint
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "quotaUser",
                    value: input.query.quotaUser
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "upload_protocol",
                    value: input.query.uploadProtocol
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "uploadType",
                    value: input.query.uploadType
                )
                converter.setAcceptHeader(
                    in: &request.headerFields,
                    contentTypes: input.headers.accept
                )
                let body: OpenAPIRuntime.HTTPBody?
                switch input.body {
                case .none:
                    body = nil
                case let .json(value):
                    body = try converter.setOptionalRequestBodyAsJSON(
                        value,
                        headerFields: &request.headerFields,
                        contentType: "application/json; charset=utf-8"
                    )
                }
                return (request, body)
            },
            deserializer: { response, responseBody in
                switch response.status.code {
                case 200:
                    let contentType = converter.extractContentTypeIfPresent(in: response.headerFields)
                    let body: Operations.Gmail_users_labels_update.Output.Ok.Body
                    let chosenContentType = try converter.bestContentType(
                        received: contentType,
                        options: [
                            "application/json"
                        ]
                    )
                    switch chosenContentType {
                    case "application/json":
                        body = try await converter.getResponseBodyAsJSON(
                            Components.Schemas.Label.self,
                            from: responseBody,
                            transforming: { value in
                                .json(value)
                            }
                        )
                    default:
                        preconditionFailure("bestContentType chose an invalid content type.")
                    }
                    return .ok(.init(body: body))
                default:
                    return .undocumented(
                        statusCode: response.status.code,
                        .init(
                            headerFields: response.headerFields,
                            body: responseBody
                        )
                    )
                }
            }
        )
    }
    /// Immediately and permanently deletes the specified label and removes it from any messages and threads that it is applied to.
    ///
    /// - Remark: HTTP `DELETE /gmail/v1/users/{userId}/labels/{id}`.
    /// - Remark: Generated from `#/paths//gmail/v1/users/{userId}/labels/{id}/delete(gmail.users.labels.delete)`.
    public func gmail_users_labels_delete(_ input: Operations.Gmail_users_labels_delete.Input) async throws -> Operations.Gmail_users_labels_delete.Output {
        try await client.send(
            input: input,
            forOperation: Operations.Gmail_users_labels_delete.id,
            serializer: { input in
                let path = try converter.renderedPath(
                    template: "/gmail/v1/users/{}/labels/{}",
                    parameters: [
                        input.path.userId,
                        input.path.id
                    ]
                )
                var request: HTTPTypes.HTTPRequest = .init(
                    soar_path: path,
                    method: .delete
                )
                suppressMutabilityWarning(&request)
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "$.xgafv",
                    value: input.query._dollar__xgafv
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "access_token",
                    value: input.query.accessToken
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "alt",
                    value: input.query.alt
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "callback",
                    value: input.query.callback
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "fields",
                    value: input.query.fields
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "key",
                    value: input.query.key
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "oauth_token",
                    value: input.query.oauthToken
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "prettyPrint",
                    value: input.query.prettyPrint
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "quotaUser",
                    value: input.query.quotaUser
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "upload_protocol",
                    value: input.query.uploadProtocol
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "uploadType",
                    value: input.query.uploadType
                )
                return (request, nil)
            },
            deserializer: { response, responseBody in
                switch response.status.code {
                case 200:
                    return .ok(.init())
                default:
                    return .undocumented(
                        statusCode: response.status.code,
                        .init(
                            headerFields: response.headerFields,
                            body: responseBody
                        )
                    )
                }
            }
        )
    }
    /// Lists the messages in the user's mailbox.
    ///
    /// - Remark: HTTP `GET /gmail/v1/users/{userId}/messages`.
    /// - Remark: Generated from `#/paths//gmail/v1/users/{userId}/messages/get(gmail.users.messages.list)`.
    public func gmail_users_messages_list(_ input: Operations.Gmail_users_messages_list.Input) async throws -> Operations.Gmail_users_messages_list.Output {
        try await client.send(
            input: input,
            forOperation: Operations.Gmail_users_messages_list.id,
            serializer: { input in
                let path = try converter.renderedPath(
                    template: "/gmail/v1/users/{}/messages",
                    parameters: [
                        input.path.userId
                    ]
                )
                var request: HTTPTypes.HTTPRequest = .init(
                    soar_path: path,
                    method: .get
                )
                suppressMutabilityWarning(&request)
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "$.xgafv",
                    value: input.query._dollar__xgafv
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "access_token",
                    value: input.query.accessToken
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "alt",
                    value: input.query.alt
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "callback",
                    value: input.query.callback
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "fields",
                    value: input.query.fields
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "key",
                    value: input.query.key
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "oauth_token",
                    value: input.query.oauthToken
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "prettyPrint",
                    value: input.query.prettyPrint
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "quotaUser",
                    value: input.query.quotaUser
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "upload_protocol",
                    value: input.query.uploadProtocol
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "uploadType",
                    value: input.query.uploadType
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "includeSpamTrash",
                    value: input.query.includeSpamTrash
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "labelIds",
                    value: input.query.labelIds
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "maxResults",
                    value: input.query.maxResults
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "pageToken",
                    value: input.query.pageToken
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "q",
                    value: input.query.q
                )
                converter.setAcceptHeader(
                    in: &request.headerFields,
                    contentTypes: input.headers.accept
                )
                return (request, nil)
            },
            deserializer: { response, responseBody in
                switch response.status.code {
                case 200:
                    let contentType = converter.extractContentTypeIfPresent(in: response.headerFields)
                    let body: Operations.Gmail_users_messages_list.Output.Ok.Body
                    let chosenContentType = try converter.bestContentType(
                        received: contentType,
                        options: [
                            "application/json"
                        ]
                    )
                    switch chosenContentType {
                    case "application/json":
                        body = try await converter.getResponseBodyAsJSON(
                            Components.Schemas.ListMessagesResponse.self,
                            from: responseBody,
                            transforming: { value in
                                .json(value)
                            }
                        )
                    default:
                        preconditionFailure("bestContentType chose an invalid content type.")
                    }
                    return .ok(.init(body: body))
                default:
                    return .undocumented(
                        statusCode: response.status.code,
                        .init(
                            headerFields: response.headerFields,
                            body: responseBody
                        )
                    )
                }
            }
        )
    }
    /// Directly inserts a message into only this user's mailbox similar to `IMAP APPEND`, bypassing most scanning and classification. Does not send a message.
    ///
    /// - Remark: HTTP `POST /gmail/v1/users/{userId}/messages`.
    /// - Remark: Generated from `#/paths//gmail/v1/users/{userId}/messages/post(gmail.users.messages.insert)`.
    public func gmail_users_messages_insert(_ input: Operations.Gmail_users_messages_insert.Input) async throws -> Operations.Gmail_users_messages_insert.Output {
        try await client.send(
            input: input,
            forOperation: Operations.Gmail_users_messages_insert.id,
            serializer: { input in
                let path = try converter.renderedPath(
                    template: "/gmail/v1/users/{}/messages",
                    parameters: [
                        input.path.userId
                    ]
                )
                var request: HTTPTypes.HTTPRequest = .init(
                    soar_path: path,
                    method: .post
                )
                suppressMutabilityWarning(&request)
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "$.xgafv",
                    value: input.query._dollar__xgafv
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "access_token",
                    value: input.query.accessToken
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "alt",
                    value: input.query.alt
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "callback",
                    value: input.query.callback
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "fields",
                    value: input.query.fields
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "key",
                    value: input.query.key
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "oauth_token",
                    value: input.query.oauthToken
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "prettyPrint",
                    value: input.query.prettyPrint
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "quotaUser",
                    value: input.query.quotaUser
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "upload_protocol",
                    value: input.query.uploadProtocol
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "uploadType",
                    value: input.query.uploadType
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "deleted",
                    value: input.query.deleted
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "internalDateSource",
                    value: input.query.internalDateSource
                )
                converter.setAcceptHeader(
                    in: &request.headerFields,
                    contentTypes: input.headers.accept
                )
                let body: OpenAPIRuntime.HTTPBody?
                switch input.body {
                case .none:
                    body = nil
                case let .messageCpim(value):
                    body = try converter.setOptionalRequestBodyAsBinary(
                        value,
                        headerFields: &request.headerFields,
                        contentType: "message/cpim"
                    )
                case let .messageDeliveryStatus(value):
                    body = try converter.setOptionalRequestBodyAsBinary(
                        value,
                        headerFields: &request.headerFields,
                        contentType: "message/delivery-status"
                    )
                case let .messageDispositionNotification(value):
                    body = try converter.setOptionalRequestBodyAsBinary(
                        value,
                        headerFields: &request.headerFields,
                        contentType: "message/disposition-notification"
                    )
                case let .messageExternalBody(value):
                    body = try converter.setOptionalRequestBodyAsBinary(
                        value,
                        headerFields: &request.headerFields,
                        contentType: "message/external-body"
                    )
                case let .messageFeedbackReport(value):
                    body = try converter.setOptionalRequestBodyAsBinary(
                        value,
                        headerFields: &request.headerFields,
                        contentType: "message/feedback-report"
                    )
                case let .messageGlobal(value):
                    body = try converter.setOptionalRequestBodyAsBinary(
                        value,
                        headerFields: &request.headerFields,
                        contentType: "message/global"
                    )
                case let .messageGlobalDeliveryStatus(value):
                    body = try converter.setOptionalRequestBodyAsBinary(
                        value,
                        headerFields: &request.headerFields,
                        contentType: "message/global-delivery-status"
                    )
                case let .messageGlobalDispositionNotification(value):
                    body = try converter.setOptionalRequestBodyAsBinary(
                        value,
                        headerFields: &request.headerFields,
                        contentType: "message/global-disposition-notification"
                    )
                case let .messageGlobalHeaders(value):
                    body = try converter.setOptionalRequestBodyAsBinary(
                        value,
                        headerFields: &request.headerFields,
                        contentType: "message/global-headers"
                    )
                case let .messageHttp(value):
                    body = try converter.setOptionalRequestBodyAsBinary(
                        value,
                        headerFields: &request.headerFields,
                        contentType: "message/http"
                    )
                case let .messageImdnXml(value):
                    body = try converter.setOptionalRequestBodyAsBinary(
                        value,
                        headerFields: &request.headerFields,
                        contentType: "message/imdn+xml"
                    )
                case let .messageNews(value):
                    body = try converter.setOptionalRequestBodyAsBinary(
                        value,
                        headerFields: &request.headerFields,
                        contentType: "message/news"
                    )
                case let .messagePartial(value):
                    body = try converter.setOptionalRequestBodyAsBinary(
                        value,
                        headerFields: &request.headerFields,
                        contentType: "message/partial"
                    )
                case let .messageRfc822(value):
                    body = try converter.setOptionalRequestBodyAsBinary(
                        value,
                        headerFields: &request.headerFields,
                        contentType: "message/rfc822"
                    )
                case let .messageSHttp(value):
                    body = try converter.setOptionalRequestBodyAsBinary(
                        value,
                        headerFields: &request.headerFields,
                        contentType: "message/s-http"
                    )
                case let .messageSip(value):
                    body = try converter.setOptionalRequestBodyAsBinary(
                        value,
                        headerFields: &request.headerFields,
                        contentType: "message/sip"
                    )
                case let .messageSipfrag(value):
                    body = try converter.setOptionalRequestBodyAsBinary(
                        value,
                        headerFields: &request.headerFields,
                        contentType: "message/sipfrag"
                    )
                case let .messageTrackingStatus(value):
                    body = try converter.setOptionalRequestBodyAsBinary(
                        value,
                        headerFields: &request.headerFields,
                        contentType: "message/tracking-status"
                    )
                case let .messageVnd_si_simp(value):
                    body = try converter.setOptionalRequestBodyAsBinary(
                        value,
                        headerFields: &request.headerFields,
                        contentType: "message/vnd.si.simp"
                    )
                case let .messageVnd_wfa_wsc(value):
                    body = try converter.setOptionalRequestBodyAsBinary(
                        value,
                        headerFields: &request.headerFields,
                        contentType: "message/vnd.wfa.wsc"
                    )
                }
                return (request, body)
            },
            deserializer: { response, responseBody in
                switch response.status.code {
                case 200:
                    let contentType = converter.extractContentTypeIfPresent(in: response.headerFields)
                    let body: Operations.Gmail_users_messages_insert.Output.Ok.Body
                    let chosenContentType = try converter.bestContentType(
                        received: contentType,
                        options: [
                            "application/json"
                        ]
                    )
                    switch chosenContentType {
                    case "application/json":
                        body = try await converter.getResponseBodyAsJSON(
                            Components.Schemas.Message.self,
                            from: responseBody,
                            transforming: { value in
                                .json(value)
                            }
                        )
                    default:
                        preconditionFailure("bestContentType chose an invalid content type.")
                    }
                    return .ok(.init(body: body))
                default:
                    return .undocumented(
                        statusCode: response.status.code,
                        .init(
                            headerFields: response.headerFields,
                            body: responseBody
                        )
                    )
                }
            }
        )
    }
    /// Deletes many messages by message ID. Provides no guarantees that messages were not already deleted or even existed at all.
    ///
    /// - Remark: HTTP `POST /gmail/v1/users/{userId}/messages/batchDelete`.
    /// - Remark: Generated from `#/paths//gmail/v1/users/{userId}/messages/batchDelete/post(gmail.users.messages.batchDelete)`.
    public func gmail_users_messages_batchDelete(_ input: Operations.Gmail_users_messages_batchDelete.Input) async throws -> Operations.Gmail_users_messages_batchDelete.Output {
        try await client.send(
            input: input,
            forOperation: Operations.Gmail_users_messages_batchDelete.id,
            serializer: { input in
                let path = try converter.renderedPath(
                    template: "/gmail/v1/users/{}/messages/batchDelete",
                    parameters: [
                        input.path.userId
                    ]
                )
                var request: HTTPTypes.HTTPRequest = .init(
                    soar_path: path,
                    method: .post
                )
                suppressMutabilityWarning(&request)
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "$.xgafv",
                    value: input.query._dollar__xgafv
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "access_token",
                    value: input.query.accessToken
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "alt",
                    value: input.query.alt
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "callback",
                    value: input.query.callback
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "fields",
                    value: input.query.fields
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "key",
                    value: input.query.key
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "oauth_token",
                    value: input.query.oauthToken
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "prettyPrint",
                    value: input.query.prettyPrint
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "quotaUser",
                    value: input.query.quotaUser
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "upload_protocol",
                    value: input.query.uploadProtocol
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "uploadType",
                    value: input.query.uploadType
                )
                let body: OpenAPIRuntime.HTTPBody?
                switch input.body {
                case .none:
                    body = nil
                case let .json(value):
                    body = try converter.setOptionalRequestBodyAsJSON(
                        value,
                        headerFields: &request.headerFields,
                        contentType: "application/json; charset=utf-8"
                    )
                }
                return (request, body)
            },
            deserializer: { response, responseBody in
                switch response.status.code {
                case 200:
                    return .ok(.init())
                default:
                    return .undocumented(
                        statusCode: response.status.code,
                        .init(
                            headerFields: response.headerFields,
                            body: responseBody
                        )
                    )
                }
            }
        )
    }
    /// Modifies the labels on the specified messages.
    ///
    /// - Remark: HTTP `POST /gmail/v1/users/{userId}/messages/batchModify`.
    /// - Remark: Generated from `#/paths//gmail/v1/users/{userId}/messages/batchModify/post(gmail.users.messages.batchModify)`.
    public func gmail_users_messages_batchModify(_ input: Operations.Gmail_users_messages_batchModify.Input) async throws -> Operations.Gmail_users_messages_batchModify.Output {
        try await client.send(
            input: input,
            forOperation: Operations.Gmail_users_messages_batchModify.id,
            serializer: { input in
                let path = try converter.renderedPath(
                    template: "/gmail/v1/users/{}/messages/batchModify",
                    parameters: [
                        input.path.userId
                    ]
                )
                var request: HTTPTypes.HTTPRequest = .init(
                    soar_path: path,
                    method: .post
                )
                suppressMutabilityWarning(&request)
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "$.xgafv",
                    value: input.query._dollar__xgafv
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "access_token",
                    value: input.query.accessToken
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "alt",
                    value: input.query.alt
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "callback",
                    value: input.query.callback
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "fields",
                    value: input.query.fields
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "key",
                    value: input.query.key
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "oauth_token",
                    value: input.query.oauthToken
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "prettyPrint",
                    value: input.query.prettyPrint
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "quotaUser",
                    value: input.query.quotaUser
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "upload_protocol",
                    value: input.query.uploadProtocol
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "uploadType",
                    value: input.query.uploadType
                )
                let body: OpenAPIRuntime.HTTPBody?
                switch input.body {
                case .none:
                    body = nil
                case let .json(value):
                    body = try converter.setOptionalRequestBodyAsJSON(
                        value,
                        headerFields: &request.headerFields,
                        contentType: "application/json; charset=utf-8"
                    )
                }
                return (request, body)
            },
            deserializer: { response, responseBody in
                switch response.status.code {
                case 200:
                    return .ok(.init())
                default:
                    return .undocumented(
                        statusCode: response.status.code,
                        .init(
                            headerFields: response.headerFields,
                            body: responseBody
                        )
                    )
                }
            }
        )
    }
    /// Imports a message into only this user's mailbox, with standard email delivery scanning and classification similar to receiving via SMTP. This method doesn't perform SPF checks, so it might not work for some spam messages, such as those attempting to perform domain spoofing. This method does not send a message.
    ///
    /// - Remark: HTTP `POST /gmail/v1/users/{userId}/messages/import`.
    /// - Remark: Generated from `#/paths//gmail/v1/users/{userId}/messages/import/post(gmail.users.messages.import)`.
    public func gmail_users_messages_import(_ input: Operations.Gmail_users_messages_import.Input) async throws -> Operations.Gmail_users_messages_import.Output {
        try await client.send(
            input: input,
            forOperation: Operations.Gmail_users_messages_import.id,
            serializer: { input in
                let path = try converter.renderedPath(
                    template: "/gmail/v1/users/{}/messages/import",
                    parameters: [
                        input.path.userId
                    ]
                )
                var request: HTTPTypes.HTTPRequest = .init(
                    soar_path: path,
                    method: .post
                )
                suppressMutabilityWarning(&request)
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "$.xgafv",
                    value: input.query._dollar__xgafv
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "access_token",
                    value: input.query.accessToken
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "alt",
                    value: input.query.alt
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "callback",
                    value: input.query.callback
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "fields",
                    value: input.query.fields
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "key",
                    value: input.query.key
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "oauth_token",
                    value: input.query.oauthToken
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "prettyPrint",
                    value: input.query.prettyPrint
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "quotaUser",
                    value: input.query.quotaUser
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "upload_protocol",
                    value: input.query.uploadProtocol
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "uploadType",
                    value: input.query.uploadType
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "deleted",
                    value: input.query.deleted
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "internalDateSource",
                    value: input.query.internalDateSource
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "neverMarkSpam",
                    value: input.query.neverMarkSpam
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "processForCalendar",
                    value: input.query.processForCalendar
                )
                converter.setAcceptHeader(
                    in: &request.headerFields,
                    contentTypes: input.headers.accept
                )
                let body: OpenAPIRuntime.HTTPBody?
                switch input.body {
                case .none:
                    body = nil
                case let .messageCpim(value):
                    body = try converter.setOptionalRequestBodyAsBinary(
                        value,
                        headerFields: &request.headerFields,
                        contentType: "message/cpim"
                    )
                case let .messageDeliveryStatus(value):
                    body = try converter.setOptionalRequestBodyAsBinary(
                        value,
                        headerFields: &request.headerFields,
                        contentType: "message/delivery-status"
                    )
                case let .messageDispositionNotification(value):
                    body = try converter.setOptionalRequestBodyAsBinary(
                        value,
                        headerFields: &request.headerFields,
                        contentType: "message/disposition-notification"
                    )
                case let .messageExternalBody(value):
                    body = try converter.setOptionalRequestBodyAsBinary(
                        value,
                        headerFields: &request.headerFields,
                        contentType: "message/external-body"
                    )
                case let .messageFeedbackReport(value):
                    body = try converter.setOptionalRequestBodyAsBinary(
                        value,
                        headerFields: &request.headerFields,
                        contentType: "message/feedback-report"
                    )
                case let .messageGlobal(value):
                    body = try converter.setOptionalRequestBodyAsBinary(
                        value,
                        headerFields: &request.headerFields,
                        contentType: "message/global"
                    )
                case let .messageGlobalDeliveryStatus(value):
                    body = try converter.setOptionalRequestBodyAsBinary(
                        value,
                        headerFields: &request.headerFields,
                        contentType: "message/global-delivery-status"
                    )
                case let .messageGlobalDispositionNotification(value):
                    body = try converter.setOptionalRequestBodyAsBinary(
                        value,
                        headerFields: &request.headerFields,
                        contentType: "message/global-disposition-notification"
                    )
                case let .messageGlobalHeaders(value):
                    body = try converter.setOptionalRequestBodyAsBinary(
                        value,
                        headerFields: &request.headerFields,
                        contentType: "message/global-headers"
                    )
                case let .messageHttp(value):
                    body = try converter.setOptionalRequestBodyAsBinary(
                        value,
                        headerFields: &request.headerFields,
                        contentType: "message/http"
                    )
                case let .messageImdnXml(value):
                    body = try converter.setOptionalRequestBodyAsBinary(
                        value,
                        headerFields: &request.headerFields,
                        contentType: "message/imdn+xml"
                    )
                case let .messageNews(value):
                    body = try converter.setOptionalRequestBodyAsBinary(
                        value,
                        headerFields: &request.headerFields,
                        contentType: "message/news"
                    )
                case let .messagePartial(value):
                    body = try converter.setOptionalRequestBodyAsBinary(
                        value,
                        headerFields: &request.headerFields,
                        contentType: "message/partial"
                    )
                case let .messageRfc822(value):
                    body = try converter.setOptionalRequestBodyAsBinary(
                        value,
                        headerFields: &request.headerFields,
                        contentType: "message/rfc822"
                    )
                case let .messageSHttp(value):
                    body = try converter.setOptionalRequestBodyAsBinary(
                        value,
                        headerFields: &request.headerFields,
                        contentType: "message/s-http"
                    )
                case let .messageSip(value):
                    body = try converter.setOptionalRequestBodyAsBinary(
                        value,
                        headerFields: &request.headerFields,
                        contentType: "message/sip"
                    )
                case let .messageSipfrag(value):
                    body = try converter.setOptionalRequestBodyAsBinary(
                        value,
                        headerFields: &request.headerFields,
                        contentType: "message/sipfrag"
                    )
                case let .messageTrackingStatus(value):
                    body = try converter.setOptionalRequestBodyAsBinary(
                        value,
                        headerFields: &request.headerFields,
                        contentType: "message/tracking-status"
                    )
                case let .messageVnd_si_simp(value):
                    body = try converter.setOptionalRequestBodyAsBinary(
                        value,
                        headerFields: &request.headerFields,
                        contentType: "message/vnd.si.simp"
                    )
                case let .messageVnd_wfa_wsc(value):
                    body = try converter.setOptionalRequestBodyAsBinary(
                        value,
                        headerFields: &request.headerFields,
                        contentType: "message/vnd.wfa.wsc"
                    )
                }
                return (request, body)
            },
            deserializer: { response, responseBody in
                switch response.status.code {
                case 200:
                    let contentType = converter.extractContentTypeIfPresent(in: response.headerFields)
                    let body: Operations.Gmail_users_messages_import.Output.Ok.Body
                    let chosenContentType = try converter.bestContentType(
                        received: contentType,
                        options: [
                            "application/json"
                        ]
                    )
                    switch chosenContentType {
                    case "application/json":
                        body = try await converter.getResponseBodyAsJSON(
                            Components.Schemas.Message.self,
                            from: responseBody,
                            transforming: { value in
                                .json(value)
                            }
                        )
                    default:
                        preconditionFailure("bestContentType chose an invalid content type.")
                    }
                    return .ok(.init(body: body))
                default:
                    return .undocumented(
                        statusCode: response.status.code,
                        .init(
                            headerFields: response.headerFields,
                            body: responseBody
                        )
                    )
                }
            }
        )
    }
    /// Sends the specified message to the recipients in the `To`, `Cc`, and `Bcc` headers. For example usage, see [Sending email](https://developers.google.com/gmail/api/guides/sending).
    ///
    /// - Remark: HTTP `POST /gmail/v1/users/{userId}/messages/send`.
    /// - Remark: Generated from `#/paths//gmail/v1/users/{userId}/messages/send/post(gmail.users.messages.send)`.
    public func gmail_users_messages_send(_ input: Operations.Gmail_users_messages_send.Input) async throws -> Operations.Gmail_users_messages_send.Output {
        try await client.send(
            input: input,
            forOperation: Operations.Gmail_users_messages_send.id,
            serializer: { input in
                let path = try converter.renderedPath(
                    template: "/gmail/v1/users/{}/messages/send",
                    parameters: [
                        input.path.userId
                    ]
                )
                var request: HTTPTypes.HTTPRequest = .init(
                    soar_path: path,
                    method: .post
                )
                suppressMutabilityWarning(&request)
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "$.xgafv",
                    value: input.query._dollar__xgafv
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "access_token",
                    value: input.query.accessToken
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "alt",
                    value: input.query.alt
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "callback",
                    value: input.query.callback
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "fields",
                    value: input.query.fields
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "key",
                    value: input.query.key
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "oauth_token",
                    value: input.query.oauthToken
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "prettyPrint",
                    value: input.query.prettyPrint
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "quotaUser",
                    value: input.query.quotaUser
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "upload_protocol",
                    value: input.query.uploadProtocol
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "uploadType",
                    value: input.query.uploadType
                )
                converter.setAcceptHeader(
                    in: &request.headerFields,
                    contentTypes: input.headers.accept
                )
                let body: OpenAPIRuntime.HTTPBody?
                switch input.body {
                case .none:
                    body = nil
                case let .messageCpim(value):
                    body = try converter.setOptionalRequestBodyAsBinary(
                        value,
                        headerFields: &request.headerFields,
                        contentType: "message/cpim"
                    )
                case let .messageDeliveryStatus(value):
                    body = try converter.setOptionalRequestBodyAsBinary(
                        value,
                        headerFields: &request.headerFields,
                        contentType: "message/delivery-status"
                    )
                case let .messageDispositionNotification(value):
                    body = try converter.setOptionalRequestBodyAsBinary(
                        value,
                        headerFields: &request.headerFields,
                        contentType: "message/disposition-notification"
                    )
                case let .messageExternalBody(value):
                    body = try converter.setOptionalRequestBodyAsBinary(
                        value,
                        headerFields: &request.headerFields,
                        contentType: "message/external-body"
                    )
                case let .messageFeedbackReport(value):
                    body = try converter.setOptionalRequestBodyAsBinary(
                        value,
                        headerFields: &request.headerFields,
                        contentType: "message/feedback-report"
                    )
                case let .messageGlobal(value):
                    body = try converter.setOptionalRequestBodyAsBinary(
                        value,
                        headerFields: &request.headerFields,
                        contentType: "message/global"
                    )
                case let .messageGlobalDeliveryStatus(value):
                    body = try converter.setOptionalRequestBodyAsBinary(
                        value,
                        headerFields: &request.headerFields,
                        contentType: "message/global-delivery-status"
                    )
                case let .messageGlobalDispositionNotification(value):
                    body = try converter.setOptionalRequestBodyAsBinary(
                        value,
                        headerFields: &request.headerFields,
                        contentType: "message/global-disposition-notification"
                    )
                case let .messageGlobalHeaders(value):
                    body = try converter.setOptionalRequestBodyAsBinary(
                        value,
                        headerFields: &request.headerFields,
                        contentType: "message/global-headers"
                    )
                case let .messageHttp(value):
                    body = try converter.setOptionalRequestBodyAsBinary(
                        value,
                        headerFields: &request.headerFields,
                        contentType: "message/http"
                    )
                case let .messageImdnXml(value):
                    body = try converter.setOptionalRequestBodyAsBinary(
                        value,
                        headerFields: &request.headerFields,
                        contentType: "message/imdn+xml"
                    )
                case let .messageNews(value):
                    body = try converter.setOptionalRequestBodyAsBinary(
                        value,
                        headerFields: &request.headerFields,
                        contentType: "message/news"
                    )
                case let .messagePartial(value):
                    body = try converter.setOptionalRequestBodyAsBinary(
                        value,
                        headerFields: &request.headerFields,
                        contentType: "message/partial"
                    )
                case let .messageRfc822(value):
                    body = try converter.setOptionalRequestBodyAsBinary(
                        value,
                        headerFields: &request.headerFields,
                        contentType: "message/rfc822"
                    )
                case let .messageSHttp(value):
                    body = try converter.setOptionalRequestBodyAsBinary(
                        value,
                        headerFields: &request.headerFields,
                        contentType: "message/s-http"
                    )
                case let .messageSip(value):
                    body = try converter.setOptionalRequestBodyAsBinary(
                        value,
                        headerFields: &request.headerFields,
                        contentType: "message/sip"
                    )
                case let .messageSipfrag(value):
                    body = try converter.setOptionalRequestBodyAsBinary(
                        value,
                        headerFields: &request.headerFields,
                        contentType: "message/sipfrag"
                    )
                case let .messageTrackingStatus(value):
                    body = try converter.setOptionalRequestBodyAsBinary(
                        value,
                        headerFields: &request.headerFields,
                        contentType: "message/tracking-status"
                    )
                case let .messageVnd_si_simp(value):
                    body = try converter.setOptionalRequestBodyAsBinary(
                        value,
                        headerFields: &request.headerFields,
                        contentType: "message/vnd.si.simp"
                    )
                case let .messageVnd_wfa_wsc(value):
                    body = try converter.setOptionalRequestBodyAsBinary(
                        value,
                        headerFields: &request.headerFields,
                        contentType: "message/vnd.wfa.wsc"
                    )
                }
                return (request, body)
            },
            deserializer: { response, responseBody in
                switch response.status.code {
                case 200:
                    let contentType = converter.extractContentTypeIfPresent(in: response.headerFields)
                    let body: Operations.Gmail_users_messages_send.Output.Ok.Body
                    let chosenContentType = try converter.bestContentType(
                        received: contentType,
                        options: [
                            "application/json"
                        ]
                    )
                    switch chosenContentType {
                    case "application/json":
                        body = try await converter.getResponseBodyAsJSON(
                            Components.Schemas.Message.self,
                            from: responseBody,
                            transforming: { value in
                                .json(value)
                            }
                        )
                    default:
                        preconditionFailure("bestContentType chose an invalid content type.")
                    }
                    return .ok(.init(body: body))
                default:
                    return .undocumented(
                        statusCode: response.status.code,
                        .init(
                            headerFields: response.headerFields,
                            body: responseBody
                        )
                    )
                }
            }
        )
    }
    /// Gets the specified message.
    ///
    /// - Remark: HTTP `GET /gmail/v1/users/{userId}/messages/{id}`.
    /// - Remark: Generated from `#/paths//gmail/v1/users/{userId}/messages/{id}/get(gmail.users.messages.get)`.
    public func gmail_users_messages_get(_ input: Operations.Gmail_users_messages_get.Input) async throws -> Operations.Gmail_users_messages_get.Output {
        try await client.send(
            input: input,
            forOperation: Operations.Gmail_users_messages_get.id,
            serializer: { input in
                let path = try converter.renderedPath(
                    template: "/gmail/v1/users/{}/messages/{}",
                    parameters: [
                        input.path.userId,
                        input.path.id
                    ]
                )
                var request: HTTPTypes.HTTPRequest = .init(
                    soar_path: path,
                    method: .get
                )
                suppressMutabilityWarning(&request)
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "$.xgafv",
                    value: input.query._dollar__xgafv
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "access_token",
                    value: input.query.accessToken
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "alt",
                    value: input.query.alt
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "callback",
                    value: input.query.callback
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "fields",
                    value: input.query.fields
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "key",
                    value: input.query.key
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "oauth_token",
                    value: input.query.oauthToken
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "prettyPrint",
                    value: input.query.prettyPrint
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "quotaUser",
                    value: input.query.quotaUser
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "upload_protocol",
                    value: input.query.uploadProtocol
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "uploadType",
                    value: input.query.uploadType
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "format",
                    value: input.query.format
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "metadataHeaders",
                    value: input.query.metadataHeaders
                )
                converter.setAcceptHeader(
                    in: &request.headerFields,
                    contentTypes: input.headers.accept
                )
                return (request, nil)
            },
            deserializer: { response, responseBody in
                switch response.status.code {
                case 200:
                    let contentType = converter.extractContentTypeIfPresent(in: response.headerFields)
                    let body: Operations.Gmail_users_messages_get.Output.Ok.Body
                    let chosenContentType = try converter.bestContentType(
                        received: contentType,
                        options: [
                            "application/json"
                        ]
                    )
                    switch chosenContentType {
                    case "application/json":
                        body = try await converter.getResponseBodyAsJSON(
                            Components.Schemas.Message.self,
                            from: responseBody,
                            transforming: { value in
                                .json(value)
                            }
                        )
                    default:
                        preconditionFailure("bestContentType chose an invalid content type.")
                    }
                    return .ok(.init(body: body))
                default:
                    return .undocumented(
                        statusCode: response.status.code,
                        .init(
                            headerFields: response.headerFields,
                            body: responseBody
                        )
                    )
                }
            }
        )
    }
    /// Immediately and permanently deletes the specified message. This operation cannot be undone. Prefer `messages.trash` instead.
    ///
    /// - Remark: HTTP `DELETE /gmail/v1/users/{userId}/messages/{id}`.
    /// - Remark: Generated from `#/paths//gmail/v1/users/{userId}/messages/{id}/delete(gmail.users.messages.delete)`.
    public func gmail_users_messages_delete(_ input: Operations.Gmail_users_messages_delete.Input) async throws -> Operations.Gmail_users_messages_delete.Output {
        try await client.send(
            input: input,
            forOperation: Operations.Gmail_users_messages_delete.id,
            serializer: { input in
                let path = try converter.renderedPath(
                    template: "/gmail/v1/users/{}/messages/{}",
                    parameters: [
                        input.path.userId,
                        input.path.id
                    ]
                )
                var request: HTTPTypes.HTTPRequest = .init(
                    soar_path: path,
                    method: .delete
                )
                suppressMutabilityWarning(&request)
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "$.xgafv",
                    value: input.query._dollar__xgafv
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "access_token",
                    value: input.query.accessToken
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "alt",
                    value: input.query.alt
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "callback",
                    value: input.query.callback
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "fields",
                    value: input.query.fields
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "key",
                    value: input.query.key
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "oauth_token",
                    value: input.query.oauthToken
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "prettyPrint",
                    value: input.query.prettyPrint
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "quotaUser",
                    value: input.query.quotaUser
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "upload_protocol",
                    value: input.query.uploadProtocol
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "uploadType",
                    value: input.query.uploadType
                )
                return (request, nil)
            },
            deserializer: { response, responseBody in
                switch response.status.code {
                case 200:
                    return .ok(.init())
                default:
                    return .undocumented(
                        statusCode: response.status.code,
                        .init(
                            headerFields: response.headerFields,
                            body: responseBody
                        )
                    )
                }
            }
        )
    }
    /// Modifies the labels on the specified message.
    ///
    /// - Remark: HTTP `POST /gmail/v1/users/{userId}/messages/{id}/modify`.
    /// - Remark: Generated from `#/paths//gmail/v1/users/{userId}/messages/{id}/modify/post(gmail.users.messages.modify)`.
    public func gmail_users_messages_modify(_ input: Operations.Gmail_users_messages_modify.Input) async throws -> Operations.Gmail_users_messages_modify.Output {
        try await client.send(
            input: input,
            forOperation: Operations.Gmail_users_messages_modify.id,
            serializer: { input in
                let path = try converter.renderedPath(
                    template: "/gmail/v1/users/{}/messages/{}/modify",
                    parameters: [
                        input.path.userId,
                        input.path.id
                    ]
                )
                var request: HTTPTypes.HTTPRequest = .init(
                    soar_path: path,
                    method: .post
                )
                suppressMutabilityWarning(&request)
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "$.xgafv",
                    value: input.query._dollar__xgafv
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "access_token",
                    value: input.query.accessToken
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "alt",
                    value: input.query.alt
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "callback",
                    value: input.query.callback
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "fields",
                    value: input.query.fields
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "key",
                    value: input.query.key
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "oauth_token",
                    value: input.query.oauthToken
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "prettyPrint",
                    value: input.query.prettyPrint
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "quotaUser",
                    value: input.query.quotaUser
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "upload_protocol",
                    value: input.query.uploadProtocol
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "uploadType",
                    value: input.query.uploadType
                )
                converter.setAcceptHeader(
                    in: &request.headerFields,
                    contentTypes: input.headers.accept
                )
                let body: OpenAPIRuntime.HTTPBody?
                switch input.body {
                case .none:
                    body = nil
                case let .json(value):
                    body = try converter.setOptionalRequestBodyAsJSON(
                        value,
                        headerFields: &request.headerFields,
                        contentType: "application/json; charset=utf-8"
                    )
                }
                return (request, body)
            },
            deserializer: { response, responseBody in
                switch response.status.code {
                case 200:
                    let contentType = converter.extractContentTypeIfPresent(in: response.headerFields)
                    let body: Operations.Gmail_users_messages_modify.Output.Ok.Body
                    let chosenContentType = try converter.bestContentType(
                        received: contentType,
                        options: [
                            "application/json"
                        ]
                    )
                    switch chosenContentType {
                    case "application/json":
                        body = try await converter.getResponseBodyAsJSON(
                            Components.Schemas.Message.self,
                            from: responseBody,
                            transforming: { value in
                                .json(value)
                            }
                        )
                    default:
                        preconditionFailure("bestContentType chose an invalid content type.")
                    }
                    return .ok(.init(body: body))
                default:
                    return .undocumented(
                        statusCode: response.status.code,
                        .init(
                            headerFields: response.headerFields,
                            body: responseBody
                        )
                    )
                }
            }
        )
    }
    /// Moves the specified message to the trash.
    ///
    /// - Remark: HTTP `POST /gmail/v1/users/{userId}/messages/{id}/trash`.
    /// - Remark: Generated from `#/paths//gmail/v1/users/{userId}/messages/{id}/trash/post(gmail.users.messages.trash)`.
    public func gmail_users_messages_trash(_ input: Operations.Gmail_users_messages_trash.Input) async throws -> Operations.Gmail_users_messages_trash.Output {
        try await client.send(
            input: input,
            forOperation: Operations.Gmail_users_messages_trash.id,
            serializer: { input in
                let path = try converter.renderedPath(
                    template: "/gmail/v1/users/{}/messages/{}/trash",
                    parameters: [
                        input.path.userId,
                        input.path.id
                    ]
                )
                var request: HTTPTypes.HTTPRequest = .init(
                    soar_path: path,
                    method: .post
                )
                suppressMutabilityWarning(&request)
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "$.xgafv",
                    value: input.query._dollar__xgafv
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "access_token",
                    value: input.query.accessToken
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "alt",
                    value: input.query.alt
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "callback",
                    value: input.query.callback
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "fields",
                    value: input.query.fields
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "key",
                    value: input.query.key
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "oauth_token",
                    value: input.query.oauthToken
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "prettyPrint",
                    value: input.query.prettyPrint
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "quotaUser",
                    value: input.query.quotaUser
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "upload_protocol",
                    value: input.query.uploadProtocol
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "uploadType",
                    value: input.query.uploadType
                )
                converter.setAcceptHeader(
                    in: &request.headerFields,
                    contentTypes: input.headers.accept
                )
                return (request, nil)
            },
            deserializer: { response, responseBody in
                switch response.status.code {
                case 200:
                    let contentType = converter.extractContentTypeIfPresent(in: response.headerFields)
                    let body: Operations.Gmail_users_messages_trash.Output.Ok.Body
                    let chosenContentType = try converter.bestContentType(
                        received: contentType,
                        options: [
                            "application/json"
                        ]
                    )
                    switch chosenContentType {
                    case "application/json":
                        body = try await converter.getResponseBodyAsJSON(
                            Components.Schemas.Message.self,
                            from: responseBody,
                            transforming: { value in
                                .json(value)
                            }
                        )
                    default:
                        preconditionFailure("bestContentType chose an invalid content type.")
                    }
                    return .ok(.init(body: body))
                default:
                    return .undocumented(
                        statusCode: response.status.code,
                        .init(
                            headerFields: response.headerFields,
                            body: responseBody
                        )
                    )
                }
            }
        )
    }
    /// Removes the specified message from the trash.
    ///
    /// - Remark: HTTP `POST /gmail/v1/users/{userId}/messages/{id}/untrash`.
    /// - Remark: Generated from `#/paths//gmail/v1/users/{userId}/messages/{id}/untrash/post(gmail.users.messages.untrash)`.
    public func gmail_users_messages_untrash(_ input: Operations.Gmail_users_messages_untrash.Input) async throws -> Operations.Gmail_users_messages_untrash.Output {
        try await client.send(
            input: input,
            forOperation: Operations.Gmail_users_messages_untrash.id,
            serializer: { input in
                let path = try converter.renderedPath(
                    template: "/gmail/v1/users/{}/messages/{}/untrash",
                    parameters: [
                        input.path.userId,
                        input.path.id
                    ]
                )
                var request: HTTPTypes.HTTPRequest = .init(
                    soar_path: path,
                    method: .post
                )
                suppressMutabilityWarning(&request)
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "$.xgafv",
                    value: input.query._dollar__xgafv
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "access_token",
                    value: input.query.accessToken
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "alt",
                    value: input.query.alt
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "callback",
                    value: input.query.callback
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "fields",
                    value: input.query.fields
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "key",
                    value: input.query.key
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "oauth_token",
                    value: input.query.oauthToken
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "prettyPrint",
                    value: input.query.prettyPrint
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "quotaUser",
                    value: input.query.quotaUser
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "upload_protocol",
                    value: input.query.uploadProtocol
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "uploadType",
                    value: input.query.uploadType
                )
                converter.setAcceptHeader(
                    in: &request.headerFields,
                    contentTypes: input.headers.accept
                )
                return (request, nil)
            },
            deserializer: { response, responseBody in
                switch response.status.code {
                case 200:
                    let contentType = converter.extractContentTypeIfPresent(in: response.headerFields)
                    let body: Operations.Gmail_users_messages_untrash.Output.Ok.Body
                    let chosenContentType = try converter.bestContentType(
                        received: contentType,
                        options: [
                            "application/json"
                        ]
                    )
                    switch chosenContentType {
                    case "application/json":
                        body = try await converter.getResponseBodyAsJSON(
                            Components.Schemas.Message.self,
                            from: responseBody,
                            transforming: { value in
                                .json(value)
                            }
                        )
                    default:
                        preconditionFailure("bestContentType chose an invalid content type.")
                    }
                    return .ok(.init(body: body))
                default:
                    return .undocumented(
                        statusCode: response.status.code,
                        .init(
                            headerFields: response.headerFields,
                            body: responseBody
                        )
                    )
                }
            }
        )
    }
    /// Gets the specified message attachment.
    ///
    /// - Remark: HTTP `GET /gmail/v1/users/{userId}/messages/{messageId}/attachments/{id}`.
    /// - Remark: Generated from `#/paths//gmail/v1/users/{userId}/messages/{messageId}/attachments/{id}/get(gmail.users.messages.attachments.get)`.
    public func gmail_users_messages_attachments_get(_ input: Operations.Gmail_users_messages_attachments_get.Input) async throws -> Operations.Gmail_users_messages_attachments_get.Output {
        try await client.send(
            input: input,
            forOperation: Operations.Gmail_users_messages_attachments_get.id,
            serializer: { input in
                let path = try converter.renderedPath(
                    template: "/gmail/v1/users/{}/messages/{}/attachments/{}",
                    parameters: [
                        input.path.userId,
                        input.path.messageId,
                        input.path.id
                    ]
                )
                var request: HTTPTypes.HTTPRequest = .init(
                    soar_path: path,
                    method: .get
                )
                suppressMutabilityWarning(&request)
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "$.xgafv",
                    value: input.query._dollar__xgafv
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "access_token",
                    value: input.query.accessToken
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "alt",
                    value: input.query.alt
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "callback",
                    value: input.query.callback
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "fields",
                    value: input.query.fields
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "key",
                    value: input.query.key
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "oauth_token",
                    value: input.query.oauthToken
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "prettyPrint",
                    value: input.query.prettyPrint
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "quotaUser",
                    value: input.query.quotaUser
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "upload_protocol",
                    value: input.query.uploadProtocol
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "uploadType",
                    value: input.query.uploadType
                )
                converter.setAcceptHeader(
                    in: &request.headerFields,
                    contentTypes: input.headers.accept
                )
                return (request, nil)
            },
            deserializer: { response, responseBody in
                switch response.status.code {
                case 200:
                    let contentType = converter.extractContentTypeIfPresent(in: response.headerFields)
                    let body: Operations.Gmail_users_messages_attachments_get.Output.Ok.Body
                    let chosenContentType = try converter.bestContentType(
                        received: contentType,
                        options: [
                            "application/json"
                        ]
                    )
                    switch chosenContentType {
                    case "application/json":
                        body = try await converter.getResponseBodyAsJSON(
                            Components.Schemas.MessagePartBody.self,
                            from: responseBody,
                            transforming: { value in
                                .json(value)
                            }
                        )
                    default:
                        preconditionFailure("bestContentType chose an invalid content type.")
                    }
                    return .ok(.init(body: body))
                default:
                    return .undocumented(
                        statusCode: response.status.code,
                        .init(
                            headerFields: response.headerFields,
                            body: responseBody
                        )
                    )
                }
            }
        )
    }
    /// Gets the current user's Gmail profile.
    ///
    /// - Remark: HTTP `GET /gmail/v1/users/{userId}/profile`.
    /// - Remark: Generated from `#/paths//gmail/v1/users/{userId}/profile/get(gmail.users.getProfile)`.
    public func gmail_users_getProfile(_ input: Operations.Gmail_users_getProfile.Input) async throws -> Operations.Gmail_users_getProfile.Output {
        try await client.send(
            input: input,
            forOperation: Operations.Gmail_users_getProfile.id,
            serializer: { input in
                let path = try converter.renderedPath(
                    template: "/gmail/v1/users/{}/profile",
                    parameters: [
                        input.path.userId
                    ]
                )
                var request: HTTPTypes.HTTPRequest = .init(
                    soar_path: path,
                    method: .get
                )
                suppressMutabilityWarning(&request)
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "$.xgafv",
                    value: input.query._dollar__xgafv
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "access_token",
                    value: input.query.accessToken
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "alt",
                    value: input.query.alt
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "callback",
                    value: input.query.callback
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "fields",
                    value: input.query.fields
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "key",
                    value: input.query.key
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "oauth_token",
                    value: input.query.oauthToken
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "prettyPrint",
                    value: input.query.prettyPrint
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "quotaUser",
                    value: input.query.quotaUser
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "upload_protocol",
                    value: input.query.uploadProtocol
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "uploadType",
                    value: input.query.uploadType
                )
                converter.setAcceptHeader(
                    in: &request.headerFields,
                    contentTypes: input.headers.accept
                )
                return (request, nil)
            },
            deserializer: { response, responseBody in
                switch response.status.code {
                case 200:
                    let contentType = converter.extractContentTypeIfPresent(in: response.headerFields)
                    let body: Operations.Gmail_users_getProfile.Output.Ok.Body
                    let chosenContentType = try converter.bestContentType(
                        received: contentType,
                        options: [
                            "application/json"
                        ]
                    )
                    switch chosenContentType {
                    case "application/json":
                        body = try await converter.getResponseBodyAsJSON(
                            Components.Schemas.Profile.self,
                            from: responseBody,
                            transforming: { value in
                                .json(value)
                            }
                        )
                    default:
                        preconditionFailure("bestContentType chose an invalid content type.")
                    }
                    return .ok(.init(body: body))
                default:
                    return .undocumented(
                        statusCode: response.status.code,
                        .init(
                            headerFields: response.headerFields,
                            body: responseBody
                        )
                    )
                }
            }
        )
    }
    /// Gets the auto-forwarding setting for the specified account.
    ///
    /// - Remark: HTTP `GET /gmail/v1/users/{userId}/settings/autoForwarding`.
    /// - Remark: Generated from `#/paths//gmail/v1/users/{userId}/settings/autoForwarding/get(gmail.users.settings.getAutoForwarding)`.
    public func gmail_users_settings_getAutoForwarding(_ input: Operations.Gmail_users_settings_getAutoForwarding.Input) async throws -> Operations.Gmail_users_settings_getAutoForwarding.Output {
        try await client.send(
            input: input,
            forOperation: Operations.Gmail_users_settings_getAutoForwarding.id,
            serializer: { input in
                let path = try converter.renderedPath(
                    template: "/gmail/v1/users/{}/settings/autoForwarding",
                    parameters: [
                        input.path.userId
                    ]
                )
                var request: HTTPTypes.HTTPRequest = .init(
                    soar_path: path,
                    method: .get
                )
                suppressMutabilityWarning(&request)
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "$.xgafv",
                    value: input.query._dollar__xgafv
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "access_token",
                    value: input.query.accessToken
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "alt",
                    value: input.query.alt
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "callback",
                    value: input.query.callback
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "fields",
                    value: input.query.fields
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "key",
                    value: input.query.key
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "oauth_token",
                    value: input.query.oauthToken
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "prettyPrint",
                    value: input.query.prettyPrint
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "quotaUser",
                    value: input.query.quotaUser
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "upload_protocol",
                    value: input.query.uploadProtocol
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "uploadType",
                    value: input.query.uploadType
                )
                converter.setAcceptHeader(
                    in: &request.headerFields,
                    contentTypes: input.headers.accept
                )
                return (request, nil)
            },
            deserializer: { response, responseBody in
                switch response.status.code {
                case 200:
                    let contentType = converter.extractContentTypeIfPresent(in: response.headerFields)
                    let body: Operations.Gmail_users_settings_getAutoForwarding.Output.Ok.Body
                    let chosenContentType = try converter.bestContentType(
                        received: contentType,
                        options: [
                            "application/json"
                        ]
                    )
                    switch chosenContentType {
                    case "application/json":
                        body = try await converter.getResponseBodyAsJSON(
                            Components.Schemas.AutoForwarding.self,
                            from: responseBody,
                            transforming: { value in
                                .json(value)
                            }
                        )
                    default:
                        preconditionFailure("bestContentType chose an invalid content type.")
                    }
                    return .ok(.init(body: body))
                default:
                    return .undocumented(
                        statusCode: response.status.code,
                        .init(
                            headerFields: response.headerFields,
                            body: responseBody
                        )
                    )
                }
            }
        )
    }
    /// Updates the auto-forwarding setting for the specified account. A verified forwarding address must be specified when auto-forwarding is enabled. This method is only available to service account clients that have been delegated domain-wide authority.
    ///
    /// - Remark: HTTP `PUT /gmail/v1/users/{userId}/settings/autoForwarding`.
    /// - Remark: Generated from `#/paths//gmail/v1/users/{userId}/settings/autoForwarding/put(gmail.users.settings.updateAutoForwarding)`.
    public func gmail_users_settings_updateAutoForwarding(_ input: Operations.Gmail_users_settings_updateAutoForwarding.Input) async throws -> Operations.Gmail_users_settings_updateAutoForwarding.Output {
        try await client.send(
            input: input,
            forOperation: Operations.Gmail_users_settings_updateAutoForwarding.id,
            serializer: { input in
                let path = try converter.renderedPath(
                    template: "/gmail/v1/users/{}/settings/autoForwarding",
                    parameters: [
                        input.path.userId
                    ]
                )
                var request: HTTPTypes.HTTPRequest = .init(
                    soar_path: path,
                    method: .put
                )
                suppressMutabilityWarning(&request)
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "$.xgafv",
                    value: input.query._dollar__xgafv
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "access_token",
                    value: input.query.accessToken
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "alt",
                    value: input.query.alt
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "callback",
                    value: input.query.callback
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "fields",
                    value: input.query.fields
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "key",
                    value: input.query.key
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "oauth_token",
                    value: input.query.oauthToken
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "prettyPrint",
                    value: input.query.prettyPrint
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "quotaUser",
                    value: input.query.quotaUser
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "upload_protocol",
                    value: input.query.uploadProtocol
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "uploadType",
                    value: input.query.uploadType
                )
                converter.setAcceptHeader(
                    in: &request.headerFields,
                    contentTypes: input.headers.accept
                )
                let body: OpenAPIRuntime.HTTPBody?
                switch input.body {
                case .none:
                    body = nil
                case let .json(value):
                    body = try converter.setOptionalRequestBodyAsJSON(
                        value,
                        headerFields: &request.headerFields,
                        contentType: "application/json; charset=utf-8"
                    )
                }
                return (request, body)
            },
            deserializer: { response, responseBody in
                switch response.status.code {
                case 200:
                    let contentType = converter.extractContentTypeIfPresent(in: response.headerFields)
                    let body: Operations.Gmail_users_settings_updateAutoForwarding.Output.Ok.Body
                    let chosenContentType = try converter.bestContentType(
                        received: contentType,
                        options: [
                            "application/json"
                        ]
                    )
                    switch chosenContentType {
                    case "application/json":
                        body = try await converter.getResponseBodyAsJSON(
                            Components.Schemas.AutoForwarding.self,
                            from: responseBody,
                            transforming: { value in
                                .json(value)
                            }
                        )
                    default:
                        preconditionFailure("bestContentType chose an invalid content type.")
                    }
                    return .ok(.init(body: body))
                default:
                    return .undocumented(
                        statusCode: response.status.code,
                        .init(
                            headerFields: response.headerFields,
                            body: responseBody
                        )
                    )
                }
            }
        )
    }
    /// Lists the client-side encrypted identities for an authenticated user.
    ///
    /// - Remark: HTTP `GET /gmail/v1/users/{userId}/settings/cse/identities`.
    /// - Remark: Generated from `#/paths//gmail/v1/users/{userId}/settings/cse/identities/get(gmail.users.settings.cse.identities.list)`.
    public func gmail_users_settings_cse_identities_list(_ input: Operations.Gmail_users_settings_cse_identities_list.Input) async throws -> Operations.Gmail_users_settings_cse_identities_list.Output {
        try await client.send(
            input: input,
            forOperation: Operations.Gmail_users_settings_cse_identities_list.id,
            serializer: { input in
                let path = try converter.renderedPath(
                    template: "/gmail/v1/users/{}/settings/cse/identities",
                    parameters: [
                        input.path.userId
                    ]
                )
                var request: HTTPTypes.HTTPRequest = .init(
                    soar_path: path,
                    method: .get
                )
                suppressMutabilityWarning(&request)
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "$.xgafv",
                    value: input.query._dollar__xgafv
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "access_token",
                    value: input.query.accessToken
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "alt",
                    value: input.query.alt
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "callback",
                    value: input.query.callback
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "fields",
                    value: input.query.fields
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "key",
                    value: input.query.key
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "oauth_token",
                    value: input.query.oauthToken
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "prettyPrint",
                    value: input.query.prettyPrint
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "quotaUser",
                    value: input.query.quotaUser
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "upload_protocol",
                    value: input.query.uploadProtocol
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "uploadType",
                    value: input.query.uploadType
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "pageSize",
                    value: input.query.pageSize
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "pageToken",
                    value: input.query.pageToken
                )
                converter.setAcceptHeader(
                    in: &request.headerFields,
                    contentTypes: input.headers.accept
                )
                return (request, nil)
            },
            deserializer: { response, responseBody in
                switch response.status.code {
                case 200:
                    let contentType = converter.extractContentTypeIfPresent(in: response.headerFields)
                    let body: Operations.Gmail_users_settings_cse_identities_list.Output.Ok.Body
                    let chosenContentType = try converter.bestContentType(
                        received: contentType,
                        options: [
                            "application/json"
                        ]
                    )
                    switch chosenContentType {
                    case "application/json":
                        body = try await converter.getResponseBodyAsJSON(
                            Components.Schemas.ListCseIdentitiesResponse.self,
                            from: responseBody,
                            transforming: { value in
                                .json(value)
                            }
                        )
                    default:
                        preconditionFailure("bestContentType chose an invalid content type.")
                    }
                    return .ok(.init(body: body))
                default:
                    return .undocumented(
                        statusCode: response.status.code,
                        .init(
                            headerFields: response.headerFields,
                            body: responseBody
                        )
                    )
                }
            }
        )
    }
    /// Creates and configures a client-side encryption identity that's authorized to send mail from the user account. Google publishes the S/MIME certificate to a shared domain-wide directory so that people within a Google Workspace organization can encrypt and send mail to the identity.
    ///
    /// - Remark: HTTP `POST /gmail/v1/users/{userId}/settings/cse/identities`.
    /// - Remark: Generated from `#/paths//gmail/v1/users/{userId}/settings/cse/identities/post(gmail.users.settings.cse.identities.create)`.
    public func gmail_users_settings_cse_identities_create(_ input: Operations.Gmail_users_settings_cse_identities_create.Input) async throws -> Operations.Gmail_users_settings_cse_identities_create.Output {
        try await client.send(
            input: input,
            forOperation: Operations.Gmail_users_settings_cse_identities_create.id,
            serializer: { input in
                let path = try converter.renderedPath(
                    template: "/gmail/v1/users/{}/settings/cse/identities",
                    parameters: [
                        input.path.userId
                    ]
                )
                var request: HTTPTypes.HTTPRequest = .init(
                    soar_path: path,
                    method: .post
                )
                suppressMutabilityWarning(&request)
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "$.xgafv",
                    value: input.query._dollar__xgafv
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "access_token",
                    value: input.query.accessToken
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "alt",
                    value: input.query.alt
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "callback",
                    value: input.query.callback
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "fields",
                    value: input.query.fields
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "key",
                    value: input.query.key
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "oauth_token",
                    value: input.query.oauthToken
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "prettyPrint",
                    value: input.query.prettyPrint
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "quotaUser",
                    value: input.query.quotaUser
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "upload_protocol",
                    value: input.query.uploadProtocol
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "uploadType",
                    value: input.query.uploadType
                )
                converter.setAcceptHeader(
                    in: &request.headerFields,
                    contentTypes: input.headers.accept
                )
                let body: OpenAPIRuntime.HTTPBody?
                switch input.body {
                case .none:
                    body = nil
                case let .json(value):
                    body = try converter.setOptionalRequestBodyAsJSON(
                        value,
                        headerFields: &request.headerFields,
                        contentType: "application/json; charset=utf-8"
                    )
                }
                return (request, body)
            },
            deserializer: { response, responseBody in
                switch response.status.code {
                case 200:
                    let contentType = converter.extractContentTypeIfPresent(in: response.headerFields)
                    let body: Operations.Gmail_users_settings_cse_identities_create.Output.Ok.Body
                    let chosenContentType = try converter.bestContentType(
                        received: contentType,
                        options: [
                            "application/json"
                        ]
                    )
                    switch chosenContentType {
                    case "application/json":
                        body = try await converter.getResponseBodyAsJSON(
                            Components.Schemas.CseIdentity.self,
                            from: responseBody,
                            transforming: { value in
                                .json(value)
                            }
                        )
                    default:
                        preconditionFailure("bestContentType chose an invalid content type.")
                    }
                    return .ok(.init(body: body))
                default:
                    return .undocumented(
                        statusCode: response.status.code,
                        .init(
                            headerFields: response.headerFields,
                            body: responseBody
                        )
                    )
                }
            }
        )
    }
    /// Retrieves a client-side encryption identity configuration.
    ///
    /// - Remark: HTTP `GET /gmail/v1/users/{userId}/settings/cse/identities/{cseEmailAddress}`.
    /// - Remark: Generated from `#/paths//gmail/v1/users/{userId}/settings/cse/identities/{cseEmailAddress}/get(gmail.users.settings.cse.identities.get)`.
    public func gmail_users_settings_cse_identities_get(_ input: Operations.Gmail_users_settings_cse_identities_get.Input) async throws -> Operations.Gmail_users_settings_cse_identities_get.Output {
        try await client.send(
            input: input,
            forOperation: Operations.Gmail_users_settings_cse_identities_get.id,
            serializer: { input in
                let path = try converter.renderedPath(
                    template: "/gmail/v1/users/{}/settings/cse/identities/{}",
                    parameters: [
                        input.path.userId,
                        input.path.cseEmailAddress
                    ]
                )
                var request: HTTPTypes.HTTPRequest = .init(
                    soar_path: path,
                    method: .get
                )
                suppressMutabilityWarning(&request)
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "$.xgafv",
                    value: input.query._dollar__xgafv
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "access_token",
                    value: input.query.accessToken
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "alt",
                    value: input.query.alt
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "callback",
                    value: input.query.callback
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "fields",
                    value: input.query.fields
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "key",
                    value: input.query.key
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "oauth_token",
                    value: input.query.oauthToken
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "prettyPrint",
                    value: input.query.prettyPrint
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "quotaUser",
                    value: input.query.quotaUser
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "upload_protocol",
                    value: input.query.uploadProtocol
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "uploadType",
                    value: input.query.uploadType
                )
                converter.setAcceptHeader(
                    in: &request.headerFields,
                    contentTypes: input.headers.accept
                )
                return (request, nil)
            },
            deserializer: { response, responseBody in
                switch response.status.code {
                case 200:
                    let contentType = converter.extractContentTypeIfPresent(in: response.headerFields)
                    let body: Operations.Gmail_users_settings_cse_identities_get.Output.Ok.Body
                    let chosenContentType = try converter.bestContentType(
                        received: contentType,
                        options: [
                            "application/json"
                        ]
                    )
                    switch chosenContentType {
                    case "application/json":
                        body = try await converter.getResponseBodyAsJSON(
                            Components.Schemas.CseIdentity.self,
                            from: responseBody,
                            transforming: { value in
                                .json(value)
                            }
                        )
                    default:
                        preconditionFailure("bestContentType chose an invalid content type.")
                    }
                    return .ok(.init(body: body))
                default:
                    return .undocumented(
                        statusCode: response.status.code,
                        .init(
                            headerFields: response.headerFields,
                            body: responseBody
                        )
                    )
                }
            }
        )
    }
    /// Deletes a client-side encryption identity. The authenticated user can no longer use the identity to send encrypted messages. You cannot restore the identity after you delete it. Instead, use the CreateCseIdentity method to create another identity with the same configuration.
    ///
    /// - Remark: HTTP `DELETE /gmail/v1/users/{userId}/settings/cse/identities/{cseEmailAddress}`.
    /// - Remark: Generated from `#/paths//gmail/v1/users/{userId}/settings/cse/identities/{cseEmailAddress}/delete(gmail.users.settings.cse.identities.delete)`.
    public func gmail_users_settings_cse_identities_delete(_ input: Operations.Gmail_users_settings_cse_identities_delete.Input) async throws -> Operations.Gmail_users_settings_cse_identities_delete.Output {
        try await client.send(
            input: input,
            forOperation: Operations.Gmail_users_settings_cse_identities_delete.id,
            serializer: { input in
                let path = try converter.renderedPath(
                    template: "/gmail/v1/users/{}/settings/cse/identities/{}",
                    parameters: [
                        input.path.userId,
                        input.path.cseEmailAddress
                    ]
                )
                var request: HTTPTypes.HTTPRequest = .init(
                    soar_path: path,
                    method: .delete
                )
                suppressMutabilityWarning(&request)
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "$.xgafv",
                    value: input.query._dollar__xgafv
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "access_token",
                    value: input.query.accessToken
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "alt",
                    value: input.query.alt
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "callback",
                    value: input.query.callback
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "fields",
                    value: input.query.fields
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "key",
                    value: input.query.key
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "oauth_token",
                    value: input.query.oauthToken
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "prettyPrint",
                    value: input.query.prettyPrint
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "quotaUser",
                    value: input.query.quotaUser
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "upload_protocol",
                    value: input.query.uploadProtocol
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "uploadType",
                    value: input.query.uploadType
                )
                return (request, nil)
            },
            deserializer: { response, responseBody in
                switch response.status.code {
                case 200:
                    return .ok(.init())
                default:
                    return .undocumented(
                        statusCode: response.status.code,
                        .init(
                            headerFields: response.headerFields,
                            body: responseBody
                        )
                    )
                }
            }
        )
    }
    /// Associates a different key pair with an existing client-side encryption identity. The updated key pair must validate against Google's [S/MIME certificate profiles](https://support.google.com/a/answer/7300887).
    ///
    /// - Remark: HTTP `PATCH /gmail/v1/users/{userId}/settings/cse/identities/{emailAddress}`.
    /// - Remark: Generated from `#/paths//gmail/v1/users/{userId}/settings/cse/identities/{emailAddress}/patch(gmail.users.settings.cse.identities.patch)`.
    public func gmail_users_settings_cse_identities_patch(_ input: Operations.Gmail_users_settings_cse_identities_patch.Input) async throws -> Operations.Gmail_users_settings_cse_identities_patch.Output {
        try await client.send(
            input: input,
            forOperation: Operations.Gmail_users_settings_cse_identities_patch.id,
            serializer: { input in
                let path = try converter.renderedPath(
                    template: "/gmail/v1/users/{}/settings/cse/identities/{}",
                    parameters: [
                        input.path.userId,
                        input.path.emailAddress
                    ]
                )
                var request: HTTPTypes.HTTPRequest = .init(
                    soar_path: path,
                    method: .patch
                )
                suppressMutabilityWarning(&request)
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "$.xgafv",
                    value: input.query._dollar__xgafv
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "access_token",
                    value: input.query.accessToken
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "alt",
                    value: input.query.alt
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "callback",
                    value: input.query.callback
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "fields",
                    value: input.query.fields
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "key",
                    value: input.query.key
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "oauth_token",
                    value: input.query.oauthToken
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "prettyPrint",
                    value: input.query.prettyPrint
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "quotaUser",
                    value: input.query.quotaUser
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "upload_protocol",
                    value: input.query.uploadProtocol
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "uploadType",
                    value: input.query.uploadType
                )
                converter.setAcceptHeader(
                    in: &request.headerFields,
                    contentTypes: input.headers.accept
                )
                let body: OpenAPIRuntime.HTTPBody?
                switch input.body {
                case .none:
                    body = nil
                case let .json(value):
                    body = try converter.setOptionalRequestBodyAsJSON(
                        value,
                        headerFields: &request.headerFields,
                        contentType: "application/json; charset=utf-8"
                    )
                }
                return (request, body)
            },
            deserializer: { response, responseBody in
                switch response.status.code {
                case 200:
                    let contentType = converter.extractContentTypeIfPresent(in: response.headerFields)
                    let body: Operations.Gmail_users_settings_cse_identities_patch.Output.Ok.Body
                    let chosenContentType = try converter.bestContentType(
                        received: contentType,
                        options: [
                            "application/json"
                        ]
                    )
                    switch chosenContentType {
                    case "application/json":
                        body = try await converter.getResponseBodyAsJSON(
                            Components.Schemas.CseIdentity.self,
                            from: responseBody,
                            transforming: { value in
                                .json(value)
                            }
                        )
                    default:
                        preconditionFailure("bestContentType chose an invalid content type.")
                    }
                    return .ok(.init(body: body))
                default:
                    return .undocumented(
                        statusCode: response.status.code,
                        .init(
                            headerFields: response.headerFields,
                            body: responseBody
                        )
                    )
                }
            }
        )
    }
    /// Lists client-side encryption key pairs for an authenticated user.
    ///
    /// - Remark: HTTP `GET /gmail/v1/users/{userId}/settings/cse/keypairs`.
    /// - Remark: Generated from `#/paths//gmail/v1/users/{userId}/settings/cse/keypairs/get(gmail.users.settings.cse.keypairs.list)`.
    public func gmail_users_settings_cse_keypairs_list(_ input: Operations.Gmail_users_settings_cse_keypairs_list.Input) async throws -> Operations.Gmail_users_settings_cse_keypairs_list.Output {
        try await client.send(
            input: input,
            forOperation: Operations.Gmail_users_settings_cse_keypairs_list.id,
            serializer: { input in
                let path = try converter.renderedPath(
                    template: "/gmail/v1/users/{}/settings/cse/keypairs",
                    parameters: [
                        input.path.userId
                    ]
                )
                var request: HTTPTypes.HTTPRequest = .init(
                    soar_path: path,
                    method: .get
                )
                suppressMutabilityWarning(&request)
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "$.xgafv",
                    value: input.query._dollar__xgafv
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "access_token",
                    value: input.query.accessToken
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "alt",
                    value: input.query.alt
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "callback",
                    value: input.query.callback
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "fields",
                    value: input.query.fields
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "key",
                    value: input.query.key
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "oauth_token",
                    value: input.query.oauthToken
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "prettyPrint",
                    value: input.query.prettyPrint
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "quotaUser",
                    value: input.query.quotaUser
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "upload_protocol",
                    value: input.query.uploadProtocol
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "uploadType",
                    value: input.query.uploadType
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "pageSize",
                    value: input.query.pageSize
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "pageToken",
                    value: input.query.pageToken
                )
                converter.setAcceptHeader(
                    in: &request.headerFields,
                    contentTypes: input.headers.accept
                )
                return (request, nil)
            },
            deserializer: { response, responseBody in
                switch response.status.code {
                case 200:
                    let contentType = converter.extractContentTypeIfPresent(in: response.headerFields)
                    let body: Operations.Gmail_users_settings_cse_keypairs_list.Output.Ok.Body
                    let chosenContentType = try converter.bestContentType(
                        received: contentType,
                        options: [
                            "application/json"
                        ]
                    )
                    switch chosenContentType {
                    case "application/json":
                        body = try await converter.getResponseBodyAsJSON(
                            Components.Schemas.ListCseKeyPairsResponse.self,
                            from: responseBody,
                            transforming: { value in
                                .json(value)
                            }
                        )
                    default:
                        preconditionFailure("bestContentType chose an invalid content type.")
                    }
                    return .ok(.init(body: body))
                default:
                    return .undocumented(
                        statusCode: response.status.code,
                        .init(
                            headerFields: response.headerFields,
                            body: responseBody
                        )
                    )
                }
            }
        )
    }
    /// Creates and uploads a client-side encryption S/MIME public key certificate chain and private key metadata for the authenticated user.
    ///
    /// - Remark: HTTP `POST /gmail/v1/users/{userId}/settings/cse/keypairs`.
    /// - Remark: Generated from `#/paths//gmail/v1/users/{userId}/settings/cse/keypairs/post(gmail.users.settings.cse.keypairs.create)`.
    public func gmail_users_settings_cse_keypairs_create(_ input: Operations.Gmail_users_settings_cse_keypairs_create.Input) async throws -> Operations.Gmail_users_settings_cse_keypairs_create.Output {
        try await client.send(
            input: input,
            forOperation: Operations.Gmail_users_settings_cse_keypairs_create.id,
            serializer: { input in
                let path = try converter.renderedPath(
                    template: "/gmail/v1/users/{}/settings/cse/keypairs",
                    parameters: [
                        input.path.userId
                    ]
                )
                var request: HTTPTypes.HTTPRequest = .init(
                    soar_path: path,
                    method: .post
                )
                suppressMutabilityWarning(&request)
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "$.xgafv",
                    value: input.query._dollar__xgafv
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "access_token",
                    value: input.query.accessToken
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "alt",
                    value: input.query.alt
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "callback",
                    value: input.query.callback
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "fields",
                    value: input.query.fields
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "key",
                    value: input.query.key
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "oauth_token",
                    value: input.query.oauthToken
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "prettyPrint",
                    value: input.query.prettyPrint
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "quotaUser",
                    value: input.query.quotaUser
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "upload_protocol",
                    value: input.query.uploadProtocol
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "uploadType",
                    value: input.query.uploadType
                )
                converter.setAcceptHeader(
                    in: &request.headerFields,
                    contentTypes: input.headers.accept
                )
                let body: OpenAPIRuntime.HTTPBody?
                switch input.body {
                case .none:
                    body = nil
                case let .json(value):
                    body = try converter.setOptionalRequestBodyAsJSON(
                        value,
                        headerFields: &request.headerFields,
                        contentType: "application/json; charset=utf-8"
                    )
                }
                return (request, body)
            },
            deserializer: { response, responseBody in
                switch response.status.code {
                case 200:
                    let contentType = converter.extractContentTypeIfPresent(in: response.headerFields)
                    let body: Operations.Gmail_users_settings_cse_keypairs_create.Output.Ok.Body
                    let chosenContentType = try converter.bestContentType(
                        received: contentType,
                        options: [
                            "application/json"
                        ]
                    )
                    switch chosenContentType {
                    case "application/json":
                        body = try await converter.getResponseBodyAsJSON(
                            Components.Schemas.CseKeyPair.self,
                            from: responseBody,
                            transforming: { value in
                                .json(value)
                            }
                        )
                    default:
                        preconditionFailure("bestContentType chose an invalid content type.")
                    }
                    return .ok(.init(body: body))
                default:
                    return .undocumented(
                        statusCode: response.status.code,
                        .init(
                            headerFields: response.headerFields,
                            body: responseBody
                        )
                    )
                }
            }
        )
    }
    /// Retrieves an existing client-side encryption key pair.
    ///
    /// - Remark: HTTP `GET /gmail/v1/users/{userId}/settings/cse/keypairs/{keyPairId}`.
    /// - Remark: Generated from `#/paths//gmail/v1/users/{userId}/settings/cse/keypairs/{keyPairId}/get(gmail.users.settings.cse.keypairs.get)`.
    public func gmail_users_settings_cse_keypairs_get(_ input: Operations.Gmail_users_settings_cse_keypairs_get.Input) async throws -> Operations.Gmail_users_settings_cse_keypairs_get.Output {
        try await client.send(
            input: input,
            forOperation: Operations.Gmail_users_settings_cse_keypairs_get.id,
            serializer: { input in
                let path = try converter.renderedPath(
                    template: "/gmail/v1/users/{}/settings/cse/keypairs/{}",
                    parameters: [
                        input.path.userId,
                        input.path.keyPairId
                    ]
                )
                var request: HTTPTypes.HTTPRequest = .init(
                    soar_path: path,
                    method: .get
                )
                suppressMutabilityWarning(&request)
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "$.xgafv",
                    value: input.query._dollar__xgafv
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "access_token",
                    value: input.query.accessToken
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "alt",
                    value: input.query.alt
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "callback",
                    value: input.query.callback
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "fields",
                    value: input.query.fields
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "key",
                    value: input.query.key
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "oauth_token",
                    value: input.query.oauthToken
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "prettyPrint",
                    value: input.query.prettyPrint
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "quotaUser",
                    value: input.query.quotaUser
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "upload_protocol",
                    value: input.query.uploadProtocol
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "uploadType",
                    value: input.query.uploadType
                )
                converter.setAcceptHeader(
                    in: &request.headerFields,
                    contentTypes: input.headers.accept
                )
                return (request, nil)
            },
            deserializer: { response, responseBody in
                switch response.status.code {
                case 200:
                    let contentType = converter.extractContentTypeIfPresent(in: response.headerFields)
                    let body: Operations.Gmail_users_settings_cse_keypairs_get.Output.Ok.Body
                    let chosenContentType = try converter.bestContentType(
                        received: contentType,
                        options: [
                            "application/json"
                        ]
                    )
                    switch chosenContentType {
                    case "application/json":
                        body = try await converter.getResponseBodyAsJSON(
                            Components.Schemas.CseKeyPair.self,
                            from: responseBody,
                            transforming: { value in
                                .json(value)
                            }
                        )
                    default:
                        preconditionFailure("bestContentType chose an invalid content type.")
                    }
                    return .ok(.init(body: body))
                default:
                    return .undocumented(
                        statusCode: response.status.code,
                        .init(
                            headerFields: response.headerFields,
                            body: responseBody
                        )
                    )
                }
            }
        )
    }
    /// Turns off a client-side encryption key pair. The authenticated user can no longer use the key pair to decrypt incoming CSE message texts or sign outgoing CSE mail. To regain access, use the EnableCseKeyPair to turn on the key pair. After 30 days, you can permanently delete the key pair by using the ObliterateCseKeyPair method.
    ///
    /// - Remark: HTTP `POST /gmail/v1/users/{userId}/settings/cse/keypairs/{keyPairId}:disable`.
    /// - Remark: Generated from `#/paths//gmail/v1/users/{userId}/settings/cse/keypairs/{keyPairId}:disable/post(gmail.users.settings.cse.keypairs.disable)`.
    public func gmail_users_settings_cse_keypairs_disable(_ input: Operations.Gmail_users_settings_cse_keypairs_disable.Input) async throws -> Operations.Gmail_users_settings_cse_keypairs_disable.Output {
        try await client.send(
            input: input,
            forOperation: Operations.Gmail_users_settings_cse_keypairs_disable.id,
            serializer: { input in
                let path = try converter.renderedPath(
                    template: "/gmail/v1/users/{}/settings/cse/keypairs/{}:disable",
                    parameters: [
                        input.path.userId,
                        input.path.keyPairId
                    ]
                )
                var request: HTTPTypes.HTTPRequest = .init(
                    soar_path: path,
                    method: .post
                )
                suppressMutabilityWarning(&request)
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "$.xgafv",
                    value: input.query._dollar__xgafv
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "access_token",
                    value: input.query.accessToken
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "alt",
                    value: input.query.alt
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "callback",
                    value: input.query.callback
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "fields",
                    value: input.query.fields
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "key",
                    value: input.query.key
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "oauth_token",
                    value: input.query.oauthToken
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "prettyPrint",
                    value: input.query.prettyPrint
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "quotaUser",
                    value: input.query.quotaUser
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "upload_protocol",
                    value: input.query.uploadProtocol
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "uploadType",
                    value: input.query.uploadType
                )
                converter.setAcceptHeader(
                    in: &request.headerFields,
                    contentTypes: input.headers.accept
                )
                let body: OpenAPIRuntime.HTTPBody?
                switch input.body {
                case .none:
                    body = nil
                case let .json(value):
                    body = try converter.setOptionalRequestBodyAsJSON(
                        value,
                        headerFields: &request.headerFields,
                        contentType: "application/json; charset=utf-8"
                    )
                }
                return (request, body)
            },
            deserializer: { response, responseBody in
                switch response.status.code {
                case 200:
                    let contentType = converter.extractContentTypeIfPresent(in: response.headerFields)
                    let body: Operations.Gmail_users_settings_cse_keypairs_disable.Output.Ok.Body
                    let chosenContentType = try converter.bestContentType(
                        received: contentType,
                        options: [
                            "application/json"
                        ]
                    )
                    switch chosenContentType {
                    case "application/json":
                        body = try await converter.getResponseBodyAsJSON(
                            Components.Schemas.CseKeyPair.self,
                            from: responseBody,
                            transforming: { value in
                                .json(value)
                            }
                        )
                    default:
                        preconditionFailure("bestContentType chose an invalid content type.")
                    }
                    return .ok(.init(body: body))
                default:
                    return .undocumented(
                        statusCode: response.status.code,
                        .init(
                            headerFields: response.headerFields,
                            body: responseBody
                        )
                    )
                }
            }
        )
    }
    /// Turns on a client-side encryption key pair that was turned off. The key pair becomes active again for any associated client-side encryption identities.
    ///
    /// - Remark: HTTP `POST /gmail/v1/users/{userId}/settings/cse/keypairs/{keyPairId}:enable`.
    /// - Remark: Generated from `#/paths//gmail/v1/users/{userId}/settings/cse/keypairs/{keyPairId}:enable/post(gmail.users.settings.cse.keypairs.enable)`.
    public func gmail_users_settings_cse_keypairs_enable(_ input: Operations.Gmail_users_settings_cse_keypairs_enable.Input) async throws -> Operations.Gmail_users_settings_cse_keypairs_enable.Output {
        try await client.send(
            input: input,
            forOperation: Operations.Gmail_users_settings_cse_keypairs_enable.id,
            serializer: { input in
                let path = try converter.renderedPath(
                    template: "/gmail/v1/users/{}/settings/cse/keypairs/{}:enable",
                    parameters: [
                        input.path.userId,
                        input.path.keyPairId
                    ]
                )
                var request: HTTPTypes.HTTPRequest = .init(
                    soar_path: path,
                    method: .post
                )
                suppressMutabilityWarning(&request)
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "$.xgafv",
                    value: input.query._dollar__xgafv
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "access_token",
                    value: input.query.accessToken
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "alt",
                    value: input.query.alt
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "callback",
                    value: input.query.callback
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "fields",
                    value: input.query.fields
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "key",
                    value: input.query.key
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "oauth_token",
                    value: input.query.oauthToken
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "prettyPrint",
                    value: input.query.prettyPrint
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "quotaUser",
                    value: input.query.quotaUser
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "upload_protocol",
                    value: input.query.uploadProtocol
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "uploadType",
                    value: input.query.uploadType
                )
                converter.setAcceptHeader(
                    in: &request.headerFields,
                    contentTypes: input.headers.accept
                )
                let body: OpenAPIRuntime.HTTPBody?
                switch input.body {
                case .none:
                    body = nil
                case let .json(value):
                    body = try converter.setOptionalRequestBodyAsJSON(
                        value,
                        headerFields: &request.headerFields,
                        contentType: "application/json; charset=utf-8"
                    )
                }
                return (request, body)
            },
            deserializer: { response, responseBody in
                switch response.status.code {
                case 200:
                    let contentType = converter.extractContentTypeIfPresent(in: response.headerFields)
                    let body: Operations.Gmail_users_settings_cse_keypairs_enable.Output.Ok.Body
                    let chosenContentType = try converter.bestContentType(
                        received: contentType,
                        options: [
                            "application/json"
                        ]
                    )
                    switch chosenContentType {
                    case "application/json":
                        body = try await converter.getResponseBodyAsJSON(
                            Components.Schemas.CseKeyPair.self,
                            from: responseBody,
                            transforming: { value in
                                .json(value)
                            }
                        )
                    default:
                        preconditionFailure("bestContentType chose an invalid content type.")
                    }
                    return .ok(.init(body: body))
                default:
                    return .undocumented(
                        statusCode: response.status.code,
                        .init(
                            headerFields: response.headerFields,
                            body: responseBody
                        )
                    )
                }
            }
        )
    }
    /// Deletes a client-side encryption key pair permanently and immediately. You can only permanently delete key pairs that have been turned off for more than 30 days. To turn off a key pair, use the DisableCseKeyPair method. Gmail can't restore or decrypt any messages that were encrypted by an obliterated key. Authenticated users and Google Workspace administrators lose access to reading the encrypted messages.
    ///
    /// - Remark: HTTP `POST /gmail/v1/users/{userId}/settings/cse/keypairs/{keyPairId}:obliterate`.
    /// - Remark: Generated from `#/paths//gmail/v1/users/{userId}/settings/cse/keypairs/{keyPairId}:obliterate/post(gmail.users.settings.cse.keypairs.obliterate)`.
    public func gmail_users_settings_cse_keypairs_obliterate(_ input: Operations.Gmail_users_settings_cse_keypairs_obliterate.Input) async throws -> Operations.Gmail_users_settings_cse_keypairs_obliterate.Output {
        try await client.send(
            input: input,
            forOperation: Operations.Gmail_users_settings_cse_keypairs_obliterate.id,
            serializer: { input in
                let path = try converter.renderedPath(
                    template: "/gmail/v1/users/{}/settings/cse/keypairs/{}:obliterate",
                    parameters: [
                        input.path.userId,
                        input.path.keyPairId
                    ]
                )
                var request: HTTPTypes.HTTPRequest = .init(
                    soar_path: path,
                    method: .post
                )
                suppressMutabilityWarning(&request)
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "$.xgafv",
                    value: input.query._dollar__xgafv
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "access_token",
                    value: input.query.accessToken
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "alt",
                    value: input.query.alt
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "callback",
                    value: input.query.callback
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "fields",
                    value: input.query.fields
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "key",
                    value: input.query.key
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "oauth_token",
                    value: input.query.oauthToken
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "prettyPrint",
                    value: input.query.prettyPrint
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "quotaUser",
                    value: input.query.quotaUser
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "upload_protocol",
                    value: input.query.uploadProtocol
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "uploadType",
                    value: input.query.uploadType
                )
                let body: OpenAPIRuntime.HTTPBody?
                switch input.body {
                case .none:
                    body = nil
                case let .json(value):
                    body = try converter.setOptionalRequestBodyAsJSON(
                        value,
                        headerFields: &request.headerFields,
                        contentType: "application/json; charset=utf-8"
                    )
                }
                return (request, body)
            },
            deserializer: { response, responseBody in
                switch response.status.code {
                case 200:
                    return .ok(.init())
                default:
                    return .undocumented(
                        statusCode: response.status.code,
                        .init(
                            headerFields: response.headerFields,
                            body: responseBody
                        )
                    )
                }
            }
        )
    }
    /// Lists the delegates for the specified account. This method is only available to service account clients that have been delegated domain-wide authority.
    ///
    /// - Remark: HTTP `GET /gmail/v1/users/{userId}/settings/delegates`.
    /// - Remark: Generated from `#/paths//gmail/v1/users/{userId}/settings/delegates/get(gmail.users.settings.delegates.list)`.
    public func gmail_users_settings_delegates_list(_ input: Operations.Gmail_users_settings_delegates_list.Input) async throws -> Operations.Gmail_users_settings_delegates_list.Output {
        try await client.send(
            input: input,
            forOperation: Operations.Gmail_users_settings_delegates_list.id,
            serializer: { input in
                let path = try converter.renderedPath(
                    template: "/gmail/v1/users/{}/settings/delegates",
                    parameters: [
                        input.path.userId
                    ]
                )
                var request: HTTPTypes.HTTPRequest = .init(
                    soar_path: path,
                    method: .get
                )
                suppressMutabilityWarning(&request)
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "$.xgafv",
                    value: input.query._dollar__xgafv
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "access_token",
                    value: input.query.accessToken
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "alt",
                    value: input.query.alt
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "callback",
                    value: input.query.callback
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "fields",
                    value: input.query.fields
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "key",
                    value: input.query.key
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "oauth_token",
                    value: input.query.oauthToken
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "prettyPrint",
                    value: input.query.prettyPrint
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "quotaUser",
                    value: input.query.quotaUser
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "upload_protocol",
                    value: input.query.uploadProtocol
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "uploadType",
                    value: input.query.uploadType
                )
                converter.setAcceptHeader(
                    in: &request.headerFields,
                    contentTypes: input.headers.accept
                )
                return (request, nil)
            },
            deserializer: { response, responseBody in
                switch response.status.code {
                case 200:
                    let contentType = converter.extractContentTypeIfPresent(in: response.headerFields)
                    let body: Operations.Gmail_users_settings_delegates_list.Output.Ok.Body
                    let chosenContentType = try converter.bestContentType(
                        received: contentType,
                        options: [
                            "application/json"
                        ]
                    )
                    switch chosenContentType {
                    case "application/json":
                        body = try await converter.getResponseBodyAsJSON(
                            Components.Schemas.ListDelegatesResponse.self,
                            from: responseBody,
                            transforming: { value in
                                .json(value)
                            }
                        )
                    default:
                        preconditionFailure("bestContentType chose an invalid content type.")
                    }
                    return .ok(.init(body: body))
                default:
                    return .undocumented(
                        statusCode: response.status.code,
                        .init(
                            headerFields: response.headerFields,
                            body: responseBody
                        )
                    )
                }
            }
        )
    }
    /// Adds a delegate with its verification status set directly to `accepted`, without sending any verification email. The delegate user must be a member of the same Google Workspace organization as the delegator user. Gmail imposes limitations on the number of delegates and delegators each user in a Google Workspace organization can have. These limits depend on your organization, but in general each user can have up to 25 delegates and up to 10 delegators. Note that a delegate user must be referred to by their primary email address, and not an email alias. Also note that when a new delegate is created, there may be up to a one minute delay before the new delegate is available for use. This method is only available to service account clients that have been delegated domain-wide authority.
    ///
    /// - Remark: HTTP `POST /gmail/v1/users/{userId}/settings/delegates`.
    /// - Remark: Generated from `#/paths//gmail/v1/users/{userId}/settings/delegates/post(gmail.users.settings.delegates.create)`.
    public func gmail_users_settings_delegates_create(_ input: Operations.Gmail_users_settings_delegates_create.Input) async throws -> Operations.Gmail_users_settings_delegates_create.Output {
        try await client.send(
            input: input,
            forOperation: Operations.Gmail_users_settings_delegates_create.id,
            serializer: { input in
                let path = try converter.renderedPath(
                    template: "/gmail/v1/users/{}/settings/delegates",
                    parameters: [
                        input.path.userId
                    ]
                )
                var request: HTTPTypes.HTTPRequest = .init(
                    soar_path: path,
                    method: .post
                )
                suppressMutabilityWarning(&request)
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "$.xgafv",
                    value: input.query._dollar__xgafv
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "access_token",
                    value: input.query.accessToken
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "alt",
                    value: input.query.alt
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "callback",
                    value: input.query.callback
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "fields",
                    value: input.query.fields
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "key",
                    value: input.query.key
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "oauth_token",
                    value: input.query.oauthToken
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "prettyPrint",
                    value: input.query.prettyPrint
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "quotaUser",
                    value: input.query.quotaUser
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "upload_protocol",
                    value: input.query.uploadProtocol
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "uploadType",
                    value: input.query.uploadType
                )
                converter.setAcceptHeader(
                    in: &request.headerFields,
                    contentTypes: input.headers.accept
                )
                let body: OpenAPIRuntime.HTTPBody?
                switch input.body {
                case .none:
                    body = nil
                case let .json(value):
                    body = try converter.setOptionalRequestBodyAsJSON(
                        value,
                        headerFields: &request.headerFields,
                        contentType: "application/json; charset=utf-8"
                    )
                }
                return (request, body)
            },
            deserializer: { response, responseBody in
                switch response.status.code {
                case 200:
                    let contentType = converter.extractContentTypeIfPresent(in: response.headerFields)
                    let body: Operations.Gmail_users_settings_delegates_create.Output.Ok.Body
                    let chosenContentType = try converter.bestContentType(
                        received: contentType,
                        options: [
                            "application/json"
                        ]
                    )
                    switch chosenContentType {
                    case "application/json":
                        body = try await converter.getResponseBodyAsJSON(
                            Components.Schemas.Delegate.self,
                            from: responseBody,
                            transforming: { value in
                                .json(value)
                            }
                        )
                    default:
                        preconditionFailure("bestContentType chose an invalid content type.")
                    }
                    return .ok(.init(body: body))
                default:
                    return .undocumented(
                        statusCode: response.status.code,
                        .init(
                            headerFields: response.headerFields,
                            body: responseBody
                        )
                    )
                }
            }
        )
    }
    /// Gets the specified delegate. Note that a delegate user must be referred to by their primary email address, and not an email alias. This method is only available to service account clients that have been delegated domain-wide authority.
    ///
    /// - Remark: HTTP `GET /gmail/v1/users/{userId}/settings/delegates/{delegateEmail}`.
    /// - Remark: Generated from `#/paths//gmail/v1/users/{userId}/settings/delegates/{delegateEmail}/get(gmail.users.settings.delegates.get)`.
    public func gmail_users_settings_delegates_get(_ input: Operations.Gmail_users_settings_delegates_get.Input) async throws -> Operations.Gmail_users_settings_delegates_get.Output {
        try await client.send(
            input: input,
            forOperation: Operations.Gmail_users_settings_delegates_get.id,
            serializer: { input in
                let path = try converter.renderedPath(
                    template: "/gmail/v1/users/{}/settings/delegates/{}",
                    parameters: [
                        input.path.userId,
                        input.path.delegateEmail
                    ]
                )
                var request: HTTPTypes.HTTPRequest = .init(
                    soar_path: path,
                    method: .get
                )
                suppressMutabilityWarning(&request)
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "$.xgafv",
                    value: input.query._dollar__xgafv
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "access_token",
                    value: input.query.accessToken
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "alt",
                    value: input.query.alt
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "callback",
                    value: input.query.callback
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "fields",
                    value: input.query.fields
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "key",
                    value: input.query.key
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "oauth_token",
                    value: input.query.oauthToken
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "prettyPrint",
                    value: input.query.prettyPrint
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "quotaUser",
                    value: input.query.quotaUser
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "upload_protocol",
                    value: input.query.uploadProtocol
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "uploadType",
                    value: input.query.uploadType
                )
                converter.setAcceptHeader(
                    in: &request.headerFields,
                    contentTypes: input.headers.accept
                )
                return (request, nil)
            },
            deserializer: { response, responseBody in
                switch response.status.code {
                case 200:
                    let contentType = converter.extractContentTypeIfPresent(in: response.headerFields)
                    let body: Operations.Gmail_users_settings_delegates_get.Output.Ok.Body
                    let chosenContentType = try converter.bestContentType(
                        received: contentType,
                        options: [
                            "application/json"
                        ]
                    )
                    switch chosenContentType {
                    case "application/json":
                        body = try await converter.getResponseBodyAsJSON(
                            Components.Schemas.Delegate.self,
                            from: responseBody,
                            transforming: { value in
                                .json(value)
                            }
                        )
                    default:
                        preconditionFailure("bestContentType chose an invalid content type.")
                    }
                    return .ok(.init(body: body))
                default:
                    return .undocumented(
                        statusCode: response.status.code,
                        .init(
                            headerFields: response.headerFields,
                            body: responseBody
                        )
                    )
                }
            }
        )
    }
    /// Removes the specified delegate (which can be of any verification status), and revokes any verification that may have been required for using it. Note that a delegate user must be referred to by their primary email address, and not an email alias. This method is only available to service account clients that have been delegated domain-wide authority.
    ///
    /// - Remark: HTTP `DELETE /gmail/v1/users/{userId}/settings/delegates/{delegateEmail}`.
    /// - Remark: Generated from `#/paths//gmail/v1/users/{userId}/settings/delegates/{delegateEmail}/delete(gmail.users.settings.delegates.delete)`.
    public func gmail_users_settings_delegates_delete(_ input: Operations.Gmail_users_settings_delegates_delete.Input) async throws -> Operations.Gmail_users_settings_delegates_delete.Output {
        try await client.send(
            input: input,
            forOperation: Operations.Gmail_users_settings_delegates_delete.id,
            serializer: { input in
                let path = try converter.renderedPath(
                    template: "/gmail/v1/users/{}/settings/delegates/{}",
                    parameters: [
                        input.path.userId,
                        input.path.delegateEmail
                    ]
                )
                var request: HTTPTypes.HTTPRequest = .init(
                    soar_path: path,
                    method: .delete
                )
                suppressMutabilityWarning(&request)
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "$.xgafv",
                    value: input.query._dollar__xgafv
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "access_token",
                    value: input.query.accessToken
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "alt",
                    value: input.query.alt
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "callback",
                    value: input.query.callback
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "fields",
                    value: input.query.fields
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "key",
                    value: input.query.key
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "oauth_token",
                    value: input.query.oauthToken
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "prettyPrint",
                    value: input.query.prettyPrint
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "quotaUser",
                    value: input.query.quotaUser
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "upload_protocol",
                    value: input.query.uploadProtocol
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "uploadType",
                    value: input.query.uploadType
                )
                return (request, nil)
            },
            deserializer: { response, responseBody in
                switch response.status.code {
                case 200:
                    return .ok(.init())
                default:
                    return .undocumented(
                        statusCode: response.status.code,
                        .init(
                            headerFields: response.headerFields,
                            body: responseBody
                        )
                    )
                }
            }
        )
    }
    /// Lists the message filters of a Gmail user.
    ///
    /// - Remark: HTTP `GET /gmail/v1/users/{userId}/settings/filters`.
    /// - Remark: Generated from `#/paths//gmail/v1/users/{userId}/settings/filters/get(gmail.users.settings.filters.list)`.
    public func gmail_users_settings_filters_list(_ input: Operations.Gmail_users_settings_filters_list.Input) async throws -> Operations.Gmail_users_settings_filters_list.Output {
        try await client.send(
            input: input,
            forOperation: Operations.Gmail_users_settings_filters_list.id,
            serializer: { input in
                let path = try converter.renderedPath(
                    template: "/gmail/v1/users/{}/settings/filters",
                    parameters: [
                        input.path.userId
                    ]
                )
                var request: HTTPTypes.HTTPRequest = .init(
                    soar_path: path,
                    method: .get
                )
                suppressMutabilityWarning(&request)
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "$.xgafv",
                    value: input.query._dollar__xgafv
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "access_token",
                    value: input.query.accessToken
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "alt",
                    value: input.query.alt
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "callback",
                    value: input.query.callback
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "fields",
                    value: input.query.fields
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "key",
                    value: input.query.key
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "oauth_token",
                    value: input.query.oauthToken
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "prettyPrint",
                    value: input.query.prettyPrint
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "quotaUser",
                    value: input.query.quotaUser
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "upload_protocol",
                    value: input.query.uploadProtocol
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "uploadType",
                    value: input.query.uploadType
                )
                converter.setAcceptHeader(
                    in: &request.headerFields,
                    contentTypes: input.headers.accept
                )
                return (request, nil)
            },
            deserializer: { response, responseBody in
                switch response.status.code {
                case 200:
                    let contentType = converter.extractContentTypeIfPresent(in: response.headerFields)
                    let body: Operations.Gmail_users_settings_filters_list.Output.Ok.Body
                    let chosenContentType = try converter.bestContentType(
                        received: contentType,
                        options: [
                            "application/json"
                        ]
                    )
                    switch chosenContentType {
                    case "application/json":
                        body = try await converter.getResponseBodyAsJSON(
                            Components.Schemas.ListFiltersResponse.self,
                            from: responseBody,
                            transforming: { value in
                                .json(value)
                            }
                        )
                    default:
                        preconditionFailure("bestContentType chose an invalid content type.")
                    }
                    return .ok(.init(body: body))
                default:
                    return .undocumented(
                        statusCode: response.status.code,
                        .init(
                            headerFields: response.headerFields,
                            body: responseBody
                        )
                    )
                }
            }
        )
    }
    /// Creates a filter. Note: you can only create a maximum of 1,000 filters.
    ///
    /// - Remark: HTTP `POST /gmail/v1/users/{userId}/settings/filters`.
    /// - Remark: Generated from `#/paths//gmail/v1/users/{userId}/settings/filters/post(gmail.users.settings.filters.create)`.
    public func gmail_users_settings_filters_create(_ input: Operations.Gmail_users_settings_filters_create.Input) async throws -> Operations.Gmail_users_settings_filters_create.Output {
        try await client.send(
            input: input,
            forOperation: Operations.Gmail_users_settings_filters_create.id,
            serializer: { input in
                let path = try converter.renderedPath(
                    template: "/gmail/v1/users/{}/settings/filters",
                    parameters: [
                        input.path.userId
                    ]
                )
                var request: HTTPTypes.HTTPRequest = .init(
                    soar_path: path,
                    method: .post
                )
                suppressMutabilityWarning(&request)
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "$.xgafv",
                    value: input.query._dollar__xgafv
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "access_token",
                    value: input.query.accessToken
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "alt",
                    value: input.query.alt
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "callback",
                    value: input.query.callback
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "fields",
                    value: input.query.fields
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "key",
                    value: input.query.key
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "oauth_token",
                    value: input.query.oauthToken
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "prettyPrint",
                    value: input.query.prettyPrint
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "quotaUser",
                    value: input.query.quotaUser
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "upload_protocol",
                    value: input.query.uploadProtocol
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "uploadType",
                    value: input.query.uploadType
                )
                converter.setAcceptHeader(
                    in: &request.headerFields,
                    contentTypes: input.headers.accept
                )
                let body: OpenAPIRuntime.HTTPBody?
                switch input.body {
                case .none:
                    body = nil
                case let .json(value):
                    body = try converter.setOptionalRequestBodyAsJSON(
                        value,
                        headerFields: &request.headerFields,
                        contentType: "application/json; charset=utf-8"
                    )
                }
                return (request, body)
            },
            deserializer: { response, responseBody in
                switch response.status.code {
                case 200:
                    let contentType = converter.extractContentTypeIfPresent(in: response.headerFields)
                    let body: Operations.Gmail_users_settings_filters_create.Output.Ok.Body
                    let chosenContentType = try converter.bestContentType(
                        received: contentType,
                        options: [
                            "application/json"
                        ]
                    )
                    switch chosenContentType {
                    case "application/json":
                        body = try await converter.getResponseBodyAsJSON(
                            Components.Schemas.Filter.self,
                            from: responseBody,
                            transforming: { value in
                                .json(value)
                            }
                        )
                    default:
                        preconditionFailure("bestContentType chose an invalid content type.")
                    }
                    return .ok(.init(body: body))
                default:
                    return .undocumented(
                        statusCode: response.status.code,
                        .init(
                            headerFields: response.headerFields,
                            body: responseBody
                        )
                    )
                }
            }
        )
    }
    /// Gets a filter.
    ///
    /// - Remark: HTTP `GET /gmail/v1/users/{userId}/settings/filters/{id}`.
    /// - Remark: Generated from `#/paths//gmail/v1/users/{userId}/settings/filters/{id}/get(gmail.users.settings.filters.get)`.
    public func gmail_users_settings_filters_get(_ input: Operations.Gmail_users_settings_filters_get.Input) async throws -> Operations.Gmail_users_settings_filters_get.Output {
        try await client.send(
            input: input,
            forOperation: Operations.Gmail_users_settings_filters_get.id,
            serializer: { input in
                let path = try converter.renderedPath(
                    template: "/gmail/v1/users/{}/settings/filters/{}",
                    parameters: [
                        input.path.userId,
                        input.path.id
                    ]
                )
                var request: HTTPTypes.HTTPRequest = .init(
                    soar_path: path,
                    method: .get
                )
                suppressMutabilityWarning(&request)
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "$.xgafv",
                    value: input.query._dollar__xgafv
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "access_token",
                    value: input.query.accessToken
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "alt",
                    value: input.query.alt
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "callback",
                    value: input.query.callback
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "fields",
                    value: input.query.fields
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "key",
                    value: input.query.key
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "oauth_token",
                    value: input.query.oauthToken
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "prettyPrint",
                    value: input.query.prettyPrint
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "quotaUser",
                    value: input.query.quotaUser
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "upload_protocol",
                    value: input.query.uploadProtocol
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "uploadType",
                    value: input.query.uploadType
                )
                converter.setAcceptHeader(
                    in: &request.headerFields,
                    contentTypes: input.headers.accept
                )
                return (request, nil)
            },
            deserializer: { response, responseBody in
                switch response.status.code {
                case 200:
                    let contentType = converter.extractContentTypeIfPresent(in: response.headerFields)
                    let body: Operations.Gmail_users_settings_filters_get.Output.Ok.Body
                    let chosenContentType = try converter.bestContentType(
                        received: contentType,
                        options: [
                            "application/json"
                        ]
                    )
                    switch chosenContentType {
                    case "application/json":
                        body = try await converter.getResponseBodyAsJSON(
                            Components.Schemas.Filter.self,
                            from: responseBody,
                            transforming: { value in
                                .json(value)
                            }
                        )
                    default:
                        preconditionFailure("bestContentType chose an invalid content type.")
                    }
                    return .ok(.init(body: body))
                default:
                    return .undocumented(
                        statusCode: response.status.code,
                        .init(
                            headerFields: response.headerFields,
                            body: responseBody
                        )
                    )
                }
            }
        )
    }
    /// Immediately and permanently deletes the specified filter.
    ///
    /// - Remark: HTTP `DELETE /gmail/v1/users/{userId}/settings/filters/{id}`.
    /// - Remark: Generated from `#/paths//gmail/v1/users/{userId}/settings/filters/{id}/delete(gmail.users.settings.filters.delete)`.
    public func gmail_users_settings_filters_delete(_ input: Operations.Gmail_users_settings_filters_delete.Input) async throws -> Operations.Gmail_users_settings_filters_delete.Output {
        try await client.send(
            input: input,
            forOperation: Operations.Gmail_users_settings_filters_delete.id,
            serializer: { input in
                let path = try converter.renderedPath(
                    template: "/gmail/v1/users/{}/settings/filters/{}",
                    parameters: [
                        input.path.userId,
                        input.path.id
                    ]
                )
                var request: HTTPTypes.HTTPRequest = .init(
                    soar_path: path,
                    method: .delete
                )
                suppressMutabilityWarning(&request)
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "$.xgafv",
                    value: input.query._dollar__xgafv
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "access_token",
                    value: input.query.accessToken
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "alt",
                    value: input.query.alt
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "callback",
                    value: input.query.callback
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "fields",
                    value: input.query.fields
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "key",
                    value: input.query.key
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "oauth_token",
                    value: input.query.oauthToken
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "prettyPrint",
                    value: input.query.prettyPrint
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "quotaUser",
                    value: input.query.quotaUser
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "upload_protocol",
                    value: input.query.uploadProtocol
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "uploadType",
                    value: input.query.uploadType
                )
                return (request, nil)
            },
            deserializer: { response, responseBody in
                switch response.status.code {
                case 200:
                    return .ok(.init())
                default:
                    return .undocumented(
                        statusCode: response.status.code,
                        .init(
                            headerFields: response.headerFields,
                            body: responseBody
                        )
                    )
                }
            }
        )
    }
    /// Lists the forwarding addresses for the specified account.
    ///
    /// - Remark: HTTP `GET /gmail/v1/users/{userId}/settings/forwardingAddresses`.
    /// - Remark: Generated from `#/paths//gmail/v1/users/{userId}/settings/forwardingAddresses/get(gmail.users.settings.forwardingAddresses.list)`.
    public func gmail_users_settings_forwardingAddresses_list(_ input: Operations.Gmail_users_settings_forwardingAddresses_list.Input) async throws -> Operations.Gmail_users_settings_forwardingAddresses_list.Output {
        try await client.send(
            input: input,
            forOperation: Operations.Gmail_users_settings_forwardingAddresses_list.id,
            serializer: { input in
                let path = try converter.renderedPath(
                    template: "/gmail/v1/users/{}/settings/forwardingAddresses",
                    parameters: [
                        input.path.userId
                    ]
                )
                var request: HTTPTypes.HTTPRequest = .init(
                    soar_path: path,
                    method: .get
                )
                suppressMutabilityWarning(&request)
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "$.xgafv",
                    value: input.query._dollar__xgafv
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "access_token",
                    value: input.query.accessToken
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "alt",
                    value: input.query.alt
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "callback",
                    value: input.query.callback
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "fields",
                    value: input.query.fields
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "key",
                    value: input.query.key
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "oauth_token",
                    value: input.query.oauthToken
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "prettyPrint",
                    value: input.query.prettyPrint
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "quotaUser",
                    value: input.query.quotaUser
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "upload_protocol",
                    value: input.query.uploadProtocol
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "uploadType",
                    value: input.query.uploadType
                )
                converter.setAcceptHeader(
                    in: &request.headerFields,
                    contentTypes: input.headers.accept
                )
                return (request, nil)
            },
            deserializer: { response, responseBody in
                switch response.status.code {
                case 200:
                    let contentType = converter.extractContentTypeIfPresent(in: response.headerFields)
                    let body: Operations.Gmail_users_settings_forwardingAddresses_list.Output.Ok.Body
                    let chosenContentType = try converter.bestContentType(
                        received: contentType,
                        options: [
                            "application/json"
                        ]
                    )
                    switch chosenContentType {
                    case "application/json":
                        body = try await converter.getResponseBodyAsJSON(
                            Components.Schemas.ListForwardingAddressesResponse.self,
                            from: responseBody,
                            transforming: { value in
                                .json(value)
                            }
                        )
                    default:
                        preconditionFailure("bestContentType chose an invalid content type.")
                    }
                    return .ok(.init(body: body))
                default:
                    return .undocumented(
                        statusCode: response.status.code,
                        .init(
                            headerFields: response.headerFields,
                            body: responseBody
                        )
                    )
                }
            }
        )
    }
    /// Creates a forwarding address. If ownership verification is required, a message will be sent to the recipient and the resource's verification status will be set to `pending`; otherwise, the resource will be created with verification status set to `accepted`. This method is only available to service account clients that have been delegated domain-wide authority.
    ///
    /// - Remark: HTTP `POST /gmail/v1/users/{userId}/settings/forwardingAddresses`.
    /// - Remark: Generated from `#/paths//gmail/v1/users/{userId}/settings/forwardingAddresses/post(gmail.users.settings.forwardingAddresses.create)`.
    public func gmail_users_settings_forwardingAddresses_create(_ input: Operations.Gmail_users_settings_forwardingAddresses_create.Input) async throws -> Operations.Gmail_users_settings_forwardingAddresses_create.Output {
        try await client.send(
            input: input,
            forOperation: Operations.Gmail_users_settings_forwardingAddresses_create.id,
            serializer: { input in
                let path = try converter.renderedPath(
                    template: "/gmail/v1/users/{}/settings/forwardingAddresses",
                    parameters: [
                        input.path.userId
                    ]
                )
                var request: HTTPTypes.HTTPRequest = .init(
                    soar_path: path,
                    method: .post
                )
                suppressMutabilityWarning(&request)
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "$.xgafv",
                    value: input.query._dollar__xgafv
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "access_token",
                    value: input.query.accessToken
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "alt",
                    value: input.query.alt
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "callback",
                    value: input.query.callback
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "fields",
                    value: input.query.fields
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "key",
                    value: input.query.key
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "oauth_token",
                    value: input.query.oauthToken
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "prettyPrint",
                    value: input.query.prettyPrint
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "quotaUser",
                    value: input.query.quotaUser
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "upload_protocol",
                    value: input.query.uploadProtocol
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "uploadType",
                    value: input.query.uploadType
                )
                converter.setAcceptHeader(
                    in: &request.headerFields,
                    contentTypes: input.headers.accept
                )
                let body: OpenAPIRuntime.HTTPBody?
                switch input.body {
                case .none:
                    body = nil
                case let .json(value):
                    body = try converter.setOptionalRequestBodyAsJSON(
                        value,
                        headerFields: &request.headerFields,
                        contentType: "application/json; charset=utf-8"
                    )
                }
                return (request, body)
            },
            deserializer: { response, responseBody in
                switch response.status.code {
                case 200:
                    let contentType = converter.extractContentTypeIfPresent(in: response.headerFields)
                    let body: Operations.Gmail_users_settings_forwardingAddresses_create.Output.Ok.Body
                    let chosenContentType = try converter.bestContentType(
                        received: contentType,
                        options: [
                            "application/json"
                        ]
                    )
                    switch chosenContentType {
                    case "application/json":
                        body = try await converter.getResponseBodyAsJSON(
                            Components.Schemas.ForwardingAddress.self,
                            from: responseBody,
                            transforming: { value in
                                .json(value)
                            }
                        )
                    default:
                        preconditionFailure("bestContentType chose an invalid content type.")
                    }
                    return .ok(.init(body: body))
                default:
                    return .undocumented(
                        statusCode: response.status.code,
                        .init(
                            headerFields: response.headerFields,
                            body: responseBody
                        )
                    )
                }
            }
        )
    }
    /// Gets the specified forwarding address.
    ///
    /// - Remark: HTTP `GET /gmail/v1/users/{userId}/settings/forwardingAddresses/{forwardingEmail}`.
    /// - Remark: Generated from `#/paths//gmail/v1/users/{userId}/settings/forwardingAddresses/{forwardingEmail}/get(gmail.users.settings.forwardingAddresses.get)`.
    public func gmail_users_settings_forwardingAddresses_get(_ input: Operations.Gmail_users_settings_forwardingAddresses_get.Input) async throws -> Operations.Gmail_users_settings_forwardingAddresses_get.Output {
        try await client.send(
            input: input,
            forOperation: Operations.Gmail_users_settings_forwardingAddresses_get.id,
            serializer: { input in
                let path = try converter.renderedPath(
                    template: "/gmail/v1/users/{}/settings/forwardingAddresses/{}",
                    parameters: [
                        input.path.userId,
                        input.path.forwardingEmail
                    ]
                )
                var request: HTTPTypes.HTTPRequest = .init(
                    soar_path: path,
                    method: .get
                )
                suppressMutabilityWarning(&request)
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "$.xgafv",
                    value: input.query._dollar__xgafv
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "access_token",
                    value: input.query.accessToken
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "alt",
                    value: input.query.alt
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "callback",
                    value: input.query.callback
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "fields",
                    value: input.query.fields
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "key",
                    value: input.query.key
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "oauth_token",
                    value: input.query.oauthToken
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "prettyPrint",
                    value: input.query.prettyPrint
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "quotaUser",
                    value: input.query.quotaUser
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "upload_protocol",
                    value: input.query.uploadProtocol
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "uploadType",
                    value: input.query.uploadType
                )
                converter.setAcceptHeader(
                    in: &request.headerFields,
                    contentTypes: input.headers.accept
                )
                return (request, nil)
            },
            deserializer: { response, responseBody in
                switch response.status.code {
                case 200:
                    let contentType = converter.extractContentTypeIfPresent(in: response.headerFields)
                    let body: Operations.Gmail_users_settings_forwardingAddresses_get.Output.Ok.Body
                    let chosenContentType = try converter.bestContentType(
                        received: contentType,
                        options: [
                            "application/json"
                        ]
                    )
                    switch chosenContentType {
                    case "application/json":
                        body = try await converter.getResponseBodyAsJSON(
                            Components.Schemas.ForwardingAddress.self,
                            from: responseBody,
                            transforming: { value in
                                .json(value)
                            }
                        )
                    default:
                        preconditionFailure("bestContentType chose an invalid content type.")
                    }
                    return .ok(.init(body: body))
                default:
                    return .undocumented(
                        statusCode: response.status.code,
                        .init(
                            headerFields: response.headerFields,
                            body: responseBody
                        )
                    )
                }
            }
        )
    }
    /// Deletes the specified forwarding address and revokes any verification that may have been required. This method is only available to service account clients that have been delegated domain-wide authority.
    ///
    /// - Remark: HTTP `DELETE /gmail/v1/users/{userId}/settings/forwardingAddresses/{forwardingEmail}`.
    /// - Remark: Generated from `#/paths//gmail/v1/users/{userId}/settings/forwardingAddresses/{forwardingEmail}/delete(gmail.users.settings.forwardingAddresses.delete)`.
    public func gmail_users_settings_forwardingAddresses_delete(_ input: Operations.Gmail_users_settings_forwardingAddresses_delete.Input) async throws -> Operations.Gmail_users_settings_forwardingAddresses_delete.Output {
        try await client.send(
            input: input,
            forOperation: Operations.Gmail_users_settings_forwardingAddresses_delete.id,
            serializer: { input in
                let path = try converter.renderedPath(
                    template: "/gmail/v1/users/{}/settings/forwardingAddresses/{}",
                    parameters: [
                        input.path.userId,
                        input.path.forwardingEmail
                    ]
                )
                var request: HTTPTypes.HTTPRequest = .init(
                    soar_path: path,
                    method: .delete
                )
                suppressMutabilityWarning(&request)
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "$.xgafv",
                    value: input.query._dollar__xgafv
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "access_token",
                    value: input.query.accessToken
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "alt",
                    value: input.query.alt
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "callback",
                    value: input.query.callback
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "fields",
                    value: input.query.fields
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "key",
                    value: input.query.key
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "oauth_token",
                    value: input.query.oauthToken
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "prettyPrint",
                    value: input.query.prettyPrint
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "quotaUser",
                    value: input.query.quotaUser
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "upload_protocol",
                    value: input.query.uploadProtocol
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "uploadType",
                    value: input.query.uploadType
                )
                return (request, nil)
            },
            deserializer: { response, responseBody in
                switch response.status.code {
                case 200:
                    return .ok(.init())
                default:
                    return .undocumented(
                        statusCode: response.status.code,
                        .init(
                            headerFields: response.headerFields,
                            body: responseBody
                        )
                    )
                }
            }
        )
    }
    /// Gets IMAP settings.
    ///
    /// - Remark: HTTP `GET /gmail/v1/users/{userId}/settings/imap`.
    /// - Remark: Generated from `#/paths//gmail/v1/users/{userId}/settings/imap/get(gmail.users.settings.getImap)`.
    public func gmail_users_settings_getImap(_ input: Operations.Gmail_users_settings_getImap.Input) async throws -> Operations.Gmail_users_settings_getImap.Output {
        try await client.send(
            input: input,
            forOperation: Operations.Gmail_users_settings_getImap.id,
            serializer: { input in
                let path = try converter.renderedPath(
                    template: "/gmail/v1/users/{}/settings/imap",
                    parameters: [
                        input.path.userId
                    ]
                )
                var request: HTTPTypes.HTTPRequest = .init(
                    soar_path: path,
                    method: .get
                )
                suppressMutabilityWarning(&request)
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "$.xgafv",
                    value: input.query._dollar__xgafv
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "access_token",
                    value: input.query.accessToken
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "alt",
                    value: input.query.alt
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "callback",
                    value: input.query.callback
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "fields",
                    value: input.query.fields
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "key",
                    value: input.query.key
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "oauth_token",
                    value: input.query.oauthToken
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "prettyPrint",
                    value: input.query.prettyPrint
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "quotaUser",
                    value: input.query.quotaUser
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "upload_protocol",
                    value: input.query.uploadProtocol
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "uploadType",
                    value: input.query.uploadType
                )
                converter.setAcceptHeader(
                    in: &request.headerFields,
                    contentTypes: input.headers.accept
                )
                return (request, nil)
            },
            deserializer: { response, responseBody in
                switch response.status.code {
                case 200:
                    let contentType = converter.extractContentTypeIfPresent(in: response.headerFields)
                    let body: Operations.Gmail_users_settings_getImap.Output.Ok.Body
                    let chosenContentType = try converter.bestContentType(
                        received: contentType,
                        options: [
                            "application/json"
                        ]
                    )
                    switch chosenContentType {
                    case "application/json":
                        body = try await converter.getResponseBodyAsJSON(
                            Components.Schemas.ImapSettings.self,
                            from: responseBody,
                            transforming: { value in
                                .json(value)
                            }
                        )
                    default:
                        preconditionFailure("bestContentType chose an invalid content type.")
                    }
                    return .ok(.init(body: body))
                default:
                    return .undocumented(
                        statusCode: response.status.code,
                        .init(
                            headerFields: response.headerFields,
                            body: responseBody
                        )
                    )
                }
            }
        )
    }
    /// Updates IMAP settings.
    ///
    /// - Remark: HTTP `PUT /gmail/v1/users/{userId}/settings/imap`.
    /// - Remark: Generated from `#/paths//gmail/v1/users/{userId}/settings/imap/put(gmail.users.settings.updateImap)`.
    public func gmail_users_settings_updateImap(_ input: Operations.Gmail_users_settings_updateImap.Input) async throws -> Operations.Gmail_users_settings_updateImap.Output {
        try await client.send(
            input: input,
            forOperation: Operations.Gmail_users_settings_updateImap.id,
            serializer: { input in
                let path = try converter.renderedPath(
                    template: "/gmail/v1/users/{}/settings/imap",
                    parameters: [
                        input.path.userId
                    ]
                )
                var request: HTTPTypes.HTTPRequest = .init(
                    soar_path: path,
                    method: .put
                )
                suppressMutabilityWarning(&request)
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "$.xgafv",
                    value: input.query._dollar__xgafv
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "access_token",
                    value: input.query.accessToken
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "alt",
                    value: input.query.alt
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "callback",
                    value: input.query.callback
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "fields",
                    value: input.query.fields
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "key",
                    value: input.query.key
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "oauth_token",
                    value: input.query.oauthToken
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "prettyPrint",
                    value: input.query.prettyPrint
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "quotaUser",
                    value: input.query.quotaUser
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "upload_protocol",
                    value: input.query.uploadProtocol
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "uploadType",
                    value: input.query.uploadType
                )
                converter.setAcceptHeader(
                    in: &request.headerFields,
                    contentTypes: input.headers.accept
                )
                let body: OpenAPIRuntime.HTTPBody?
                switch input.body {
                case .none:
                    body = nil
                case let .json(value):
                    body = try converter.setOptionalRequestBodyAsJSON(
                        value,
                        headerFields: &request.headerFields,
                        contentType: "application/json; charset=utf-8"
                    )
                }
                return (request, body)
            },
            deserializer: { response, responseBody in
                switch response.status.code {
                case 200:
                    let contentType = converter.extractContentTypeIfPresent(in: response.headerFields)
                    let body: Operations.Gmail_users_settings_updateImap.Output.Ok.Body
                    let chosenContentType = try converter.bestContentType(
                        received: contentType,
                        options: [
                            "application/json"
                        ]
                    )
                    switch chosenContentType {
                    case "application/json":
                        body = try await converter.getResponseBodyAsJSON(
                            Components.Schemas.ImapSettings.self,
                            from: responseBody,
                            transforming: { value in
                                .json(value)
                            }
                        )
                    default:
                        preconditionFailure("bestContentType chose an invalid content type.")
                    }
                    return .ok(.init(body: body))
                default:
                    return .undocumented(
                        statusCode: response.status.code,
                        .init(
                            headerFields: response.headerFields,
                            body: responseBody
                        )
                    )
                }
            }
        )
    }
    /// Gets language settings.
    ///
    /// - Remark: HTTP `GET /gmail/v1/users/{userId}/settings/language`.
    /// - Remark: Generated from `#/paths//gmail/v1/users/{userId}/settings/language/get(gmail.users.settings.getLanguage)`.
    public func gmail_users_settings_getLanguage(_ input: Operations.Gmail_users_settings_getLanguage.Input) async throws -> Operations.Gmail_users_settings_getLanguage.Output {
        try await client.send(
            input: input,
            forOperation: Operations.Gmail_users_settings_getLanguage.id,
            serializer: { input in
                let path = try converter.renderedPath(
                    template: "/gmail/v1/users/{}/settings/language",
                    parameters: [
                        input.path.userId
                    ]
                )
                var request: HTTPTypes.HTTPRequest = .init(
                    soar_path: path,
                    method: .get
                )
                suppressMutabilityWarning(&request)
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "$.xgafv",
                    value: input.query._dollar__xgafv
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "access_token",
                    value: input.query.accessToken
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "alt",
                    value: input.query.alt
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "callback",
                    value: input.query.callback
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "fields",
                    value: input.query.fields
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "key",
                    value: input.query.key
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "oauth_token",
                    value: input.query.oauthToken
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "prettyPrint",
                    value: input.query.prettyPrint
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "quotaUser",
                    value: input.query.quotaUser
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "upload_protocol",
                    value: input.query.uploadProtocol
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "uploadType",
                    value: input.query.uploadType
                )
                converter.setAcceptHeader(
                    in: &request.headerFields,
                    contentTypes: input.headers.accept
                )
                return (request, nil)
            },
            deserializer: { response, responseBody in
                switch response.status.code {
                case 200:
                    let contentType = converter.extractContentTypeIfPresent(in: response.headerFields)
                    let body: Operations.Gmail_users_settings_getLanguage.Output.Ok.Body
                    let chosenContentType = try converter.bestContentType(
                        received: contentType,
                        options: [
                            "application/json"
                        ]
                    )
                    switch chosenContentType {
                    case "application/json":
                        body = try await converter.getResponseBodyAsJSON(
                            Components.Schemas.LanguageSettings.self,
                            from: responseBody,
                            transforming: { value in
                                .json(value)
                            }
                        )
                    default:
                        preconditionFailure("bestContentType chose an invalid content type.")
                    }
                    return .ok(.init(body: body))
                default:
                    return .undocumented(
                        statusCode: response.status.code,
                        .init(
                            headerFields: response.headerFields,
                            body: responseBody
                        )
                    )
                }
            }
        )
    }
    /// Updates language settings. If successful, the return object contains the `displayLanguage` that was saved for the user, which may differ from the value passed into the request. This is because the requested `displayLanguage` may not be directly supported by Gmail but have a close variant that is, and so the variant may be chosen and saved instead.
    ///
    /// - Remark: HTTP `PUT /gmail/v1/users/{userId}/settings/language`.
    /// - Remark: Generated from `#/paths//gmail/v1/users/{userId}/settings/language/put(gmail.users.settings.updateLanguage)`.
    public func gmail_users_settings_updateLanguage(_ input: Operations.Gmail_users_settings_updateLanguage.Input) async throws -> Operations.Gmail_users_settings_updateLanguage.Output {
        try await client.send(
            input: input,
            forOperation: Operations.Gmail_users_settings_updateLanguage.id,
            serializer: { input in
                let path = try converter.renderedPath(
                    template: "/gmail/v1/users/{}/settings/language",
                    parameters: [
                        input.path.userId
                    ]
                )
                var request: HTTPTypes.HTTPRequest = .init(
                    soar_path: path,
                    method: .put
                )
                suppressMutabilityWarning(&request)
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "$.xgafv",
                    value: input.query._dollar__xgafv
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "access_token",
                    value: input.query.accessToken
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "alt",
                    value: input.query.alt
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "callback",
                    value: input.query.callback
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "fields",
                    value: input.query.fields
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "key",
                    value: input.query.key
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "oauth_token",
                    value: input.query.oauthToken
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "prettyPrint",
                    value: input.query.prettyPrint
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "quotaUser",
                    value: input.query.quotaUser
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "upload_protocol",
                    value: input.query.uploadProtocol
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "uploadType",
                    value: input.query.uploadType
                )
                converter.setAcceptHeader(
                    in: &request.headerFields,
                    contentTypes: input.headers.accept
                )
                let body: OpenAPIRuntime.HTTPBody?
                switch input.body {
                case .none:
                    body = nil
                case let .json(value):
                    body = try converter.setOptionalRequestBodyAsJSON(
                        value,
                        headerFields: &request.headerFields,
                        contentType: "application/json; charset=utf-8"
                    )
                }
                return (request, body)
            },
            deserializer: { response, responseBody in
                switch response.status.code {
                case 200:
                    let contentType = converter.extractContentTypeIfPresent(in: response.headerFields)
                    let body: Operations.Gmail_users_settings_updateLanguage.Output.Ok.Body
                    let chosenContentType = try converter.bestContentType(
                        received: contentType,
                        options: [
                            "application/json"
                        ]
                    )
                    switch chosenContentType {
                    case "application/json":
                        body = try await converter.getResponseBodyAsJSON(
                            Components.Schemas.LanguageSettings.self,
                            from: responseBody,
                            transforming: { value in
                                .json(value)
                            }
                        )
                    default:
                        preconditionFailure("bestContentType chose an invalid content type.")
                    }
                    return .ok(.init(body: body))
                default:
                    return .undocumented(
                        statusCode: response.status.code,
                        .init(
                            headerFields: response.headerFields,
                            body: responseBody
                        )
                    )
                }
            }
        )
    }
    /// Gets POP settings.
    ///
    /// - Remark: HTTP `GET /gmail/v1/users/{userId}/settings/pop`.
    /// - Remark: Generated from `#/paths//gmail/v1/users/{userId}/settings/pop/get(gmail.users.settings.getPop)`.
    public func gmail_users_settings_getPop(_ input: Operations.Gmail_users_settings_getPop.Input) async throws -> Operations.Gmail_users_settings_getPop.Output {
        try await client.send(
            input: input,
            forOperation: Operations.Gmail_users_settings_getPop.id,
            serializer: { input in
                let path = try converter.renderedPath(
                    template: "/gmail/v1/users/{}/settings/pop",
                    parameters: [
                        input.path.userId
                    ]
                )
                var request: HTTPTypes.HTTPRequest = .init(
                    soar_path: path,
                    method: .get
                )
                suppressMutabilityWarning(&request)
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "$.xgafv",
                    value: input.query._dollar__xgafv
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "access_token",
                    value: input.query.accessToken
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "alt",
                    value: input.query.alt
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "callback",
                    value: input.query.callback
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "fields",
                    value: input.query.fields
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "key",
                    value: input.query.key
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "oauth_token",
                    value: input.query.oauthToken
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "prettyPrint",
                    value: input.query.prettyPrint
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "quotaUser",
                    value: input.query.quotaUser
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "upload_protocol",
                    value: input.query.uploadProtocol
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "uploadType",
                    value: input.query.uploadType
                )
                converter.setAcceptHeader(
                    in: &request.headerFields,
                    contentTypes: input.headers.accept
                )
                return (request, nil)
            },
            deserializer: { response, responseBody in
                switch response.status.code {
                case 200:
                    let contentType = converter.extractContentTypeIfPresent(in: response.headerFields)
                    let body: Operations.Gmail_users_settings_getPop.Output.Ok.Body
                    let chosenContentType = try converter.bestContentType(
                        received: contentType,
                        options: [
                            "application/json"
                        ]
                    )
                    switch chosenContentType {
                    case "application/json":
                        body = try await converter.getResponseBodyAsJSON(
                            Components.Schemas.PopSettings.self,
                            from: responseBody,
                            transforming: { value in
                                .json(value)
                            }
                        )
                    default:
                        preconditionFailure("bestContentType chose an invalid content type.")
                    }
                    return .ok(.init(body: body))
                default:
                    return .undocumented(
                        statusCode: response.status.code,
                        .init(
                            headerFields: response.headerFields,
                            body: responseBody
                        )
                    )
                }
            }
        )
    }
    /// Updates POP settings.
    ///
    /// - Remark: HTTP `PUT /gmail/v1/users/{userId}/settings/pop`.
    /// - Remark: Generated from `#/paths//gmail/v1/users/{userId}/settings/pop/put(gmail.users.settings.updatePop)`.
    public func gmail_users_settings_updatePop(_ input: Operations.Gmail_users_settings_updatePop.Input) async throws -> Operations.Gmail_users_settings_updatePop.Output {
        try await client.send(
            input: input,
            forOperation: Operations.Gmail_users_settings_updatePop.id,
            serializer: { input in
                let path = try converter.renderedPath(
                    template: "/gmail/v1/users/{}/settings/pop",
                    parameters: [
                        input.path.userId
                    ]
                )
                var request: HTTPTypes.HTTPRequest = .init(
                    soar_path: path,
                    method: .put
                )
                suppressMutabilityWarning(&request)
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "$.xgafv",
                    value: input.query._dollar__xgafv
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "access_token",
                    value: input.query.accessToken
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "alt",
                    value: input.query.alt
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "callback",
                    value: input.query.callback
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "fields",
                    value: input.query.fields
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "key",
                    value: input.query.key
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "oauth_token",
                    value: input.query.oauthToken
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "prettyPrint",
                    value: input.query.prettyPrint
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "quotaUser",
                    value: input.query.quotaUser
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "upload_protocol",
                    value: input.query.uploadProtocol
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "uploadType",
                    value: input.query.uploadType
                )
                converter.setAcceptHeader(
                    in: &request.headerFields,
                    contentTypes: input.headers.accept
                )
                let body: OpenAPIRuntime.HTTPBody?
                switch input.body {
                case .none:
                    body = nil
                case let .json(value):
                    body = try converter.setOptionalRequestBodyAsJSON(
                        value,
                        headerFields: &request.headerFields,
                        contentType: "application/json; charset=utf-8"
                    )
                }
                return (request, body)
            },
            deserializer: { response, responseBody in
                switch response.status.code {
                case 200:
                    let contentType = converter.extractContentTypeIfPresent(in: response.headerFields)
                    let body: Operations.Gmail_users_settings_updatePop.Output.Ok.Body
                    let chosenContentType = try converter.bestContentType(
                        received: contentType,
                        options: [
                            "application/json"
                        ]
                    )
                    switch chosenContentType {
                    case "application/json":
                        body = try await converter.getResponseBodyAsJSON(
                            Components.Schemas.PopSettings.self,
                            from: responseBody,
                            transforming: { value in
                                .json(value)
                            }
                        )
                    default:
                        preconditionFailure("bestContentType chose an invalid content type.")
                    }
                    return .ok(.init(body: body))
                default:
                    return .undocumented(
                        statusCode: response.status.code,
                        .init(
                            headerFields: response.headerFields,
                            body: responseBody
                        )
                    )
                }
            }
        )
    }
    /// Lists the send-as aliases for the specified account. The result includes the primary send-as address associated with the account as well as any custom "from" aliases.
    ///
    /// - Remark: HTTP `GET /gmail/v1/users/{userId}/settings/sendAs`.
    /// - Remark: Generated from `#/paths//gmail/v1/users/{userId}/settings/sendAs/get(gmail.users.settings.sendAs.list)`.
    public func gmail_users_settings_sendAs_list(_ input: Operations.Gmail_users_settings_sendAs_list.Input) async throws -> Operations.Gmail_users_settings_sendAs_list.Output {
        try await client.send(
            input: input,
            forOperation: Operations.Gmail_users_settings_sendAs_list.id,
            serializer: { input in
                let path = try converter.renderedPath(
                    template: "/gmail/v1/users/{}/settings/sendAs",
                    parameters: [
                        input.path.userId
                    ]
                )
                var request: HTTPTypes.HTTPRequest = .init(
                    soar_path: path,
                    method: .get
                )
                suppressMutabilityWarning(&request)
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "$.xgafv",
                    value: input.query._dollar__xgafv
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "access_token",
                    value: input.query.accessToken
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "alt",
                    value: input.query.alt
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "callback",
                    value: input.query.callback
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "fields",
                    value: input.query.fields
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "key",
                    value: input.query.key
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "oauth_token",
                    value: input.query.oauthToken
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "prettyPrint",
                    value: input.query.prettyPrint
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "quotaUser",
                    value: input.query.quotaUser
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "upload_protocol",
                    value: input.query.uploadProtocol
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "uploadType",
                    value: input.query.uploadType
                )
                converter.setAcceptHeader(
                    in: &request.headerFields,
                    contentTypes: input.headers.accept
                )
                return (request, nil)
            },
            deserializer: { response, responseBody in
                switch response.status.code {
                case 200:
                    let contentType = converter.extractContentTypeIfPresent(in: response.headerFields)
                    let body: Operations.Gmail_users_settings_sendAs_list.Output.Ok.Body
                    let chosenContentType = try converter.bestContentType(
                        received: contentType,
                        options: [
                            "application/json"
                        ]
                    )
                    switch chosenContentType {
                    case "application/json":
                        body = try await converter.getResponseBodyAsJSON(
                            Components.Schemas.ListSendAsResponse.self,
                            from: responseBody,
                            transforming: { value in
                                .json(value)
                            }
                        )
                    default:
                        preconditionFailure("bestContentType chose an invalid content type.")
                    }
                    return .ok(.init(body: body))
                default:
                    return .undocumented(
                        statusCode: response.status.code,
                        .init(
                            headerFields: response.headerFields,
                            body: responseBody
                        )
                    )
                }
            }
        )
    }
    /// Creates a custom "from" send-as alias. If an SMTP MSA is specified, Gmail will attempt to connect to the SMTP service to validate the configuration before creating the alias. If ownership verification is required for the alias, a message will be sent to the email address and the resource's verification status will be set to `pending`; otherwise, the resource will be created with verification status set to `accepted`. If a signature is provided, Gmail will sanitize the HTML before saving it with the alias. This method is only available to service account clients that have been delegated domain-wide authority.
    ///
    /// - Remark: HTTP `POST /gmail/v1/users/{userId}/settings/sendAs`.
    /// - Remark: Generated from `#/paths//gmail/v1/users/{userId}/settings/sendAs/post(gmail.users.settings.sendAs.create)`.
    public func gmail_users_settings_sendAs_create(_ input: Operations.Gmail_users_settings_sendAs_create.Input) async throws -> Operations.Gmail_users_settings_sendAs_create.Output {
        try await client.send(
            input: input,
            forOperation: Operations.Gmail_users_settings_sendAs_create.id,
            serializer: { input in
                let path = try converter.renderedPath(
                    template: "/gmail/v1/users/{}/settings/sendAs",
                    parameters: [
                        input.path.userId
                    ]
                )
                var request: HTTPTypes.HTTPRequest = .init(
                    soar_path: path,
                    method: .post
                )
                suppressMutabilityWarning(&request)
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "$.xgafv",
                    value: input.query._dollar__xgafv
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "access_token",
                    value: input.query.accessToken
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "alt",
                    value: input.query.alt
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "callback",
                    value: input.query.callback
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "fields",
                    value: input.query.fields
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "key",
                    value: input.query.key
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "oauth_token",
                    value: input.query.oauthToken
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "prettyPrint",
                    value: input.query.prettyPrint
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "quotaUser",
                    value: input.query.quotaUser
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "upload_protocol",
                    value: input.query.uploadProtocol
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "uploadType",
                    value: input.query.uploadType
                )
                converter.setAcceptHeader(
                    in: &request.headerFields,
                    contentTypes: input.headers.accept
                )
                let body: OpenAPIRuntime.HTTPBody?
                switch input.body {
                case .none:
                    body = nil
                case let .json(value):
                    body = try converter.setOptionalRequestBodyAsJSON(
                        value,
                        headerFields: &request.headerFields,
                        contentType: "application/json; charset=utf-8"
                    )
                }
                return (request, body)
            },
            deserializer: { response, responseBody in
                switch response.status.code {
                case 200:
                    let contentType = converter.extractContentTypeIfPresent(in: response.headerFields)
                    let body: Operations.Gmail_users_settings_sendAs_create.Output.Ok.Body
                    let chosenContentType = try converter.bestContentType(
                        received: contentType,
                        options: [
                            "application/json"
                        ]
                    )
                    switch chosenContentType {
                    case "application/json":
                        body = try await converter.getResponseBodyAsJSON(
                            Components.Schemas.SendAs.self,
                            from: responseBody,
                            transforming: { value in
                                .json(value)
                            }
                        )
                    default:
                        preconditionFailure("bestContentType chose an invalid content type.")
                    }
                    return .ok(.init(body: body))
                default:
                    return .undocumented(
                        statusCode: response.status.code,
                        .init(
                            headerFields: response.headerFields,
                            body: responseBody
                        )
                    )
                }
            }
        )
    }
    /// Gets the specified send-as alias. Fails with an HTTP 404 error if the specified address is not a member of the collection.
    ///
    /// - Remark: HTTP `GET /gmail/v1/users/{userId}/settings/sendAs/{sendAsEmail}`.
    /// - Remark: Generated from `#/paths//gmail/v1/users/{userId}/settings/sendAs/{sendAsEmail}/get(gmail.users.settings.sendAs.get)`.
    public func gmail_users_settings_sendAs_get(_ input: Operations.Gmail_users_settings_sendAs_get.Input) async throws -> Operations.Gmail_users_settings_sendAs_get.Output {
        try await client.send(
            input: input,
            forOperation: Operations.Gmail_users_settings_sendAs_get.id,
            serializer: { input in
                let path = try converter.renderedPath(
                    template: "/gmail/v1/users/{}/settings/sendAs/{}",
                    parameters: [
                        input.path.userId,
                        input.path.sendAsEmail
                    ]
                )
                var request: HTTPTypes.HTTPRequest = .init(
                    soar_path: path,
                    method: .get
                )
                suppressMutabilityWarning(&request)
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "$.xgafv",
                    value: input.query._dollar__xgafv
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "access_token",
                    value: input.query.accessToken
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "alt",
                    value: input.query.alt
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "callback",
                    value: input.query.callback
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "fields",
                    value: input.query.fields
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "key",
                    value: input.query.key
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "oauth_token",
                    value: input.query.oauthToken
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "prettyPrint",
                    value: input.query.prettyPrint
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "quotaUser",
                    value: input.query.quotaUser
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "upload_protocol",
                    value: input.query.uploadProtocol
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "uploadType",
                    value: input.query.uploadType
                )
                converter.setAcceptHeader(
                    in: &request.headerFields,
                    contentTypes: input.headers.accept
                )
                return (request, nil)
            },
            deserializer: { response, responseBody in
                switch response.status.code {
                case 200:
                    let contentType = converter.extractContentTypeIfPresent(in: response.headerFields)
                    let body: Operations.Gmail_users_settings_sendAs_get.Output.Ok.Body
                    let chosenContentType = try converter.bestContentType(
                        received: contentType,
                        options: [
                            "application/json"
                        ]
                    )
                    switch chosenContentType {
                    case "application/json":
                        body = try await converter.getResponseBodyAsJSON(
                            Components.Schemas.SendAs.self,
                            from: responseBody,
                            transforming: { value in
                                .json(value)
                            }
                        )
                    default:
                        preconditionFailure("bestContentType chose an invalid content type.")
                    }
                    return .ok(.init(body: body))
                default:
                    return .undocumented(
                        statusCode: response.status.code,
                        .init(
                            headerFields: response.headerFields,
                            body: responseBody
                        )
                    )
                }
            }
        )
    }
    /// Patch the specified send-as alias.
    ///
    /// - Remark: HTTP `PATCH /gmail/v1/users/{userId}/settings/sendAs/{sendAsEmail}`.
    /// - Remark: Generated from `#/paths//gmail/v1/users/{userId}/settings/sendAs/{sendAsEmail}/patch(gmail.users.settings.sendAs.patch)`.
    public func gmail_users_settings_sendAs_patch(_ input: Operations.Gmail_users_settings_sendAs_patch.Input) async throws -> Operations.Gmail_users_settings_sendAs_patch.Output {
        try await client.send(
            input: input,
            forOperation: Operations.Gmail_users_settings_sendAs_patch.id,
            serializer: { input in
                let path = try converter.renderedPath(
                    template: "/gmail/v1/users/{}/settings/sendAs/{}",
                    parameters: [
                        input.path.userId,
                        input.path.sendAsEmail
                    ]
                )
                var request: HTTPTypes.HTTPRequest = .init(
                    soar_path: path,
                    method: .patch
                )
                suppressMutabilityWarning(&request)
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "$.xgafv",
                    value: input.query._dollar__xgafv
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "access_token",
                    value: input.query.accessToken
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "alt",
                    value: input.query.alt
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "callback",
                    value: input.query.callback
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "fields",
                    value: input.query.fields
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "key",
                    value: input.query.key
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "oauth_token",
                    value: input.query.oauthToken
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "prettyPrint",
                    value: input.query.prettyPrint
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "quotaUser",
                    value: input.query.quotaUser
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "upload_protocol",
                    value: input.query.uploadProtocol
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "uploadType",
                    value: input.query.uploadType
                )
                converter.setAcceptHeader(
                    in: &request.headerFields,
                    contentTypes: input.headers.accept
                )
                let body: OpenAPIRuntime.HTTPBody?
                switch input.body {
                case .none:
                    body = nil
                case let .json(value):
                    body = try converter.setOptionalRequestBodyAsJSON(
                        value,
                        headerFields: &request.headerFields,
                        contentType: "application/json; charset=utf-8"
                    )
                }
                return (request, body)
            },
            deserializer: { response, responseBody in
                switch response.status.code {
                case 200:
                    let contentType = converter.extractContentTypeIfPresent(in: response.headerFields)
                    let body: Operations.Gmail_users_settings_sendAs_patch.Output.Ok.Body
                    let chosenContentType = try converter.bestContentType(
                        received: contentType,
                        options: [
                            "application/json"
                        ]
                    )
                    switch chosenContentType {
                    case "application/json":
                        body = try await converter.getResponseBodyAsJSON(
                            Components.Schemas.SendAs.self,
                            from: responseBody,
                            transforming: { value in
                                .json(value)
                            }
                        )
                    default:
                        preconditionFailure("bestContentType chose an invalid content type.")
                    }
                    return .ok(.init(body: body))
                default:
                    return .undocumented(
                        statusCode: response.status.code,
                        .init(
                            headerFields: response.headerFields,
                            body: responseBody
                        )
                    )
                }
            }
        )
    }
    /// Updates a send-as alias. If a signature is provided, Gmail will sanitize the HTML before saving it with the alias. Addresses other than the primary address for the account can only be updated by service account clients that have been delegated domain-wide authority.
    ///
    /// - Remark: HTTP `PUT /gmail/v1/users/{userId}/settings/sendAs/{sendAsEmail}`.
    /// - Remark: Generated from `#/paths//gmail/v1/users/{userId}/settings/sendAs/{sendAsEmail}/put(gmail.users.settings.sendAs.update)`.
    public func gmail_users_settings_sendAs_update(_ input: Operations.Gmail_users_settings_sendAs_update.Input) async throws -> Operations.Gmail_users_settings_sendAs_update.Output {
        try await client.send(
            input: input,
            forOperation: Operations.Gmail_users_settings_sendAs_update.id,
            serializer: { input in
                let path = try converter.renderedPath(
                    template: "/gmail/v1/users/{}/settings/sendAs/{}",
                    parameters: [
                        input.path.userId,
                        input.path.sendAsEmail
                    ]
                )
                var request: HTTPTypes.HTTPRequest = .init(
                    soar_path: path,
                    method: .put
                )
                suppressMutabilityWarning(&request)
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "$.xgafv",
                    value: input.query._dollar__xgafv
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "access_token",
                    value: input.query.accessToken
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "alt",
                    value: input.query.alt
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "callback",
                    value: input.query.callback
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "fields",
                    value: input.query.fields
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "key",
                    value: input.query.key
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "oauth_token",
                    value: input.query.oauthToken
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "prettyPrint",
                    value: input.query.prettyPrint
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "quotaUser",
                    value: input.query.quotaUser
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "upload_protocol",
                    value: input.query.uploadProtocol
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "uploadType",
                    value: input.query.uploadType
                )
                converter.setAcceptHeader(
                    in: &request.headerFields,
                    contentTypes: input.headers.accept
                )
                let body: OpenAPIRuntime.HTTPBody?
                switch input.body {
                case .none:
                    body = nil
                case let .json(value):
                    body = try converter.setOptionalRequestBodyAsJSON(
                        value,
                        headerFields: &request.headerFields,
                        contentType: "application/json; charset=utf-8"
                    )
                }
                return (request, body)
            },
            deserializer: { response, responseBody in
                switch response.status.code {
                case 200:
                    let contentType = converter.extractContentTypeIfPresent(in: response.headerFields)
                    let body: Operations.Gmail_users_settings_sendAs_update.Output.Ok.Body
                    let chosenContentType = try converter.bestContentType(
                        received: contentType,
                        options: [
                            "application/json"
                        ]
                    )
                    switch chosenContentType {
                    case "application/json":
                        body = try await converter.getResponseBodyAsJSON(
                            Components.Schemas.SendAs.self,
                            from: responseBody,
                            transforming: { value in
                                .json(value)
                            }
                        )
                    default:
                        preconditionFailure("bestContentType chose an invalid content type.")
                    }
                    return .ok(.init(body: body))
                default:
                    return .undocumented(
                        statusCode: response.status.code,
                        .init(
                            headerFields: response.headerFields,
                            body: responseBody
                        )
                    )
                }
            }
        )
    }
    /// Deletes the specified send-as alias. Revokes any verification that may have been required for using it. This method is only available to service account clients that have been delegated domain-wide authority.
    ///
    /// - Remark: HTTP `DELETE /gmail/v1/users/{userId}/settings/sendAs/{sendAsEmail}`.
    /// - Remark: Generated from `#/paths//gmail/v1/users/{userId}/settings/sendAs/{sendAsEmail}/delete(gmail.users.settings.sendAs.delete)`.
    public func gmail_users_settings_sendAs_delete(_ input: Operations.Gmail_users_settings_sendAs_delete.Input) async throws -> Operations.Gmail_users_settings_sendAs_delete.Output {
        try await client.send(
            input: input,
            forOperation: Operations.Gmail_users_settings_sendAs_delete.id,
            serializer: { input in
                let path = try converter.renderedPath(
                    template: "/gmail/v1/users/{}/settings/sendAs/{}",
                    parameters: [
                        input.path.userId,
                        input.path.sendAsEmail
                    ]
                )
                var request: HTTPTypes.HTTPRequest = .init(
                    soar_path: path,
                    method: .delete
                )
                suppressMutabilityWarning(&request)
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "$.xgafv",
                    value: input.query._dollar__xgafv
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "access_token",
                    value: input.query.accessToken
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "alt",
                    value: input.query.alt
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "callback",
                    value: input.query.callback
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "fields",
                    value: input.query.fields
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "key",
                    value: input.query.key
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "oauth_token",
                    value: input.query.oauthToken
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "prettyPrint",
                    value: input.query.prettyPrint
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "quotaUser",
                    value: input.query.quotaUser
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "upload_protocol",
                    value: input.query.uploadProtocol
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "uploadType",
                    value: input.query.uploadType
                )
                return (request, nil)
            },
            deserializer: { response, responseBody in
                switch response.status.code {
                case 200:
                    return .ok(.init())
                default:
                    return .undocumented(
                        statusCode: response.status.code,
                        .init(
                            headerFields: response.headerFields,
                            body: responseBody
                        )
                    )
                }
            }
        )
    }
    /// Lists S/MIME configs for the specified send-as alias.
    ///
    /// - Remark: HTTP `GET /gmail/v1/users/{userId}/settings/sendAs/{sendAsEmail}/smimeInfo`.
    /// - Remark: Generated from `#/paths//gmail/v1/users/{userId}/settings/sendAs/{sendAsEmail}/smimeInfo/get(gmail.users.settings.sendAs.smimeInfo.list)`.
    public func gmail_users_settings_sendAs_smimeInfo_list(_ input: Operations.Gmail_users_settings_sendAs_smimeInfo_list.Input) async throws -> Operations.Gmail_users_settings_sendAs_smimeInfo_list.Output {
        try await client.send(
            input: input,
            forOperation: Operations.Gmail_users_settings_sendAs_smimeInfo_list.id,
            serializer: { input in
                let path = try converter.renderedPath(
                    template: "/gmail/v1/users/{}/settings/sendAs/{}/smimeInfo",
                    parameters: [
                        input.path.userId,
                        input.path.sendAsEmail
                    ]
                )
                var request: HTTPTypes.HTTPRequest = .init(
                    soar_path: path,
                    method: .get
                )
                suppressMutabilityWarning(&request)
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "$.xgafv",
                    value: input.query._dollar__xgafv
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "access_token",
                    value: input.query.accessToken
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "alt",
                    value: input.query.alt
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "callback",
                    value: input.query.callback
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "fields",
                    value: input.query.fields
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "key",
                    value: input.query.key
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "oauth_token",
                    value: input.query.oauthToken
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "prettyPrint",
                    value: input.query.prettyPrint
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "quotaUser",
                    value: input.query.quotaUser
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "upload_protocol",
                    value: input.query.uploadProtocol
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "uploadType",
                    value: input.query.uploadType
                )
                converter.setAcceptHeader(
                    in: &request.headerFields,
                    contentTypes: input.headers.accept
                )
                return (request, nil)
            },
            deserializer: { response, responseBody in
                switch response.status.code {
                case 200:
                    let contentType = converter.extractContentTypeIfPresent(in: response.headerFields)
                    let body: Operations.Gmail_users_settings_sendAs_smimeInfo_list.Output.Ok.Body
                    let chosenContentType = try converter.bestContentType(
                        received: contentType,
                        options: [
                            "application/json"
                        ]
                    )
                    switch chosenContentType {
                    case "application/json":
                        body = try await converter.getResponseBodyAsJSON(
                            Components.Schemas.ListSmimeInfoResponse.self,
                            from: responseBody,
                            transforming: { value in
                                .json(value)
                            }
                        )
                    default:
                        preconditionFailure("bestContentType chose an invalid content type.")
                    }
                    return .ok(.init(body: body))
                default:
                    return .undocumented(
                        statusCode: response.status.code,
                        .init(
                            headerFields: response.headerFields,
                            body: responseBody
                        )
                    )
                }
            }
        )
    }
    /// Insert (upload) the given S/MIME config for the specified send-as alias. Note that pkcs12 format is required for the key.
    ///
    /// - Remark: HTTP `POST /gmail/v1/users/{userId}/settings/sendAs/{sendAsEmail}/smimeInfo`.
    /// - Remark: Generated from `#/paths//gmail/v1/users/{userId}/settings/sendAs/{sendAsEmail}/smimeInfo/post(gmail.users.settings.sendAs.smimeInfo.insert)`.
    public func gmail_users_settings_sendAs_smimeInfo_insert(_ input: Operations.Gmail_users_settings_sendAs_smimeInfo_insert.Input) async throws -> Operations.Gmail_users_settings_sendAs_smimeInfo_insert.Output {
        try await client.send(
            input: input,
            forOperation: Operations.Gmail_users_settings_sendAs_smimeInfo_insert.id,
            serializer: { input in
                let path = try converter.renderedPath(
                    template: "/gmail/v1/users/{}/settings/sendAs/{}/smimeInfo",
                    parameters: [
                        input.path.userId,
                        input.path.sendAsEmail
                    ]
                )
                var request: HTTPTypes.HTTPRequest = .init(
                    soar_path: path,
                    method: .post
                )
                suppressMutabilityWarning(&request)
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "$.xgafv",
                    value: input.query._dollar__xgafv
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "access_token",
                    value: input.query.accessToken
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "alt",
                    value: input.query.alt
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "callback",
                    value: input.query.callback
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "fields",
                    value: input.query.fields
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "key",
                    value: input.query.key
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "oauth_token",
                    value: input.query.oauthToken
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "prettyPrint",
                    value: input.query.prettyPrint
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "quotaUser",
                    value: input.query.quotaUser
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "upload_protocol",
                    value: input.query.uploadProtocol
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "uploadType",
                    value: input.query.uploadType
                )
                converter.setAcceptHeader(
                    in: &request.headerFields,
                    contentTypes: input.headers.accept
                )
                let body: OpenAPIRuntime.HTTPBody?
                switch input.body {
                case .none:
                    body = nil
                case let .json(value):
                    body = try converter.setOptionalRequestBodyAsJSON(
                        value,
                        headerFields: &request.headerFields,
                        contentType: "application/json; charset=utf-8"
                    )
                }
                return (request, body)
            },
            deserializer: { response, responseBody in
                switch response.status.code {
                case 200:
                    let contentType = converter.extractContentTypeIfPresent(in: response.headerFields)
                    let body: Operations.Gmail_users_settings_sendAs_smimeInfo_insert.Output.Ok.Body
                    let chosenContentType = try converter.bestContentType(
                        received: contentType,
                        options: [
                            "application/json"
                        ]
                    )
                    switch chosenContentType {
                    case "application/json":
                        body = try await converter.getResponseBodyAsJSON(
                            Components.Schemas.SmimeInfo.self,
                            from: responseBody,
                            transforming: { value in
                                .json(value)
                            }
                        )
                    default:
                        preconditionFailure("bestContentType chose an invalid content type.")
                    }
                    return .ok(.init(body: body))
                default:
                    return .undocumented(
                        statusCode: response.status.code,
                        .init(
                            headerFields: response.headerFields,
                            body: responseBody
                        )
                    )
                }
            }
        )
    }
    /// Gets the specified S/MIME config for the specified send-as alias.
    ///
    /// - Remark: HTTP `GET /gmail/v1/users/{userId}/settings/sendAs/{sendAsEmail}/smimeInfo/{id}`.
    /// - Remark: Generated from `#/paths//gmail/v1/users/{userId}/settings/sendAs/{sendAsEmail}/smimeInfo/{id}/get(gmail.users.settings.sendAs.smimeInfo.get)`.
    public func gmail_users_settings_sendAs_smimeInfo_get(_ input: Operations.Gmail_users_settings_sendAs_smimeInfo_get.Input) async throws -> Operations.Gmail_users_settings_sendAs_smimeInfo_get.Output {
        try await client.send(
            input: input,
            forOperation: Operations.Gmail_users_settings_sendAs_smimeInfo_get.id,
            serializer: { input in
                let path = try converter.renderedPath(
                    template: "/gmail/v1/users/{}/settings/sendAs/{}/smimeInfo/{}",
                    parameters: [
                        input.path.userId,
                        input.path.sendAsEmail,
                        input.path.id
                    ]
                )
                var request: HTTPTypes.HTTPRequest = .init(
                    soar_path: path,
                    method: .get
                )
                suppressMutabilityWarning(&request)
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "$.xgafv",
                    value: input.query._dollar__xgafv
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "access_token",
                    value: input.query.accessToken
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "alt",
                    value: input.query.alt
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "callback",
                    value: input.query.callback
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "fields",
                    value: input.query.fields
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "key",
                    value: input.query.key
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "oauth_token",
                    value: input.query.oauthToken
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "prettyPrint",
                    value: input.query.prettyPrint
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "quotaUser",
                    value: input.query.quotaUser
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "upload_protocol",
                    value: input.query.uploadProtocol
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "uploadType",
                    value: input.query.uploadType
                )
                converter.setAcceptHeader(
                    in: &request.headerFields,
                    contentTypes: input.headers.accept
                )
                return (request, nil)
            },
            deserializer: { response, responseBody in
                switch response.status.code {
                case 200:
                    let contentType = converter.extractContentTypeIfPresent(in: response.headerFields)
                    let body: Operations.Gmail_users_settings_sendAs_smimeInfo_get.Output.Ok.Body
                    let chosenContentType = try converter.bestContentType(
                        received: contentType,
                        options: [
                            "application/json"
                        ]
                    )
                    switch chosenContentType {
                    case "application/json":
                        body = try await converter.getResponseBodyAsJSON(
                            Components.Schemas.SmimeInfo.self,
                            from: responseBody,
                            transforming: { value in
                                .json(value)
                            }
                        )
                    default:
                        preconditionFailure("bestContentType chose an invalid content type.")
                    }
                    return .ok(.init(body: body))
                default:
                    return .undocumented(
                        statusCode: response.status.code,
                        .init(
                            headerFields: response.headerFields,
                            body: responseBody
                        )
                    )
                }
            }
        )
    }
    /// Deletes the specified S/MIME config for the specified send-as alias.
    ///
    /// - Remark: HTTP `DELETE /gmail/v1/users/{userId}/settings/sendAs/{sendAsEmail}/smimeInfo/{id}`.
    /// - Remark: Generated from `#/paths//gmail/v1/users/{userId}/settings/sendAs/{sendAsEmail}/smimeInfo/{id}/delete(gmail.users.settings.sendAs.smimeInfo.delete)`.
    public func gmail_users_settings_sendAs_smimeInfo_delete(_ input: Operations.Gmail_users_settings_sendAs_smimeInfo_delete.Input) async throws -> Operations.Gmail_users_settings_sendAs_smimeInfo_delete.Output {
        try await client.send(
            input: input,
            forOperation: Operations.Gmail_users_settings_sendAs_smimeInfo_delete.id,
            serializer: { input in
                let path = try converter.renderedPath(
                    template: "/gmail/v1/users/{}/settings/sendAs/{}/smimeInfo/{}",
                    parameters: [
                        input.path.userId,
                        input.path.sendAsEmail,
                        input.path.id
                    ]
                )
                var request: HTTPTypes.HTTPRequest = .init(
                    soar_path: path,
                    method: .delete
                )
                suppressMutabilityWarning(&request)
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "$.xgafv",
                    value: input.query._dollar__xgafv
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "access_token",
                    value: input.query.accessToken
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "alt",
                    value: input.query.alt
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "callback",
                    value: input.query.callback
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "fields",
                    value: input.query.fields
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "key",
                    value: input.query.key
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "oauth_token",
                    value: input.query.oauthToken
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "prettyPrint",
                    value: input.query.prettyPrint
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "quotaUser",
                    value: input.query.quotaUser
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "upload_protocol",
                    value: input.query.uploadProtocol
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "uploadType",
                    value: input.query.uploadType
                )
                return (request, nil)
            },
            deserializer: { response, responseBody in
                switch response.status.code {
                case 200:
                    return .ok(.init())
                default:
                    return .undocumented(
                        statusCode: response.status.code,
                        .init(
                            headerFields: response.headerFields,
                            body: responseBody
                        )
                    )
                }
            }
        )
    }
    /// Sets the default S/MIME config for the specified send-as alias.
    ///
    /// - Remark: HTTP `POST /gmail/v1/users/{userId}/settings/sendAs/{sendAsEmail}/smimeInfo/{id}/setDefault`.
    /// - Remark: Generated from `#/paths//gmail/v1/users/{userId}/settings/sendAs/{sendAsEmail}/smimeInfo/{id}/setDefault/post(gmail.users.settings.sendAs.smimeInfo.setDefault)`.
    public func gmail_users_settings_sendAs_smimeInfo_setDefault(_ input: Operations.Gmail_users_settings_sendAs_smimeInfo_setDefault.Input) async throws -> Operations.Gmail_users_settings_sendAs_smimeInfo_setDefault.Output {
        try await client.send(
            input: input,
            forOperation: Operations.Gmail_users_settings_sendAs_smimeInfo_setDefault.id,
            serializer: { input in
                let path = try converter.renderedPath(
                    template: "/gmail/v1/users/{}/settings/sendAs/{}/smimeInfo/{}/setDefault",
                    parameters: [
                        input.path.userId,
                        input.path.sendAsEmail,
                        input.path.id
                    ]
                )
                var request: HTTPTypes.HTTPRequest = .init(
                    soar_path: path,
                    method: .post
                )
                suppressMutabilityWarning(&request)
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "$.xgafv",
                    value: input.query._dollar__xgafv
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "access_token",
                    value: input.query.accessToken
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "alt",
                    value: input.query.alt
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "callback",
                    value: input.query.callback
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "fields",
                    value: input.query.fields
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "key",
                    value: input.query.key
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "oauth_token",
                    value: input.query.oauthToken
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "prettyPrint",
                    value: input.query.prettyPrint
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "quotaUser",
                    value: input.query.quotaUser
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "upload_protocol",
                    value: input.query.uploadProtocol
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "uploadType",
                    value: input.query.uploadType
                )
                return (request, nil)
            },
            deserializer: { response, responseBody in
                switch response.status.code {
                case 200:
                    return .ok(.init())
                default:
                    return .undocumented(
                        statusCode: response.status.code,
                        .init(
                            headerFields: response.headerFields,
                            body: responseBody
                        )
                    )
                }
            }
        )
    }
    /// Sends a verification email to the specified send-as alias address. The verification status must be `pending`. This method is only available to service account clients that have been delegated domain-wide authority.
    ///
    /// - Remark: HTTP `POST /gmail/v1/users/{userId}/settings/sendAs/{sendAsEmail}/verify`.
    /// - Remark: Generated from `#/paths//gmail/v1/users/{userId}/settings/sendAs/{sendAsEmail}/verify/post(gmail.users.settings.sendAs.verify)`.
    public func gmail_users_settings_sendAs_verify(_ input: Operations.Gmail_users_settings_sendAs_verify.Input) async throws -> Operations.Gmail_users_settings_sendAs_verify.Output {
        try await client.send(
            input: input,
            forOperation: Operations.Gmail_users_settings_sendAs_verify.id,
            serializer: { input in
                let path = try converter.renderedPath(
                    template: "/gmail/v1/users/{}/settings/sendAs/{}/verify",
                    parameters: [
                        input.path.userId,
                        input.path.sendAsEmail
                    ]
                )
                var request: HTTPTypes.HTTPRequest = .init(
                    soar_path: path,
                    method: .post
                )
                suppressMutabilityWarning(&request)
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "$.xgafv",
                    value: input.query._dollar__xgafv
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "access_token",
                    value: input.query.accessToken
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "alt",
                    value: input.query.alt
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "callback",
                    value: input.query.callback
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "fields",
                    value: input.query.fields
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "key",
                    value: input.query.key
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "oauth_token",
                    value: input.query.oauthToken
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "prettyPrint",
                    value: input.query.prettyPrint
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "quotaUser",
                    value: input.query.quotaUser
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "upload_protocol",
                    value: input.query.uploadProtocol
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "uploadType",
                    value: input.query.uploadType
                )
                return (request, nil)
            },
            deserializer: { response, responseBody in
                switch response.status.code {
                case 200:
                    return .ok(.init())
                default:
                    return .undocumented(
                        statusCode: response.status.code,
                        .init(
                            headerFields: response.headerFields,
                            body: responseBody
                        )
                    )
                }
            }
        )
    }
    /// Gets vacation responder settings.
    ///
    /// - Remark: HTTP `GET /gmail/v1/users/{userId}/settings/vacation`.
    /// - Remark: Generated from `#/paths//gmail/v1/users/{userId}/settings/vacation/get(gmail.users.settings.getVacation)`.
    public func gmail_users_settings_getVacation(_ input: Operations.Gmail_users_settings_getVacation.Input) async throws -> Operations.Gmail_users_settings_getVacation.Output {
        try await client.send(
            input: input,
            forOperation: Operations.Gmail_users_settings_getVacation.id,
            serializer: { input in
                let path = try converter.renderedPath(
                    template: "/gmail/v1/users/{}/settings/vacation",
                    parameters: [
                        input.path.userId
                    ]
                )
                var request: HTTPTypes.HTTPRequest = .init(
                    soar_path: path,
                    method: .get
                )
                suppressMutabilityWarning(&request)
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "$.xgafv",
                    value: input.query._dollar__xgafv
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "access_token",
                    value: input.query.accessToken
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "alt",
                    value: input.query.alt
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "callback",
                    value: input.query.callback
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "fields",
                    value: input.query.fields
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "key",
                    value: input.query.key
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "oauth_token",
                    value: input.query.oauthToken
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "prettyPrint",
                    value: input.query.prettyPrint
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "quotaUser",
                    value: input.query.quotaUser
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "upload_protocol",
                    value: input.query.uploadProtocol
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "uploadType",
                    value: input.query.uploadType
                )
                converter.setAcceptHeader(
                    in: &request.headerFields,
                    contentTypes: input.headers.accept
                )
                return (request, nil)
            },
            deserializer: { response, responseBody in
                switch response.status.code {
                case 200:
                    let contentType = converter.extractContentTypeIfPresent(in: response.headerFields)
                    let body: Operations.Gmail_users_settings_getVacation.Output.Ok.Body
                    let chosenContentType = try converter.bestContentType(
                        received: contentType,
                        options: [
                            "application/json"
                        ]
                    )
                    switch chosenContentType {
                    case "application/json":
                        body = try await converter.getResponseBodyAsJSON(
                            Components.Schemas.VacationSettings.self,
                            from: responseBody,
                            transforming: { value in
                                .json(value)
                            }
                        )
                    default:
                        preconditionFailure("bestContentType chose an invalid content type.")
                    }
                    return .ok(.init(body: body))
                default:
                    return .undocumented(
                        statusCode: response.status.code,
                        .init(
                            headerFields: response.headerFields,
                            body: responseBody
                        )
                    )
                }
            }
        )
    }
    /// Updates vacation responder settings.
    ///
    /// - Remark: HTTP `PUT /gmail/v1/users/{userId}/settings/vacation`.
    /// - Remark: Generated from `#/paths//gmail/v1/users/{userId}/settings/vacation/put(gmail.users.settings.updateVacation)`.
    public func gmail_users_settings_updateVacation(_ input: Operations.Gmail_users_settings_updateVacation.Input) async throws -> Operations.Gmail_users_settings_updateVacation.Output {
        try await client.send(
            input: input,
            forOperation: Operations.Gmail_users_settings_updateVacation.id,
            serializer: { input in
                let path = try converter.renderedPath(
                    template: "/gmail/v1/users/{}/settings/vacation",
                    parameters: [
                        input.path.userId
                    ]
                )
                var request: HTTPTypes.HTTPRequest = .init(
                    soar_path: path,
                    method: .put
                )
                suppressMutabilityWarning(&request)
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "$.xgafv",
                    value: input.query._dollar__xgafv
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "access_token",
                    value: input.query.accessToken
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "alt",
                    value: input.query.alt
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "callback",
                    value: input.query.callback
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "fields",
                    value: input.query.fields
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "key",
                    value: input.query.key
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "oauth_token",
                    value: input.query.oauthToken
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "prettyPrint",
                    value: input.query.prettyPrint
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "quotaUser",
                    value: input.query.quotaUser
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "upload_protocol",
                    value: input.query.uploadProtocol
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "uploadType",
                    value: input.query.uploadType
                )
                converter.setAcceptHeader(
                    in: &request.headerFields,
                    contentTypes: input.headers.accept
                )
                let body: OpenAPIRuntime.HTTPBody?
                switch input.body {
                case .none:
                    body = nil
                case let .json(value):
                    body = try converter.setOptionalRequestBodyAsJSON(
                        value,
                        headerFields: &request.headerFields,
                        contentType: "application/json; charset=utf-8"
                    )
                }
                return (request, body)
            },
            deserializer: { response, responseBody in
                switch response.status.code {
                case 200:
                    let contentType = converter.extractContentTypeIfPresent(in: response.headerFields)
                    let body: Operations.Gmail_users_settings_updateVacation.Output.Ok.Body
                    let chosenContentType = try converter.bestContentType(
                        received: contentType,
                        options: [
                            "application/json"
                        ]
                    )
                    switch chosenContentType {
                    case "application/json":
                        body = try await converter.getResponseBodyAsJSON(
                            Components.Schemas.VacationSettings.self,
                            from: responseBody,
                            transforming: { value in
                                .json(value)
                            }
                        )
                    default:
                        preconditionFailure("bestContentType chose an invalid content type.")
                    }
                    return .ok(.init(body: body))
                default:
                    return .undocumented(
                        statusCode: response.status.code,
                        .init(
                            headerFields: response.headerFields,
                            body: responseBody
                        )
                    )
                }
            }
        )
    }
    /// Stop receiving push notifications for the given user mailbox.
    ///
    /// - Remark: HTTP `POST /gmail/v1/users/{userId}/stop`.
    /// - Remark: Generated from `#/paths//gmail/v1/users/{userId}/stop/post(gmail.users.stop)`.
    public func gmail_users_stop(_ input: Operations.Gmail_users_stop.Input) async throws -> Operations.Gmail_users_stop.Output {
        try await client.send(
            input: input,
            forOperation: Operations.Gmail_users_stop.id,
            serializer: { input in
                let path = try converter.renderedPath(
                    template: "/gmail/v1/users/{}/stop",
                    parameters: [
                        input.path.userId
                    ]
                )
                var request: HTTPTypes.HTTPRequest = .init(
                    soar_path: path,
                    method: .post
                )
                suppressMutabilityWarning(&request)
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "$.xgafv",
                    value: input.query._dollar__xgafv
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "access_token",
                    value: input.query.accessToken
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "alt",
                    value: input.query.alt
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "callback",
                    value: input.query.callback
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "fields",
                    value: input.query.fields
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "key",
                    value: input.query.key
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "oauth_token",
                    value: input.query.oauthToken
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "prettyPrint",
                    value: input.query.prettyPrint
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "quotaUser",
                    value: input.query.quotaUser
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "upload_protocol",
                    value: input.query.uploadProtocol
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "uploadType",
                    value: input.query.uploadType
                )
                return (request, nil)
            },
            deserializer: { response, responseBody in
                switch response.status.code {
                case 200:
                    return .ok(.init())
                default:
                    return .undocumented(
                        statusCode: response.status.code,
                        .init(
                            headerFields: response.headerFields,
                            body: responseBody
                        )
                    )
                }
            }
        )
    }
    /// Lists the threads in the user's mailbox.
    ///
    /// - Remark: HTTP `GET /gmail/v1/users/{userId}/threads`.
    /// - Remark: Generated from `#/paths//gmail/v1/users/{userId}/threads/get(gmail.users.threads.list)`.
    public func gmail_users_threads_list(_ input: Operations.Gmail_users_threads_list.Input) async throws -> Operations.Gmail_users_threads_list.Output {
        try await client.send(
            input: input,
            forOperation: Operations.Gmail_users_threads_list.id,
            serializer: { input in
                let path = try converter.renderedPath(
                    template: "/gmail/v1/users/{}/threads",
                    parameters: [
                        input.path.userId
                    ]
                )
                var request: HTTPTypes.HTTPRequest = .init(
                    soar_path: path,
                    method: .get
                )
                suppressMutabilityWarning(&request)
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "$.xgafv",
                    value: input.query._dollar__xgafv
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "access_token",
                    value: input.query.accessToken
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "alt",
                    value: input.query.alt
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "callback",
                    value: input.query.callback
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "fields",
                    value: input.query.fields
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "key",
                    value: input.query.key
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "oauth_token",
                    value: input.query.oauthToken
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "prettyPrint",
                    value: input.query.prettyPrint
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "quotaUser",
                    value: input.query.quotaUser
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "upload_protocol",
                    value: input.query.uploadProtocol
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "uploadType",
                    value: input.query.uploadType
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "includeSpamTrash",
                    value: input.query.includeSpamTrash
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "labelIds",
                    value: input.query.labelIds
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "maxResults",
                    value: input.query.maxResults
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "pageToken",
                    value: input.query.pageToken
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "q",
                    value: input.query.q
                )
                converter.setAcceptHeader(
                    in: &request.headerFields,
                    contentTypes: input.headers.accept
                )
                return (request, nil)
            },
            deserializer: { response, responseBody in
                switch response.status.code {
                case 200:
                    let contentType = converter.extractContentTypeIfPresent(in: response.headerFields)
                    let body: Operations.Gmail_users_threads_list.Output.Ok.Body
                    let chosenContentType = try converter.bestContentType(
                        received: contentType,
                        options: [
                            "application/json"
                        ]
                    )
                    switch chosenContentType {
                    case "application/json":
                        body = try await converter.getResponseBodyAsJSON(
                            Components.Schemas.ListThreadsResponse.self,
                            from: responseBody,
                            transforming: { value in
                                .json(value)
                            }
                        )
                    default:
                        preconditionFailure("bestContentType chose an invalid content type.")
                    }
                    return .ok(.init(body: body))
                default:
                    return .undocumented(
                        statusCode: response.status.code,
                        .init(
                            headerFields: response.headerFields,
                            body: responseBody
                        )
                    )
                }
            }
        )
    }
    /// Gets the specified thread.
    ///
    /// - Remark: HTTP `GET /gmail/v1/users/{userId}/threads/{id}`.
    /// - Remark: Generated from `#/paths//gmail/v1/users/{userId}/threads/{id}/get(gmail.users.threads.get)`.
    public func gmail_users_threads_get(_ input: Operations.Gmail_users_threads_get.Input) async throws -> Operations.Gmail_users_threads_get.Output {
        try await client.send(
            input: input,
            forOperation: Operations.Gmail_users_threads_get.id,
            serializer: { input in
                let path = try converter.renderedPath(
                    template: "/gmail/v1/users/{}/threads/{}",
                    parameters: [
                        input.path.userId,
                        input.path.id
                    ]
                )
                var request: HTTPTypes.HTTPRequest = .init(
                    soar_path: path,
                    method: .get
                )
                suppressMutabilityWarning(&request)
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "$.xgafv",
                    value: input.query._dollar__xgafv
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "access_token",
                    value: input.query.accessToken
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "alt",
                    value: input.query.alt
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "callback",
                    value: input.query.callback
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "fields",
                    value: input.query.fields
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "key",
                    value: input.query.key
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "oauth_token",
                    value: input.query.oauthToken
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "prettyPrint",
                    value: input.query.prettyPrint
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "quotaUser",
                    value: input.query.quotaUser
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "upload_protocol",
                    value: input.query.uploadProtocol
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "uploadType",
                    value: input.query.uploadType
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "format",
                    value: input.query.format
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "metadataHeaders",
                    value: input.query.metadataHeaders
                )
                converter.setAcceptHeader(
                    in: &request.headerFields,
                    contentTypes: input.headers.accept
                )
                return (request, nil)
            },
            deserializer: { response, responseBody in
                switch response.status.code {
                case 200:
                    let contentType = converter.extractContentTypeIfPresent(in: response.headerFields)
                    let body: Operations.Gmail_users_threads_get.Output.Ok.Body
                    let chosenContentType = try converter.bestContentType(
                        received: contentType,
                        options: [
                            "application/json"
                        ]
                    )
                    switch chosenContentType {
                    case "application/json":
                        body = try await converter.getResponseBodyAsJSON(
                            Components.Schemas.Thread.self,
                            from: responseBody,
                            transforming: { value in
                                .json(value)
                            }
                        )
                    default:
                        preconditionFailure("bestContentType chose an invalid content type.")
                    }
                    return .ok(.init(body: body))
                default:
                    return .undocumented(
                        statusCode: response.status.code,
                        .init(
                            headerFields: response.headerFields,
                            body: responseBody
                        )
                    )
                }
            }
        )
    }
    /// Immediately and permanently deletes the specified thread. Any messages that belong to the thread are also deleted. This operation cannot be undone. Prefer `threads.trash` instead.
    ///
    /// - Remark: HTTP `DELETE /gmail/v1/users/{userId}/threads/{id}`.
    /// - Remark: Generated from `#/paths//gmail/v1/users/{userId}/threads/{id}/delete(gmail.users.threads.delete)`.
    public func gmail_users_threads_delete(_ input: Operations.Gmail_users_threads_delete.Input) async throws -> Operations.Gmail_users_threads_delete.Output {
        try await client.send(
            input: input,
            forOperation: Operations.Gmail_users_threads_delete.id,
            serializer: { input in
                let path = try converter.renderedPath(
                    template: "/gmail/v1/users/{}/threads/{}",
                    parameters: [
                        input.path.userId,
                        input.path.id
                    ]
                )
                var request: HTTPTypes.HTTPRequest = .init(
                    soar_path: path,
                    method: .delete
                )
                suppressMutabilityWarning(&request)
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "$.xgafv",
                    value: input.query._dollar__xgafv
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "access_token",
                    value: input.query.accessToken
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "alt",
                    value: input.query.alt
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "callback",
                    value: input.query.callback
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "fields",
                    value: input.query.fields
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "key",
                    value: input.query.key
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "oauth_token",
                    value: input.query.oauthToken
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "prettyPrint",
                    value: input.query.prettyPrint
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "quotaUser",
                    value: input.query.quotaUser
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "upload_protocol",
                    value: input.query.uploadProtocol
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "uploadType",
                    value: input.query.uploadType
                )
                return (request, nil)
            },
            deserializer: { response, responseBody in
                switch response.status.code {
                case 200:
                    return .ok(.init())
                default:
                    return .undocumented(
                        statusCode: response.status.code,
                        .init(
                            headerFields: response.headerFields,
                            body: responseBody
                        )
                    )
                }
            }
        )
    }
    /// Modifies the labels applied to the thread. This applies to all messages in the thread.
    ///
    /// - Remark: HTTP `POST /gmail/v1/users/{userId}/threads/{id}/modify`.
    /// - Remark: Generated from `#/paths//gmail/v1/users/{userId}/threads/{id}/modify/post(gmail.users.threads.modify)`.
    public func gmail_users_threads_modify(_ input: Operations.Gmail_users_threads_modify.Input) async throws -> Operations.Gmail_users_threads_modify.Output {
        try await client.send(
            input: input,
            forOperation: Operations.Gmail_users_threads_modify.id,
            serializer: { input in
                let path = try converter.renderedPath(
                    template: "/gmail/v1/users/{}/threads/{}/modify",
                    parameters: [
                        input.path.userId,
                        input.path.id
                    ]
                )
                var request: HTTPTypes.HTTPRequest = .init(
                    soar_path: path,
                    method: .post
                )
                suppressMutabilityWarning(&request)
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "$.xgafv",
                    value: input.query._dollar__xgafv
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "access_token",
                    value: input.query.accessToken
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "alt",
                    value: input.query.alt
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "callback",
                    value: input.query.callback
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "fields",
                    value: input.query.fields
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "key",
                    value: input.query.key
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "oauth_token",
                    value: input.query.oauthToken
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "prettyPrint",
                    value: input.query.prettyPrint
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "quotaUser",
                    value: input.query.quotaUser
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "upload_protocol",
                    value: input.query.uploadProtocol
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "uploadType",
                    value: input.query.uploadType
                )
                converter.setAcceptHeader(
                    in: &request.headerFields,
                    contentTypes: input.headers.accept
                )
                let body: OpenAPIRuntime.HTTPBody?
                switch input.body {
                case .none:
                    body = nil
                case let .json(value):
                    body = try converter.setOptionalRequestBodyAsJSON(
                        value,
                        headerFields: &request.headerFields,
                        contentType: "application/json; charset=utf-8"
                    )
                }
                return (request, body)
            },
            deserializer: { response, responseBody in
                switch response.status.code {
                case 200:
                    let contentType = converter.extractContentTypeIfPresent(in: response.headerFields)
                    let body: Operations.Gmail_users_threads_modify.Output.Ok.Body
                    let chosenContentType = try converter.bestContentType(
                        received: contentType,
                        options: [
                            "application/json"
                        ]
                    )
                    switch chosenContentType {
                    case "application/json":
                        body = try await converter.getResponseBodyAsJSON(
                            Components.Schemas.Thread.self,
                            from: responseBody,
                            transforming: { value in
                                .json(value)
                            }
                        )
                    default:
                        preconditionFailure("bestContentType chose an invalid content type.")
                    }
                    return .ok(.init(body: body))
                default:
                    return .undocumented(
                        statusCode: response.status.code,
                        .init(
                            headerFields: response.headerFields,
                            body: responseBody
                        )
                    )
                }
            }
        )
    }
    /// Moves the specified thread to the trash. Any messages that belong to the thread are also moved to the trash.
    ///
    /// - Remark: HTTP `POST /gmail/v1/users/{userId}/threads/{id}/trash`.
    /// - Remark: Generated from `#/paths//gmail/v1/users/{userId}/threads/{id}/trash/post(gmail.users.threads.trash)`.
    public func gmail_users_threads_trash(_ input: Operations.Gmail_users_threads_trash.Input) async throws -> Operations.Gmail_users_threads_trash.Output {
        try await client.send(
            input: input,
            forOperation: Operations.Gmail_users_threads_trash.id,
            serializer: { input in
                let path = try converter.renderedPath(
                    template: "/gmail/v1/users/{}/threads/{}/trash",
                    parameters: [
                        input.path.userId,
                        input.path.id
                    ]
                )
                var request: HTTPTypes.HTTPRequest = .init(
                    soar_path: path,
                    method: .post
                )
                suppressMutabilityWarning(&request)
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "$.xgafv",
                    value: input.query._dollar__xgafv
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "access_token",
                    value: input.query.accessToken
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "alt",
                    value: input.query.alt
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "callback",
                    value: input.query.callback
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "fields",
                    value: input.query.fields
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "key",
                    value: input.query.key
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "oauth_token",
                    value: input.query.oauthToken
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "prettyPrint",
                    value: input.query.prettyPrint
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "quotaUser",
                    value: input.query.quotaUser
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "upload_protocol",
                    value: input.query.uploadProtocol
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "uploadType",
                    value: input.query.uploadType
                )
                converter.setAcceptHeader(
                    in: &request.headerFields,
                    contentTypes: input.headers.accept
                )
                return (request, nil)
            },
            deserializer: { response, responseBody in
                switch response.status.code {
                case 200:
                    let contentType = converter.extractContentTypeIfPresent(in: response.headerFields)
                    let body: Operations.Gmail_users_threads_trash.Output.Ok.Body
                    let chosenContentType = try converter.bestContentType(
                        received: contentType,
                        options: [
                            "application/json"
                        ]
                    )
                    switch chosenContentType {
                    case "application/json":
                        body = try await converter.getResponseBodyAsJSON(
                            Components.Schemas.Thread.self,
                            from: responseBody,
                            transforming: { value in
                                .json(value)
                            }
                        )
                    default:
                        preconditionFailure("bestContentType chose an invalid content type.")
                    }
                    return .ok(.init(body: body))
                default:
                    return .undocumented(
                        statusCode: response.status.code,
                        .init(
                            headerFields: response.headerFields,
                            body: responseBody
                        )
                    )
                }
            }
        )
    }
    /// Removes the specified thread from the trash. Any messages that belong to the thread are also removed from the trash.
    ///
    /// - Remark: HTTP `POST /gmail/v1/users/{userId}/threads/{id}/untrash`.
    /// - Remark: Generated from `#/paths//gmail/v1/users/{userId}/threads/{id}/untrash/post(gmail.users.threads.untrash)`.
    public func gmail_users_threads_untrash(_ input: Operations.Gmail_users_threads_untrash.Input) async throws -> Operations.Gmail_users_threads_untrash.Output {
        try await client.send(
            input: input,
            forOperation: Operations.Gmail_users_threads_untrash.id,
            serializer: { input in
                let path = try converter.renderedPath(
                    template: "/gmail/v1/users/{}/threads/{}/untrash",
                    parameters: [
                        input.path.userId,
                        input.path.id
                    ]
                )
                var request: HTTPTypes.HTTPRequest = .init(
                    soar_path: path,
                    method: .post
                )
                suppressMutabilityWarning(&request)
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "$.xgafv",
                    value: input.query._dollar__xgafv
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "access_token",
                    value: input.query.accessToken
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "alt",
                    value: input.query.alt
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "callback",
                    value: input.query.callback
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "fields",
                    value: input.query.fields
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "key",
                    value: input.query.key
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "oauth_token",
                    value: input.query.oauthToken
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "prettyPrint",
                    value: input.query.prettyPrint
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "quotaUser",
                    value: input.query.quotaUser
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "upload_protocol",
                    value: input.query.uploadProtocol
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "uploadType",
                    value: input.query.uploadType
                )
                converter.setAcceptHeader(
                    in: &request.headerFields,
                    contentTypes: input.headers.accept
                )
                return (request, nil)
            },
            deserializer: { response, responseBody in
                switch response.status.code {
                case 200:
                    let contentType = converter.extractContentTypeIfPresent(in: response.headerFields)
                    let body: Operations.Gmail_users_threads_untrash.Output.Ok.Body
                    let chosenContentType = try converter.bestContentType(
                        received: contentType,
                        options: [
                            "application/json"
                        ]
                    )
                    switch chosenContentType {
                    case "application/json":
                        body = try await converter.getResponseBodyAsJSON(
                            Components.Schemas.Thread.self,
                            from: responseBody,
                            transforming: { value in
                                .json(value)
                            }
                        )
                    default:
                        preconditionFailure("bestContentType chose an invalid content type.")
                    }
                    return .ok(.init(body: body))
                default:
                    return .undocumented(
                        statusCode: response.status.code,
                        .init(
                            headerFields: response.headerFields,
                            body: responseBody
                        )
                    )
                }
            }
        )
    }
    /// Set up or update a push notification watch on the given user mailbox.
    ///
    /// - Remark: HTTP `POST /gmail/v1/users/{userId}/watch`.
    /// - Remark: Generated from `#/paths//gmail/v1/users/{userId}/watch/post(gmail.users.watch)`.
    public func gmail_users_watch(_ input: Operations.Gmail_users_watch.Input) async throws -> Operations.Gmail_users_watch.Output {
        try await client.send(
            input: input,
            forOperation: Operations.Gmail_users_watch.id,
            serializer: { input in
                let path = try converter.renderedPath(
                    template: "/gmail/v1/users/{}/watch",
                    parameters: [
                        input.path.userId
                    ]
                )
                var request: HTTPTypes.HTTPRequest = .init(
                    soar_path: path,
                    method: .post
                )
                suppressMutabilityWarning(&request)
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "$.xgafv",
                    value: input.query._dollar__xgafv
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "access_token",
                    value: input.query.accessToken
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "alt",
                    value: input.query.alt
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "callback",
                    value: input.query.callback
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "fields",
                    value: input.query.fields
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "key",
                    value: input.query.key
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "oauth_token",
                    value: input.query.oauthToken
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "prettyPrint",
                    value: input.query.prettyPrint
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "quotaUser",
                    value: input.query.quotaUser
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "upload_protocol",
                    value: input.query.uploadProtocol
                )
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "uploadType",
                    value: input.query.uploadType
                )
                converter.setAcceptHeader(
                    in: &request.headerFields,
                    contentTypes: input.headers.accept
                )
                let body: OpenAPIRuntime.HTTPBody?
                switch input.body {
                case .none:
                    body = nil
                case let .json(value):
                    body = try converter.setOptionalRequestBodyAsJSON(
                        value,
                        headerFields: &request.headerFields,
                        contentType: "application/json; charset=utf-8"
                    )
                }
                return (request, body)
            },
            deserializer: { response, responseBody in
                switch response.status.code {
                case 200:
                    let contentType = converter.extractContentTypeIfPresent(in: response.headerFields)
                    let body: Operations.Gmail_users_watch.Output.Ok.Body
                    let chosenContentType = try converter.bestContentType(
                        received: contentType,
                        options: [
                            "application/json"
                        ]
                    )
                    switch chosenContentType {
                    case "application/json":
                        body = try await converter.getResponseBodyAsJSON(
                            Components.Schemas.WatchResponse.self,
                            from: responseBody,
                            transforming: { value in
                                .json(value)
                            }
                        )
                    default:
                        preconditionFailure("bestContentType chose an invalid content type.")
                    }
                    return .ok(.init(body: body))
                default:
                    return .undocumented(
                        statusCode: response.status.code,
                        .init(
                            headerFields: response.headerFields,
                            body: responseBody
                        )
                    )
                }
            }
        )
    }
}
