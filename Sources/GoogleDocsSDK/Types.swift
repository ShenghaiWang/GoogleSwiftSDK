// Generated by swift-openapi-generator, do not modify.
@_spi(Generated) import OpenAPIRuntime
#if os(Linux)
@preconcurrency import struct Foundation.URL
@preconcurrency import struct Foundation.Data
@preconcurrency import struct Foundation.Date
#else
import struct Foundation.URL
import struct Foundation.Data
import struct Foundation.Date
#endif
/// A type that performs HTTP operations defined by the OpenAPI document.
public protocol APIProtocol: Sendable {
    /// Creates a blank document using the title given in the request. Other fields in the request, including any provided content, are ignored. Returns the created document.
    ///
    /// - Remark: HTTP `POST /v1/documents`.
    /// - Remark: Generated from `#/paths//v1/documents/post(docs.documents.create)`.
    func docs_documents_create(_ input: Operations.Docs_documents_create.Input) async throws -> Operations.Docs_documents_create.Output
    /// Gets the latest version of the specified document.
    ///
    /// - Remark: HTTP `GET /v1/documents/{documentId}`.
    /// - Remark: Generated from `#/paths//v1/documents/{documentId}/get(docs.documents.get)`.
    func docs_documents_get(_ input: Operations.Docs_documents_get.Input) async throws -> Operations.Docs_documents_get.Output
    /// Applies one or more updates to the document. Each request is validated before being applied. If any request is not valid, then the entire request will fail and nothing will be applied. Some requests have replies to give you some information about how they are applied. Other requests do not need to return information; these each return an empty reply. The order of replies matches that of the requests. For example, suppose you call batchUpdate with four updates, and only the third one returns information. The response would have two empty replies, the reply to the third request, and another empty reply, in that order. Because other users may be editing the document, the document might not exactly reflect your changes: your changes may be altered with respect to collaborator changes. If there are no collaborators, the document should reflect your changes. In any case, the updates in your request are guaranteed to be applied together atomically.
    ///
    /// - Remark: HTTP `POST /v1/documents/{documentId}:batchUpdate`.
    /// - Remark: Generated from `#/paths//v1/documents/{documentId}:batchUpdate/post(docs.documents.batchUpdate)`.
    func docs_documents_batchUpdate(_ input: Operations.Docs_documents_batchUpdate.Input) async throws -> Operations.Docs_documents_batchUpdate.Output
}

/// Convenience overloads for operation inputs.
extension APIProtocol {
    /// Creates a blank document using the title given in the request. Other fields in the request, including any provided content, are ignored. Returns the created document.
    ///
    /// - Remark: HTTP `POST /v1/documents`.
    /// - Remark: Generated from `#/paths//v1/documents/post(docs.documents.create)`.
    public func docs_documents_create(
        query: Operations.Docs_documents_create.Input.Query = .init(),
        headers: Operations.Docs_documents_create.Input.Headers = .init(),
        body: Operations.Docs_documents_create.Input.Body? = nil
    ) async throws -> Operations.Docs_documents_create.Output {
        try await docs_documents_create(Operations.Docs_documents_create.Input(
            query: query,
            headers: headers,
            body: body
        ))
    }
    /// Gets the latest version of the specified document.
    ///
    /// - Remark: HTTP `GET /v1/documents/{documentId}`.
    /// - Remark: Generated from `#/paths//v1/documents/{documentId}/get(docs.documents.get)`.
    public func docs_documents_get(
        path: Operations.Docs_documents_get.Input.Path,
        query: Operations.Docs_documents_get.Input.Query = .init(),
        headers: Operations.Docs_documents_get.Input.Headers = .init()
    ) async throws -> Operations.Docs_documents_get.Output {
        try await docs_documents_get(Operations.Docs_documents_get.Input(
            path: path,
            query: query,
            headers: headers
        ))
    }
    /// Applies one or more updates to the document. Each request is validated before being applied. If any request is not valid, then the entire request will fail and nothing will be applied. Some requests have replies to give you some information about how they are applied. Other requests do not need to return information; these each return an empty reply. The order of replies matches that of the requests. For example, suppose you call batchUpdate with four updates, and only the third one returns information. The response would have two empty replies, the reply to the third request, and another empty reply, in that order. Because other users may be editing the document, the document might not exactly reflect your changes: your changes may be altered with respect to collaborator changes. If there are no collaborators, the document should reflect your changes. In any case, the updates in your request are guaranteed to be applied together atomically.
    ///
    /// - Remark: HTTP `POST /v1/documents/{documentId}:batchUpdate`.
    /// - Remark: Generated from `#/paths//v1/documents/{documentId}:batchUpdate/post(docs.documents.batchUpdate)`.
    public func docs_documents_batchUpdate(
        path: Operations.Docs_documents_batchUpdate.Input.Path,
        query: Operations.Docs_documents_batchUpdate.Input.Query = .init(),
        headers: Operations.Docs_documents_batchUpdate.Input.Headers = .init(),
        body: Operations.Docs_documents_batchUpdate.Input.Body? = nil
    ) async throws -> Operations.Docs_documents_batchUpdate.Output {
        try await docs_documents_batchUpdate(Operations.Docs_documents_batchUpdate.Input(
            path: path,
            query: query,
            headers: headers,
            body: body
        ))
    }
}

/// Server URLs defined in the OpenAPI document.
public enum Servers {
    public enum Server1 {
        public static func url() throws -> Foundation.URL {
            try Foundation.URL(
                validatingOpenAPIServerURL: "https://docs.googleapis.com/",
                variables: []
            )
        }
    }
    @available(*, deprecated, renamed: "Servers.Server1.url")
    public static func server1() throws -> Foundation.URL {
        try Foundation.URL(
            validatingOpenAPIServerURL: "https://docs.googleapis.com/",
            variables: []
        )
    }
}

/// Types generated from the components section of the OpenAPI document.
public enum Components {
    /// Types generated from the `#/components/schemas` section of the OpenAPI document.
    public enum Schemas {
        /// A ParagraphElement representing a spot in the text that's dynamically replaced with content that can change over time, like a page number.
        ///
        /// - Remark: Generated from `#/components/schemas/AutoText`.
        public struct AutoText: Codable, Hashable, Sendable {
            /// The suggested deletion IDs. If empty, then there are no suggested deletions of this content.
            ///
            /// - Remark: Generated from `#/components/schemas/AutoText/suggestedDeletionIds`.
            public var suggestedDeletionIds: [Swift.String]?
            /// The suggested insertion IDs. An AutoText may have multiple insertion IDs if it's a nested suggested change. If empty, then this is not a suggested insertion.
            ///
            /// - Remark: Generated from `#/components/schemas/AutoText/suggestedInsertionIds`.
            public var suggestedInsertionIds: [Swift.String]?
            /// The suggested text style changes to this AutoText, keyed by suggestion ID.
            ///
            /// - Remark: Generated from `#/components/schemas/AutoText/suggestedTextStyleChanges`.
            public struct SuggestedTextStyleChangesPayload: Codable, Hashable, Sendable {
                /// A container of undocumented properties.
                public var additionalProperties: [String: Components.Schemas.SuggestedTextStyle]
                /// Creates a new `SuggestedTextStyleChangesPayload`.
                ///
                /// - Parameters:
                ///   - additionalProperties: A container of undocumented properties.
                public init(additionalProperties: [String: Components.Schemas.SuggestedTextStyle] = .init()) {
                    self.additionalProperties = additionalProperties
                }
                public init(from decoder: any Decoder) throws {
                    additionalProperties = try decoder.decodeAdditionalProperties(knownKeys: [])
                }
                public func encode(to encoder: any Encoder) throws {
                    try encoder.encodeAdditionalProperties(additionalProperties)
                }
            }
            /// The suggested text style changes to this AutoText, keyed by suggestion ID.
            ///
            /// - Remark: Generated from `#/components/schemas/AutoText/suggestedTextStyleChanges`.
            public var suggestedTextStyleChanges: Components.Schemas.AutoText.SuggestedTextStyleChangesPayload?
            /// - Remark: Generated from `#/components/schemas/AutoText/textStyle`.
            public var textStyle: Components.Schemas.TextStyle?
            /// The type of this auto text.
            ///
            /// - Remark: Generated from `#/components/schemas/AutoText/type`.
            @frozen public enum _TypePayload: String, Codable, Hashable, Sendable, CaseIterable {
                case typeUnspecified = "TYPE_UNSPECIFIED"
                case pageNumber = "PAGE_NUMBER"
                case pageCount = "PAGE_COUNT"
            }
            /// The type of this auto text.
            ///
            /// - Remark: Generated from `#/components/schemas/AutoText/type`.
            public var _type: Components.Schemas.AutoText._TypePayload?
            /// Creates a new `AutoText`.
            ///
            /// - Parameters:
            ///   - suggestedDeletionIds: The suggested deletion IDs. If empty, then there are no suggested deletions of this content.
            ///   - suggestedInsertionIds: The suggested insertion IDs. An AutoText may have multiple insertion IDs if it's a nested suggested change. If empty, then this is not a suggested insertion.
            ///   - suggestedTextStyleChanges: The suggested text style changes to this AutoText, keyed by suggestion ID.
            ///   - textStyle:
            ///   - _type: The type of this auto text.
            public init(
                suggestedDeletionIds: [Swift.String]? = nil,
                suggestedInsertionIds: [Swift.String]? = nil,
                suggestedTextStyleChanges: Components.Schemas.AutoText.SuggestedTextStyleChangesPayload? = nil,
                textStyle: Components.Schemas.TextStyle? = nil,
                _type: Components.Schemas.AutoText._TypePayload? = nil
            ) {
                self.suggestedDeletionIds = suggestedDeletionIds
                self.suggestedInsertionIds = suggestedInsertionIds
                self.suggestedTextStyleChanges = suggestedTextStyleChanges
                self.textStyle = textStyle
                self._type = _type
            }
            public enum CodingKeys: String, CodingKey {
                case suggestedDeletionIds
                case suggestedInsertionIds
                case suggestedTextStyleChanges
                case textStyle
                case _type = "type"
            }
        }
        /// Represents the background of a document.
        ///
        /// - Remark: Generated from `#/components/schemas/Background`.
        public struct Background: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/Background/color`.
            public var color: Components.Schemas.OptionalColor?
            /// Creates a new `Background`.
            ///
            /// - Parameters:
            ///   - color:
            public init(color: Components.Schemas.OptionalColor? = nil) {
                self.color = color
            }
            public enum CodingKeys: String, CodingKey {
                case color
            }
        }
        /// A mask that indicates which of the fields on the base Background have been changed in this suggestion. For any field set to true, the Backgound has a new suggested value.
        ///
        /// - Remark: Generated from `#/components/schemas/BackgroundSuggestionState`.
        public struct BackgroundSuggestionState: Codable, Hashable, Sendable {
            /// Indicates whether the current background color has been modified in this suggestion.
            ///
            /// - Remark: Generated from `#/components/schemas/BackgroundSuggestionState/backgroundColorSuggested`.
            public var backgroundColorSuggested: Swift.Bool?
            /// Creates a new `BackgroundSuggestionState`.
            ///
            /// - Parameters:
            ///   - backgroundColorSuggested: Indicates whether the current background color has been modified in this suggestion.
            public init(backgroundColorSuggested: Swift.Bool? = nil) {
                self.backgroundColorSuggested = backgroundColorSuggested
            }
            public enum CodingKeys: String, CodingKey {
                case backgroundColorSuggested
            }
        }
        /// Request message for BatchUpdateDocument.
        ///
        /// - Remark: Generated from `#/components/schemas/BatchUpdateDocumentRequest`.
        public struct BatchUpdateDocumentRequest: Codable, Hashable, Sendable {
            /// A list of updates to apply to the document.
            ///
            /// - Remark: Generated from `#/components/schemas/BatchUpdateDocumentRequest/requests`.
            public var requests: [Components.Schemas.Request]?
            /// - Remark: Generated from `#/components/schemas/BatchUpdateDocumentRequest/writeControl`.
            public var writeControl: Components.Schemas.WriteControl?
            /// Creates a new `BatchUpdateDocumentRequest`.
            ///
            /// - Parameters:
            ///   - requests: A list of updates to apply to the document.
            ///   - writeControl:
            public init(
                requests: [Components.Schemas.Request]? = nil,
                writeControl: Components.Schemas.WriteControl? = nil
            ) {
                self.requests = requests
                self.writeControl = writeControl
            }
            public enum CodingKeys: String, CodingKey {
                case requests
                case writeControl
            }
        }
        /// Response message from a BatchUpdateDocument request.
        ///
        /// - Remark: Generated from `#/components/schemas/BatchUpdateDocumentResponse`.
        public struct BatchUpdateDocumentResponse: Codable, Hashable, Sendable {
            /// The ID of the document to which the updates were applied to.
            ///
            /// - Remark: Generated from `#/components/schemas/BatchUpdateDocumentResponse/documentId`.
            public var documentId: Swift.String?
            /// The reply of the updates. This maps 1:1 with the updates, although replies to some requests may be empty.
            ///
            /// - Remark: Generated from `#/components/schemas/BatchUpdateDocumentResponse/replies`.
            public var replies: [Components.Schemas.Response]?
            /// - Remark: Generated from `#/components/schemas/BatchUpdateDocumentResponse/writeControl`.
            public var writeControl: Components.Schemas.WriteControl?
            /// Creates a new `BatchUpdateDocumentResponse`.
            ///
            /// - Parameters:
            ///   - documentId: The ID of the document to which the updates were applied to.
            ///   - replies: The reply of the updates. This maps 1:1 with the updates, although replies to some requests may be empty.
            ///   - writeControl:
            public init(
                documentId: Swift.String? = nil,
                replies: [Components.Schemas.Response]? = nil,
                writeControl: Components.Schemas.WriteControl? = nil
            ) {
                self.documentId = documentId
                self.replies = replies
                self.writeControl = writeControl
            }
            public enum CodingKeys: String, CodingKey {
                case documentId
                case replies
                case writeControl
            }
        }
        /// The document body. The body typically contains the full document contents except for headers, footers, and footnotes.
        ///
        /// - Remark: Generated from `#/components/schemas/Body`.
        public struct Body: Codable, Hashable, Sendable {
            /// The contents of the body. The indexes for the body's content begin at zero.
            ///
            /// - Remark: Generated from `#/components/schemas/Body/content`.
            public var content: [Components.Schemas.StructuralElement]?
            /// Creates a new `Body`.
            ///
            /// - Parameters:
            ///   - content: The contents of the body. The indexes for the body's content begin at zero.
            public init(content: [Components.Schemas.StructuralElement]? = nil) {
                self.content = content
            }
            public enum CodingKeys: String, CodingKey {
                case content
            }
        }
        /// Describes the bullet of a paragraph.
        ///
        /// - Remark: Generated from `#/components/schemas/Bullet`.
        public struct Bullet: Codable, Hashable, Sendable {
            /// The ID of the list this paragraph belongs to.
            ///
            /// - Remark: Generated from `#/components/schemas/Bullet/listId`.
            public var listId: Swift.String?
            /// The nesting level of this paragraph in the list.
            ///
            /// - Remark: Generated from `#/components/schemas/Bullet/nestingLevel`.
            public var nestingLevel: Swift.Int32?
            /// - Remark: Generated from `#/components/schemas/Bullet/textStyle`.
            public var textStyle: Components.Schemas.TextStyle?
            /// Creates a new `Bullet`.
            ///
            /// - Parameters:
            ///   - listId: The ID of the list this paragraph belongs to.
            ///   - nestingLevel: The nesting level of this paragraph in the list.
            ///   - textStyle:
            public init(
                listId: Swift.String? = nil,
                nestingLevel: Swift.Int32? = nil,
                textStyle: Components.Schemas.TextStyle? = nil
            ) {
                self.listId = listId
                self.nestingLevel = nestingLevel
                self.textStyle = textStyle
            }
            public enum CodingKeys: String, CodingKey {
                case listId
                case nestingLevel
                case textStyle
            }
        }
        /// A mask that indicates which of the fields on the base Bullet have been changed in this suggestion. For any field set to true, there's a new suggested value.
        ///
        /// - Remark: Generated from `#/components/schemas/BulletSuggestionState`.
        public struct BulletSuggestionState: Codable, Hashable, Sendable {
            /// Indicates if there was a suggested change to the list_id.
            ///
            /// - Remark: Generated from `#/components/schemas/BulletSuggestionState/listIdSuggested`.
            public var listIdSuggested: Swift.Bool?
            /// Indicates if there was a suggested change to the nesting_level.
            ///
            /// - Remark: Generated from `#/components/schemas/BulletSuggestionState/nestingLevelSuggested`.
            public var nestingLevelSuggested: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/BulletSuggestionState/textStyleSuggestionState`.
            public var textStyleSuggestionState: Components.Schemas.TextStyleSuggestionState?
            /// Creates a new `BulletSuggestionState`.
            ///
            /// - Parameters:
            ///   - listIdSuggested: Indicates if there was a suggested change to the list_id.
            ///   - nestingLevelSuggested: Indicates if there was a suggested change to the nesting_level.
            ///   - textStyleSuggestionState:
            public init(
                listIdSuggested: Swift.Bool? = nil,
                nestingLevelSuggested: Swift.Bool? = nil,
                textStyleSuggestionState: Components.Schemas.TextStyleSuggestionState? = nil
            ) {
                self.listIdSuggested = listIdSuggested
                self.nestingLevelSuggested = nestingLevelSuggested
                self.textStyleSuggestionState = textStyleSuggestionState
            }
            public enum CodingKeys: String, CodingKey {
                case listIdSuggested
                case nestingLevelSuggested
                case textStyleSuggestionState
            }
        }
        /// A solid color.
        ///
        /// - Remark: Generated from `#/components/schemas/Color`.
        public struct Color: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/Color/rgbColor`.
            public var rgbColor: Components.Schemas.RgbColor?
            /// Creates a new `Color`.
            ///
            /// - Parameters:
            ///   - rgbColor:
            public init(rgbColor: Components.Schemas.RgbColor? = nil) {
                self.rgbColor = rgbColor
            }
            public enum CodingKeys: String, CodingKey {
                case rgbColor
            }
        }
        /// A ParagraphElement representing a column break. A column break makes the subsequent text start at the top of the next column.
        ///
        /// - Remark: Generated from `#/components/schemas/ColumnBreak`.
        public struct ColumnBreak: Codable, Hashable, Sendable {
            /// The suggested deletion IDs. If empty, then there are no suggested deletions of this content.
            ///
            /// - Remark: Generated from `#/components/schemas/ColumnBreak/suggestedDeletionIds`.
            public var suggestedDeletionIds: [Swift.String]?
            /// The suggested insertion IDs. A ColumnBreak may have multiple insertion IDs if it's a nested suggested change. If empty, then this is not a suggested insertion.
            ///
            /// - Remark: Generated from `#/components/schemas/ColumnBreak/suggestedInsertionIds`.
            public var suggestedInsertionIds: [Swift.String]?
            /// The suggested text style changes to this ColumnBreak, keyed by suggestion ID.
            ///
            /// - Remark: Generated from `#/components/schemas/ColumnBreak/suggestedTextStyleChanges`.
            public struct SuggestedTextStyleChangesPayload: Codable, Hashable, Sendable {
                /// A container of undocumented properties.
                public var additionalProperties: [String: Components.Schemas.SuggestedTextStyle]
                /// Creates a new `SuggestedTextStyleChangesPayload`.
                ///
                /// - Parameters:
                ///   - additionalProperties: A container of undocumented properties.
                public init(additionalProperties: [String: Components.Schemas.SuggestedTextStyle] = .init()) {
                    self.additionalProperties = additionalProperties
                }
                public init(from decoder: any Decoder) throws {
                    additionalProperties = try decoder.decodeAdditionalProperties(knownKeys: [])
                }
                public func encode(to encoder: any Encoder) throws {
                    try encoder.encodeAdditionalProperties(additionalProperties)
                }
            }
            /// The suggested text style changes to this ColumnBreak, keyed by suggestion ID.
            ///
            /// - Remark: Generated from `#/components/schemas/ColumnBreak/suggestedTextStyleChanges`.
            public var suggestedTextStyleChanges: Components.Schemas.ColumnBreak.SuggestedTextStyleChangesPayload?
            /// - Remark: Generated from `#/components/schemas/ColumnBreak/textStyle`.
            public var textStyle: Components.Schemas.TextStyle?
            /// Creates a new `ColumnBreak`.
            ///
            /// - Parameters:
            ///   - suggestedDeletionIds: The suggested deletion IDs. If empty, then there are no suggested deletions of this content.
            ///   - suggestedInsertionIds: The suggested insertion IDs. A ColumnBreak may have multiple insertion IDs if it's a nested suggested change. If empty, then this is not a suggested insertion.
            ///   - suggestedTextStyleChanges: The suggested text style changes to this ColumnBreak, keyed by suggestion ID.
            ///   - textStyle:
            public init(
                suggestedDeletionIds: [Swift.String]? = nil,
                suggestedInsertionIds: [Swift.String]? = nil,
                suggestedTextStyleChanges: Components.Schemas.ColumnBreak.SuggestedTextStyleChangesPayload? = nil,
                textStyle: Components.Schemas.TextStyle? = nil
            ) {
                self.suggestedDeletionIds = suggestedDeletionIds
                self.suggestedInsertionIds = suggestedInsertionIds
                self.suggestedTextStyleChanges = suggestedTextStyleChanges
                self.textStyle = textStyle
            }
            public enum CodingKeys: String, CodingKey {
                case suggestedDeletionIds
                case suggestedInsertionIds
                case suggestedTextStyleChanges
                case textStyle
            }
        }
        /// Creates a Footer. The new footer is applied to the SectionStyle at the location of the SectionBreak if specified, otherwise it is applied to the DocumentStyle. If a footer of the specified type already exists, a 400 bad request error is returned.
        ///
        /// - Remark: Generated from `#/components/schemas/CreateFooterRequest`.
        public struct CreateFooterRequest: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/CreateFooterRequest/sectionBreakLocation`.
            public var sectionBreakLocation: Components.Schemas.Location?
            /// The type of footer to create.
            ///
            /// - Remark: Generated from `#/components/schemas/CreateFooterRequest/type`.
            @frozen public enum _TypePayload: String, Codable, Hashable, Sendable, CaseIterable {
                case headerFooterTypeUnspecified = "HEADER_FOOTER_TYPE_UNSPECIFIED"
                case _default = "DEFAULT"
            }
            /// The type of footer to create.
            ///
            /// - Remark: Generated from `#/components/schemas/CreateFooterRequest/type`.
            public var _type: Components.Schemas.CreateFooterRequest._TypePayload?
            /// Creates a new `CreateFooterRequest`.
            ///
            /// - Parameters:
            ///   - sectionBreakLocation:
            ///   - _type: The type of footer to create.
            public init(
                sectionBreakLocation: Components.Schemas.Location? = nil,
                _type: Components.Schemas.CreateFooterRequest._TypePayload? = nil
            ) {
                self.sectionBreakLocation = sectionBreakLocation
                self._type = _type
            }
            public enum CodingKeys: String, CodingKey {
                case sectionBreakLocation
                case _type = "type"
            }
        }
        /// The result of creating a footer.
        ///
        /// - Remark: Generated from `#/components/schemas/CreateFooterResponse`.
        public struct CreateFooterResponse: Codable, Hashable, Sendable {
            /// The ID of the created footer.
            ///
            /// - Remark: Generated from `#/components/schemas/CreateFooterResponse/footerId`.
            public var footerId: Swift.String?
            /// Creates a new `CreateFooterResponse`.
            ///
            /// - Parameters:
            ///   - footerId: The ID of the created footer.
            public init(footerId: Swift.String? = nil) {
                self.footerId = footerId
            }
            public enum CodingKeys: String, CodingKey {
                case footerId
            }
        }
        /// Creates a Footnote segment and inserts a new FootnoteReference to it at the given location. The new Footnote segment will contain a space followed by a newline character.
        ///
        /// - Remark: Generated from `#/components/schemas/CreateFootnoteRequest`.
        public struct CreateFootnoteRequest: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/CreateFootnoteRequest/endOfSegmentLocation`.
            public var endOfSegmentLocation: Components.Schemas.EndOfSegmentLocation?
            /// - Remark: Generated from `#/components/schemas/CreateFootnoteRequest/location`.
            public var location: Components.Schemas.Location?
            /// Creates a new `CreateFootnoteRequest`.
            ///
            /// - Parameters:
            ///   - endOfSegmentLocation:
            ///   - location:
            public init(
                endOfSegmentLocation: Components.Schemas.EndOfSegmentLocation? = nil,
                location: Components.Schemas.Location? = nil
            ) {
                self.endOfSegmentLocation = endOfSegmentLocation
                self.location = location
            }
            public enum CodingKeys: String, CodingKey {
                case endOfSegmentLocation
                case location
            }
        }
        /// The result of creating a footnote.
        ///
        /// - Remark: Generated from `#/components/schemas/CreateFootnoteResponse`.
        public struct CreateFootnoteResponse: Codable, Hashable, Sendable {
            /// The ID of the created footnote.
            ///
            /// - Remark: Generated from `#/components/schemas/CreateFootnoteResponse/footnoteId`.
            public var footnoteId: Swift.String?
            /// Creates a new `CreateFootnoteResponse`.
            ///
            /// - Parameters:
            ///   - footnoteId: The ID of the created footnote.
            public init(footnoteId: Swift.String? = nil) {
                self.footnoteId = footnoteId
            }
            public enum CodingKeys: String, CodingKey {
                case footnoteId
            }
        }
        /// Creates a Header. The new header is applied to the SectionStyle at the location of the SectionBreak if specified, otherwise it is applied to the DocumentStyle. If a header of the specified type already exists, a 400 bad request error is returned.
        ///
        /// - Remark: Generated from `#/components/schemas/CreateHeaderRequest`.
        public struct CreateHeaderRequest: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/CreateHeaderRequest/sectionBreakLocation`.
            public var sectionBreakLocation: Components.Schemas.Location?
            /// The type of header to create.
            ///
            /// - Remark: Generated from `#/components/schemas/CreateHeaderRequest/type`.
            @frozen public enum _TypePayload: String, Codable, Hashable, Sendable, CaseIterable {
                case headerFooterTypeUnspecified = "HEADER_FOOTER_TYPE_UNSPECIFIED"
                case _default = "DEFAULT"
            }
            /// The type of header to create.
            ///
            /// - Remark: Generated from `#/components/schemas/CreateHeaderRequest/type`.
            public var _type: Components.Schemas.CreateHeaderRequest._TypePayload?
            /// Creates a new `CreateHeaderRequest`.
            ///
            /// - Parameters:
            ///   - sectionBreakLocation:
            ///   - _type: The type of header to create.
            public init(
                sectionBreakLocation: Components.Schemas.Location? = nil,
                _type: Components.Schemas.CreateHeaderRequest._TypePayload? = nil
            ) {
                self.sectionBreakLocation = sectionBreakLocation
                self._type = _type
            }
            public enum CodingKeys: String, CodingKey {
                case sectionBreakLocation
                case _type = "type"
            }
        }
        /// The result of creating a header.
        ///
        /// - Remark: Generated from `#/components/schemas/CreateHeaderResponse`.
        public struct CreateHeaderResponse: Codable, Hashable, Sendable {
            /// The ID of the created header.
            ///
            /// - Remark: Generated from `#/components/schemas/CreateHeaderResponse/headerId`.
            public var headerId: Swift.String?
            /// Creates a new `CreateHeaderResponse`.
            ///
            /// - Parameters:
            ///   - headerId: The ID of the created header.
            public init(headerId: Swift.String? = nil) {
                self.headerId = headerId
            }
            public enum CodingKeys: String, CodingKey {
                case headerId
            }
        }
        /// Creates a NamedRange referencing the given range.
        ///
        /// - Remark: Generated from `#/components/schemas/CreateNamedRangeRequest`.
        public struct CreateNamedRangeRequest: Codable, Hashable, Sendable {
            /// The name of the NamedRange. Names do not need to be unique. Names must be at least 1 character and no more than 256 characters, measured in UTF-16 code units.
            ///
            /// - Remark: Generated from `#/components/schemas/CreateNamedRangeRequest/name`.
            public var name: Swift.String?
            /// - Remark: Generated from `#/components/schemas/CreateNamedRangeRequest/range`.
            public var range: Components.Schemas.Range?
            /// Creates a new `CreateNamedRangeRequest`.
            ///
            /// - Parameters:
            ///   - name: The name of the NamedRange. Names do not need to be unique. Names must be at least 1 character and no more than 256 characters, measured in UTF-16 code units.
            ///   - range:
            public init(
                name: Swift.String? = nil,
                range: Components.Schemas.Range? = nil
            ) {
                self.name = name
                self.range = range
            }
            public enum CodingKeys: String, CodingKey {
                case name
                case range
            }
        }
        /// The result of creating a named range.
        ///
        /// - Remark: Generated from `#/components/schemas/CreateNamedRangeResponse`.
        public struct CreateNamedRangeResponse: Codable, Hashable, Sendable {
            /// The ID of the created named range.
            ///
            /// - Remark: Generated from `#/components/schemas/CreateNamedRangeResponse/namedRangeId`.
            public var namedRangeId: Swift.String?
            /// Creates a new `CreateNamedRangeResponse`.
            ///
            /// - Parameters:
            ///   - namedRangeId: The ID of the created named range.
            public init(namedRangeId: Swift.String? = nil) {
                self.namedRangeId = namedRangeId
            }
            public enum CodingKeys: String, CodingKey {
                case namedRangeId
            }
        }
        /// Creates bullets for all of the paragraphs that overlap with the given range. The nesting level of each paragraph will be determined by counting leading tabs in front of each paragraph. To avoid excess space between the bullet and the corresponding paragraph, these leading tabs are removed by this request. This may change the indices of parts of the text. If the paragraph immediately before paragraphs being updated is in a list with a matching preset, the paragraphs being updated are added to that preceding list.
        ///
        /// - Remark: Generated from `#/components/schemas/CreateParagraphBulletsRequest`.
        public struct CreateParagraphBulletsRequest: Codable, Hashable, Sendable {
            /// The kinds of bullet glyphs to be used.
            ///
            /// - Remark: Generated from `#/components/schemas/CreateParagraphBulletsRequest/bulletPreset`.
            @frozen public enum BulletPresetPayload: String, Codable, Hashable, Sendable, CaseIterable {
                case bulletGlyphPresetUnspecified = "BULLET_GLYPH_PRESET_UNSPECIFIED"
                case bulletDiscCircleSquare = "BULLET_DISC_CIRCLE_SQUARE"
                case bulletDiamondxArrow3dSquare = "BULLET_DIAMONDX_ARROW3D_SQUARE"
                case bulletCheckbox = "BULLET_CHECKBOX"
                case bulletArrowDiamondDisc = "BULLET_ARROW_DIAMOND_DISC"
                case bulletStarCircleSquare = "BULLET_STAR_CIRCLE_SQUARE"
                case bulletArrow3dCircleSquare = "BULLET_ARROW3D_CIRCLE_SQUARE"
                case bulletLefttriangleDiamondDisc = "BULLET_LEFTTRIANGLE_DIAMOND_DISC"
                case bulletDiamondxHollowdiamondSquare = "BULLET_DIAMONDX_HOLLOWDIAMOND_SQUARE"
                case bulletDiamondCircleSquare = "BULLET_DIAMOND_CIRCLE_SQUARE"
                case numberedDecimalAlphaRoman = "NUMBERED_DECIMAL_ALPHA_ROMAN"
                case numberedDecimalAlphaRomanParens = "NUMBERED_DECIMAL_ALPHA_ROMAN_PARENS"
                case numberedDecimalNested = "NUMBERED_DECIMAL_NESTED"
                case numberedUpperalphaAlphaRoman = "NUMBERED_UPPERALPHA_ALPHA_ROMAN"
                case numberedUpperromanUpperalphaDecimal = "NUMBERED_UPPERROMAN_UPPERALPHA_DECIMAL"
                case numberedZerodecimalAlphaRoman = "NUMBERED_ZERODECIMAL_ALPHA_ROMAN"
            }
            /// The kinds of bullet glyphs to be used.
            ///
            /// - Remark: Generated from `#/components/schemas/CreateParagraphBulletsRequest/bulletPreset`.
            public var bulletPreset: Components.Schemas.CreateParagraphBulletsRequest.BulletPresetPayload?
            /// - Remark: Generated from `#/components/schemas/CreateParagraphBulletsRequest/range`.
            public var range: Components.Schemas.Range?
            /// Creates a new `CreateParagraphBulletsRequest`.
            ///
            /// - Parameters:
            ///   - bulletPreset: The kinds of bullet glyphs to be used.
            ///   - range:
            public init(
                bulletPreset: Components.Schemas.CreateParagraphBulletsRequest.BulletPresetPayload? = nil,
                range: Components.Schemas.Range? = nil
            ) {
                self.bulletPreset = bulletPreset
                self.range = range
            }
            public enum CodingKeys: String, CodingKey {
                case bulletPreset
                case range
            }
        }
        /// The crop properties of an image. The crop rectangle is represented using fractional offsets from the original content's 4 edges. - If the offset is in the interval (0, 1), the corresponding edge of crop rectangle is positioned inside of the image's original bounding rectangle. - If the offset is negative or greater than 1, the corresponding edge of crop rectangle is positioned outside of the image's original bounding rectangle. - If all offsets and rotation angle are 0, the image is not cropped.
        ///
        /// - Remark: Generated from `#/components/schemas/CropProperties`.
        public struct CropProperties: Codable, Hashable, Sendable {
            /// The clockwise rotation angle of the crop rectangle around its center, in radians. Rotation is applied after the offsets.
            ///
            /// - Remark: Generated from `#/components/schemas/CropProperties/angle`.
            public var angle: Swift.Float?
            /// The offset specifies how far inwards the bottom edge of the crop rectangle is from the bottom edge of the original content as a fraction of the original content's height.
            ///
            /// - Remark: Generated from `#/components/schemas/CropProperties/offsetBottom`.
            public var offsetBottom: Swift.Float?
            /// The offset specifies how far inwards the left edge of the crop rectangle is from the left edge of the original content as a fraction of the original content's width.
            ///
            /// - Remark: Generated from `#/components/schemas/CropProperties/offsetLeft`.
            public var offsetLeft: Swift.Float?
            /// The offset specifies how far inwards the right edge of the crop rectangle is from the right edge of the original content as a fraction of the original content's width.
            ///
            /// - Remark: Generated from `#/components/schemas/CropProperties/offsetRight`.
            public var offsetRight: Swift.Float?
            /// The offset specifies how far inwards the top edge of the crop rectangle is from the top edge of the original content as a fraction of the original content's height.
            ///
            /// - Remark: Generated from `#/components/schemas/CropProperties/offsetTop`.
            public var offsetTop: Swift.Float?
            /// Creates a new `CropProperties`.
            ///
            /// - Parameters:
            ///   - angle: The clockwise rotation angle of the crop rectangle around its center, in radians. Rotation is applied after the offsets.
            ///   - offsetBottom: The offset specifies how far inwards the bottom edge of the crop rectangle is from the bottom edge of the original content as a fraction of the original content's height.
            ///   - offsetLeft: The offset specifies how far inwards the left edge of the crop rectangle is from the left edge of the original content as a fraction of the original content's width.
            ///   - offsetRight: The offset specifies how far inwards the right edge of the crop rectangle is from the right edge of the original content as a fraction of the original content's width.
            ///   - offsetTop: The offset specifies how far inwards the top edge of the crop rectangle is from the top edge of the original content as a fraction of the original content's height.
            public init(
                angle: Swift.Float? = nil,
                offsetBottom: Swift.Float? = nil,
                offsetLeft: Swift.Float? = nil,
                offsetRight: Swift.Float? = nil,
                offsetTop: Swift.Float? = nil
            ) {
                self.angle = angle
                self.offsetBottom = offsetBottom
                self.offsetLeft = offsetLeft
                self.offsetRight = offsetRight
                self.offsetTop = offsetTop
            }
            public enum CodingKeys: String, CodingKey {
                case angle
                case offsetBottom
                case offsetLeft
                case offsetRight
                case offsetTop
            }
        }
        /// A mask that indicates which of the fields on the base CropProperties have been changed in this suggestion. For any field set to true, there's a new suggested value.
        ///
        /// - Remark: Generated from `#/components/schemas/CropPropertiesSuggestionState`.
        public struct CropPropertiesSuggestionState: Codable, Hashable, Sendable {
            /// Indicates if there was a suggested change to angle.
            ///
            /// - Remark: Generated from `#/components/schemas/CropPropertiesSuggestionState/angleSuggested`.
            public var angleSuggested: Swift.Bool?
            /// Indicates if there was a suggested change to offset_bottom.
            ///
            /// - Remark: Generated from `#/components/schemas/CropPropertiesSuggestionState/offsetBottomSuggested`.
            public var offsetBottomSuggested: Swift.Bool?
            /// Indicates if there was a suggested change to offset_left.
            ///
            /// - Remark: Generated from `#/components/schemas/CropPropertiesSuggestionState/offsetLeftSuggested`.
            public var offsetLeftSuggested: Swift.Bool?
            /// Indicates if there was a suggested change to offset_right.
            ///
            /// - Remark: Generated from `#/components/schemas/CropPropertiesSuggestionState/offsetRightSuggested`.
            public var offsetRightSuggested: Swift.Bool?
            /// Indicates if there was a suggested change to offset_top.
            ///
            /// - Remark: Generated from `#/components/schemas/CropPropertiesSuggestionState/offsetTopSuggested`.
            public var offsetTopSuggested: Swift.Bool?
            /// Creates a new `CropPropertiesSuggestionState`.
            ///
            /// - Parameters:
            ///   - angleSuggested: Indicates if there was a suggested change to angle.
            ///   - offsetBottomSuggested: Indicates if there was a suggested change to offset_bottom.
            ///   - offsetLeftSuggested: Indicates if there was a suggested change to offset_left.
            ///   - offsetRightSuggested: Indicates if there was a suggested change to offset_right.
            ///   - offsetTopSuggested: Indicates if there was a suggested change to offset_top.
            public init(
                angleSuggested: Swift.Bool? = nil,
                offsetBottomSuggested: Swift.Bool? = nil,
                offsetLeftSuggested: Swift.Bool? = nil,
                offsetRightSuggested: Swift.Bool? = nil,
                offsetTopSuggested: Swift.Bool? = nil
            ) {
                self.angleSuggested = angleSuggested
                self.offsetBottomSuggested = offsetBottomSuggested
                self.offsetLeftSuggested = offsetLeftSuggested
                self.offsetRightSuggested = offsetRightSuggested
                self.offsetTopSuggested = offsetTopSuggested
            }
            public enum CodingKeys: String, CodingKey {
                case angleSuggested
                case offsetBottomSuggested
                case offsetLeftSuggested
                case offsetRightSuggested
                case offsetTopSuggested
            }
        }
        /// Deletes content from the document.
        ///
        /// - Remark: Generated from `#/components/schemas/DeleteContentRangeRequest`.
        public struct DeleteContentRangeRequest: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/DeleteContentRangeRequest/range`.
            public var range: Components.Schemas.Range?
            /// Creates a new `DeleteContentRangeRequest`.
            ///
            /// - Parameters:
            ///   - range:
            public init(range: Components.Schemas.Range? = nil) {
                self.range = range
            }
            public enum CodingKeys: String, CodingKey {
                case range
            }
        }
        /// Deletes a Footer from the document.
        ///
        /// - Remark: Generated from `#/components/schemas/DeleteFooterRequest`.
        public struct DeleteFooterRequest: Codable, Hashable, Sendable {
            /// The id of the footer to delete. If this footer is defined on DocumentStyle, the reference to this footer is removed, resulting in no footer of that type for the first section of the document. If this footer is defined on a SectionStyle, the reference to this footer is removed and the footer of that type is now continued from the previous section.
            ///
            /// - Remark: Generated from `#/components/schemas/DeleteFooterRequest/footerId`.
            public var footerId: Swift.String?
            /// Creates a new `DeleteFooterRequest`.
            ///
            /// - Parameters:
            ///   - footerId: The id of the footer to delete. If this footer is defined on DocumentStyle, the reference to this footer is removed, resulting in no footer of that type for the first section of the document. If this footer is defined on a SectionStyle, the reference to this footer is removed and the footer of that type is now continued from the previous section.
            public init(footerId: Swift.String? = nil) {
                self.footerId = footerId
            }
            public enum CodingKeys: String, CodingKey {
                case footerId
            }
        }
        /// Deletes a Header from the document.
        ///
        /// - Remark: Generated from `#/components/schemas/DeleteHeaderRequest`.
        public struct DeleteHeaderRequest: Codable, Hashable, Sendable {
            /// The id of the header to delete. If this header is defined on DocumentStyle, the reference to this header is removed, resulting in no header of that type for the first section of the document. If this header is defined on a SectionStyle, the reference to this header is removed and the header of that type is now continued from the previous section.
            ///
            /// - Remark: Generated from `#/components/schemas/DeleteHeaderRequest/headerId`.
            public var headerId: Swift.String?
            /// Creates a new `DeleteHeaderRequest`.
            ///
            /// - Parameters:
            ///   - headerId: The id of the header to delete. If this header is defined on DocumentStyle, the reference to this header is removed, resulting in no header of that type for the first section of the document. If this header is defined on a SectionStyle, the reference to this header is removed and the header of that type is now continued from the previous section.
            public init(headerId: Swift.String? = nil) {
                self.headerId = headerId
            }
            public enum CodingKeys: String, CodingKey {
                case headerId
            }
        }
        /// Deletes a NamedRange.
        ///
        /// - Remark: Generated from `#/components/schemas/DeleteNamedRangeRequest`.
        public struct DeleteNamedRangeRequest: Codable, Hashable, Sendable {
            /// The name of the range(s) to delete. All named ranges with the given name will be deleted.
            ///
            /// - Remark: Generated from `#/components/schemas/DeleteNamedRangeRequest/name`.
            public var name: Swift.String?
            /// The ID of the named range to delete.
            ///
            /// - Remark: Generated from `#/components/schemas/DeleteNamedRangeRequest/namedRangeId`.
            public var namedRangeId: Swift.String?
            /// Creates a new `DeleteNamedRangeRequest`.
            ///
            /// - Parameters:
            ///   - name: The name of the range(s) to delete. All named ranges with the given name will be deleted.
            ///   - namedRangeId: The ID of the named range to delete.
            public init(
                name: Swift.String? = nil,
                namedRangeId: Swift.String? = nil
            ) {
                self.name = name
                self.namedRangeId = namedRangeId
            }
            public enum CodingKeys: String, CodingKey {
                case name
                case namedRangeId
            }
        }
        /// Deletes bullets from all of the paragraphs that overlap with the given range. The nesting level of each paragraph will be visually preserved by adding indent to the start of the corresponding paragraph.
        ///
        /// - Remark: Generated from `#/components/schemas/DeleteParagraphBulletsRequest`.
        public struct DeleteParagraphBulletsRequest: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/DeleteParagraphBulletsRequest/range`.
            public var range: Components.Schemas.Range?
            /// Creates a new `DeleteParagraphBulletsRequest`.
            ///
            /// - Parameters:
            ///   - range:
            public init(range: Components.Schemas.Range? = nil) {
                self.range = range
            }
            public enum CodingKeys: String, CodingKey {
                case range
            }
        }
        /// Deletes a PositionedObject from the document.
        ///
        /// - Remark: Generated from `#/components/schemas/DeletePositionedObjectRequest`.
        public struct DeletePositionedObjectRequest: Codable, Hashable, Sendable {
            /// The ID of the positioned object to delete.
            ///
            /// - Remark: Generated from `#/components/schemas/DeletePositionedObjectRequest/objectId`.
            public var objectId: Swift.String?
            /// Creates a new `DeletePositionedObjectRequest`.
            ///
            /// - Parameters:
            ///   - objectId: The ID of the positioned object to delete.
            public init(objectId: Swift.String? = nil) {
                self.objectId = objectId
            }
            public enum CodingKeys: String, CodingKey {
                case objectId
            }
        }
        /// Deletes a column from a table.
        ///
        /// - Remark: Generated from `#/components/schemas/DeleteTableColumnRequest`.
        public struct DeleteTableColumnRequest: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/DeleteTableColumnRequest/tableCellLocation`.
            public var tableCellLocation: Components.Schemas.TableCellLocation?
            /// Creates a new `DeleteTableColumnRequest`.
            ///
            /// - Parameters:
            ///   - tableCellLocation:
            public init(tableCellLocation: Components.Schemas.TableCellLocation? = nil) {
                self.tableCellLocation = tableCellLocation
            }
            public enum CodingKeys: String, CodingKey {
                case tableCellLocation
            }
        }
        /// Deletes a row from a table.
        ///
        /// - Remark: Generated from `#/components/schemas/DeleteTableRowRequest`.
        public struct DeleteTableRowRequest: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/DeleteTableRowRequest/tableCellLocation`.
            public var tableCellLocation: Components.Schemas.TableCellLocation?
            /// Creates a new `DeleteTableRowRequest`.
            ///
            /// - Parameters:
            ///   - tableCellLocation:
            public init(tableCellLocation: Components.Schemas.TableCellLocation? = nil) {
                self.tableCellLocation = tableCellLocation
            }
            public enum CodingKeys: String, CodingKey {
                case tableCellLocation
            }
        }
        /// A magnitude in a single direction in the specified units.
        ///
        /// - Remark: Generated from `#/components/schemas/Dimension`.
        public struct Dimension: Codable, Hashable, Sendable {
            /// The magnitude.
            ///
            /// - Remark: Generated from `#/components/schemas/Dimension/magnitude`.
            public var magnitude: Swift.Double?
            /// The units for magnitude.
            ///
            /// - Remark: Generated from `#/components/schemas/Dimension/unit`.
            @frozen public enum UnitPayload: String, Codable, Hashable, Sendable, CaseIterable {
                case unitUnspecified = "UNIT_UNSPECIFIED"
                case pt = "PT"
            }
            /// The units for magnitude.
            ///
            /// - Remark: Generated from `#/components/schemas/Dimension/unit`.
            public var unit: Components.Schemas.Dimension.UnitPayload?
            /// Creates a new `Dimension`.
            ///
            /// - Parameters:
            ///   - magnitude: The magnitude.
            ///   - unit: The units for magnitude.
            public init(
                magnitude: Swift.Double? = nil,
                unit: Components.Schemas.Dimension.UnitPayload? = nil
            ) {
                self.magnitude = magnitude
                self.unit = unit
            }
            public enum CodingKeys: String, CodingKey {
                case magnitude
                case unit
            }
        }
        /// A Google Docs document.
        ///
        /// - Remark: Generated from `#/components/schemas/Document`.
        public struct Document: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/Document/body`.
            public var body: Components.Schemas.Body?
            /// Output only. The ID of the document.
            ///
            /// - Remark: Generated from `#/components/schemas/Document/documentId`.
            public var documentId: Swift.String?
            /// - Remark: Generated from `#/components/schemas/Document/documentStyle`.
            public var documentStyle: Components.Schemas.DocumentStyle?
            /// Output only. The footers in the document, keyed by footer ID.
            ///
            /// - Remark: Generated from `#/components/schemas/Document/footers`.
            public struct FootersPayload: Codable, Hashable, Sendable {
                /// A container of undocumented properties.
                public var additionalProperties: [String: Components.Schemas.Footer]
                /// Creates a new `FootersPayload`.
                ///
                /// - Parameters:
                ///   - additionalProperties: A container of undocumented properties.
                public init(additionalProperties: [String: Components.Schemas.Footer] = .init()) {
                    self.additionalProperties = additionalProperties
                }
                public init(from decoder: any Decoder) throws {
                    additionalProperties = try decoder.decodeAdditionalProperties(knownKeys: [])
                }
                public func encode(to encoder: any Encoder) throws {
                    try encoder.encodeAdditionalProperties(additionalProperties)
                }
            }
            /// Output only. The footers in the document, keyed by footer ID.
            ///
            /// - Remark: Generated from `#/components/schemas/Document/footers`.
            public var footers: Components.Schemas.Document.FootersPayload?
            /// Output only. The footnotes in the document, keyed by footnote ID.
            ///
            /// - Remark: Generated from `#/components/schemas/Document/footnotes`.
            public struct FootnotesPayload: Codable, Hashable, Sendable {
                /// A container of undocumented properties.
                public var additionalProperties: [String: Components.Schemas.Footnote]
                /// Creates a new `FootnotesPayload`.
                ///
                /// - Parameters:
                ///   - additionalProperties: A container of undocumented properties.
                public init(additionalProperties: [String: Components.Schemas.Footnote] = .init()) {
                    self.additionalProperties = additionalProperties
                }
                public init(from decoder: any Decoder) throws {
                    additionalProperties = try decoder.decodeAdditionalProperties(knownKeys: [])
                }
                public func encode(to encoder: any Encoder) throws {
                    try encoder.encodeAdditionalProperties(additionalProperties)
                }
            }
            /// Output only. The footnotes in the document, keyed by footnote ID.
            ///
            /// - Remark: Generated from `#/components/schemas/Document/footnotes`.
            public var footnotes: Components.Schemas.Document.FootnotesPayload?
            /// Output only. The headers in the document, keyed by header ID.
            ///
            /// - Remark: Generated from `#/components/schemas/Document/headers`.
            public struct HeadersPayload: Codable, Hashable, Sendable {
                /// A container of undocumented properties.
                public var additionalProperties: [String: Components.Schemas.Header]
                /// Creates a new `HeadersPayload`.
                ///
                /// - Parameters:
                ///   - additionalProperties: A container of undocumented properties.
                public init(additionalProperties: [String: Components.Schemas.Header] = .init()) {
                    self.additionalProperties = additionalProperties
                }
                public init(from decoder: any Decoder) throws {
                    additionalProperties = try decoder.decodeAdditionalProperties(knownKeys: [])
                }
                public func encode(to encoder: any Encoder) throws {
                    try encoder.encodeAdditionalProperties(additionalProperties)
                }
            }
            /// Output only. The headers in the document, keyed by header ID.
            ///
            /// - Remark: Generated from `#/components/schemas/Document/headers`.
            public var headers: Components.Schemas.Document.HeadersPayload?
            /// Output only. The inline objects in the document, keyed by object ID.
            ///
            /// - Remark: Generated from `#/components/schemas/Document/inlineObjects`.
            public struct InlineObjectsPayload: Codable, Hashable, Sendable {
                /// A container of undocumented properties.
                public var additionalProperties: [String: Components.Schemas.InlineObject]
                /// Creates a new `InlineObjectsPayload`.
                ///
                /// - Parameters:
                ///   - additionalProperties: A container of undocumented properties.
                public init(additionalProperties: [String: Components.Schemas.InlineObject] = .init()) {
                    self.additionalProperties = additionalProperties
                }
                public init(from decoder: any Decoder) throws {
                    additionalProperties = try decoder.decodeAdditionalProperties(knownKeys: [])
                }
                public func encode(to encoder: any Encoder) throws {
                    try encoder.encodeAdditionalProperties(additionalProperties)
                }
            }
            /// Output only. The inline objects in the document, keyed by object ID.
            ///
            /// - Remark: Generated from `#/components/schemas/Document/inlineObjects`.
            public var inlineObjects: Components.Schemas.Document.InlineObjectsPayload?
            /// Output only. The lists in the document, keyed by list ID.
            ///
            /// - Remark: Generated from `#/components/schemas/Document/lists`.
            public struct ListsPayload: Codable, Hashable, Sendable {
                /// A container of undocumented properties.
                public var additionalProperties: [String: Components.Schemas.List]
                /// Creates a new `ListsPayload`.
                ///
                /// - Parameters:
                ///   - additionalProperties: A container of undocumented properties.
                public init(additionalProperties: [String: Components.Schemas.List] = .init()) {
                    self.additionalProperties = additionalProperties
                }
                public init(from decoder: any Decoder) throws {
                    additionalProperties = try decoder.decodeAdditionalProperties(knownKeys: [])
                }
                public func encode(to encoder: any Encoder) throws {
                    try encoder.encodeAdditionalProperties(additionalProperties)
                }
            }
            /// Output only. The lists in the document, keyed by list ID.
            ///
            /// - Remark: Generated from `#/components/schemas/Document/lists`.
            public var lists: Components.Schemas.Document.ListsPayload?
            /// Output only. The named ranges in the document, keyed by name.
            ///
            /// - Remark: Generated from `#/components/schemas/Document/namedRanges`.
            public struct NamedRangesPayload: Codable, Hashable, Sendable {
                /// A container of undocumented properties.
                public var additionalProperties: [String: Components.Schemas.NamedRanges]
                /// Creates a new `NamedRangesPayload`.
                ///
                /// - Parameters:
                ///   - additionalProperties: A container of undocumented properties.
                public init(additionalProperties: [String: Components.Schemas.NamedRanges] = .init()) {
                    self.additionalProperties = additionalProperties
                }
                public init(from decoder: any Decoder) throws {
                    additionalProperties = try decoder.decodeAdditionalProperties(knownKeys: [])
                }
                public func encode(to encoder: any Encoder) throws {
                    try encoder.encodeAdditionalProperties(additionalProperties)
                }
            }
            /// Output only. The named ranges in the document, keyed by name.
            ///
            /// - Remark: Generated from `#/components/schemas/Document/namedRanges`.
            public var namedRanges: Components.Schemas.Document.NamedRangesPayload?
            /// - Remark: Generated from `#/components/schemas/Document/namedStyles`.
            public var namedStyles: Components.Schemas.NamedStyles?
            /// Output only. The positioned objects in the document, keyed by object ID.
            ///
            /// - Remark: Generated from `#/components/schemas/Document/positionedObjects`.
            public struct PositionedObjectsPayload: Codable, Hashable, Sendable {
                /// A container of undocumented properties.
                public var additionalProperties: [String: Components.Schemas.PositionedObject]
                /// Creates a new `PositionedObjectsPayload`.
                ///
                /// - Parameters:
                ///   - additionalProperties: A container of undocumented properties.
                public init(additionalProperties: [String: Components.Schemas.PositionedObject] = .init()) {
                    self.additionalProperties = additionalProperties
                }
                public init(from decoder: any Decoder) throws {
                    additionalProperties = try decoder.decodeAdditionalProperties(knownKeys: [])
                }
                public func encode(to encoder: any Encoder) throws {
                    try encoder.encodeAdditionalProperties(additionalProperties)
                }
            }
            /// Output only. The positioned objects in the document, keyed by object ID.
            ///
            /// - Remark: Generated from `#/components/schemas/Document/positionedObjects`.
            public var positionedObjects: Components.Schemas.Document.PositionedObjectsPayload?
            /// Output only. The revision ID of the document. Can be used in update requests to specify which revision of a document to apply updates to and how the request should behave if the document has been edited since that revision. Only populated if the user has edit access to the document. The revision ID is not a sequential number but an opaque string. The format of the revision ID might change over time. A returned revision ID is only guaranteed to be valid for 24 hours after it has been returned and cannot be shared across users. If the revision ID is unchanged between calls, then the document has not changed. Conversely, a changed ID (for the same document and user) usually means the document has been updated. However, a changed ID can also be due to internal factors such as ID format changes.
            ///
            /// - Remark: Generated from `#/components/schemas/Document/revisionId`.
            public var revisionId: Swift.String?
            /// Output only. The suggested changes to the style of the document, keyed by suggestion ID.
            ///
            /// - Remark: Generated from `#/components/schemas/Document/suggestedDocumentStyleChanges`.
            public struct SuggestedDocumentStyleChangesPayload: Codable, Hashable, Sendable {
                /// A container of undocumented properties.
                public var additionalProperties: [String: Components.Schemas.SuggestedDocumentStyle]
                /// Creates a new `SuggestedDocumentStyleChangesPayload`.
                ///
                /// - Parameters:
                ///   - additionalProperties: A container of undocumented properties.
                public init(additionalProperties: [String: Components.Schemas.SuggestedDocumentStyle] = .init()) {
                    self.additionalProperties = additionalProperties
                }
                public init(from decoder: any Decoder) throws {
                    additionalProperties = try decoder.decodeAdditionalProperties(knownKeys: [])
                }
                public func encode(to encoder: any Encoder) throws {
                    try encoder.encodeAdditionalProperties(additionalProperties)
                }
            }
            /// Output only. The suggested changes to the style of the document, keyed by suggestion ID.
            ///
            /// - Remark: Generated from `#/components/schemas/Document/suggestedDocumentStyleChanges`.
            public var suggestedDocumentStyleChanges: Components.Schemas.Document.SuggestedDocumentStyleChangesPayload?
            /// Output only. The suggested changes to the named styles of the document, keyed by suggestion ID.
            ///
            /// - Remark: Generated from `#/components/schemas/Document/suggestedNamedStylesChanges`.
            public struct SuggestedNamedStylesChangesPayload: Codable, Hashable, Sendable {
                /// A container of undocumented properties.
                public var additionalProperties: [String: Components.Schemas.SuggestedNamedStyles]
                /// Creates a new `SuggestedNamedStylesChangesPayload`.
                ///
                /// - Parameters:
                ///   - additionalProperties: A container of undocumented properties.
                public init(additionalProperties: [String: Components.Schemas.SuggestedNamedStyles] = .init()) {
                    self.additionalProperties = additionalProperties
                }
                public init(from decoder: any Decoder) throws {
                    additionalProperties = try decoder.decodeAdditionalProperties(knownKeys: [])
                }
                public func encode(to encoder: any Encoder) throws {
                    try encoder.encodeAdditionalProperties(additionalProperties)
                }
            }
            /// Output only. The suggested changes to the named styles of the document, keyed by suggestion ID.
            ///
            /// - Remark: Generated from `#/components/schemas/Document/suggestedNamedStylesChanges`.
            public var suggestedNamedStylesChanges: Components.Schemas.Document.SuggestedNamedStylesChangesPayload?
            /// Output only. The suggestions view mode applied to the document. Note: When editing a document, changes must be based on a document with SUGGESTIONS_INLINE.
            ///
            /// - Remark: Generated from `#/components/schemas/Document/suggestionsViewMode`.
            @frozen public enum SuggestionsViewModePayload: String, Codable, Hashable, Sendable, CaseIterable {
                case defaultForCurrentAccess = "DEFAULT_FOR_CURRENT_ACCESS"
                case suggestionsInline = "SUGGESTIONS_INLINE"
                case previewSuggestionsAccepted = "PREVIEW_SUGGESTIONS_ACCEPTED"
                case previewWithoutSuggestions = "PREVIEW_WITHOUT_SUGGESTIONS"
            }
            /// Output only. The suggestions view mode applied to the document. Note: When editing a document, changes must be based on a document with SUGGESTIONS_INLINE.
            ///
            /// - Remark: Generated from `#/components/schemas/Document/suggestionsViewMode`.
            public var suggestionsViewMode: Components.Schemas.Document.SuggestionsViewModePayload?
            /// The title of the document.
            ///
            /// - Remark: Generated from `#/components/schemas/Document/title`.
            public var title: Swift.String?
            /// Creates a new `Document`.
            ///
            /// - Parameters:
            ///   - body:
            ///   - documentId: Output only. The ID of the document.
            ///   - documentStyle:
            ///   - footers: Output only. The footers in the document, keyed by footer ID.
            ///   - footnotes: Output only. The footnotes in the document, keyed by footnote ID.
            ///   - headers: Output only. The headers in the document, keyed by header ID.
            ///   - inlineObjects: Output only. The inline objects in the document, keyed by object ID.
            ///   - lists: Output only. The lists in the document, keyed by list ID.
            ///   - namedRanges: Output only. The named ranges in the document, keyed by name.
            ///   - namedStyles:
            ///   - positionedObjects: Output only. The positioned objects in the document, keyed by object ID.
            ///   - revisionId: Output only. The revision ID of the document. Can be used in update requests to specify which revision of a document to apply updates to and how the request should behave if the document has been edited since that revision. Only populated if the user has edit access to the document. The revision ID is not a sequential number but an opaque string. The format of the revision ID might change over time. A returned revision ID is only guaranteed to be valid for 24 hours after it has been returned and cannot be shared across users. If the revision ID is unchanged between calls, then the document has not changed. Conversely, a changed ID (for the same document and user) usually means the document has been updated. However, a changed ID can also be due to internal factors such as ID format changes.
            ///   - suggestedDocumentStyleChanges: Output only. The suggested changes to the style of the document, keyed by suggestion ID.
            ///   - suggestedNamedStylesChanges: Output only. The suggested changes to the named styles of the document, keyed by suggestion ID.
            ///   - suggestionsViewMode: Output only. The suggestions view mode applied to the document. Note: When editing a document, changes must be based on a document with SUGGESTIONS_INLINE.
            ///   - title: The title of the document.
            public init(
                body: Components.Schemas.Body? = nil,
                documentId: Swift.String? = nil,
                documentStyle: Components.Schemas.DocumentStyle? = nil,
                footers: Components.Schemas.Document.FootersPayload? = nil,
                footnotes: Components.Schemas.Document.FootnotesPayload? = nil,
                headers: Components.Schemas.Document.HeadersPayload? = nil,
                inlineObjects: Components.Schemas.Document.InlineObjectsPayload? = nil,
                lists: Components.Schemas.Document.ListsPayload? = nil,
                namedRanges: Components.Schemas.Document.NamedRangesPayload? = nil,
                namedStyles: Components.Schemas.NamedStyles? = nil,
                positionedObjects: Components.Schemas.Document.PositionedObjectsPayload? = nil,
                revisionId: Swift.String? = nil,
                suggestedDocumentStyleChanges: Components.Schemas.Document.SuggestedDocumentStyleChangesPayload? = nil,
                suggestedNamedStylesChanges: Components.Schemas.Document.SuggestedNamedStylesChangesPayload? = nil,
                suggestionsViewMode: Components.Schemas.Document.SuggestionsViewModePayload? = nil,
                title: Swift.String? = nil
            ) {
                self.body = body
                self.documentId = documentId
                self.documentStyle = documentStyle
                self.footers = footers
                self.footnotes = footnotes
                self.headers = headers
                self.inlineObjects = inlineObjects
                self.lists = lists
                self.namedRanges = namedRanges
                self.namedStyles = namedStyles
                self.positionedObjects = positionedObjects
                self.revisionId = revisionId
                self.suggestedDocumentStyleChanges = suggestedDocumentStyleChanges
                self.suggestedNamedStylesChanges = suggestedNamedStylesChanges
                self.suggestionsViewMode = suggestionsViewMode
                self.title = title
            }
            public enum CodingKeys: String, CodingKey {
                case body
                case documentId
                case documentStyle
                case footers
                case footnotes
                case headers
                case inlineObjects
                case lists
                case namedRanges
                case namedStyles
                case positionedObjects
                case revisionId
                case suggestedDocumentStyleChanges
                case suggestedNamedStylesChanges
                case suggestionsViewMode
                case title
            }
        }
        /// The style of the document.
        ///
        /// - Remark: Generated from `#/components/schemas/DocumentStyle`.
        public struct DocumentStyle: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/DocumentStyle/background`.
            public var background: Components.Schemas.Background?
            /// The ID of the default footer. If not set, there's no default footer. This property is read-only.
            ///
            /// - Remark: Generated from `#/components/schemas/DocumentStyle/defaultFooterId`.
            public var defaultFooterId: Swift.String?
            /// The ID of the default header. If not set, there's no default header. This property is read-only.
            ///
            /// - Remark: Generated from `#/components/schemas/DocumentStyle/defaultHeaderId`.
            public var defaultHeaderId: Swift.String?
            /// The ID of the footer used only for even pages. The value of use_even_page_header_footer determines whether to use the default_footer_id or this value for the footer on even pages. If not set, there's no even page footer. This property is read-only.
            ///
            /// - Remark: Generated from `#/components/schemas/DocumentStyle/evenPageFooterId`.
            public var evenPageFooterId: Swift.String?
            /// The ID of the header used only for even pages. The value of use_even_page_header_footer determines whether to use the default_header_id or this value for the header on even pages. If not set, there's no even page header. This property is read-only.
            ///
            /// - Remark: Generated from `#/components/schemas/DocumentStyle/evenPageHeaderId`.
            public var evenPageHeaderId: Swift.String?
            /// The ID of the footer used only for the first page. If not set then a unique footer for the first page does not exist. The value of use_first_page_header_footer determines whether to use the default_footer_id or this value for the footer on the first page. If not set, there's no first page footer. This property is read-only.
            ///
            /// - Remark: Generated from `#/components/schemas/DocumentStyle/firstPageFooterId`.
            public var firstPageFooterId: Swift.String?
            /// The ID of the header used only for the first page. If not set then a unique header for the first page does not exist. The value of use_first_page_header_footer determines whether to use the default_header_id or this value for the header on the first page. If not set, there's no first page header. This property is read-only.
            ///
            /// - Remark: Generated from `#/components/schemas/DocumentStyle/firstPageHeaderId`.
            public var firstPageHeaderId: Swift.String?
            /// Optional. Indicates whether to flip the dimensions of the page_size, which allows changing the page orientation between portrait and landscape.
            ///
            /// - Remark: Generated from `#/components/schemas/DocumentStyle/flipPageOrientation`.
            public var flipPageOrientation: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/DocumentStyle/marginBottom`.
            public var marginBottom: Components.Schemas.Dimension?
            /// - Remark: Generated from `#/components/schemas/DocumentStyle/marginFooter`.
            public var marginFooter: Components.Schemas.Dimension?
            /// - Remark: Generated from `#/components/schemas/DocumentStyle/marginHeader`.
            public var marginHeader: Components.Schemas.Dimension?
            /// - Remark: Generated from `#/components/schemas/DocumentStyle/marginLeft`.
            public var marginLeft: Components.Schemas.Dimension?
            /// - Remark: Generated from `#/components/schemas/DocumentStyle/marginRight`.
            public var marginRight: Components.Schemas.Dimension?
            /// - Remark: Generated from `#/components/schemas/DocumentStyle/marginTop`.
            public var marginTop: Components.Schemas.Dimension?
            /// The page number from which to start counting the number of pages.
            ///
            /// - Remark: Generated from `#/components/schemas/DocumentStyle/pageNumberStart`.
            public var pageNumberStart: Swift.Int32?
            /// - Remark: Generated from `#/components/schemas/DocumentStyle/pageSize`.
            public var pageSize: Components.Schemas.Size?
            /// Indicates whether DocumentStyle margin_header, SectionStyle margin_header and DocumentStyle margin_footer, SectionStyle margin_footer are respected. When false, the default values in the Docs editor for header and footer margin are used. This property is read-only.
            ///
            /// - Remark: Generated from `#/components/schemas/DocumentStyle/useCustomHeaderFooterMargins`.
            public var useCustomHeaderFooterMargins: Swift.Bool?
            /// Indicates whether to use the even page header / footer IDs for the even pages.
            ///
            /// - Remark: Generated from `#/components/schemas/DocumentStyle/useEvenPageHeaderFooter`.
            public var useEvenPageHeaderFooter: Swift.Bool?
            /// Indicates whether to use the first page header / footer IDs for the first page.
            ///
            /// - Remark: Generated from `#/components/schemas/DocumentStyle/useFirstPageHeaderFooter`.
            public var useFirstPageHeaderFooter: Swift.Bool?
            /// Creates a new `DocumentStyle`.
            ///
            /// - Parameters:
            ///   - background:
            ///   - defaultFooterId: The ID of the default footer. If not set, there's no default footer. This property is read-only.
            ///   - defaultHeaderId: The ID of the default header. If not set, there's no default header. This property is read-only.
            ///   - evenPageFooterId: The ID of the footer used only for even pages. The value of use_even_page_header_footer determines whether to use the default_footer_id or this value for the footer on even pages. If not set, there's no even page footer. This property is read-only.
            ///   - evenPageHeaderId: The ID of the header used only for even pages. The value of use_even_page_header_footer determines whether to use the default_header_id or this value for the header on even pages. If not set, there's no even page header. This property is read-only.
            ///   - firstPageFooterId: The ID of the footer used only for the first page. If not set then a unique footer for the first page does not exist. The value of use_first_page_header_footer determines whether to use the default_footer_id or this value for the footer on the first page. If not set, there's no first page footer. This property is read-only.
            ///   - firstPageHeaderId: The ID of the header used only for the first page. If not set then a unique header for the first page does not exist. The value of use_first_page_header_footer determines whether to use the default_header_id or this value for the header on the first page. If not set, there's no first page header. This property is read-only.
            ///   - flipPageOrientation: Optional. Indicates whether to flip the dimensions of the page_size, which allows changing the page orientation between portrait and landscape.
            ///   - marginBottom:
            ///   - marginFooter:
            ///   - marginHeader:
            ///   - marginLeft:
            ///   - marginRight:
            ///   - marginTop:
            ///   - pageNumberStart: The page number from which to start counting the number of pages.
            ///   - pageSize:
            ///   - useCustomHeaderFooterMargins: Indicates whether DocumentStyle margin_header, SectionStyle margin_header and DocumentStyle margin_footer, SectionStyle margin_footer are respected. When false, the default values in the Docs editor for header and footer margin are used. This property is read-only.
            ///   - useEvenPageHeaderFooter: Indicates whether to use the even page header / footer IDs for the even pages.
            ///   - useFirstPageHeaderFooter: Indicates whether to use the first page header / footer IDs for the first page.
            public init(
                background: Components.Schemas.Background? = nil,
                defaultFooterId: Swift.String? = nil,
                defaultHeaderId: Swift.String? = nil,
                evenPageFooterId: Swift.String? = nil,
                evenPageHeaderId: Swift.String? = nil,
                firstPageFooterId: Swift.String? = nil,
                firstPageHeaderId: Swift.String? = nil,
                flipPageOrientation: Swift.Bool? = nil,
                marginBottom: Components.Schemas.Dimension? = nil,
                marginFooter: Components.Schemas.Dimension? = nil,
                marginHeader: Components.Schemas.Dimension? = nil,
                marginLeft: Components.Schemas.Dimension? = nil,
                marginRight: Components.Schemas.Dimension? = nil,
                marginTop: Components.Schemas.Dimension? = nil,
                pageNumberStart: Swift.Int32? = nil,
                pageSize: Components.Schemas.Size? = nil,
                useCustomHeaderFooterMargins: Swift.Bool? = nil,
                useEvenPageHeaderFooter: Swift.Bool? = nil,
                useFirstPageHeaderFooter: Swift.Bool? = nil
            ) {
                self.background = background
                self.defaultFooterId = defaultFooterId
                self.defaultHeaderId = defaultHeaderId
                self.evenPageFooterId = evenPageFooterId
                self.evenPageHeaderId = evenPageHeaderId
                self.firstPageFooterId = firstPageFooterId
                self.firstPageHeaderId = firstPageHeaderId
                self.flipPageOrientation = flipPageOrientation
                self.marginBottom = marginBottom
                self.marginFooter = marginFooter
                self.marginHeader = marginHeader
                self.marginLeft = marginLeft
                self.marginRight = marginRight
                self.marginTop = marginTop
                self.pageNumberStart = pageNumberStart
                self.pageSize = pageSize
                self.useCustomHeaderFooterMargins = useCustomHeaderFooterMargins
                self.useEvenPageHeaderFooter = useEvenPageHeaderFooter
                self.useFirstPageHeaderFooter = useFirstPageHeaderFooter
            }
            public enum CodingKeys: String, CodingKey {
                case background
                case defaultFooterId
                case defaultHeaderId
                case evenPageFooterId
                case evenPageHeaderId
                case firstPageFooterId
                case firstPageHeaderId
                case flipPageOrientation
                case marginBottom
                case marginFooter
                case marginHeader
                case marginLeft
                case marginRight
                case marginTop
                case pageNumberStart
                case pageSize
                case useCustomHeaderFooterMargins
                case useEvenPageHeaderFooter
                case useFirstPageHeaderFooter
            }
        }
        /// A mask that indicates which of the fields on the base DocumentStyle have been changed in this suggestion. For any field set to true, there's a new suggested value.
        ///
        /// - Remark: Generated from `#/components/schemas/DocumentStyleSuggestionState`.
        public struct DocumentStyleSuggestionState: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/DocumentStyleSuggestionState/backgroundSuggestionState`.
            public var backgroundSuggestionState: Components.Schemas.BackgroundSuggestionState?
            /// Indicates if there was a suggested change to default_footer_id.
            ///
            /// - Remark: Generated from `#/components/schemas/DocumentStyleSuggestionState/defaultFooterIdSuggested`.
            public var defaultFooterIdSuggested: Swift.Bool?
            /// Indicates if there was a suggested change to default_header_id.
            ///
            /// - Remark: Generated from `#/components/schemas/DocumentStyleSuggestionState/defaultHeaderIdSuggested`.
            public var defaultHeaderIdSuggested: Swift.Bool?
            /// Indicates if there was a suggested change to even_page_footer_id.
            ///
            /// - Remark: Generated from `#/components/schemas/DocumentStyleSuggestionState/evenPageFooterIdSuggested`.
            public var evenPageFooterIdSuggested: Swift.Bool?
            /// Indicates if there was a suggested change to even_page_header_id.
            ///
            /// - Remark: Generated from `#/components/schemas/DocumentStyleSuggestionState/evenPageHeaderIdSuggested`.
            public var evenPageHeaderIdSuggested: Swift.Bool?
            /// Indicates if there was a suggested change to first_page_footer_id.
            ///
            /// - Remark: Generated from `#/components/schemas/DocumentStyleSuggestionState/firstPageFooterIdSuggested`.
            public var firstPageFooterIdSuggested: Swift.Bool?
            /// Indicates if there was a suggested change to first_page_header_id.
            ///
            /// - Remark: Generated from `#/components/schemas/DocumentStyleSuggestionState/firstPageHeaderIdSuggested`.
            public var firstPageHeaderIdSuggested: Swift.Bool?
            /// Optional. Indicates if there was a suggested change to flip_page_orientation.
            ///
            /// - Remark: Generated from `#/components/schemas/DocumentStyleSuggestionState/flipPageOrientationSuggested`.
            public var flipPageOrientationSuggested: Swift.Bool?
            /// Indicates if there was a suggested change to margin_bottom.
            ///
            /// - Remark: Generated from `#/components/schemas/DocumentStyleSuggestionState/marginBottomSuggested`.
            public var marginBottomSuggested: Swift.Bool?
            /// Indicates if there was a suggested change to margin_footer.
            ///
            /// - Remark: Generated from `#/components/schemas/DocumentStyleSuggestionState/marginFooterSuggested`.
            public var marginFooterSuggested: Swift.Bool?
            /// Indicates if there was a suggested change to margin_header.
            ///
            /// - Remark: Generated from `#/components/schemas/DocumentStyleSuggestionState/marginHeaderSuggested`.
            public var marginHeaderSuggested: Swift.Bool?
            /// Indicates if there was a suggested change to margin_left.
            ///
            /// - Remark: Generated from `#/components/schemas/DocumentStyleSuggestionState/marginLeftSuggested`.
            public var marginLeftSuggested: Swift.Bool?
            /// Indicates if there was a suggested change to margin_right.
            ///
            /// - Remark: Generated from `#/components/schemas/DocumentStyleSuggestionState/marginRightSuggested`.
            public var marginRightSuggested: Swift.Bool?
            /// Indicates if there was a suggested change to margin_top.
            ///
            /// - Remark: Generated from `#/components/schemas/DocumentStyleSuggestionState/marginTopSuggested`.
            public var marginTopSuggested: Swift.Bool?
            /// Indicates if there was a suggested change to page_number_start.
            ///
            /// - Remark: Generated from `#/components/schemas/DocumentStyleSuggestionState/pageNumberStartSuggested`.
            public var pageNumberStartSuggested: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/DocumentStyleSuggestionState/pageSizeSuggestionState`.
            public var pageSizeSuggestionState: Components.Schemas.SizeSuggestionState?
            /// Indicates if there was a suggested change to use_custom_header_footer_margins.
            ///
            /// - Remark: Generated from `#/components/schemas/DocumentStyleSuggestionState/useCustomHeaderFooterMarginsSuggested`.
            public var useCustomHeaderFooterMarginsSuggested: Swift.Bool?
            /// Indicates if there was a suggested change to use_even_page_header_footer.
            ///
            /// - Remark: Generated from `#/components/schemas/DocumentStyleSuggestionState/useEvenPageHeaderFooterSuggested`.
            public var useEvenPageHeaderFooterSuggested: Swift.Bool?
            /// Indicates if there was a suggested change to use_first_page_header_footer.
            ///
            /// - Remark: Generated from `#/components/schemas/DocumentStyleSuggestionState/useFirstPageHeaderFooterSuggested`.
            public var useFirstPageHeaderFooterSuggested: Swift.Bool?
            /// Creates a new `DocumentStyleSuggestionState`.
            ///
            /// - Parameters:
            ///   - backgroundSuggestionState:
            ///   - defaultFooterIdSuggested: Indicates if there was a suggested change to default_footer_id.
            ///   - defaultHeaderIdSuggested: Indicates if there was a suggested change to default_header_id.
            ///   - evenPageFooterIdSuggested: Indicates if there was a suggested change to even_page_footer_id.
            ///   - evenPageHeaderIdSuggested: Indicates if there was a suggested change to even_page_header_id.
            ///   - firstPageFooterIdSuggested: Indicates if there was a suggested change to first_page_footer_id.
            ///   - firstPageHeaderIdSuggested: Indicates if there was a suggested change to first_page_header_id.
            ///   - flipPageOrientationSuggested: Optional. Indicates if there was a suggested change to flip_page_orientation.
            ///   - marginBottomSuggested: Indicates if there was a suggested change to margin_bottom.
            ///   - marginFooterSuggested: Indicates if there was a suggested change to margin_footer.
            ///   - marginHeaderSuggested: Indicates if there was a suggested change to margin_header.
            ///   - marginLeftSuggested: Indicates if there was a suggested change to margin_left.
            ///   - marginRightSuggested: Indicates if there was a suggested change to margin_right.
            ///   - marginTopSuggested: Indicates if there was a suggested change to margin_top.
            ///   - pageNumberStartSuggested: Indicates if there was a suggested change to page_number_start.
            ///   - pageSizeSuggestionState:
            ///   - useCustomHeaderFooterMarginsSuggested: Indicates if there was a suggested change to use_custom_header_footer_margins.
            ///   - useEvenPageHeaderFooterSuggested: Indicates if there was a suggested change to use_even_page_header_footer.
            ///   - useFirstPageHeaderFooterSuggested: Indicates if there was a suggested change to use_first_page_header_footer.
            public init(
                backgroundSuggestionState: Components.Schemas.BackgroundSuggestionState? = nil,
                defaultFooterIdSuggested: Swift.Bool? = nil,
                defaultHeaderIdSuggested: Swift.Bool? = nil,
                evenPageFooterIdSuggested: Swift.Bool? = nil,
                evenPageHeaderIdSuggested: Swift.Bool? = nil,
                firstPageFooterIdSuggested: Swift.Bool? = nil,
                firstPageHeaderIdSuggested: Swift.Bool? = nil,
                flipPageOrientationSuggested: Swift.Bool? = nil,
                marginBottomSuggested: Swift.Bool? = nil,
                marginFooterSuggested: Swift.Bool? = nil,
                marginHeaderSuggested: Swift.Bool? = nil,
                marginLeftSuggested: Swift.Bool? = nil,
                marginRightSuggested: Swift.Bool? = nil,
                marginTopSuggested: Swift.Bool? = nil,
                pageNumberStartSuggested: Swift.Bool? = nil,
                pageSizeSuggestionState: Components.Schemas.SizeSuggestionState? = nil,
                useCustomHeaderFooterMarginsSuggested: Swift.Bool? = nil,
                useEvenPageHeaderFooterSuggested: Swift.Bool? = nil,
                useFirstPageHeaderFooterSuggested: Swift.Bool? = nil
            ) {
                self.backgroundSuggestionState = backgroundSuggestionState
                self.defaultFooterIdSuggested = defaultFooterIdSuggested
                self.defaultHeaderIdSuggested = defaultHeaderIdSuggested
                self.evenPageFooterIdSuggested = evenPageFooterIdSuggested
                self.evenPageHeaderIdSuggested = evenPageHeaderIdSuggested
                self.firstPageFooterIdSuggested = firstPageFooterIdSuggested
                self.firstPageHeaderIdSuggested = firstPageHeaderIdSuggested
                self.flipPageOrientationSuggested = flipPageOrientationSuggested
                self.marginBottomSuggested = marginBottomSuggested
                self.marginFooterSuggested = marginFooterSuggested
                self.marginHeaderSuggested = marginHeaderSuggested
                self.marginLeftSuggested = marginLeftSuggested
                self.marginRightSuggested = marginRightSuggested
                self.marginTopSuggested = marginTopSuggested
                self.pageNumberStartSuggested = pageNumberStartSuggested
                self.pageSizeSuggestionState = pageSizeSuggestionState
                self.useCustomHeaderFooterMarginsSuggested = useCustomHeaderFooterMarginsSuggested
                self.useEvenPageHeaderFooterSuggested = useEvenPageHeaderFooterSuggested
                self.useFirstPageHeaderFooterSuggested = useFirstPageHeaderFooterSuggested
            }
            public enum CodingKeys: String, CodingKey {
                case backgroundSuggestionState
                case defaultFooterIdSuggested
                case defaultHeaderIdSuggested
                case evenPageFooterIdSuggested
                case evenPageHeaderIdSuggested
                case firstPageFooterIdSuggested
                case firstPageHeaderIdSuggested
                case flipPageOrientationSuggested
                case marginBottomSuggested
                case marginFooterSuggested
                case marginHeaderSuggested
                case marginLeftSuggested
                case marginRightSuggested
                case marginTopSuggested
                case pageNumberStartSuggested
                case pageSizeSuggestionState
                case useCustomHeaderFooterMarginsSuggested
                case useEvenPageHeaderFooterSuggested
                case useFirstPageHeaderFooterSuggested
            }
        }
        /// The properties of an embedded drawing and used to differentiate the object type. An embedded drawing is one that's created and edited within a document. Note that extensive details are not supported.
        ///
        /// - Remark: Generated from `#/components/schemas/EmbeddedDrawingProperties`.
        public typealias EmbeddedDrawingProperties = OpenAPIRuntime.OpenAPIObjectContainer
        /// A mask that indicates which of the fields on the base EmbeddedDrawingProperties have been changed in this suggestion. For any field set to true, there's a new suggested value.
        ///
        /// - Remark: Generated from `#/components/schemas/EmbeddedDrawingPropertiesSuggestionState`.
        public typealias EmbeddedDrawingPropertiesSuggestionState = OpenAPIRuntime.OpenAPIObjectContainer
        /// An embedded object in the document.
        ///
        /// - Remark: Generated from `#/components/schemas/EmbeddedObject`.
        public struct EmbeddedObject: Codable, Hashable, Sendable {
            /// The description of the embedded object. The `title` and `description` are both combined to display alt text.
            ///
            /// - Remark: Generated from `#/components/schemas/EmbeddedObject/description`.
            public var description: Swift.String?
            /// - Remark: Generated from `#/components/schemas/EmbeddedObject/embeddedDrawingProperties`.
            public var embeddedDrawingProperties: Components.Schemas.EmbeddedDrawingProperties?
            /// - Remark: Generated from `#/components/schemas/EmbeddedObject/embeddedObjectBorder`.
            public var embeddedObjectBorder: Components.Schemas.EmbeddedObjectBorder?
            /// - Remark: Generated from `#/components/schemas/EmbeddedObject/imageProperties`.
            public var imageProperties: Components.Schemas.ImageProperties?
            /// - Remark: Generated from `#/components/schemas/EmbeddedObject/linkedContentReference`.
            public var linkedContentReference: Components.Schemas.LinkedContentReference?
            /// - Remark: Generated from `#/components/schemas/EmbeddedObject/marginBottom`.
            public var marginBottom: Components.Schemas.Dimension?
            /// - Remark: Generated from `#/components/schemas/EmbeddedObject/marginLeft`.
            public var marginLeft: Components.Schemas.Dimension?
            /// - Remark: Generated from `#/components/schemas/EmbeddedObject/marginRight`.
            public var marginRight: Components.Schemas.Dimension?
            /// - Remark: Generated from `#/components/schemas/EmbeddedObject/marginTop`.
            public var marginTop: Components.Schemas.Dimension?
            /// - Remark: Generated from `#/components/schemas/EmbeddedObject/size`.
            public var size: Components.Schemas.Size?
            /// The title of the embedded object. The `title` and `description` are both combined to display alt text.
            ///
            /// - Remark: Generated from `#/components/schemas/EmbeddedObject/title`.
            public var title: Swift.String?
            /// Creates a new `EmbeddedObject`.
            ///
            /// - Parameters:
            ///   - description: The description of the embedded object. The `title` and `description` are both combined to display alt text.
            ///   - embeddedDrawingProperties:
            ///   - embeddedObjectBorder:
            ///   - imageProperties:
            ///   - linkedContentReference:
            ///   - marginBottom:
            ///   - marginLeft:
            ///   - marginRight:
            ///   - marginTop:
            ///   - size:
            ///   - title: The title of the embedded object. The `title` and `description` are both combined to display alt text.
            public init(
                description: Swift.String? = nil,
                embeddedDrawingProperties: Components.Schemas.EmbeddedDrawingProperties? = nil,
                embeddedObjectBorder: Components.Schemas.EmbeddedObjectBorder? = nil,
                imageProperties: Components.Schemas.ImageProperties? = nil,
                linkedContentReference: Components.Schemas.LinkedContentReference? = nil,
                marginBottom: Components.Schemas.Dimension? = nil,
                marginLeft: Components.Schemas.Dimension? = nil,
                marginRight: Components.Schemas.Dimension? = nil,
                marginTop: Components.Schemas.Dimension? = nil,
                size: Components.Schemas.Size? = nil,
                title: Swift.String? = nil
            ) {
                self.description = description
                self.embeddedDrawingProperties = embeddedDrawingProperties
                self.embeddedObjectBorder = embeddedObjectBorder
                self.imageProperties = imageProperties
                self.linkedContentReference = linkedContentReference
                self.marginBottom = marginBottom
                self.marginLeft = marginLeft
                self.marginRight = marginRight
                self.marginTop = marginTop
                self.size = size
                self.title = title
            }
            public enum CodingKeys: String, CodingKey {
                case description
                case embeddedDrawingProperties
                case embeddedObjectBorder
                case imageProperties
                case linkedContentReference
                case marginBottom
                case marginLeft
                case marginRight
                case marginTop
                case size
                case title
            }
        }
        /// A border around an EmbeddedObject.
        ///
        /// - Remark: Generated from `#/components/schemas/EmbeddedObjectBorder`.
        public struct EmbeddedObjectBorder: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/EmbeddedObjectBorder/color`.
            public var color: Components.Schemas.OptionalColor?
            /// The dash style of the border.
            ///
            /// - Remark: Generated from `#/components/schemas/EmbeddedObjectBorder/dashStyle`.
            @frozen public enum DashStylePayload: String, Codable, Hashable, Sendable, CaseIterable {
                case dashStyleUnspecified = "DASH_STYLE_UNSPECIFIED"
                case solid = "SOLID"
                case dot = "DOT"
                case dash = "DASH"
            }
            /// The dash style of the border.
            ///
            /// - Remark: Generated from `#/components/schemas/EmbeddedObjectBorder/dashStyle`.
            public var dashStyle: Components.Schemas.EmbeddedObjectBorder.DashStylePayload?
            /// The property state of the border property.
            ///
            /// - Remark: Generated from `#/components/schemas/EmbeddedObjectBorder/propertyState`.
            @frozen public enum PropertyStatePayload: String, Codable, Hashable, Sendable, CaseIterable {
                case rendered = "RENDERED"
                case notRendered = "NOT_RENDERED"
            }
            /// The property state of the border property.
            ///
            /// - Remark: Generated from `#/components/schemas/EmbeddedObjectBorder/propertyState`.
            public var propertyState: Components.Schemas.EmbeddedObjectBorder.PropertyStatePayload?
            /// - Remark: Generated from `#/components/schemas/EmbeddedObjectBorder/width`.
            public var width: Components.Schemas.Dimension?
            /// Creates a new `EmbeddedObjectBorder`.
            ///
            /// - Parameters:
            ///   - color:
            ///   - dashStyle: The dash style of the border.
            ///   - propertyState: The property state of the border property.
            ///   - width:
            public init(
                color: Components.Schemas.OptionalColor? = nil,
                dashStyle: Components.Schemas.EmbeddedObjectBorder.DashStylePayload? = nil,
                propertyState: Components.Schemas.EmbeddedObjectBorder.PropertyStatePayload? = nil,
                width: Components.Schemas.Dimension? = nil
            ) {
                self.color = color
                self.dashStyle = dashStyle
                self.propertyState = propertyState
                self.width = width
            }
            public enum CodingKeys: String, CodingKey {
                case color
                case dashStyle
                case propertyState
                case width
            }
        }
        /// A mask that indicates which of the fields on the base EmbeddedObjectBorder have been changed in this suggestion. For any field set to true, there's a new suggested value.
        ///
        /// - Remark: Generated from `#/components/schemas/EmbeddedObjectBorderSuggestionState`.
        public struct EmbeddedObjectBorderSuggestionState: Codable, Hashable, Sendable {
            /// Indicates if there was a suggested change to color.
            ///
            /// - Remark: Generated from `#/components/schemas/EmbeddedObjectBorderSuggestionState/colorSuggested`.
            public var colorSuggested: Swift.Bool?
            /// Indicates if there was a suggested change to dash_style.
            ///
            /// - Remark: Generated from `#/components/schemas/EmbeddedObjectBorderSuggestionState/dashStyleSuggested`.
            public var dashStyleSuggested: Swift.Bool?
            /// Indicates if there was a suggested change to property_state.
            ///
            /// - Remark: Generated from `#/components/schemas/EmbeddedObjectBorderSuggestionState/propertyStateSuggested`.
            public var propertyStateSuggested: Swift.Bool?
            /// Indicates if there was a suggested change to width.
            ///
            /// - Remark: Generated from `#/components/schemas/EmbeddedObjectBorderSuggestionState/widthSuggested`.
            public var widthSuggested: Swift.Bool?
            /// Creates a new `EmbeddedObjectBorderSuggestionState`.
            ///
            /// - Parameters:
            ///   - colorSuggested: Indicates if there was a suggested change to color.
            ///   - dashStyleSuggested: Indicates if there was a suggested change to dash_style.
            ///   - propertyStateSuggested: Indicates if there was a suggested change to property_state.
            ///   - widthSuggested: Indicates if there was a suggested change to width.
            public init(
                colorSuggested: Swift.Bool? = nil,
                dashStyleSuggested: Swift.Bool? = nil,
                propertyStateSuggested: Swift.Bool? = nil,
                widthSuggested: Swift.Bool? = nil
            ) {
                self.colorSuggested = colorSuggested
                self.dashStyleSuggested = dashStyleSuggested
                self.propertyStateSuggested = propertyStateSuggested
                self.widthSuggested = widthSuggested
            }
            public enum CodingKeys: String, CodingKey {
                case colorSuggested
                case dashStyleSuggested
                case propertyStateSuggested
                case widthSuggested
            }
        }
        /// A mask that indicates which of the fields on the base EmbeddedObject have been changed in this suggestion. For any field set to true, there's a new suggested value.
        ///
        /// - Remark: Generated from `#/components/schemas/EmbeddedObjectSuggestionState`.
        public struct EmbeddedObjectSuggestionState: Codable, Hashable, Sendable {
            /// Indicates if there was a suggested change to description.
            ///
            /// - Remark: Generated from `#/components/schemas/EmbeddedObjectSuggestionState/descriptionSuggested`.
            public var descriptionSuggested: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/EmbeddedObjectSuggestionState/embeddedDrawingPropertiesSuggestionState`.
            public var embeddedDrawingPropertiesSuggestionState: Components.Schemas.EmbeddedDrawingPropertiesSuggestionState?
            /// - Remark: Generated from `#/components/schemas/EmbeddedObjectSuggestionState/embeddedObjectBorderSuggestionState`.
            public var embeddedObjectBorderSuggestionState: Components.Schemas.EmbeddedObjectBorderSuggestionState?
            /// - Remark: Generated from `#/components/schemas/EmbeddedObjectSuggestionState/imagePropertiesSuggestionState`.
            public var imagePropertiesSuggestionState: Components.Schemas.ImagePropertiesSuggestionState?
            /// - Remark: Generated from `#/components/schemas/EmbeddedObjectSuggestionState/linkedContentReferenceSuggestionState`.
            public var linkedContentReferenceSuggestionState: Components.Schemas.LinkedContentReferenceSuggestionState?
            /// Indicates if there was a suggested change to margin_bottom.
            ///
            /// - Remark: Generated from `#/components/schemas/EmbeddedObjectSuggestionState/marginBottomSuggested`.
            public var marginBottomSuggested: Swift.Bool?
            /// Indicates if there was a suggested change to margin_left.
            ///
            /// - Remark: Generated from `#/components/schemas/EmbeddedObjectSuggestionState/marginLeftSuggested`.
            public var marginLeftSuggested: Swift.Bool?
            /// Indicates if there was a suggested change to margin_right.
            ///
            /// - Remark: Generated from `#/components/schemas/EmbeddedObjectSuggestionState/marginRightSuggested`.
            public var marginRightSuggested: Swift.Bool?
            /// Indicates if there was a suggested change to margin_top.
            ///
            /// - Remark: Generated from `#/components/schemas/EmbeddedObjectSuggestionState/marginTopSuggested`.
            public var marginTopSuggested: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/EmbeddedObjectSuggestionState/sizeSuggestionState`.
            public var sizeSuggestionState: Components.Schemas.SizeSuggestionState?
            /// Indicates if there was a suggested change to title.
            ///
            /// - Remark: Generated from `#/components/schemas/EmbeddedObjectSuggestionState/titleSuggested`.
            public var titleSuggested: Swift.Bool?
            /// Creates a new `EmbeddedObjectSuggestionState`.
            ///
            /// - Parameters:
            ///   - descriptionSuggested: Indicates if there was a suggested change to description.
            ///   - embeddedDrawingPropertiesSuggestionState:
            ///   - embeddedObjectBorderSuggestionState:
            ///   - imagePropertiesSuggestionState:
            ///   - linkedContentReferenceSuggestionState:
            ///   - marginBottomSuggested: Indicates if there was a suggested change to margin_bottom.
            ///   - marginLeftSuggested: Indicates if there was a suggested change to margin_left.
            ///   - marginRightSuggested: Indicates if there was a suggested change to margin_right.
            ///   - marginTopSuggested: Indicates if there was a suggested change to margin_top.
            ///   - sizeSuggestionState:
            ///   - titleSuggested: Indicates if there was a suggested change to title.
            public init(
                descriptionSuggested: Swift.Bool? = nil,
                embeddedDrawingPropertiesSuggestionState: Components.Schemas.EmbeddedDrawingPropertiesSuggestionState? = nil,
                embeddedObjectBorderSuggestionState: Components.Schemas.EmbeddedObjectBorderSuggestionState? = nil,
                imagePropertiesSuggestionState: Components.Schemas.ImagePropertiesSuggestionState? = nil,
                linkedContentReferenceSuggestionState: Components.Schemas.LinkedContentReferenceSuggestionState? = nil,
                marginBottomSuggested: Swift.Bool? = nil,
                marginLeftSuggested: Swift.Bool? = nil,
                marginRightSuggested: Swift.Bool? = nil,
                marginTopSuggested: Swift.Bool? = nil,
                sizeSuggestionState: Components.Schemas.SizeSuggestionState? = nil,
                titleSuggested: Swift.Bool? = nil
            ) {
                self.descriptionSuggested = descriptionSuggested
                self.embeddedDrawingPropertiesSuggestionState = embeddedDrawingPropertiesSuggestionState
                self.embeddedObjectBorderSuggestionState = embeddedObjectBorderSuggestionState
                self.imagePropertiesSuggestionState = imagePropertiesSuggestionState
                self.linkedContentReferenceSuggestionState = linkedContentReferenceSuggestionState
                self.marginBottomSuggested = marginBottomSuggested
                self.marginLeftSuggested = marginLeftSuggested
                self.marginRightSuggested = marginRightSuggested
                self.marginTopSuggested = marginTopSuggested
                self.sizeSuggestionState = sizeSuggestionState
                self.titleSuggested = titleSuggested
            }
            public enum CodingKeys: String, CodingKey {
                case descriptionSuggested
                case embeddedDrawingPropertiesSuggestionState
                case embeddedObjectBorderSuggestionState
                case imagePropertiesSuggestionState
                case linkedContentReferenceSuggestionState
                case marginBottomSuggested
                case marginLeftSuggested
                case marginRightSuggested
                case marginTopSuggested
                case sizeSuggestionState
                case titleSuggested
            }
        }
        /// Location at the end of a body, header, footer or footnote. The location is immediately before the last newline in the document segment.
        ///
        /// - Remark: Generated from `#/components/schemas/EndOfSegmentLocation`.
        public struct EndOfSegmentLocation: Codable, Hashable, Sendable {
            /// The ID of the header, footer or footnote the location is in. An empty segment ID signifies the document's body.
            ///
            /// - Remark: Generated from `#/components/schemas/EndOfSegmentLocation/segmentId`.
            public var segmentId: Swift.String?
            /// Creates a new `EndOfSegmentLocation`.
            ///
            /// - Parameters:
            ///   - segmentId: The ID of the header, footer or footnote the location is in. An empty segment ID signifies the document's body.
            public init(segmentId: Swift.String? = nil) {
                self.segmentId = segmentId
            }
            public enum CodingKeys: String, CodingKey {
                case segmentId
            }
        }
        /// A ParagraphElement representing an equation.
        ///
        /// - Remark: Generated from `#/components/schemas/Equation`.
        public struct Equation: Codable, Hashable, Sendable {
            /// The suggested deletion IDs. If empty, then there are no suggested deletions of this content.
            ///
            /// - Remark: Generated from `#/components/schemas/Equation/suggestedDeletionIds`.
            public var suggestedDeletionIds: [Swift.String]?
            /// The suggested insertion IDs. An Equation may have multiple insertion IDs if it's a nested suggested change. If empty, then this is not a suggested insertion.
            ///
            /// - Remark: Generated from `#/components/schemas/Equation/suggestedInsertionIds`.
            public var suggestedInsertionIds: [Swift.String]?
            /// Creates a new `Equation`.
            ///
            /// - Parameters:
            ///   - suggestedDeletionIds: The suggested deletion IDs. If empty, then there are no suggested deletions of this content.
            ///   - suggestedInsertionIds: The suggested insertion IDs. An Equation may have multiple insertion IDs if it's a nested suggested change. If empty, then this is not a suggested insertion.
            public init(
                suggestedDeletionIds: [Swift.String]? = nil,
                suggestedInsertionIds: [Swift.String]? = nil
            ) {
                self.suggestedDeletionIds = suggestedDeletionIds
                self.suggestedInsertionIds = suggestedInsertionIds
            }
            public enum CodingKeys: String, CodingKey {
                case suggestedDeletionIds
                case suggestedInsertionIds
            }
        }
        /// A document footer.
        ///
        /// - Remark: Generated from `#/components/schemas/Footer`.
        public struct Footer: Codable, Hashable, Sendable {
            /// The contents of the footer. The indexes for a footer's content begin at zero.
            ///
            /// - Remark: Generated from `#/components/schemas/Footer/content`.
            public var content: [Components.Schemas.StructuralElement]?
            /// The ID of the footer.
            ///
            /// - Remark: Generated from `#/components/schemas/Footer/footerId`.
            public var footerId: Swift.String?
            /// Creates a new `Footer`.
            ///
            /// - Parameters:
            ///   - content: The contents of the footer. The indexes for a footer's content begin at zero.
            ///   - footerId: The ID of the footer.
            public init(
                content: [Components.Schemas.StructuralElement]? = nil,
                footerId: Swift.String? = nil
            ) {
                self.content = content
                self.footerId = footerId
            }
            public enum CodingKeys: String, CodingKey {
                case content
                case footerId
            }
        }
        /// A document footnote.
        ///
        /// - Remark: Generated from `#/components/schemas/Footnote`.
        public struct Footnote: Codable, Hashable, Sendable {
            /// The contents of the footnote. The indexes for a footnote's content begin at zero.
            ///
            /// - Remark: Generated from `#/components/schemas/Footnote/content`.
            public var content: [Components.Schemas.StructuralElement]?
            /// The ID of the footnote.
            ///
            /// - Remark: Generated from `#/components/schemas/Footnote/footnoteId`.
            public var footnoteId: Swift.String?
            /// Creates a new `Footnote`.
            ///
            /// - Parameters:
            ///   - content: The contents of the footnote. The indexes for a footnote's content begin at zero.
            ///   - footnoteId: The ID of the footnote.
            public init(
                content: [Components.Schemas.StructuralElement]? = nil,
                footnoteId: Swift.String? = nil
            ) {
                self.content = content
                self.footnoteId = footnoteId
            }
            public enum CodingKeys: String, CodingKey {
                case content
                case footnoteId
            }
        }
        /// A ParagraphElement representing a footnote reference. A footnote reference is the inline content rendered with a number and is used to identify the footnote.
        ///
        /// - Remark: Generated from `#/components/schemas/FootnoteReference`.
        public struct FootnoteReference: Codable, Hashable, Sendable {
            /// The ID of the footnote that contains the content of this footnote reference.
            ///
            /// - Remark: Generated from `#/components/schemas/FootnoteReference/footnoteId`.
            public var footnoteId: Swift.String?
            /// The rendered number of this footnote.
            ///
            /// - Remark: Generated from `#/components/schemas/FootnoteReference/footnoteNumber`.
            public var footnoteNumber: Swift.String?
            /// The suggested deletion IDs. If empty, then there are no suggested deletions of this content.
            ///
            /// - Remark: Generated from `#/components/schemas/FootnoteReference/suggestedDeletionIds`.
            public var suggestedDeletionIds: [Swift.String]?
            /// The suggested insertion IDs. A FootnoteReference may have multiple insertion IDs if it's a nested suggested change. If empty, then this is not a suggested insertion.
            ///
            /// - Remark: Generated from `#/components/schemas/FootnoteReference/suggestedInsertionIds`.
            public var suggestedInsertionIds: [Swift.String]?
            /// The suggested text style changes to this FootnoteReference, keyed by suggestion ID.
            ///
            /// - Remark: Generated from `#/components/schemas/FootnoteReference/suggestedTextStyleChanges`.
            public struct SuggestedTextStyleChangesPayload: Codable, Hashable, Sendable {
                /// A container of undocumented properties.
                public var additionalProperties: [String: Components.Schemas.SuggestedTextStyle]
                /// Creates a new `SuggestedTextStyleChangesPayload`.
                ///
                /// - Parameters:
                ///   - additionalProperties: A container of undocumented properties.
                public init(additionalProperties: [String: Components.Schemas.SuggestedTextStyle] = .init()) {
                    self.additionalProperties = additionalProperties
                }
                public init(from decoder: any Decoder) throws {
                    additionalProperties = try decoder.decodeAdditionalProperties(knownKeys: [])
                }
                public func encode(to encoder: any Encoder) throws {
                    try encoder.encodeAdditionalProperties(additionalProperties)
                }
            }
            /// The suggested text style changes to this FootnoteReference, keyed by suggestion ID.
            ///
            /// - Remark: Generated from `#/components/schemas/FootnoteReference/suggestedTextStyleChanges`.
            public var suggestedTextStyleChanges: Components.Schemas.FootnoteReference.SuggestedTextStyleChangesPayload?
            /// - Remark: Generated from `#/components/schemas/FootnoteReference/textStyle`.
            public var textStyle: Components.Schemas.TextStyle?
            /// Creates a new `FootnoteReference`.
            ///
            /// - Parameters:
            ///   - footnoteId: The ID of the footnote that contains the content of this footnote reference.
            ///   - footnoteNumber: The rendered number of this footnote.
            ///   - suggestedDeletionIds: The suggested deletion IDs. If empty, then there are no suggested deletions of this content.
            ///   - suggestedInsertionIds: The suggested insertion IDs. A FootnoteReference may have multiple insertion IDs if it's a nested suggested change. If empty, then this is not a suggested insertion.
            ///   - suggestedTextStyleChanges: The suggested text style changes to this FootnoteReference, keyed by suggestion ID.
            ///   - textStyle:
            public init(
                footnoteId: Swift.String? = nil,
                footnoteNumber: Swift.String? = nil,
                suggestedDeletionIds: [Swift.String]? = nil,
                suggestedInsertionIds: [Swift.String]? = nil,
                suggestedTextStyleChanges: Components.Schemas.FootnoteReference.SuggestedTextStyleChangesPayload? = nil,
                textStyle: Components.Schemas.TextStyle? = nil
            ) {
                self.footnoteId = footnoteId
                self.footnoteNumber = footnoteNumber
                self.suggestedDeletionIds = suggestedDeletionIds
                self.suggestedInsertionIds = suggestedInsertionIds
                self.suggestedTextStyleChanges = suggestedTextStyleChanges
                self.textStyle = textStyle
            }
            public enum CodingKeys: String, CodingKey {
                case footnoteId
                case footnoteNumber
                case suggestedDeletionIds
                case suggestedInsertionIds
                case suggestedTextStyleChanges
                case textStyle
            }
        }
        /// A document header.
        ///
        /// - Remark: Generated from `#/components/schemas/Header`.
        public struct Header: Codable, Hashable, Sendable {
            /// The contents of the header. The indexes for a header's content begin at zero.
            ///
            /// - Remark: Generated from `#/components/schemas/Header/content`.
            public var content: [Components.Schemas.StructuralElement]?
            /// The ID of the header.
            ///
            /// - Remark: Generated from `#/components/schemas/Header/headerId`.
            public var headerId: Swift.String?
            /// Creates a new `Header`.
            ///
            /// - Parameters:
            ///   - content: The contents of the header. The indexes for a header's content begin at zero.
            ///   - headerId: The ID of the header.
            public init(
                content: [Components.Schemas.StructuralElement]? = nil,
                headerId: Swift.String? = nil
            ) {
                self.content = content
                self.headerId = headerId
            }
            public enum CodingKeys: String, CodingKey {
                case content
                case headerId
            }
        }
        /// A ParagraphElement representing a horizontal line.
        ///
        /// - Remark: Generated from `#/components/schemas/HorizontalRule`.
        public struct HorizontalRule: Codable, Hashable, Sendable {
            /// The suggested deletion IDs. If empty, then there are no suggested deletions of this content.
            ///
            /// - Remark: Generated from `#/components/schemas/HorizontalRule/suggestedDeletionIds`.
            public var suggestedDeletionIds: [Swift.String]?
            /// The suggested insertion IDs. A HorizontalRule may have multiple insertion IDs if it is a nested suggested change. If empty, then this is not a suggested insertion.
            ///
            /// - Remark: Generated from `#/components/schemas/HorizontalRule/suggestedInsertionIds`.
            public var suggestedInsertionIds: [Swift.String]?
            /// The suggested text style changes to this HorizontalRule, keyed by suggestion ID.
            ///
            /// - Remark: Generated from `#/components/schemas/HorizontalRule/suggestedTextStyleChanges`.
            public struct SuggestedTextStyleChangesPayload: Codable, Hashable, Sendable {
                /// A container of undocumented properties.
                public var additionalProperties: [String: Components.Schemas.SuggestedTextStyle]
                /// Creates a new `SuggestedTextStyleChangesPayload`.
                ///
                /// - Parameters:
                ///   - additionalProperties: A container of undocumented properties.
                public init(additionalProperties: [String: Components.Schemas.SuggestedTextStyle] = .init()) {
                    self.additionalProperties = additionalProperties
                }
                public init(from decoder: any Decoder) throws {
                    additionalProperties = try decoder.decodeAdditionalProperties(knownKeys: [])
                }
                public func encode(to encoder: any Encoder) throws {
                    try encoder.encodeAdditionalProperties(additionalProperties)
                }
            }
            /// The suggested text style changes to this HorizontalRule, keyed by suggestion ID.
            ///
            /// - Remark: Generated from `#/components/schemas/HorizontalRule/suggestedTextStyleChanges`.
            public var suggestedTextStyleChanges: Components.Schemas.HorizontalRule.SuggestedTextStyleChangesPayload?
            /// - Remark: Generated from `#/components/schemas/HorizontalRule/textStyle`.
            public var textStyle: Components.Schemas.TextStyle?
            /// Creates a new `HorizontalRule`.
            ///
            /// - Parameters:
            ///   - suggestedDeletionIds: The suggested deletion IDs. If empty, then there are no suggested deletions of this content.
            ///   - suggestedInsertionIds: The suggested insertion IDs. A HorizontalRule may have multiple insertion IDs if it is a nested suggested change. If empty, then this is not a suggested insertion.
            ///   - suggestedTextStyleChanges: The suggested text style changes to this HorizontalRule, keyed by suggestion ID.
            ///   - textStyle:
            public init(
                suggestedDeletionIds: [Swift.String]? = nil,
                suggestedInsertionIds: [Swift.String]? = nil,
                suggestedTextStyleChanges: Components.Schemas.HorizontalRule.SuggestedTextStyleChangesPayload? = nil,
                textStyle: Components.Schemas.TextStyle? = nil
            ) {
                self.suggestedDeletionIds = suggestedDeletionIds
                self.suggestedInsertionIds = suggestedInsertionIds
                self.suggestedTextStyleChanges = suggestedTextStyleChanges
                self.textStyle = textStyle
            }
            public enum CodingKeys: String, CodingKey {
                case suggestedDeletionIds
                case suggestedInsertionIds
                case suggestedTextStyleChanges
                case textStyle
            }
        }
        /// The properties of an image.
        ///
        /// - Remark: Generated from `#/components/schemas/ImageProperties`.
        public struct ImageProperties: Codable, Hashable, Sendable {
            /// The clockwise rotation angle of the image, in radians.
            ///
            /// - Remark: Generated from `#/components/schemas/ImageProperties/angle`.
            public var angle: Swift.Float?
            /// The brightness effect of the image. The value should be in the interval [-1.0, 1.0], where 0 means no effect.
            ///
            /// - Remark: Generated from `#/components/schemas/ImageProperties/brightness`.
            public var brightness: Swift.Float?
            /// A URI to the image with a default lifetime of 30 minutes. This URI is tagged with the account of the requester. Anyone with the URI effectively accesses the image as the original requester. Access to the image may be lost if the document's sharing settings change.
            ///
            /// - Remark: Generated from `#/components/schemas/ImageProperties/contentUri`.
            public var contentUri: Swift.String?
            /// The contrast effect of the image. The value should be in the interval [-1.0, 1.0], where 0 means no effect.
            ///
            /// - Remark: Generated from `#/components/schemas/ImageProperties/contrast`.
            public var contrast: Swift.Float?
            /// - Remark: Generated from `#/components/schemas/ImageProperties/cropProperties`.
            public var cropProperties: Components.Schemas.CropProperties?
            /// The source URI is the URI used to insert the image. The source URI can be empty.
            ///
            /// - Remark: Generated from `#/components/schemas/ImageProperties/sourceUri`.
            public var sourceUri: Swift.String?
            /// The transparency effect of the image. The value should be in the interval [0.0, 1.0], where 0 means no effect and 1 means transparent.
            ///
            /// - Remark: Generated from `#/components/schemas/ImageProperties/transparency`.
            public var transparency: Swift.Float?
            /// Creates a new `ImageProperties`.
            ///
            /// - Parameters:
            ///   - angle: The clockwise rotation angle of the image, in radians.
            ///   - brightness: The brightness effect of the image. The value should be in the interval [-1.0, 1.0], where 0 means no effect.
            ///   - contentUri: A URI to the image with a default lifetime of 30 minutes. This URI is tagged with the account of the requester. Anyone with the URI effectively accesses the image as the original requester. Access to the image may be lost if the document's sharing settings change.
            ///   - contrast: The contrast effect of the image. The value should be in the interval [-1.0, 1.0], where 0 means no effect.
            ///   - cropProperties:
            ///   - sourceUri: The source URI is the URI used to insert the image. The source URI can be empty.
            ///   - transparency: The transparency effect of the image. The value should be in the interval [0.0, 1.0], where 0 means no effect and 1 means transparent.
            public init(
                angle: Swift.Float? = nil,
                brightness: Swift.Float? = nil,
                contentUri: Swift.String? = nil,
                contrast: Swift.Float? = nil,
                cropProperties: Components.Schemas.CropProperties? = nil,
                sourceUri: Swift.String? = nil,
                transparency: Swift.Float? = nil
            ) {
                self.angle = angle
                self.brightness = brightness
                self.contentUri = contentUri
                self.contrast = contrast
                self.cropProperties = cropProperties
                self.sourceUri = sourceUri
                self.transparency = transparency
            }
            public enum CodingKeys: String, CodingKey {
                case angle
                case brightness
                case contentUri
                case contrast
                case cropProperties
                case sourceUri
                case transparency
            }
        }
        /// A mask that indicates which of the fields on the base ImageProperties have been changed in this suggestion. For any field set to true, there's a new suggested value.
        ///
        /// - Remark: Generated from `#/components/schemas/ImagePropertiesSuggestionState`.
        public struct ImagePropertiesSuggestionState: Codable, Hashable, Sendable {
            /// Indicates if there was a suggested change to angle.
            ///
            /// - Remark: Generated from `#/components/schemas/ImagePropertiesSuggestionState/angleSuggested`.
            public var angleSuggested: Swift.Bool?
            /// Indicates if there was a suggested change to brightness.
            ///
            /// - Remark: Generated from `#/components/schemas/ImagePropertiesSuggestionState/brightnessSuggested`.
            public var brightnessSuggested: Swift.Bool?
            /// Indicates if there was a suggested change to content_uri.
            ///
            /// - Remark: Generated from `#/components/schemas/ImagePropertiesSuggestionState/contentUriSuggested`.
            public var contentUriSuggested: Swift.Bool?
            /// Indicates if there was a suggested change to contrast.
            ///
            /// - Remark: Generated from `#/components/schemas/ImagePropertiesSuggestionState/contrastSuggested`.
            public var contrastSuggested: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/ImagePropertiesSuggestionState/cropPropertiesSuggestionState`.
            public var cropPropertiesSuggestionState: Components.Schemas.CropPropertiesSuggestionState?
            /// Indicates if there was a suggested change to source_uri.
            ///
            /// - Remark: Generated from `#/components/schemas/ImagePropertiesSuggestionState/sourceUriSuggested`.
            public var sourceUriSuggested: Swift.Bool?
            /// Indicates if there was a suggested change to transparency.
            ///
            /// - Remark: Generated from `#/components/schemas/ImagePropertiesSuggestionState/transparencySuggested`.
            public var transparencySuggested: Swift.Bool?
            /// Creates a new `ImagePropertiesSuggestionState`.
            ///
            /// - Parameters:
            ///   - angleSuggested: Indicates if there was a suggested change to angle.
            ///   - brightnessSuggested: Indicates if there was a suggested change to brightness.
            ///   - contentUriSuggested: Indicates if there was a suggested change to content_uri.
            ///   - contrastSuggested: Indicates if there was a suggested change to contrast.
            ///   - cropPropertiesSuggestionState:
            ///   - sourceUriSuggested: Indicates if there was a suggested change to source_uri.
            ///   - transparencySuggested: Indicates if there was a suggested change to transparency.
            public init(
                angleSuggested: Swift.Bool? = nil,
                brightnessSuggested: Swift.Bool? = nil,
                contentUriSuggested: Swift.Bool? = nil,
                contrastSuggested: Swift.Bool? = nil,
                cropPropertiesSuggestionState: Components.Schemas.CropPropertiesSuggestionState? = nil,
                sourceUriSuggested: Swift.Bool? = nil,
                transparencySuggested: Swift.Bool? = nil
            ) {
                self.angleSuggested = angleSuggested
                self.brightnessSuggested = brightnessSuggested
                self.contentUriSuggested = contentUriSuggested
                self.contrastSuggested = contrastSuggested
                self.cropPropertiesSuggestionState = cropPropertiesSuggestionState
                self.sourceUriSuggested = sourceUriSuggested
                self.transparencySuggested = transparencySuggested
            }
            public enum CodingKeys: String, CodingKey {
                case angleSuggested
                case brightnessSuggested
                case contentUriSuggested
                case contrastSuggested
                case cropPropertiesSuggestionState
                case sourceUriSuggested
                case transparencySuggested
            }
        }
        /// An object that appears inline with text. An InlineObject contains an EmbeddedObject such as an image.
        ///
        /// - Remark: Generated from `#/components/schemas/InlineObject`.
        public struct InlineObject: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/InlineObject/inlineObjectProperties`.
            public var inlineObjectProperties: Components.Schemas.InlineObjectProperties?
            /// The ID of this inline object. Can be used to update an object’s properties.
            ///
            /// - Remark: Generated from `#/components/schemas/InlineObject/objectId`.
            public var objectId: Swift.String?
            /// The suggested deletion IDs. If empty, then there are no suggested deletions of this content.
            ///
            /// - Remark: Generated from `#/components/schemas/InlineObject/suggestedDeletionIds`.
            public var suggestedDeletionIds: [Swift.String]?
            /// The suggested changes to the inline object properties, keyed by suggestion ID.
            ///
            /// - Remark: Generated from `#/components/schemas/InlineObject/suggestedInlineObjectPropertiesChanges`.
            public struct SuggestedInlineObjectPropertiesChangesPayload: Codable, Hashable, Sendable {
                /// A container of undocumented properties.
                public var additionalProperties: [String: Components.Schemas.SuggestedInlineObjectProperties]
                /// Creates a new `SuggestedInlineObjectPropertiesChangesPayload`.
                ///
                /// - Parameters:
                ///   - additionalProperties: A container of undocumented properties.
                public init(additionalProperties: [String: Components.Schemas.SuggestedInlineObjectProperties] = .init()) {
                    self.additionalProperties = additionalProperties
                }
                public init(from decoder: any Decoder) throws {
                    additionalProperties = try decoder.decodeAdditionalProperties(knownKeys: [])
                }
                public func encode(to encoder: any Encoder) throws {
                    try encoder.encodeAdditionalProperties(additionalProperties)
                }
            }
            /// The suggested changes to the inline object properties, keyed by suggestion ID.
            ///
            /// - Remark: Generated from `#/components/schemas/InlineObject/suggestedInlineObjectPropertiesChanges`.
            public var suggestedInlineObjectPropertiesChanges: Components.Schemas.InlineObject.SuggestedInlineObjectPropertiesChangesPayload?
            /// The suggested insertion ID. If empty, then this is not a suggested insertion.
            ///
            /// - Remark: Generated from `#/components/schemas/InlineObject/suggestedInsertionId`.
            public var suggestedInsertionId: Swift.String?
            /// Creates a new `InlineObject`.
            ///
            /// - Parameters:
            ///   - inlineObjectProperties:
            ///   - objectId: The ID of this inline object. Can be used to update an object’s properties.
            ///   - suggestedDeletionIds: The suggested deletion IDs. If empty, then there are no suggested deletions of this content.
            ///   - suggestedInlineObjectPropertiesChanges: The suggested changes to the inline object properties, keyed by suggestion ID.
            ///   - suggestedInsertionId: The suggested insertion ID. If empty, then this is not a suggested insertion.
            public init(
                inlineObjectProperties: Components.Schemas.InlineObjectProperties? = nil,
                objectId: Swift.String? = nil,
                suggestedDeletionIds: [Swift.String]? = nil,
                suggestedInlineObjectPropertiesChanges: Components.Schemas.InlineObject.SuggestedInlineObjectPropertiesChangesPayload? = nil,
                suggestedInsertionId: Swift.String? = nil
            ) {
                self.inlineObjectProperties = inlineObjectProperties
                self.objectId = objectId
                self.suggestedDeletionIds = suggestedDeletionIds
                self.suggestedInlineObjectPropertiesChanges = suggestedInlineObjectPropertiesChanges
                self.suggestedInsertionId = suggestedInsertionId
            }
            public enum CodingKeys: String, CodingKey {
                case inlineObjectProperties
                case objectId
                case suggestedDeletionIds
                case suggestedInlineObjectPropertiesChanges
                case suggestedInsertionId
            }
        }
        /// A ParagraphElement that contains an InlineObject.
        ///
        /// - Remark: Generated from `#/components/schemas/InlineObjectElement`.
        public struct InlineObjectElement: Codable, Hashable, Sendable {
            /// The ID of the InlineObject this element contains.
            ///
            /// - Remark: Generated from `#/components/schemas/InlineObjectElement/inlineObjectId`.
            public var inlineObjectId: Swift.String?
            /// The suggested deletion IDs. If empty, then there are no suggested deletions of this content.
            ///
            /// - Remark: Generated from `#/components/schemas/InlineObjectElement/suggestedDeletionIds`.
            public var suggestedDeletionIds: [Swift.String]?
            /// The suggested insertion IDs. An InlineObjectElement may have multiple insertion IDs if it's a nested suggested change. If empty, then this is not a suggested insertion.
            ///
            /// - Remark: Generated from `#/components/schemas/InlineObjectElement/suggestedInsertionIds`.
            public var suggestedInsertionIds: [Swift.String]?
            /// The suggested text style changes to this InlineObject, keyed by suggestion ID.
            ///
            /// - Remark: Generated from `#/components/schemas/InlineObjectElement/suggestedTextStyleChanges`.
            public struct SuggestedTextStyleChangesPayload: Codable, Hashable, Sendable {
                /// A container of undocumented properties.
                public var additionalProperties: [String: Components.Schemas.SuggestedTextStyle]
                /// Creates a new `SuggestedTextStyleChangesPayload`.
                ///
                /// - Parameters:
                ///   - additionalProperties: A container of undocumented properties.
                public init(additionalProperties: [String: Components.Schemas.SuggestedTextStyle] = .init()) {
                    self.additionalProperties = additionalProperties
                }
                public init(from decoder: any Decoder) throws {
                    additionalProperties = try decoder.decodeAdditionalProperties(knownKeys: [])
                }
                public func encode(to encoder: any Encoder) throws {
                    try encoder.encodeAdditionalProperties(additionalProperties)
                }
            }
            /// The suggested text style changes to this InlineObject, keyed by suggestion ID.
            ///
            /// - Remark: Generated from `#/components/schemas/InlineObjectElement/suggestedTextStyleChanges`.
            public var suggestedTextStyleChanges: Components.Schemas.InlineObjectElement.SuggestedTextStyleChangesPayload?
            /// - Remark: Generated from `#/components/schemas/InlineObjectElement/textStyle`.
            public var textStyle: Components.Schemas.TextStyle?
            /// Creates a new `InlineObjectElement`.
            ///
            /// - Parameters:
            ///   - inlineObjectId: The ID of the InlineObject this element contains.
            ///   - suggestedDeletionIds: The suggested deletion IDs. If empty, then there are no suggested deletions of this content.
            ///   - suggestedInsertionIds: The suggested insertion IDs. An InlineObjectElement may have multiple insertion IDs if it's a nested suggested change. If empty, then this is not a suggested insertion.
            ///   - suggestedTextStyleChanges: The suggested text style changes to this InlineObject, keyed by suggestion ID.
            ///   - textStyle:
            public init(
                inlineObjectId: Swift.String? = nil,
                suggestedDeletionIds: [Swift.String]? = nil,
                suggestedInsertionIds: [Swift.String]? = nil,
                suggestedTextStyleChanges: Components.Schemas.InlineObjectElement.SuggestedTextStyleChangesPayload? = nil,
                textStyle: Components.Schemas.TextStyle? = nil
            ) {
                self.inlineObjectId = inlineObjectId
                self.suggestedDeletionIds = suggestedDeletionIds
                self.suggestedInsertionIds = suggestedInsertionIds
                self.suggestedTextStyleChanges = suggestedTextStyleChanges
                self.textStyle = textStyle
            }
            public enum CodingKeys: String, CodingKey {
                case inlineObjectId
                case suggestedDeletionIds
                case suggestedInsertionIds
                case suggestedTextStyleChanges
                case textStyle
            }
        }
        /// Properties of an InlineObject.
        ///
        /// - Remark: Generated from `#/components/schemas/InlineObjectProperties`.
        public struct InlineObjectProperties: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/InlineObjectProperties/embeddedObject`.
            public var embeddedObject: Components.Schemas.EmbeddedObject?
            /// Creates a new `InlineObjectProperties`.
            ///
            /// - Parameters:
            ///   - embeddedObject:
            public init(embeddedObject: Components.Schemas.EmbeddedObject? = nil) {
                self.embeddedObject = embeddedObject
            }
            public enum CodingKeys: String, CodingKey {
                case embeddedObject
            }
        }
        /// A mask that indicates which of the fields on the base InlineObjectProperties have been changed in this suggestion. For any field set to true, there's a new suggested value.
        ///
        /// - Remark: Generated from `#/components/schemas/InlineObjectPropertiesSuggestionState`.
        public struct InlineObjectPropertiesSuggestionState: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/InlineObjectPropertiesSuggestionState/embeddedObjectSuggestionState`.
            public var embeddedObjectSuggestionState: Components.Schemas.EmbeddedObjectSuggestionState?
            /// Creates a new `InlineObjectPropertiesSuggestionState`.
            ///
            /// - Parameters:
            ///   - embeddedObjectSuggestionState:
            public init(embeddedObjectSuggestionState: Components.Schemas.EmbeddedObjectSuggestionState? = nil) {
                self.embeddedObjectSuggestionState = embeddedObjectSuggestionState
            }
            public enum CodingKeys: String, CodingKey {
                case embeddedObjectSuggestionState
            }
        }
        /// Inserts an InlineObject containing an image at the given location.
        ///
        /// - Remark: Generated from `#/components/schemas/InsertInlineImageRequest`.
        public struct InsertInlineImageRequest: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/InsertInlineImageRequest/endOfSegmentLocation`.
            public var endOfSegmentLocation: Components.Schemas.EndOfSegmentLocation?
            /// - Remark: Generated from `#/components/schemas/InsertInlineImageRequest/location`.
            public var location: Components.Schemas.Location?
            /// - Remark: Generated from `#/components/schemas/InsertInlineImageRequest/objectSize`.
            public var objectSize: Components.Schemas.Size?
            /// The image URI. The image is fetched once at insertion time and a copy is stored for display inside the document. Images must be less than 50MB in size, cannot exceed 25 megapixels, and must be in one of PNG, JPEG, or GIF format. The provided URI must be publicly accessible and at most 2 kB in length. The URI itself is saved with the image, and exposed via the ImageProperties.content_uri field.
            ///
            /// - Remark: Generated from `#/components/schemas/InsertInlineImageRequest/uri`.
            public var uri: Swift.String?
            /// Creates a new `InsertInlineImageRequest`.
            ///
            /// - Parameters:
            ///   - endOfSegmentLocation:
            ///   - location:
            ///   - objectSize:
            ///   - uri: The image URI. The image is fetched once at insertion time and a copy is stored for display inside the document. Images must be less than 50MB in size, cannot exceed 25 megapixels, and must be in one of PNG, JPEG, or GIF format. The provided URI must be publicly accessible and at most 2 kB in length. The URI itself is saved with the image, and exposed via the ImageProperties.content_uri field.
            public init(
                endOfSegmentLocation: Components.Schemas.EndOfSegmentLocation? = nil,
                location: Components.Schemas.Location? = nil,
                objectSize: Components.Schemas.Size? = nil,
                uri: Swift.String? = nil
            ) {
                self.endOfSegmentLocation = endOfSegmentLocation
                self.location = location
                self.objectSize = objectSize
                self.uri = uri
            }
            public enum CodingKeys: String, CodingKey {
                case endOfSegmentLocation
                case location
                case objectSize
                case uri
            }
        }
        /// The result of inserting an inline image.
        ///
        /// - Remark: Generated from `#/components/schemas/InsertInlineImageResponse`.
        public struct InsertInlineImageResponse: Codable, Hashable, Sendable {
            /// The ID of the created InlineObject.
            ///
            /// - Remark: Generated from `#/components/schemas/InsertInlineImageResponse/objectId`.
            public var objectId: Swift.String?
            /// Creates a new `InsertInlineImageResponse`.
            ///
            /// - Parameters:
            ///   - objectId: The ID of the created InlineObject.
            public init(objectId: Swift.String? = nil) {
                self.objectId = objectId
            }
            public enum CodingKeys: String, CodingKey {
                case objectId
            }
        }
        /// The result of inserting an embedded Google Sheets chart.
        ///
        /// - Remark: Generated from `#/components/schemas/InsertInlineSheetsChartResponse`.
        public struct InsertInlineSheetsChartResponse: Codable, Hashable, Sendable {
            /// The object ID of the inserted chart.
            ///
            /// - Remark: Generated from `#/components/schemas/InsertInlineSheetsChartResponse/objectId`.
            public var objectId: Swift.String?
            /// Creates a new `InsertInlineSheetsChartResponse`.
            ///
            /// - Parameters:
            ///   - objectId: The object ID of the inserted chart.
            public init(objectId: Swift.String? = nil) {
                self.objectId = objectId
            }
            public enum CodingKeys: String, CodingKey {
                case objectId
            }
        }
        /// Inserts a page break followed by a newline at the specified location.
        ///
        /// - Remark: Generated from `#/components/schemas/InsertPageBreakRequest`.
        public struct InsertPageBreakRequest: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/InsertPageBreakRequest/endOfSegmentLocation`.
            public var endOfSegmentLocation: Components.Schemas.EndOfSegmentLocation?
            /// - Remark: Generated from `#/components/schemas/InsertPageBreakRequest/location`.
            public var location: Components.Schemas.Location?
            /// Creates a new `InsertPageBreakRequest`.
            ///
            /// - Parameters:
            ///   - endOfSegmentLocation:
            ///   - location:
            public init(
                endOfSegmentLocation: Components.Schemas.EndOfSegmentLocation? = nil,
                location: Components.Schemas.Location? = nil
            ) {
                self.endOfSegmentLocation = endOfSegmentLocation
                self.location = location
            }
            public enum CodingKeys: String, CodingKey {
                case endOfSegmentLocation
                case location
            }
        }
        /// Inserts a section break at the given location. A newline character will be inserted before the section break.
        ///
        /// - Remark: Generated from `#/components/schemas/InsertSectionBreakRequest`.
        public struct InsertSectionBreakRequest: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/InsertSectionBreakRequest/endOfSegmentLocation`.
            public var endOfSegmentLocation: Components.Schemas.EndOfSegmentLocation?
            /// - Remark: Generated from `#/components/schemas/InsertSectionBreakRequest/location`.
            public var location: Components.Schemas.Location?
            /// The type of section to insert.
            ///
            /// - Remark: Generated from `#/components/schemas/InsertSectionBreakRequest/sectionType`.
            @frozen public enum SectionTypePayload: String, Codable, Hashable, Sendable, CaseIterable {
                case sectionTypeUnspecified = "SECTION_TYPE_UNSPECIFIED"
                case continuous = "CONTINUOUS"
                case nextPage = "NEXT_PAGE"
            }
            /// The type of section to insert.
            ///
            /// - Remark: Generated from `#/components/schemas/InsertSectionBreakRequest/sectionType`.
            public var sectionType: Components.Schemas.InsertSectionBreakRequest.SectionTypePayload?
            /// Creates a new `InsertSectionBreakRequest`.
            ///
            /// - Parameters:
            ///   - endOfSegmentLocation:
            ///   - location:
            ///   - sectionType: The type of section to insert.
            public init(
                endOfSegmentLocation: Components.Schemas.EndOfSegmentLocation? = nil,
                location: Components.Schemas.Location? = nil,
                sectionType: Components.Schemas.InsertSectionBreakRequest.SectionTypePayload? = nil
            ) {
                self.endOfSegmentLocation = endOfSegmentLocation
                self.location = location
                self.sectionType = sectionType
            }
            public enum CodingKeys: String, CodingKey {
                case endOfSegmentLocation
                case location
                case sectionType
            }
        }
        /// Inserts an empty column into a table.
        ///
        /// - Remark: Generated from `#/components/schemas/InsertTableColumnRequest`.
        public struct InsertTableColumnRequest: Codable, Hashable, Sendable {
            /// Whether to insert new column to the right of the reference cell location. - `True`: insert to the right. - `False`: insert to the left.
            ///
            /// - Remark: Generated from `#/components/schemas/InsertTableColumnRequest/insertRight`.
            public var insertRight: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/InsertTableColumnRequest/tableCellLocation`.
            public var tableCellLocation: Components.Schemas.TableCellLocation?
            /// Creates a new `InsertTableColumnRequest`.
            ///
            /// - Parameters:
            ///   - insertRight: Whether to insert new column to the right of the reference cell location. - `True`: insert to the right. - `False`: insert to the left.
            ///   - tableCellLocation:
            public init(
                insertRight: Swift.Bool? = nil,
                tableCellLocation: Components.Schemas.TableCellLocation? = nil
            ) {
                self.insertRight = insertRight
                self.tableCellLocation = tableCellLocation
            }
            public enum CodingKeys: String, CodingKey {
                case insertRight
                case tableCellLocation
            }
        }
        /// Inserts a table at the specified location. A newline character will be inserted before the inserted table.
        ///
        /// - Remark: Generated from `#/components/schemas/InsertTableRequest`.
        public struct InsertTableRequest: Codable, Hashable, Sendable {
            /// The number of columns in the table.
            ///
            /// - Remark: Generated from `#/components/schemas/InsertTableRequest/columns`.
            public var columns: Swift.Int32?
            /// - Remark: Generated from `#/components/schemas/InsertTableRequest/endOfSegmentLocation`.
            public var endOfSegmentLocation: Components.Schemas.EndOfSegmentLocation?
            /// - Remark: Generated from `#/components/schemas/InsertTableRequest/location`.
            public var location: Components.Schemas.Location?
            /// The number of rows in the table.
            ///
            /// - Remark: Generated from `#/components/schemas/InsertTableRequest/rows`.
            public var rows: Swift.Int32?
            /// Creates a new `InsertTableRequest`.
            ///
            /// - Parameters:
            ///   - columns: The number of columns in the table.
            ///   - endOfSegmentLocation:
            ///   - location:
            ///   - rows: The number of rows in the table.
            public init(
                columns: Swift.Int32? = nil,
                endOfSegmentLocation: Components.Schemas.EndOfSegmentLocation? = nil,
                location: Components.Schemas.Location? = nil,
                rows: Swift.Int32? = nil
            ) {
                self.columns = columns
                self.endOfSegmentLocation = endOfSegmentLocation
                self.location = location
                self.rows = rows
            }
            public enum CodingKeys: String, CodingKey {
                case columns
                case endOfSegmentLocation
                case location
                case rows
            }
        }
        /// Inserts an empty row into a table.
        ///
        /// - Remark: Generated from `#/components/schemas/InsertTableRowRequest`.
        public struct InsertTableRowRequest: Codable, Hashable, Sendable {
            /// Whether to insert new row below the reference cell location. - `True`: insert below the cell. - `False`: insert above the cell.
            ///
            /// - Remark: Generated from `#/components/schemas/InsertTableRowRequest/insertBelow`.
            public var insertBelow: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/InsertTableRowRequest/tableCellLocation`.
            public var tableCellLocation: Components.Schemas.TableCellLocation?
            /// Creates a new `InsertTableRowRequest`.
            ///
            /// - Parameters:
            ///   - insertBelow: Whether to insert new row below the reference cell location. - `True`: insert below the cell. - `False`: insert above the cell.
            ///   - tableCellLocation:
            public init(
                insertBelow: Swift.Bool? = nil,
                tableCellLocation: Components.Schemas.TableCellLocation? = nil
            ) {
                self.insertBelow = insertBelow
                self.tableCellLocation = tableCellLocation
            }
            public enum CodingKeys: String, CodingKey {
                case insertBelow
                case tableCellLocation
            }
        }
        /// Inserts text at the specified location.
        ///
        /// - Remark: Generated from `#/components/schemas/InsertTextRequest`.
        public struct InsertTextRequest: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/InsertTextRequest/endOfSegmentLocation`.
            public var endOfSegmentLocation: Components.Schemas.EndOfSegmentLocation?
            /// - Remark: Generated from `#/components/schemas/InsertTextRequest/location`.
            public var location: Components.Schemas.Location?
            /// The text to be inserted. Inserting a newline character will implicitly create a new Paragraph at that index. The paragraph style of the new paragraph will be copied from the paragraph at the current insertion index, including lists and bullets. Text styles for inserted text will be determined automatically, generally preserving the styling of neighboring text. In most cases, the text style for the inserted text will match the text immediately before the insertion index. Some control characters (U+0000-U+0008, U+000C-U+001F) and characters from the Unicode Basic Multilingual Plane Private Use Area (U+E000-U+F8FF) will be stripped out of the inserted text.
            ///
            /// - Remark: Generated from `#/components/schemas/InsertTextRequest/text`.
            public var text: Swift.String?
            /// Creates a new `InsertTextRequest`.
            ///
            /// - Parameters:
            ///   - endOfSegmentLocation:
            ///   - location:
            ///   - text: The text to be inserted. Inserting a newline character will implicitly create a new Paragraph at that index. The paragraph style of the new paragraph will be copied from the paragraph at the current insertion index, including lists and bullets. Text styles for inserted text will be determined automatically, generally preserving the styling of neighboring text. In most cases, the text style for the inserted text will match the text immediately before the insertion index. Some control characters (U+0000-U+0008, U+000C-U+001F) and characters from the Unicode Basic Multilingual Plane Private Use Area (U+E000-U+F8FF) will be stripped out of the inserted text.
            public init(
                endOfSegmentLocation: Components.Schemas.EndOfSegmentLocation? = nil,
                location: Components.Schemas.Location? = nil,
                text: Swift.String? = nil
            ) {
                self.endOfSegmentLocation = endOfSegmentLocation
                self.location = location
                self.text = text
            }
            public enum CodingKeys: String, CodingKey {
                case endOfSegmentLocation
                case location
                case text
            }
        }
        /// A reference to another portion of a document or an external URL resource.
        ///
        /// - Remark: Generated from `#/components/schemas/Link`.
        public struct Link: Codable, Hashable, Sendable {
            /// The ID of a bookmark in this document.
            ///
            /// - Remark: Generated from `#/components/schemas/Link/bookmarkId`.
            public var bookmarkId: Swift.String?
            /// The ID of a heading in this document.
            ///
            /// - Remark: Generated from `#/components/schemas/Link/headingId`.
            public var headingId: Swift.String?
            /// An external URL.
            ///
            /// - Remark: Generated from `#/components/schemas/Link/url`.
            public var url: Swift.String?
            /// Creates a new `Link`.
            ///
            /// - Parameters:
            ///   - bookmarkId: The ID of a bookmark in this document.
            ///   - headingId: The ID of a heading in this document.
            ///   - url: An external URL.
            public init(
                bookmarkId: Swift.String? = nil,
                headingId: Swift.String? = nil,
                url: Swift.String? = nil
            ) {
                self.bookmarkId = bookmarkId
                self.headingId = headingId
                self.url = url
            }
            public enum CodingKeys: String, CodingKey {
                case bookmarkId
                case headingId
                case url
            }
        }
        /// A reference to the external linked source content.
        ///
        /// - Remark: Generated from `#/components/schemas/LinkedContentReference`.
        public struct LinkedContentReference: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/LinkedContentReference/sheetsChartReference`.
            public var sheetsChartReference: Components.Schemas.SheetsChartReference?
            /// Creates a new `LinkedContentReference`.
            ///
            /// - Parameters:
            ///   - sheetsChartReference:
            public init(sheetsChartReference: Components.Schemas.SheetsChartReference? = nil) {
                self.sheetsChartReference = sheetsChartReference
            }
            public enum CodingKeys: String, CodingKey {
                case sheetsChartReference
            }
        }
        /// A mask that indicates which of the fields on the base LinkedContentReference have been changed in this suggestion. For any field set to true, there's a new suggested value.
        ///
        /// - Remark: Generated from `#/components/schemas/LinkedContentReferenceSuggestionState`.
        public struct LinkedContentReferenceSuggestionState: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/LinkedContentReferenceSuggestionState/sheetsChartReferenceSuggestionState`.
            public var sheetsChartReferenceSuggestionState: Components.Schemas.SheetsChartReferenceSuggestionState?
            /// Creates a new `LinkedContentReferenceSuggestionState`.
            ///
            /// - Parameters:
            ///   - sheetsChartReferenceSuggestionState:
            public init(sheetsChartReferenceSuggestionState: Components.Schemas.SheetsChartReferenceSuggestionState? = nil) {
                self.sheetsChartReferenceSuggestionState = sheetsChartReferenceSuggestionState
            }
            public enum CodingKeys: String, CodingKey {
                case sheetsChartReferenceSuggestionState
            }
        }
        /// A List represents the list attributes for a group of paragraphs that all belong to the same list. A paragraph that's part of a list has a reference to the list's ID in its bullet.
        ///
        /// - Remark: Generated from `#/components/schemas/List`.
        public struct List: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/List/listProperties`.
            public var listProperties: Components.Schemas.ListProperties?
            /// The suggested deletion IDs. If empty, then there are no suggested deletions of this list.
            ///
            /// - Remark: Generated from `#/components/schemas/List/suggestedDeletionIds`.
            public var suggestedDeletionIds: [Swift.String]?
            /// The suggested insertion ID. If empty, then this is not a suggested insertion.
            ///
            /// - Remark: Generated from `#/components/schemas/List/suggestedInsertionId`.
            public var suggestedInsertionId: Swift.String?
            /// The suggested changes to the list properties, keyed by suggestion ID.
            ///
            /// - Remark: Generated from `#/components/schemas/List/suggestedListPropertiesChanges`.
            public struct SuggestedListPropertiesChangesPayload: Codable, Hashable, Sendable {
                /// A container of undocumented properties.
                public var additionalProperties: [String: Components.Schemas.SuggestedListProperties]
                /// Creates a new `SuggestedListPropertiesChangesPayload`.
                ///
                /// - Parameters:
                ///   - additionalProperties: A container of undocumented properties.
                public init(additionalProperties: [String: Components.Schemas.SuggestedListProperties] = .init()) {
                    self.additionalProperties = additionalProperties
                }
                public init(from decoder: any Decoder) throws {
                    additionalProperties = try decoder.decodeAdditionalProperties(knownKeys: [])
                }
                public func encode(to encoder: any Encoder) throws {
                    try encoder.encodeAdditionalProperties(additionalProperties)
                }
            }
            /// The suggested changes to the list properties, keyed by suggestion ID.
            ///
            /// - Remark: Generated from `#/components/schemas/List/suggestedListPropertiesChanges`.
            public var suggestedListPropertiesChanges: Components.Schemas.List.SuggestedListPropertiesChangesPayload?
            /// Creates a new `List`.
            ///
            /// - Parameters:
            ///   - listProperties:
            ///   - suggestedDeletionIds: The suggested deletion IDs. If empty, then there are no suggested deletions of this list.
            ///   - suggestedInsertionId: The suggested insertion ID. If empty, then this is not a suggested insertion.
            ///   - suggestedListPropertiesChanges: The suggested changes to the list properties, keyed by suggestion ID.
            public init(
                listProperties: Components.Schemas.ListProperties? = nil,
                suggestedDeletionIds: [Swift.String]? = nil,
                suggestedInsertionId: Swift.String? = nil,
                suggestedListPropertiesChanges: Components.Schemas.List.SuggestedListPropertiesChangesPayload? = nil
            ) {
                self.listProperties = listProperties
                self.suggestedDeletionIds = suggestedDeletionIds
                self.suggestedInsertionId = suggestedInsertionId
                self.suggestedListPropertiesChanges = suggestedListPropertiesChanges
            }
            public enum CodingKeys: String, CodingKey {
                case listProperties
                case suggestedDeletionIds
                case suggestedInsertionId
                case suggestedListPropertiesChanges
            }
        }
        /// The properties of a list that describe the look and feel of bullets belonging to paragraphs associated with a list.
        ///
        /// - Remark: Generated from `#/components/schemas/ListProperties`.
        public struct ListProperties: Codable, Hashable, Sendable {
            /// Describes the properties of the bullets at the associated level. A list has at most 9 levels of nesting with nesting level 0 corresponding to the top-most level and nesting level 8 corresponding to the most nested level. The nesting levels are returned in ascending order with the least nested returned first.
            ///
            /// - Remark: Generated from `#/components/schemas/ListProperties/nestingLevels`.
            public var nestingLevels: [Components.Schemas.NestingLevel]?
            /// Creates a new `ListProperties`.
            ///
            /// - Parameters:
            ///   - nestingLevels: Describes the properties of the bullets at the associated level. A list has at most 9 levels of nesting with nesting level 0 corresponding to the top-most level and nesting level 8 corresponding to the most nested level. The nesting levels are returned in ascending order with the least nested returned first.
            public init(nestingLevels: [Components.Schemas.NestingLevel]? = nil) {
                self.nestingLevels = nestingLevels
            }
            public enum CodingKeys: String, CodingKey {
                case nestingLevels
            }
        }
        /// A mask that indicates which of the fields on the base ListProperties have been changed in this suggestion. For any field set to true, there's a new suggested value.
        ///
        /// - Remark: Generated from `#/components/schemas/ListPropertiesSuggestionState`.
        public struct ListPropertiesSuggestionState: Codable, Hashable, Sendable {
            /// A mask that indicates which of the fields on the corresponding NestingLevel in nesting_levels have been changed in this suggestion. The nesting level suggestion states are returned in ascending order of the nesting level with the least nested returned first.
            ///
            /// - Remark: Generated from `#/components/schemas/ListPropertiesSuggestionState/nestingLevelsSuggestionStates`.
            public var nestingLevelsSuggestionStates: [Components.Schemas.NestingLevelSuggestionState]?
            /// Creates a new `ListPropertiesSuggestionState`.
            ///
            /// - Parameters:
            ///   - nestingLevelsSuggestionStates: A mask that indicates which of the fields on the corresponding NestingLevel in nesting_levels have been changed in this suggestion. The nesting level suggestion states are returned in ascending order of the nesting level with the least nested returned first.
            public init(nestingLevelsSuggestionStates: [Components.Schemas.NestingLevelSuggestionState]? = nil) {
                self.nestingLevelsSuggestionStates = nestingLevelsSuggestionStates
            }
            public enum CodingKeys: String, CodingKey {
                case nestingLevelsSuggestionStates
            }
        }
        /// A particular location in the document.
        ///
        /// - Remark: Generated from `#/components/schemas/Location`.
        public struct Location: Codable, Hashable, Sendable {
            /// The zero-based index, in UTF-16 code units. The index is relative to the beginning of the segment specified by segment_id.
            ///
            /// - Remark: Generated from `#/components/schemas/Location/index`.
            public var index: Swift.Int32?
            /// The ID of the header, footer or footnote the location is in. An empty segment ID signifies the document's body.
            ///
            /// - Remark: Generated from `#/components/schemas/Location/segmentId`.
            public var segmentId: Swift.String?
            /// Creates a new `Location`.
            ///
            /// - Parameters:
            ///   - index: The zero-based index, in UTF-16 code units. The index is relative to the beginning of the segment specified by segment_id.
            ///   - segmentId: The ID of the header, footer or footnote the location is in. An empty segment ID signifies the document's body.
            public init(
                index: Swift.Int32? = nil,
                segmentId: Swift.String? = nil
            ) {
                self.index = index
                self.segmentId = segmentId
            }
            public enum CodingKeys: String, CodingKey {
                case index
                case segmentId
            }
        }
        /// Merges cells in a Table.
        ///
        /// - Remark: Generated from `#/components/schemas/MergeTableCellsRequest`.
        public struct MergeTableCellsRequest: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/MergeTableCellsRequest/tableRange`.
            public var tableRange: Components.Schemas.TableRange?
            /// Creates a new `MergeTableCellsRequest`.
            ///
            /// - Parameters:
            ///   - tableRange:
            public init(tableRange: Components.Schemas.TableRange? = nil) {
                self.tableRange = tableRange
            }
            public enum CodingKeys: String, CodingKey {
                case tableRange
            }
        }
        /// A collection of Ranges with the same named range ID. Named ranges allow developers to associate parts of a document with an arbitrary user-defined label so their contents can be programmatically read or edited later. A document can contain multiple named ranges with the same name, but every named range has a unique ID. A named range is created with a single Range, and content inserted inside a named range generally expands that range. However, certain document changes can cause the range to be split into multiple ranges. Named ranges are not private. All applications and collaborators that have access to the document can see its named ranges.
        ///
        /// - Remark: Generated from `#/components/schemas/NamedRange`.
        public struct NamedRange: Codable, Hashable, Sendable {
            /// The name of the named range.
            ///
            /// - Remark: Generated from `#/components/schemas/NamedRange/name`.
            public var name: Swift.String?
            /// The ID of the named range.
            ///
            /// - Remark: Generated from `#/components/schemas/NamedRange/namedRangeId`.
            public var namedRangeId: Swift.String?
            /// The ranges that belong to this named range.
            ///
            /// - Remark: Generated from `#/components/schemas/NamedRange/ranges`.
            public var ranges: [Components.Schemas.Range]?
            /// Creates a new `NamedRange`.
            ///
            /// - Parameters:
            ///   - name: The name of the named range.
            ///   - namedRangeId: The ID of the named range.
            ///   - ranges: The ranges that belong to this named range.
            public init(
                name: Swift.String? = nil,
                namedRangeId: Swift.String? = nil,
                ranges: [Components.Schemas.Range]? = nil
            ) {
                self.name = name
                self.namedRangeId = namedRangeId
                self.ranges = ranges
            }
            public enum CodingKeys: String, CodingKey {
                case name
                case namedRangeId
                case ranges
            }
        }
        /// A collection of all the NamedRanges in the document that share a given name.
        ///
        /// - Remark: Generated from `#/components/schemas/NamedRanges`.
        public struct NamedRanges: Codable, Hashable, Sendable {
            /// The name that all the named ranges share.
            ///
            /// - Remark: Generated from `#/components/schemas/NamedRanges/name`.
            public var name: Swift.String?
            /// The NamedRanges that share the same name.
            ///
            /// - Remark: Generated from `#/components/schemas/NamedRanges/namedRanges`.
            public var namedRanges: [Components.Schemas.NamedRange]?
            /// Creates a new `NamedRanges`.
            ///
            /// - Parameters:
            ///   - name: The name that all the named ranges share.
            ///   - namedRanges: The NamedRanges that share the same name.
            public init(
                name: Swift.String? = nil,
                namedRanges: [Components.Schemas.NamedRange]? = nil
            ) {
                self.name = name
                self.namedRanges = namedRanges
            }
            public enum CodingKeys: String, CodingKey {
                case name
                case namedRanges
            }
        }
        /// A named style. Paragraphs in the document can inherit their TextStyle and ParagraphStyle from this named style when they have the same named style type.
        ///
        /// - Remark: Generated from `#/components/schemas/NamedStyle`.
        public struct NamedStyle: Codable, Hashable, Sendable {
            /// The type of this named style.
            ///
            /// - Remark: Generated from `#/components/schemas/NamedStyle/namedStyleType`.
            @frozen public enum NamedStyleTypePayload: String, Codable, Hashable, Sendable, CaseIterable {
                case namedStyleTypeUnspecified = "NAMED_STYLE_TYPE_UNSPECIFIED"
                case normalText = "NORMAL_TEXT"
                case title = "TITLE"
                case subtitle = "SUBTITLE"
                case heading1 = "HEADING_1"
                case heading2 = "HEADING_2"
                case heading3 = "HEADING_3"
                case heading4 = "HEADING_4"
                case heading5 = "HEADING_5"
                case heading6 = "HEADING_6"
            }
            /// The type of this named style.
            ///
            /// - Remark: Generated from `#/components/schemas/NamedStyle/namedStyleType`.
            public var namedStyleType: Components.Schemas.NamedStyle.NamedStyleTypePayload?
            /// - Remark: Generated from `#/components/schemas/NamedStyle/paragraphStyle`.
            public var paragraphStyle: Components.Schemas.ParagraphStyle?
            /// - Remark: Generated from `#/components/schemas/NamedStyle/textStyle`.
            public var textStyle: Components.Schemas.TextStyle?
            /// Creates a new `NamedStyle`.
            ///
            /// - Parameters:
            ///   - namedStyleType: The type of this named style.
            ///   - paragraphStyle:
            ///   - textStyle:
            public init(
                namedStyleType: Components.Schemas.NamedStyle.NamedStyleTypePayload? = nil,
                paragraphStyle: Components.Schemas.ParagraphStyle? = nil,
                textStyle: Components.Schemas.TextStyle? = nil
            ) {
                self.namedStyleType = namedStyleType
                self.paragraphStyle = paragraphStyle
                self.textStyle = textStyle
            }
            public enum CodingKeys: String, CodingKey {
                case namedStyleType
                case paragraphStyle
                case textStyle
            }
        }
        /// A suggestion state of a NamedStyle message.
        ///
        /// - Remark: Generated from `#/components/schemas/NamedStyleSuggestionState`.
        public struct NamedStyleSuggestionState: Codable, Hashable, Sendable {
            /// The named style type that this suggestion state corresponds to. This field is provided as a convenience for matching the NamedStyleSuggestionState with its corresponding NamedStyle.
            ///
            /// - Remark: Generated from `#/components/schemas/NamedStyleSuggestionState/namedStyleType`.
            @frozen public enum NamedStyleTypePayload: String, Codable, Hashable, Sendable, CaseIterable {
                case namedStyleTypeUnspecified = "NAMED_STYLE_TYPE_UNSPECIFIED"
                case normalText = "NORMAL_TEXT"
                case title = "TITLE"
                case subtitle = "SUBTITLE"
                case heading1 = "HEADING_1"
                case heading2 = "HEADING_2"
                case heading3 = "HEADING_3"
                case heading4 = "HEADING_4"
                case heading5 = "HEADING_5"
                case heading6 = "HEADING_6"
            }
            /// The named style type that this suggestion state corresponds to. This field is provided as a convenience for matching the NamedStyleSuggestionState with its corresponding NamedStyle.
            ///
            /// - Remark: Generated from `#/components/schemas/NamedStyleSuggestionState/namedStyleType`.
            public var namedStyleType: Components.Schemas.NamedStyleSuggestionState.NamedStyleTypePayload?
            /// - Remark: Generated from `#/components/schemas/NamedStyleSuggestionState/paragraphStyleSuggestionState`.
            public var paragraphStyleSuggestionState: Components.Schemas.ParagraphStyleSuggestionState?
            /// - Remark: Generated from `#/components/schemas/NamedStyleSuggestionState/textStyleSuggestionState`.
            public var textStyleSuggestionState: Components.Schemas.TextStyleSuggestionState?
            /// Creates a new `NamedStyleSuggestionState`.
            ///
            /// - Parameters:
            ///   - namedStyleType: The named style type that this suggestion state corresponds to. This field is provided as a convenience for matching the NamedStyleSuggestionState with its corresponding NamedStyle.
            ///   - paragraphStyleSuggestionState:
            ///   - textStyleSuggestionState:
            public init(
                namedStyleType: Components.Schemas.NamedStyleSuggestionState.NamedStyleTypePayload? = nil,
                paragraphStyleSuggestionState: Components.Schemas.ParagraphStyleSuggestionState? = nil,
                textStyleSuggestionState: Components.Schemas.TextStyleSuggestionState? = nil
            ) {
                self.namedStyleType = namedStyleType
                self.paragraphStyleSuggestionState = paragraphStyleSuggestionState
                self.textStyleSuggestionState = textStyleSuggestionState
            }
            public enum CodingKeys: String, CodingKey {
                case namedStyleType
                case paragraphStyleSuggestionState
                case textStyleSuggestionState
            }
        }
        /// The named styles. Paragraphs in the document can inherit their TextStyle and ParagraphStyle from these named styles.
        ///
        /// - Remark: Generated from `#/components/schemas/NamedStyles`.
        public struct NamedStyles: Codable, Hashable, Sendable {
            /// The named styles. There's an entry for each of the possible named style types.
            ///
            /// - Remark: Generated from `#/components/schemas/NamedStyles/styles`.
            public var styles: [Components.Schemas.NamedStyle]?
            /// Creates a new `NamedStyles`.
            ///
            /// - Parameters:
            ///   - styles: The named styles. There's an entry for each of the possible named style types.
            public init(styles: [Components.Schemas.NamedStyle]? = nil) {
                self.styles = styles
            }
            public enum CodingKeys: String, CodingKey {
                case styles
            }
        }
        /// The suggestion state of a NamedStyles message.
        ///
        /// - Remark: Generated from `#/components/schemas/NamedStylesSuggestionState`.
        public struct NamedStylesSuggestionState: Codable, Hashable, Sendable {
            /// A mask that indicates which of the fields on the corresponding NamedStyle in styles have been changed in this suggestion. The order of these named style suggestion states matches the order of the corresponding named style within the named styles suggestion.
            ///
            /// - Remark: Generated from `#/components/schemas/NamedStylesSuggestionState/stylesSuggestionStates`.
            public var stylesSuggestionStates: [Components.Schemas.NamedStyleSuggestionState]?
            /// Creates a new `NamedStylesSuggestionState`.
            ///
            /// - Parameters:
            ///   - stylesSuggestionStates: A mask that indicates which of the fields on the corresponding NamedStyle in styles have been changed in this suggestion. The order of these named style suggestion states matches the order of the corresponding named style within the named styles suggestion.
            public init(stylesSuggestionStates: [Components.Schemas.NamedStyleSuggestionState]? = nil) {
                self.stylesSuggestionStates = stylesSuggestionStates
            }
            public enum CodingKeys: String, CodingKey {
                case stylesSuggestionStates
            }
        }
        /// Contains properties describing the look and feel of a list bullet at a given level of nesting.
        ///
        /// - Remark: Generated from `#/components/schemas/NestingLevel`.
        public struct NestingLevel: Codable, Hashable, Sendable {
            /// The alignment of the bullet within the space allotted for rendering the bullet.
            ///
            /// - Remark: Generated from `#/components/schemas/NestingLevel/bulletAlignment`.
            @frozen public enum BulletAlignmentPayload: String, Codable, Hashable, Sendable, CaseIterable {
                case bulletAlignmentUnspecified = "BULLET_ALIGNMENT_UNSPECIFIED"
                case start = "START"
                case center = "CENTER"
                case end = "END"
            }
            /// The alignment of the bullet within the space allotted for rendering the bullet.
            ///
            /// - Remark: Generated from `#/components/schemas/NestingLevel/bulletAlignment`.
            public var bulletAlignment: Components.Schemas.NestingLevel.BulletAlignmentPayload?
            /// The format string used by bullets at this level of nesting. The glyph format contains one or more placeholders, and these placeholders are replaced with the appropriate values depending on the glyph_type or glyph_symbol. The placeholders follow the pattern `%[nesting_level]`. Furthermore, placeholders can have prefixes and suffixes. Thus, the glyph format follows the pattern `%[nesting_level]`. Note that the prefix and suffix are optional and can be arbitrary strings. For example, the glyph format `%0.` indicates that the rendered glyph will replace the placeholder with the corresponding glyph for nesting level 0 followed by a period as the suffix. So a list with a glyph type of UPPER_ALPHA and glyph format `%0.` at nesting level 0 will result in a list with rendered glyphs `A.` `B.` `C.` The glyph format can contain placeholders for the current nesting level as well as placeholders for parent nesting levels. For example, a list can have a glyph format of `%0.` at nesting level 0 and a glyph format of `%0.%1.` at nesting level 1. Assuming both nesting levels have DECIMAL glyph types, this would result in a list with rendered glyphs `1.` `2.` ` 2.1.` ` 2.2.` `3.` For nesting levels that are ordered, the string that replaces a placeholder in the glyph format for a particular paragraph depends on the paragraph's order within the list.
            ///
            /// - Remark: Generated from `#/components/schemas/NestingLevel/glyphFormat`.
            public var glyphFormat: Swift.String?
            /// A custom glyph symbol used by bullets when paragraphs at this level of nesting are unordered. The glyph symbol replaces placeholders within the glyph_format. For example, if the glyph_symbol is the solid circle corresponding to Unicode U+25cf code point and the glyph_format is `%0`, the rendered glyph would be the solid circle.
            ///
            /// - Remark: Generated from `#/components/schemas/NestingLevel/glyphSymbol`.
            public var glyphSymbol: Swift.String?
            /// The type of glyph used by bullets when paragraphs at this level of nesting are ordered. The glyph type determines the type of glyph used to replace placeholders within the glyph_format when paragraphs at this level of nesting are ordered. For example, if the nesting level is 0, the glyph_format is `%0.` and the glyph type is DECIMAL, then the rendered glyph would replace the placeholder `%0` in the glyph format with a number corresponding to list item's order within the list.
            ///
            /// - Remark: Generated from `#/components/schemas/NestingLevel/glyphType`.
            @frozen public enum GlyphTypePayload: String, Codable, Hashable, Sendable, CaseIterable {
                case glyphTypeUnspecified = "GLYPH_TYPE_UNSPECIFIED"
                case none = "NONE"
                case decimal = "DECIMAL"
                case zeroDecimal = "ZERO_DECIMAL"
                case upperAlpha = "UPPER_ALPHA"
                case alpha = "ALPHA"
                case upperRoman = "UPPER_ROMAN"
                case roman = "ROMAN"
            }
            /// The type of glyph used by bullets when paragraphs at this level of nesting are ordered. The glyph type determines the type of glyph used to replace placeholders within the glyph_format when paragraphs at this level of nesting are ordered. For example, if the nesting level is 0, the glyph_format is `%0.` and the glyph type is DECIMAL, then the rendered glyph would replace the placeholder `%0` in the glyph format with a number corresponding to list item's order within the list.
            ///
            /// - Remark: Generated from `#/components/schemas/NestingLevel/glyphType`.
            public var glyphType: Components.Schemas.NestingLevel.GlyphTypePayload?
            /// - Remark: Generated from `#/components/schemas/NestingLevel/indentFirstLine`.
            public var indentFirstLine: Components.Schemas.Dimension?
            /// - Remark: Generated from `#/components/schemas/NestingLevel/indentStart`.
            public var indentStart: Components.Schemas.Dimension?
            /// The number of the first list item at this nesting level. A value of 0 is treated as a value of 1 for lettered lists and Roman numeral lists. For values of both 0 and 1, lettered and Roman numeral lists will begin at `a` and `i` respectively. This value is ignored for nesting levels with unordered glyphs.
            ///
            /// - Remark: Generated from `#/components/schemas/NestingLevel/startNumber`.
            public var startNumber: Swift.Int32?
            /// - Remark: Generated from `#/components/schemas/NestingLevel/textStyle`.
            public var textStyle: Components.Schemas.TextStyle?
            /// Creates a new `NestingLevel`.
            ///
            /// - Parameters:
            ///   - bulletAlignment: The alignment of the bullet within the space allotted for rendering the bullet.
            ///   - glyphFormat: The format string used by bullets at this level of nesting. The glyph format contains one or more placeholders, and these placeholders are replaced with the appropriate values depending on the glyph_type or glyph_symbol. The placeholders follow the pattern `%[nesting_level]`. Furthermore, placeholders can have prefixes and suffixes. Thus, the glyph format follows the pattern `%[nesting_level]`. Note that the prefix and suffix are optional and can be arbitrary strings. For example, the glyph format `%0.` indicates that the rendered glyph will replace the placeholder with the corresponding glyph for nesting level 0 followed by a period as the suffix. So a list with a glyph type of UPPER_ALPHA and glyph format `%0.` at nesting level 0 will result in a list with rendered glyphs `A.` `B.` `C.` The glyph format can contain placeholders for the current nesting level as well as placeholders for parent nesting levels. For example, a list can have a glyph format of `%0.` at nesting level 0 and a glyph format of `%0.%1.` at nesting level 1. Assuming both nesting levels have DECIMAL glyph types, this would result in a list with rendered glyphs `1.` `2.` ` 2.1.` ` 2.2.` `3.` For nesting levels that are ordered, the string that replaces a placeholder in the glyph format for a particular paragraph depends on the paragraph's order within the list.
            ///   - glyphSymbol: A custom glyph symbol used by bullets when paragraphs at this level of nesting are unordered. The glyph symbol replaces placeholders within the glyph_format. For example, if the glyph_symbol is the solid circle corresponding to Unicode U+25cf code point and the glyph_format is `%0`, the rendered glyph would be the solid circle.
            ///   - glyphType: The type of glyph used by bullets when paragraphs at this level of nesting are ordered. The glyph type determines the type of glyph used to replace placeholders within the glyph_format when paragraphs at this level of nesting are ordered. For example, if the nesting level is 0, the glyph_format is `%0.` and the glyph type is DECIMAL, then the rendered glyph would replace the placeholder `%0` in the glyph format with a number corresponding to list item's order within the list.
            ///   - indentFirstLine:
            ///   - indentStart:
            ///   - startNumber: The number of the first list item at this nesting level. A value of 0 is treated as a value of 1 for lettered lists and Roman numeral lists. For values of both 0 and 1, lettered and Roman numeral lists will begin at `a` and `i` respectively. This value is ignored for nesting levels with unordered glyphs.
            ///   - textStyle:
            public init(
                bulletAlignment: Components.Schemas.NestingLevel.BulletAlignmentPayload? = nil,
                glyphFormat: Swift.String? = nil,
                glyphSymbol: Swift.String? = nil,
                glyphType: Components.Schemas.NestingLevel.GlyphTypePayload? = nil,
                indentFirstLine: Components.Schemas.Dimension? = nil,
                indentStart: Components.Schemas.Dimension? = nil,
                startNumber: Swift.Int32? = nil,
                textStyle: Components.Schemas.TextStyle? = nil
            ) {
                self.bulletAlignment = bulletAlignment
                self.glyphFormat = glyphFormat
                self.glyphSymbol = glyphSymbol
                self.glyphType = glyphType
                self.indentFirstLine = indentFirstLine
                self.indentStart = indentStart
                self.startNumber = startNumber
                self.textStyle = textStyle
            }
            public enum CodingKeys: String, CodingKey {
                case bulletAlignment
                case glyphFormat
                case glyphSymbol
                case glyphType
                case indentFirstLine
                case indentStart
                case startNumber
                case textStyle
            }
        }
        /// A mask that indicates which of the fields on the base NestingLevel have been changed in this suggestion. For any field set to true, there's a new suggested value.
        ///
        /// - Remark: Generated from `#/components/schemas/NestingLevelSuggestionState`.
        public struct NestingLevelSuggestionState: Codable, Hashable, Sendable {
            /// Indicates if there was a suggested change to bullet_alignment.
            ///
            /// - Remark: Generated from `#/components/schemas/NestingLevelSuggestionState/bulletAlignmentSuggested`.
            public var bulletAlignmentSuggested: Swift.Bool?
            /// Indicates if there was a suggested change to glyph_format.
            ///
            /// - Remark: Generated from `#/components/schemas/NestingLevelSuggestionState/glyphFormatSuggested`.
            public var glyphFormatSuggested: Swift.Bool?
            /// Indicates if there was a suggested change to glyph_symbol.
            ///
            /// - Remark: Generated from `#/components/schemas/NestingLevelSuggestionState/glyphSymbolSuggested`.
            public var glyphSymbolSuggested: Swift.Bool?
            /// Indicates if there was a suggested change to glyph_type.
            ///
            /// - Remark: Generated from `#/components/schemas/NestingLevelSuggestionState/glyphTypeSuggested`.
            public var glyphTypeSuggested: Swift.Bool?
            /// Indicates if there was a suggested change to indent_first_line.
            ///
            /// - Remark: Generated from `#/components/schemas/NestingLevelSuggestionState/indentFirstLineSuggested`.
            public var indentFirstLineSuggested: Swift.Bool?
            /// Indicates if there was a suggested change to indent_start.
            ///
            /// - Remark: Generated from `#/components/schemas/NestingLevelSuggestionState/indentStartSuggested`.
            public var indentStartSuggested: Swift.Bool?
            /// Indicates if there was a suggested change to start_number.
            ///
            /// - Remark: Generated from `#/components/schemas/NestingLevelSuggestionState/startNumberSuggested`.
            public var startNumberSuggested: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/NestingLevelSuggestionState/textStyleSuggestionState`.
            public var textStyleSuggestionState: Components.Schemas.TextStyleSuggestionState?
            /// Creates a new `NestingLevelSuggestionState`.
            ///
            /// - Parameters:
            ///   - bulletAlignmentSuggested: Indicates if there was a suggested change to bullet_alignment.
            ///   - glyphFormatSuggested: Indicates if there was a suggested change to glyph_format.
            ///   - glyphSymbolSuggested: Indicates if there was a suggested change to glyph_symbol.
            ///   - glyphTypeSuggested: Indicates if there was a suggested change to glyph_type.
            ///   - indentFirstLineSuggested: Indicates if there was a suggested change to indent_first_line.
            ///   - indentStartSuggested: Indicates if there was a suggested change to indent_start.
            ///   - startNumberSuggested: Indicates if there was a suggested change to start_number.
            ///   - textStyleSuggestionState:
            public init(
                bulletAlignmentSuggested: Swift.Bool? = nil,
                glyphFormatSuggested: Swift.Bool? = nil,
                glyphSymbolSuggested: Swift.Bool? = nil,
                glyphTypeSuggested: Swift.Bool? = nil,
                indentFirstLineSuggested: Swift.Bool? = nil,
                indentStartSuggested: Swift.Bool? = nil,
                startNumberSuggested: Swift.Bool? = nil,
                textStyleSuggestionState: Components.Schemas.TextStyleSuggestionState? = nil
            ) {
                self.bulletAlignmentSuggested = bulletAlignmentSuggested
                self.glyphFormatSuggested = glyphFormatSuggested
                self.glyphSymbolSuggested = glyphSymbolSuggested
                self.glyphTypeSuggested = glyphTypeSuggested
                self.indentFirstLineSuggested = indentFirstLineSuggested
                self.indentStartSuggested = indentStartSuggested
                self.startNumberSuggested = startNumberSuggested
                self.textStyleSuggestionState = textStyleSuggestionState
            }
            public enum CodingKeys: String, CodingKey {
                case bulletAlignmentSuggested
                case glyphFormatSuggested
                case glyphSymbolSuggested
                case glyphTypeSuggested
                case indentFirstLineSuggested
                case indentStartSuggested
                case startNumberSuggested
                case textStyleSuggestionState
            }
        }
        /// A collection of object IDs.
        ///
        /// - Remark: Generated from `#/components/schemas/ObjectReferences`.
        public struct ObjectReferences: Codable, Hashable, Sendable {
            /// The object IDs.
            ///
            /// - Remark: Generated from `#/components/schemas/ObjectReferences/objectIds`.
            public var objectIds: [Swift.String]?
            /// Creates a new `ObjectReferences`.
            ///
            /// - Parameters:
            ///   - objectIds: The object IDs.
            public init(objectIds: [Swift.String]? = nil) {
                self.objectIds = objectIds
            }
            public enum CodingKeys: String, CodingKey {
                case objectIds
            }
        }
        /// A color that can either be fully opaque or fully transparent.
        ///
        /// - Remark: Generated from `#/components/schemas/OptionalColor`.
        public struct OptionalColor: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/OptionalColor/color`.
            public var color: Components.Schemas.Color?
            /// Creates a new `OptionalColor`.
            ///
            /// - Parameters:
            ///   - color:
            public init(color: Components.Schemas.Color? = nil) {
                self.color = color
            }
            public enum CodingKeys: String, CodingKey {
                case color
            }
        }
        /// A ParagraphElement representing a page break. A page break makes the subsequent text start at the top of the next page.
        ///
        /// - Remark: Generated from `#/components/schemas/PageBreak`.
        public struct PageBreak: Codable, Hashable, Sendable {
            /// The suggested deletion IDs. If empty, then there are no suggested deletions of this content.
            ///
            /// - Remark: Generated from `#/components/schemas/PageBreak/suggestedDeletionIds`.
            public var suggestedDeletionIds: [Swift.String]?
            /// The suggested insertion IDs. A PageBreak may have multiple insertion IDs if it's a nested suggested change. If empty, then this is not a suggested insertion.
            ///
            /// - Remark: Generated from `#/components/schemas/PageBreak/suggestedInsertionIds`.
            public var suggestedInsertionIds: [Swift.String]?
            /// The suggested text style changes to this PageBreak, keyed by suggestion ID.
            ///
            /// - Remark: Generated from `#/components/schemas/PageBreak/suggestedTextStyleChanges`.
            public struct SuggestedTextStyleChangesPayload: Codable, Hashable, Sendable {
                /// A container of undocumented properties.
                public var additionalProperties: [String: Components.Schemas.SuggestedTextStyle]
                /// Creates a new `SuggestedTextStyleChangesPayload`.
                ///
                /// - Parameters:
                ///   - additionalProperties: A container of undocumented properties.
                public init(additionalProperties: [String: Components.Schemas.SuggestedTextStyle] = .init()) {
                    self.additionalProperties = additionalProperties
                }
                public init(from decoder: any Decoder) throws {
                    additionalProperties = try decoder.decodeAdditionalProperties(knownKeys: [])
                }
                public func encode(to encoder: any Encoder) throws {
                    try encoder.encodeAdditionalProperties(additionalProperties)
                }
            }
            /// The suggested text style changes to this PageBreak, keyed by suggestion ID.
            ///
            /// - Remark: Generated from `#/components/schemas/PageBreak/suggestedTextStyleChanges`.
            public var suggestedTextStyleChanges: Components.Schemas.PageBreak.SuggestedTextStyleChangesPayload?
            /// - Remark: Generated from `#/components/schemas/PageBreak/textStyle`.
            public var textStyle: Components.Schemas.TextStyle?
            /// Creates a new `PageBreak`.
            ///
            /// - Parameters:
            ///   - suggestedDeletionIds: The suggested deletion IDs. If empty, then there are no suggested deletions of this content.
            ///   - suggestedInsertionIds: The suggested insertion IDs. A PageBreak may have multiple insertion IDs if it's a nested suggested change. If empty, then this is not a suggested insertion.
            ///   - suggestedTextStyleChanges: The suggested text style changes to this PageBreak, keyed by suggestion ID.
            ///   - textStyle:
            public init(
                suggestedDeletionIds: [Swift.String]? = nil,
                suggestedInsertionIds: [Swift.String]? = nil,
                suggestedTextStyleChanges: Components.Schemas.PageBreak.SuggestedTextStyleChangesPayload? = nil,
                textStyle: Components.Schemas.TextStyle? = nil
            ) {
                self.suggestedDeletionIds = suggestedDeletionIds
                self.suggestedInsertionIds = suggestedInsertionIds
                self.suggestedTextStyleChanges = suggestedTextStyleChanges
                self.textStyle = textStyle
            }
            public enum CodingKeys: String, CodingKey {
                case suggestedDeletionIds
                case suggestedInsertionIds
                case suggestedTextStyleChanges
                case textStyle
            }
        }
        /// A StructuralElement representing a paragraph. A paragraph is a range of content that's terminated with a newline character.
        ///
        /// - Remark: Generated from `#/components/schemas/Paragraph`.
        public struct Paragraph: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/Paragraph/bullet`.
            public var bullet: Components.Schemas.Bullet?
            /// The content of the paragraph, broken down into its component parts.
            ///
            /// - Remark: Generated from `#/components/schemas/Paragraph/elements`.
            public var elements: [Components.Schemas.ParagraphElement]?
            /// - Remark: Generated from `#/components/schemas/Paragraph/paragraphStyle`.
            public var paragraphStyle: Components.Schemas.ParagraphStyle?
            /// The IDs of the positioned objects tethered to this paragraph.
            ///
            /// - Remark: Generated from `#/components/schemas/Paragraph/positionedObjectIds`.
            public var positionedObjectIds: [Swift.String]?
            /// The suggested changes to this paragraph's bullet.
            ///
            /// - Remark: Generated from `#/components/schemas/Paragraph/suggestedBulletChanges`.
            public struct SuggestedBulletChangesPayload: Codable, Hashable, Sendable {
                /// A container of undocumented properties.
                public var additionalProperties: [String: Components.Schemas.SuggestedBullet]
                /// Creates a new `SuggestedBulletChangesPayload`.
                ///
                /// - Parameters:
                ///   - additionalProperties: A container of undocumented properties.
                public init(additionalProperties: [String: Components.Schemas.SuggestedBullet] = .init()) {
                    self.additionalProperties = additionalProperties
                }
                public init(from decoder: any Decoder) throws {
                    additionalProperties = try decoder.decodeAdditionalProperties(knownKeys: [])
                }
                public func encode(to encoder: any Encoder) throws {
                    try encoder.encodeAdditionalProperties(additionalProperties)
                }
            }
            /// The suggested changes to this paragraph's bullet.
            ///
            /// - Remark: Generated from `#/components/schemas/Paragraph/suggestedBulletChanges`.
            public var suggestedBulletChanges: Components.Schemas.Paragraph.SuggestedBulletChangesPayload?
            /// The suggested paragraph style changes to this paragraph, keyed by suggestion ID.
            ///
            /// - Remark: Generated from `#/components/schemas/Paragraph/suggestedParagraphStyleChanges`.
            public struct SuggestedParagraphStyleChangesPayload: Codable, Hashable, Sendable {
                /// A container of undocumented properties.
                public var additionalProperties: [String: Components.Schemas.SuggestedParagraphStyle]
                /// Creates a new `SuggestedParagraphStyleChangesPayload`.
                ///
                /// - Parameters:
                ///   - additionalProperties: A container of undocumented properties.
                public init(additionalProperties: [String: Components.Schemas.SuggestedParagraphStyle] = .init()) {
                    self.additionalProperties = additionalProperties
                }
                public init(from decoder: any Decoder) throws {
                    additionalProperties = try decoder.decodeAdditionalProperties(knownKeys: [])
                }
                public func encode(to encoder: any Encoder) throws {
                    try encoder.encodeAdditionalProperties(additionalProperties)
                }
            }
            /// The suggested paragraph style changes to this paragraph, keyed by suggestion ID.
            ///
            /// - Remark: Generated from `#/components/schemas/Paragraph/suggestedParagraphStyleChanges`.
            public var suggestedParagraphStyleChanges: Components.Schemas.Paragraph.SuggestedParagraphStyleChangesPayload?
            /// The IDs of the positioned objects suggested to be attached to this paragraph, keyed by suggestion ID.
            ///
            /// - Remark: Generated from `#/components/schemas/Paragraph/suggestedPositionedObjectIds`.
            public struct SuggestedPositionedObjectIdsPayload: Codable, Hashable, Sendable {
                /// A container of undocumented properties.
                public var additionalProperties: [String: Components.Schemas.ObjectReferences]
                /// Creates a new `SuggestedPositionedObjectIdsPayload`.
                ///
                /// - Parameters:
                ///   - additionalProperties: A container of undocumented properties.
                public init(additionalProperties: [String: Components.Schemas.ObjectReferences] = .init()) {
                    self.additionalProperties = additionalProperties
                }
                public init(from decoder: any Decoder) throws {
                    additionalProperties = try decoder.decodeAdditionalProperties(knownKeys: [])
                }
                public func encode(to encoder: any Encoder) throws {
                    try encoder.encodeAdditionalProperties(additionalProperties)
                }
            }
            /// The IDs of the positioned objects suggested to be attached to this paragraph, keyed by suggestion ID.
            ///
            /// - Remark: Generated from `#/components/schemas/Paragraph/suggestedPositionedObjectIds`.
            public var suggestedPositionedObjectIds: Components.Schemas.Paragraph.SuggestedPositionedObjectIdsPayload?
            /// Creates a new `Paragraph`.
            ///
            /// - Parameters:
            ///   - bullet:
            ///   - elements: The content of the paragraph, broken down into its component parts.
            ///   - paragraphStyle:
            ///   - positionedObjectIds: The IDs of the positioned objects tethered to this paragraph.
            ///   - suggestedBulletChanges: The suggested changes to this paragraph's bullet.
            ///   - suggestedParagraphStyleChanges: The suggested paragraph style changes to this paragraph, keyed by suggestion ID.
            ///   - suggestedPositionedObjectIds: The IDs of the positioned objects suggested to be attached to this paragraph, keyed by suggestion ID.
            public init(
                bullet: Components.Schemas.Bullet? = nil,
                elements: [Components.Schemas.ParagraphElement]? = nil,
                paragraphStyle: Components.Schemas.ParagraphStyle? = nil,
                positionedObjectIds: [Swift.String]? = nil,
                suggestedBulletChanges: Components.Schemas.Paragraph.SuggestedBulletChangesPayload? = nil,
                suggestedParagraphStyleChanges: Components.Schemas.Paragraph.SuggestedParagraphStyleChangesPayload? = nil,
                suggestedPositionedObjectIds: Components.Schemas.Paragraph.SuggestedPositionedObjectIdsPayload? = nil
            ) {
                self.bullet = bullet
                self.elements = elements
                self.paragraphStyle = paragraphStyle
                self.positionedObjectIds = positionedObjectIds
                self.suggestedBulletChanges = suggestedBulletChanges
                self.suggestedParagraphStyleChanges = suggestedParagraphStyleChanges
                self.suggestedPositionedObjectIds = suggestedPositionedObjectIds
            }
            public enum CodingKeys: String, CodingKey {
                case bullet
                case elements
                case paragraphStyle
                case positionedObjectIds
                case suggestedBulletChanges
                case suggestedParagraphStyleChanges
                case suggestedPositionedObjectIds
            }
        }
        /// A border around a paragraph.
        ///
        /// - Remark: Generated from `#/components/schemas/ParagraphBorder`.
        public struct ParagraphBorder: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/ParagraphBorder/color`.
            public var color: Components.Schemas.OptionalColor?
            /// The dash style of the border.
            ///
            /// - Remark: Generated from `#/components/schemas/ParagraphBorder/dashStyle`.
            @frozen public enum DashStylePayload: String, Codable, Hashable, Sendable, CaseIterable {
                case dashStyleUnspecified = "DASH_STYLE_UNSPECIFIED"
                case solid = "SOLID"
                case dot = "DOT"
                case dash = "DASH"
            }
            /// The dash style of the border.
            ///
            /// - Remark: Generated from `#/components/schemas/ParagraphBorder/dashStyle`.
            public var dashStyle: Components.Schemas.ParagraphBorder.DashStylePayload?
            /// - Remark: Generated from `#/components/schemas/ParagraphBorder/padding`.
            public var padding: Components.Schemas.Dimension?
            /// - Remark: Generated from `#/components/schemas/ParagraphBorder/width`.
            public var width: Components.Schemas.Dimension?
            /// Creates a new `ParagraphBorder`.
            ///
            /// - Parameters:
            ///   - color:
            ///   - dashStyle: The dash style of the border.
            ///   - padding:
            ///   - width:
            public init(
                color: Components.Schemas.OptionalColor? = nil,
                dashStyle: Components.Schemas.ParagraphBorder.DashStylePayload? = nil,
                padding: Components.Schemas.Dimension? = nil,
                width: Components.Schemas.Dimension? = nil
            ) {
                self.color = color
                self.dashStyle = dashStyle
                self.padding = padding
                self.width = width
            }
            public enum CodingKeys: String, CodingKey {
                case color
                case dashStyle
                case padding
                case width
            }
        }
        /// A ParagraphElement describes content within a Paragraph.
        ///
        /// - Remark: Generated from `#/components/schemas/ParagraphElement`.
        public struct ParagraphElement: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/ParagraphElement/autoText`.
            public var autoText: Components.Schemas.AutoText?
            /// - Remark: Generated from `#/components/schemas/ParagraphElement/columnBreak`.
            public var columnBreak: Components.Schemas.ColumnBreak?
            /// The zero-base end index of this paragraph element, exclusive, in UTF-16 code units.
            ///
            /// - Remark: Generated from `#/components/schemas/ParagraphElement/endIndex`.
            public var endIndex: Swift.Int32?
            /// - Remark: Generated from `#/components/schemas/ParagraphElement/equation`.
            public var equation: Components.Schemas.Equation?
            /// - Remark: Generated from `#/components/schemas/ParagraphElement/footnoteReference`.
            public var footnoteReference: Components.Schemas.FootnoteReference?
            /// - Remark: Generated from `#/components/schemas/ParagraphElement/horizontalRule`.
            public var horizontalRule: Components.Schemas.HorizontalRule?
            /// - Remark: Generated from `#/components/schemas/ParagraphElement/inlineObjectElement`.
            public var inlineObjectElement: Components.Schemas.InlineObjectElement?
            /// - Remark: Generated from `#/components/schemas/ParagraphElement/pageBreak`.
            public var pageBreak: Components.Schemas.PageBreak?
            /// - Remark: Generated from `#/components/schemas/ParagraphElement/person`.
            public var person: Components.Schemas.Person?
            /// - Remark: Generated from `#/components/schemas/ParagraphElement/richLink`.
            public var richLink: Components.Schemas.RichLink?
            /// The zero-based start index of this paragraph element, in UTF-16 code units.
            ///
            /// - Remark: Generated from `#/components/schemas/ParagraphElement/startIndex`.
            public var startIndex: Swift.Int32?
            /// - Remark: Generated from `#/components/schemas/ParagraphElement/textRun`.
            public var textRun: Components.Schemas.TextRun?
            /// Creates a new `ParagraphElement`.
            ///
            /// - Parameters:
            ///   - autoText:
            ///   - columnBreak:
            ///   - endIndex: The zero-base end index of this paragraph element, exclusive, in UTF-16 code units.
            ///   - equation:
            ///   - footnoteReference:
            ///   - horizontalRule:
            ///   - inlineObjectElement:
            ///   - pageBreak:
            ///   - person:
            ///   - richLink:
            ///   - startIndex: The zero-based start index of this paragraph element, in UTF-16 code units.
            ///   - textRun:
            public init(
                autoText: Components.Schemas.AutoText? = nil,
                columnBreak: Components.Schemas.ColumnBreak? = nil,
                endIndex: Swift.Int32? = nil,
                equation: Components.Schemas.Equation? = nil,
                footnoteReference: Components.Schemas.FootnoteReference? = nil,
                horizontalRule: Components.Schemas.HorizontalRule? = nil,
                inlineObjectElement: Components.Schemas.InlineObjectElement? = nil,
                pageBreak: Components.Schemas.PageBreak? = nil,
                person: Components.Schemas.Person? = nil,
                richLink: Components.Schemas.RichLink? = nil,
                startIndex: Swift.Int32? = nil,
                textRun: Components.Schemas.TextRun? = nil
            ) {
                self.autoText = autoText
                self.columnBreak = columnBreak
                self.endIndex = endIndex
                self.equation = equation
                self.footnoteReference = footnoteReference
                self.horizontalRule = horizontalRule
                self.inlineObjectElement = inlineObjectElement
                self.pageBreak = pageBreak
                self.person = person
                self.richLink = richLink
                self.startIndex = startIndex
                self.textRun = textRun
            }
            public enum CodingKeys: String, CodingKey {
                case autoText
                case columnBreak
                case endIndex
                case equation
                case footnoteReference
                case horizontalRule
                case inlineObjectElement
                case pageBreak
                case person
                case richLink
                case startIndex
                case textRun
            }
        }
        /// Styles that apply to a whole paragraph. Inherited paragraph styles are represented as unset fields in this message. A paragraph style's parent depends on where the paragraph style is defined: * The ParagraphStyle on a Paragraph inherits from the paragraph's corresponding named style type. * The ParagraphStyle on a named style inherits from the normal text named style. * The ParagraphStyle of the normal text named style inherits from the default paragraph style in the Docs editor. * The ParagraphStyle on a Paragraph element that's contained in a table may inherit its paragraph style from the table style. If the paragraph style does not inherit from a parent, unsetting fields will revert the style to a value matching the defaults in the Docs editor.
        ///
        /// - Remark: Generated from `#/components/schemas/ParagraphStyle`.
        public struct ParagraphStyle: Codable, Hashable, Sendable {
            /// The text alignment for this paragraph.
            ///
            /// - Remark: Generated from `#/components/schemas/ParagraphStyle/alignment`.
            @frozen public enum AlignmentPayload: String, Codable, Hashable, Sendable, CaseIterable {
                case alignmentUnspecified = "ALIGNMENT_UNSPECIFIED"
                case start = "START"
                case center = "CENTER"
                case end = "END"
                case justified = "JUSTIFIED"
            }
            /// The text alignment for this paragraph.
            ///
            /// - Remark: Generated from `#/components/schemas/ParagraphStyle/alignment`.
            public var alignment: Components.Schemas.ParagraphStyle.AlignmentPayload?
            /// Whether to avoid widows and orphans for the paragraph. If unset, the value is inherited from the parent.
            ///
            /// - Remark: Generated from `#/components/schemas/ParagraphStyle/avoidWidowAndOrphan`.
            public var avoidWidowAndOrphan: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/ParagraphStyle/borderBetween`.
            public var borderBetween: Components.Schemas.ParagraphBorder?
            /// - Remark: Generated from `#/components/schemas/ParagraphStyle/borderBottom`.
            public var borderBottom: Components.Schemas.ParagraphBorder?
            /// - Remark: Generated from `#/components/schemas/ParagraphStyle/borderLeft`.
            public var borderLeft: Components.Schemas.ParagraphBorder?
            /// - Remark: Generated from `#/components/schemas/ParagraphStyle/borderRight`.
            public var borderRight: Components.Schemas.ParagraphBorder?
            /// - Remark: Generated from `#/components/schemas/ParagraphStyle/borderTop`.
            public var borderTop: Components.Schemas.ParagraphBorder?
            /// The text direction of this paragraph. If unset, the value defaults to LEFT_TO_RIGHT since paragraph direction is not inherited.
            ///
            /// - Remark: Generated from `#/components/schemas/ParagraphStyle/direction`.
            @frozen public enum DirectionPayload: String, Codable, Hashable, Sendable, CaseIterable {
                case contentDirectionUnspecified = "CONTENT_DIRECTION_UNSPECIFIED"
                case leftToRight = "LEFT_TO_RIGHT"
                case rightToLeft = "RIGHT_TO_LEFT"
            }
            /// The text direction of this paragraph. If unset, the value defaults to LEFT_TO_RIGHT since paragraph direction is not inherited.
            ///
            /// - Remark: Generated from `#/components/schemas/ParagraphStyle/direction`.
            public var direction: Components.Schemas.ParagraphStyle.DirectionPayload?
            /// The heading ID of the paragraph. If empty, then this paragraph is not a heading. This property is read-only.
            ///
            /// - Remark: Generated from `#/components/schemas/ParagraphStyle/headingId`.
            public var headingId: Swift.String?
            /// - Remark: Generated from `#/components/schemas/ParagraphStyle/indentEnd`.
            public var indentEnd: Components.Schemas.Dimension?
            /// - Remark: Generated from `#/components/schemas/ParagraphStyle/indentFirstLine`.
            public var indentFirstLine: Components.Schemas.Dimension?
            /// - Remark: Generated from `#/components/schemas/ParagraphStyle/indentStart`.
            public var indentStart: Components.Schemas.Dimension?
            /// Whether all lines of the paragraph should be laid out on the same page or column if possible. If unset, the value is inherited from the parent.
            ///
            /// - Remark: Generated from `#/components/schemas/ParagraphStyle/keepLinesTogether`.
            public var keepLinesTogether: Swift.Bool?
            /// Whether at least a part of this paragraph should be laid out on the same page or column as the next paragraph if possible. If unset, the value is inherited from the parent.
            ///
            /// - Remark: Generated from `#/components/schemas/ParagraphStyle/keepWithNext`.
            public var keepWithNext: Swift.Bool?
            /// The amount of space between lines, as a percentage of normal, where normal is represented as 100.0. If unset, the value is inherited from the parent.
            ///
            /// - Remark: Generated from `#/components/schemas/ParagraphStyle/lineSpacing`.
            public var lineSpacing: Swift.Float?
            /// The named style type of the paragraph. Since updating the named style type affects other properties within ParagraphStyle, the named style type is applied before the other properties are updated.
            ///
            /// - Remark: Generated from `#/components/schemas/ParagraphStyle/namedStyleType`.
            @frozen public enum NamedStyleTypePayload: String, Codable, Hashable, Sendable, CaseIterable {
                case namedStyleTypeUnspecified = "NAMED_STYLE_TYPE_UNSPECIFIED"
                case normalText = "NORMAL_TEXT"
                case title = "TITLE"
                case subtitle = "SUBTITLE"
                case heading1 = "HEADING_1"
                case heading2 = "HEADING_2"
                case heading3 = "HEADING_3"
                case heading4 = "HEADING_4"
                case heading5 = "HEADING_5"
                case heading6 = "HEADING_6"
            }
            /// The named style type of the paragraph. Since updating the named style type affects other properties within ParagraphStyle, the named style type is applied before the other properties are updated.
            ///
            /// - Remark: Generated from `#/components/schemas/ParagraphStyle/namedStyleType`.
            public var namedStyleType: Components.Schemas.ParagraphStyle.NamedStyleTypePayload?
            /// Whether the current paragraph should always start at the beginning of a page. If unset, the value is inherited from the parent. Attempting to update page_break_before for paragraphs in unsupported regions, including Table, Header, Footer and Footnote, can result in an invalid document state that returns a 400 bad request error.
            ///
            /// - Remark: Generated from `#/components/schemas/ParagraphStyle/pageBreakBefore`.
            public var pageBreakBefore: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/ParagraphStyle/shading`.
            public var shading: Components.Schemas.Shading?
            /// - Remark: Generated from `#/components/schemas/ParagraphStyle/spaceAbove`.
            public var spaceAbove: Components.Schemas.Dimension?
            /// - Remark: Generated from `#/components/schemas/ParagraphStyle/spaceBelow`.
            public var spaceBelow: Components.Schemas.Dimension?
            /// The spacing mode for the paragraph.
            ///
            /// - Remark: Generated from `#/components/schemas/ParagraphStyle/spacingMode`.
            @frozen public enum SpacingModePayload: String, Codable, Hashable, Sendable, CaseIterable {
                case spacingModeUnspecified = "SPACING_MODE_UNSPECIFIED"
                case neverCollapse = "NEVER_COLLAPSE"
                case collapseLists = "COLLAPSE_LISTS"
            }
            /// The spacing mode for the paragraph.
            ///
            /// - Remark: Generated from `#/components/schemas/ParagraphStyle/spacingMode`.
            public var spacingMode: Components.Schemas.ParagraphStyle.SpacingModePayload?
            /// A list of the tab stops for this paragraph. The list of tab stops is not inherited. This property is read-only.
            ///
            /// - Remark: Generated from `#/components/schemas/ParagraphStyle/tabStops`.
            public var tabStops: [Components.Schemas.TabStop]?
            /// Creates a new `ParagraphStyle`.
            ///
            /// - Parameters:
            ///   - alignment: The text alignment for this paragraph.
            ///   - avoidWidowAndOrphan: Whether to avoid widows and orphans for the paragraph. If unset, the value is inherited from the parent.
            ///   - borderBetween:
            ///   - borderBottom:
            ///   - borderLeft:
            ///   - borderRight:
            ///   - borderTop:
            ///   - direction: The text direction of this paragraph. If unset, the value defaults to LEFT_TO_RIGHT since paragraph direction is not inherited.
            ///   - headingId: The heading ID of the paragraph. If empty, then this paragraph is not a heading. This property is read-only.
            ///   - indentEnd:
            ///   - indentFirstLine:
            ///   - indentStart:
            ///   - keepLinesTogether: Whether all lines of the paragraph should be laid out on the same page or column if possible. If unset, the value is inherited from the parent.
            ///   - keepWithNext: Whether at least a part of this paragraph should be laid out on the same page or column as the next paragraph if possible. If unset, the value is inherited from the parent.
            ///   - lineSpacing: The amount of space between lines, as a percentage of normal, where normal is represented as 100.0. If unset, the value is inherited from the parent.
            ///   - namedStyleType: The named style type of the paragraph. Since updating the named style type affects other properties within ParagraphStyle, the named style type is applied before the other properties are updated.
            ///   - pageBreakBefore: Whether the current paragraph should always start at the beginning of a page. If unset, the value is inherited from the parent. Attempting to update page_break_before for paragraphs in unsupported regions, including Table, Header, Footer and Footnote, can result in an invalid document state that returns a 400 bad request error.
            ///   - shading:
            ///   - spaceAbove:
            ///   - spaceBelow:
            ///   - spacingMode: The spacing mode for the paragraph.
            ///   - tabStops: A list of the tab stops for this paragraph. The list of tab stops is not inherited. This property is read-only.
            public init(
                alignment: Components.Schemas.ParagraphStyle.AlignmentPayload? = nil,
                avoidWidowAndOrphan: Swift.Bool? = nil,
                borderBetween: Components.Schemas.ParagraphBorder? = nil,
                borderBottom: Components.Schemas.ParagraphBorder? = nil,
                borderLeft: Components.Schemas.ParagraphBorder? = nil,
                borderRight: Components.Schemas.ParagraphBorder? = nil,
                borderTop: Components.Schemas.ParagraphBorder? = nil,
                direction: Components.Schemas.ParagraphStyle.DirectionPayload? = nil,
                headingId: Swift.String? = nil,
                indentEnd: Components.Schemas.Dimension? = nil,
                indentFirstLine: Components.Schemas.Dimension? = nil,
                indentStart: Components.Schemas.Dimension? = nil,
                keepLinesTogether: Swift.Bool? = nil,
                keepWithNext: Swift.Bool? = nil,
                lineSpacing: Swift.Float? = nil,
                namedStyleType: Components.Schemas.ParagraphStyle.NamedStyleTypePayload? = nil,
                pageBreakBefore: Swift.Bool? = nil,
                shading: Components.Schemas.Shading? = nil,
                spaceAbove: Components.Schemas.Dimension? = nil,
                spaceBelow: Components.Schemas.Dimension? = nil,
                spacingMode: Components.Schemas.ParagraphStyle.SpacingModePayload? = nil,
                tabStops: [Components.Schemas.TabStop]? = nil
            ) {
                self.alignment = alignment
                self.avoidWidowAndOrphan = avoidWidowAndOrphan
                self.borderBetween = borderBetween
                self.borderBottom = borderBottom
                self.borderLeft = borderLeft
                self.borderRight = borderRight
                self.borderTop = borderTop
                self.direction = direction
                self.headingId = headingId
                self.indentEnd = indentEnd
                self.indentFirstLine = indentFirstLine
                self.indentStart = indentStart
                self.keepLinesTogether = keepLinesTogether
                self.keepWithNext = keepWithNext
                self.lineSpacing = lineSpacing
                self.namedStyleType = namedStyleType
                self.pageBreakBefore = pageBreakBefore
                self.shading = shading
                self.spaceAbove = spaceAbove
                self.spaceBelow = spaceBelow
                self.spacingMode = spacingMode
                self.tabStops = tabStops
            }
            public enum CodingKeys: String, CodingKey {
                case alignment
                case avoidWidowAndOrphan
                case borderBetween
                case borderBottom
                case borderLeft
                case borderRight
                case borderTop
                case direction
                case headingId
                case indentEnd
                case indentFirstLine
                case indentStart
                case keepLinesTogether
                case keepWithNext
                case lineSpacing
                case namedStyleType
                case pageBreakBefore
                case shading
                case spaceAbove
                case spaceBelow
                case spacingMode
                case tabStops
            }
        }
        /// A mask that indicates which of the fields on the base ParagraphStyle have been changed in this suggestion. For any field set to true, there's a new suggested value.
        ///
        /// - Remark: Generated from `#/components/schemas/ParagraphStyleSuggestionState`.
        public struct ParagraphStyleSuggestionState: Codable, Hashable, Sendable {
            /// Indicates if there was a suggested change to alignment.
            ///
            /// - Remark: Generated from `#/components/schemas/ParagraphStyleSuggestionState/alignmentSuggested`.
            public var alignmentSuggested: Swift.Bool?
            /// Indicates if there was a suggested change to avoid_widow_and_orphan.
            ///
            /// - Remark: Generated from `#/components/schemas/ParagraphStyleSuggestionState/avoidWidowAndOrphanSuggested`.
            public var avoidWidowAndOrphanSuggested: Swift.Bool?
            /// Indicates if there was a suggested change to border_between.
            ///
            /// - Remark: Generated from `#/components/schemas/ParagraphStyleSuggestionState/borderBetweenSuggested`.
            public var borderBetweenSuggested: Swift.Bool?
            /// Indicates if there was a suggested change to border_bottom.
            ///
            /// - Remark: Generated from `#/components/schemas/ParagraphStyleSuggestionState/borderBottomSuggested`.
            public var borderBottomSuggested: Swift.Bool?
            /// Indicates if there was a suggested change to border_left.
            ///
            /// - Remark: Generated from `#/components/schemas/ParagraphStyleSuggestionState/borderLeftSuggested`.
            public var borderLeftSuggested: Swift.Bool?
            /// Indicates if there was a suggested change to border_right.
            ///
            /// - Remark: Generated from `#/components/schemas/ParagraphStyleSuggestionState/borderRightSuggested`.
            public var borderRightSuggested: Swift.Bool?
            /// Indicates if there was a suggested change to border_top.
            ///
            /// - Remark: Generated from `#/components/schemas/ParagraphStyleSuggestionState/borderTopSuggested`.
            public var borderTopSuggested: Swift.Bool?
            /// Indicates if there was a suggested change to direction.
            ///
            /// - Remark: Generated from `#/components/schemas/ParagraphStyleSuggestionState/directionSuggested`.
            public var directionSuggested: Swift.Bool?
            /// Indicates if there was a suggested change to heading_id.
            ///
            /// - Remark: Generated from `#/components/schemas/ParagraphStyleSuggestionState/headingIdSuggested`.
            public var headingIdSuggested: Swift.Bool?
            /// Indicates if there was a suggested change to indent_end.
            ///
            /// - Remark: Generated from `#/components/schemas/ParagraphStyleSuggestionState/indentEndSuggested`.
            public var indentEndSuggested: Swift.Bool?
            /// Indicates if there was a suggested change to indent_first_line.
            ///
            /// - Remark: Generated from `#/components/schemas/ParagraphStyleSuggestionState/indentFirstLineSuggested`.
            public var indentFirstLineSuggested: Swift.Bool?
            /// Indicates if there was a suggested change to indent_start.
            ///
            /// - Remark: Generated from `#/components/schemas/ParagraphStyleSuggestionState/indentStartSuggested`.
            public var indentStartSuggested: Swift.Bool?
            /// Indicates if there was a suggested change to keep_lines_together.
            ///
            /// - Remark: Generated from `#/components/schemas/ParagraphStyleSuggestionState/keepLinesTogetherSuggested`.
            public var keepLinesTogetherSuggested: Swift.Bool?
            /// Indicates if there was a suggested change to keep_with_next.
            ///
            /// - Remark: Generated from `#/components/schemas/ParagraphStyleSuggestionState/keepWithNextSuggested`.
            public var keepWithNextSuggested: Swift.Bool?
            /// Indicates if there was a suggested change to line_spacing.
            ///
            /// - Remark: Generated from `#/components/schemas/ParagraphStyleSuggestionState/lineSpacingSuggested`.
            public var lineSpacingSuggested: Swift.Bool?
            /// Indicates if there was a suggested change to named_style_type.
            ///
            /// - Remark: Generated from `#/components/schemas/ParagraphStyleSuggestionState/namedStyleTypeSuggested`.
            public var namedStyleTypeSuggested: Swift.Bool?
            /// Indicates if there was a suggested change to page_break_before.
            ///
            /// - Remark: Generated from `#/components/schemas/ParagraphStyleSuggestionState/pageBreakBeforeSuggested`.
            public var pageBreakBeforeSuggested: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/ParagraphStyleSuggestionState/shadingSuggestionState`.
            public var shadingSuggestionState: Components.Schemas.ShadingSuggestionState?
            /// Indicates if there was a suggested change to space_above.
            ///
            /// - Remark: Generated from `#/components/schemas/ParagraphStyleSuggestionState/spaceAboveSuggested`.
            public var spaceAboveSuggested: Swift.Bool?
            /// Indicates if there was a suggested change to space_below.
            ///
            /// - Remark: Generated from `#/components/schemas/ParagraphStyleSuggestionState/spaceBelowSuggested`.
            public var spaceBelowSuggested: Swift.Bool?
            /// Indicates if there was a suggested change to spacing_mode.
            ///
            /// - Remark: Generated from `#/components/schemas/ParagraphStyleSuggestionState/spacingModeSuggested`.
            public var spacingModeSuggested: Swift.Bool?
            /// Creates a new `ParagraphStyleSuggestionState`.
            ///
            /// - Parameters:
            ///   - alignmentSuggested: Indicates if there was a suggested change to alignment.
            ///   - avoidWidowAndOrphanSuggested: Indicates if there was a suggested change to avoid_widow_and_orphan.
            ///   - borderBetweenSuggested: Indicates if there was a suggested change to border_between.
            ///   - borderBottomSuggested: Indicates if there was a suggested change to border_bottom.
            ///   - borderLeftSuggested: Indicates if there was a suggested change to border_left.
            ///   - borderRightSuggested: Indicates if there was a suggested change to border_right.
            ///   - borderTopSuggested: Indicates if there was a suggested change to border_top.
            ///   - directionSuggested: Indicates if there was a suggested change to direction.
            ///   - headingIdSuggested: Indicates if there was a suggested change to heading_id.
            ///   - indentEndSuggested: Indicates if there was a suggested change to indent_end.
            ///   - indentFirstLineSuggested: Indicates if there was a suggested change to indent_first_line.
            ///   - indentStartSuggested: Indicates if there was a suggested change to indent_start.
            ///   - keepLinesTogetherSuggested: Indicates if there was a suggested change to keep_lines_together.
            ///   - keepWithNextSuggested: Indicates if there was a suggested change to keep_with_next.
            ///   - lineSpacingSuggested: Indicates if there was a suggested change to line_spacing.
            ///   - namedStyleTypeSuggested: Indicates if there was a suggested change to named_style_type.
            ///   - pageBreakBeforeSuggested: Indicates if there was a suggested change to page_break_before.
            ///   - shadingSuggestionState:
            ///   - spaceAboveSuggested: Indicates if there was a suggested change to space_above.
            ///   - spaceBelowSuggested: Indicates if there was a suggested change to space_below.
            ///   - spacingModeSuggested: Indicates if there was a suggested change to spacing_mode.
            public init(
                alignmentSuggested: Swift.Bool? = nil,
                avoidWidowAndOrphanSuggested: Swift.Bool? = nil,
                borderBetweenSuggested: Swift.Bool? = nil,
                borderBottomSuggested: Swift.Bool? = nil,
                borderLeftSuggested: Swift.Bool? = nil,
                borderRightSuggested: Swift.Bool? = nil,
                borderTopSuggested: Swift.Bool? = nil,
                directionSuggested: Swift.Bool? = nil,
                headingIdSuggested: Swift.Bool? = nil,
                indentEndSuggested: Swift.Bool? = nil,
                indentFirstLineSuggested: Swift.Bool? = nil,
                indentStartSuggested: Swift.Bool? = nil,
                keepLinesTogetherSuggested: Swift.Bool? = nil,
                keepWithNextSuggested: Swift.Bool? = nil,
                lineSpacingSuggested: Swift.Bool? = nil,
                namedStyleTypeSuggested: Swift.Bool? = nil,
                pageBreakBeforeSuggested: Swift.Bool? = nil,
                shadingSuggestionState: Components.Schemas.ShadingSuggestionState? = nil,
                spaceAboveSuggested: Swift.Bool? = nil,
                spaceBelowSuggested: Swift.Bool? = nil,
                spacingModeSuggested: Swift.Bool? = nil
            ) {
                self.alignmentSuggested = alignmentSuggested
                self.avoidWidowAndOrphanSuggested = avoidWidowAndOrphanSuggested
                self.borderBetweenSuggested = borderBetweenSuggested
                self.borderBottomSuggested = borderBottomSuggested
                self.borderLeftSuggested = borderLeftSuggested
                self.borderRightSuggested = borderRightSuggested
                self.borderTopSuggested = borderTopSuggested
                self.directionSuggested = directionSuggested
                self.headingIdSuggested = headingIdSuggested
                self.indentEndSuggested = indentEndSuggested
                self.indentFirstLineSuggested = indentFirstLineSuggested
                self.indentStartSuggested = indentStartSuggested
                self.keepLinesTogetherSuggested = keepLinesTogetherSuggested
                self.keepWithNextSuggested = keepWithNextSuggested
                self.lineSpacingSuggested = lineSpacingSuggested
                self.namedStyleTypeSuggested = namedStyleTypeSuggested
                self.pageBreakBeforeSuggested = pageBreakBeforeSuggested
                self.shadingSuggestionState = shadingSuggestionState
                self.spaceAboveSuggested = spaceAboveSuggested
                self.spaceBelowSuggested = spaceBelowSuggested
                self.spacingModeSuggested = spacingModeSuggested
            }
            public enum CodingKeys: String, CodingKey {
                case alignmentSuggested
                case avoidWidowAndOrphanSuggested
                case borderBetweenSuggested
                case borderBottomSuggested
                case borderLeftSuggested
                case borderRightSuggested
                case borderTopSuggested
                case directionSuggested
                case headingIdSuggested
                case indentEndSuggested
                case indentFirstLineSuggested
                case indentStartSuggested
                case keepLinesTogetherSuggested
                case keepWithNextSuggested
                case lineSpacingSuggested
                case namedStyleTypeSuggested
                case pageBreakBeforeSuggested
                case shadingSuggestionState
                case spaceAboveSuggested
                case spaceBelowSuggested
                case spacingModeSuggested
            }
        }
        /// A person or email address mentioned in a document. These mentions behave as a single, immutable element containing the person's name or email address.
        ///
        /// - Remark: Generated from `#/components/schemas/Person`.
        public struct Person: Codable, Hashable, Sendable {
            /// Output only. The unique ID of this link.
            ///
            /// - Remark: Generated from `#/components/schemas/Person/personId`.
            public var personId: Swift.String?
            /// - Remark: Generated from `#/components/schemas/Person/personProperties`.
            public var personProperties: Components.Schemas.PersonProperties?
            /// IDs for suggestions that remove this person link from the document. A Person might have multiple deletion IDs if, for example, multiple users suggest deleting it. If empty, then this person link isn't suggested for deletion.
            ///
            /// - Remark: Generated from `#/components/schemas/Person/suggestedDeletionIds`.
            public var suggestedDeletionIds: [Swift.String]?
            /// IDs for suggestions that insert this person link into the document. A Person might have multiple insertion IDs if it's a nested suggested change (a suggestion within a suggestion made by a different user, for example). If empty, then this person link isn't a suggested insertion.
            ///
            /// - Remark: Generated from `#/components/schemas/Person/suggestedInsertionIds`.
            public var suggestedInsertionIds: [Swift.String]?
            /// The suggested text style changes to this Person, keyed by suggestion ID.
            ///
            /// - Remark: Generated from `#/components/schemas/Person/suggestedTextStyleChanges`.
            public struct SuggestedTextStyleChangesPayload: Codable, Hashable, Sendable {
                /// A container of undocumented properties.
                public var additionalProperties: [String: Components.Schemas.SuggestedTextStyle]
                /// Creates a new `SuggestedTextStyleChangesPayload`.
                ///
                /// - Parameters:
                ///   - additionalProperties: A container of undocumented properties.
                public init(additionalProperties: [String: Components.Schemas.SuggestedTextStyle] = .init()) {
                    self.additionalProperties = additionalProperties
                }
                public init(from decoder: any Decoder) throws {
                    additionalProperties = try decoder.decodeAdditionalProperties(knownKeys: [])
                }
                public func encode(to encoder: any Encoder) throws {
                    try encoder.encodeAdditionalProperties(additionalProperties)
                }
            }
            /// The suggested text style changes to this Person, keyed by suggestion ID.
            ///
            /// - Remark: Generated from `#/components/schemas/Person/suggestedTextStyleChanges`.
            public var suggestedTextStyleChanges: Components.Schemas.Person.SuggestedTextStyleChangesPayload?
            /// - Remark: Generated from `#/components/schemas/Person/textStyle`.
            public var textStyle: Components.Schemas.TextStyle?
            /// Creates a new `Person`.
            ///
            /// - Parameters:
            ///   - personId: Output only. The unique ID of this link.
            ///   - personProperties:
            ///   - suggestedDeletionIds: IDs for suggestions that remove this person link from the document. A Person might have multiple deletion IDs if, for example, multiple users suggest deleting it. If empty, then this person link isn't suggested for deletion.
            ///   - suggestedInsertionIds: IDs for suggestions that insert this person link into the document. A Person might have multiple insertion IDs if it's a nested suggested change (a suggestion within a suggestion made by a different user, for example). If empty, then this person link isn't a suggested insertion.
            ///   - suggestedTextStyleChanges: The suggested text style changes to this Person, keyed by suggestion ID.
            ///   - textStyle:
            public init(
                personId: Swift.String? = nil,
                personProperties: Components.Schemas.PersonProperties? = nil,
                suggestedDeletionIds: [Swift.String]? = nil,
                suggestedInsertionIds: [Swift.String]? = nil,
                suggestedTextStyleChanges: Components.Schemas.Person.SuggestedTextStyleChangesPayload? = nil,
                textStyle: Components.Schemas.TextStyle? = nil
            ) {
                self.personId = personId
                self.personProperties = personProperties
                self.suggestedDeletionIds = suggestedDeletionIds
                self.suggestedInsertionIds = suggestedInsertionIds
                self.suggestedTextStyleChanges = suggestedTextStyleChanges
                self.textStyle = textStyle
            }
            public enum CodingKeys: String, CodingKey {
                case personId
                case personProperties
                case suggestedDeletionIds
                case suggestedInsertionIds
                case suggestedTextStyleChanges
                case textStyle
            }
        }
        /// Properties specific to a linked Person.
        ///
        /// - Remark: Generated from `#/components/schemas/PersonProperties`.
        public struct PersonProperties: Codable, Hashable, Sendable {
            /// Output only. The email address linked to this Person. This field is always present.
            ///
            /// - Remark: Generated from `#/components/schemas/PersonProperties/email`.
            public var email: Swift.String?
            /// Output only. The name of the person if it's displayed in the link text instead of the person's email address.
            ///
            /// - Remark: Generated from `#/components/schemas/PersonProperties/name`.
            public var name: Swift.String?
            /// Creates a new `PersonProperties`.
            ///
            /// - Parameters:
            ///   - email: Output only. The email address linked to this Person. This field is always present.
            ///   - name: Output only. The name of the person if it's displayed in the link text instead of the person's email address.
            public init(
                email: Swift.String? = nil,
                name: Swift.String? = nil
            ) {
                self.email = email
                self.name = name
            }
            public enum CodingKeys: String, CodingKey {
                case email
                case name
            }
        }
        /// Updates the number of pinned table header rows in a table.
        ///
        /// - Remark: Generated from `#/components/schemas/PinTableHeaderRowsRequest`.
        public struct PinTableHeaderRowsRequest: Codable, Hashable, Sendable {
            /// The number of table rows to pin, where 0 implies that all rows are unpinned.
            ///
            /// - Remark: Generated from `#/components/schemas/PinTableHeaderRowsRequest/pinnedHeaderRowsCount`.
            public var pinnedHeaderRowsCount: Swift.Int32?
            /// - Remark: Generated from `#/components/schemas/PinTableHeaderRowsRequest/tableStartLocation`.
            public var tableStartLocation: Components.Schemas.Location?
            /// Creates a new `PinTableHeaderRowsRequest`.
            ///
            /// - Parameters:
            ///   - pinnedHeaderRowsCount: The number of table rows to pin, where 0 implies that all rows are unpinned.
            ///   - tableStartLocation:
            public init(
                pinnedHeaderRowsCount: Swift.Int32? = nil,
                tableStartLocation: Components.Schemas.Location? = nil
            ) {
                self.pinnedHeaderRowsCount = pinnedHeaderRowsCount
                self.tableStartLocation = tableStartLocation
            }
            public enum CodingKeys: String, CodingKey {
                case pinnedHeaderRowsCount
                case tableStartLocation
            }
        }
        /// An object that's tethered to a Paragraph and positioned relative to the beginning of the paragraph. A PositionedObject contains an EmbeddedObject such as an image.
        ///
        /// - Remark: Generated from `#/components/schemas/PositionedObject`.
        public struct PositionedObject: Codable, Hashable, Sendable {
            /// The ID of this positioned object.
            ///
            /// - Remark: Generated from `#/components/schemas/PositionedObject/objectId`.
            public var objectId: Swift.String?
            /// - Remark: Generated from `#/components/schemas/PositionedObject/positionedObjectProperties`.
            public var positionedObjectProperties: Components.Schemas.PositionedObjectProperties?
            /// The suggested deletion IDs. If empty, then there are no suggested deletions of this content.
            ///
            /// - Remark: Generated from `#/components/schemas/PositionedObject/suggestedDeletionIds`.
            public var suggestedDeletionIds: [Swift.String]?
            /// The suggested insertion ID. If empty, then this is not a suggested insertion.
            ///
            /// - Remark: Generated from `#/components/schemas/PositionedObject/suggestedInsertionId`.
            public var suggestedInsertionId: Swift.String?
            /// The suggested changes to the positioned object properties, keyed by suggestion ID.
            ///
            /// - Remark: Generated from `#/components/schemas/PositionedObject/suggestedPositionedObjectPropertiesChanges`.
            public struct SuggestedPositionedObjectPropertiesChangesPayload: Codable, Hashable, Sendable {
                /// A container of undocumented properties.
                public var additionalProperties: [String: Components.Schemas.SuggestedPositionedObjectProperties]
                /// Creates a new `SuggestedPositionedObjectPropertiesChangesPayload`.
                ///
                /// - Parameters:
                ///   - additionalProperties: A container of undocumented properties.
                public init(additionalProperties: [String: Components.Schemas.SuggestedPositionedObjectProperties] = .init()) {
                    self.additionalProperties = additionalProperties
                }
                public init(from decoder: any Decoder) throws {
                    additionalProperties = try decoder.decodeAdditionalProperties(knownKeys: [])
                }
                public func encode(to encoder: any Encoder) throws {
                    try encoder.encodeAdditionalProperties(additionalProperties)
                }
            }
            /// The suggested changes to the positioned object properties, keyed by suggestion ID.
            ///
            /// - Remark: Generated from `#/components/schemas/PositionedObject/suggestedPositionedObjectPropertiesChanges`.
            public var suggestedPositionedObjectPropertiesChanges: Components.Schemas.PositionedObject.SuggestedPositionedObjectPropertiesChangesPayload?
            /// Creates a new `PositionedObject`.
            ///
            /// - Parameters:
            ///   - objectId: The ID of this positioned object.
            ///   - positionedObjectProperties:
            ///   - suggestedDeletionIds: The suggested deletion IDs. If empty, then there are no suggested deletions of this content.
            ///   - suggestedInsertionId: The suggested insertion ID. If empty, then this is not a suggested insertion.
            ///   - suggestedPositionedObjectPropertiesChanges: The suggested changes to the positioned object properties, keyed by suggestion ID.
            public init(
                objectId: Swift.String? = nil,
                positionedObjectProperties: Components.Schemas.PositionedObjectProperties? = nil,
                suggestedDeletionIds: [Swift.String]? = nil,
                suggestedInsertionId: Swift.String? = nil,
                suggestedPositionedObjectPropertiesChanges: Components.Schemas.PositionedObject.SuggestedPositionedObjectPropertiesChangesPayload? = nil
            ) {
                self.objectId = objectId
                self.positionedObjectProperties = positionedObjectProperties
                self.suggestedDeletionIds = suggestedDeletionIds
                self.suggestedInsertionId = suggestedInsertionId
                self.suggestedPositionedObjectPropertiesChanges = suggestedPositionedObjectPropertiesChanges
            }
            public enum CodingKeys: String, CodingKey {
                case objectId
                case positionedObjectProperties
                case suggestedDeletionIds
                case suggestedInsertionId
                case suggestedPositionedObjectPropertiesChanges
            }
        }
        /// The positioning of a PositionedObject. The positioned object is positioned relative to the beginning of the Paragraph it's tethered to.
        ///
        /// - Remark: Generated from `#/components/schemas/PositionedObjectPositioning`.
        public struct PositionedObjectPositioning: Codable, Hashable, Sendable {
            /// The layout of this positioned object.
            ///
            /// - Remark: Generated from `#/components/schemas/PositionedObjectPositioning/layout`.
            @frozen public enum LayoutPayload: String, Codable, Hashable, Sendable, CaseIterable {
                case positionedObjectLayoutUnspecified = "POSITIONED_OBJECT_LAYOUT_UNSPECIFIED"
                case wrapText = "WRAP_TEXT"
                case breakLeft = "BREAK_LEFT"
                case breakRight = "BREAK_RIGHT"
                case breakLeftRight = "BREAK_LEFT_RIGHT"
                case inFrontOfText = "IN_FRONT_OF_TEXT"
                case behindText = "BEHIND_TEXT"
            }
            /// The layout of this positioned object.
            ///
            /// - Remark: Generated from `#/components/schemas/PositionedObjectPositioning/layout`.
            public var layout: Components.Schemas.PositionedObjectPositioning.LayoutPayload?
            /// - Remark: Generated from `#/components/schemas/PositionedObjectPositioning/leftOffset`.
            public var leftOffset: Components.Schemas.Dimension?
            /// - Remark: Generated from `#/components/schemas/PositionedObjectPositioning/topOffset`.
            public var topOffset: Components.Schemas.Dimension?
            /// Creates a new `PositionedObjectPositioning`.
            ///
            /// - Parameters:
            ///   - layout: The layout of this positioned object.
            ///   - leftOffset:
            ///   - topOffset:
            public init(
                layout: Components.Schemas.PositionedObjectPositioning.LayoutPayload? = nil,
                leftOffset: Components.Schemas.Dimension? = nil,
                topOffset: Components.Schemas.Dimension? = nil
            ) {
                self.layout = layout
                self.leftOffset = leftOffset
                self.topOffset = topOffset
            }
            public enum CodingKeys: String, CodingKey {
                case layout
                case leftOffset
                case topOffset
            }
        }
        /// A mask that indicates which of the fields on the base PositionedObjectPositioning have been changed in this suggestion. For any field set to true, there's a new suggested value.
        ///
        /// - Remark: Generated from `#/components/schemas/PositionedObjectPositioningSuggestionState`.
        public struct PositionedObjectPositioningSuggestionState: Codable, Hashable, Sendable {
            /// Indicates if there was a suggested change to layout.
            ///
            /// - Remark: Generated from `#/components/schemas/PositionedObjectPositioningSuggestionState/layoutSuggested`.
            public var layoutSuggested: Swift.Bool?
            /// Indicates if there was a suggested change to left_offset.
            ///
            /// - Remark: Generated from `#/components/schemas/PositionedObjectPositioningSuggestionState/leftOffsetSuggested`.
            public var leftOffsetSuggested: Swift.Bool?
            /// Indicates if there was a suggested change to top_offset.
            ///
            /// - Remark: Generated from `#/components/schemas/PositionedObjectPositioningSuggestionState/topOffsetSuggested`.
            public var topOffsetSuggested: Swift.Bool?
            /// Creates a new `PositionedObjectPositioningSuggestionState`.
            ///
            /// - Parameters:
            ///   - layoutSuggested: Indicates if there was a suggested change to layout.
            ///   - leftOffsetSuggested: Indicates if there was a suggested change to left_offset.
            ///   - topOffsetSuggested: Indicates if there was a suggested change to top_offset.
            public init(
                layoutSuggested: Swift.Bool? = nil,
                leftOffsetSuggested: Swift.Bool? = nil,
                topOffsetSuggested: Swift.Bool? = nil
            ) {
                self.layoutSuggested = layoutSuggested
                self.leftOffsetSuggested = leftOffsetSuggested
                self.topOffsetSuggested = topOffsetSuggested
            }
            public enum CodingKeys: String, CodingKey {
                case layoutSuggested
                case leftOffsetSuggested
                case topOffsetSuggested
            }
        }
        /// Properties of a PositionedObject.
        ///
        /// - Remark: Generated from `#/components/schemas/PositionedObjectProperties`.
        public struct PositionedObjectProperties: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/PositionedObjectProperties/embeddedObject`.
            public var embeddedObject: Components.Schemas.EmbeddedObject?
            /// - Remark: Generated from `#/components/schemas/PositionedObjectProperties/positioning`.
            public var positioning: Components.Schemas.PositionedObjectPositioning?
            /// Creates a new `PositionedObjectProperties`.
            ///
            /// - Parameters:
            ///   - embeddedObject:
            ///   - positioning:
            public init(
                embeddedObject: Components.Schemas.EmbeddedObject? = nil,
                positioning: Components.Schemas.PositionedObjectPositioning? = nil
            ) {
                self.embeddedObject = embeddedObject
                self.positioning = positioning
            }
            public enum CodingKeys: String, CodingKey {
                case embeddedObject
                case positioning
            }
        }
        /// A mask that indicates which of the fields on the base PositionedObjectProperties have been changed in this suggestion. For any field set to true, there's a new suggested value.
        ///
        /// - Remark: Generated from `#/components/schemas/PositionedObjectPropertiesSuggestionState`.
        public struct PositionedObjectPropertiesSuggestionState: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/PositionedObjectPropertiesSuggestionState/embeddedObjectSuggestionState`.
            public var embeddedObjectSuggestionState: Components.Schemas.EmbeddedObjectSuggestionState?
            /// - Remark: Generated from `#/components/schemas/PositionedObjectPropertiesSuggestionState/positioningSuggestionState`.
            public var positioningSuggestionState: Components.Schemas.PositionedObjectPositioningSuggestionState?
            /// Creates a new `PositionedObjectPropertiesSuggestionState`.
            ///
            /// - Parameters:
            ///   - embeddedObjectSuggestionState:
            ///   - positioningSuggestionState:
            public init(
                embeddedObjectSuggestionState: Components.Schemas.EmbeddedObjectSuggestionState? = nil,
                positioningSuggestionState: Components.Schemas.PositionedObjectPositioningSuggestionState? = nil
            ) {
                self.embeddedObjectSuggestionState = embeddedObjectSuggestionState
                self.positioningSuggestionState = positioningSuggestionState
            }
            public enum CodingKeys: String, CodingKey {
                case embeddedObjectSuggestionState
                case positioningSuggestionState
            }
        }
        /// Specifies a contiguous range of text.
        ///
        /// - Remark: Generated from `#/components/schemas/Range`.
        public struct Range: Codable, Hashable, Sendable {
            /// The zero-based end index of this range, exclusive, in UTF-16 code units. In all current uses, an end index must be provided. This field is an Int32Value in order to accommodate future use cases with open-ended ranges.
            ///
            /// - Remark: Generated from `#/components/schemas/Range/endIndex`.
            public var endIndex: Swift.Int32?
            /// The ID of the header, footer, or footnote that this range is contained in. An empty segment ID signifies the document's body.
            ///
            /// - Remark: Generated from `#/components/schemas/Range/segmentId`.
            public var segmentId: Swift.String?
            /// The zero-based start index of this range, in UTF-16 code units. In all current uses, a start index must be provided. This field is an Int32Value in order to accommodate future use cases with open-ended ranges.
            ///
            /// - Remark: Generated from `#/components/schemas/Range/startIndex`.
            public var startIndex: Swift.Int32?
            /// Creates a new `Range`.
            ///
            /// - Parameters:
            ///   - endIndex: The zero-based end index of this range, exclusive, in UTF-16 code units. In all current uses, an end index must be provided. This field is an Int32Value in order to accommodate future use cases with open-ended ranges.
            ///   - segmentId: The ID of the header, footer, or footnote that this range is contained in. An empty segment ID signifies the document's body.
            ///   - startIndex: The zero-based start index of this range, in UTF-16 code units. In all current uses, a start index must be provided. This field is an Int32Value in order to accommodate future use cases with open-ended ranges.
            public init(
                endIndex: Swift.Int32? = nil,
                segmentId: Swift.String? = nil,
                startIndex: Swift.Int32? = nil
            ) {
                self.endIndex = endIndex
                self.segmentId = segmentId
                self.startIndex = startIndex
            }
            public enum CodingKeys: String, CodingKey {
                case endIndex
                case segmentId
                case startIndex
            }
        }
        /// Replaces all instances of text matching a criteria with replace text.
        ///
        /// - Remark: Generated from `#/components/schemas/ReplaceAllTextRequest`.
        public struct ReplaceAllTextRequest: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/ReplaceAllTextRequest/containsText`.
            public var containsText: Components.Schemas.SubstringMatchCriteria?
            /// The text that will replace the matched text.
            ///
            /// - Remark: Generated from `#/components/schemas/ReplaceAllTextRequest/replaceText`.
            public var replaceText: Swift.String?
            /// Creates a new `ReplaceAllTextRequest`.
            ///
            /// - Parameters:
            ///   - containsText:
            ///   - replaceText: The text that will replace the matched text.
            public init(
                containsText: Components.Schemas.SubstringMatchCriteria? = nil,
                replaceText: Swift.String? = nil
            ) {
                self.containsText = containsText
                self.replaceText = replaceText
            }
            public enum CodingKeys: String, CodingKey {
                case containsText
                case replaceText
            }
        }
        /// The result of replacing text.
        ///
        /// - Remark: Generated from `#/components/schemas/ReplaceAllTextResponse`.
        public struct ReplaceAllTextResponse: Codable, Hashable, Sendable {
            /// The number of occurrences changed by replacing all text.
            ///
            /// - Remark: Generated from `#/components/schemas/ReplaceAllTextResponse/occurrencesChanged`.
            public var occurrencesChanged: Swift.Int32?
            /// Creates a new `ReplaceAllTextResponse`.
            ///
            /// - Parameters:
            ///   - occurrencesChanged: The number of occurrences changed by replacing all text.
            public init(occurrencesChanged: Swift.Int32? = nil) {
                self.occurrencesChanged = occurrencesChanged
            }
            public enum CodingKeys: String, CodingKey {
                case occurrencesChanged
            }
        }
        /// Replaces an existing image with a new image. Replacing an image removes some image effects from the existing image in order to mirror the behavior of the Docs editor.
        ///
        /// - Remark: Generated from `#/components/schemas/ReplaceImageRequest`.
        public struct ReplaceImageRequest: Codable, Hashable, Sendable {
            /// The ID of the existing image that will be replaced. The ID can be retrieved from the response of a get request.
            ///
            /// - Remark: Generated from `#/components/schemas/ReplaceImageRequest/imageObjectId`.
            public var imageObjectId: Swift.String?
            /// The replacement method.
            ///
            /// - Remark: Generated from `#/components/schemas/ReplaceImageRequest/imageReplaceMethod`.
            @frozen public enum ImageReplaceMethodPayload: String, Codable, Hashable, Sendable, CaseIterable {
                case imageReplaceMethodUnspecified = "IMAGE_REPLACE_METHOD_UNSPECIFIED"
                case centerCrop = "CENTER_CROP"
            }
            /// The replacement method.
            ///
            /// - Remark: Generated from `#/components/schemas/ReplaceImageRequest/imageReplaceMethod`.
            public var imageReplaceMethod: Components.Schemas.ReplaceImageRequest.ImageReplaceMethodPayload?
            /// The URI of the new image. The image is fetched once at insertion time and a copy is stored for display inside the document. Images must be less than 50MB, cannot exceed 25 megapixels, and must be in PNG, JPEG, or GIF format. The provided URI can't surpass 2 KB in length. The URI is saved with the image, and exposed through the ImageProperties.source_uri field.
            ///
            /// - Remark: Generated from `#/components/schemas/ReplaceImageRequest/uri`.
            public var uri: Swift.String?
            /// Creates a new `ReplaceImageRequest`.
            ///
            /// - Parameters:
            ///   - imageObjectId: The ID of the existing image that will be replaced. The ID can be retrieved from the response of a get request.
            ///   - imageReplaceMethod: The replacement method.
            ///   - uri: The URI of the new image. The image is fetched once at insertion time and a copy is stored for display inside the document. Images must be less than 50MB, cannot exceed 25 megapixels, and must be in PNG, JPEG, or GIF format. The provided URI can't surpass 2 KB in length. The URI is saved with the image, and exposed through the ImageProperties.source_uri field.
            public init(
                imageObjectId: Swift.String? = nil,
                imageReplaceMethod: Components.Schemas.ReplaceImageRequest.ImageReplaceMethodPayload? = nil,
                uri: Swift.String? = nil
            ) {
                self.imageObjectId = imageObjectId
                self.imageReplaceMethod = imageReplaceMethod
                self.uri = uri
            }
            public enum CodingKeys: String, CodingKey {
                case imageObjectId
                case imageReplaceMethod
                case uri
            }
        }
        /// Replaces the contents of the specified NamedRange or NamedRanges with the given replacement content. Note that an individual NamedRange may consist of multiple discontinuous ranges. In this case, only the content in the first range will be replaced. The other ranges and their content will be deleted. In cases where replacing or deleting any ranges would result in an invalid document structure, a 400 bad request error is returned.
        ///
        /// - Remark: Generated from `#/components/schemas/ReplaceNamedRangeContentRequest`.
        public struct ReplaceNamedRangeContentRequest: Codable, Hashable, Sendable {
            /// The ID of the named range whose content will be replaced. If there is no named range with the given ID a 400 bad request error is returned.
            ///
            /// - Remark: Generated from `#/components/schemas/ReplaceNamedRangeContentRequest/namedRangeId`.
            public var namedRangeId: Swift.String?
            /// The name of the NamedRanges whose content will be replaced. If there are multiple named ranges with the given name, then the content of each one will be replaced. If there are no named ranges with the given name, then the request will be a no-op.
            ///
            /// - Remark: Generated from `#/components/schemas/ReplaceNamedRangeContentRequest/namedRangeName`.
            public var namedRangeName: Swift.String?
            /// Replaces the content of the specified named range(s) with the given text.
            ///
            /// - Remark: Generated from `#/components/schemas/ReplaceNamedRangeContentRequest/text`.
            public var text: Swift.String?
            /// Creates a new `ReplaceNamedRangeContentRequest`.
            ///
            /// - Parameters:
            ///   - namedRangeId: The ID of the named range whose content will be replaced. If there is no named range with the given ID a 400 bad request error is returned.
            ///   - namedRangeName: The name of the NamedRanges whose content will be replaced. If there are multiple named ranges with the given name, then the content of each one will be replaced. If there are no named ranges with the given name, then the request will be a no-op.
            ///   - text: Replaces the content of the specified named range(s) with the given text.
            public init(
                namedRangeId: Swift.String? = nil,
                namedRangeName: Swift.String? = nil,
                text: Swift.String? = nil
            ) {
                self.namedRangeId = namedRangeId
                self.namedRangeName = namedRangeName
                self.text = text
            }
            public enum CodingKeys: String, CodingKey {
                case namedRangeId
                case namedRangeName
                case text
            }
        }
        /// A single update to apply to a document.
        ///
        /// - Remark: Generated from `#/components/schemas/Request`.
        public struct Request: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/Request/createFooter`.
            public var createFooter: Components.Schemas.CreateFooterRequest?
            /// - Remark: Generated from `#/components/schemas/Request/createFootnote`.
            public var createFootnote: Components.Schemas.CreateFootnoteRequest?
            /// - Remark: Generated from `#/components/schemas/Request/createHeader`.
            public var createHeader: Components.Schemas.CreateHeaderRequest?
            /// - Remark: Generated from `#/components/schemas/Request/createNamedRange`.
            public var createNamedRange: Components.Schemas.CreateNamedRangeRequest?
            /// - Remark: Generated from `#/components/schemas/Request/createParagraphBullets`.
            public var createParagraphBullets: Components.Schemas.CreateParagraphBulletsRequest?
            /// - Remark: Generated from `#/components/schemas/Request/deleteContentRange`.
            public var deleteContentRange: Components.Schemas.DeleteContentRangeRequest?
            /// - Remark: Generated from `#/components/schemas/Request/deleteFooter`.
            public var deleteFooter: Components.Schemas.DeleteFooterRequest?
            /// - Remark: Generated from `#/components/schemas/Request/deleteHeader`.
            public var deleteHeader: Components.Schemas.DeleteHeaderRequest?
            /// - Remark: Generated from `#/components/schemas/Request/deleteNamedRange`.
            public var deleteNamedRange: Components.Schemas.DeleteNamedRangeRequest?
            /// - Remark: Generated from `#/components/schemas/Request/deleteParagraphBullets`.
            public var deleteParagraphBullets: Components.Schemas.DeleteParagraphBulletsRequest?
            /// - Remark: Generated from `#/components/schemas/Request/deletePositionedObject`.
            public var deletePositionedObject: Components.Schemas.DeletePositionedObjectRequest?
            /// - Remark: Generated from `#/components/schemas/Request/deleteTableColumn`.
            public var deleteTableColumn: Components.Schemas.DeleteTableColumnRequest?
            /// - Remark: Generated from `#/components/schemas/Request/deleteTableRow`.
            public var deleteTableRow: Components.Schemas.DeleteTableRowRequest?
            /// - Remark: Generated from `#/components/schemas/Request/insertInlineImage`.
            public var insertInlineImage: Components.Schemas.InsertInlineImageRequest?
            /// - Remark: Generated from `#/components/schemas/Request/insertPageBreak`.
            public var insertPageBreak: Components.Schemas.InsertPageBreakRequest?
            /// - Remark: Generated from `#/components/schemas/Request/insertSectionBreak`.
            public var insertSectionBreak: Components.Schemas.InsertSectionBreakRequest?
            /// - Remark: Generated from `#/components/schemas/Request/insertTable`.
            public var insertTable: Components.Schemas.InsertTableRequest?
            /// - Remark: Generated from `#/components/schemas/Request/insertTableColumn`.
            public var insertTableColumn: Components.Schemas.InsertTableColumnRequest?
            /// - Remark: Generated from `#/components/schemas/Request/insertTableRow`.
            public var insertTableRow: Components.Schemas.InsertTableRowRequest?
            /// - Remark: Generated from `#/components/schemas/Request/insertText`.
            public var insertText: Components.Schemas.InsertTextRequest?
            /// - Remark: Generated from `#/components/schemas/Request/mergeTableCells`.
            public var mergeTableCells: Components.Schemas.MergeTableCellsRequest?
            /// - Remark: Generated from `#/components/schemas/Request/pinTableHeaderRows`.
            public var pinTableHeaderRows: Components.Schemas.PinTableHeaderRowsRequest?
            /// - Remark: Generated from `#/components/schemas/Request/replaceAllText`.
            public var replaceAllText: Components.Schemas.ReplaceAllTextRequest?
            /// - Remark: Generated from `#/components/schemas/Request/replaceImage`.
            public var replaceImage: Components.Schemas.ReplaceImageRequest?
            /// - Remark: Generated from `#/components/schemas/Request/replaceNamedRangeContent`.
            public var replaceNamedRangeContent: Components.Schemas.ReplaceNamedRangeContentRequest?
            /// - Remark: Generated from `#/components/schemas/Request/unmergeTableCells`.
            public var unmergeTableCells: Components.Schemas.UnmergeTableCellsRequest?
            /// - Remark: Generated from `#/components/schemas/Request/updateDocumentStyle`.
            public var updateDocumentStyle: Components.Schemas.UpdateDocumentStyleRequest?
            /// - Remark: Generated from `#/components/schemas/Request/updateParagraphStyle`.
            public var updateParagraphStyle: Components.Schemas.UpdateParagraphStyleRequest?
            /// - Remark: Generated from `#/components/schemas/Request/updateSectionStyle`.
            public var updateSectionStyle: Components.Schemas.UpdateSectionStyleRequest?
            /// - Remark: Generated from `#/components/schemas/Request/updateTableCellStyle`.
            public var updateTableCellStyle: Components.Schemas.UpdateTableCellStyleRequest?
            /// - Remark: Generated from `#/components/schemas/Request/updateTableColumnProperties`.
            public var updateTableColumnProperties: Components.Schemas.UpdateTableColumnPropertiesRequest?
            /// - Remark: Generated from `#/components/schemas/Request/updateTableRowStyle`.
            public var updateTableRowStyle: Components.Schemas.UpdateTableRowStyleRequest?
            /// - Remark: Generated from `#/components/schemas/Request/updateTextStyle`.
            public var updateTextStyle: Components.Schemas.UpdateTextStyleRequest?
            /// Creates a new `Request`.
            ///
            /// - Parameters:
            ///   - createFooter:
            ///   - createFootnote:
            ///   - createHeader:
            ///   - createNamedRange:
            ///   - createParagraphBullets:
            ///   - deleteContentRange:
            ///   - deleteFooter:
            ///   - deleteHeader:
            ///   - deleteNamedRange:
            ///   - deleteParagraphBullets:
            ///   - deletePositionedObject:
            ///   - deleteTableColumn:
            ///   - deleteTableRow:
            ///   - insertInlineImage:
            ///   - insertPageBreak:
            ///   - insertSectionBreak:
            ///   - insertTable:
            ///   - insertTableColumn:
            ///   - insertTableRow:
            ///   - insertText:
            ///   - mergeTableCells:
            ///   - pinTableHeaderRows:
            ///   - replaceAllText:
            ///   - replaceImage:
            ///   - replaceNamedRangeContent:
            ///   - unmergeTableCells:
            ///   - updateDocumentStyle:
            ///   - updateParagraphStyle:
            ///   - updateSectionStyle:
            ///   - updateTableCellStyle:
            ///   - updateTableColumnProperties:
            ///   - updateTableRowStyle:
            ///   - updateTextStyle:
            public init(
                createFooter: Components.Schemas.CreateFooterRequest? = nil,
                createFootnote: Components.Schemas.CreateFootnoteRequest? = nil,
                createHeader: Components.Schemas.CreateHeaderRequest? = nil,
                createNamedRange: Components.Schemas.CreateNamedRangeRequest? = nil,
                createParagraphBullets: Components.Schemas.CreateParagraphBulletsRequest? = nil,
                deleteContentRange: Components.Schemas.DeleteContentRangeRequest? = nil,
                deleteFooter: Components.Schemas.DeleteFooterRequest? = nil,
                deleteHeader: Components.Schemas.DeleteHeaderRequest? = nil,
                deleteNamedRange: Components.Schemas.DeleteNamedRangeRequest? = nil,
                deleteParagraphBullets: Components.Schemas.DeleteParagraphBulletsRequest? = nil,
                deletePositionedObject: Components.Schemas.DeletePositionedObjectRequest? = nil,
                deleteTableColumn: Components.Schemas.DeleteTableColumnRequest? = nil,
                deleteTableRow: Components.Schemas.DeleteTableRowRequest? = nil,
                insertInlineImage: Components.Schemas.InsertInlineImageRequest? = nil,
                insertPageBreak: Components.Schemas.InsertPageBreakRequest? = nil,
                insertSectionBreak: Components.Schemas.InsertSectionBreakRequest? = nil,
                insertTable: Components.Schemas.InsertTableRequest? = nil,
                insertTableColumn: Components.Schemas.InsertTableColumnRequest? = nil,
                insertTableRow: Components.Schemas.InsertTableRowRequest? = nil,
                insertText: Components.Schemas.InsertTextRequest? = nil,
                mergeTableCells: Components.Schemas.MergeTableCellsRequest? = nil,
                pinTableHeaderRows: Components.Schemas.PinTableHeaderRowsRequest? = nil,
                replaceAllText: Components.Schemas.ReplaceAllTextRequest? = nil,
                replaceImage: Components.Schemas.ReplaceImageRequest? = nil,
                replaceNamedRangeContent: Components.Schemas.ReplaceNamedRangeContentRequest? = nil,
                unmergeTableCells: Components.Schemas.UnmergeTableCellsRequest? = nil,
                updateDocumentStyle: Components.Schemas.UpdateDocumentStyleRequest? = nil,
                updateParagraphStyle: Components.Schemas.UpdateParagraphStyleRequest? = nil,
                updateSectionStyle: Components.Schemas.UpdateSectionStyleRequest? = nil,
                updateTableCellStyle: Components.Schemas.UpdateTableCellStyleRequest? = nil,
                updateTableColumnProperties: Components.Schemas.UpdateTableColumnPropertiesRequest? = nil,
                updateTableRowStyle: Components.Schemas.UpdateTableRowStyleRequest? = nil,
                updateTextStyle: Components.Schemas.UpdateTextStyleRequest? = nil
            ) {
                self.createFooter = createFooter
                self.createFootnote = createFootnote
                self.createHeader = createHeader
                self.createNamedRange = createNamedRange
                self.createParagraphBullets = createParagraphBullets
                self.deleteContentRange = deleteContentRange
                self.deleteFooter = deleteFooter
                self.deleteHeader = deleteHeader
                self.deleteNamedRange = deleteNamedRange
                self.deleteParagraphBullets = deleteParagraphBullets
                self.deletePositionedObject = deletePositionedObject
                self.deleteTableColumn = deleteTableColumn
                self.deleteTableRow = deleteTableRow
                self.insertInlineImage = insertInlineImage
                self.insertPageBreak = insertPageBreak
                self.insertSectionBreak = insertSectionBreak
                self.insertTable = insertTable
                self.insertTableColumn = insertTableColumn
                self.insertTableRow = insertTableRow
                self.insertText = insertText
                self.mergeTableCells = mergeTableCells
                self.pinTableHeaderRows = pinTableHeaderRows
                self.replaceAllText = replaceAllText
                self.replaceImage = replaceImage
                self.replaceNamedRangeContent = replaceNamedRangeContent
                self.unmergeTableCells = unmergeTableCells
                self.updateDocumentStyle = updateDocumentStyle
                self.updateParagraphStyle = updateParagraphStyle
                self.updateSectionStyle = updateSectionStyle
                self.updateTableCellStyle = updateTableCellStyle
                self.updateTableColumnProperties = updateTableColumnProperties
                self.updateTableRowStyle = updateTableRowStyle
                self.updateTextStyle = updateTextStyle
            }
            public enum CodingKeys: String, CodingKey {
                case createFooter
                case createFootnote
                case createHeader
                case createNamedRange
                case createParagraphBullets
                case deleteContentRange
                case deleteFooter
                case deleteHeader
                case deleteNamedRange
                case deleteParagraphBullets
                case deletePositionedObject
                case deleteTableColumn
                case deleteTableRow
                case insertInlineImage
                case insertPageBreak
                case insertSectionBreak
                case insertTable
                case insertTableColumn
                case insertTableRow
                case insertText
                case mergeTableCells
                case pinTableHeaderRows
                case replaceAllText
                case replaceImage
                case replaceNamedRangeContent
                case unmergeTableCells
                case updateDocumentStyle
                case updateParagraphStyle
                case updateSectionStyle
                case updateTableCellStyle
                case updateTableColumnProperties
                case updateTableRowStyle
                case updateTextStyle
            }
        }
        /// A single response from an update.
        ///
        /// - Remark: Generated from `#/components/schemas/Response`.
        public struct Response: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/Response/createFooter`.
            public var createFooter: Components.Schemas.CreateFooterResponse?
            /// - Remark: Generated from `#/components/schemas/Response/createFootnote`.
            public var createFootnote: Components.Schemas.CreateFootnoteResponse?
            /// - Remark: Generated from `#/components/schemas/Response/createHeader`.
            public var createHeader: Components.Schemas.CreateHeaderResponse?
            /// - Remark: Generated from `#/components/schemas/Response/createNamedRange`.
            public var createNamedRange: Components.Schemas.CreateNamedRangeResponse?
            /// - Remark: Generated from `#/components/schemas/Response/insertInlineImage`.
            public var insertInlineImage: Components.Schemas.InsertInlineImageResponse?
            /// - Remark: Generated from `#/components/schemas/Response/insertInlineSheetsChart`.
            public var insertInlineSheetsChart: Components.Schemas.InsertInlineSheetsChartResponse?
            /// - Remark: Generated from `#/components/schemas/Response/replaceAllText`.
            public var replaceAllText: Components.Schemas.ReplaceAllTextResponse?
            /// Creates a new `Response`.
            ///
            /// - Parameters:
            ///   - createFooter:
            ///   - createFootnote:
            ///   - createHeader:
            ///   - createNamedRange:
            ///   - insertInlineImage:
            ///   - insertInlineSheetsChart:
            ///   - replaceAllText:
            public init(
                createFooter: Components.Schemas.CreateFooterResponse? = nil,
                createFootnote: Components.Schemas.CreateFootnoteResponse? = nil,
                createHeader: Components.Schemas.CreateHeaderResponse? = nil,
                createNamedRange: Components.Schemas.CreateNamedRangeResponse? = nil,
                insertInlineImage: Components.Schemas.InsertInlineImageResponse? = nil,
                insertInlineSheetsChart: Components.Schemas.InsertInlineSheetsChartResponse? = nil,
                replaceAllText: Components.Schemas.ReplaceAllTextResponse? = nil
            ) {
                self.createFooter = createFooter
                self.createFootnote = createFootnote
                self.createHeader = createHeader
                self.createNamedRange = createNamedRange
                self.insertInlineImage = insertInlineImage
                self.insertInlineSheetsChart = insertInlineSheetsChart
                self.replaceAllText = replaceAllText
            }
            public enum CodingKeys: String, CodingKey {
                case createFooter
                case createFootnote
                case createHeader
                case createNamedRange
                case insertInlineImage
                case insertInlineSheetsChart
                case replaceAllText
            }
        }
        /// An RGB color.
        ///
        /// - Remark: Generated from `#/components/schemas/RgbColor`.
        public struct RgbColor: Codable, Hashable, Sendable {
            /// The blue component of the color, from 0.0 to 1.0.
            ///
            /// - Remark: Generated from `#/components/schemas/RgbColor/blue`.
            public var blue: Swift.Float?
            /// The green component of the color, from 0.0 to 1.0.
            ///
            /// - Remark: Generated from `#/components/schemas/RgbColor/green`.
            public var green: Swift.Float?
            /// The red component of the color, from 0.0 to 1.0.
            ///
            /// - Remark: Generated from `#/components/schemas/RgbColor/red`.
            public var red: Swift.Float?
            /// Creates a new `RgbColor`.
            ///
            /// - Parameters:
            ///   - blue: The blue component of the color, from 0.0 to 1.0.
            ///   - green: The green component of the color, from 0.0 to 1.0.
            ///   - red: The red component of the color, from 0.0 to 1.0.
            public init(
                blue: Swift.Float? = nil,
                green: Swift.Float? = nil,
                red: Swift.Float? = nil
            ) {
                self.blue = blue
                self.green = green
                self.red = red
            }
            public enum CodingKeys: String, CodingKey {
                case blue
                case green
                case red
            }
        }
        /// A link to a Google resource (such as a file in Drive, a YouTube video, or a Calendar event).
        ///
        /// - Remark: Generated from `#/components/schemas/RichLink`.
        public struct RichLink: Codable, Hashable, Sendable {
            /// Output only. The ID of this link.
            ///
            /// - Remark: Generated from `#/components/schemas/RichLink/richLinkId`.
            public var richLinkId: Swift.String?
            /// - Remark: Generated from `#/components/schemas/RichLink/richLinkProperties`.
            public var richLinkProperties: Components.Schemas.RichLinkProperties?
            /// IDs for suggestions that remove this link from the document. A RichLink might have multiple deletion IDs if, for example, multiple users suggest deleting it. If empty, then this person link isn't suggested for deletion.
            ///
            /// - Remark: Generated from `#/components/schemas/RichLink/suggestedDeletionIds`.
            public var suggestedDeletionIds: [Swift.String]?
            /// IDs for suggestions that insert this link into the document. A RichLink might have multiple insertion IDs if it's a nested suggested change (a suggestion within a suggestion made by a different user, for example). If empty, then this person link isn't a suggested insertion.
            ///
            /// - Remark: Generated from `#/components/schemas/RichLink/suggestedInsertionIds`.
            public var suggestedInsertionIds: [Swift.String]?
            /// The suggested text style changes to this RichLink, keyed by suggestion ID.
            ///
            /// - Remark: Generated from `#/components/schemas/RichLink/suggestedTextStyleChanges`.
            public struct SuggestedTextStyleChangesPayload: Codable, Hashable, Sendable {
                /// A container of undocumented properties.
                public var additionalProperties: [String: Components.Schemas.SuggestedTextStyle]
                /// Creates a new `SuggestedTextStyleChangesPayload`.
                ///
                /// - Parameters:
                ///   - additionalProperties: A container of undocumented properties.
                public init(additionalProperties: [String: Components.Schemas.SuggestedTextStyle] = .init()) {
                    self.additionalProperties = additionalProperties
                }
                public init(from decoder: any Decoder) throws {
                    additionalProperties = try decoder.decodeAdditionalProperties(knownKeys: [])
                }
                public func encode(to encoder: any Encoder) throws {
                    try encoder.encodeAdditionalProperties(additionalProperties)
                }
            }
            /// The suggested text style changes to this RichLink, keyed by suggestion ID.
            ///
            /// - Remark: Generated from `#/components/schemas/RichLink/suggestedTextStyleChanges`.
            public var suggestedTextStyleChanges: Components.Schemas.RichLink.SuggestedTextStyleChangesPayload?
            /// - Remark: Generated from `#/components/schemas/RichLink/textStyle`.
            public var textStyle: Components.Schemas.TextStyle?
            /// Creates a new `RichLink`.
            ///
            /// - Parameters:
            ///   - richLinkId: Output only. The ID of this link.
            ///   - richLinkProperties:
            ///   - suggestedDeletionIds: IDs for suggestions that remove this link from the document. A RichLink might have multiple deletion IDs if, for example, multiple users suggest deleting it. If empty, then this person link isn't suggested for deletion.
            ///   - suggestedInsertionIds: IDs for suggestions that insert this link into the document. A RichLink might have multiple insertion IDs if it's a nested suggested change (a suggestion within a suggestion made by a different user, for example). If empty, then this person link isn't a suggested insertion.
            ///   - suggestedTextStyleChanges: The suggested text style changes to this RichLink, keyed by suggestion ID.
            ///   - textStyle:
            public init(
                richLinkId: Swift.String? = nil,
                richLinkProperties: Components.Schemas.RichLinkProperties? = nil,
                suggestedDeletionIds: [Swift.String]? = nil,
                suggestedInsertionIds: [Swift.String]? = nil,
                suggestedTextStyleChanges: Components.Schemas.RichLink.SuggestedTextStyleChangesPayload? = nil,
                textStyle: Components.Schemas.TextStyle? = nil
            ) {
                self.richLinkId = richLinkId
                self.richLinkProperties = richLinkProperties
                self.suggestedDeletionIds = suggestedDeletionIds
                self.suggestedInsertionIds = suggestedInsertionIds
                self.suggestedTextStyleChanges = suggestedTextStyleChanges
                self.textStyle = textStyle
            }
            public enum CodingKeys: String, CodingKey {
                case richLinkId
                case richLinkProperties
                case suggestedDeletionIds
                case suggestedInsertionIds
                case suggestedTextStyleChanges
                case textStyle
            }
        }
        /// Properties specific to a RichLink.
        ///
        /// - Remark: Generated from `#/components/schemas/RichLinkProperties`.
        public struct RichLinkProperties: Codable, Hashable, Sendable {
            /// Output only. The [MIME type](https://developers.google.com/drive/api/v3/mime-types) of the RichLink, if there's one (for example, when it's a file in Drive).
            ///
            /// - Remark: Generated from `#/components/schemas/RichLinkProperties/mimeType`.
            public var mimeType: Swift.String?
            /// Output only. The title of the RichLink as displayed in the link. This title matches the title of the linked resource at the time of the insertion or last update of the link. This field is always present.
            ///
            /// - Remark: Generated from `#/components/schemas/RichLinkProperties/title`.
            public var title: Swift.String?
            /// Output only. The URI to the RichLink. This is always present.
            ///
            /// - Remark: Generated from `#/components/schemas/RichLinkProperties/uri`.
            public var uri: Swift.String?
            /// Creates a new `RichLinkProperties`.
            ///
            /// - Parameters:
            ///   - mimeType: Output only. The [MIME type](https://developers.google.com/drive/api/v3/mime-types) of the RichLink, if there's one (for example, when it's a file in Drive).
            ///   - title: Output only. The title of the RichLink as displayed in the link. This title matches the title of the linked resource at the time of the insertion or last update of the link. This field is always present.
            ///   - uri: Output only. The URI to the RichLink. This is always present.
            public init(
                mimeType: Swift.String? = nil,
                title: Swift.String? = nil,
                uri: Swift.String? = nil
            ) {
                self.mimeType = mimeType
                self.title = title
                self.uri = uri
            }
            public enum CodingKeys: String, CodingKey {
                case mimeType
                case title
                case uri
            }
        }
        /// A StructuralElement representing a section break. A section is a range of content that has the same SectionStyle. A section break represents the start of a new section, and the section style applies to the section after the section break. The document body always begins with a section break.
        ///
        /// - Remark: Generated from `#/components/schemas/SectionBreak`.
        public struct SectionBreak: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/SectionBreak/sectionStyle`.
            public var sectionStyle: Components.Schemas.SectionStyle?
            /// The suggested deletion IDs. If empty, then there are no suggested deletions of this content.
            ///
            /// - Remark: Generated from `#/components/schemas/SectionBreak/suggestedDeletionIds`.
            public var suggestedDeletionIds: [Swift.String]?
            /// The suggested insertion IDs. A SectionBreak may have multiple insertion IDs if it's a nested suggested change. If empty, then this is not a suggested insertion.
            ///
            /// - Remark: Generated from `#/components/schemas/SectionBreak/suggestedInsertionIds`.
            public var suggestedInsertionIds: [Swift.String]?
            /// Creates a new `SectionBreak`.
            ///
            /// - Parameters:
            ///   - sectionStyle:
            ///   - suggestedDeletionIds: The suggested deletion IDs. If empty, then there are no suggested deletions of this content.
            ///   - suggestedInsertionIds: The suggested insertion IDs. A SectionBreak may have multiple insertion IDs if it's a nested suggested change. If empty, then this is not a suggested insertion.
            public init(
                sectionStyle: Components.Schemas.SectionStyle? = nil,
                suggestedDeletionIds: [Swift.String]? = nil,
                suggestedInsertionIds: [Swift.String]? = nil
            ) {
                self.sectionStyle = sectionStyle
                self.suggestedDeletionIds = suggestedDeletionIds
                self.suggestedInsertionIds = suggestedInsertionIds
            }
            public enum CodingKeys: String, CodingKey {
                case sectionStyle
                case suggestedDeletionIds
                case suggestedInsertionIds
            }
        }
        /// Properties that apply to a section's column.
        ///
        /// - Remark: Generated from `#/components/schemas/SectionColumnProperties`.
        public struct SectionColumnProperties: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/SectionColumnProperties/paddingEnd`.
            public var paddingEnd: Components.Schemas.Dimension?
            /// - Remark: Generated from `#/components/schemas/SectionColumnProperties/width`.
            public var width: Components.Schemas.Dimension?
            /// Creates a new `SectionColumnProperties`.
            ///
            /// - Parameters:
            ///   - paddingEnd:
            ///   - width:
            public init(
                paddingEnd: Components.Schemas.Dimension? = nil,
                width: Components.Schemas.Dimension? = nil
            ) {
                self.paddingEnd = paddingEnd
                self.width = width
            }
            public enum CodingKeys: String, CodingKey {
                case paddingEnd
                case width
            }
        }
        /// The styling that applies to a section.
        ///
        /// - Remark: Generated from `#/components/schemas/SectionStyle`.
        public struct SectionStyle: Codable, Hashable, Sendable {
            /// The section's columns properties. If empty, the section contains one column with the default properties in the Docs editor. A section can be updated to have no more than 3 columns. When updating this property, setting a concrete value is required. Unsetting this property will result in a 400 bad request error.
            ///
            /// - Remark: Generated from `#/components/schemas/SectionStyle/columnProperties`.
            public var columnProperties: [Components.Schemas.SectionColumnProperties]?
            /// The style of column separators. This style can be set even when there's one column in the section. When updating this property, setting a concrete value is required. Unsetting this property results in a 400 bad request error.
            ///
            /// - Remark: Generated from `#/components/schemas/SectionStyle/columnSeparatorStyle`.
            @frozen public enum ColumnSeparatorStylePayload: String, Codable, Hashable, Sendable, CaseIterable {
                case columnSeparatorStyleUnspecified = "COLUMN_SEPARATOR_STYLE_UNSPECIFIED"
                case none = "NONE"
                case betweenEachColumn = "BETWEEN_EACH_COLUMN"
            }
            /// The style of column separators. This style can be set even when there's one column in the section. When updating this property, setting a concrete value is required. Unsetting this property results in a 400 bad request error.
            ///
            /// - Remark: Generated from `#/components/schemas/SectionStyle/columnSeparatorStyle`.
            public var columnSeparatorStyle: Components.Schemas.SectionStyle.ColumnSeparatorStylePayload?
            /// The content direction of this section. If unset, the value defaults to LEFT_TO_RIGHT. When updating this property, setting a concrete value is required. Unsetting this property results in a 400 bad request error.
            ///
            /// - Remark: Generated from `#/components/schemas/SectionStyle/contentDirection`.
            @frozen public enum ContentDirectionPayload: String, Codable, Hashable, Sendable, CaseIterable {
                case contentDirectionUnspecified = "CONTENT_DIRECTION_UNSPECIFIED"
                case leftToRight = "LEFT_TO_RIGHT"
                case rightToLeft = "RIGHT_TO_LEFT"
            }
            /// The content direction of this section. If unset, the value defaults to LEFT_TO_RIGHT. When updating this property, setting a concrete value is required. Unsetting this property results in a 400 bad request error.
            ///
            /// - Remark: Generated from `#/components/schemas/SectionStyle/contentDirection`.
            public var contentDirection: Components.Schemas.SectionStyle.ContentDirectionPayload?
            /// The ID of the default footer. If unset, the value inherits from the previous SectionBreak's SectionStyle. If the value is unset in the first SectionBreak, it inherits from DocumentStyle's default_footer_id. This property is read-only.
            ///
            /// - Remark: Generated from `#/components/schemas/SectionStyle/defaultFooterId`.
            public var defaultFooterId: Swift.String?
            /// The ID of the default header. If unset, the value inherits from the previous SectionBreak's SectionStyle. If the value is unset in the first SectionBreak, it inherits from DocumentStyle's default_header_id. This property is read-only.
            ///
            /// - Remark: Generated from `#/components/schemas/SectionStyle/defaultHeaderId`.
            public var defaultHeaderId: Swift.String?
            /// The ID of the footer used only for even pages. If the value of DocumentStyle's use_even_page_header_footer is true, this value is used for the footers on even pages in the section. If it is false, the footers on even pages use the default_footer_id. If unset, the value inherits from the previous SectionBreak's SectionStyle. If the value is unset in the first SectionBreak, it inherits from DocumentStyle's even_page_footer_id. This property is read-only.
            ///
            /// - Remark: Generated from `#/components/schemas/SectionStyle/evenPageFooterId`.
            public var evenPageFooterId: Swift.String?
            /// The ID of the header used only for even pages. If the value of DocumentStyle's use_even_page_header_footer is true, this value is used for the headers on even pages in the section. If it is false, the headers on even pages use the default_header_id. If unset, the value inherits from the previous SectionBreak's SectionStyle. If the value is unset in the first SectionBreak, it inherits from DocumentStyle's even_page_header_id. This property is read-only.
            ///
            /// - Remark: Generated from `#/components/schemas/SectionStyle/evenPageHeaderId`.
            public var evenPageHeaderId: Swift.String?
            /// The ID of the footer used only for the first page of the section. If use_first_page_header_footer is true, this value is used for the footer on the first page of the section. If it's false, the footer on the first page of the section uses the default_footer_id. If unset, the value inherits from the previous SectionBreak's SectionStyle. If the value is unset in the first SectionBreak, it inherits from DocumentStyle's first_page_footer_id. This property is read-only.
            ///
            /// - Remark: Generated from `#/components/schemas/SectionStyle/firstPageFooterId`.
            public var firstPageFooterId: Swift.String?
            /// The ID of the header used only for the first page of the section. If use_first_page_header_footer is true, this value is used for the header on the first page of the section. If it's false, the header on the first page of the section uses the default_header_id. If unset, the value inherits from the previous SectionBreak's SectionStyle. If the value is unset in the first SectionBreak, it inherits from DocumentStyle's first_page_header_id. This property is read-only.
            ///
            /// - Remark: Generated from `#/components/schemas/SectionStyle/firstPageHeaderId`.
            public var firstPageHeaderId: Swift.String?
            /// Optional. Indicates whether to flip the dimensions of DocumentStyle's page_size for this section, which allows changing the page orientation between portrait and landscape. If unset, the value inherits from DocumentStyle's flip_page_orientation. When updating this property, setting a concrete value is required. Unsetting this property results in a 400 bad request error.
            ///
            /// - Remark: Generated from `#/components/schemas/SectionStyle/flipPageOrientation`.
            public var flipPageOrientation: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/SectionStyle/marginBottom`.
            public var marginBottom: Components.Schemas.Dimension?
            /// - Remark: Generated from `#/components/schemas/SectionStyle/marginFooter`.
            public var marginFooter: Components.Schemas.Dimension?
            /// - Remark: Generated from `#/components/schemas/SectionStyle/marginHeader`.
            public var marginHeader: Components.Schemas.Dimension?
            /// - Remark: Generated from `#/components/schemas/SectionStyle/marginLeft`.
            public var marginLeft: Components.Schemas.Dimension?
            /// - Remark: Generated from `#/components/schemas/SectionStyle/marginRight`.
            public var marginRight: Components.Schemas.Dimension?
            /// - Remark: Generated from `#/components/schemas/SectionStyle/marginTop`.
            public var marginTop: Components.Schemas.Dimension?
            /// The page number from which to start counting the number of pages for this section. If unset, page numbering continues from the previous section. If the value is unset in the first SectionBreak, refer to DocumentStyle's page_number_start. When updating this property, setting a concrete value is required. Unsetting this property results in a 400 bad request error.
            ///
            /// - Remark: Generated from `#/components/schemas/SectionStyle/pageNumberStart`.
            public var pageNumberStart: Swift.Int32?
            /// Output only. The type of section.
            ///
            /// - Remark: Generated from `#/components/schemas/SectionStyle/sectionType`.
            @frozen public enum SectionTypePayload: String, Codable, Hashable, Sendable, CaseIterable {
                case sectionTypeUnspecified = "SECTION_TYPE_UNSPECIFIED"
                case continuous = "CONTINUOUS"
                case nextPage = "NEXT_PAGE"
            }
            /// Output only. The type of section.
            ///
            /// - Remark: Generated from `#/components/schemas/SectionStyle/sectionType`.
            public var sectionType: Components.Schemas.SectionStyle.SectionTypePayload?
            /// Indicates whether to use the first page header / footer IDs for the first page of the section. If unset, it inherits from DocumentStyle's use_first_page_header_footer for the first section. If the value is unset for subsequent sectors, it should be interpreted as false. When updating this property, setting a concrete value is required. Unsetting this property results in a 400 bad request error.
            ///
            /// - Remark: Generated from `#/components/schemas/SectionStyle/useFirstPageHeaderFooter`.
            public var useFirstPageHeaderFooter: Swift.Bool?
            /// Creates a new `SectionStyle`.
            ///
            /// - Parameters:
            ///   - columnProperties: The section's columns properties. If empty, the section contains one column with the default properties in the Docs editor. A section can be updated to have no more than 3 columns. When updating this property, setting a concrete value is required. Unsetting this property will result in a 400 bad request error.
            ///   - columnSeparatorStyle: The style of column separators. This style can be set even when there's one column in the section. When updating this property, setting a concrete value is required. Unsetting this property results in a 400 bad request error.
            ///   - contentDirection: The content direction of this section. If unset, the value defaults to LEFT_TO_RIGHT. When updating this property, setting a concrete value is required. Unsetting this property results in a 400 bad request error.
            ///   - defaultFooterId: The ID of the default footer. If unset, the value inherits from the previous SectionBreak's SectionStyle. If the value is unset in the first SectionBreak, it inherits from DocumentStyle's default_footer_id. This property is read-only.
            ///   - defaultHeaderId: The ID of the default header. If unset, the value inherits from the previous SectionBreak's SectionStyle. If the value is unset in the first SectionBreak, it inherits from DocumentStyle's default_header_id. This property is read-only.
            ///   - evenPageFooterId: The ID of the footer used only for even pages. If the value of DocumentStyle's use_even_page_header_footer is true, this value is used for the footers on even pages in the section. If it is false, the footers on even pages use the default_footer_id. If unset, the value inherits from the previous SectionBreak's SectionStyle. If the value is unset in the first SectionBreak, it inherits from DocumentStyle's even_page_footer_id. This property is read-only.
            ///   - evenPageHeaderId: The ID of the header used only for even pages. If the value of DocumentStyle's use_even_page_header_footer is true, this value is used for the headers on even pages in the section. If it is false, the headers on even pages use the default_header_id. If unset, the value inherits from the previous SectionBreak's SectionStyle. If the value is unset in the first SectionBreak, it inherits from DocumentStyle's even_page_header_id. This property is read-only.
            ///   - firstPageFooterId: The ID of the footer used only for the first page of the section. If use_first_page_header_footer is true, this value is used for the footer on the first page of the section. If it's false, the footer on the first page of the section uses the default_footer_id. If unset, the value inherits from the previous SectionBreak's SectionStyle. If the value is unset in the first SectionBreak, it inherits from DocumentStyle's first_page_footer_id. This property is read-only.
            ///   - firstPageHeaderId: The ID of the header used only for the first page of the section. If use_first_page_header_footer is true, this value is used for the header on the first page of the section. If it's false, the header on the first page of the section uses the default_header_id. If unset, the value inherits from the previous SectionBreak's SectionStyle. If the value is unset in the first SectionBreak, it inherits from DocumentStyle's first_page_header_id. This property is read-only.
            ///   - flipPageOrientation: Optional. Indicates whether to flip the dimensions of DocumentStyle's page_size for this section, which allows changing the page orientation between portrait and landscape. If unset, the value inherits from DocumentStyle's flip_page_orientation. When updating this property, setting a concrete value is required. Unsetting this property results in a 400 bad request error.
            ///   - marginBottom:
            ///   - marginFooter:
            ///   - marginHeader:
            ///   - marginLeft:
            ///   - marginRight:
            ///   - marginTop:
            ///   - pageNumberStart: The page number from which to start counting the number of pages for this section. If unset, page numbering continues from the previous section. If the value is unset in the first SectionBreak, refer to DocumentStyle's page_number_start. When updating this property, setting a concrete value is required. Unsetting this property results in a 400 bad request error.
            ///   - sectionType: Output only. The type of section.
            ///   - useFirstPageHeaderFooter: Indicates whether to use the first page header / footer IDs for the first page of the section. If unset, it inherits from DocumentStyle's use_first_page_header_footer for the first section. If the value is unset for subsequent sectors, it should be interpreted as false. When updating this property, setting a concrete value is required. Unsetting this property results in a 400 bad request error.
            public init(
                columnProperties: [Components.Schemas.SectionColumnProperties]? = nil,
                columnSeparatorStyle: Components.Schemas.SectionStyle.ColumnSeparatorStylePayload? = nil,
                contentDirection: Components.Schemas.SectionStyle.ContentDirectionPayload? = nil,
                defaultFooterId: Swift.String? = nil,
                defaultHeaderId: Swift.String? = nil,
                evenPageFooterId: Swift.String? = nil,
                evenPageHeaderId: Swift.String? = nil,
                firstPageFooterId: Swift.String? = nil,
                firstPageHeaderId: Swift.String? = nil,
                flipPageOrientation: Swift.Bool? = nil,
                marginBottom: Components.Schemas.Dimension? = nil,
                marginFooter: Components.Schemas.Dimension? = nil,
                marginHeader: Components.Schemas.Dimension? = nil,
                marginLeft: Components.Schemas.Dimension? = nil,
                marginRight: Components.Schemas.Dimension? = nil,
                marginTop: Components.Schemas.Dimension? = nil,
                pageNumberStart: Swift.Int32? = nil,
                sectionType: Components.Schemas.SectionStyle.SectionTypePayload? = nil,
                useFirstPageHeaderFooter: Swift.Bool? = nil
            ) {
                self.columnProperties = columnProperties
                self.columnSeparatorStyle = columnSeparatorStyle
                self.contentDirection = contentDirection
                self.defaultFooterId = defaultFooterId
                self.defaultHeaderId = defaultHeaderId
                self.evenPageFooterId = evenPageFooterId
                self.evenPageHeaderId = evenPageHeaderId
                self.firstPageFooterId = firstPageFooterId
                self.firstPageHeaderId = firstPageHeaderId
                self.flipPageOrientation = flipPageOrientation
                self.marginBottom = marginBottom
                self.marginFooter = marginFooter
                self.marginHeader = marginHeader
                self.marginLeft = marginLeft
                self.marginRight = marginRight
                self.marginTop = marginTop
                self.pageNumberStart = pageNumberStart
                self.sectionType = sectionType
                self.useFirstPageHeaderFooter = useFirstPageHeaderFooter
            }
            public enum CodingKeys: String, CodingKey {
                case columnProperties
                case columnSeparatorStyle
                case contentDirection
                case defaultFooterId
                case defaultHeaderId
                case evenPageFooterId
                case evenPageHeaderId
                case firstPageFooterId
                case firstPageHeaderId
                case flipPageOrientation
                case marginBottom
                case marginFooter
                case marginHeader
                case marginLeft
                case marginRight
                case marginTop
                case pageNumberStart
                case sectionType
                case useFirstPageHeaderFooter
            }
        }
        /// The shading of a paragraph.
        ///
        /// - Remark: Generated from `#/components/schemas/Shading`.
        public struct Shading: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/Shading/backgroundColor`.
            public var backgroundColor: Components.Schemas.OptionalColor?
            /// Creates a new `Shading`.
            ///
            /// - Parameters:
            ///   - backgroundColor:
            public init(backgroundColor: Components.Schemas.OptionalColor? = nil) {
                self.backgroundColor = backgroundColor
            }
            public enum CodingKeys: String, CodingKey {
                case backgroundColor
            }
        }
        /// A mask that indicates which of the fields on the base Shading have been changed in this suggested change. For any field set to true, there's a new suggested value.
        ///
        /// - Remark: Generated from `#/components/schemas/ShadingSuggestionState`.
        public struct ShadingSuggestionState: Codable, Hashable, Sendable {
            /// Indicates if there was a suggested change to the Shading.
            ///
            /// - Remark: Generated from `#/components/schemas/ShadingSuggestionState/backgroundColorSuggested`.
            public var backgroundColorSuggested: Swift.Bool?
            /// Creates a new `ShadingSuggestionState`.
            ///
            /// - Parameters:
            ///   - backgroundColorSuggested: Indicates if there was a suggested change to the Shading.
            public init(backgroundColorSuggested: Swift.Bool? = nil) {
                self.backgroundColorSuggested = backgroundColorSuggested
            }
            public enum CodingKeys: String, CodingKey {
                case backgroundColorSuggested
            }
        }
        /// A reference to a linked chart embedded from Google Sheets.
        ///
        /// - Remark: Generated from `#/components/schemas/SheetsChartReference`.
        public struct SheetsChartReference: Codable, Hashable, Sendable {
            /// The ID of the specific chart in the Google Sheets spreadsheet that's embedded.
            ///
            /// - Remark: Generated from `#/components/schemas/SheetsChartReference/chartId`.
            public var chartId: Swift.Int32?
            /// The ID of the Google Sheets spreadsheet that contains the source chart.
            ///
            /// - Remark: Generated from `#/components/schemas/SheetsChartReference/spreadsheetId`.
            public var spreadsheetId: Swift.String?
            /// Creates a new `SheetsChartReference`.
            ///
            /// - Parameters:
            ///   - chartId: The ID of the specific chart in the Google Sheets spreadsheet that's embedded.
            ///   - spreadsheetId: The ID of the Google Sheets spreadsheet that contains the source chart.
            public init(
                chartId: Swift.Int32? = nil,
                spreadsheetId: Swift.String? = nil
            ) {
                self.chartId = chartId
                self.spreadsheetId = spreadsheetId
            }
            public enum CodingKeys: String, CodingKey {
                case chartId
                case spreadsheetId
            }
        }
        /// A mask that indicates which of the fields on the base SheetsChartReference have been changed in this suggestion. For any field set to true, there's a new suggested value.
        ///
        /// - Remark: Generated from `#/components/schemas/SheetsChartReferenceSuggestionState`.
        public struct SheetsChartReferenceSuggestionState: Codable, Hashable, Sendable {
            /// Indicates if there was a suggested change to chart_id.
            ///
            /// - Remark: Generated from `#/components/schemas/SheetsChartReferenceSuggestionState/chartIdSuggested`.
            public var chartIdSuggested: Swift.Bool?
            /// Indicates if there was a suggested change to spreadsheet_id.
            ///
            /// - Remark: Generated from `#/components/schemas/SheetsChartReferenceSuggestionState/spreadsheetIdSuggested`.
            public var spreadsheetIdSuggested: Swift.Bool?
            /// Creates a new `SheetsChartReferenceSuggestionState`.
            ///
            /// - Parameters:
            ///   - chartIdSuggested: Indicates if there was a suggested change to chart_id.
            ///   - spreadsheetIdSuggested: Indicates if there was a suggested change to spreadsheet_id.
            public init(
                chartIdSuggested: Swift.Bool? = nil,
                spreadsheetIdSuggested: Swift.Bool? = nil
            ) {
                self.chartIdSuggested = chartIdSuggested
                self.spreadsheetIdSuggested = spreadsheetIdSuggested
            }
            public enum CodingKeys: String, CodingKey {
                case chartIdSuggested
                case spreadsheetIdSuggested
            }
        }
        /// A width and height.
        ///
        /// - Remark: Generated from `#/components/schemas/Size`.
        public struct Size: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/Size/height`.
            public var height: Components.Schemas.Dimension?
            /// - Remark: Generated from `#/components/schemas/Size/width`.
            public var width: Components.Schemas.Dimension?
            /// Creates a new `Size`.
            ///
            /// - Parameters:
            ///   - height:
            ///   - width:
            public init(
                height: Components.Schemas.Dimension? = nil,
                width: Components.Schemas.Dimension? = nil
            ) {
                self.height = height
                self.width = width
            }
            public enum CodingKeys: String, CodingKey {
                case height
                case width
            }
        }
        /// A mask that indicates which of the fields on the base Size have been changed in this suggestion. For any field set to true, the Size has a new suggested value.
        ///
        /// - Remark: Generated from `#/components/schemas/SizeSuggestionState`.
        public struct SizeSuggestionState: Codable, Hashable, Sendable {
            /// Indicates if there was a suggested change to height.
            ///
            /// - Remark: Generated from `#/components/schemas/SizeSuggestionState/heightSuggested`.
            public var heightSuggested: Swift.Bool?
            /// Indicates if there was a suggested change to width.
            ///
            /// - Remark: Generated from `#/components/schemas/SizeSuggestionState/widthSuggested`.
            public var widthSuggested: Swift.Bool?
            /// Creates a new `SizeSuggestionState`.
            ///
            /// - Parameters:
            ///   - heightSuggested: Indicates if there was a suggested change to height.
            ///   - widthSuggested: Indicates if there was a suggested change to width.
            public init(
                heightSuggested: Swift.Bool? = nil,
                widthSuggested: Swift.Bool? = nil
            ) {
                self.heightSuggested = heightSuggested
                self.widthSuggested = widthSuggested
            }
            public enum CodingKeys: String, CodingKey {
                case heightSuggested
                case widthSuggested
            }
        }
        /// A StructuralElement describes content that provides structure to the document.
        ///
        /// - Remark: Generated from `#/components/schemas/StructuralElement`.
        public struct StructuralElement: Codable, Hashable, Sendable {
            /// The zero-based end index of this structural element, exclusive, in UTF-16 code units.
            ///
            /// - Remark: Generated from `#/components/schemas/StructuralElement/endIndex`.
            public var endIndex: Swift.Int32? {
                get  {
                    self.storage.value.endIndex
                }
                _modify {
                    yield &self.storage.value.endIndex
                }
            }
            /// - Remark: Generated from `#/components/schemas/StructuralElement/paragraph`.
            public var paragraph: Components.Schemas.Paragraph? {
                get  {
                    self.storage.value.paragraph
                }
                _modify {
                    yield &self.storage.value.paragraph
                }
            }
            /// - Remark: Generated from `#/components/schemas/StructuralElement/sectionBreak`.
            public var sectionBreak: Components.Schemas.SectionBreak? {
                get  {
                    self.storage.value.sectionBreak
                }
                _modify {
                    yield &self.storage.value.sectionBreak
                }
            }
            /// The zero-based start index of this structural element, in UTF-16 code units.
            ///
            /// - Remark: Generated from `#/components/schemas/StructuralElement/startIndex`.
            public var startIndex: Swift.Int32? {
                get  {
                    self.storage.value.startIndex
                }
                _modify {
                    yield &self.storage.value.startIndex
                }
            }
            /// - Remark: Generated from `#/components/schemas/StructuralElement/table`.
            public var table: Components.Schemas.Table? {
                get  {
                    self.storage.value.table
                }
                _modify {
                    yield &self.storage.value.table
                }
            }
            /// - Remark: Generated from `#/components/schemas/StructuralElement/tableOfContents`.
            public var tableOfContents: Components.Schemas.TableOfContents? {
                get  {
                    self.storage.value.tableOfContents
                }
                _modify {
                    yield &self.storage.value.tableOfContents
                }
            }
            /// Creates a new `StructuralElement`.
            ///
            /// - Parameters:
            ///   - endIndex: The zero-based end index of this structural element, exclusive, in UTF-16 code units.
            ///   - paragraph:
            ///   - sectionBreak:
            ///   - startIndex: The zero-based start index of this structural element, in UTF-16 code units.
            ///   - table:
            ///   - tableOfContents:
            public init(
                endIndex: Swift.Int32? = nil,
                paragraph: Components.Schemas.Paragraph? = nil,
                sectionBreak: Components.Schemas.SectionBreak? = nil,
                startIndex: Swift.Int32? = nil,
                table: Components.Schemas.Table? = nil,
                tableOfContents: Components.Schemas.TableOfContents? = nil
            ) {
                self.storage = .init(value: .init(
                    endIndex: endIndex,
                    paragraph: paragraph,
                    sectionBreak: sectionBreak,
                    startIndex: startIndex,
                    table: table,
                    tableOfContents: tableOfContents
                ))
            }
            public enum CodingKeys: String, CodingKey {
                case endIndex
                case paragraph
                case sectionBreak
                case startIndex
                case table
                case tableOfContents
            }
            public init(from decoder: any Decoder) throws {
                self.storage = try .init(from: decoder)
            }
            public func encode(to encoder: any Encoder) throws {
                try self.storage.encode(to: encoder)
            }
            /// Internal reference storage to allow type recursion.
            private var storage: OpenAPIRuntime.CopyOnWriteBox<Storage>
            private struct Storage: Codable, Hashable, Sendable {
                /// The zero-based end index of this structural element, exclusive, in UTF-16 code units.
                ///
                /// - Remark: Generated from `#/components/schemas/StructuralElement/endIndex`.
                var endIndex: Swift.Int32?
                /// - Remark: Generated from `#/components/schemas/StructuralElement/paragraph`.
                var paragraph: Components.Schemas.Paragraph?
                /// - Remark: Generated from `#/components/schemas/StructuralElement/sectionBreak`.
                var sectionBreak: Components.Schemas.SectionBreak?
                /// The zero-based start index of this structural element, in UTF-16 code units.
                ///
                /// - Remark: Generated from `#/components/schemas/StructuralElement/startIndex`.
                var startIndex: Swift.Int32?
                /// - Remark: Generated from `#/components/schemas/StructuralElement/table`.
                var table: Components.Schemas.Table?
                /// - Remark: Generated from `#/components/schemas/StructuralElement/tableOfContents`.
                var tableOfContents: Components.Schemas.TableOfContents?
                init(
                    endIndex: Swift.Int32? = nil,
                    paragraph: Components.Schemas.Paragraph? = nil,
                    sectionBreak: Components.Schemas.SectionBreak? = nil,
                    startIndex: Swift.Int32? = nil,
                    table: Components.Schemas.Table? = nil,
                    tableOfContents: Components.Schemas.TableOfContents? = nil
                ) {
                    self.endIndex = endIndex
                    self.paragraph = paragraph
                    self.sectionBreak = sectionBreak
                    self.startIndex = startIndex
                    self.table = table
                    self.tableOfContents = tableOfContents
                }
                typealias CodingKeys = Components.Schemas.StructuralElement.CodingKeys
            }
        }
        /// A criteria that matches a specific string of text in the document.
        ///
        /// - Remark: Generated from `#/components/schemas/SubstringMatchCriteria`.
        public struct SubstringMatchCriteria: Codable, Hashable, Sendable {
            /// Indicates whether the search should respect case: - `True`: the search is case sensitive. - `False`: the search is case insensitive.
            ///
            /// - Remark: Generated from `#/components/schemas/SubstringMatchCriteria/matchCase`.
            public var matchCase: Swift.Bool?
            /// The text to search for in the document.
            ///
            /// - Remark: Generated from `#/components/schemas/SubstringMatchCriteria/text`.
            public var text: Swift.String?
            /// Creates a new `SubstringMatchCriteria`.
            ///
            /// - Parameters:
            ///   - matchCase: Indicates whether the search should respect case: - `True`: the search is case sensitive. - `False`: the search is case insensitive.
            ///   - text: The text to search for in the document.
            public init(
                matchCase: Swift.Bool? = nil,
                text: Swift.String? = nil
            ) {
                self.matchCase = matchCase
                self.text = text
            }
            public enum CodingKeys: String, CodingKey {
                case matchCase
                case text
            }
        }
        /// A suggested change to a Bullet.
        ///
        /// - Remark: Generated from `#/components/schemas/SuggestedBullet`.
        public struct SuggestedBullet: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/SuggestedBullet/bullet`.
            public var bullet: Components.Schemas.Bullet?
            /// - Remark: Generated from `#/components/schemas/SuggestedBullet/bulletSuggestionState`.
            public var bulletSuggestionState: Components.Schemas.BulletSuggestionState?
            /// Creates a new `SuggestedBullet`.
            ///
            /// - Parameters:
            ///   - bullet:
            ///   - bulletSuggestionState:
            public init(
                bullet: Components.Schemas.Bullet? = nil,
                bulletSuggestionState: Components.Schemas.BulletSuggestionState? = nil
            ) {
                self.bullet = bullet
                self.bulletSuggestionState = bulletSuggestionState
            }
            public enum CodingKeys: String, CodingKey {
                case bullet
                case bulletSuggestionState
            }
        }
        /// A suggested change to the DocumentStyle.
        ///
        /// - Remark: Generated from `#/components/schemas/SuggestedDocumentStyle`.
        public struct SuggestedDocumentStyle: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/SuggestedDocumentStyle/documentStyle`.
            public var documentStyle: Components.Schemas.DocumentStyle?
            /// - Remark: Generated from `#/components/schemas/SuggestedDocumentStyle/documentStyleSuggestionState`.
            public var documentStyleSuggestionState: Components.Schemas.DocumentStyleSuggestionState?
            /// Creates a new `SuggestedDocumentStyle`.
            ///
            /// - Parameters:
            ///   - documentStyle:
            ///   - documentStyleSuggestionState:
            public init(
                documentStyle: Components.Schemas.DocumentStyle? = nil,
                documentStyleSuggestionState: Components.Schemas.DocumentStyleSuggestionState? = nil
            ) {
                self.documentStyle = documentStyle
                self.documentStyleSuggestionState = documentStyleSuggestionState
            }
            public enum CodingKeys: String, CodingKey {
                case documentStyle
                case documentStyleSuggestionState
            }
        }
        /// A suggested change to InlineObjectProperties.
        ///
        /// - Remark: Generated from `#/components/schemas/SuggestedInlineObjectProperties`.
        public struct SuggestedInlineObjectProperties: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/SuggestedInlineObjectProperties/inlineObjectProperties`.
            public var inlineObjectProperties: Components.Schemas.InlineObjectProperties?
            /// - Remark: Generated from `#/components/schemas/SuggestedInlineObjectProperties/inlineObjectPropertiesSuggestionState`.
            public var inlineObjectPropertiesSuggestionState: Components.Schemas.InlineObjectPropertiesSuggestionState?
            /// Creates a new `SuggestedInlineObjectProperties`.
            ///
            /// - Parameters:
            ///   - inlineObjectProperties:
            ///   - inlineObjectPropertiesSuggestionState:
            public init(
                inlineObjectProperties: Components.Schemas.InlineObjectProperties? = nil,
                inlineObjectPropertiesSuggestionState: Components.Schemas.InlineObjectPropertiesSuggestionState? = nil
            ) {
                self.inlineObjectProperties = inlineObjectProperties
                self.inlineObjectPropertiesSuggestionState = inlineObjectPropertiesSuggestionState
            }
            public enum CodingKeys: String, CodingKey {
                case inlineObjectProperties
                case inlineObjectPropertiesSuggestionState
            }
        }
        /// A suggested change to ListProperties.
        ///
        /// - Remark: Generated from `#/components/schemas/SuggestedListProperties`.
        public struct SuggestedListProperties: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/SuggestedListProperties/listProperties`.
            public var listProperties: Components.Schemas.ListProperties?
            /// - Remark: Generated from `#/components/schemas/SuggestedListProperties/listPropertiesSuggestionState`.
            public var listPropertiesSuggestionState: Components.Schemas.ListPropertiesSuggestionState?
            /// Creates a new `SuggestedListProperties`.
            ///
            /// - Parameters:
            ///   - listProperties:
            ///   - listPropertiesSuggestionState:
            public init(
                listProperties: Components.Schemas.ListProperties? = nil,
                listPropertiesSuggestionState: Components.Schemas.ListPropertiesSuggestionState? = nil
            ) {
                self.listProperties = listProperties
                self.listPropertiesSuggestionState = listPropertiesSuggestionState
            }
            public enum CodingKeys: String, CodingKey {
                case listProperties
                case listPropertiesSuggestionState
            }
        }
        /// A suggested change to the NamedStyles.
        ///
        /// - Remark: Generated from `#/components/schemas/SuggestedNamedStyles`.
        public struct SuggestedNamedStyles: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/SuggestedNamedStyles/namedStyles`.
            public var namedStyles: Components.Schemas.NamedStyles?
            /// - Remark: Generated from `#/components/schemas/SuggestedNamedStyles/namedStylesSuggestionState`.
            public var namedStylesSuggestionState: Components.Schemas.NamedStylesSuggestionState?
            /// Creates a new `SuggestedNamedStyles`.
            ///
            /// - Parameters:
            ///   - namedStyles:
            ///   - namedStylesSuggestionState:
            public init(
                namedStyles: Components.Schemas.NamedStyles? = nil,
                namedStylesSuggestionState: Components.Schemas.NamedStylesSuggestionState? = nil
            ) {
                self.namedStyles = namedStyles
                self.namedStylesSuggestionState = namedStylesSuggestionState
            }
            public enum CodingKeys: String, CodingKey {
                case namedStyles
                case namedStylesSuggestionState
            }
        }
        /// A suggested change to a ParagraphStyle.
        ///
        /// - Remark: Generated from `#/components/schemas/SuggestedParagraphStyle`.
        public struct SuggestedParagraphStyle: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/SuggestedParagraphStyle/paragraphStyle`.
            public var paragraphStyle: Components.Schemas.ParagraphStyle?
            /// - Remark: Generated from `#/components/schemas/SuggestedParagraphStyle/paragraphStyleSuggestionState`.
            public var paragraphStyleSuggestionState: Components.Schemas.ParagraphStyleSuggestionState?
            /// Creates a new `SuggestedParagraphStyle`.
            ///
            /// - Parameters:
            ///   - paragraphStyle:
            ///   - paragraphStyleSuggestionState:
            public init(
                paragraphStyle: Components.Schemas.ParagraphStyle? = nil,
                paragraphStyleSuggestionState: Components.Schemas.ParagraphStyleSuggestionState? = nil
            ) {
                self.paragraphStyle = paragraphStyle
                self.paragraphStyleSuggestionState = paragraphStyleSuggestionState
            }
            public enum CodingKeys: String, CodingKey {
                case paragraphStyle
                case paragraphStyleSuggestionState
            }
        }
        /// A suggested change to PositionedObjectProperties.
        ///
        /// - Remark: Generated from `#/components/schemas/SuggestedPositionedObjectProperties`.
        public struct SuggestedPositionedObjectProperties: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/SuggestedPositionedObjectProperties/positionedObjectProperties`.
            public var positionedObjectProperties: Components.Schemas.PositionedObjectProperties?
            /// - Remark: Generated from `#/components/schemas/SuggestedPositionedObjectProperties/positionedObjectPropertiesSuggestionState`.
            public var positionedObjectPropertiesSuggestionState: Components.Schemas.PositionedObjectPropertiesSuggestionState?
            /// Creates a new `SuggestedPositionedObjectProperties`.
            ///
            /// - Parameters:
            ///   - positionedObjectProperties:
            ///   - positionedObjectPropertiesSuggestionState:
            public init(
                positionedObjectProperties: Components.Schemas.PositionedObjectProperties? = nil,
                positionedObjectPropertiesSuggestionState: Components.Schemas.PositionedObjectPropertiesSuggestionState? = nil
            ) {
                self.positionedObjectProperties = positionedObjectProperties
                self.positionedObjectPropertiesSuggestionState = positionedObjectPropertiesSuggestionState
            }
            public enum CodingKeys: String, CodingKey {
                case positionedObjectProperties
                case positionedObjectPropertiesSuggestionState
            }
        }
        /// A suggested change to a TableCellStyle.
        ///
        /// - Remark: Generated from `#/components/schemas/SuggestedTableCellStyle`.
        public struct SuggestedTableCellStyle: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/SuggestedTableCellStyle/tableCellStyle`.
            public var tableCellStyle: Components.Schemas.TableCellStyle?
            /// - Remark: Generated from `#/components/schemas/SuggestedTableCellStyle/tableCellStyleSuggestionState`.
            public var tableCellStyleSuggestionState: Components.Schemas.TableCellStyleSuggestionState?
            /// Creates a new `SuggestedTableCellStyle`.
            ///
            /// - Parameters:
            ///   - tableCellStyle:
            ///   - tableCellStyleSuggestionState:
            public init(
                tableCellStyle: Components.Schemas.TableCellStyle? = nil,
                tableCellStyleSuggestionState: Components.Schemas.TableCellStyleSuggestionState? = nil
            ) {
                self.tableCellStyle = tableCellStyle
                self.tableCellStyleSuggestionState = tableCellStyleSuggestionState
            }
            public enum CodingKeys: String, CodingKey {
                case tableCellStyle
                case tableCellStyleSuggestionState
            }
        }
        /// A suggested change to a TableRowStyle.
        ///
        /// - Remark: Generated from `#/components/schemas/SuggestedTableRowStyle`.
        public struct SuggestedTableRowStyle: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/SuggestedTableRowStyle/tableRowStyle`.
            public var tableRowStyle: Components.Schemas.TableRowStyle?
            /// - Remark: Generated from `#/components/schemas/SuggestedTableRowStyle/tableRowStyleSuggestionState`.
            public var tableRowStyleSuggestionState: Components.Schemas.TableRowStyleSuggestionState?
            /// Creates a new `SuggestedTableRowStyle`.
            ///
            /// - Parameters:
            ///   - tableRowStyle:
            ///   - tableRowStyleSuggestionState:
            public init(
                tableRowStyle: Components.Schemas.TableRowStyle? = nil,
                tableRowStyleSuggestionState: Components.Schemas.TableRowStyleSuggestionState? = nil
            ) {
                self.tableRowStyle = tableRowStyle
                self.tableRowStyleSuggestionState = tableRowStyleSuggestionState
            }
            public enum CodingKeys: String, CodingKey {
                case tableRowStyle
                case tableRowStyleSuggestionState
            }
        }
        /// A suggested change to a TextStyle.
        ///
        /// - Remark: Generated from `#/components/schemas/SuggestedTextStyle`.
        public struct SuggestedTextStyle: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/SuggestedTextStyle/textStyle`.
            public var textStyle: Components.Schemas.TextStyle?
            /// - Remark: Generated from `#/components/schemas/SuggestedTextStyle/textStyleSuggestionState`.
            public var textStyleSuggestionState: Components.Schemas.TextStyleSuggestionState?
            /// Creates a new `SuggestedTextStyle`.
            ///
            /// - Parameters:
            ///   - textStyle:
            ///   - textStyleSuggestionState:
            public init(
                textStyle: Components.Schemas.TextStyle? = nil,
                textStyleSuggestionState: Components.Schemas.TextStyleSuggestionState? = nil
            ) {
                self.textStyle = textStyle
                self.textStyleSuggestionState = textStyleSuggestionState
            }
            public enum CodingKeys: String, CodingKey {
                case textStyle
                case textStyleSuggestionState
            }
        }
        /// A tab stop within a paragraph.
        ///
        /// - Remark: Generated from `#/components/schemas/TabStop`.
        public struct TabStop: Codable, Hashable, Sendable {
            /// The alignment of this tab stop. If unset, the value defaults to START.
            ///
            /// - Remark: Generated from `#/components/schemas/TabStop/alignment`.
            @frozen public enum AlignmentPayload: String, Codable, Hashable, Sendable, CaseIterable {
                case tabStopAlignmentUnspecified = "TAB_STOP_ALIGNMENT_UNSPECIFIED"
                case start = "START"
                case center = "CENTER"
                case end = "END"
            }
            /// The alignment of this tab stop. If unset, the value defaults to START.
            ///
            /// - Remark: Generated from `#/components/schemas/TabStop/alignment`.
            public var alignment: Components.Schemas.TabStop.AlignmentPayload?
            /// - Remark: Generated from `#/components/schemas/TabStop/offset`.
            public var offset: Components.Schemas.Dimension?
            /// Creates a new `TabStop`.
            ///
            /// - Parameters:
            ///   - alignment: The alignment of this tab stop. If unset, the value defaults to START.
            ///   - offset:
            public init(
                alignment: Components.Schemas.TabStop.AlignmentPayload? = nil,
                offset: Components.Schemas.Dimension? = nil
            ) {
                self.alignment = alignment
                self.offset = offset
            }
            public enum CodingKeys: String, CodingKey {
                case alignment
                case offset
            }
        }
        /// A StructuralElement representing a table.
        ///
        /// - Remark: Generated from `#/components/schemas/Table`.
        public struct Table: Codable, Hashable, Sendable {
            /// Number of columns in the table. It's possible for a table to be non-rectangular, so some rows may have a different number of cells.
            ///
            /// - Remark: Generated from `#/components/schemas/Table/columns`.
            public var columns: Swift.Int32?
            /// Number of rows in the table.
            ///
            /// - Remark: Generated from `#/components/schemas/Table/rows`.
            public var rows: Swift.Int32?
            /// The suggested deletion IDs. If empty, then there are no suggested deletions of this content.
            ///
            /// - Remark: Generated from `#/components/schemas/Table/suggestedDeletionIds`.
            public var suggestedDeletionIds: [Swift.String]?
            /// The suggested insertion IDs. A Table may have multiple insertion IDs if it's a nested suggested change. If empty, then this is not a suggested insertion.
            ///
            /// - Remark: Generated from `#/components/schemas/Table/suggestedInsertionIds`.
            public var suggestedInsertionIds: [Swift.String]?
            /// The contents and style of each row.
            ///
            /// - Remark: Generated from `#/components/schemas/Table/tableRows`.
            public var tableRows: [Components.Schemas.TableRow]?
            /// - Remark: Generated from `#/components/schemas/Table/tableStyle`.
            public var tableStyle: Components.Schemas.TableStyle?
            /// Creates a new `Table`.
            ///
            /// - Parameters:
            ///   - columns: Number of columns in the table. It's possible for a table to be non-rectangular, so some rows may have a different number of cells.
            ///   - rows: Number of rows in the table.
            ///   - suggestedDeletionIds: The suggested deletion IDs. If empty, then there are no suggested deletions of this content.
            ///   - suggestedInsertionIds: The suggested insertion IDs. A Table may have multiple insertion IDs if it's a nested suggested change. If empty, then this is not a suggested insertion.
            ///   - tableRows: The contents and style of each row.
            ///   - tableStyle:
            public init(
                columns: Swift.Int32? = nil,
                rows: Swift.Int32? = nil,
                suggestedDeletionIds: [Swift.String]? = nil,
                suggestedInsertionIds: [Swift.String]? = nil,
                tableRows: [Components.Schemas.TableRow]? = nil,
                tableStyle: Components.Schemas.TableStyle? = nil
            ) {
                self.columns = columns
                self.rows = rows
                self.suggestedDeletionIds = suggestedDeletionIds
                self.suggestedInsertionIds = suggestedInsertionIds
                self.tableRows = tableRows
                self.tableStyle = tableStyle
            }
            public enum CodingKeys: String, CodingKey {
                case columns
                case rows
                case suggestedDeletionIds
                case suggestedInsertionIds
                case tableRows
                case tableStyle
            }
        }
        /// The contents and style of a cell in a Table.
        ///
        /// - Remark: Generated from `#/components/schemas/TableCell`.
        public struct TableCell: Codable, Hashable, Sendable {
            /// The content of the cell.
            ///
            /// - Remark: Generated from `#/components/schemas/TableCell/content`.
            public var content: [Components.Schemas.StructuralElement]?
            /// The zero-based end index of this cell, exclusive, in UTF-16 code units.
            ///
            /// - Remark: Generated from `#/components/schemas/TableCell/endIndex`.
            public var endIndex: Swift.Int32?
            /// The zero-based start index of this cell, in UTF-16 code units.
            ///
            /// - Remark: Generated from `#/components/schemas/TableCell/startIndex`.
            public var startIndex: Swift.Int32?
            /// The suggested deletion IDs. If empty, then there are no suggested deletions of this content.
            ///
            /// - Remark: Generated from `#/components/schemas/TableCell/suggestedDeletionIds`.
            public var suggestedDeletionIds: [Swift.String]?
            /// The suggested insertion IDs. A TableCell may have multiple insertion IDs if it's a nested suggested change. If empty, then this is not a suggested insertion.
            ///
            /// - Remark: Generated from `#/components/schemas/TableCell/suggestedInsertionIds`.
            public var suggestedInsertionIds: [Swift.String]?
            /// The suggested changes to the table cell style, keyed by suggestion ID.
            ///
            /// - Remark: Generated from `#/components/schemas/TableCell/suggestedTableCellStyleChanges`.
            public struct SuggestedTableCellStyleChangesPayload: Codable, Hashable, Sendable {
                /// A container of undocumented properties.
                public var additionalProperties: [String: Components.Schemas.SuggestedTableCellStyle]
                /// Creates a new `SuggestedTableCellStyleChangesPayload`.
                ///
                /// - Parameters:
                ///   - additionalProperties: A container of undocumented properties.
                public init(additionalProperties: [String: Components.Schemas.SuggestedTableCellStyle] = .init()) {
                    self.additionalProperties = additionalProperties
                }
                public init(from decoder: any Decoder) throws {
                    additionalProperties = try decoder.decodeAdditionalProperties(knownKeys: [])
                }
                public func encode(to encoder: any Encoder) throws {
                    try encoder.encodeAdditionalProperties(additionalProperties)
                }
            }
            /// The suggested changes to the table cell style, keyed by suggestion ID.
            ///
            /// - Remark: Generated from `#/components/schemas/TableCell/suggestedTableCellStyleChanges`.
            public var suggestedTableCellStyleChanges: Components.Schemas.TableCell.SuggestedTableCellStyleChangesPayload?
            /// - Remark: Generated from `#/components/schemas/TableCell/tableCellStyle`.
            public var tableCellStyle: Components.Schemas.TableCellStyle?
            /// Creates a new `TableCell`.
            ///
            /// - Parameters:
            ///   - content: The content of the cell.
            ///   - endIndex: The zero-based end index of this cell, exclusive, in UTF-16 code units.
            ///   - startIndex: The zero-based start index of this cell, in UTF-16 code units.
            ///   - suggestedDeletionIds: The suggested deletion IDs. If empty, then there are no suggested deletions of this content.
            ///   - suggestedInsertionIds: The suggested insertion IDs. A TableCell may have multiple insertion IDs if it's a nested suggested change. If empty, then this is not a suggested insertion.
            ///   - suggestedTableCellStyleChanges: The suggested changes to the table cell style, keyed by suggestion ID.
            ///   - tableCellStyle:
            public init(
                content: [Components.Schemas.StructuralElement]? = nil,
                endIndex: Swift.Int32? = nil,
                startIndex: Swift.Int32? = nil,
                suggestedDeletionIds: [Swift.String]? = nil,
                suggestedInsertionIds: [Swift.String]? = nil,
                suggestedTableCellStyleChanges: Components.Schemas.TableCell.SuggestedTableCellStyleChangesPayload? = nil,
                tableCellStyle: Components.Schemas.TableCellStyle? = nil
            ) {
                self.content = content
                self.endIndex = endIndex
                self.startIndex = startIndex
                self.suggestedDeletionIds = suggestedDeletionIds
                self.suggestedInsertionIds = suggestedInsertionIds
                self.suggestedTableCellStyleChanges = suggestedTableCellStyleChanges
                self.tableCellStyle = tableCellStyle
            }
            public enum CodingKeys: String, CodingKey {
                case content
                case endIndex
                case startIndex
                case suggestedDeletionIds
                case suggestedInsertionIds
                case suggestedTableCellStyleChanges
                case tableCellStyle
            }
        }
        /// A border around a table cell. Table cell borders cannot be transparent. To hide a table cell border, make its width 0.
        ///
        /// - Remark: Generated from `#/components/schemas/TableCellBorder`.
        public struct TableCellBorder: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/TableCellBorder/color`.
            public var color: Components.Schemas.OptionalColor?
            /// The dash style of the border.
            ///
            /// - Remark: Generated from `#/components/schemas/TableCellBorder/dashStyle`.
            @frozen public enum DashStylePayload: String, Codable, Hashable, Sendable, CaseIterable {
                case dashStyleUnspecified = "DASH_STYLE_UNSPECIFIED"
                case solid = "SOLID"
                case dot = "DOT"
                case dash = "DASH"
            }
            /// The dash style of the border.
            ///
            /// - Remark: Generated from `#/components/schemas/TableCellBorder/dashStyle`.
            public var dashStyle: Components.Schemas.TableCellBorder.DashStylePayload?
            /// - Remark: Generated from `#/components/schemas/TableCellBorder/width`.
            public var width: Components.Schemas.Dimension?
            /// Creates a new `TableCellBorder`.
            ///
            /// - Parameters:
            ///   - color:
            ///   - dashStyle: The dash style of the border.
            ///   - width:
            public init(
                color: Components.Schemas.OptionalColor? = nil,
                dashStyle: Components.Schemas.TableCellBorder.DashStylePayload? = nil,
                width: Components.Schemas.Dimension? = nil
            ) {
                self.color = color
                self.dashStyle = dashStyle
                self.width = width
            }
            public enum CodingKeys: String, CodingKey {
                case color
                case dashStyle
                case width
            }
        }
        /// Location of a single cell within a table.
        ///
        /// - Remark: Generated from `#/components/schemas/TableCellLocation`.
        public struct TableCellLocation: Codable, Hashable, Sendable {
            /// The zero-based column index. For example, the second column in the table has a column index of 1.
            ///
            /// - Remark: Generated from `#/components/schemas/TableCellLocation/columnIndex`.
            public var columnIndex: Swift.Int32?
            /// The zero-based row index. For example, the second row in the table has a row index of 1.
            ///
            /// - Remark: Generated from `#/components/schemas/TableCellLocation/rowIndex`.
            public var rowIndex: Swift.Int32?
            /// - Remark: Generated from `#/components/schemas/TableCellLocation/tableStartLocation`.
            public var tableStartLocation: Components.Schemas.Location?
            /// Creates a new `TableCellLocation`.
            ///
            /// - Parameters:
            ///   - columnIndex: The zero-based column index. For example, the second column in the table has a column index of 1.
            ///   - rowIndex: The zero-based row index. For example, the second row in the table has a row index of 1.
            ///   - tableStartLocation:
            public init(
                columnIndex: Swift.Int32? = nil,
                rowIndex: Swift.Int32? = nil,
                tableStartLocation: Components.Schemas.Location? = nil
            ) {
                self.columnIndex = columnIndex
                self.rowIndex = rowIndex
                self.tableStartLocation = tableStartLocation
            }
            public enum CodingKeys: String, CodingKey {
                case columnIndex
                case rowIndex
                case tableStartLocation
            }
        }
        /// The style of a TableCell. Inherited table cell styles are represented as unset fields in this message. A table cell style can inherit from the table's style.
        ///
        /// - Remark: Generated from `#/components/schemas/TableCellStyle`.
        public struct TableCellStyle: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/TableCellStyle/backgroundColor`.
            public var backgroundColor: Components.Schemas.OptionalColor?
            /// - Remark: Generated from `#/components/schemas/TableCellStyle/borderBottom`.
            public var borderBottom: Components.Schemas.TableCellBorder?
            /// - Remark: Generated from `#/components/schemas/TableCellStyle/borderLeft`.
            public var borderLeft: Components.Schemas.TableCellBorder?
            /// - Remark: Generated from `#/components/schemas/TableCellStyle/borderRight`.
            public var borderRight: Components.Schemas.TableCellBorder?
            /// - Remark: Generated from `#/components/schemas/TableCellStyle/borderTop`.
            public var borderTop: Components.Schemas.TableCellBorder?
            /// The column span of the cell. This property is read-only.
            ///
            /// - Remark: Generated from `#/components/schemas/TableCellStyle/columnSpan`.
            public var columnSpan: Swift.Int32?
            /// The alignment of the content in the table cell. The default alignment matches the alignment for newly created table cells in the Docs editor.
            ///
            /// - Remark: Generated from `#/components/schemas/TableCellStyle/contentAlignment`.
            @frozen public enum ContentAlignmentPayload: String, Codable, Hashable, Sendable, CaseIterable {
                case contentAlignmentUnspecified = "CONTENT_ALIGNMENT_UNSPECIFIED"
                case contentAlignmentUnsupported = "CONTENT_ALIGNMENT_UNSUPPORTED"
                case top = "TOP"
                case middle = "MIDDLE"
                case bottom = "BOTTOM"
            }
            /// The alignment of the content in the table cell. The default alignment matches the alignment for newly created table cells in the Docs editor.
            ///
            /// - Remark: Generated from `#/components/schemas/TableCellStyle/contentAlignment`.
            public var contentAlignment: Components.Schemas.TableCellStyle.ContentAlignmentPayload?
            /// - Remark: Generated from `#/components/schemas/TableCellStyle/paddingBottom`.
            public var paddingBottom: Components.Schemas.Dimension?
            /// - Remark: Generated from `#/components/schemas/TableCellStyle/paddingLeft`.
            public var paddingLeft: Components.Schemas.Dimension?
            /// - Remark: Generated from `#/components/schemas/TableCellStyle/paddingRight`.
            public var paddingRight: Components.Schemas.Dimension?
            /// - Remark: Generated from `#/components/schemas/TableCellStyle/paddingTop`.
            public var paddingTop: Components.Schemas.Dimension?
            /// The row span of the cell. This property is read-only.
            ///
            /// - Remark: Generated from `#/components/schemas/TableCellStyle/rowSpan`.
            public var rowSpan: Swift.Int32?
            /// Creates a new `TableCellStyle`.
            ///
            /// - Parameters:
            ///   - backgroundColor:
            ///   - borderBottom:
            ///   - borderLeft:
            ///   - borderRight:
            ///   - borderTop:
            ///   - columnSpan: The column span of the cell. This property is read-only.
            ///   - contentAlignment: The alignment of the content in the table cell. The default alignment matches the alignment for newly created table cells in the Docs editor.
            ///   - paddingBottom:
            ///   - paddingLeft:
            ///   - paddingRight:
            ///   - paddingTop:
            ///   - rowSpan: The row span of the cell. This property is read-only.
            public init(
                backgroundColor: Components.Schemas.OptionalColor? = nil,
                borderBottom: Components.Schemas.TableCellBorder? = nil,
                borderLeft: Components.Schemas.TableCellBorder? = nil,
                borderRight: Components.Schemas.TableCellBorder? = nil,
                borderTop: Components.Schemas.TableCellBorder? = nil,
                columnSpan: Swift.Int32? = nil,
                contentAlignment: Components.Schemas.TableCellStyle.ContentAlignmentPayload? = nil,
                paddingBottom: Components.Schemas.Dimension? = nil,
                paddingLeft: Components.Schemas.Dimension? = nil,
                paddingRight: Components.Schemas.Dimension? = nil,
                paddingTop: Components.Schemas.Dimension? = nil,
                rowSpan: Swift.Int32? = nil
            ) {
                self.backgroundColor = backgroundColor
                self.borderBottom = borderBottom
                self.borderLeft = borderLeft
                self.borderRight = borderRight
                self.borderTop = borderTop
                self.columnSpan = columnSpan
                self.contentAlignment = contentAlignment
                self.paddingBottom = paddingBottom
                self.paddingLeft = paddingLeft
                self.paddingRight = paddingRight
                self.paddingTop = paddingTop
                self.rowSpan = rowSpan
            }
            public enum CodingKeys: String, CodingKey {
                case backgroundColor
                case borderBottom
                case borderLeft
                case borderRight
                case borderTop
                case columnSpan
                case contentAlignment
                case paddingBottom
                case paddingLeft
                case paddingRight
                case paddingTop
                case rowSpan
            }
        }
        /// A mask that indicates which of the fields on the base TableCellStyle have been changed in this suggestion. For any field set to true, there's a new suggested value.
        ///
        /// - Remark: Generated from `#/components/schemas/TableCellStyleSuggestionState`.
        public struct TableCellStyleSuggestionState: Codable, Hashable, Sendable {
            /// Indicates if there was a suggested change to background_color.
            ///
            /// - Remark: Generated from `#/components/schemas/TableCellStyleSuggestionState/backgroundColorSuggested`.
            public var backgroundColorSuggested: Swift.Bool?
            /// Indicates if there was a suggested change to border_bottom.
            ///
            /// - Remark: Generated from `#/components/schemas/TableCellStyleSuggestionState/borderBottomSuggested`.
            public var borderBottomSuggested: Swift.Bool?
            /// Indicates if there was a suggested change to border_left.
            ///
            /// - Remark: Generated from `#/components/schemas/TableCellStyleSuggestionState/borderLeftSuggested`.
            public var borderLeftSuggested: Swift.Bool?
            /// Indicates if there was a suggested change to border_right.
            ///
            /// - Remark: Generated from `#/components/schemas/TableCellStyleSuggestionState/borderRightSuggested`.
            public var borderRightSuggested: Swift.Bool?
            /// Indicates if there was a suggested change to border_top.
            ///
            /// - Remark: Generated from `#/components/schemas/TableCellStyleSuggestionState/borderTopSuggested`.
            public var borderTopSuggested: Swift.Bool?
            /// Indicates if there was a suggested change to column_span.
            ///
            /// - Remark: Generated from `#/components/schemas/TableCellStyleSuggestionState/columnSpanSuggested`.
            public var columnSpanSuggested: Swift.Bool?
            /// Indicates if there was a suggested change to content_alignment.
            ///
            /// - Remark: Generated from `#/components/schemas/TableCellStyleSuggestionState/contentAlignmentSuggested`.
            public var contentAlignmentSuggested: Swift.Bool?
            /// Indicates if there was a suggested change to padding_bottom.
            ///
            /// - Remark: Generated from `#/components/schemas/TableCellStyleSuggestionState/paddingBottomSuggested`.
            public var paddingBottomSuggested: Swift.Bool?
            /// Indicates if there was a suggested change to padding_left.
            ///
            /// - Remark: Generated from `#/components/schemas/TableCellStyleSuggestionState/paddingLeftSuggested`.
            public var paddingLeftSuggested: Swift.Bool?
            /// Indicates if there was a suggested change to padding_right.
            ///
            /// - Remark: Generated from `#/components/schemas/TableCellStyleSuggestionState/paddingRightSuggested`.
            public var paddingRightSuggested: Swift.Bool?
            /// Indicates if there was a suggested change to padding_top.
            ///
            /// - Remark: Generated from `#/components/schemas/TableCellStyleSuggestionState/paddingTopSuggested`.
            public var paddingTopSuggested: Swift.Bool?
            /// Indicates if there was a suggested change to row_span.
            ///
            /// - Remark: Generated from `#/components/schemas/TableCellStyleSuggestionState/rowSpanSuggested`.
            public var rowSpanSuggested: Swift.Bool?
            /// Creates a new `TableCellStyleSuggestionState`.
            ///
            /// - Parameters:
            ///   - backgroundColorSuggested: Indicates if there was a suggested change to background_color.
            ///   - borderBottomSuggested: Indicates if there was a suggested change to border_bottom.
            ///   - borderLeftSuggested: Indicates if there was a suggested change to border_left.
            ///   - borderRightSuggested: Indicates if there was a suggested change to border_right.
            ///   - borderTopSuggested: Indicates if there was a suggested change to border_top.
            ///   - columnSpanSuggested: Indicates if there was a suggested change to column_span.
            ///   - contentAlignmentSuggested: Indicates if there was a suggested change to content_alignment.
            ///   - paddingBottomSuggested: Indicates if there was a suggested change to padding_bottom.
            ///   - paddingLeftSuggested: Indicates if there was a suggested change to padding_left.
            ///   - paddingRightSuggested: Indicates if there was a suggested change to padding_right.
            ///   - paddingTopSuggested: Indicates if there was a suggested change to padding_top.
            ///   - rowSpanSuggested: Indicates if there was a suggested change to row_span.
            public init(
                backgroundColorSuggested: Swift.Bool? = nil,
                borderBottomSuggested: Swift.Bool? = nil,
                borderLeftSuggested: Swift.Bool? = nil,
                borderRightSuggested: Swift.Bool? = nil,
                borderTopSuggested: Swift.Bool? = nil,
                columnSpanSuggested: Swift.Bool? = nil,
                contentAlignmentSuggested: Swift.Bool? = nil,
                paddingBottomSuggested: Swift.Bool? = nil,
                paddingLeftSuggested: Swift.Bool? = nil,
                paddingRightSuggested: Swift.Bool? = nil,
                paddingTopSuggested: Swift.Bool? = nil,
                rowSpanSuggested: Swift.Bool? = nil
            ) {
                self.backgroundColorSuggested = backgroundColorSuggested
                self.borderBottomSuggested = borderBottomSuggested
                self.borderLeftSuggested = borderLeftSuggested
                self.borderRightSuggested = borderRightSuggested
                self.borderTopSuggested = borderTopSuggested
                self.columnSpanSuggested = columnSpanSuggested
                self.contentAlignmentSuggested = contentAlignmentSuggested
                self.paddingBottomSuggested = paddingBottomSuggested
                self.paddingLeftSuggested = paddingLeftSuggested
                self.paddingRightSuggested = paddingRightSuggested
                self.paddingTopSuggested = paddingTopSuggested
                self.rowSpanSuggested = rowSpanSuggested
            }
            public enum CodingKeys: String, CodingKey {
                case backgroundColorSuggested
                case borderBottomSuggested
                case borderLeftSuggested
                case borderRightSuggested
                case borderTopSuggested
                case columnSpanSuggested
                case contentAlignmentSuggested
                case paddingBottomSuggested
                case paddingLeftSuggested
                case paddingRightSuggested
                case paddingTopSuggested
                case rowSpanSuggested
            }
        }
        /// The properties of a column in a table.
        ///
        /// - Remark: Generated from `#/components/schemas/TableColumnProperties`.
        public struct TableColumnProperties: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/TableColumnProperties/width`.
            public var width: Components.Schemas.Dimension?
            /// The width type of the column.
            ///
            /// - Remark: Generated from `#/components/schemas/TableColumnProperties/widthType`.
            @frozen public enum WidthTypePayload: String, Codable, Hashable, Sendable, CaseIterable {
                case widthTypeUnspecified = "WIDTH_TYPE_UNSPECIFIED"
                case evenlyDistributed = "EVENLY_DISTRIBUTED"
                case fixedWidth = "FIXED_WIDTH"
            }
            /// The width type of the column.
            ///
            /// - Remark: Generated from `#/components/schemas/TableColumnProperties/widthType`.
            public var widthType: Components.Schemas.TableColumnProperties.WidthTypePayload?
            /// Creates a new `TableColumnProperties`.
            ///
            /// - Parameters:
            ///   - width:
            ///   - widthType: The width type of the column.
            public init(
                width: Components.Schemas.Dimension? = nil,
                widthType: Components.Schemas.TableColumnProperties.WidthTypePayload? = nil
            ) {
                self.width = width
                self.widthType = widthType
            }
            public enum CodingKeys: String, CodingKey {
                case width
                case widthType
            }
        }
        /// A StructuralElement representing a table of contents.
        ///
        /// - Remark: Generated from `#/components/schemas/TableOfContents`.
        public struct TableOfContents: Codable, Hashable, Sendable {
            /// The content of the table of contents.
            ///
            /// - Remark: Generated from `#/components/schemas/TableOfContents/content`.
            public var content: [Components.Schemas.StructuralElement]?
            /// The suggested deletion IDs. If empty, then there are no suggested deletions of this content.
            ///
            /// - Remark: Generated from `#/components/schemas/TableOfContents/suggestedDeletionIds`.
            public var suggestedDeletionIds: [Swift.String]?
            /// The suggested insertion IDs. A TableOfContents may have multiple insertion IDs if it is a nested suggested change. If empty, then this is not a suggested insertion.
            ///
            /// - Remark: Generated from `#/components/schemas/TableOfContents/suggestedInsertionIds`.
            public var suggestedInsertionIds: [Swift.String]?
            /// Creates a new `TableOfContents`.
            ///
            /// - Parameters:
            ///   - content: The content of the table of contents.
            ///   - suggestedDeletionIds: The suggested deletion IDs. If empty, then there are no suggested deletions of this content.
            ///   - suggestedInsertionIds: The suggested insertion IDs. A TableOfContents may have multiple insertion IDs if it is a nested suggested change. If empty, then this is not a suggested insertion.
            public init(
                content: [Components.Schemas.StructuralElement]? = nil,
                suggestedDeletionIds: [Swift.String]? = nil,
                suggestedInsertionIds: [Swift.String]? = nil
            ) {
                self.content = content
                self.suggestedDeletionIds = suggestedDeletionIds
                self.suggestedInsertionIds = suggestedInsertionIds
            }
            public enum CodingKeys: String, CodingKey {
                case content
                case suggestedDeletionIds
                case suggestedInsertionIds
            }
        }
        /// A table range represents a reference to a subset of a table. It's important to note that the cells specified by a table range do not necessarily form a rectangle. For example, let's say we have a 3 x 3 table where all the cells of the last row are merged together. The table looks like this: [ ] A table range with table cell location = (table_start_location, row = 0, column = 0), row span = 3 and column span = 2 specifies the following cells: x x [ x x x ]
        ///
        /// - Remark: Generated from `#/components/schemas/TableRange`.
        public struct TableRange: Codable, Hashable, Sendable {
            /// The column span of the table range.
            ///
            /// - Remark: Generated from `#/components/schemas/TableRange/columnSpan`.
            public var columnSpan: Swift.Int32?
            /// The row span of the table range.
            ///
            /// - Remark: Generated from `#/components/schemas/TableRange/rowSpan`.
            public var rowSpan: Swift.Int32?
            /// - Remark: Generated from `#/components/schemas/TableRange/tableCellLocation`.
            public var tableCellLocation: Components.Schemas.TableCellLocation?
            /// Creates a new `TableRange`.
            ///
            /// - Parameters:
            ///   - columnSpan: The column span of the table range.
            ///   - rowSpan: The row span of the table range.
            ///   - tableCellLocation:
            public init(
                columnSpan: Swift.Int32? = nil,
                rowSpan: Swift.Int32? = nil,
                tableCellLocation: Components.Schemas.TableCellLocation? = nil
            ) {
                self.columnSpan = columnSpan
                self.rowSpan = rowSpan
                self.tableCellLocation = tableCellLocation
            }
            public enum CodingKeys: String, CodingKey {
                case columnSpan
                case rowSpan
                case tableCellLocation
            }
        }
        /// The contents and style of a row in a Table.
        ///
        /// - Remark: Generated from `#/components/schemas/TableRow`.
        public struct TableRow: Codable, Hashable, Sendable {
            /// The zero-based end index of this row, exclusive, in UTF-16 code units.
            ///
            /// - Remark: Generated from `#/components/schemas/TableRow/endIndex`.
            public var endIndex: Swift.Int32?
            /// The zero-based start index of this row, in UTF-16 code units.
            ///
            /// - Remark: Generated from `#/components/schemas/TableRow/startIndex`.
            public var startIndex: Swift.Int32?
            /// The suggested deletion IDs. If empty, then there are no suggested deletions of this content.
            ///
            /// - Remark: Generated from `#/components/schemas/TableRow/suggestedDeletionIds`.
            public var suggestedDeletionIds: [Swift.String]?
            /// The suggested insertion IDs. A TableRow may have multiple insertion IDs if it's a nested suggested change. If empty, then this is not a suggested insertion.
            ///
            /// - Remark: Generated from `#/components/schemas/TableRow/suggestedInsertionIds`.
            public var suggestedInsertionIds: [Swift.String]?
            /// The suggested style changes to this row, keyed by suggestion ID.
            ///
            /// - Remark: Generated from `#/components/schemas/TableRow/suggestedTableRowStyleChanges`.
            public struct SuggestedTableRowStyleChangesPayload: Codable, Hashable, Sendable {
                /// A container of undocumented properties.
                public var additionalProperties: [String: Components.Schemas.SuggestedTableRowStyle]
                /// Creates a new `SuggestedTableRowStyleChangesPayload`.
                ///
                /// - Parameters:
                ///   - additionalProperties: A container of undocumented properties.
                public init(additionalProperties: [String: Components.Schemas.SuggestedTableRowStyle] = .init()) {
                    self.additionalProperties = additionalProperties
                }
                public init(from decoder: any Decoder) throws {
                    additionalProperties = try decoder.decodeAdditionalProperties(knownKeys: [])
                }
                public func encode(to encoder: any Encoder) throws {
                    try encoder.encodeAdditionalProperties(additionalProperties)
                }
            }
            /// The suggested style changes to this row, keyed by suggestion ID.
            ///
            /// - Remark: Generated from `#/components/schemas/TableRow/suggestedTableRowStyleChanges`.
            public var suggestedTableRowStyleChanges: Components.Schemas.TableRow.SuggestedTableRowStyleChangesPayload?
            /// The contents and style of each cell in this row. It's possible for a table to be non-rectangular, so some rows may have a different number of cells than other rows in the same table.
            ///
            /// - Remark: Generated from `#/components/schemas/TableRow/tableCells`.
            public var tableCells: [Components.Schemas.TableCell]?
            /// - Remark: Generated from `#/components/schemas/TableRow/tableRowStyle`.
            public var tableRowStyle: Components.Schemas.TableRowStyle?
            /// Creates a new `TableRow`.
            ///
            /// - Parameters:
            ///   - endIndex: The zero-based end index of this row, exclusive, in UTF-16 code units.
            ///   - startIndex: The zero-based start index of this row, in UTF-16 code units.
            ///   - suggestedDeletionIds: The suggested deletion IDs. If empty, then there are no suggested deletions of this content.
            ///   - suggestedInsertionIds: The suggested insertion IDs. A TableRow may have multiple insertion IDs if it's a nested suggested change. If empty, then this is not a suggested insertion.
            ///   - suggestedTableRowStyleChanges: The suggested style changes to this row, keyed by suggestion ID.
            ///   - tableCells: The contents and style of each cell in this row. It's possible for a table to be non-rectangular, so some rows may have a different number of cells than other rows in the same table.
            ///   - tableRowStyle:
            public init(
                endIndex: Swift.Int32? = nil,
                startIndex: Swift.Int32? = nil,
                suggestedDeletionIds: [Swift.String]? = nil,
                suggestedInsertionIds: [Swift.String]? = nil,
                suggestedTableRowStyleChanges: Components.Schemas.TableRow.SuggestedTableRowStyleChangesPayload? = nil,
                tableCells: [Components.Schemas.TableCell]? = nil,
                tableRowStyle: Components.Schemas.TableRowStyle? = nil
            ) {
                self.endIndex = endIndex
                self.startIndex = startIndex
                self.suggestedDeletionIds = suggestedDeletionIds
                self.suggestedInsertionIds = suggestedInsertionIds
                self.suggestedTableRowStyleChanges = suggestedTableRowStyleChanges
                self.tableCells = tableCells
                self.tableRowStyle = tableRowStyle
            }
            public enum CodingKeys: String, CodingKey {
                case endIndex
                case startIndex
                case suggestedDeletionIds
                case suggestedInsertionIds
                case suggestedTableRowStyleChanges
                case tableCells
                case tableRowStyle
            }
        }
        /// Styles that apply to a table row.
        ///
        /// - Remark: Generated from `#/components/schemas/TableRowStyle`.
        public struct TableRowStyle: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/TableRowStyle/minRowHeight`.
            public var minRowHeight: Components.Schemas.Dimension?
            /// Whether the row cannot overflow across page or column boundaries.
            ///
            /// - Remark: Generated from `#/components/schemas/TableRowStyle/preventOverflow`.
            public var preventOverflow: Swift.Bool?
            /// Whether the row is a table header.
            ///
            /// - Remark: Generated from `#/components/schemas/TableRowStyle/tableHeader`.
            public var tableHeader: Swift.Bool?
            /// Creates a new `TableRowStyle`.
            ///
            /// - Parameters:
            ///   - minRowHeight:
            ///   - preventOverflow: Whether the row cannot overflow across page or column boundaries.
            ///   - tableHeader: Whether the row is a table header.
            public init(
                minRowHeight: Components.Schemas.Dimension? = nil,
                preventOverflow: Swift.Bool? = nil,
                tableHeader: Swift.Bool? = nil
            ) {
                self.minRowHeight = minRowHeight
                self.preventOverflow = preventOverflow
                self.tableHeader = tableHeader
            }
            public enum CodingKeys: String, CodingKey {
                case minRowHeight
                case preventOverflow
                case tableHeader
            }
        }
        /// A mask that indicates which of the fields on the base TableRowStyle have been changed in this suggestion. For any field set to true, there's a new suggested value.
        ///
        /// - Remark: Generated from `#/components/schemas/TableRowStyleSuggestionState`.
        public struct TableRowStyleSuggestionState: Codable, Hashable, Sendable {
            /// Indicates if there was a suggested change to min_row_height.
            ///
            /// - Remark: Generated from `#/components/schemas/TableRowStyleSuggestionState/minRowHeightSuggested`.
            public var minRowHeightSuggested: Swift.Bool?
            /// Creates a new `TableRowStyleSuggestionState`.
            ///
            /// - Parameters:
            ///   - minRowHeightSuggested: Indicates if there was a suggested change to min_row_height.
            public init(minRowHeightSuggested: Swift.Bool? = nil) {
                self.minRowHeightSuggested = minRowHeightSuggested
            }
            public enum CodingKeys: String, CodingKey {
                case minRowHeightSuggested
            }
        }
        /// Styles that apply to a table.
        ///
        /// - Remark: Generated from `#/components/schemas/TableStyle`.
        public struct TableStyle: Codable, Hashable, Sendable {
            /// The properties of each column. Note that in Docs, tables contain rows and rows contain cells, similar to HTML. So the properties for a row can be found on the row's table_row_style.
            ///
            /// - Remark: Generated from `#/components/schemas/TableStyle/tableColumnProperties`.
            public var tableColumnProperties: [Components.Schemas.TableColumnProperties]?
            /// Creates a new `TableStyle`.
            ///
            /// - Parameters:
            ///   - tableColumnProperties: The properties of each column. Note that in Docs, tables contain rows and rows contain cells, similar to HTML. So the properties for a row can be found on the row's table_row_style.
            public init(tableColumnProperties: [Components.Schemas.TableColumnProperties]? = nil) {
                self.tableColumnProperties = tableColumnProperties
            }
            public enum CodingKeys: String, CodingKey {
                case tableColumnProperties
            }
        }
        /// A ParagraphElement that represents a run of text that all has the same styling.
        ///
        /// - Remark: Generated from `#/components/schemas/TextRun`.
        public struct TextRun: Codable, Hashable, Sendable {
            /// The text of this run. Any non-text elements in the run are replaced with the Unicode character U+E907.
            ///
            /// - Remark: Generated from `#/components/schemas/TextRun/content`.
            public var content: Swift.String?
            /// The suggested deletion IDs. If empty, then there are no suggested deletions of this content.
            ///
            /// - Remark: Generated from `#/components/schemas/TextRun/suggestedDeletionIds`.
            public var suggestedDeletionIds: [Swift.String]?
            /// The suggested insertion IDs. A TextRun may have multiple insertion IDs if it's a nested suggested change. If empty, then this is not a suggested insertion.
            ///
            /// - Remark: Generated from `#/components/schemas/TextRun/suggestedInsertionIds`.
            public var suggestedInsertionIds: [Swift.String]?
            /// The suggested text style changes to this run, keyed by suggestion ID.
            ///
            /// - Remark: Generated from `#/components/schemas/TextRun/suggestedTextStyleChanges`.
            public struct SuggestedTextStyleChangesPayload: Codable, Hashable, Sendable {
                /// A container of undocumented properties.
                public var additionalProperties: [String: Components.Schemas.SuggestedTextStyle]
                /// Creates a new `SuggestedTextStyleChangesPayload`.
                ///
                /// - Parameters:
                ///   - additionalProperties: A container of undocumented properties.
                public init(additionalProperties: [String: Components.Schemas.SuggestedTextStyle] = .init()) {
                    self.additionalProperties = additionalProperties
                }
                public init(from decoder: any Decoder) throws {
                    additionalProperties = try decoder.decodeAdditionalProperties(knownKeys: [])
                }
                public func encode(to encoder: any Encoder) throws {
                    try encoder.encodeAdditionalProperties(additionalProperties)
                }
            }
            /// The suggested text style changes to this run, keyed by suggestion ID.
            ///
            /// - Remark: Generated from `#/components/schemas/TextRun/suggestedTextStyleChanges`.
            public var suggestedTextStyleChanges: Components.Schemas.TextRun.SuggestedTextStyleChangesPayload?
            /// - Remark: Generated from `#/components/schemas/TextRun/textStyle`.
            public var textStyle: Components.Schemas.TextStyle?
            /// Creates a new `TextRun`.
            ///
            /// - Parameters:
            ///   - content: The text of this run. Any non-text elements in the run are replaced with the Unicode character U+E907.
            ///   - suggestedDeletionIds: The suggested deletion IDs. If empty, then there are no suggested deletions of this content.
            ///   - suggestedInsertionIds: The suggested insertion IDs. A TextRun may have multiple insertion IDs if it's a nested suggested change. If empty, then this is not a suggested insertion.
            ///   - suggestedTextStyleChanges: The suggested text style changes to this run, keyed by suggestion ID.
            ///   - textStyle:
            public init(
                content: Swift.String? = nil,
                suggestedDeletionIds: [Swift.String]? = nil,
                suggestedInsertionIds: [Swift.String]? = nil,
                suggestedTextStyleChanges: Components.Schemas.TextRun.SuggestedTextStyleChangesPayload? = nil,
                textStyle: Components.Schemas.TextStyle? = nil
            ) {
                self.content = content
                self.suggestedDeletionIds = suggestedDeletionIds
                self.suggestedInsertionIds = suggestedInsertionIds
                self.suggestedTextStyleChanges = suggestedTextStyleChanges
                self.textStyle = textStyle
            }
            public enum CodingKeys: String, CodingKey {
                case content
                case suggestedDeletionIds
                case suggestedInsertionIds
                case suggestedTextStyleChanges
                case textStyle
            }
        }
        /// Represents the styling that can be applied to text. Inherited text styles are represented as unset fields in this message. A text style's parent depends on where the text style is defined: * The TextStyle of text in a Paragraph inherits from the paragraph's corresponding named style type. * The TextStyle on a named style inherits from the normal text named style. * The TextStyle of the normal text named style inherits from the default text style in the Docs editor. * The TextStyle on a Paragraph element that's contained in a table may inherit its text style from the table style. If the text style does not inherit from a parent, unsetting fields will revert the style to a value matching the defaults in the Docs editor.
        ///
        /// - Remark: Generated from `#/components/schemas/TextStyle`.
        public struct TextStyle: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/TextStyle/backgroundColor`.
            public var backgroundColor: Components.Schemas.OptionalColor?
            /// The text's vertical offset from its normal position. Text with `SUPERSCRIPT` or `SUBSCRIPT` baseline offsets is automatically rendered in a smaller font size, computed based on the `font_size` field. Changes in this field don't affect the `font_size`.
            ///
            /// - Remark: Generated from `#/components/schemas/TextStyle/baselineOffset`.
            @frozen public enum BaselineOffsetPayload: String, Codable, Hashable, Sendable, CaseIterable {
                case baselineOffsetUnspecified = "BASELINE_OFFSET_UNSPECIFIED"
                case none = "NONE"
                case superscript = "SUPERSCRIPT"
                case _subscript = "SUBSCRIPT"
            }
            /// The text's vertical offset from its normal position. Text with `SUPERSCRIPT` or `SUBSCRIPT` baseline offsets is automatically rendered in a smaller font size, computed based on the `font_size` field. Changes in this field don't affect the `font_size`.
            ///
            /// - Remark: Generated from `#/components/schemas/TextStyle/baselineOffset`.
            public var baselineOffset: Components.Schemas.TextStyle.BaselineOffsetPayload?
            /// Whether or not the text is rendered as bold.
            ///
            /// - Remark: Generated from `#/components/schemas/TextStyle/bold`.
            public var bold: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/TextStyle/fontSize`.
            public var fontSize: Components.Schemas.Dimension?
            /// - Remark: Generated from `#/components/schemas/TextStyle/foregroundColor`.
            public var foregroundColor: Components.Schemas.OptionalColor?
            /// Whether or not the text is italicized.
            ///
            /// - Remark: Generated from `#/components/schemas/TextStyle/italic`.
            public var italic: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/TextStyle/link`.
            public var link: Components.Schemas.Link?
            /// Whether or not the text is in small capital letters.
            ///
            /// - Remark: Generated from `#/components/schemas/TextStyle/smallCaps`.
            public var smallCaps: Swift.Bool?
            /// Whether or not the text is struck through.
            ///
            /// - Remark: Generated from `#/components/schemas/TextStyle/strikethrough`.
            public var strikethrough: Swift.Bool?
            /// Whether or not the text is underlined.
            ///
            /// - Remark: Generated from `#/components/schemas/TextStyle/underline`.
            public var underline: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/TextStyle/weightedFontFamily`.
            public var weightedFontFamily: Components.Schemas.WeightedFontFamily?
            /// Creates a new `TextStyle`.
            ///
            /// - Parameters:
            ///   - backgroundColor:
            ///   - baselineOffset: The text's vertical offset from its normal position. Text with `SUPERSCRIPT` or `SUBSCRIPT` baseline offsets is automatically rendered in a smaller font size, computed based on the `font_size` field. Changes in this field don't affect the `font_size`.
            ///   - bold: Whether or not the text is rendered as bold.
            ///   - fontSize:
            ///   - foregroundColor:
            ///   - italic: Whether or not the text is italicized.
            ///   - link:
            ///   - smallCaps: Whether or not the text is in small capital letters.
            ///   - strikethrough: Whether or not the text is struck through.
            ///   - underline: Whether or not the text is underlined.
            ///   - weightedFontFamily:
            public init(
                backgroundColor: Components.Schemas.OptionalColor? = nil,
                baselineOffset: Components.Schemas.TextStyle.BaselineOffsetPayload? = nil,
                bold: Swift.Bool? = nil,
                fontSize: Components.Schemas.Dimension? = nil,
                foregroundColor: Components.Schemas.OptionalColor? = nil,
                italic: Swift.Bool? = nil,
                link: Components.Schemas.Link? = nil,
                smallCaps: Swift.Bool? = nil,
                strikethrough: Swift.Bool? = nil,
                underline: Swift.Bool? = nil,
                weightedFontFamily: Components.Schemas.WeightedFontFamily? = nil
            ) {
                self.backgroundColor = backgroundColor
                self.baselineOffset = baselineOffset
                self.bold = bold
                self.fontSize = fontSize
                self.foregroundColor = foregroundColor
                self.italic = italic
                self.link = link
                self.smallCaps = smallCaps
                self.strikethrough = strikethrough
                self.underline = underline
                self.weightedFontFamily = weightedFontFamily
            }
            public enum CodingKeys: String, CodingKey {
                case backgroundColor
                case baselineOffset
                case bold
                case fontSize
                case foregroundColor
                case italic
                case link
                case smallCaps
                case strikethrough
                case underline
                case weightedFontFamily
            }
        }
        /// A mask that indicates which of the fields on the base TextStyle have been changed in this suggestion. For any field set to true, there's a new suggested value.
        ///
        /// - Remark: Generated from `#/components/schemas/TextStyleSuggestionState`.
        public struct TextStyleSuggestionState: Codable, Hashable, Sendable {
            /// Indicates if there was a suggested change to background_color.
            ///
            /// - Remark: Generated from `#/components/schemas/TextStyleSuggestionState/backgroundColorSuggested`.
            public var backgroundColorSuggested: Swift.Bool?
            /// Indicates if there was a suggested change to baseline_offset.
            ///
            /// - Remark: Generated from `#/components/schemas/TextStyleSuggestionState/baselineOffsetSuggested`.
            public var baselineOffsetSuggested: Swift.Bool?
            /// Indicates if there was a suggested change to bold.
            ///
            /// - Remark: Generated from `#/components/schemas/TextStyleSuggestionState/boldSuggested`.
            public var boldSuggested: Swift.Bool?
            /// Indicates if there was a suggested change to font_size.
            ///
            /// - Remark: Generated from `#/components/schemas/TextStyleSuggestionState/fontSizeSuggested`.
            public var fontSizeSuggested: Swift.Bool?
            /// Indicates if there was a suggested change to foreground_color.
            ///
            /// - Remark: Generated from `#/components/schemas/TextStyleSuggestionState/foregroundColorSuggested`.
            public var foregroundColorSuggested: Swift.Bool?
            /// Indicates if there was a suggested change to italic.
            ///
            /// - Remark: Generated from `#/components/schemas/TextStyleSuggestionState/italicSuggested`.
            public var italicSuggested: Swift.Bool?
            /// Indicates if there was a suggested change to link.
            ///
            /// - Remark: Generated from `#/components/schemas/TextStyleSuggestionState/linkSuggested`.
            public var linkSuggested: Swift.Bool?
            /// Indicates if there was a suggested change to small_caps.
            ///
            /// - Remark: Generated from `#/components/schemas/TextStyleSuggestionState/smallCapsSuggested`.
            public var smallCapsSuggested: Swift.Bool?
            /// Indicates if there was a suggested change to strikethrough.
            ///
            /// - Remark: Generated from `#/components/schemas/TextStyleSuggestionState/strikethroughSuggested`.
            public var strikethroughSuggested: Swift.Bool?
            /// Indicates if there was a suggested change to underline.
            ///
            /// - Remark: Generated from `#/components/schemas/TextStyleSuggestionState/underlineSuggested`.
            public var underlineSuggested: Swift.Bool?
            /// Indicates if there was a suggested change to weighted_font_family.
            ///
            /// - Remark: Generated from `#/components/schemas/TextStyleSuggestionState/weightedFontFamilySuggested`.
            public var weightedFontFamilySuggested: Swift.Bool?
            /// Creates a new `TextStyleSuggestionState`.
            ///
            /// - Parameters:
            ///   - backgroundColorSuggested: Indicates if there was a suggested change to background_color.
            ///   - baselineOffsetSuggested: Indicates if there was a suggested change to baseline_offset.
            ///   - boldSuggested: Indicates if there was a suggested change to bold.
            ///   - fontSizeSuggested: Indicates if there was a suggested change to font_size.
            ///   - foregroundColorSuggested: Indicates if there was a suggested change to foreground_color.
            ///   - italicSuggested: Indicates if there was a suggested change to italic.
            ///   - linkSuggested: Indicates if there was a suggested change to link.
            ///   - smallCapsSuggested: Indicates if there was a suggested change to small_caps.
            ///   - strikethroughSuggested: Indicates if there was a suggested change to strikethrough.
            ///   - underlineSuggested: Indicates if there was a suggested change to underline.
            ///   - weightedFontFamilySuggested: Indicates if there was a suggested change to weighted_font_family.
            public init(
                backgroundColorSuggested: Swift.Bool? = nil,
                baselineOffsetSuggested: Swift.Bool? = nil,
                boldSuggested: Swift.Bool? = nil,
                fontSizeSuggested: Swift.Bool? = nil,
                foregroundColorSuggested: Swift.Bool? = nil,
                italicSuggested: Swift.Bool? = nil,
                linkSuggested: Swift.Bool? = nil,
                smallCapsSuggested: Swift.Bool? = nil,
                strikethroughSuggested: Swift.Bool? = nil,
                underlineSuggested: Swift.Bool? = nil,
                weightedFontFamilySuggested: Swift.Bool? = nil
            ) {
                self.backgroundColorSuggested = backgroundColorSuggested
                self.baselineOffsetSuggested = baselineOffsetSuggested
                self.boldSuggested = boldSuggested
                self.fontSizeSuggested = fontSizeSuggested
                self.foregroundColorSuggested = foregroundColorSuggested
                self.italicSuggested = italicSuggested
                self.linkSuggested = linkSuggested
                self.smallCapsSuggested = smallCapsSuggested
                self.strikethroughSuggested = strikethroughSuggested
                self.underlineSuggested = underlineSuggested
                self.weightedFontFamilySuggested = weightedFontFamilySuggested
            }
            public enum CodingKeys: String, CodingKey {
                case backgroundColorSuggested
                case baselineOffsetSuggested
                case boldSuggested
                case fontSizeSuggested
                case foregroundColorSuggested
                case italicSuggested
                case linkSuggested
                case smallCapsSuggested
                case strikethroughSuggested
                case underlineSuggested
                case weightedFontFamilySuggested
            }
        }
        /// Unmerges cells in a Table.
        ///
        /// - Remark: Generated from `#/components/schemas/UnmergeTableCellsRequest`.
        public struct UnmergeTableCellsRequest: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/UnmergeTableCellsRequest/tableRange`.
            public var tableRange: Components.Schemas.TableRange?
            /// Creates a new `UnmergeTableCellsRequest`.
            ///
            /// - Parameters:
            ///   - tableRange:
            public init(tableRange: Components.Schemas.TableRange? = nil) {
                self.tableRange = tableRange
            }
            public enum CodingKeys: String, CodingKey {
                case tableRange
            }
        }
        /// Updates the DocumentStyle.
        ///
        /// - Remark: Generated from `#/components/schemas/UpdateDocumentStyleRequest`.
        public struct UpdateDocumentStyleRequest: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/UpdateDocumentStyleRequest/documentStyle`.
            public var documentStyle: Components.Schemas.DocumentStyle?
            /// The fields that should be updated. At least one field must be specified. The root `document_style` is implied and should not be specified. A single `"*"` can be used as short-hand for listing every field. For example to update the background, set `fields` to `"background"`.
            ///
            /// - Remark: Generated from `#/components/schemas/UpdateDocumentStyleRequest/fields`.
            public var fields: Swift.String?
            /// Creates a new `UpdateDocumentStyleRequest`.
            ///
            /// - Parameters:
            ///   - documentStyle:
            ///   - fields: The fields that should be updated. At least one field must be specified. The root `document_style` is implied and should not be specified. A single `"*"` can be used as short-hand for listing every field. For example to update the background, set `fields` to `"background"`.
            public init(
                documentStyle: Components.Schemas.DocumentStyle? = nil,
                fields: Swift.String? = nil
            ) {
                self.documentStyle = documentStyle
                self.fields = fields
            }
            public enum CodingKeys: String, CodingKey {
                case documentStyle
                case fields
            }
        }
        /// Update the styling of all paragraphs that overlap with the given range.
        ///
        /// - Remark: Generated from `#/components/schemas/UpdateParagraphStyleRequest`.
        public struct UpdateParagraphStyleRequest: Codable, Hashable, Sendable {
            /// The fields that should be updated. At least one field must be specified. The root `paragraph_style` is implied and should not be specified. A single `"*"` can be used as short-hand for listing every field. For example, to update the paragraph style's alignment property, set `fields` to `"alignment"`. To reset a property to its default value, include its field name in the field mask but leave the field itself unset.
            ///
            /// - Remark: Generated from `#/components/schemas/UpdateParagraphStyleRequest/fields`.
            public var fields: Swift.String?
            /// - Remark: Generated from `#/components/schemas/UpdateParagraphStyleRequest/paragraphStyle`.
            public var paragraphStyle: Components.Schemas.ParagraphStyle?
            /// - Remark: Generated from `#/components/schemas/UpdateParagraphStyleRequest/range`.
            public var range: Components.Schemas.Range?
            /// Creates a new `UpdateParagraphStyleRequest`.
            ///
            /// - Parameters:
            ///   - fields: The fields that should be updated. At least one field must be specified. The root `paragraph_style` is implied and should not be specified. A single `"*"` can be used as short-hand for listing every field. For example, to update the paragraph style's alignment property, set `fields` to `"alignment"`. To reset a property to its default value, include its field name in the field mask but leave the field itself unset.
            ///   - paragraphStyle:
            ///   - range:
            public init(
                fields: Swift.String? = nil,
                paragraphStyle: Components.Schemas.ParagraphStyle? = nil,
                range: Components.Schemas.Range? = nil
            ) {
                self.fields = fields
                self.paragraphStyle = paragraphStyle
                self.range = range
            }
            public enum CodingKeys: String, CodingKey {
                case fields
                case paragraphStyle
                case range
            }
        }
        /// Updates the SectionStyle.
        ///
        /// - Remark: Generated from `#/components/schemas/UpdateSectionStyleRequest`.
        public struct UpdateSectionStyleRequest: Codable, Hashable, Sendable {
            /// The fields that should be updated. At least one field must be specified. The root `section_style` is implied and must not be specified. A single `"*"` can be used as short-hand for listing every field. For example to update the left margin, set `fields` to `"margin_left"`.
            ///
            /// - Remark: Generated from `#/components/schemas/UpdateSectionStyleRequest/fields`.
            public var fields: Swift.String?
            /// - Remark: Generated from `#/components/schemas/UpdateSectionStyleRequest/range`.
            public var range: Components.Schemas.Range?
            /// - Remark: Generated from `#/components/schemas/UpdateSectionStyleRequest/sectionStyle`.
            public var sectionStyle: Components.Schemas.SectionStyle?
            /// Creates a new `UpdateSectionStyleRequest`.
            ///
            /// - Parameters:
            ///   - fields: The fields that should be updated. At least one field must be specified. The root `section_style` is implied and must not be specified. A single `"*"` can be used as short-hand for listing every field. For example to update the left margin, set `fields` to `"margin_left"`.
            ///   - range:
            ///   - sectionStyle:
            public init(
                fields: Swift.String? = nil,
                range: Components.Schemas.Range? = nil,
                sectionStyle: Components.Schemas.SectionStyle? = nil
            ) {
                self.fields = fields
                self.range = range
                self.sectionStyle = sectionStyle
            }
            public enum CodingKeys: String, CodingKey {
                case fields
                case range
                case sectionStyle
            }
        }
        /// Updates the style of a range of table cells.
        ///
        /// - Remark: Generated from `#/components/schemas/UpdateTableCellStyleRequest`.
        public struct UpdateTableCellStyleRequest: Codable, Hashable, Sendable {
            /// The fields that should be updated. At least one field must be specified. The root `tableCellStyle` is implied and should not be specified. A single `"*"` can be used as short-hand for listing every field. For example to update the table cell background color, set `fields` to `"backgroundColor"`. To reset a property to its default value, include its field name in the field mask but leave the field itself unset.
            ///
            /// - Remark: Generated from `#/components/schemas/UpdateTableCellStyleRequest/fields`.
            public var fields: Swift.String?
            /// - Remark: Generated from `#/components/schemas/UpdateTableCellStyleRequest/tableCellStyle`.
            public var tableCellStyle: Components.Schemas.TableCellStyle?
            /// - Remark: Generated from `#/components/schemas/UpdateTableCellStyleRequest/tableRange`.
            public var tableRange: Components.Schemas.TableRange?
            /// - Remark: Generated from `#/components/schemas/UpdateTableCellStyleRequest/tableStartLocation`.
            public var tableStartLocation: Components.Schemas.Location?
            /// Creates a new `UpdateTableCellStyleRequest`.
            ///
            /// - Parameters:
            ///   - fields: The fields that should be updated. At least one field must be specified. The root `tableCellStyle` is implied and should not be specified. A single `"*"` can be used as short-hand for listing every field. For example to update the table cell background color, set `fields` to `"backgroundColor"`. To reset a property to its default value, include its field name in the field mask but leave the field itself unset.
            ///   - tableCellStyle:
            ///   - tableRange:
            ///   - tableStartLocation:
            public init(
                fields: Swift.String? = nil,
                tableCellStyle: Components.Schemas.TableCellStyle? = nil,
                tableRange: Components.Schemas.TableRange? = nil,
                tableStartLocation: Components.Schemas.Location? = nil
            ) {
                self.fields = fields
                self.tableCellStyle = tableCellStyle
                self.tableRange = tableRange
                self.tableStartLocation = tableStartLocation
            }
            public enum CodingKeys: String, CodingKey {
                case fields
                case tableCellStyle
                case tableRange
                case tableStartLocation
            }
        }
        /// Updates the TableColumnProperties of columns in a table.
        ///
        /// - Remark: Generated from `#/components/schemas/UpdateTableColumnPropertiesRequest`.
        public struct UpdateTableColumnPropertiesRequest: Codable, Hashable, Sendable {
            /// The list of zero-based column indices whose property should be updated. If no indices are specified, all columns will be updated.
            ///
            /// - Remark: Generated from `#/components/schemas/UpdateTableColumnPropertiesRequest/columnIndices`.
            public var columnIndices: [Swift.Int32]?
            /// The fields that should be updated. At least one field must be specified. The root `tableColumnProperties` is implied and should not be specified. A single `"*"` can be used as short-hand for listing every field. For example to update the column width, set `fields` to `"width"`.
            ///
            /// - Remark: Generated from `#/components/schemas/UpdateTableColumnPropertiesRequest/fields`.
            public var fields: Swift.String?
            /// - Remark: Generated from `#/components/schemas/UpdateTableColumnPropertiesRequest/tableColumnProperties`.
            public var tableColumnProperties: Components.Schemas.TableColumnProperties?
            /// - Remark: Generated from `#/components/schemas/UpdateTableColumnPropertiesRequest/tableStartLocation`.
            public var tableStartLocation: Components.Schemas.Location?
            /// Creates a new `UpdateTableColumnPropertiesRequest`.
            ///
            /// - Parameters:
            ///   - columnIndices: The list of zero-based column indices whose property should be updated. If no indices are specified, all columns will be updated.
            ///   - fields: The fields that should be updated. At least one field must be specified. The root `tableColumnProperties` is implied and should not be specified. A single `"*"` can be used as short-hand for listing every field. For example to update the column width, set `fields` to `"width"`.
            ///   - tableColumnProperties:
            ///   - tableStartLocation:
            public init(
                columnIndices: [Swift.Int32]? = nil,
                fields: Swift.String? = nil,
                tableColumnProperties: Components.Schemas.TableColumnProperties? = nil,
                tableStartLocation: Components.Schemas.Location? = nil
            ) {
                self.columnIndices = columnIndices
                self.fields = fields
                self.tableColumnProperties = tableColumnProperties
                self.tableStartLocation = tableStartLocation
            }
            public enum CodingKeys: String, CodingKey {
                case columnIndices
                case fields
                case tableColumnProperties
                case tableStartLocation
            }
        }
        /// Updates the TableRowStyle of rows in a table.
        ///
        /// - Remark: Generated from `#/components/schemas/UpdateTableRowStyleRequest`.
        public struct UpdateTableRowStyleRequest: Codable, Hashable, Sendable {
            /// The fields that should be updated. At least one field must be specified. The root `tableRowStyle` is implied and should not be specified. A single `"*"` can be used as short-hand for listing every field. For example to update the minimum row height, set `fields` to `"min_row_height"`.
            ///
            /// - Remark: Generated from `#/components/schemas/UpdateTableRowStyleRequest/fields`.
            public var fields: Swift.String?
            /// The list of zero-based row indices whose style should be updated. If no indices are specified, all rows will be updated.
            ///
            /// - Remark: Generated from `#/components/schemas/UpdateTableRowStyleRequest/rowIndices`.
            public var rowIndices: [Swift.Int32]?
            /// - Remark: Generated from `#/components/schemas/UpdateTableRowStyleRequest/tableRowStyle`.
            public var tableRowStyle: Components.Schemas.TableRowStyle?
            /// - Remark: Generated from `#/components/schemas/UpdateTableRowStyleRequest/tableStartLocation`.
            public var tableStartLocation: Components.Schemas.Location?
            /// Creates a new `UpdateTableRowStyleRequest`.
            ///
            /// - Parameters:
            ///   - fields: The fields that should be updated. At least one field must be specified. The root `tableRowStyle` is implied and should not be specified. A single `"*"` can be used as short-hand for listing every field. For example to update the minimum row height, set `fields` to `"min_row_height"`.
            ///   - rowIndices: The list of zero-based row indices whose style should be updated. If no indices are specified, all rows will be updated.
            ///   - tableRowStyle:
            ///   - tableStartLocation:
            public init(
                fields: Swift.String? = nil,
                rowIndices: [Swift.Int32]? = nil,
                tableRowStyle: Components.Schemas.TableRowStyle? = nil,
                tableStartLocation: Components.Schemas.Location? = nil
            ) {
                self.fields = fields
                self.rowIndices = rowIndices
                self.tableRowStyle = tableRowStyle
                self.tableStartLocation = tableStartLocation
            }
            public enum CodingKeys: String, CodingKey {
                case fields
                case rowIndices
                case tableRowStyle
                case tableStartLocation
            }
        }
        /// Update the styling of text.
        ///
        /// - Remark: Generated from `#/components/schemas/UpdateTextStyleRequest`.
        public struct UpdateTextStyleRequest: Codable, Hashable, Sendable {
            /// The fields that should be updated. At least one field must be specified. The root `text_style` is implied and should not be specified. A single `"*"` can be used as short-hand for listing every field. For example, to update the text style to bold, set `fields` to `"bold"`. To reset a property to its default value, include its field name in the field mask but leave the field itself unset.
            ///
            /// - Remark: Generated from `#/components/schemas/UpdateTextStyleRequest/fields`.
            public var fields: Swift.String?
            /// - Remark: Generated from `#/components/schemas/UpdateTextStyleRequest/range`.
            public var range: Components.Schemas.Range?
            /// - Remark: Generated from `#/components/schemas/UpdateTextStyleRequest/textStyle`.
            public var textStyle: Components.Schemas.TextStyle?
            /// Creates a new `UpdateTextStyleRequest`.
            ///
            /// - Parameters:
            ///   - fields: The fields that should be updated. At least one field must be specified. The root `text_style` is implied and should not be specified. A single `"*"` can be used as short-hand for listing every field. For example, to update the text style to bold, set `fields` to `"bold"`. To reset a property to its default value, include its field name in the field mask but leave the field itself unset.
            ///   - range:
            ///   - textStyle:
            public init(
                fields: Swift.String? = nil,
                range: Components.Schemas.Range? = nil,
                textStyle: Components.Schemas.TextStyle? = nil
            ) {
                self.fields = fields
                self.range = range
                self.textStyle = textStyle
            }
            public enum CodingKeys: String, CodingKey {
                case fields
                case range
                case textStyle
            }
        }
        /// Represents a font family and weight of text.
        ///
        /// - Remark: Generated from `#/components/schemas/WeightedFontFamily`.
        public struct WeightedFontFamily: Codable, Hashable, Sendable {
            /// The font family of the text. The font family can be any font from the Font menu in Docs or from [Google Fonts] (https://fonts.google.com/). If the font name is unrecognized, the text is rendered in `Arial`.
            ///
            /// - Remark: Generated from `#/components/schemas/WeightedFontFamily/fontFamily`.
            public var fontFamily: Swift.String?
            /// The weight of the font. This field can have any value that's a multiple of `100` between `100` and `900`, inclusive. This range corresponds to the numerical values described in the CSS 2.1 Specification, [section 15.6](https://www.w3.org/TR/CSS21/fonts.html#font-boldness), with non-numerical values disallowed. The default value is `400` ("normal"). The font weight makes up just one component of the rendered font weight. A combination of the `weight` and the text style's resolved `bold` value determine the rendered weight, after accounting for inheritance: * If the text is bold and the weight is less than `400`, the rendered weight is 400. * If the text is bold and the weight is greater than or equal to `400` but is less than `700`, the rendered weight is `700`. * If the weight is greater than or equal to `700`, the rendered weight is equal to the weight. * If the text is not bold, the rendered weight is equal to the weight.
            ///
            /// - Remark: Generated from `#/components/schemas/WeightedFontFamily/weight`.
            public var weight: Swift.Int32?
            /// Creates a new `WeightedFontFamily`.
            ///
            /// - Parameters:
            ///   - fontFamily: The font family of the text. The font family can be any font from the Font menu in Docs or from [Google Fonts] (https://fonts.google.com/). If the font name is unrecognized, the text is rendered in `Arial`.
            ///   - weight: The weight of the font. This field can have any value that's a multiple of `100` between `100` and `900`, inclusive. This range corresponds to the numerical values described in the CSS 2.1 Specification, [section 15.6](https://www.w3.org/TR/CSS21/fonts.html#font-boldness), with non-numerical values disallowed. The default value is `400` ("normal"). The font weight makes up just one component of the rendered font weight. A combination of the `weight` and the text style's resolved `bold` value determine the rendered weight, after accounting for inheritance: * If the text is bold and the weight is less than `400`, the rendered weight is 400. * If the text is bold and the weight is greater than or equal to `400` but is less than `700`, the rendered weight is `700`. * If the weight is greater than or equal to `700`, the rendered weight is equal to the weight. * If the text is not bold, the rendered weight is equal to the weight.
            public init(
                fontFamily: Swift.String? = nil,
                weight: Swift.Int32? = nil
            ) {
                self.fontFamily = fontFamily
                self.weight = weight
            }
            public enum CodingKeys: String, CodingKey {
                case fontFamily
                case weight
            }
        }
        /// Provides control over how write requests are executed.
        ///
        /// - Remark: Generated from `#/components/schemas/WriteControl`.
        public struct WriteControl: Codable, Hashable, Sendable {
            /// The optional revision ID of the document the write request is applied to. If this is not the latest revision of the document, the request is not processed and returns a 400 bad request error. When a required revision ID is returned in a response, it indicates the revision ID of the document after the request was applied.
            ///
            /// - Remark: Generated from `#/components/schemas/WriteControl/requiredRevisionId`.
            public var requiredRevisionId: Swift.String?
            /// The optional target revision ID of the document the write request is applied to. If collaborator changes have occurred after the document was read using the API, the changes produced by this write request are applied against the collaborator changes. This results in a new revision of the document that incorporates both the collaborator changes and the changes in the request, with the Docs server resolving conflicting changes. When using target revision ID, the API client can be thought of as another collaborator of the document. The target revision ID can only be used to write to recent versions of a document. If the target revision is too far behind the latest revision, the request is not processed and returns a 400 bad request error. The request should be tried again after retrieving the latest version of the document. Usually a revision ID remains valid for use as a target revision for several minutes after it's read, but for frequently edited documents this window might be shorter.
            ///
            /// - Remark: Generated from `#/components/schemas/WriteControl/targetRevisionId`.
            public var targetRevisionId: Swift.String?
            /// Creates a new `WriteControl`.
            ///
            /// - Parameters:
            ///   - requiredRevisionId: The optional revision ID of the document the write request is applied to. If this is not the latest revision of the document, the request is not processed and returns a 400 bad request error. When a required revision ID is returned in a response, it indicates the revision ID of the document after the request was applied.
            ///   - targetRevisionId: The optional target revision ID of the document the write request is applied to. If collaborator changes have occurred after the document was read using the API, the changes produced by this write request are applied against the collaborator changes. This results in a new revision of the document that incorporates both the collaborator changes and the changes in the request, with the Docs server resolving conflicting changes. When using target revision ID, the API client can be thought of as another collaborator of the document. The target revision ID can only be used to write to recent versions of a document. If the target revision is too far behind the latest revision, the request is not processed and returns a 400 bad request error. The request should be tried again after retrieving the latest version of the document. Usually a revision ID remains valid for use as a target revision for several minutes after it's read, but for frequently edited documents this window might be shorter.
            public init(
                requiredRevisionId: Swift.String? = nil,
                targetRevisionId: Swift.String? = nil
            ) {
                self.requiredRevisionId = requiredRevisionId
                self.targetRevisionId = targetRevisionId
            }
            public enum CodingKeys: String, CodingKey {
                case requiredRevisionId
                case targetRevisionId
            }
        }
    }
    /// Types generated from the `#/components/parameters` section of the OpenAPI document.
    public enum Parameters {
        /// V1 error format.
        ///
        /// - Remark: Generated from `#/components/parameters/_.xgafv`.
        @frozen public enum __period_xgafv: String, Codable, Hashable, Sendable, CaseIterable {
            case _1 = "1"
            case _2 = "2"
        }
        /// OAuth access token.
        ///
        /// - Remark: Generated from `#/components/parameters/access_token`.
        public typealias AccessToken = Swift.String
        /// Data format for response.
        ///
        /// - Remark: Generated from `#/components/parameters/alt`.
        @frozen public enum Alt: String, Codable, Hashable, Sendable, CaseIterable {
            case json = "json"
            case media = "media"
            case proto = "proto"
        }
        /// JSONP
        ///
        /// - Remark: Generated from `#/components/parameters/callback`.
        public typealias Callback = Swift.String
        /// Selector specifying which fields to include in a partial response.
        ///
        /// - Remark: Generated from `#/components/parameters/fields`.
        public typealias Fields = Swift.String
        /// API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
        ///
        /// - Remark: Generated from `#/components/parameters/key`.
        public typealias Key = Swift.String
        /// OAuth 2.0 token for the current user.
        ///
        /// - Remark: Generated from `#/components/parameters/oauth_token`.
        public typealias OauthToken = Swift.String
        /// Returns response with indentations and line breaks.
        ///
        /// - Remark: Generated from `#/components/parameters/prettyPrint`.
        public typealias PrettyPrint = Swift.Bool
        /// Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
        ///
        /// - Remark: Generated from `#/components/parameters/quotaUser`.
        public typealias QuotaUser = Swift.String
        /// Legacy upload protocol for media (e.g. "media", "multipart").
        ///
        /// - Remark: Generated from `#/components/parameters/uploadType`.
        public typealias UploadType = Swift.String
        /// Upload protocol for media (e.g. "raw", "multipart").
        ///
        /// - Remark: Generated from `#/components/parameters/upload_protocol`.
        public typealias UploadProtocol = Swift.String
    }
    /// Types generated from the `#/components/requestBodies` section of the OpenAPI document.
    public enum RequestBodies {}
    /// Types generated from the `#/components/responses` section of the OpenAPI document.
    public enum Responses {}
    /// Types generated from the `#/components/headers` section of the OpenAPI document.
    public enum Headers {}
}

/// API operations, with input and output types, generated from `#/paths` in the OpenAPI document.
public enum Operations {
    /// Creates a blank document using the title given in the request. Other fields in the request, including any provided content, are ignored. Returns the created document.
    ///
    /// - Remark: HTTP `POST /v1/documents`.
    /// - Remark: Generated from `#/paths//v1/documents/post(docs.documents.create)`.
    public enum Docs_documents_create {
        public static let id: Swift.String = "docs.documents.create"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/v1/documents/POST/query`.
            public struct Query: Sendable, Hashable {
                /// - Remark: Generated from `#/components/parameters/_.xgafv`.
                @frozen public enum __period_xgafv: String, Codable, Hashable, Sendable, CaseIterable {
                    case _1 = "1"
                    case _2 = "2"
                }
                /// V1 error format.
                ///
                /// - Remark: Generated from `#/paths/v1/documents/POST/query/$.xgafv`.
                public var _dollar__xgafv: Components.Parameters.__period_xgafv?
                /// OAuth access token.
                ///
                /// - Remark: Generated from `#/paths/v1/documents/POST/query/access_token`.
                public var accessToken: Components.Parameters.AccessToken?
                /// - Remark: Generated from `#/components/parameters/alt`.
                @frozen public enum Alt: String, Codable, Hashable, Sendable, CaseIterable {
                    case json = "json"
                    case media = "media"
                    case proto = "proto"
                }
                /// Data format for response.
                ///
                /// - Remark: Generated from `#/paths/v1/documents/POST/query/alt`.
                public var alt: Components.Parameters.Alt?
                /// JSONP
                ///
                /// - Remark: Generated from `#/paths/v1/documents/POST/query/callback`.
                public var callback: Components.Parameters.Callback?
                /// Selector specifying which fields to include in a partial response.
                ///
                /// - Remark: Generated from `#/paths/v1/documents/POST/query/fields`.
                public var fields: Components.Parameters.Fields?
                /// API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
                ///
                /// - Remark: Generated from `#/paths/v1/documents/POST/query/key`.
                public var key: Components.Parameters.Key?
                /// OAuth 2.0 token for the current user.
                ///
                /// - Remark: Generated from `#/paths/v1/documents/POST/query/oauth_token`.
                public var oauthToken: Components.Parameters.OauthToken?
                /// Returns response with indentations and line breaks.
                ///
                /// - Remark: Generated from `#/paths/v1/documents/POST/query/prettyPrint`.
                public var prettyPrint: Components.Parameters.PrettyPrint?
                /// Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
                ///
                /// - Remark: Generated from `#/paths/v1/documents/POST/query/quotaUser`.
                public var quotaUser: Components.Parameters.QuotaUser?
                /// Upload protocol for media (e.g. "raw", "multipart").
                ///
                /// - Remark: Generated from `#/paths/v1/documents/POST/query/upload_protocol`.
                public var uploadProtocol: Components.Parameters.UploadProtocol?
                /// Legacy upload protocol for media (e.g. "media", "multipart").
                ///
                /// - Remark: Generated from `#/paths/v1/documents/POST/query/uploadType`.
                public var uploadType: Components.Parameters.UploadType?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - _dollar__xgafv: V1 error format.
                ///   - accessToken: OAuth access token.
                ///   - alt: Data format for response.
                ///   - callback: JSONP
                ///   - fields: Selector specifying which fields to include in a partial response.
                ///   - key: API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
                ///   - oauthToken: OAuth 2.0 token for the current user.
                ///   - prettyPrint: Returns response with indentations and line breaks.
                ///   - quotaUser: Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
                ///   - uploadProtocol: Upload protocol for media (e.g. "raw", "multipart").
                ///   - uploadType: Legacy upload protocol for media (e.g. "media", "multipart").
                public init(
                    _dollar__xgafv: Components.Parameters.__period_xgafv? = nil,
                    accessToken: Components.Parameters.AccessToken? = nil,
                    alt: Components.Parameters.Alt? = nil,
                    callback: Components.Parameters.Callback? = nil,
                    fields: Components.Parameters.Fields? = nil,
                    key: Components.Parameters.Key? = nil,
                    oauthToken: Components.Parameters.OauthToken? = nil,
                    prettyPrint: Components.Parameters.PrettyPrint? = nil,
                    quotaUser: Components.Parameters.QuotaUser? = nil,
                    uploadProtocol: Components.Parameters.UploadProtocol? = nil,
                    uploadType: Components.Parameters.UploadType? = nil
                ) {
                    self._dollar__xgafv = _dollar__xgafv
                    self.accessToken = accessToken
                    self.alt = alt
                    self.callback = callback
                    self.fields = fields
                    self.key = key
                    self.oauthToken = oauthToken
                    self.prettyPrint = prettyPrint
                    self.quotaUser = quotaUser
                    self.uploadProtocol = uploadProtocol
                    self.uploadType = uploadType
                }
            }
            public var query: Operations.Docs_documents_create.Input.Query
            /// - Remark: Generated from `#/paths/v1/documents/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.Docs_documents_create.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.Docs_documents_create.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.Docs_documents_create.Input.Headers
            /// - Remark: Generated from `#/paths/v1/documents/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/v1/documents/POST/requestBody/content/application\/json`.
                case json(Components.Schemas.Document)
            }
            public var body: Operations.Docs_documents_create.Input.Body?
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - query:
            ///   - headers:
            ///   - body:
            public init(
                query: Operations.Docs_documents_create.Input.Query = .init(),
                headers: Operations.Docs_documents_create.Input.Headers = .init(),
                body: Operations.Docs_documents_create.Input.Body? = nil
            ) {
                self.query = query
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/v1/documents/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/v1/documents/POST/responses/200/content/application\/json`.
                    case json(Components.Schemas.Document)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.Document {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.Docs_documents_create.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.Docs_documents_create.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Successful response
            ///
            /// - Remark: Generated from `#/paths//v1/documents/post(docs.documents.create)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.Docs_documents_create.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.Docs_documents_create.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Gets the latest version of the specified document.
    ///
    /// - Remark: HTTP `GET /v1/documents/{documentId}`.
    /// - Remark: Generated from `#/paths//v1/documents/{documentId}/get(docs.documents.get)`.
    public enum Docs_documents_get {
        public static let id: Swift.String = "docs.documents.get"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/v1/documents/{documentId}/GET/path`.
            public struct Path: Sendable, Hashable {
                /// The ID of the document to retrieve.
                ///
                /// - Remark: Generated from `#/paths/v1/documents/{documentId}/GET/path/documentId`.
                public var documentId: Swift.String
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - documentId: The ID of the document to retrieve.
                public init(documentId: Swift.String) {
                    self.documentId = documentId
                }
            }
            public var path: Operations.Docs_documents_get.Input.Path
            /// - Remark: Generated from `#/paths/v1/documents/{documentId}/GET/query`.
            public struct Query: Sendable, Hashable {
                /// - Remark: Generated from `#/components/parameters/_.xgafv`.
                @frozen public enum __period_xgafv: String, Codable, Hashable, Sendable, CaseIterable {
                    case _1 = "1"
                    case _2 = "2"
                }
                /// V1 error format.
                ///
                /// - Remark: Generated from `#/paths/v1/documents/{documentId}/GET/query/$.xgafv`.
                public var _dollar__xgafv: Components.Parameters.__period_xgafv?
                /// OAuth access token.
                ///
                /// - Remark: Generated from `#/paths/v1/documents/{documentId}/GET/query/access_token`.
                public var accessToken: Components.Parameters.AccessToken?
                /// - Remark: Generated from `#/components/parameters/alt`.
                @frozen public enum Alt: String, Codable, Hashable, Sendable, CaseIterable {
                    case json = "json"
                    case media = "media"
                    case proto = "proto"
                }
                /// Data format for response.
                ///
                /// - Remark: Generated from `#/paths/v1/documents/{documentId}/GET/query/alt`.
                public var alt: Components.Parameters.Alt?
                /// JSONP
                ///
                /// - Remark: Generated from `#/paths/v1/documents/{documentId}/GET/query/callback`.
                public var callback: Components.Parameters.Callback?
                /// Selector specifying which fields to include in a partial response.
                ///
                /// - Remark: Generated from `#/paths/v1/documents/{documentId}/GET/query/fields`.
                public var fields: Components.Parameters.Fields?
                /// API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
                ///
                /// - Remark: Generated from `#/paths/v1/documents/{documentId}/GET/query/key`.
                public var key: Components.Parameters.Key?
                /// OAuth 2.0 token for the current user.
                ///
                /// - Remark: Generated from `#/paths/v1/documents/{documentId}/GET/query/oauth_token`.
                public var oauthToken: Components.Parameters.OauthToken?
                /// Returns response with indentations and line breaks.
                ///
                /// - Remark: Generated from `#/paths/v1/documents/{documentId}/GET/query/prettyPrint`.
                public var prettyPrint: Components.Parameters.PrettyPrint?
                /// Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
                ///
                /// - Remark: Generated from `#/paths/v1/documents/{documentId}/GET/query/quotaUser`.
                public var quotaUser: Components.Parameters.QuotaUser?
                /// Upload protocol for media (e.g. "raw", "multipart").
                ///
                /// - Remark: Generated from `#/paths/v1/documents/{documentId}/GET/query/upload_protocol`.
                public var uploadProtocol: Components.Parameters.UploadProtocol?
                /// Legacy upload protocol for media (e.g. "media", "multipart").
                ///
                /// - Remark: Generated from `#/paths/v1/documents/{documentId}/GET/query/uploadType`.
                public var uploadType: Components.Parameters.UploadType?
                /// - Remark: Generated from `#/paths/v1/documents/{documentId}/GET/query/suggestionsViewMode`.
                @frozen public enum SuggestionsViewModePayload: String, Codable, Hashable, Sendable, CaseIterable {
                    case defaultForCurrentAccess = "DEFAULT_FOR_CURRENT_ACCESS"
                    case suggestionsInline = "SUGGESTIONS_INLINE"
                    case previewSuggestionsAccepted = "PREVIEW_SUGGESTIONS_ACCEPTED"
                    case previewWithoutSuggestions = "PREVIEW_WITHOUT_SUGGESTIONS"
                }
                /// The suggestions view mode to apply to the document. This allows viewing the document with all suggestions inline, accepted or rejected. If one is not specified, DEFAULT_FOR_CURRENT_ACCESS is used.
                ///
                /// - Remark: Generated from `#/paths/v1/documents/{documentId}/GET/query/suggestionsViewMode`.
                public var suggestionsViewMode: Operations.Docs_documents_get.Input.Query.SuggestionsViewModePayload?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - _dollar__xgafv: V1 error format.
                ///   - accessToken: OAuth access token.
                ///   - alt: Data format for response.
                ///   - callback: JSONP
                ///   - fields: Selector specifying which fields to include in a partial response.
                ///   - key: API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
                ///   - oauthToken: OAuth 2.0 token for the current user.
                ///   - prettyPrint: Returns response with indentations and line breaks.
                ///   - quotaUser: Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
                ///   - uploadProtocol: Upload protocol for media (e.g. "raw", "multipart").
                ///   - uploadType: Legacy upload protocol for media (e.g. "media", "multipart").
                ///   - suggestionsViewMode: The suggestions view mode to apply to the document. This allows viewing the document with all suggestions inline, accepted or rejected. If one is not specified, DEFAULT_FOR_CURRENT_ACCESS is used.
                public init(
                    _dollar__xgafv: Components.Parameters.__period_xgafv? = nil,
                    accessToken: Components.Parameters.AccessToken? = nil,
                    alt: Components.Parameters.Alt? = nil,
                    callback: Components.Parameters.Callback? = nil,
                    fields: Components.Parameters.Fields? = nil,
                    key: Components.Parameters.Key? = nil,
                    oauthToken: Components.Parameters.OauthToken? = nil,
                    prettyPrint: Components.Parameters.PrettyPrint? = nil,
                    quotaUser: Components.Parameters.QuotaUser? = nil,
                    uploadProtocol: Components.Parameters.UploadProtocol? = nil,
                    uploadType: Components.Parameters.UploadType? = nil,
                    suggestionsViewMode: Operations.Docs_documents_get.Input.Query.SuggestionsViewModePayload? = nil
                ) {
                    self._dollar__xgafv = _dollar__xgafv
                    self.accessToken = accessToken
                    self.alt = alt
                    self.callback = callback
                    self.fields = fields
                    self.key = key
                    self.oauthToken = oauthToken
                    self.prettyPrint = prettyPrint
                    self.quotaUser = quotaUser
                    self.uploadProtocol = uploadProtocol
                    self.uploadType = uploadType
                    self.suggestionsViewMode = suggestionsViewMode
                }
            }
            public var query: Operations.Docs_documents_get.Input.Query
            /// - Remark: Generated from `#/paths/v1/documents/{documentId}/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.Docs_documents_get.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.Docs_documents_get.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.Docs_documents_get.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - query:
            ///   - headers:
            public init(
                path: Operations.Docs_documents_get.Input.Path,
                query: Operations.Docs_documents_get.Input.Query = .init(),
                headers: Operations.Docs_documents_get.Input.Headers = .init()
            ) {
                self.path = path
                self.query = query
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/v1/documents/{documentId}/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/v1/documents/{documentId}/GET/responses/200/content/application\/json`.
                    case json(Components.Schemas.Document)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.Document {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.Docs_documents_get.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.Docs_documents_get.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Successful response
            ///
            /// - Remark: Generated from `#/paths//v1/documents/{documentId}/get(docs.documents.get)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.Docs_documents_get.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.Docs_documents_get.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Applies one or more updates to the document. Each request is validated before being applied. If any request is not valid, then the entire request will fail and nothing will be applied. Some requests have replies to give you some information about how they are applied. Other requests do not need to return information; these each return an empty reply. The order of replies matches that of the requests. For example, suppose you call batchUpdate with four updates, and only the third one returns information. The response would have two empty replies, the reply to the third request, and another empty reply, in that order. Because other users may be editing the document, the document might not exactly reflect your changes: your changes may be altered with respect to collaborator changes. If there are no collaborators, the document should reflect your changes. In any case, the updates in your request are guaranteed to be applied together atomically.
    ///
    /// - Remark: HTTP `POST /v1/documents/{documentId}:batchUpdate`.
    /// - Remark: Generated from `#/paths//v1/documents/{documentId}:batchUpdate/post(docs.documents.batchUpdate)`.
    public enum Docs_documents_batchUpdate {
        public static let id: Swift.String = "docs.documents.batchUpdate"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/v1/documents/{documentId}:batchUpdate/POST/path`.
            public struct Path: Sendable, Hashable {
                /// The ID of the document to update.
                ///
                /// - Remark: Generated from `#/paths/v1/documents/{documentId}:batchUpdate/POST/path/documentId`.
                public var documentId: Swift.String
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - documentId: The ID of the document to update.
                public init(documentId: Swift.String) {
                    self.documentId = documentId
                }
            }
            public var path: Operations.Docs_documents_batchUpdate.Input.Path
            /// - Remark: Generated from `#/paths/v1/documents/{documentId}:batchUpdate/POST/query`.
            public struct Query: Sendable, Hashable {
                /// - Remark: Generated from `#/components/parameters/_.xgafv`.
                @frozen public enum __period_xgafv: String, Codable, Hashable, Sendable, CaseIterable {
                    case _1 = "1"
                    case _2 = "2"
                }
                /// V1 error format.
                ///
                /// - Remark: Generated from `#/paths/v1/documents/{documentId}:batchUpdate/POST/query/$.xgafv`.
                public var _dollar__xgafv: Components.Parameters.__period_xgafv?
                /// OAuth access token.
                ///
                /// - Remark: Generated from `#/paths/v1/documents/{documentId}:batchUpdate/POST/query/access_token`.
                public var accessToken: Components.Parameters.AccessToken?
                /// - Remark: Generated from `#/components/parameters/alt`.
                @frozen public enum Alt: String, Codable, Hashable, Sendable, CaseIterable {
                    case json = "json"
                    case media = "media"
                    case proto = "proto"
                }
                /// Data format for response.
                ///
                /// - Remark: Generated from `#/paths/v1/documents/{documentId}:batchUpdate/POST/query/alt`.
                public var alt: Components.Parameters.Alt?
                /// JSONP
                ///
                /// - Remark: Generated from `#/paths/v1/documents/{documentId}:batchUpdate/POST/query/callback`.
                public var callback: Components.Parameters.Callback?
                /// Selector specifying which fields to include in a partial response.
                ///
                /// - Remark: Generated from `#/paths/v1/documents/{documentId}:batchUpdate/POST/query/fields`.
                public var fields: Components.Parameters.Fields?
                /// API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
                ///
                /// - Remark: Generated from `#/paths/v1/documents/{documentId}:batchUpdate/POST/query/key`.
                public var key: Components.Parameters.Key?
                /// OAuth 2.0 token for the current user.
                ///
                /// - Remark: Generated from `#/paths/v1/documents/{documentId}:batchUpdate/POST/query/oauth_token`.
                public var oauthToken: Components.Parameters.OauthToken?
                /// Returns response with indentations and line breaks.
                ///
                /// - Remark: Generated from `#/paths/v1/documents/{documentId}:batchUpdate/POST/query/prettyPrint`.
                public var prettyPrint: Components.Parameters.PrettyPrint?
                /// Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
                ///
                /// - Remark: Generated from `#/paths/v1/documents/{documentId}:batchUpdate/POST/query/quotaUser`.
                public var quotaUser: Components.Parameters.QuotaUser?
                /// Upload protocol for media (e.g. "raw", "multipart").
                ///
                /// - Remark: Generated from `#/paths/v1/documents/{documentId}:batchUpdate/POST/query/upload_protocol`.
                public var uploadProtocol: Components.Parameters.UploadProtocol?
                /// Legacy upload protocol for media (e.g. "media", "multipart").
                ///
                /// - Remark: Generated from `#/paths/v1/documents/{documentId}:batchUpdate/POST/query/uploadType`.
                public var uploadType: Components.Parameters.UploadType?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - _dollar__xgafv: V1 error format.
                ///   - accessToken: OAuth access token.
                ///   - alt: Data format for response.
                ///   - callback: JSONP
                ///   - fields: Selector specifying which fields to include in a partial response.
                ///   - key: API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
                ///   - oauthToken: OAuth 2.0 token for the current user.
                ///   - prettyPrint: Returns response with indentations and line breaks.
                ///   - quotaUser: Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
                ///   - uploadProtocol: Upload protocol for media (e.g. "raw", "multipart").
                ///   - uploadType: Legacy upload protocol for media (e.g. "media", "multipart").
                public init(
                    _dollar__xgafv: Components.Parameters.__period_xgafv? = nil,
                    accessToken: Components.Parameters.AccessToken? = nil,
                    alt: Components.Parameters.Alt? = nil,
                    callback: Components.Parameters.Callback? = nil,
                    fields: Components.Parameters.Fields? = nil,
                    key: Components.Parameters.Key? = nil,
                    oauthToken: Components.Parameters.OauthToken? = nil,
                    prettyPrint: Components.Parameters.PrettyPrint? = nil,
                    quotaUser: Components.Parameters.QuotaUser? = nil,
                    uploadProtocol: Components.Parameters.UploadProtocol? = nil,
                    uploadType: Components.Parameters.UploadType? = nil
                ) {
                    self._dollar__xgafv = _dollar__xgafv
                    self.accessToken = accessToken
                    self.alt = alt
                    self.callback = callback
                    self.fields = fields
                    self.key = key
                    self.oauthToken = oauthToken
                    self.prettyPrint = prettyPrint
                    self.quotaUser = quotaUser
                    self.uploadProtocol = uploadProtocol
                    self.uploadType = uploadType
                }
            }
            public var query: Operations.Docs_documents_batchUpdate.Input.Query
            /// - Remark: Generated from `#/paths/v1/documents/{documentId}:batchUpdate/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.Docs_documents_batchUpdate.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.Docs_documents_batchUpdate.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.Docs_documents_batchUpdate.Input.Headers
            /// - Remark: Generated from `#/paths/v1/documents/{documentId}:batchUpdate/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/v1/documents/{documentId}:batchUpdate/POST/requestBody/content/application\/json`.
                case json(Components.Schemas.BatchUpdateDocumentRequest)
            }
            public var body: Operations.Docs_documents_batchUpdate.Input.Body?
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - query:
            ///   - headers:
            ///   - body:
            public init(
                path: Operations.Docs_documents_batchUpdate.Input.Path,
                query: Operations.Docs_documents_batchUpdate.Input.Query = .init(),
                headers: Operations.Docs_documents_batchUpdate.Input.Headers = .init(),
                body: Operations.Docs_documents_batchUpdate.Input.Body? = nil
            ) {
                self.path = path
                self.query = query
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/v1/documents/{documentId}:batchUpdate/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/v1/documents/{documentId}:batchUpdate/POST/responses/200/content/application\/json`.
                    case json(Components.Schemas.BatchUpdateDocumentResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.BatchUpdateDocumentResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.Docs_documents_batchUpdate.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.Docs_documents_batchUpdate.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Successful response
            ///
            /// - Remark: Generated from `#/paths//v1/documents/{documentId}:batchUpdate/post(docs.documents.batchUpdate)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.Docs_documents_batchUpdate.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.Docs_documents_batchUpdate.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
}
