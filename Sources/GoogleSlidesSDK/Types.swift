// Generated by swift-openapi-generator, do not modify.
@_spi(Generated) import OpenAPIRuntime
#if os(Linux)
@preconcurrency import struct Foundation.URL
@preconcurrency import struct Foundation.Data
@preconcurrency import struct Foundation.Date
#else
import struct Foundation.URL
import struct Foundation.Data
import struct Foundation.Date
#endif
/// A type that performs HTTP operations defined by the OpenAPI document.
public protocol APIProtocol: Sendable {
    /// Creates a blank presentation using the title given in the request. If a `presentationId` is provided, it is used as the ID of the new presentation. Otherwise, a new ID is generated. Other fields in the request, including any provided content, are ignored. Returns the created presentation.
    ///
    /// - Remark: HTTP `POST /v1/presentations`.
    /// - Remark: Generated from `#/paths//v1/presentations/post(slides.presentations.create)`.
    func slides_presentations_create(_ input: Operations.Slides_presentations_create.Input) async throws -> Operations.Slides_presentations_create.Output
    /// Gets the latest version of the specified presentation.
    ///
    /// - Remark: HTTP `GET /v1/presentations/{presentationId}`.
    /// - Remark: Generated from `#/paths//v1/presentations/{presentationId}/get(slides.presentations.get)`.
    func slides_presentations_get(_ input: Operations.Slides_presentations_get.Input) async throws -> Operations.Slides_presentations_get.Output
    /// Gets the latest version of the specified page in the presentation.
    ///
    /// - Remark: HTTP `GET /v1/presentations/{presentationId}/pages/{pageObjectId}`.
    /// - Remark: Generated from `#/paths//v1/presentations/{presentationId}/pages/{pageObjectId}/get(slides.presentations.pages.get)`.
    func slides_presentations_pages_get(_ input: Operations.Slides_presentations_pages_get.Input) async throws -> Operations.Slides_presentations_pages_get.Output
    /// Generates a thumbnail of the latest version of the specified page in the presentation and returns a URL to the thumbnail image. This request counts as an [expensive read request](/slides/limits) for quota purposes.
    ///
    /// - Remark: HTTP `GET /v1/presentations/{presentationId}/pages/{pageObjectId}/thumbnail`.
    /// - Remark: Generated from `#/paths//v1/presentations/{presentationId}/pages/{pageObjectId}/thumbnail/get(slides.presentations.pages.getThumbnail)`.
    func slides_presentations_pages_getThumbnail(_ input: Operations.Slides_presentations_pages_getThumbnail.Input) async throws -> Operations.Slides_presentations_pages_getThumbnail.Output
    /// Applies one or more updates to the presentation. Each request is validated before being applied. If any request is not valid, then the entire request will fail and nothing will be applied. Some requests have replies to give you some information about how they are applied. Other requests do not need to return information; these each return an empty reply. The order of replies matches that of the requests. For example, suppose you call batchUpdate with four updates, and only the third one returns information. The response would have two empty replies: the reply to the third request, and another empty reply, in that order. Because other users may be editing the presentation, the presentation might not exactly reflect your changes: your changes may be altered with respect to collaborator changes. If there are no collaborators, the presentation should reflect your changes. In any case, the updates in your request are guaranteed to be applied together atomically.
    ///
    /// - Remark: HTTP `POST /v1/presentations/{presentationId}:batchUpdate`.
    /// - Remark: Generated from `#/paths//v1/presentations/{presentationId}:batchUpdate/post(slides.presentations.batchUpdate)`.
    func slides_presentations_batchUpdate(_ input: Operations.Slides_presentations_batchUpdate.Input) async throws -> Operations.Slides_presentations_batchUpdate.Output
}

/// Convenience overloads for operation inputs.
extension APIProtocol {
    /// Creates a blank presentation using the title given in the request. If a `presentationId` is provided, it is used as the ID of the new presentation. Otherwise, a new ID is generated. Other fields in the request, including any provided content, are ignored. Returns the created presentation.
    ///
    /// - Remark: HTTP `POST /v1/presentations`.
    /// - Remark: Generated from `#/paths//v1/presentations/post(slides.presentations.create)`.
    public func slides_presentations_create(
        query: Operations.Slides_presentations_create.Input.Query = .init(),
        headers: Operations.Slides_presentations_create.Input.Headers = .init(),
        body: Operations.Slides_presentations_create.Input.Body? = nil
    ) async throws -> Operations.Slides_presentations_create.Output {
        try await slides_presentations_create(Operations.Slides_presentations_create.Input(
            query: query,
            headers: headers,
            body: body
        ))
    }
    /// Gets the latest version of the specified presentation.
    ///
    /// - Remark: HTTP `GET /v1/presentations/{presentationId}`.
    /// - Remark: Generated from `#/paths//v1/presentations/{presentationId}/get(slides.presentations.get)`.
    public func slides_presentations_get(
        path: Operations.Slides_presentations_get.Input.Path,
        query: Operations.Slides_presentations_get.Input.Query = .init(),
        headers: Operations.Slides_presentations_get.Input.Headers = .init()
    ) async throws -> Operations.Slides_presentations_get.Output {
        try await slides_presentations_get(Operations.Slides_presentations_get.Input(
            path: path,
            query: query,
            headers: headers
        ))
    }
    /// Gets the latest version of the specified page in the presentation.
    ///
    /// - Remark: HTTP `GET /v1/presentations/{presentationId}/pages/{pageObjectId}`.
    /// - Remark: Generated from `#/paths//v1/presentations/{presentationId}/pages/{pageObjectId}/get(slides.presentations.pages.get)`.
    public func slides_presentations_pages_get(
        path: Operations.Slides_presentations_pages_get.Input.Path,
        query: Operations.Slides_presentations_pages_get.Input.Query = .init(),
        headers: Operations.Slides_presentations_pages_get.Input.Headers = .init()
    ) async throws -> Operations.Slides_presentations_pages_get.Output {
        try await slides_presentations_pages_get(Operations.Slides_presentations_pages_get.Input(
            path: path,
            query: query,
            headers: headers
        ))
    }
    /// Generates a thumbnail of the latest version of the specified page in the presentation and returns a URL to the thumbnail image. This request counts as an [expensive read request](/slides/limits) for quota purposes.
    ///
    /// - Remark: HTTP `GET /v1/presentations/{presentationId}/pages/{pageObjectId}/thumbnail`.
    /// - Remark: Generated from `#/paths//v1/presentations/{presentationId}/pages/{pageObjectId}/thumbnail/get(slides.presentations.pages.getThumbnail)`.
    public func slides_presentations_pages_getThumbnail(
        path: Operations.Slides_presentations_pages_getThumbnail.Input.Path,
        query: Operations.Slides_presentations_pages_getThumbnail.Input.Query = .init(),
        headers: Operations.Slides_presentations_pages_getThumbnail.Input.Headers = .init()
    ) async throws -> Operations.Slides_presentations_pages_getThumbnail.Output {
        try await slides_presentations_pages_getThumbnail(Operations.Slides_presentations_pages_getThumbnail.Input(
            path: path,
            query: query,
            headers: headers
        ))
    }
    /// Applies one or more updates to the presentation. Each request is validated before being applied. If any request is not valid, then the entire request will fail and nothing will be applied. Some requests have replies to give you some information about how they are applied. Other requests do not need to return information; these each return an empty reply. The order of replies matches that of the requests. For example, suppose you call batchUpdate with four updates, and only the third one returns information. The response would have two empty replies: the reply to the third request, and another empty reply, in that order. Because other users may be editing the presentation, the presentation might not exactly reflect your changes: your changes may be altered with respect to collaborator changes. If there are no collaborators, the presentation should reflect your changes. In any case, the updates in your request are guaranteed to be applied together atomically.
    ///
    /// - Remark: HTTP `POST /v1/presentations/{presentationId}:batchUpdate`.
    /// - Remark: Generated from `#/paths//v1/presentations/{presentationId}:batchUpdate/post(slides.presentations.batchUpdate)`.
    public func slides_presentations_batchUpdate(
        path: Operations.Slides_presentations_batchUpdate.Input.Path,
        query: Operations.Slides_presentations_batchUpdate.Input.Query = .init(),
        headers: Operations.Slides_presentations_batchUpdate.Input.Headers = .init(),
        body: Operations.Slides_presentations_batchUpdate.Input.Body? = nil
    ) async throws -> Operations.Slides_presentations_batchUpdate.Output {
        try await slides_presentations_batchUpdate(Operations.Slides_presentations_batchUpdate.Input(
            path: path,
            query: query,
            headers: headers,
            body: body
        ))
    }
}

/// Server URLs defined in the OpenAPI document.
public enum Servers {
    public enum Server1 {
        public static func url() throws -> Foundation.URL {
            try Foundation.URL(
                validatingOpenAPIServerURL: "https://slides.googleapis.com/",
                variables: []
            )
        }
    }
    @available(*, deprecated, renamed: "Servers.Server1.url")
    public static func server1() throws -> Foundation.URL {
        try Foundation.URL(
            validatingOpenAPIServerURL: "https://slides.googleapis.com/",
            variables: []
        )
    }
}

/// Types generated from the components section of the OpenAPI document.
public enum Components {
    /// Types generated from the `#/components/schemas` section of the OpenAPI document.
    public enum Schemas {
        /// AffineTransform uses a 3x3 matrix with an implied last row of [ 0 0 1 ] to transform source coordinates (x,y) into destination coordinates (x', y') according to: x' x = shear_y scale_y translate_y 1 [ 1 ] After transformation, x' = scale_x * x + shear_x * y + translate_x; y' = scale_y * y + shear_y * x + translate_y; This message is therefore composed of these six matrix elements.
        ///
        /// - Remark: Generated from `#/components/schemas/AffineTransform`.
        public struct AffineTransform: Codable, Hashable, Sendable {
            /// The X coordinate scaling element.
            ///
            /// - Remark: Generated from `#/components/schemas/AffineTransform/scaleX`.
            public var scaleX: Swift.Double?
            /// The Y coordinate scaling element.
            ///
            /// - Remark: Generated from `#/components/schemas/AffineTransform/scaleY`.
            public var scaleY: Swift.Double?
            /// The X coordinate shearing element.
            ///
            /// - Remark: Generated from `#/components/schemas/AffineTransform/shearX`.
            public var shearX: Swift.Double?
            /// The Y coordinate shearing element.
            ///
            /// - Remark: Generated from `#/components/schemas/AffineTransform/shearY`.
            public var shearY: Swift.Double?
            /// The X coordinate translation element.
            ///
            /// - Remark: Generated from `#/components/schemas/AffineTransform/translateX`.
            public var translateX: Swift.Double?
            /// The Y coordinate translation element.
            ///
            /// - Remark: Generated from `#/components/schemas/AffineTransform/translateY`.
            public var translateY: Swift.Double?
            /// The units for translate elements.
            ///
            /// - Remark: Generated from `#/components/schemas/AffineTransform/unit`.
            @frozen public enum UnitPayload: String, Codable, Hashable, Sendable, CaseIterable {
                case unitUnspecified = "UNIT_UNSPECIFIED"
                case emu = "EMU"
                case pt = "PT"
            }
            /// The units for translate elements.
            ///
            /// - Remark: Generated from `#/components/schemas/AffineTransform/unit`.
            public var unit: Components.Schemas.AffineTransform.UnitPayload?
            /// Creates a new `AffineTransform`.
            ///
            /// - Parameters:
            ///   - scaleX: The X coordinate scaling element.
            ///   - scaleY: The Y coordinate scaling element.
            ///   - shearX: The X coordinate shearing element.
            ///   - shearY: The Y coordinate shearing element.
            ///   - translateX: The X coordinate translation element.
            ///   - translateY: The Y coordinate translation element.
            ///   - unit: The units for translate elements.
            public init(
                scaleX: Swift.Double? = nil,
                scaleY: Swift.Double? = nil,
                shearX: Swift.Double? = nil,
                shearY: Swift.Double? = nil,
                translateX: Swift.Double? = nil,
                translateY: Swift.Double? = nil,
                unit: Components.Schemas.AffineTransform.UnitPayload? = nil
            ) {
                self.scaleX = scaleX
                self.scaleY = scaleY
                self.shearX = shearX
                self.shearY = shearY
                self.translateX = translateX
                self.translateY = translateY
                self.unit = unit
            }
            public enum CodingKeys: String, CodingKey {
                case scaleX
                case scaleY
                case shearX
                case shearY
                case translateX
                case translateY
                case unit
            }
        }
        /// A TextElement kind that represents auto text.
        ///
        /// - Remark: Generated from `#/components/schemas/AutoText`.
        public struct AutoText: Codable, Hashable, Sendable {
            /// The rendered content of this auto text, if available.
            ///
            /// - Remark: Generated from `#/components/schemas/AutoText/content`.
            public var content: Swift.String?
            /// - Remark: Generated from `#/components/schemas/AutoText/style`.
            public var style: Components.Schemas.TextStyle?
            /// The type of this auto text.
            ///
            /// - Remark: Generated from `#/components/schemas/AutoText/type`.
            @frozen public enum _TypePayload: String, Codable, Hashable, Sendable, CaseIterable {
                case typeUnspecified = "TYPE_UNSPECIFIED"
                case slideNumber = "SLIDE_NUMBER"
            }
            /// The type of this auto text.
            ///
            /// - Remark: Generated from `#/components/schemas/AutoText/type`.
            public var _type: Components.Schemas.AutoText._TypePayload?
            /// Creates a new `AutoText`.
            ///
            /// - Parameters:
            ///   - content: The rendered content of this auto text, if available.
            ///   - style:
            ///   - _type: The type of this auto text.
            public init(
                content: Swift.String? = nil,
                style: Components.Schemas.TextStyle? = nil,
                _type: Components.Schemas.AutoText._TypePayload? = nil
            ) {
                self.content = content
                self.style = style
                self._type = _type
            }
            public enum CodingKeys: String, CodingKey {
                case content
                case style
                case _type = "type"
            }
        }
        /// The autofit properties of a Shape.
        ///
        /// - Remark: Generated from `#/components/schemas/Autofit`.
        public struct Autofit: Codable, Hashable, Sendable {
            /// The autofit type of the shape. If the autofit type is AUTOFIT_TYPE_UNSPECIFIED, the autofit type is inherited from a parent placeholder if it exists. The field is automatically set to NONE if a request is made that might affect text fitting within its bounding text box. In this case the font_scale is applied to the font_size and the line_spacing_reduction is applied to the line_spacing. Both properties are also reset to default values.
            ///
            /// - Remark: Generated from `#/components/schemas/Autofit/autofitType`.
            @frozen public enum AutofitTypePayload: String, Codable, Hashable, Sendable, CaseIterable {
                case autofitTypeUnspecified = "AUTOFIT_TYPE_UNSPECIFIED"
                case none = "NONE"
                case textAutofit = "TEXT_AUTOFIT"
                case shapeAutofit = "SHAPE_AUTOFIT"
            }
            /// The autofit type of the shape. If the autofit type is AUTOFIT_TYPE_UNSPECIFIED, the autofit type is inherited from a parent placeholder if it exists. The field is automatically set to NONE if a request is made that might affect text fitting within its bounding text box. In this case the font_scale is applied to the font_size and the line_spacing_reduction is applied to the line_spacing. Both properties are also reset to default values.
            ///
            /// - Remark: Generated from `#/components/schemas/Autofit/autofitType`.
            public var autofitType: Components.Schemas.Autofit.AutofitTypePayload?
            /// The font scale applied to the shape. For shapes with autofit_type NONE or SHAPE_AUTOFIT, this value is the default value of 1. For TEXT_AUTOFIT, this value multiplied by the font_size gives the font size that is rendered in the editor. This property is read-only.
            ///
            /// - Remark: Generated from `#/components/schemas/Autofit/fontScale`.
            public var fontScale: Swift.Float?
            /// The line spacing reduction applied to the shape. For shapes with autofit_type NONE or SHAPE_AUTOFIT, this value is the default value of 0. For TEXT_AUTOFIT, this value subtracted from the line_spacing gives the line spacing that is rendered in the editor. This property is read-only.
            ///
            /// - Remark: Generated from `#/components/schemas/Autofit/lineSpacingReduction`.
            public var lineSpacingReduction: Swift.Float?
            /// Creates a new `Autofit`.
            ///
            /// - Parameters:
            ///   - autofitType: The autofit type of the shape. If the autofit type is AUTOFIT_TYPE_UNSPECIFIED, the autofit type is inherited from a parent placeholder if it exists. The field is automatically set to NONE if a request is made that might affect text fitting within its bounding text box. In this case the font_scale is applied to the font_size and the line_spacing_reduction is applied to the line_spacing. Both properties are also reset to default values.
            ///   - fontScale: The font scale applied to the shape. For shapes with autofit_type NONE or SHAPE_AUTOFIT, this value is the default value of 1. For TEXT_AUTOFIT, this value multiplied by the font_size gives the font size that is rendered in the editor. This property is read-only.
            ///   - lineSpacingReduction: The line spacing reduction applied to the shape. For shapes with autofit_type NONE or SHAPE_AUTOFIT, this value is the default value of 0. For TEXT_AUTOFIT, this value subtracted from the line_spacing gives the line spacing that is rendered in the editor. This property is read-only.
            public init(
                autofitType: Components.Schemas.Autofit.AutofitTypePayload? = nil,
                fontScale: Swift.Float? = nil,
                lineSpacingReduction: Swift.Float? = nil
            ) {
                self.autofitType = autofitType
                self.fontScale = fontScale
                self.lineSpacingReduction = lineSpacingReduction
            }
            public enum CodingKeys: String, CodingKey {
                case autofitType
                case fontScale
                case lineSpacingReduction
            }
        }
        /// Request message for PresentationsService.BatchUpdatePresentation.
        ///
        /// - Remark: Generated from `#/components/schemas/BatchUpdatePresentationRequest`.
        public struct BatchUpdatePresentationRequest: Codable, Hashable, Sendable {
            /// A list of updates to apply to the presentation.
            ///
            /// - Remark: Generated from `#/components/schemas/BatchUpdatePresentationRequest/requests`.
            public var requests: [Components.Schemas.Request]?
            /// - Remark: Generated from `#/components/schemas/BatchUpdatePresentationRequest/writeControl`.
            public var writeControl: Components.Schemas.WriteControl?
            /// Creates a new `BatchUpdatePresentationRequest`.
            ///
            /// - Parameters:
            ///   - requests: A list of updates to apply to the presentation.
            ///   - writeControl:
            public init(
                requests: [Components.Schemas.Request]? = nil,
                writeControl: Components.Schemas.WriteControl? = nil
            ) {
                self.requests = requests
                self.writeControl = writeControl
            }
            public enum CodingKeys: String, CodingKey {
                case requests
                case writeControl
            }
        }
        /// Response message from a batch update.
        ///
        /// - Remark: Generated from `#/components/schemas/BatchUpdatePresentationResponse`.
        public struct BatchUpdatePresentationResponse: Codable, Hashable, Sendable {
            /// The presentation the updates were applied to.
            ///
            /// - Remark: Generated from `#/components/schemas/BatchUpdatePresentationResponse/presentationId`.
            public var presentationId: Swift.String?
            /// The reply of the updates. This maps 1:1 with the updates, although replies to some requests may be empty.
            ///
            /// - Remark: Generated from `#/components/schemas/BatchUpdatePresentationResponse/replies`.
            public var replies: [Components.Schemas.Response]?
            /// - Remark: Generated from `#/components/schemas/BatchUpdatePresentationResponse/writeControl`.
            public var writeControl: Components.Schemas.WriteControl?
            /// Creates a new `BatchUpdatePresentationResponse`.
            ///
            /// - Parameters:
            ///   - presentationId: The presentation the updates were applied to.
            ///   - replies: The reply of the updates. This maps 1:1 with the updates, although replies to some requests may be empty.
            ///   - writeControl:
            public init(
                presentationId: Swift.String? = nil,
                replies: [Components.Schemas.Response]? = nil,
                writeControl: Components.Schemas.WriteControl? = nil
            ) {
                self.presentationId = presentationId
                self.replies = replies
                self.writeControl = writeControl
            }
            public enum CodingKeys: String, CodingKey {
                case presentationId
                case replies
                case writeControl
            }
        }
        /// Describes the bullet of a paragraph.
        ///
        /// - Remark: Generated from `#/components/schemas/Bullet`.
        public struct Bullet: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/Bullet/bulletStyle`.
            public var bulletStyle: Components.Schemas.TextStyle?
            /// The rendered bullet glyph for this paragraph.
            ///
            /// - Remark: Generated from `#/components/schemas/Bullet/glyph`.
            public var glyph: Swift.String?
            /// The ID of the list this paragraph belongs to.
            ///
            /// - Remark: Generated from `#/components/schemas/Bullet/listId`.
            public var listId: Swift.String?
            /// The nesting level of this paragraph in the list.
            ///
            /// - Remark: Generated from `#/components/schemas/Bullet/nestingLevel`.
            public var nestingLevel: Swift.Int32?
            /// Creates a new `Bullet`.
            ///
            /// - Parameters:
            ///   - bulletStyle:
            ///   - glyph: The rendered bullet glyph for this paragraph.
            ///   - listId: The ID of the list this paragraph belongs to.
            ///   - nestingLevel: The nesting level of this paragraph in the list.
            public init(
                bulletStyle: Components.Schemas.TextStyle? = nil,
                glyph: Swift.String? = nil,
                listId: Swift.String? = nil,
                nestingLevel: Swift.Int32? = nil
            ) {
                self.bulletStyle = bulletStyle
                self.glyph = glyph
                self.listId = listId
                self.nestingLevel = nestingLevel
            }
            public enum CodingKeys: String, CodingKey {
                case bulletStyle
                case glyph
                case listId
                case nestingLevel
            }
        }
        /// The palette of predefined colors for a page.
        ///
        /// - Remark: Generated from `#/components/schemas/ColorScheme`.
        public struct ColorScheme: Codable, Hashable, Sendable {
            /// The ThemeColorType and corresponding concrete color pairs.
            ///
            /// - Remark: Generated from `#/components/schemas/ColorScheme/colors`.
            public var colors: [Components.Schemas.ThemeColorPair]?
            /// Creates a new `ColorScheme`.
            ///
            /// - Parameters:
            ///   - colors: The ThemeColorType and corresponding concrete color pairs.
            public init(colors: [Components.Schemas.ThemeColorPair]? = nil) {
                self.colors = colors
            }
            public enum CodingKeys: String, CodingKey {
                case colors
            }
        }
        /// A color and position in a gradient band.
        ///
        /// - Remark: Generated from `#/components/schemas/ColorStop`.
        public struct ColorStop: Codable, Hashable, Sendable {
            /// The alpha value of this color in the gradient band. Defaults to 1.0, fully opaque.
            ///
            /// - Remark: Generated from `#/components/schemas/ColorStop/alpha`.
            public var alpha: Swift.Float?
            /// - Remark: Generated from `#/components/schemas/ColorStop/color`.
            public var color: Components.Schemas.OpaqueColor?
            /// The relative position of the color stop in the gradient band measured in percentage. The value should be in the interval [0.0, 1.0].
            ///
            /// - Remark: Generated from `#/components/schemas/ColorStop/position`.
            public var position: Swift.Float?
            /// Creates a new `ColorStop`.
            ///
            /// - Parameters:
            ///   - alpha: The alpha value of this color in the gradient band. Defaults to 1.0, fully opaque.
            ///   - color:
            ///   - position: The relative position of the color stop in the gradient band measured in percentage. The value should be in the interval [0.0, 1.0].
            public init(
                alpha: Swift.Float? = nil,
                color: Components.Schemas.OpaqueColor? = nil,
                position: Swift.Float? = nil
            ) {
                self.alpha = alpha
                self.color = color
                self.position = position
            }
            public enum CodingKeys: String, CodingKey {
                case alpha
                case color
                case position
            }
        }
        /// Creates an image.
        ///
        /// - Remark: Generated from `#/components/schemas/CreateImageRequest`.
        public struct CreateImageRequest: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/CreateImageRequest/elementProperties`.
            public var elementProperties: Components.Schemas.PageElementProperties?
            /// A user-supplied object ID. If you specify an ID, it must be unique among all pages and page elements in the presentation. The ID must start with an alphanumeric character or an underscore (matches regex `[a-zA-Z0-9_]`); remaining characters may include those as well as a hyphen or colon (matches regex `[a-zA-Z0-9_-:]`). The length of the ID must not be less than 5 or greater than 50. If you don't specify an ID, a unique one is generated.
            ///
            /// - Remark: Generated from `#/components/schemas/CreateImageRequest/objectId`.
            public var objectId: Swift.String?
            /// The image URL. The image is fetched once at insertion time and a copy is stored for display inside the presentation. Images must be less than 50 MB in size, can't exceed 25 megapixels, and must be in one of PNG, JPEG, or GIF formats. The provided URL must be publicly accessible and up to 2 KB in length. The URL is saved with the image, and exposed through the Image.source_url field.
            ///
            /// - Remark: Generated from `#/components/schemas/CreateImageRequest/url`.
            public var url: Swift.String?
            /// Creates a new `CreateImageRequest`.
            ///
            /// - Parameters:
            ///   - elementProperties:
            ///   - objectId: A user-supplied object ID. If you specify an ID, it must be unique among all pages and page elements in the presentation. The ID must start with an alphanumeric character or an underscore (matches regex `[a-zA-Z0-9_]`); remaining characters may include those as well as a hyphen or colon (matches regex `[a-zA-Z0-9_-:]`). The length of the ID must not be less than 5 or greater than 50. If you don't specify an ID, a unique one is generated.
            ///   - url: The image URL. The image is fetched once at insertion time and a copy is stored for display inside the presentation. Images must be less than 50 MB in size, can't exceed 25 megapixels, and must be in one of PNG, JPEG, or GIF formats. The provided URL must be publicly accessible and up to 2 KB in length. The URL is saved with the image, and exposed through the Image.source_url field.
            public init(
                elementProperties: Components.Schemas.PageElementProperties? = nil,
                objectId: Swift.String? = nil,
                url: Swift.String? = nil
            ) {
                self.elementProperties = elementProperties
                self.objectId = objectId
                self.url = url
            }
            public enum CodingKeys: String, CodingKey {
                case elementProperties
                case objectId
                case url
            }
        }
        /// The result of creating an image.
        ///
        /// - Remark: Generated from `#/components/schemas/CreateImageResponse`.
        public struct CreateImageResponse: Codable, Hashable, Sendable {
            /// The object ID of the created image.
            ///
            /// - Remark: Generated from `#/components/schemas/CreateImageResponse/objectId`.
            public var objectId: Swift.String?
            /// Creates a new `CreateImageResponse`.
            ///
            /// - Parameters:
            ///   - objectId: The object ID of the created image.
            public init(objectId: Swift.String? = nil) {
                self.objectId = objectId
            }
            public enum CodingKeys: String, CodingKey {
                case objectId
            }
        }
        /// Creates a line.
        ///
        /// - Remark: Generated from `#/components/schemas/CreateLineRequest`.
        public struct CreateLineRequest: Codable, Hashable, Sendable {
            /// The category of the line to be created. The exact line type created is determined based on the category and how it's routed to connect to other page elements. If you specify both a `category` and a `line_category`, the `category` takes precedence. If you do not specify a value for `category`, but specify a value for `line_category`, then the specified `line_category` value is used. If you do not specify either, then STRAIGHT is used.
            ///
            /// - Remark: Generated from `#/components/schemas/CreateLineRequest/category`.
            @frozen public enum CategoryPayload: String, Codable, Hashable, Sendable, CaseIterable {
                case lineCategoryUnspecified = "LINE_CATEGORY_UNSPECIFIED"
                case straight = "STRAIGHT"
                case bent = "BENT"
                case curved = "CURVED"
            }
            /// The category of the line to be created. The exact line type created is determined based on the category and how it's routed to connect to other page elements. If you specify both a `category` and a `line_category`, the `category` takes precedence. If you do not specify a value for `category`, but specify a value for `line_category`, then the specified `line_category` value is used. If you do not specify either, then STRAIGHT is used.
            ///
            /// - Remark: Generated from `#/components/schemas/CreateLineRequest/category`.
            public var category: Components.Schemas.CreateLineRequest.CategoryPayload?
            /// - Remark: Generated from `#/components/schemas/CreateLineRequest/elementProperties`.
            public var elementProperties: Components.Schemas.PageElementProperties?
            /// The category of the line to be created. *Deprecated*: use `category` instead. The exact line type created is determined based on the category and how it's routed to connect to other page elements. If you specify both a `category` and a `line_category`, the `category` takes precedence.
            ///
            /// - Remark: Generated from `#/components/schemas/CreateLineRequest/lineCategory`.
            @frozen public enum LineCategoryPayload: String, Codable, Hashable, Sendable, CaseIterable {
                case straight = "STRAIGHT"
                case bent = "BENT"
                case curved = "CURVED"
            }
            /// The category of the line to be created. *Deprecated*: use `category` instead. The exact line type created is determined based on the category and how it's routed to connect to other page elements. If you specify both a `category` and a `line_category`, the `category` takes precedence.
            ///
            /// - Remark: Generated from `#/components/schemas/CreateLineRequest/lineCategory`.
            @available(*, deprecated)
            public var lineCategory: Components.Schemas.CreateLineRequest.LineCategoryPayload?
            /// A user-supplied object ID. If you specify an ID, it must be unique among all pages and page elements in the presentation. The ID must start with an alphanumeric character or an underscore (matches regex `[a-zA-Z0-9_]`); remaining characters may include those as well as a hyphen or colon (matches regex `[a-zA-Z0-9_-:]`). The length of the ID must not be less than 5 or greater than 50. If you don't specify an ID, a unique one is generated.
            ///
            /// - Remark: Generated from `#/components/schemas/CreateLineRequest/objectId`.
            public var objectId: Swift.String?
            /// Creates a new `CreateLineRequest`.
            ///
            /// - Parameters:
            ///   - category: The category of the line to be created. The exact line type created is determined based on the category and how it's routed to connect to other page elements. If you specify both a `category` and a `line_category`, the `category` takes precedence. If you do not specify a value for `category`, but specify a value for `line_category`, then the specified `line_category` value is used. If you do not specify either, then STRAIGHT is used.
            ///   - elementProperties:
            ///   - lineCategory: The category of the line to be created. *Deprecated*: use `category` instead. The exact line type created is determined based on the category and how it's routed to connect to other page elements. If you specify both a `category` and a `line_category`, the `category` takes precedence.
            ///   - objectId: A user-supplied object ID. If you specify an ID, it must be unique among all pages and page elements in the presentation. The ID must start with an alphanumeric character or an underscore (matches regex `[a-zA-Z0-9_]`); remaining characters may include those as well as a hyphen or colon (matches regex `[a-zA-Z0-9_-:]`). The length of the ID must not be less than 5 or greater than 50. If you don't specify an ID, a unique one is generated.
            public init(
                category: Components.Schemas.CreateLineRequest.CategoryPayload? = nil,
                elementProperties: Components.Schemas.PageElementProperties? = nil,
                lineCategory: Components.Schemas.CreateLineRequest.LineCategoryPayload? = nil,
                objectId: Swift.String? = nil
            ) {
                self.category = category
                self.elementProperties = elementProperties
                self.lineCategory = lineCategory
                self.objectId = objectId
            }
            public enum CodingKeys: String, CodingKey {
                case category
                case elementProperties
                case lineCategory
                case objectId
            }
        }
        /// The result of creating a line.
        ///
        /// - Remark: Generated from `#/components/schemas/CreateLineResponse`.
        public struct CreateLineResponse: Codable, Hashable, Sendable {
            /// The object ID of the created line.
            ///
            /// - Remark: Generated from `#/components/schemas/CreateLineResponse/objectId`.
            public var objectId: Swift.String?
            /// Creates a new `CreateLineResponse`.
            ///
            /// - Parameters:
            ///   - objectId: The object ID of the created line.
            public init(objectId: Swift.String? = nil) {
                self.objectId = objectId
            }
            public enum CodingKeys: String, CodingKey {
                case objectId
            }
        }
        /// Creates bullets for all of the paragraphs that overlap with the given text index range. The nesting level of each paragraph will be determined by counting leading tabs in front of each paragraph. To avoid excess space between the bullet and the corresponding paragraph, these leading tabs are removed by this request. This may change the indices of parts of the text. If the paragraph immediately before paragraphs being updated is in a list with a matching preset, the paragraphs being updated are added to that preceding list.
        ///
        /// - Remark: Generated from `#/components/schemas/CreateParagraphBulletsRequest`.
        public struct CreateParagraphBulletsRequest: Codable, Hashable, Sendable {
            /// The kinds of bullet glyphs to be used. Defaults to the `BULLET_DISC_CIRCLE_SQUARE` preset.
            ///
            /// - Remark: Generated from `#/components/schemas/CreateParagraphBulletsRequest/bulletPreset`.
            @frozen public enum BulletPresetPayload: String, Codable, Hashable, Sendable, CaseIterable {
                case bulletDiscCircleSquare = "BULLET_DISC_CIRCLE_SQUARE"
                case bulletDiamondxArrow3dSquare = "BULLET_DIAMONDX_ARROW3D_SQUARE"
                case bulletCheckbox = "BULLET_CHECKBOX"
                case bulletArrowDiamondDisc = "BULLET_ARROW_DIAMOND_DISC"
                case bulletStarCircleSquare = "BULLET_STAR_CIRCLE_SQUARE"
                case bulletArrow3dCircleSquare = "BULLET_ARROW3D_CIRCLE_SQUARE"
                case bulletLefttriangleDiamondDisc = "BULLET_LEFTTRIANGLE_DIAMOND_DISC"
                case bulletDiamondxHollowdiamondSquare = "BULLET_DIAMONDX_HOLLOWDIAMOND_SQUARE"
                case bulletDiamondCircleSquare = "BULLET_DIAMOND_CIRCLE_SQUARE"
                case numberedDigitAlphaRoman = "NUMBERED_DIGIT_ALPHA_ROMAN"
                case numberedDigitAlphaRomanParens = "NUMBERED_DIGIT_ALPHA_ROMAN_PARENS"
                case numberedDigitNested = "NUMBERED_DIGIT_NESTED"
                case numberedUpperalphaAlphaRoman = "NUMBERED_UPPERALPHA_ALPHA_ROMAN"
                case numberedUpperromanUpperalphaDigit = "NUMBERED_UPPERROMAN_UPPERALPHA_DIGIT"
                case numberedZerodigitAlphaRoman = "NUMBERED_ZERODIGIT_ALPHA_ROMAN"
            }
            /// The kinds of bullet glyphs to be used. Defaults to the `BULLET_DISC_CIRCLE_SQUARE` preset.
            ///
            /// - Remark: Generated from `#/components/schemas/CreateParagraphBulletsRequest/bulletPreset`.
            public var bulletPreset: Components.Schemas.CreateParagraphBulletsRequest.BulletPresetPayload?
            /// - Remark: Generated from `#/components/schemas/CreateParagraphBulletsRequest/cellLocation`.
            public var cellLocation: Components.Schemas.TableCellLocation?
            /// The object ID of the shape or table containing the text to add bullets to.
            ///
            /// - Remark: Generated from `#/components/schemas/CreateParagraphBulletsRequest/objectId`.
            public var objectId: Swift.String?
            /// - Remark: Generated from `#/components/schemas/CreateParagraphBulletsRequest/textRange`.
            public var textRange: Components.Schemas.Range?
            /// Creates a new `CreateParagraphBulletsRequest`.
            ///
            /// - Parameters:
            ///   - bulletPreset: The kinds of bullet glyphs to be used. Defaults to the `BULLET_DISC_CIRCLE_SQUARE` preset.
            ///   - cellLocation:
            ///   - objectId: The object ID of the shape or table containing the text to add bullets to.
            ///   - textRange:
            public init(
                bulletPreset: Components.Schemas.CreateParagraphBulletsRequest.BulletPresetPayload? = nil,
                cellLocation: Components.Schemas.TableCellLocation? = nil,
                objectId: Swift.String? = nil,
                textRange: Components.Schemas.Range? = nil
            ) {
                self.bulletPreset = bulletPreset
                self.cellLocation = cellLocation
                self.objectId = objectId
                self.textRange = textRange
            }
            public enum CodingKeys: String, CodingKey {
                case bulletPreset
                case cellLocation
                case objectId
                case textRange
            }
        }
        /// Creates a new shape.
        ///
        /// - Remark: Generated from `#/components/schemas/CreateShapeRequest`.
        public struct CreateShapeRequest: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/CreateShapeRequest/elementProperties`.
            public var elementProperties: Components.Schemas.PageElementProperties?
            /// A user-supplied object ID. If you specify an ID, it must be unique among all pages and page elements in the presentation. The ID must start with an alphanumeric character or an underscore (matches regex `[a-zA-Z0-9_]`); remaining characters may include those as well as a hyphen or colon (matches regex `[a-zA-Z0-9_-:]`). The length of the ID must not be less than 5 or greater than 50. If empty, a unique identifier will be generated.
            ///
            /// - Remark: Generated from `#/components/schemas/CreateShapeRequest/objectId`.
            public var objectId: Swift.String?
            /// The shape type.
            ///
            /// - Remark: Generated from `#/components/schemas/CreateShapeRequest/shapeType`.
            @frozen public enum ShapeTypePayload: String, Codable, Hashable, Sendable, CaseIterable {
                case typeUnspecified = "TYPE_UNSPECIFIED"
                case textBox = "TEXT_BOX"
                case rectangle = "RECTANGLE"
                case roundRectangle = "ROUND_RECTANGLE"
                case ellipse = "ELLIPSE"
                case arc = "ARC"
                case bentArrow = "BENT_ARROW"
                case bentUpArrow = "BENT_UP_ARROW"
                case bevel = "BEVEL"
                case blockArc = "BLOCK_ARC"
                case bracePair = "BRACE_PAIR"
                case bracketPair = "BRACKET_PAIR"
                case can = "CAN"
                case chevron = "CHEVRON"
                case chord = "CHORD"
                case cloud = "CLOUD"
                case corner = "CORNER"
                case cube = "CUBE"
                case curvedDownArrow = "CURVED_DOWN_ARROW"
                case curvedLeftArrow = "CURVED_LEFT_ARROW"
                case curvedRightArrow = "CURVED_RIGHT_ARROW"
                case curvedUpArrow = "CURVED_UP_ARROW"
                case decagon = "DECAGON"
                case diagonalStripe = "DIAGONAL_STRIPE"
                case diamond = "DIAMOND"
                case dodecagon = "DODECAGON"
                case donut = "DONUT"
                case doubleWave = "DOUBLE_WAVE"
                case downArrow = "DOWN_ARROW"
                case downArrowCallout = "DOWN_ARROW_CALLOUT"
                case foldedCorner = "FOLDED_CORNER"
                case frame = "FRAME"
                case halfFrame = "HALF_FRAME"
                case heart = "HEART"
                case heptagon = "HEPTAGON"
                case hexagon = "HEXAGON"
                case homePlate = "HOME_PLATE"
                case horizontalScroll = "HORIZONTAL_SCROLL"
                case irregularSeal1 = "IRREGULAR_SEAL_1"
                case irregularSeal2 = "IRREGULAR_SEAL_2"
                case leftArrow = "LEFT_ARROW"
                case leftArrowCallout = "LEFT_ARROW_CALLOUT"
                case leftBrace = "LEFT_BRACE"
                case leftBracket = "LEFT_BRACKET"
                case leftRightArrow = "LEFT_RIGHT_ARROW"
                case leftRightArrowCallout = "LEFT_RIGHT_ARROW_CALLOUT"
                case leftRightUpArrow = "LEFT_RIGHT_UP_ARROW"
                case leftUpArrow = "LEFT_UP_ARROW"
                case lightningBolt = "LIGHTNING_BOLT"
                case mathDivide = "MATH_DIVIDE"
                case mathEqual = "MATH_EQUAL"
                case mathMinus = "MATH_MINUS"
                case mathMultiply = "MATH_MULTIPLY"
                case mathNotEqual = "MATH_NOT_EQUAL"
                case mathPlus = "MATH_PLUS"
                case moon = "MOON"
                case noSmoking = "NO_SMOKING"
                case notchedRightArrow = "NOTCHED_RIGHT_ARROW"
                case octagon = "OCTAGON"
                case parallelogram = "PARALLELOGRAM"
                case pentagon = "PENTAGON"
                case pie = "PIE"
                case plaque = "PLAQUE"
                case plus = "PLUS"
                case quadArrow = "QUAD_ARROW"
                case quadArrowCallout = "QUAD_ARROW_CALLOUT"
                case ribbon = "RIBBON"
                case ribbon2 = "RIBBON_2"
                case rightArrow = "RIGHT_ARROW"
                case rightArrowCallout = "RIGHT_ARROW_CALLOUT"
                case rightBrace = "RIGHT_BRACE"
                case rightBracket = "RIGHT_BRACKET"
                case round1Rectangle = "ROUND_1_RECTANGLE"
                case round2DiagonalRectangle = "ROUND_2_DIAGONAL_RECTANGLE"
                case round2SameRectangle = "ROUND_2_SAME_RECTANGLE"
                case rightTriangle = "RIGHT_TRIANGLE"
                case smileyFace = "SMILEY_FACE"
                case snip1Rectangle = "SNIP_1_RECTANGLE"
                case snip2DiagonalRectangle = "SNIP_2_DIAGONAL_RECTANGLE"
                case snip2SameRectangle = "SNIP_2_SAME_RECTANGLE"
                case snipRoundRectangle = "SNIP_ROUND_RECTANGLE"
                case star10 = "STAR_10"
                case star12 = "STAR_12"
                case star16 = "STAR_16"
                case star24 = "STAR_24"
                case star32 = "STAR_32"
                case star4 = "STAR_4"
                case star5 = "STAR_5"
                case star6 = "STAR_6"
                case star7 = "STAR_7"
                case star8 = "STAR_8"
                case stripedRightArrow = "STRIPED_RIGHT_ARROW"
                case sun = "SUN"
                case trapezoid = "TRAPEZOID"
                case triangle = "TRIANGLE"
                case upArrow = "UP_ARROW"
                case upArrowCallout = "UP_ARROW_CALLOUT"
                case upDownArrow = "UP_DOWN_ARROW"
                case uturnArrow = "UTURN_ARROW"
                case verticalScroll = "VERTICAL_SCROLL"
                case wave = "WAVE"
                case wedgeEllipseCallout = "WEDGE_ELLIPSE_CALLOUT"
                case wedgeRectangleCallout = "WEDGE_RECTANGLE_CALLOUT"
                case wedgeRoundRectangleCallout = "WEDGE_ROUND_RECTANGLE_CALLOUT"
                case flowChartAlternateProcess = "FLOW_CHART_ALTERNATE_PROCESS"
                case flowChartCollate = "FLOW_CHART_COLLATE"
                case flowChartConnector = "FLOW_CHART_CONNECTOR"
                case flowChartDecision = "FLOW_CHART_DECISION"
                case flowChartDelay = "FLOW_CHART_DELAY"
                case flowChartDisplay = "FLOW_CHART_DISPLAY"
                case flowChartDocument = "FLOW_CHART_DOCUMENT"
                case flowChartExtract = "FLOW_CHART_EXTRACT"
                case flowChartInputOutput = "FLOW_CHART_INPUT_OUTPUT"
                case flowChartInternalStorage = "FLOW_CHART_INTERNAL_STORAGE"
                case flowChartMagneticDisk = "FLOW_CHART_MAGNETIC_DISK"
                case flowChartMagneticDrum = "FLOW_CHART_MAGNETIC_DRUM"
                case flowChartMagneticTape = "FLOW_CHART_MAGNETIC_TAPE"
                case flowChartManualInput = "FLOW_CHART_MANUAL_INPUT"
                case flowChartManualOperation = "FLOW_CHART_MANUAL_OPERATION"
                case flowChartMerge = "FLOW_CHART_MERGE"
                case flowChartMultidocument = "FLOW_CHART_MULTIDOCUMENT"
                case flowChartOfflineStorage = "FLOW_CHART_OFFLINE_STORAGE"
                case flowChartOffpageConnector = "FLOW_CHART_OFFPAGE_CONNECTOR"
                case flowChartOnlineStorage = "FLOW_CHART_ONLINE_STORAGE"
                case flowChartOr = "FLOW_CHART_OR"
                case flowChartPredefinedProcess = "FLOW_CHART_PREDEFINED_PROCESS"
                case flowChartPreparation = "FLOW_CHART_PREPARATION"
                case flowChartProcess = "FLOW_CHART_PROCESS"
                case flowChartPunchedCard = "FLOW_CHART_PUNCHED_CARD"
                case flowChartPunchedTape = "FLOW_CHART_PUNCHED_TAPE"
                case flowChartSort = "FLOW_CHART_SORT"
                case flowChartSummingJunction = "FLOW_CHART_SUMMING_JUNCTION"
                case flowChartTerminator = "FLOW_CHART_TERMINATOR"
                case arrowEast = "ARROW_EAST"
                case arrowNorthEast = "ARROW_NORTH_EAST"
                case arrowNorth = "ARROW_NORTH"
                case speech = "SPEECH"
                case starburst = "STARBURST"
                case teardrop = "TEARDROP"
                case ellipseRibbon = "ELLIPSE_RIBBON"
                case ellipseRibbon2 = "ELLIPSE_RIBBON_2"
                case cloudCallout = "CLOUD_CALLOUT"
                case custom = "CUSTOM"
            }
            /// The shape type.
            ///
            /// - Remark: Generated from `#/components/schemas/CreateShapeRequest/shapeType`.
            public var shapeType: Components.Schemas.CreateShapeRequest.ShapeTypePayload?
            /// Creates a new `CreateShapeRequest`.
            ///
            /// - Parameters:
            ///   - elementProperties:
            ///   - objectId: A user-supplied object ID. If you specify an ID, it must be unique among all pages and page elements in the presentation. The ID must start with an alphanumeric character or an underscore (matches regex `[a-zA-Z0-9_]`); remaining characters may include those as well as a hyphen or colon (matches regex `[a-zA-Z0-9_-:]`). The length of the ID must not be less than 5 or greater than 50. If empty, a unique identifier will be generated.
            ///   - shapeType: The shape type.
            public init(
                elementProperties: Components.Schemas.PageElementProperties? = nil,
                objectId: Swift.String? = nil,
                shapeType: Components.Schemas.CreateShapeRequest.ShapeTypePayload? = nil
            ) {
                self.elementProperties = elementProperties
                self.objectId = objectId
                self.shapeType = shapeType
            }
            public enum CodingKeys: String, CodingKey {
                case elementProperties
                case objectId
                case shapeType
            }
        }
        /// The result of creating a shape.
        ///
        /// - Remark: Generated from `#/components/schemas/CreateShapeResponse`.
        public struct CreateShapeResponse: Codable, Hashable, Sendable {
            /// The object ID of the created shape.
            ///
            /// - Remark: Generated from `#/components/schemas/CreateShapeResponse/objectId`.
            public var objectId: Swift.String?
            /// Creates a new `CreateShapeResponse`.
            ///
            /// - Parameters:
            ///   - objectId: The object ID of the created shape.
            public init(objectId: Swift.String? = nil) {
                self.objectId = objectId
            }
            public enum CodingKeys: String, CodingKey {
                case objectId
            }
        }
        /// Creates an embedded Google Sheets chart. NOTE: Chart creation requires at least one of the spreadsheets.readonly, spreadsheets, drive.readonly, drive.file, or drive OAuth scopes.
        ///
        /// - Remark: Generated from `#/components/schemas/CreateSheetsChartRequest`.
        public struct CreateSheetsChartRequest: Codable, Hashable, Sendable {
            /// The ID of the specific chart in the Google Sheets spreadsheet.
            ///
            /// - Remark: Generated from `#/components/schemas/CreateSheetsChartRequest/chartId`.
            public var chartId: Swift.Int32?
            /// - Remark: Generated from `#/components/schemas/CreateSheetsChartRequest/elementProperties`.
            public var elementProperties: Components.Schemas.PageElementProperties?
            /// The mode with which the chart is linked to the source spreadsheet. When not specified, the chart will be an image that is not linked.
            ///
            /// - Remark: Generated from `#/components/schemas/CreateSheetsChartRequest/linkingMode`.
            @frozen public enum LinkingModePayload: String, Codable, Hashable, Sendable, CaseIterable {
                case notLinkedImage = "NOT_LINKED_IMAGE"
                case linked = "LINKED"
            }
            /// The mode with which the chart is linked to the source spreadsheet. When not specified, the chart will be an image that is not linked.
            ///
            /// - Remark: Generated from `#/components/schemas/CreateSheetsChartRequest/linkingMode`.
            public var linkingMode: Components.Schemas.CreateSheetsChartRequest.LinkingModePayload?
            /// A user-supplied object ID. If specified, the ID must be unique among all pages and page elements in the presentation. The ID should start with a word character [a-zA-Z0-9_] and then followed by any number of the following characters [a-zA-Z0-9_-:]. The length of the ID should not be less than 5 or greater than 50. If empty, a unique identifier will be generated.
            ///
            /// - Remark: Generated from `#/components/schemas/CreateSheetsChartRequest/objectId`.
            public var objectId: Swift.String?
            /// The ID of the Google Sheets spreadsheet that contains the chart. You might need to add a resource key to the HTTP header for a subset of old files. For more information, see [Access link-shared files using resource keys](https://developers.google.com/drive/api/v3/resource-keys).
            ///
            /// - Remark: Generated from `#/components/schemas/CreateSheetsChartRequest/spreadsheetId`.
            public var spreadsheetId: Swift.String?
            /// Creates a new `CreateSheetsChartRequest`.
            ///
            /// - Parameters:
            ///   - chartId: The ID of the specific chart in the Google Sheets spreadsheet.
            ///   - elementProperties:
            ///   - linkingMode: The mode with which the chart is linked to the source spreadsheet. When not specified, the chart will be an image that is not linked.
            ///   - objectId: A user-supplied object ID. If specified, the ID must be unique among all pages and page elements in the presentation. The ID should start with a word character [a-zA-Z0-9_] and then followed by any number of the following characters [a-zA-Z0-9_-:]. The length of the ID should not be less than 5 or greater than 50. If empty, a unique identifier will be generated.
            ///   - spreadsheetId: The ID of the Google Sheets spreadsheet that contains the chart. You might need to add a resource key to the HTTP header for a subset of old files. For more information, see [Access link-shared files using resource keys](https://developers.google.com/drive/api/v3/resource-keys).
            public init(
                chartId: Swift.Int32? = nil,
                elementProperties: Components.Schemas.PageElementProperties? = nil,
                linkingMode: Components.Schemas.CreateSheetsChartRequest.LinkingModePayload? = nil,
                objectId: Swift.String? = nil,
                spreadsheetId: Swift.String? = nil
            ) {
                self.chartId = chartId
                self.elementProperties = elementProperties
                self.linkingMode = linkingMode
                self.objectId = objectId
                self.spreadsheetId = spreadsheetId
            }
            public enum CodingKeys: String, CodingKey {
                case chartId
                case elementProperties
                case linkingMode
                case objectId
                case spreadsheetId
            }
        }
        /// The result of creating an embedded Google Sheets chart.
        ///
        /// - Remark: Generated from `#/components/schemas/CreateSheetsChartResponse`.
        public struct CreateSheetsChartResponse: Codable, Hashable, Sendable {
            /// The object ID of the created chart.
            ///
            /// - Remark: Generated from `#/components/schemas/CreateSheetsChartResponse/objectId`.
            public var objectId: Swift.String?
            /// Creates a new `CreateSheetsChartResponse`.
            ///
            /// - Parameters:
            ///   - objectId: The object ID of the created chart.
            public init(objectId: Swift.String? = nil) {
                self.objectId = objectId
            }
            public enum CodingKeys: String, CodingKey {
                case objectId
            }
        }
        /// Creates a slide.
        ///
        /// - Remark: Generated from `#/components/schemas/CreateSlideRequest`.
        public struct CreateSlideRequest: Codable, Hashable, Sendable {
            /// The optional zero-based index indicating where to insert the slides. If you don't specify an index, the slide is created at the end.
            ///
            /// - Remark: Generated from `#/components/schemas/CreateSlideRequest/insertionIndex`.
            public var insertionIndex: Swift.Int32?
            /// A user-supplied object ID. If you specify an ID, it must be unique among all pages and page elements in the presentation. The ID must start with an alphanumeric character or an underscore (matches regex `[a-zA-Z0-9_]`); remaining characters may include those as well as a hyphen or colon (matches regex `[a-zA-Z0-9_-:]`). The ID length must be between 5 and 50 characters, inclusive. If you don't specify an ID, a unique one is generated.
            ///
            /// - Remark: Generated from `#/components/schemas/CreateSlideRequest/objectId`.
            public var objectId: Swift.String?
            /// An optional list of object ID mappings from the placeholder(s) on the layout to the placeholders that are created on the slide from the specified layout. Can only be used when `slide_layout_reference` is specified.
            ///
            /// - Remark: Generated from `#/components/schemas/CreateSlideRequest/placeholderIdMappings`.
            public var placeholderIdMappings: [Components.Schemas.LayoutPlaceholderIdMapping]?
            /// - Remark: Generated from `#/components/schemas/CreateSlideRequest/slideLayoutReference`.
            public var slideLayoutReference: Components.Schemas.LayoutReference?
            /// Creates a new `CreateSlideRequest`.
            ///
            /// - Parameters:
            ///   - insertionIndex: The optional zero-based index indicating where to insert the slides. If you don't specify an index, the slide is created at the end.
            ///   - objectId: A user-supplied object ID. If you specify an ID, it must be unique among all pages and page elements in the presentation. The ID must start with an alphanumeric character or an underscore (matches regex `[a-zA-Z0-9_]`); remaining characters may include those as well as a hyphen or colon (matches regex `[a-zA-Z0-9_-:]`). The ID length must be between 5 and 50 characters, inclusive. If you don't specify an ID, a unique one is generated.
            ///   - placeholderIdMappings: An optional list of object ID mappings from the placeholder(s) on the layout to the placeholders that are created on the slide from the specified layout. Can only be used when `slide_layout_reference` is specified.
            ///   - slideLayoutReference:
            public init(
                insertionIndex: Swift.Int32? = nil,
                objectId: Swift.String? = nil,
                placeholderIdMappings: [Components.Schemas.LayoutPlaceholderIdMapping]? = nil,
                slideLayoutReference: Components.Schemas.LayoutReference? = nil
            ) {
                self.insertionIndex = insertionIndex
                self.objectId = objectId
                self.placeholderIdMappings = placeholderIdMappings
                self.slideLayoutReference = slideLayoutReference
            }
            public enum CodingKeys: String, CodingKey {
                case insertionIndex
                case objectId
                case placeholderIdMappings
                case slideLayoutReference
            }
        }
        /// The result of creating a slide.
        ///
        /// - Remark: Generated from `#/components/schemas/CreateSlideResponse`.
        public struct CreateSlideResponse: Codable, Hashable, Sendable {
            /// The object ID of the created slide.
            ///
            /// - Remark: Generated from `#/components/schemas/CreateSlideResponse/objectId`.
            public var objectId: Swift.String?
            /// Creates a new `CreateSlideResponse`.
            ///
            /// - Parameters:
            ///   - objectId: The object ID of the created slide.
            public init(objectId: Swift.String? = nil) {
                self.objectId = objectId
            }
            public enum CodingKeys: String, CodingKey {
                case objectId
            }
        }
        /// Creates a new table.
        ///
        /// - Remark: Generated from `#/components/schemas/CreateTableRequest`.
        public struct CreateTableRequest: Codable, Hashable, Sendable {
            /// Number of columns in the table.
            ///
            /// - Remark: Generated from `#/components/schemas/CreateTableRequest/columns`.
            public var columns: Swift.Int32?
            /// - Remark: Generated from `#/components/schemas/CreateTableRequest/elementProperties`.
            public var elementProperties: Components.Schemas.PageElementProperties?
            /// A user-supplied object ID. If you specify an ID, it must be unique among all pages and page elements in the presentation. The ID must start with an alphanumeric character or an underscore (matches regex `[a-zA-Z0-9_]`); remaining characters may include those as well as a hyphen or colon (matches regex `[a-zA-Z0-9_-:]`). The length of the ID must not be less than 5 or greater than 50. If you don't specify an ID, a unique one is generated.
            ///
            /// - Remark: Generated from `#/components/schemas/CreateTableRequest/objectId`.
            public var objectId: Swift.String?
            /// Number of rows in the table.
            ///
            /// - Remark: Generated from `#/components/schemas/CreateTableRequest/rows`.
            public var rows: Swift.Int32?
            /// Creates a new `CreateTableRequest`.
            ///
            /// - Parameters:
            ///   - columns: Number of columns in the table.
            ///   - elementProperties:
            ///   - objectId: A user-supplied object ID. If you specify an ID, it must be unique among all pages and page elements in the presentation. The ID must start with an alphanumeric character or an underscore (matches regex `[a-zA-Z0-9_]`); remaining characters may include those as well as a hyphen or colon (matches regex `[a-zA-Z0-9_-:]`). The length of the ID must not be less than 5 or greater than 50. If you don't specify an ID, a unique one is generated.
            ///   - rows: Number of rows in the table.
            public init(
                columns: Swift.Int32? = nil,
                elementProperties: Components.Schemas.PageElementProperties? = nil,
                objectId: Swift.String? = nil,
                rows: Swift.Int32? = nil
            ) {
                self.columns = columns
                self.elementProperties = elementProperties
                self.objectId = objectId
                self.rows = rows
            }
            public enum CodingKeys: String, CodingKey {
                case columns
                case elementProperties
                case objectId
                case rows
            }
        }
        /// The result of creating a table.
        ///
        /// - Remark: Generated from `#/components/schemas/CreateTableResponse`.
        public struct CreateTableResponse: Codable, Hashable, Sendable {
            /// The object ID of the created table.
            ///
            /// - Remark: Generated from `#/components/schemas/CreateTableResponse/objectId`.
            public var objectId: Swift.String?
            /// Creates a new `CreateTableResponse`.
            ///
            /// - Parameters:
            ///   - objectId: The object ID of the created table.
            public init(objectId: Swift.String? = nil) {
                self.objectId = objectId
            }
            public enum CodingKeys: String, CodingKey {
                case objectId
            }
        }
        /// Creates a video. NOTE: Creating a video from Google Drive requires that the requesting app have at least one of the drive, drive.readonly, or drive.file OAuth scopes.
        ///
        /// - Remark: Generated from `#/components/schemas/CreateVideoRequest`.
        public struct CreateVideoRequest: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/CreateVideoRequest/elementProperties`.
            public var elementProperties: Components.Schemas.PageElementProperties?
            /// The video source's unique identifier for this video. e.g. For YouTube video https://www.youtube.com/watch?v=7U3axjORYZ0, the ID is 7U3axjORYZ0. For a Google Drive video https://drive.google.com/file/d/1xCgQLFTJi5_Xl8DgW_lcUYq5e-q6Hi5Q the ID is 1xCgQLFTJi5_Xl8DgW_lcUYq5e-q6Hi5Q. To access a Google Drive video file, you might need to add a resource key to the HTTP header for a subset of old files. For more information, see [Access link-shared files using resource keys](https://developers.google.com/drive/api/v3/resource-keys).
            ///
            /// - Remark: Generated from `#/components/schemas/CreateVideoRequest/id`.
            public var id: Swift.String?
            /// A user-supplied object ID. If you specify an ID, it must be unique among all pages and page elements in the presentation. The ID must start with an alphanumeric character or an underscore (matches regex `[a-zA-Z0-9_]`); remaining characters may include those as well as a hyphen or colon (matches regex `[a-zA-Z0-9_-:]`). The length of the ID must not be less than 5 or greater than 50. If you don't specify an ID, a unique one is generated.
            ///
            /// - Remark: Generated from `#/components/schemas/CreateVideoRequest/objectId`.
            public var objectId: Swift.String?
            /// The video source.
            ///
            /// - Remark: Generated from `#/components/schemas/CreateVideoRequest/source`.
            @frozen public enum SourcePayload: String, Codable, Hashable, Sendable, CaseIterable {
                case sourceUnspecified = "SOURCE_UNSPECIFIED"
                case youtube = "YOUTUBE"
                case drive = "DRIVE"
            }
            /// The video source.
            ///
            /// - Remark: Generated from `#/components/schemas/CreateVideoRequest/source`.
            public var source: Components.Schemas.CreateVideoRequest.SourcePayload?
            /// Creates a new `CreateVideoRequest`.
            ///
            /// - Parameters:
            ///   - elementProperties:
            ///   - id: The video source's unique identifier for this video. e.g. For YouTube video https://www.youtube.com/watch?v=7U3axjORYZ0, the ID is 7U3axjORYZ0. For a Google Drive video https://drive.google.com/file/d/1xCgQLFTJi5_Xl8DgW_lcUYq5e-q6Hi5Q the ID is 1xCgQLFTJi5_Xl8DgW_lcUYq5e-q6Hi5Q. To access a Google Drive video file, you might need to add a resource key to the HTTP header for a subset of old files. For more information, see [Access link-shared files using resource keys](https://developers.google.com/drive/api/v3/resource-keys).
            ///   - objectId: A user-supplied object ID. If you specify an ID, it must be unique among all pages and page elements in the presentation. The ID must start with an alphanumeric character or an underscore (matches regex `[a-zA-Z0-9_]`); remaining characters may include those as well as a hyphen or colon (matches regex `[a-zA-Z0-9_-:]`). The length of the ID must not be less than 5 or greater than 50. If you don't specify an ID, a unique one is generated.
            ///   - source: The video source.
            public init(
                elementProperties: Components.Schemas.PageElementProperties? = nil,
                id: Swift.String? = nil,
                objectId: Swift.String? = nil,
                source: Components.Schemas.CreateVideoRequest.SourcePayload? = nil
            ) {
                self.elementProperties = elementProperties
                self.id = id
                self.objectId = objectId
                self.source = source
            }
            public enum CodingKeys: String, CodingKey {
                case elementProperties
                case id
                case objectId
                case source
            }
        }
        /// The result of creating a video.
        ///
        /// - Remark: Generated from `#/components/schemas/CreateVideoResponse`.
        public struct CreateVideoResponse: Codable, Hashable, Sendable {
            /// The object ID of the created video.
            ///
            /// - Remark: Generated from `#/components/schemas/CreateVideoResponse/objectId`.
            public var objectId: Swift.String?
            /// Creates a new `CreateVideoResponse`.
            ///
            /// - Parameters:
            ///   - objectId: The object ID of the created video.
            public init(objectId: Swift.String? = nil) {
                self.objectId = objectId
            }
            public enum CodingKeys: String, CodingKey {
                case objectId
            }
        }
        /// The crop properties of an object enclosed in a container. For example, an Image. The crop properties is represented by the offsets of four edges which define a crop rectangle. The offsets are measured in percentage from the corresponding edges of the object's original bounding rectangle towards inside, relative to the object's original dimensions. - If the offset is in the interval (0, 1), the corresponding edge of crop rectangle is positioned inside of the object's original bounding rectangle. - If the offset is negative or greater than 1, the corresponding edge of crop rectangle is positioned outside of the object's original bounding rectangle. - If the left edge of the crop rectangle is on the right side of its right edge, the object will be flipped horizontally. - If the top edge of the crop rectangle is below its bottom edge, the object will be flipped vertically. - If all offsets and rotation angle is 0, the object is not cropped. After cropping, the content in the crop rectangle will be stretched to fit its container.
        ///
        /// - Remark: Generated from `#/components/schemas/CropProperties`.
        public struct CropProperties: Codable, Hashable, Sendable {
            /// The rotation angle of the crop window around its center, in radians. Rotation angle is applied after the offset.
            ///
            /// - Remark: Generated from `#/components/schemas/CropProperties/angle`.
            public var angle: Swift.Float?
            /// The offset specifies the bottom edge of the crop rectangle that is located above the original bounding rectangle bottom edge, relative to the object's original height.
            ///
            /// - Remark: Generated from `#/components/schemas/CropProperties/bottomOffset`.
            public var bottomOffset: Swift.Float?
            /// The offset specifies the left edge of the crop rectangle that is located to the right of the original bounding rectangle left edge, relative to the object's original width.
            ///
            /// - Remark: Generated from `#/components/schemas/CropProperties/leftOffset`.
            public var leftOffset: Swift.Float?
            /// The offset specifies the right edge of the crop rectangle that is located to the left of the original bounding rectangle right edge, relative to the object's original width.
            ///
            /// - Remark: Generated from `#/components/schemas/CropProperties/rightOffset`.
            public var rightOffset: Swift.Float?
            /// The offset specifies the top edge of the crop rectangle that is located below the original bounding rectangle top edge, relative to the object's original height.
            ///
            /// - Remark: Generated from `#/components/schemas/CropProperties/topOffset`.
            public var topOffset: Swift.Float?
            /// Creates a new `CropProperties`.
            ///
            /// - Parameters:
            ///   - angle: The rotation angle of the crop window around its center, in radians. Rotation angle is applied after the offset.
            ///   - bottomOffset: The offset specifies the bottom edge of the crop rectangle that is located above the original bounding rectangle bottom edge, relative to the object's original height.
            ///   - leftOffset: The offset specifies the left edge of the crop rectangle that is located to the right of the original bounding rectangle left edge, relative to the object's original width.
            ///   - rightOffset: The offset specifies the right edge of the crop rectangle that is located to the left of the original bounding rectangle right edge, relative to the object's original width.
            ///   - topOffset: The offset specifies the top edge of the crop rectangle that is located below the original bounding rectangle top edge, relative to the object's original height.
            public init(
                angle: Swift.Float? = nil,
                bottomOffset: Swift.Float? = nil,
                leftOffset: Swift.Float? = nil,
                rightOffset: Swift.Float? = nil,
                topOffset: Swift.Float? = nil
            ) {
                self.angle = angle
                self.bottomOffset = bottomOffset
                self.leftOffset = leftOffset
                self.rightOffset = rightOffset
                self.topOffset = topOffset
            }
            public enum CodingKeys: String, CodingKey {
                case angle
                case bottomOffset
                case leftOffset
                case rightOffset
                case topOffset
            }
        }
        /// Deletes an object, either pages or page elements, from the presentation.
        ///
        /// - Remark: Generated from `#/components/schemas/DeleteObjectRequest`.
        public struct DeleteObjectRequest: Codable, Hashable, Sendable {
            /// The object ID of the page or page element to delete. If after a delete operation a group contains only 1 or no page elements, the group is also deleted. If a placeholder is deleted on a layout, any empty inheriting placeholders are also deleted.
            ///
            /// - Remark: Generated from `#/components/schemas/DeleteObjectRequest/objectId`.
            public var objectId: Swift.String?
            /// Creates a new `DeleteObjectRequest`.
            ///
            /// - Parameters:
            ///   - objectId: The object ID of the page or page element to delete. If after a delete operation a group contains only 1 or no page elements, the group is also deleted. If a placeholder is deleted on a layout, any empty inheriting placeholders are also deleted.
            public init(objectId: Swift.String? = nil) {
                self.objectId = objectId
            }
            public enum CodingKeys: String, CodingKey {
                case objectId
            }
        }
        /// Deletes bullets from all of the paragraphs that overlap with the given text index range. The nesting level of each paragraph will be visually preserved by adding indent to the start of the corresponding paragraph.
        ///
        /// - Remark: Generated from `#/components/schemas/DeleteParagraphBulletsRequest`.
        public struct DeleteParagraphBulletsRequest: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/DeleteParagraphBulletsRequest/cellLocation`.
            public var cellLocation: Components.Schemas.TableCellLocation?
            /// The object ID of the shape or table containing the text to delete bullets from.
            ///
            /// - Remark: Generated from `#/components/schemas/DeleteParagraphBulletsRequest/objectId`.
            public var objectId: Swift.String?
            /// - Remark: Generated from `#/components/schemas/DeleteParagraphBulletsRequest/textRange`.
            public var textRange: Components.Schemas.Range?
            /// Creates a new `DeleteParagraphBulletsRequest`.
            ///
            /// - Parameters:
            ///   - cellLocation:
            ///   - objectId: The object ID of the shape or table containing the text to delete bullets from.
            ///   - textRange:
            public init(
                cellLocation: Components.Schemas.TableCellLocation? = nil,
                objectId: Swift.String? = nil,
                textRange: Components.Schemas.Range? = nil
            ) {
                self.cellLocation = cellLocation
                self.objectId = objectId
                self.textRange = textRange
            }
            public enum CodingKeys: String, CodingKey {
                case cellLocation
                case objectId
                case textRange
            }
        }
        /// Deletes a column from a table.
        ///
        /// - Remark: Generated from `#/components/schemas/DeleteTableColumnRequest`.
        public struct DeleteTableColumnRequest: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/DeleteTableColumnRequest/cellLocation`.
            public var cellLocation: Components.Schemas.TableCellLocation?
            /// The table to delete columns from.
            ///
            /// - Remark: Generated from `#/components/schemas/DeleteTableColumnRequest/tableObjectId`.
            public var tableObjectId: Swift.String?
            /// Creates a new `DeleteTableColumnRequest`.
            ///
            /// - Parameters:
            ///   - cellLocation:
            ///   - tableObjectId: The table to delete columns from.
            public init(
                cellLocation: Components.Schemas.TableCellLocation? = nil,
                tableObjectId: Swift.String? = nil
            ) {
                self.cellLocation = cellLocation
                self.tableObjectId = tableObjectId
            }
            public enum CodingKeys: String, CodingKey {
                case cellLocation
                case tableObjectId
            }
        }
        /// Deletes a row from a table.
        ///
        /// - Remark: Generated from `#/components/schemas/DeleteTableRowRequest`.
        public struct DeleteTableRowRequest: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/DeleteTableRowRequest/cellLocation`.
            public var cellLocation: Components.Schemas.TableCellLocation?
            /// The table to delete rows from.
            ///
            /// - Remark: Generated from `#/components/schemas/DeleteTableRowRequest/tableObjectId`.
            public var tableObjectId: Swift.String?
            /// Creates a new `DeleteTableRowRequest`.
            ///
            /// - Parameters:
            ///   - cellLocation:
            ///   - tableObjectId: The table to delete rows from.
            public init(
                cellLocation: Components.Schemas.TableCellLocation? = nil,
                tableObjectId: Swift.String? = nil
            ) {
                self.cellLocation = cellLocation
                self.tableObjectId = tableObjectId
            }
            public enum CodingKeys: String, CodingKey {
                case cellLocation
                case tableObjectId
            }
        }
        /// Deletes text from a shape or a table cell.
        ///
        /// - Remark: Generated from `#/components/schemas/DeleteTextRequest`.
        public struct DeleteTextRequest: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/DeleteTextRequest/cellLocation`.
            public var cellLocation: Components.Schemas.TableCellLocation?
            /// The object ID of the shape or table from which the text will be deleted.
            ///
            /// - Remark: Generated from `#/components/schemas/DeleteTextRequest/objectId`.
            public var objectId: Swift.String?
            /// - Remark: Generated from `#/components/schemas/DeleteTextRequest/textRange`.
            public var textRange: Components.Schemas.Range?
            /// Creates a new `DeleteTextRequest`.
            ///
            /// - Parameters:
            ///   - cellLocation:
            ///   - objectId: The object ID of the shape or table from which the text will be deleted.
            ///   - textRange:
            public init(
                cellLocation: Components.Schemas.TableCellLocation? = nil,
                objectId: Swift.String? = nil,
                textRange: Components.Schemas.Range? = nil
            ) {
                self.cellLocation = cellLocation
                self.objectId = objectId
                self.textRange = textRange
            }
            public enum CodingKeys: String, CodingKey {
                case cellLocation
                case objectId
                case textRange
            }
        }
        /// A magnitude in a single direction in the specified units.
        ///
        /// - Remark: Generated from `#/components/schemas/Dimension`.
        public struct Dimension: Codable, Hashable, Sendable {
            /// The magnitude.
            ///
            /// - Remark: Generated from `#/components/schemas/Dimension/magnitude`.
            public var magnitude: Swift.Double?
            /// The units for magnitude.
            ///
            /// - Remark: Generated from `#/components/schemas/Dimension/unit`.
            @frozen public enum UnitPayload: String, Codable, Hashable, Sendable, CaseIterable {
                case unitUnspecified = "UNIT_UNSPECIFIED"
                case emu = "EMU"
                case pt = "PT"
            }
            /// The units for magnitude.
            ///
            /// - Remark: Generated from `#/components/schemas/Dimension/unit`.
            public var unit: Components.Schemas.Dimension.UnitPayload?
            /// Creates a new `Dimension`.
            ///
            /// - Parameters:
            ///   - magnitude: The magnitude.
            ///   - unit: The units for magnitude.
            public init(
                magnitude: Swift.Double? = nil,
                unit: Components.Schemas.Dimension.UnitPayload? = nil
            ) {
                self.magnitude = magnitude
                self.unit = unit
            }
            public enum CodingKeys: String, CodingKey {
                case magnitude
                case unit
            }
        }
        /// Duplicates a slide or page element. When duplicating a slide, the duplicate slide will be created immediately following the specified slide. When duplicating a page element, the duplicate will be placed on the same page at the same position as the original.
        ///
        /// - Remark: Generated from `#/components/schemas/DuplicateObjectRequest`.
        public struct DuplicateObjectRequest: Codable, Hashable, Sendable {
            /// The ID of the object to duplicate.
            ///
            /// - Remark: Generated from `#/components/schemas/DuplicateObjectRequest/objectId`.
            public var objectId: Swift.String?
            /// The object being duplicated may contain other objects, for example when duplicating a slide or a group page element. This map defines how the IDs of duplicated objects are generated: the keys are the IDs of the original objects and its values are the IDs that will be assigned to the corresponding duplicate object. The ID of the source object's duplicate may be specified in this map as well, using the same value of the `object_id` field as a key and the newly desired ID as the value. All keys must correspond to existing IDs in the presentation. All values must be unique in the presentation and must start with an alphanumeric character or an underscore (matches regex `[a-zA-Z0-9_]`); remaining characters may include those as well as a hyphen or colon (matches regex `[a-zA-Z0-9_-:]`). The length of the new ID must not be less than 5 or greater than 50. If any IDs of source objects are omitted from the map, a new random ID will be assigned. If the map is empty or unset, all duplicate objects will receive a new random ID.
            ///
            /// - Remark: Generated from `#/components/schemas/DuplicateObjectRequest/objectIds`.
            public struct ObjectIdsPayload: Codable, Hashable, Sendable {
                /// A container of undocumented properties.
                public var additionalProperties: [String: Swift.String]
                /// Creates a new `ObjectIdsPayload`.
                ///
                /// - Parameters:
                ///   - additionalProperties: A container of undocumented properties.
                public init(additionalProperties: [String: Swift.String] = .init()) {
                    self.additionalProperties = additionalProperties
                }
                public init(from decoder: any Decoder) throws {
                    additionalProperties = try decoder.decodeAdditionalProperties(knownKeys: [])
                }
                public func encode(to encoder: any Encoder) throws {
                    try encoder.encodeAdditionalProperties(additionalProperties)
                }
            }
            /// The object being duplicated may contain other objects, for example when duplicating a slide or a group page element. This map defines how the IDs of duplicated objects are generated: the keys are the IDs of the original objects and its values are the IDs that will be assigned to the corresponding duplicate object. The ID of the source object's duplicate may be specified in this map as well, using the same value of the `object_id` field as a key and the newly desired ID as the value. All keys must correspond to existing IDs in the presentation. All values must be unique in the presentation and must start with an alphanumeric character or an underscore (matches regex `[a-zA-Z0-9_]`); remaining characters may include those as well as a hyphen or colon (matches regex `[a-zA-Z0-9_-:]`). The length of the new ID must not be less than 5 or greater than 50. If any IDs of source objects are omitted from the map, a new random ID will be assigned. If the map is empty or unset, all duplicate objects will receive a new random ID.
            ///
            /// - Remark: Generated from `#/components/schemas/DuplicateObjectRequest/objectIds`.
            public var objectIds: Components.Schemas.DuplicateObjectRequest.ObjectIdsPayload?
            /// Creates a new `DuplicateObjectRequest`.
            ///
            /// - Parameters:
            ///   - objectId: The ID of the object to duplicate.
            ///   - objectIds: The object being duplicated may contain other objects, for example when duplicating a slide or a group page element. This map defines how the IDs of duplicated objects are generated: the keys are the IDs of the original objects and its values are the IDs that will be assigned to the corresponding duplicate object. The ID of the source object's duplicate may be specified in this map as well, using the same value of the `object_id` field as a key and the newly desired ID as the value. All keys must correspond to existing IDs in the presentation. All values must be unique in the presentation and must start with an alphanumeric character or an underscore (matches regex `[a-zA-Z0-9_]`); remaining characters may include those as well as a hyphen or colon (matches regex `[a-zA-Z0-9_-:]`). The length of the new ID must not be less than 5 or greater than 50. If any IDs of source objects are omitted from the map, a new random ID will be assigned. If the map is empty or unset, all duplicate objects will receive a new random ID.
            public init(
                objectId: Swift.String? = nil,
                objectIds: Components.Schemas.DuplicateObjectRequest.ObjectIdsPayload? = nil
            ) {
                self.objectId = objectId
                self.objectIds = objectIds
            }
            public enum CodingKeys: String, CodingKey {
                case objectId
                case objectIds
            }
        }
        /// The response of duplicating an object.
        ///
        /// - Remark: Generated from `#/components/schemas/DuplicateObjectResponse`.
        public struct DuplicateObjectResponse: Codable, Hashable, Sendable {
            /// The ID of the new duplicate object.
            ///
            /// - Remark: Generated from `#/components/schemas/DuplicateObjectResponse/objectId`.
            public var objectId: Swift.String?
            /// Creates a new `DuplicateObjectResponse`.
            ///
            /// - Parameters:
            ///   - objectId: The ID of the new duplicate object.
            public init(objectId: Swift.String? = nil) {
                self.objectId = objectId
            }
            public enum CodingKeys: String, CodingKey {
                case objectId
            }
        }
        /// A PageElement kind representing a joined collection of PageElements.
        ///
        /// - Remark: Generated from `#/components/schemas/Group`.
        public struct Group: Codable, Hashable, Sendable {
            /// The collection of elements in the group. The minimum size of a group is 2.
            ///
            /// - Remark: Generated from `#/components/schemas/Group/children`.
            public var children: [Components.Schemas.PageElement]?
            /// Creates a new `Group`.
            ///
            /// - Parameters:
            ///   - children: The collection of elements in the group. The minimum size of a group is 2.
            public init(children: [Components.Schemas.PageElement]? = nil) {
                self.children = children
            }
            public enum CodingKeys: String, CodingKey {
                case children
            }
        }
        /// Groups objects to create an object group. For example, groups PageElements to create a Group on the same page as all the children.
        ///
        /// - Remark: Generated from `#/components/schemas/GroupObjectsRequest`.
        public struct GroupObjectsRequest: Codable, Hashable, Sendable {
            /// The object IDs of the objects to group. Only page elements can be grouped. There should be at least two page elements on the same page that are not already in another group. Some page elements, such as videos, tables and placeholders cannot be grouped.
            ///
            /// - Remark: Generated from `#/components/schemas/GroupObjectsRequest/childrenObjectIds`.
            public var childrenObjectIds: [Swift.String]?
            /// A user-supplied object ID for the group to be created. If you specify an ID, it must be unique among all pages and page elements in the presentation. The ID must start with an alphanumeric character or an underscore (matches regex `[a-zA-Z0-9_]`); remaining characters may include those as well as a hyphen or colon (matches regex `[a-zA-Z0-9_-:]`). The length of the ID must not be less than 5 or greater than 50. If you don't specify an ID, a unique one is generated.
            ///
            /// - Remark: Generated from `#/components/schemas/GroupObjectsRequest/groupObjectId`.
            public var groupObjectId: Swift.String?
            /// Creates a new `GroupObjectsRequest`.
            ///
            /// - Parameters:
            ///   - childrenObjectIds: The object IDs of the objects to group. Only page elements can be grouped. There should be at least two page elements on the same page that are not already in another group. Some page elements, such as videos, tables and placeholders cannot be grouped.
            ///   - groupObjectId: A user-supplied object ID for the group to be created. If you specify an ID, it must be unique among all pages and page elements in the presentation. The ID must start with an alphanumeric character or an underscore (matches regex `[a-zA-Z0-9_]`); remaining characters may include those as well as a hyphen or colon (matches regex `[a-zA-Z0-9_-:]`). The length of the ID must not be less than 5 or greater than 50. If you don't specify an ID, a unique one is generated.
            public init(
                childrenObjectIds: [Swift.String]? = nil,
                groupObjectId: Swift.String? = nil
            ) {
                self.childrenObjectIds = childrenObjectIds
                self.groupObjectId = groupObjectId
            }
            public enum CodingKeys: String, CodingKey {
                case childrenObjectIds
                case groupObjectId
            }
        }
        /// The result of grouping objects.
        ///
        /// - Remark: Generated from `#/components/schemas/GroupObjectsResponse`.
        public struct GroupObjectsResponse: Codable, Hashable, Sendable {
            /// The object ID of the created group.
            ///
            /// - Remark: Generated from `#/components/schemas/GroupObjectsResponse/objectId`.
            public var objectId: Swift.String?
            /// Creates a new `GroupObjectsResponse`.
            ///
            /// - Parameters:
            ///   - objectId: The object ID of the created group.
            public init(objectId: Swift.String? = nil) {
                self.objectId = objectId
            }
            public enum CodingKeys: String, CodingKey {
                case objectId
            }
        }
        /// A PageElement kind representing an image.
        ///
        /// - Remark: Generated from `#/components/schemas/Image`.
        public struct Image: Codable, Hashable, Sendable {
            /// An URL to an image with a default lifetime of 30 minutes. This URL is tagged with the account of the requester. Anyone with the URL effectively accesses the image as the original requester. Access to the image may be lost if the presentation's sharing settings change.
            ///
            /// - Remark: Generated from `#/components/schemas/Image/contentUrl`.
            public var contentUrl: Swift.String?
            /// - Remark: Generated from `#/components/schemas/Image/imageProperties`.
            public var imageProperties: Components.Schemas.ImageProperties?
            /// - Remark: Generated from `#/components/schemas/Image/placeholder`.
            public var placeholder: Components.Schemas.Placeholder?
            /// The source URL is the URL used to insert the image. The source URL can be empty.
            ///
            /// - Remark: Generated from `#/components/schemas/Image/sourceUrl`.
            public var sourceUrl: Swift.String?
            /// Creates a new `Image`.
            ///
            /// - Parameters:
            ///   - contentUrl: An URL to an image with a default lifetime of 30 minutes. This URL is tagged with the account of the requester. Anyone with the URL effectively accesses the image as the original requester. Access to the image may be lost if the presentation's sharing settings change.
            ///   - imageProperties:
            ///   - placeholder:
            ///   - sourceUrl: The source URL is the URL used to insert the image. The source URL can be empty.
            public init(
                contentUrl: Swift.String? = nil,
                imageProperties: Components.Schemas.ImageProperties? = nil,
                placeholder: Components.Schemas.Placeholder? = nil,
                sourceUrl: Swift.String? = nil
            ) {
                self.contentUrl = contentUrl
                self.imageProperties = imageProperties
                self.placeholder = placeholder
                self.sourceUrl = sourceUrl
            }
            public enum CodingKeys: String, CodingKey {
                case contentUrl
                case imageProperties
                case placeholder
                case sourceUrl
            }
        }
        /// The properties of the Image.
        ///
        /// - Remark: Generated from `#/components/schemas/ImageProperties`.
        public struct ImageProperties: Codable, Hashable, Sendable {
            /// The brightness effect of the image. The value should be in the interval [-1.0, 1.0], where 0 means no effect. This property is read-only.
            ///
            /// - Remark: Generated from `#/components/schemas/ImageProperties/brightness`.
            public var brightness: Swift.Float?
            /// The contrast effect of the image. The value should be in the interval [-1.0, 1.0], where 0 means no effect. This property is read-only.
            ///
            /// - Remark: Generated from `#/components/schemas/ImageProperties/contrast`.
            public var contrast: Swift.Float?
            /// - Remark: Generated from `#/components/schemas/ImageProperties/cropProperties`.
            public var cropProperties: Components.Schemas.CropProperties?
            /// - Remark: Generated from `#/components/schemas/ImageProperties/link`.
            public var link: Components.Schemas.Link?
            /// - Remark: Generated from `#/components/schemas/ImageProperties/outline`.
            public var outline: Components.Schemas.Outline?
            /// - Remark: Generated from `#/components/schemas/ImageProperties/recolor`.
            public var recolor: Components.Schemas.Recolor?
            /// - Remark: Generated from `#/components/schemas/ImageProperties/shadow`.
            public var shadow: Components.Schemas.Shadow?
            /// The transparency effect of the image. The value should be in the interval [0.0, 1.0], where 0 means no effect and 1 means completely transparent. This property is read-only.
            ///
            /// - Remark: Generated from `#/components/schemas/ImageProperties/transparency`.
            public var transparency: Swift.Float?
            /// Creates a new `ImageProperties`.
            ///
            /// - Parameters:
            ///   - brightness: The brightness effect of the image. The value should be in the interval [-1.0, 1.0], where 0 means no effect. This property is read-only.
            ///   - contrast: The contrast effect of the image. The value should be in the interval [-1.0, 1.0], where 0 means no effect. This property is read-only.
            ///   - cropProperties:
            ///   - link:
            ///   - outline:
            ///   - recolor:
            ///   - shadow:
            ///   - transparency: The transparency effect of the image. The value should be in the interval [0.0, 1.0], where 0 means no effect and 1 means completely transparent. This property is read-only.
            public init(
                brightness: Swift.Float? = nil,
                contrast: Swift.Float? = nil,
                cropProperties: Components.Schemas.CropProperties? = nil,
                link: Components.Schemas.Link? = nil,
                outline: Components.Schemas.Outline? = nil,
                recolor: Components.Schemas.Recolor? = nil,
                shadow: Components.Schemas.Shadow? = nil,
                transparency: Swift.Float? = nil
            ) {
                self.brightness = brightness
                self.contrast = contrast
                self.cropProperties = cropProperties
                self.link = link
                self.outline = outline
                self.recolor = recolor
                self.shadow = shadow
                self.transparency = transparency
            }
            public enum CodingKeys: String, CodingKey {
                case brightness
                case contrast
                case cropProperties
                case link
                case outline
                case recolor
                case shadow
                case transparency
            }
        }
        /// Inserts columns into a table. Other columns in the table will be resized to fit the new column.
        ///
        /// - Remark: Generated from `#/components/schemas/InsertTableColumnsRequest`.
        public struct InsertTableColumnsRequest: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/InsertTableColumnsRequest/cellLocation`.
            public var cellLocation: Components.Schemas.TableCellLocation?
            /// Whether to insert new columns to the right of the reference cell location. - `True`: insert to the right. - `False`: insert to the left.
            ///
            /// - Remark: Generated from `#/components/schemas/InsertTableColumnsRequest/insertRight`.
            public var insertRight: Swift.Bool?
            /// The number of columns to be inserted. Maximum 20 per request.
            ///
            /// - Remark: Generated from `#/components/schemas/InsertTableColumnsRequest/number`.
            public var number: Swift.Int32?
            /// The table to insert columns into.
            ///
            /// - Remark: Generated from `#/components/schemas/InsertTableColumnsRequest/tableObjectId`.
            public var tableObjectId: Swift.String?
            /// Creates a new `InsertTableColumnsRequest`.
            ///
            /// - Parameters:
            ///   - cellLocation:
            ///   - insertRight: Whether to insert new columns to the right of the reference cell location. - `True`: insert to the right. - `False`: insert to the left.
            ///   - number: The number of columns to be inserted. Maximum 20 per request.
            ///   - tableObjectId: The table to insert columns into.
            public init(
                cellLocation: Components.Schemas.TableCellLocation? = nil,
                insertRight: Swift.Bool? = nil,
                number: Swift.Int32? = nil,
                tableObjectId: Swift.String? = nil
            ) {
                self.cellLocation = cellLocation
                self.insertRight = insertRight
                self.number = number
                self.tableObjectId = tableObjectId
            }
            public enum CodingKeys: String, CodingKey {
                case cellLocation
                case insertRight
                case number
                case tableObjectId
            }
        }
        /// Inserts rows into a table.
        ///
        /// - Remark: Generated from `#/components/schemas/InsertTableRowsRequest`.
        public struct InsertTableRowsRequest: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/InsertTableRowsRequest/cellLocation`.
            public var cellLocation: Components.Schemas.TableCellLocation?
            /// Whether to insert new rows below the reference cell location. - `True`: insert below the cell. - `False`: insert above the cell.
            ///
            /// - Remark: Generated from `#/components/schemas/InsertTableRowsRequest/insertBelow`.
            public var insertBelow: Swift.Bool?
            /// The number of rows to be inserted. Maximum 20 per request.
            ///
            /// - Remark: Generated from `#/components/schemas/InsertTableRowsRequest/number`.
            public var number: Swift.Int32?
            /// The table to insert rows into.
            ///
            /// - Remark: Generated from `#/components/schemas/InsertTableRowsRequest/tableObjectId`.
            public var tableObjectId: Swift.String?
            /// Creates a new `InsertTableRowsRequest`.
            ///
            /// - Parameters:
            ///   - cellLocation:
            ///   - insertBelow: Whether to insert new rows below the reference cell location. - `True`: insert below the cell. - `False`: insert above the cell.
            ///   - number: The number of rows to be inserted. Maximum 20 per request.
            ///   - tableObjectId: The table to insert rows into.
            public init(
                cellLocation: Components.Schemas.TableCellLocation? = nil,
                insertBelow: Swift.Bool? = nil,
                number: Swift.Int32? = nil,
                tableObjectId: Swift.String? = nil
            ) {
                self.cellLocation = cellLocation
                self.insertBelow = insertBelow
                self.number = number
                self.tableObjectId = tableObjectId
            }
            public enum CodingKeys: String, CodingKey {
                case cellLocation
                case insertBelow
                case number
                case tableObjectId
            }
        }
        /// Inserts text into a shape or a table cell.
        ///
        /// - Remark: Generated from `#/components/schemas/InsertTextRequest`.
        public struct InsertTextRequest: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/InsertTextRequest/cellLocation`.
            public var cellLocation: Components.Schemas.TableCellLocation?
            /// The index where the text will be inserted, in Unicode code units, based on TextElement indexes. The index is zero-based and is computed from the start of the string. The index may be adjusted to prevent insertions inside Unicode grapheme clusters. In these cases, the text will be inserted immediately after the grapheme cluster.
            ///
            /// - Remark: Generated from `#/components/schemas/InsertTextRequest/insertionIndex`.
            public var insertionIndex: Swift.Int32?
            /// The object ID of the shape or table where the text will be inserted.
            ///
            /// - Remark: Generated from `#/components/schemas/InsertTextRequest/objectId`.
            public var objectId: Swift.String?
            /// The text to be inserted. Inserting a newline character will implicitly create a new ParagraphMarker at that index. The paragraph style of the new paragraph will be copied from the paragraph at the current insertion index, including lists and bullets. Text styles for inserted text will be determined automatically, generally preserving the styling of neighboring text. In most cases, the text will be added to the TextRun that exists at the insertion index. Some control characters (U+0000-U+0008, U+000C-U+001F) and characters from the Unicode Basic Multilingual Plane Private Use Area (U+E000-U+F8FF) will be stripped out of the inserted text.
            ///
            /// - Remark: Generated from `#/components/schemas/InsertTextRequest/text`.
            public var text: Swift.String?
            /// Creates a new `InsertTextRequest`.
            ///
            /// - Parameters:
            ///   - cellLocation:
            ///   - insertionIndex: The index where the text will be inserted, in Unicode code units, based on TextElement indexes. The index is zero-based and is computed from the start of the string. The index may be adjusted to prevent insertions inside Unicode grapheme clusters. In these cases, the text will be inserted immediately after the grapheme cluster.
            ///   - objectId: The object ID of the shape or table where the text will be inserted.
            ///   - text: The text to be inserted. Inserting a newline character will implicitly create a new ParagraphMarker at that index. The paragraph style of the new paragraph will be copied from the paragraph at the current insertion index, including lists and bullets. Text styles for inserted text will be determined automatically, generally preserving the styling of neighboring text. In most cases, the text will be added to the TextRun that exists at the insertion index. Some control characters (U+0000-U+0008, U+000C-U+001F) and characters from the Unicode Basic Multilingual Plane Private Use Area (U+E000-U+F8FF) will be stripped out of the inserted text.
            public init(
                cellLocation: Components.Schemas.TableCellLocation? = nil,
                insertionIndex: Swift.Int32? = nil,
                objectId: Swift.String? = nil,
                text: Swift.String? = nil
            ) {
                self.cellLocation = cellLocation
                self.insertionIndex = insertionIndex
                self.objectId = objectId
                self.text = text
            }
            public enum CodingKeys: String, CodingKey {
                case cellLocation
                case insertionIndex
                case objectId
                case text
            }
        }
        /// The user-specified ID mapping for a placeholder that will be created on a slide from a specified layout.
        ///
        /// - Remark: Generated from `#/components/schemas/LayoutPlaceholderIdMapping`.
        public struct LayoutPlaceholderIdMapping: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/LayoutPlaceholderIdMapping/layoutPlaceholder`.
            public var layoutPlaceholder: Components.Schemas.Placeholder?
            /// The object ID of the placeholder on a layout that will be applied to a slide.
            ///
            /// - Remark: Generated from `#/components/schemas/LayoutPlaceholderIdMapping/layoutPlaceholderObjectId`.
            public var layoutPlaceholderObjectId: Swift.String?
            /// A user-supplied object ID for the placeholder identified above that to be created onto a slide. If you specify an ID, it must be unique among all pages and page elements in the presentation. The ID must start with an alphanumeric character or an underscore (matches regex `[a-zA-Z0-9_]`); remaining characters may include those as well as a hyphen or colon (matches regex `[a-zA-Z0-9_-:]`). The length of the ID must not be less than 5 or greater than 50. If you don't specify an ID, a unique one is generated.
            ///
            /// - Remark: Generated from `#/components/schemas/LayoutPlaceholderIdMapping/objectId`.
            public var objectId: Swift.String?
            /// Creates a new `LayoutPlaceholderIdMapping`.
            ///
            /// - Parameters:
            ///   - layoutPlaceholder:
            ///   - layoutPlaceholderObjectId: The object ID of the placeholder on a layout that will be applied to a slide.
            ///   - objectId: A user-supplied object ID for the placeholder identified above that to be created onto a slide. If you specify an ID, it must be unique among all pages and page elements in the presentation. The ID must start with an alphanumeric character or an underscore (matches regex `[a-zA-Z0-9_]`); remaining characters may include those as well as a hyphen or colon (matches regex `[a-zA-Z0-9_-:]`). The length of the ID must not be less than 5 or greater than 50. If you don't specify an ID, a unique one is generated.
            public init(
                layoutPlaceholder: Components.Schemas.Placeholder? = nil,
                layoutPlaceholderObjectId: Swift.String? = nil,
                objectId: Swift.String? = nil
            ) {
                self.layoutPlaceholder = layoutPlaceholder
                self.layoutPlaceholderObjectId = layoutPlaceholderObjectId
                self.objectId = objectId
            }
            public enum CodingKeys: String, CodingKey {
                case layoutPlaceholder
                case layoutPlaceholderObjectId
                case objectId
            }
        }
        /// The properties of Page are only relevant for pages with page_type LAYOUT.
        ///
        /// - Remark: Generated from `#/components/schemas/LayoutProperties`.
        public struct LayoutProperties: Codable, Hashable, Sendable {
            /// The human-readable name of the layout.
            ///
            /// - Remark: Generated from `#/components/schemas/LayoutProperties/displayName`.
            public var displayName: Swift.String?
            /// The object ID of the master that this layout is based on.
            ///
            /// - Remark: Generated from `#/components/schemas/LayoutProperties/masterObjectId`.
            public var masterObjectId: Swift.String?
            /// The name of the layout.
            ///
            /// - Remark: Generated from `#/components/schemas/LayoutProperties/name`.
            public var name: Swift.String?
            /// Creates a new `LayoutProperties`.
            ///
            /// - Parameters:
            ///   - displayName: The human-readable name of the layout.
            ///   - masterObjectId: The object ID of the master that this layout is based on.
            ///   - name: The name of the layout.
            public init(
                displayName: Swift.String? = nil,
                masterObjectId: Swift.String? = nil,
                name: Swift.String? = nil
            ) {
                self.displayName = displayName
                self.masterObjectId = masterObjectId
                self.name = name
            }
            public enum CodingKeys: String, CodingKey {
                case displayName
                case masterObjectId
                case name
            }
        }
        /// Slide layout reference. This may reference either: - A predefined layout - One of the layouts in the presentation.
        ///
        /// - Remark: Generated from `#/components/schemas/LayoutReference`.
        public struct LayoutReference: Codable, Hashable, Sendable {
            /// Layout ID: the object ID of one of the layouts in the presentation.
            ///
            /// - Remark: Generated from `#/components/schemas/LayoutReference/layoutId`.
            public var layoutId: Swift.String?
            /// Predefined layout.
            ///
            /// - Remark: Generated from `#/components/schemas/LayoutReference/predefinedLayout`.
            @frozen public enum PredefinedLayoutPayload: String, Codable, Hashable, Sendable, CaseIterable {
                case predefinedLayoutUnspecified = "PREDEFINED_LAYOUT_UNSPECIFIED"
                case blank = "BLANK"
                case captionOnly = "CAPTION_ONLY"
                case title = "TITLE"
                case titleAndBody = "TITLE_AND_BODY"
                case titleAndTwoColumns = "TITLE_AND_TWO_COLUMNS"
                case titleOnly = "TITLE_ONLY"
                case sectionHeader = "SECTION_HEADER"
                case sectionTitleAndDescription = "SECTION_TITLE_AND_DESCRIPTION"
                case oneColumnText = "ONE_COLUMN_TEXT"
                case mainPoint = "MAIN_POINT"
                case bigNumber = "BIG_NUMBER"
            }
            /// Predefined layout.
            ///
            /// - Remark: Generated from `#/components/schemas/LayoutReference/predefinedLayout`.
            public var predefinedLayout: Components.Schemas.LayoutReference.PredefinedLayoutPayload?
            /// Creates a new `LayoutReference`.
            ///
            /// - Parameters:
            ///   - layoutId: Layout ID: the object ID of one of the layouts in the presentation.
            ///   - predefinedLayout: Predefined layout.
            public init(
                layoutId: Swift.String? = nil,
                predefinedLayout: Components.Schemas.LayoutReference.PredefinedLayoutPayload? = nil
            ) {
                self.layoutId = layoutId
                self.predefinedLayout = predefinedLayout
            }
            public enum CodingKeys: String, CodingKey {
                case layoutId
                case predefinedLayout
            }
        }
        /// A PageElement kind representing a non-connector line, straight connector, curved connector, or bent connector.
        ///
        /// - Remark: Generated from `#/components/schemas/Line`.
        public struct Line: Codable, Hashable, Sendable {
            /// The category of the line. It matches the `category` specified in CreateLineRequest, and can be updated with UpdateLineCategoryRequest.
            ///
            /// - Remark: Generated from `#/components/schemas/Line/lineCategory`.
            @frozen public enum LineCategoryPayload: String, Codable, Hashable, Sendable, CaseIterable {
                case lineCategoryUnspecified = "LINE_CATEGORY_UNSPECIFIED"
                case straight = "STRAIGHT"
                case bent = "BENT"
                case curved = "CURVED"
            }
            /// The category of the line. It matches the `category` specified in CreateLineRequest, and can be updated with UpdateLineCategoryRequest.
            ///
            /// - Remark: Generated from `#/components/schemas/Line/lineCategory`.
            public var lineCategory: Components.Schemas.Line.LineCategoryPayload?
            /// - Remark: Generated from `#/components/schemas/Line/lineProperties`.
            public var lineProperties: Components.Schemas.LineProperties?
            /// The type of the line.
            ///
            /// - Remark: Generated from `#/components/schemas/Line/lineType`.
            @frozen public enum LineTypePayload: String, Codable, Hashable, Sendable, CaseIterable {
                case typeUnspecified = "TYPE_UNSPECIFIED"
                case straightConnector1 = "STRAIGHT_CONNECTOR_1"
                case bentConnector2 = "BENT_CONNECTOR_2"
                case bentConnector3 = "BENT_CONNECTOR_3"
                case bentConnector4 = "BENT_CONNECTOR_4"
                case bentConnector5 = "BENT_CONNECTOR_5"
                case curvedConnector2 = "CURVED_CONNECTOR_2"
                case curvedConnector3 = "CURVED_CONNECTOR_3"
                case curvedConnector4 = "CURVED_CONNECTOR_4"
                case curvedConnector5 = "CURVED_CONNECTOR_5"
                case straightLine = "STRAIGHT_LINE"
            }
            /// The type of the line.
            ///
            /// - Remark: Generated from `#/components/schemas/Line/lineType`.
            public var lineType: Components.Schemas.Line.LineTypePayload?
            /// Creates a new `Line`.
            ///
            /// - Parameters:
            ///   - lineCategory: The category of the line. It matches the `category` specified in CreateLineRequest, and can be updated with UpdateLineCategoryRequest.
            ///   - lineProperties:
            ///   - lineType: The type of the line.
            public init(
                lineCategory: Components.Schemas.Line.LineCategoryPayload? = nil,
                lineProperties: Components.Schemas.LineProperties? = nil,
                lineType: Components.Schemas.Line.LineTypePayload? = nil
            ) {
                self.lineCategory = lineCategory
                self.lineProperties = lineProperties
                self.lineType = lineType
            }
            public enum CodingKeys: String, CodingKey {
                case lineCategory
                case lineProperties
                case lineType
            }
        }
        /// The properties for one end of a Line connection.
        ///
        /// - Remark: Generated from `#/components/schemas/LineConnection`.
        public struct LineConnection: Codable, Hashable, Sendable {
            /// The object ID of the connected page element. Some page elements, such as groups, tables, and lines do not have connection sites and therefore cannot be connected to a connector line.
            ///
            /// - Remark: Generated from `#/components/schemas/LineConnection/connectedObjectId`.
            public var connectedObjectId: Swift.String?
            /// The index of the connection site on the connected page element. In most cases, it corresponds to the predefined connection site index from the ECMA-376 standard. More information on those connection sites can be found in the description of the "cnx" attribute in section 20.1.9.9 and Annex H. "Predefined DrawingML Shape and Text Geometries" of "Office Open XML File Formats-Fundamentals and Markup Language Reference", part 1 of [ECMA-376 5th edition] (http://www.ecma-international.org/publications/standards/Ecma-376.htm). The position of each connection site can also be viewed from Slides editor.
            ///
            /// - Remark: Generated from `#/components/schemas/LineConnection/connectionSiteIndex`.
            public var connectionSiteIndex: Swift.Int32?
            /// Creates a new `LineConnection`.
            ///
            /// - Parameters:
            ///   - connectedObjectId: The object ID of the connected page element. Some page elements, such as groups, tables, and lines do not have connection sites and therefore cannot be connected to a connector line.
            ///   - connectionSiteIndex: The index of the connection site on the connected page element. In most cases, it corresponds to the predefined connection site index from the ECMA-376 standard. More information on those connection sites can be found in the description of the "cnx" attribute in section 20.1.9.9 and Annex H. "Predefined DrawingML Shape and Text Geometries" of "Office Open XML File Formats-Fundamentals and Markup Language Reference", part 1 of [ECMA-376 5th edition] (http://www.ecma-international.org/publications/standards/Ecma-376.htm). The position of each connection site can also be viewed from Slides editor.
            public init(
                connectedObjectId: Swift.String? = nil,
                connectionSiteIndex: Swift.Int32? = nil
            ) {
                self.connectedObjectId = connectedObjectId
                self.connectionSiteIndex = connectionSiteIndex
            }
            public enum CodingKeys: String, CodingKey {
                case connectedObjectId
                case connectionSiteIndex
            }
        }
        /// The fill of the line.
        ///
        /// - Remark: Generated from `#/components/schemas/LineFill`.
        public struct LineFill: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/LineFill/solidFill`.
            public var solidFill: Components.Schemas.SolidFill?
            /// Creates a new `LineFill`.
            ///
            /// - Parameters:
            ///   - solidFill:
            public init(solidFill: Components.Schemas.SolidFill? = nil) {
                self.solidFill = solidFill
            }
            public enum CodingKeys: String, CodingKey {
                case solidFill
            }
        }
        /// The properties of the Line. When unset, these fields default to values that match the appearance of new lines created in the Slides editor.
        ///
        /// - Remark: Generated from `#/components/schemas/LineProperties`.
        public struct LineProperties: Codable, Hashable, Sendable {
            /// The dash style of the line.
            ///
            /// - Remark: Generated from `#/components/schemas/LineProperties/dashStyle`.
            @frozen public enum DashStylePayload: String, Codable, Hashable, Sendable, CaseIterable {
                case dashStyleUnspecified = "DASH_STYLE_UNSPECIFIED"
                case solid = "SOLID"
                case dot = "DOT"
                case dash = "DASH"
                case dashDot = "DASH_DOT"
                case longDash = "LONG_DASH"
                case longDashDot = "LONG_DASH_DOT"
            }
            /// The dash style of the line.
            ///
            /// - Remark: Generated from `#/components/schemas/LineProperties/dashStyle`.
            public var dashStyle: Components.Schemas.LineProperties.DashStylePayload?
            /// The style of the arrow at the end of the line.
            ///
            /// - Remark: Generated from `#/components/schemas/LineProperties/endArrow`.
            @frozen public enum EndArrowPayload: String, Codable, Hashable, Sendable, CaseIterable {
                case arrowStyleUnspecified = "ARROW_STYLE_UNSPECIFIED"
                case none = "NONE"
                case stealthArrow = "STEALTH_ARROW"
                case fillArrow = "FILL_ARROW"
                case fillCircle = "FILL_CIRCLE"
                case fillSquare = "FILL_SQUARE"
                case fillDiamond = "FILL_DIAMOND"
                case openArrow = "OPEN_ARROW"
                case openCircle = "OPEN_CIRCLE"
                case openSquare = "OPEN_SQUARE"
                case openDiamond = "OPEN_DIAMOND"
            }
            /// The style of the arrow at the end of the line.
            ///
            /// - Remark: Generated from `#/components/schemas/LineProperties/endArrow`.
            public var endArrow: Components.Schemas.LineProperties.EndArrowPayload?
            /// - Remark: Generated from `#/components/schemas/LineProperties/endConnection`.
            public var endConnection: Components.Schemas.LineConnection?
            /// - Remark: Generated from `#/components/schemas/LineProperties/lineFill`.
            public var lineFill: Components.Schemas.LineFill?
            /// - Remark: Generated from `#/components/schemas/LineProperties/link`.
            public var link: Components.Schemas.Link?
            /// The style of the arrow at the beginning of the line.
            ///
            /// - Remark: Generated from `#/components/schemas/LineProperties/startArrow`.
            @frozen public enum StartArrowPayload: String, Codable, Hashable, Sendable, CaseIterable {
                case arrowStyleUnspecified = "ARROW_STYLE_UNSPECIFIED"
                case none = "NONE"
                case stealthArrow = "STEALTH_ARROW"
                case fillArrow = "FILL_ARROW"
                case fillCircle = "FILL_CIRCLE"
                case fillSquare = "FILL_SQUARE"
                case fillDiamond = "FILL_DIAMOND"
                case openArrow = "OPEN_ARROW"
                case openCircle = "OPEN_CIRCLE"
                case openSquare = "OPEN_SQUARE"
                case openDiamond = "OPEN_DIAMOND"
            }
            /// The style of the arrow at the beginning of the line.
            ///
            /// - Remark: Generated from `#/components/schemas/LineProperties/startArrow`.
            public var startArrow: Components.Schemas.LineProperties.StartArrowPayload?
            /// - Remark: Generated from `#/components/schemas/LineProperties/startConnection`.
            public var startConnection: Components.Schemas.LineConnection?
            /// - Remark: Generated from `#/components/schemas/LineProperties/weight`.
            public var weight: Components.Schemas.Dimension?
            /// Creates a new `LineProperties`.
            ///
            /// - Parameters:
            ///   - dashStyle: The dash style of the line.
            ///   - endArrow: The style of the arrow at the end of the line.
            ///   - endConnection:
            ///   - lineFill:
            ///   - link:
            ///   - startArrow: The style of the arrow at the beginning of the line.
            ///   - startConnection:
            ///   - weight:
            public init(
                dashStyle: Components.Schemas.LineProperties.DashStylePayload? = nil,
                endArrow: Components.Schemas.LineProperties.EndArrowPayload? = nil,
                endConnection: Components.Schemas.LineConnection? = nil,
                lineFill: Components.Schemas.LineFill? = nil,
                link: Components.Schemas.Link? = nil,
                startArrow: Components.Schemas.LineProperties.StartArrowPayload? = nil,
                startConnection: Components.Schemas.LineConnection? = nil,
                weight: Components.Schemas.Dimension? = nil
            ) {
                self.dashStyle = dashStyle
                self.endArrow = endArrow
                self.endConnection = endConnection
                self.lineFill = lineFill
                self.link = link
                self.startArrow = startArrow
                self.startConnection = startConnection
                self.weight = weight
            }
            public enum CodingKeys: String, CodingKey {
                case dashStyle
                case endArrow
                case endConnection
                case lineFill
                case link
                case startArrow
                case startConnection
                case weight
            }
        }
        /// A hypertext link.
        ///
        /// - Remark: Generated from `#/components/schemas/Link`.
        public struct Link: Codable, Hashable, Sendable {
            /// If set, indicates this is a link to the specific page in this presentation with this ID. A page with this ID may not exist.
            ///
            /// - Remark: Generated from `#/components/schemas/Link/pageObjectId`.
            public var pageObjectId: Swift.String?
            /// If set, indicates this is a link to a slide in this presentation, addressed by its position.
            ///
            /// - Remark: Generated from `#/components/schemas/Link/relativeLink`.
            @frozen public enum RelativeLinkPayload: String, Codable, Hashable, Sendable, CaseIterable {
                case relativeSlideLinkUnspecified = "RELATIVE_SLIDE_LINK_UNSPECIFIED"
                case nextSlide = "NEXT_SLIDE"
                case previousSlide = "PREVIOUS_SLIDE"
                case firstSlide = "FIRST_SLIDE"
                case lastSlide = "LAST_SLIDE"
            }
            /// If set, indicates this is a link to a slide in this presentation, addressed by its position.
            ///
            /// - Remark: Generated from `#/components/schemas/Link/relativeLink`.
            public var relativeLink: Components.Schemas.Link.RelativeLinkPayload?
            /// If set, indicates this is a link to the slide at this zero-based index in the presentation. There may not be a slide at this index.
            ///
            /// - Remark: Generated from `#/components/schemas/Link/slideIndex`.
            public var slideIndex: Swift.Int32?
            /// If set, indicates this is a link to the external web page at this URL.
            ///
            /// - Remark: Generated from `#/components/schemas/Link/url`.
            public var url: Swift.String?
            /// Creates a new `Link`.
            ///
            /// - Parameters:
            ///   - pageObjectId: If set, indicates this is a link to the specific page in this presentation with this ID. A page with this ID may not exist.
            ///   - relativeLink: If set, indicates this is a link to a slide in this presentation, addressed by its position.
            ///   - slideIndex: If set, indicates this is a link to the slide at this zero-based index in the presentation. There may not be a slide at this index.
            ///   - url: If set, indicates this is a link to the external web page at this URL.
            public init(
                pageObjectId: Swift.String? = nil,
                relativeLink: Components.Schemas.Link.RelativeLinkPayload? = nil,
                slideIndex: Swift.Int32? = nil,
                url: Swift.String? = nil
            ) {
                self.pageObjectId = pageObjectId
                self.relativeLink = relativeLink
                self.slideIndex = slideIndex
                self.url = url
            }
            public enum CodingKeys: String, CodingKey {
                case pageObjectId
                case relativeLink
                case slideIndex
                case url
            }
        }
        /// A List describes the look and feel of bullets belonging to paragraphs associated with a list. A paragraph that is part of a list has an implicit reference to that list's ID.
        ///
        /// - Remark: Generated from `#/components/schemas/List`.
        public struct List: Codable, Hashable, Sendable {
            /// The ID of the list.
            ///
            /// - Remark: Generated from `#/components/schemas/List/listId`.
            public var listId: Swift.String?
            /// A map of nesting levels to the properties of bullets at the associated level. A list has at most nine levels of nesting, so the possible values for the keys of this map are 0 through 8, inclusive.
            ///
            /// - Remark: Generated from `#/components/schemas/List/nestingLevel`.
            public struct NestingLevelPayload: Codable, Hashable, Sendable {
                /// A container of undocumented properties.
                public var additionalProperties: [String: Components.Schemas.NestingLevel]
                /// Creates a new `NestingLevelPayload`.
                ///
                /// - Parameters:
                ///   - additionalProperties: A container of undocumented properties.
                public init(additionalProperties: [String: Components.Schemas.NestingLevel] = .init()) {
                    self.additionalProperties = additionalProperties
                }
                public init(from decoder: any Decoder) throws {
                    additionalProperties = try decoder.decodeAdditionalProperties(knownKeys: [])
                }
                public func encode(to encoder: any Encoder) throws {
                    try encoder.encodeAdditionalProperties(additionalProperties)
                }
            }
            /// A map of nesting levels to the properties of bullets at the associated level. A list has at most nine levels of nesting, so the possible values for the keys of this map are 0 through 8, inclusive.
            ///
            /// - Remark: Generated from `#/components/schemas/List/nestingLevel`.
            public var nestingLevel: Components.Schemas.List.NestingLevelPayload?
            /// Creates a new `List`.
            ///
            /// - Parameters:
            ///   - listId: The ID of the list.
            ///   - nestingLevel: A map of nesting levels to the properties of bullets at the associated level. A list has at most nine levels of nesting, so the possible values for the keys of this map are 0 through 8, inclusive.
            public init(
                listId: Swift.String? = nil,
                nestingLevel: Components.Schemas.List.NestingLevelPayload? = nil
            ) {
                self.listId = listId
                self.nestingLevel = nestingLevel
            }
            public enum CodingKeys: String, CodingKey {
                case listId
                case nestingLevel
            }
        }
        /// The properties of Page that are only relevant for pages with page_type MASTER.
        ///
        /// - Remark: Generated from `#/components/schemas/MasterProperties`.
        public struct MasterProperties: Codable, Hashable, Sendable {
            /// The human-readable name of the master.
            ///
            /// - Remark: Generated from `#/components/schemas/MasterProperties/displayName`.
            public var displayName: Swift.String?
            /// Creates a new `MasterProperties`.
            ///
            /// - Parameters:
            ///   - displayName: The human-readable name of the master.
            public init(displayName: Swift.String? = nil) {
                self.displayName = displayName
            }
            public enum CodingKeys: String, CodingKey {
                case displayName
            }
        }
        /// Merges cells in a Table.
        ///
        /// - Remark: Generated from `#/components/schemas/MergeTableCellsRequest`.
        public struct MergeTableCellsRequest: Codable, Hashable, Sendable {
            /// The object ID of the table.
            ///
            /// - Remark: Generated from `#/components/schemas/MergeTableCellsRequest/objectId`.
            public var objectId: Swift.String?
            /// - Remark: Generated from `#/components/schemas/MergeTableCellsRequest/tableRange`.
            public var tableRange: Components.Schemas.TableRange?
            /// Creates a new `MergeTableCellsRequest`.
            ///
            /// - Parameters:
            ///   - objectId: The object ID of the table.
            ///   - tableRange:
            public init(
                objectId: Swift.String? = nil,
                tableRange: Components.Schemas.TableRange? = nil
            ) {
                self.objectId = objectId
                self.tableRange = tableRange
            }
            public enum CodingKeys: String, CodingKey {
                case objectId
                case tableRange
            }
        }
        /// Contains properties describing the look and feel of a list bullet at a given level of nesting.
        ///
        /// - Remark: Generated from `#/components/schemas/NestingLevel`.
        public struct NestingLevel: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/NestingLevel/bulletStyle`.
            public var bulletStyle: Components.Schemas.TextStyle?
            /// Creates a new `NestingLevel`.
            ///
            /// - Parameters:
            ///   - bulletStyle:
            public init(bulletStyle: Components.Schemas.TextStyle? = nil) {
                self.bulletStyle = bulletStyle
            }
            public enum CodingKeys: String, CodingKey {
                case bulletStyle
            }
        }
        /// The properties of Page that are only relevant for pages with page_type NOTES.
        ///
        /// - Remark: Generated from `#/components/schemas/NotesProperties`.
        public struct NotesProperties: Codable, Hashable, Sendable {
            /// The object ID of the shape on this notes page that contains the speaker notes for the corresponding slide. The actual shape may not always exist on the notes page. Inserting text using this object ID will automatically create the shape. In this case, the actual shape may have different object ID. The `GetPresentation` or `GetPage` action will always return the latest object ID.
            ///
            /// - Remark: Generated from `#/components/schemas/NotesProperties/speakerNotesObjectId`.
            public var speakerNotesObjectId: Swift.String?
            /// Creates a new `NotesProperties`.
            ///
            /// - Parameters:
            ///   - speakerNotesObjectId: The object ID of the shape on this notes page that contains the speaker notes for the corresponding slide. The actual shape may not always exist on the notes page. Inserting text using this object ID will automatically create the shape. In this case, the actual shape may have different object ID. The `GetPresentation` or `GetPage` action will always return the latest object ID.
            public init(speakerNotesObjectId: Swift.String? = nil) {
                self.speakerNotesObjectId = speakerNotesObjectId
            }
            public enum CodingKeys: String, CodingKey {
                case speakerNotesObjectId
            }
        }
        /// A themeable solid color value.
        ///
        /// - Remark: Generated from `#/components/schemas/OpaqueColor`.
        public struct OpaqueColor: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/OpaqueColor/rgbColor`.
            public var rgbColor: Components.Schemas.RgbColor?
            /// An opaque theme color.
            ///
            /// - Remark: Generated from `#/components/schemas/OpaqueColor/themeColor`.
            @frozen public enum ThemeColorPayload: String, Codable, Hashable, Sendable, CaseIterable {
                case themeColorTypeUnspecified = "THEME_COLOR_TYPE_UNSPECIFIED"
                case dark1 = "DARK1"
                case light1 = "LIGHT1"
                case dark2 = "DARK2"
                case light2 = "LIGHT2"
                case accent1 = "ACCENT1"
                case accent2 = "ACCENT2"
                case accent3 = "ACCENT3"
                case accent4 = "ACCENT4"
                case accent5 = "ACCENT5"
                case accent6 = "ACCENT6"
                case hyperlink = "HYPERLINK"
                case followedHyperlink = "FOLLOWED_HYPERLINK"
                case text1 = "TEXT1"
                case background1 = "BACKGROUND1"
                case text2 = "TEXT2"
                case background2 = "BACKGROUND2"
            }
            /// An opaque theme color.
            ///
            /// - Remark: Generated from `#/components/schemas/OpaqueColor/themeColor`.
            public var themeColor: Components.Schemas.OpaqueColor.ThemeColorPayload?
            /// Creates a new `OpaqueColor`.
            ///
            /// - Parameters:
            ///   - rgbColor:
            ///   - themeColor: An opaque theme color.
            public init(
                rgbColor: Components.Schemas.RgbColor? = nil,
                themeColor: Components.Schemas.OpaqueColor.ThemeColorPayload? = nil
            ) {
                self.rgbColor = rgbColor
                self.themeColor = themeColor
            }
            public enum CodingKeys: String, CodingKey {
                case rgbColor
                case themeColor
            }
        }
        /// A color that can either be fully opaque or fully transparent.
        ///
        /// - Remark: Generated from `#/components/schemas/OptionalColor`.
        public struct OptionalColor: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/OptionalColor/opaqueColor`.
            public var opaqueColor: Components.Schemas.OpaqueColor?
            /// Creates a new `OptionalColor`.
            ///
            /// - Parameters:
            ///   - opaqueColor:
            public init(opaqueColor: Components.Schemas.OpaqueColor? = nil) {
                self.opaqueColor = opaqueColor
            }
            public enum CodingKeys: String, CodingKey {
                case opaqueColor
            }
        }
        /// The outline of a PageElement. If these fields are unset, they may be inherited from a parent placeholder if it exists. If there is no parent, the fields will default to the value used for new page elements created in the Slides editor, which may depend on the page element kind.
        ///
        /// - Remark: Generated from `#/components/schemas/Outline`.
        public struct Outline: Codable, Hashable, Sendable {
            /// The dash style of the outline.
            ///
            /// - Remark: Generated from `#/components/schemas/Outline/dashStyle`.
            @frozen public enum DashStylePayload: String, Codable, Hashable, Sendable, CaseIterable {
                case dashStyleUnspecified = "DASH_STYLE_UNSPECIFIED"
                case solid = "SOLID"
                case dot = "DOT"
                case dash = "DASH"
                case dashDot = "DASH_DOT"
                case longDash = "LONG_DASH"
                case longDashDot = "LONG_DASH_DOT"
            }
            /// The dash style of the outline.
            ///
            /// - Remark: Generated from `#/components/schemas/Outline/dashStyle`.
            public var dashStyle: Components.Schemas.Outline.DashStylePayload?
            /// - Remark: Generated from `#/components/schemas/Outline/outlineFill`.
            public var outlineFill: Components.Schemas.OutlineFill?
            /// The outline property state. Updating the outline on a page element will implicitly update this field to `RENDERED`, unless another value is specified in the same request. To have no outline on a page element, set this field to `NOT_RENDERED`. In this case, any other outline fields set in the same request will be ignored.
            ///
            /// - Remark: Generated from `#/components/schemas/Outline/propertyState`.
            @frozen public enum PropertyStatePayload: String, Codable, Hashable, Sendable, CaseIterable {
                case rendered = "RENDERED"
                case notRendered = "NOT_RENDERED"
                case inherit = "INHERIT"
            }
            /// The outline property state. Updating the outline on a page element will implicitly update this field to `RENDERED`, unless another value is specified in the same request. To have no outline on a page element, set this field to `NOT_RENDERED`. In this case, any other outline fields set in the same request will be ignored.
            ///
            /// - Remark: Generated from `#/components/schemas/Outline/propertyState`.
            public var propertyState: Components.Schemas.Outline.PropertyStatePayload?
            /// - Remark: Generated from `#/components/schemas/Outline/weight`.
            public var weight: Components.Schemas.Dimension?
            /// Creates a new `Outline`.
            ///
            /// - Parameters:
            ///   - dashStyle: The dash style of the outline.
            ///   - outlineFill:
            ///   - propertyState: The outline property state. Updating the outline on a page element will implicitly update this field to `RENDERED`, unless another value is specified in the same request. To have no outline on a page element, set this field to `NOT_RENDERED`. In this case, any other outline fields set in the same request will be ignored.
            ///   - weight:
            public init(
                dashStyle: Components.Schemas.Outline.DashStylePayload? = nil,
                outlineFill: Components.Schemas.OutlineFill? = nil,
                propertyState: Components.Schemas.Outline.PropertyStatePayload? = nil,
                weight: Components.Schemas.Dimension? = nil
            ) {
                self.dashStyle = dashStyle
                self.outlineFill = outlineFill
                self.propertyState = propertyState
                self.weight = weight
            }
            public enum CodingKeys: String, CodingKey {
                case dashStyle
                case outlineFill
                case propertyState
                case weight
            }
        }
        /// The fill of the outline.
        ///
        /// - Remark: Generated from `#/components/schemas/OutlineFill`.
        public struct OutlineFill: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/OutlineFill/solidFill`.
            public var solidFill: Components.Schemas.SolidFill?
            /// Creates a new `OutlineFill`.
            ///
            /// - Parameters:
            ///   - solidFill:
            public init(solidFill: Components.Schemas.SolidFill? = nil) {
                self.solidFill = solidFill
            }
            public enum CodingKeys: String, CodingKey {
                case solidFill
            }
        }
        /// A page in a presentation.
        ///
        /// - Remark: Generated from `#/components/schemas/Page`.
        public struct Page: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/Page/layoutProperties`.
            public var layoutProperties: Components.Schemas.LayoutProperties?
            /// - Remark: Generated from `#/components/schemas/Page/masterProperties`.
            public var masterProperties: Components.Schemas.MasterProperties?
            /// - Remark: Generated from `#/components/schemas/Page/notesProperties`.
            public var notesProperties: Components.Schemas.NotesProperties?
            /// The object ID for this page. Object IDs used by Page and PageElement share the same namespace.
            ///
            /// - Remark: Generated from `#/components/schemas/Page/objectId`.
            public var objectId: Swift.String?
            /// The page elements rendered on the page.
            ///
            /// - Remark: Generated from `#/components/schemas/Page/pageElements`.
            public var pageElements: [Components.Schemas.PageElement]?
            /// - Remark: Generated from `#/components/schemas/Page/pageProperties`.
            public var pageProperties: Components.Schemas.PageProperties?
            /// The type of the page.
            ///
            /// - Remark: Generated from `#/components/schemas/Page/pageType`.
            @frozen public enum PageTypePayload: String, Codable, Hashable, Sendable, CaseIterable {
                case slide = "SLIDE"
                case master = "MASTER"
                case layout = "LAYOUT"
                case notes = "NOTES"
                case notesMaster = "NOTES_MASTER"
            }
            /// The type of the page.
            ///
            /// - Remark: Generated from `#/components/schemas/Page/pageType`.
            public var pageType: Components.Schemas.Page.PageTypePayload?
            /// Output only. The revision ID of the presentation. Can be used in update requests to assert the presentation revision hasn't changed since the last read operation. Only populated if the user has edit access to the presentation. The revision ID is not a sequential number but an opaque string. The format of the revision ID might change over time. A returned revision ID is only guaranteed to be valid for 24 hours after it has been returned and cannot be shared across users. If the revision ID is unchanged between calls, then the presentation has not changed. Conversely, a changed ID (for the same presentation and user) usually means the presentation has been updated. However, a changed ID can also be due to internal factors such as ID format changes.
            ///
            /// - Remark: Generated from `#/components/schemas/Page/revisionId`.
            public var revisionId: Swift.String?
            /// - Remark: Generated from `#/components/schemas/Page/slideProperties`.
            public var slideProperties: Components.Schemas.SlideProperties?
            /// Creates a new `Page`.
            ///
            /// - Parameters:
            ///   - layoutProperties:
            ///   - masterProperties:
            ///   - notesProperties:
            ///   - objectId: The object ID for this page. Object IDs used by Page and PageElement share the same namespace.
            ///   - pageElements: The page elements rendered on the page.
            ///   - pageProperties:
            ///   - pageType: The type of the page.
            ///   - revisionId: Output only. The revision ID of the presentation. Can be used in update requests to assert the presentation revision hasn't changed since the last read operation. Only populated if the user has edit access to the presentation. The revision ID is not a sequential number but an opaque string. The format of the revision ID might change over time. A returned revision ID is only guaranteed to be valid for 24 hours after it has been returned and cannot be shared across users. If the revision ID is unchanged between calls, then the presentation has not changed. Conversely, a changed ID (for the same presentation and user) usually means the presentation has been updated. However, a changed ID can also be due to internal factors such as ID format changes.
            ///   - slideProperties:
            public init(
                layoutProperties: Components.Schemas.LayoutProperties? = nil,
                masterProperties: Components.Schemas.MasterProperties? = nil,
                notesProperties: Components.Schemas.NotesProperties? = nil,
                objectId: Swift.String? = nil,
                pageElements: [Components.Schemas.PageElement]? = nil,
                pageProperties: Components.Schemas.PageProperties? = nil,
                pageType: Components.Schemas.Page.PageTypePayload? = nil,
                revisionId: Swift.String? = nil,
                slideProperties: Components.Schemas.SlideProperties? = nil
            ) {
                self.layoutProperties = layoutProperties
                self.masterProperties = masterProperties
                self.notesProperties = notesProperties
                self.objectId = objectId
                self.pageElements = pageElements
                self.pageProperties = pageProperties
                self.pageType = pageType
                self.revisionId = revisionId
                self.slideProperties = slideProperties
            }
            public enum CodingKeys: String, CodingKey {
                case layoutProperties
                case masterProperties
                case notesProperties
                case objectId
                case pageElements
                case pageProperties
                case pageType
                case revisionId
                case slideProperties
            }
        }
        /// The page background fill.
        ///
        /// - Remark: Generated from `#/components/schemas/PageBackgroundFill`.
        public struct PageBackgroundFill: Codable, Hashable, Sendable {
            /// The background fill property state. Updating the fill on a page will implicitly update this field to `RENDERED`, unless another value is specified in the same request. To have no fill on a page, set this field to `NOT_RENDERED`. In this case, any other fill fields set in the same request will be ignored.
            ///
            /// - Remark: Generated from `#/components/schemas/PageBackgroundFill/propertyState`.
            @frozen public enum PropertyStatePayload: String, Codable, Hashable, Sendable, CaseIterable {
                case rendered = "RENDERED"
                case notRendered = "NOT_RENDERED"
                case inherit = "INHERIT"
            }
            /// The background fill property state. Updating the fill on a page will implicitly update this field to `RENDERED`, unless another value is specified in the same request. To have no fill on a page, set this field to `NOT_RENDERED`. In this case, any other fill fields set in the same request will be ignored.
            ///
            /// - Remark: Generated from `#/components/schemas/PageBackgroundFill/propertyState`.
            public var propertyState: Components.Schemas.PageBackgroundFill.PropertyStatePayload?
            /// - Remark: Generated from `#/components/schemas/PageBackgroundFill/solidFill`.
            public var solidFill: Components.Schemas.SolidFill?
            /// - Remark: Generated from `#/components/schemas/PageBackgroundFill/stretchedPictureFill`.
            public var stretchedPictureFill: Components.Schemas.StretchedPictureFill?
            /// Creates a new `PageBackgroundFill`.
            ///
            /// - Parameters:
            ///   - propertyState: The background fill property state. Updating the fill on a page will implicitly update this field to `RENDERED`, unless another value is specified in the same request. To have no fill on a page, set this field to `NOT_RENDERED`. In this case, any other fill fields set in the same request will be ignored.
            ///   - solidFill:
            ///   - stretchedPictureFill:
            public init(
                propertyState: Components.Schemas.PageBackgroundFill.PropertyStatePayload? = nil,
                solidFill: Components.Schemas.SolidFill? = nil,
                stretchedPictureFill: Components.Schemas.StretchedPictureFill? = nil
            ) {
                self.propertyState = propertyState
                self.solidFill = solidFill
                self.stretchedPictureFill = stretchedPictureFill
            }
            public enum CodingKeys: String, CodingKey {
                case propertyState
                case solidFill
                case stretchedPictureFill
            }
        }
        /// A visual element rendered on a page.
        ///
        /// - Remark: Generated from `#/components/schemas/PageElement`.
        public struct PageElement: Codable, Hashable, Sendable {
            /// The description of the page element. Combined with title to display alt text. The field is not supported for Group elements.
            ///
            /// - Remark: Generated from `#/components/schemas/PageElement/description`.
            public var description: Swift.String? {
                get  {
                    self.storage.value.description
                }
                _modify {
                    yield &self.storage.value.description
                }
            }
            /// - Remark: Generated from `#/components/schemas/PageElement/elementGroup`.
            public var elementGroup: Components.Schemas.Group? {
                get  {
                    self.storage.value.elementGroup
                }
                _modify {
                    yield &self.storage.value.elementGroup
                }
            }
            /// - Remark: Generated from `#/components/schemas/PageElement/image`.
            public var image: Components.Schemas.Image? {
                get  {
                    self.storage.value.image
                }
                _modify {
                    yield &self.storage.value.image
                }
            }
            /// - Remark: Generated from `#/components/schemas/PageElement/line`.
            public var line: Components.Schemas.Line? {
                get  {
                    self.storage.value.line
                }
                _modify {
                    yield &self.storage.value.line
                }
            }
            /// The object ID for this page element. Object IDs used by google.apps.slides.v1.Page and google.apps.slides.v1.PageElement share the same namespace.
            ///
            /// - Remark: Generated from `#/components/schemas/PageElement/objectId`.
            public var objectId: Swift.String? {
                get  {
                    self.storage.value.objectId
                }
                _modify {
                    yield &self.storage.value.objectId
                }
            }
            /// - Remark: Generated from `#/components/schemas/PageElement/shape`.
            public var shape: Components.Schemas.Shape? {
                get  {
                    self.storage.value.shape
                }
                _modify {
                    yield &self.storage.value.shape
                }
            }
            /// - Remark: Generated from `#/components/schemas/PageElement/sheetsChart`.
            public var sheetsChart: Components.Schemas.SheetsChart? {
                get  {
                    self.storage.value.sheetsChart
                }
                _modify {
                    yield &self.storage.value.sheetsChart
                }
            }
            /// - Remark: Generated from `#/components/schemas/PageElement/size`.
            public var size: Components.Schemas.Size? {
                get  {
                    self.storage.value.size
                }
                _modify {
                    yield &self.storage.value.size
                }
            }
            /// - Remark: Generated from `#/components/schemas/PageElement/table`.
            public var table: Components.Schemas.Table? {
                get  {
                    self.storage.value.table
                }
                _modify {
                    yield &self.storage.value.table
                }
            }
            /// The title of the page element. Combined with description to display alt text. The field is not supported for Group elements.
            ///
            /// - Remark: Generated from `#/components/schemas/PageElement/title`.
            public var title: Swift.String? {
                get  {
                    self.storage.value.title
                }
                _modify {
                    yield &self.storage.value.title
                }
            }
            /// - Remark: Generated from `#/components/schemas/PageElement/transform`.
            public var transform: Components.Schemas.AffineTransform? {
                get  {
                    self.storage.value.transform
                }
                _modify {
                    yield &self.storage.value.transform
                }
            }
            /// - Remark: Generated from `#/components/schemas/PageElement/video`.
            public var video: Components.Schemas.Video? {
                get  {
                    self.storage.value.video
                }
                _modify {
                    yield &self.storage.value.video
                }
            }
            /// - Remark: Generated from `#/components/schemas/PageElement/wordArt`.
            public var wordArt: Components.Schemas.WordArt? {
                get  {
                    self.storage.value.wordArt
                }
                _modify {
                    yield &self.storage.value.wordArt
                }
            }
            /// Creates a new `PageElement`.
            ///
            /// - Parameters:
            ///   - description: The description of the page element. Combined with title to display alt text. The field is not supported for Group elements.
            ///   - elementGroup:
            ///   - image:
            ///   - line:
            ///   - objectId: The object ID for this page element. Object IDs used by google.apps.slides.v1.Page and google.apps.slides.v1.PageElement share the same namespace.
            ///   - shape:
            ///   - sheetsChart:
            ///   - size:
            ///   - table:
            ///   - title: The title of the page element. Combined with description to display alt text. The field is not supported for Group elements.
            ///   - transform:
            ///   - video:
            ///   - wordArt:
            public init(
                description: Swift.String? = nil,
                elementGroup: Components.Schemas.Group? = nil,
                image: Components.Schemas.Image? = nil,
                line: Components.Schemas.Line? = nil,
                objectId: Swift.String? = nil,
                shape: Components.Schemas.Shape? = nil,
                sheetsChart: Components.Schemas.SheetsChart? = nil,
                size: Components.Schemas.Size? = nil,
                table: Components.Schemas.Table? = nil,
                title: Swift.String? = nil,
                transform: Components.Schemas.AffineTransform? = nil,
                video: Components.Schemas.Video? = nil,
                wordArt: Components.Schemas.WordArt? = nil
            ) {
                self.storage = .init(value: .init(
                    description: description,
                    elementGroup: elementGroup,
                    image: image,
                    line: line,
                    objectId: objectId,
                    shape: shape,
                    sheetsChart: sheetsChart,
                    size: size,
                    table: table,
                    title: title,
                    transform: transform,
                    video: video,
                    wordArt: wordArt
                ))
            }
            public enum CodingKeys: String, CodingKey {
                case description
                case elementGroup
                case image
                case line
                case objectId
                case shape
                case sheetsChart
                case size
                case table
                case title
                case transform
                case video
                case wordArt
            }
            public init(from decoder: any Decoder) throws {
                self.storage = try .init(from: decoder)
            }
            public func encode(to encoder: any Encoder) throws {
                try self.storage.encode(to: encoder)
            }
            /// Internal reference storage to allow type recursion.
            private var storage: OpenAPIRuntime.CopyOnWriteBox<Storage>
            private struct Storage: Codable, Hashable, Sendable {
                /// The description of the page element. Combined with title to display alt text. The field is not supported for Group elements.
                ///
                /// - Remark: Generated from `#/components/schemas/PageElement/description`.
                var description: Swift.String?
                /// - Remark: Generated from `#/components/schemas/PageElement/elementGroup`.
                var elementGroup: Components.Schemas.Group?
                /// - Remark: Generated from `#/components/schemas/PageElement/image`.
                var image: Components.Schemas.Image?
                /// - Remark: Generated from `#/components/schemas/PageElement/line`.
                var line: Components.Schemas.Line?
                /// The object ID for this page element. Object IDs used by google.apps.slides.v1.Page and google.apps.slides.v1.PageElement share the same namespace.
                ///
                /// - Remark: Generated from `#/components/schemas/PageElement/objectId`.
                var objectId: Swift.String?
                /// - Remark: Generated from `#/components/schemas/PageElement/shape`.
                var shape: Components.Schemas.Shape?
                /// - Remark: Generated from `#/components/schemas/PageElement/sheetsChart`.
                var sheetsChart: Components.Schemas.SheetsChart?
                /// - Remark: Generated from `#/components/schemas/PageElement/size`.
                var size: Components.Schemas.Size?
                /// - Remark: Generated from `#/components/schemas/PageElement/table`.
                var table: Components.Schemas.Table?
                /// The title of the page element. Combined with description to display alt text. The field is not supported for Group elements.
                ///
                /// - Remark: Generated from `#/components/schemas/PageElement/title`.
                var title: Swift.String?
                /// - Remark: Generated from `#/components/schemas/PageElement/transform`.
                var transform: Components.Schemas.AffineTransform?
                /// - Remark: Generated from `#/components/schemas/PageElement/video`.
                var video: Components.Schemas.Video?
                /// - Remark: Generated from `#/components/schemas/PageElement/wordArt`.
                var wordArt: Components.Schemas.WordArt?
                init(
                    description: Swift.String? = nil,
                    elementGroup: Components.Schemas.Group? = nil,
                    image: Components.Schemas.Image? = nil,
                    line: Components.Schemas.Line? = nil,
                    objectId: Swift.String? = nil,
                    shape: Components.Schemas.Shape? = nil,
                    sheetsChart: Components.Schemas.SheetsChart? = nil,
                    size: Components.Schemas.Size? = nil,
                    table: Components.Schemas.Table? = nil,
                    title: Swift.String? = nil,
                    transform: Components.Schemas.AffineTransform? = nil,
                    video: Components.Schemas.Video? = nil,
                    wordArt: Components.Schemas.WordArt? = nil
                ) {
                    self.description = description
                    self.elementGroup = elementGroup
                    self.image = image
                    self.line = line
                    self.objectId = objectId
                    self.shape = shape
                    self.sheetsChart = sheetsChart
                    self.size = size
                    self.table = table
                    self.title = title
                    self.transform = transform
                    self.video = video
                    self.wordArt = wordArt
                }
                typealias CodingKeys = Components.Schemas.PageElement.CodingKeys
            }
        }
        /// Common properties for a page element. Note: When you initially create a PageElement, the API may modify the values of both `size` and `transform`, but the visual size will be unchanged.
        ///
        /// - Remark: Generated from `#/components/schemas/PageElementProperties`.
        public struct PageElementProperties: Codable, Hashable, Sendable {
            /// The object ID of the page where the element is located.
            ///
            /// - Remark: Generated from `#/components/schemas/PageElementProperties/pageObjectId`.
            public var pageObjectId: Swift.String?
            /// - Remark: Generated from `#/components/schemas/PageElementProperties/size`.
            public var size: Components.Schemas.Size?
            /// - Remark: Generated from `#/components/schemas/PageElementProperties/transform`.
            public var transform: Components.Schemas.AffineTransform?
            /// Creates a new `PageElementProperties`.
            ///
            /// - Parameters:
            ///   - pageObjectId: The object ID of the page where the element is located.
            ///   - size:
            ///   - transform:
            public init(
                pageObjectId: Swift.String? = nil,
                size: Components.Schemas.Size? = nil,
                transform: Components.Schemas.AffineTransform? = nil
            ) {
                self.pageObjectId = pageObjectId
                self.size = size
                self.transform = transform
            }
            public enum CodingKeys: String, CodingKey {
                case pageObjectId
                case size
                case transform
            }
        }
        /// The properties of the Page. The page will inherit properties from the parent page. Depending on the page type the hierarchy is defined in either SlideProperties or LayoutProperties.
        ///
        /// - Remark: Generated from `#/components/schemas/PageProperties`.
        public struct PageProperties: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/PageProperties/colorScheme`.
            public var colorScheme: Components.Schemas.ColorScheme?
            /// - Remark: Generated from `#/components/schemas/PageProperties/pageBackgroundFill`.
            public var pageBackgroundFill: Components.Schemas.PageBackgroundFill?
            /// Creates a new `PageProperties`.
            ///
            /// - Parameters:
            ///   - colorScheme:
            ///   - pageBackgroundFill:
            public init(
                colorScheme: Components.Schemas.ColorScheme? = nil,
                pageBackgroundFill: Components.Schemas.PageBackgroundFill? = nil
            ) {
                self.colorScheme = colorScheme
                self.pageBackgroundFill = pageBackgroundFill
            }
            public enum CodingKeys: String, CodingKey {
                case colorScheme
                case pageBackgroundFill
            }
        }
        /// A TextElement kind that represents the beginning of a new paragraph.
        ///
        /// - Remark: Generated from `#/components/schemas/ParagraphMarker`.
        public struct ParagraphMarker: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/ParagraphMarker/bullet`.
            public var bullet: Components.Schemas.Bullet?
            /// - Remark: Generated from `#/components/schemas/ParagraphMarker/style`.
            public var style: Components.Schemas.ParagraphStyle?
            /// Creates a new `ParagraphMarker`.
            ///
            /// - Parameters:
            ///   - bullet:
            ///   - style:
            public init(
                bullet: Components.Schemas.Bullet? = nil,
                style: Components.Schemas.ParagraphStyle? = nil
            ) {
                self.bullet = bullet
                self.style = style
            }
            public enum CodingKeys: String, CodingKey {
                case bullet
                case style
            }
        }
        /// Styles that apply to a whole paragraph. If this text is contained in a shape with a parent placeholder, then these paragraph styles may be inherited from the parent. Which paragraph styles are inherited depend on the nesting level of lists: * A paragraph not in a list will inherit its paragraph style from the paragraph at the 0 nesting level of the list inside the parent placeholder. * A paragraph in a list will inherit its paragraph style from the paragraph at its corresponding nesting level of the list inside the parent placeholder. Inherited paragraph styles are represented as unset fields in this message.
        ///
        /// - Remark: Generated from `#/components/schemas/ParagraphStyle`.
        public struct ParagraphStyle: Codable, Hashable, Sendable {
            /// The text alignment for this paragraph.
            ///
            /// - Remark: Generated from `#/components/schemas/ParagraphStyle/alignment`.
            @frozen public enum AlignmentPayload: String, Codable, Hashable, Sendable, CaseIterable {
                case alignmentUnspecified = "ALIGNMENT_UNSPECIFIED"
                case start = "START"
                case center = "CENTER"
                case end = "END"
                case justified = "JUSTIFIED"
            }
            /// The text alignment for this paragraph.
            ///
            /// - Remark: Generated from `#/components/schemas/ParagraphStyle/alignment`.
            public var alignment: Components.Schemas.ParagraphStyle.AlignmentPayload?
            /// The text direction of this paragraph. If unset, the value defaults to LEFT_TO_RIGHT since text direction is not inherited.
            ///
            /// - Remark: Generated from `#/components/schemas/ParagraphStyle/direction`.
            @frozen public enum DirectionPayload: String, Codable, Hashable, Sendable, CaseIterable {
                case textDirectionUnspecified = "TEXT_DIRECTION_UNSPECIFIED"
                case leftToRight = "LEFT_TO_RIGHT"
                case rightToLeft = "RIGHT_TO_LEFT"
            }
            /// The text direction of this paragraph. If unset, the value defaults to LEFT_TO_RIGHT since text direction is not inherited.
            ///
            /// - Remark: Generated from `#/components/schemas/ParagraphStyle/direction`.
            public var direction: Components.Schemas.ParagraphStyle.DirectionPayload?
            /// - Remark: Generated from `#/components/schemas/ParagraphStyle/indentEnd`.
            public var indentEnd: Components.Schemas.Dimension?
            /// - Remark: Generated from `#/components/schemas/ParagraphStyle/indentFirstLine`.
            public var indentFirstLine: Components.Schemas.Dimension?
            /// - Remark: Generated from `#/components/schemas/ParagraphStyle/indentStart`.
            public var indentStart: Components.Schemas.Dimension?
            /// The amount of space between lines, as a percentage of normal, where normal is represented as 100.0. If unset, the value is inherited from the parent.
            ///
            /// - Remark: Generated from `#/components/schemas/ParagraphStyle/lineSpacing`.
            public var lineSpacing: Swift.Float?
            /// - Remark: Generated from `#/components/schemas/ParagraphStyle/spaceAbove`.
            public var spaceAbove: Components.Schemas.Dimension?
            /// - Remark: Generated from `#/components/schemas/ParagraphStyle/spaceBelow`.
            public var spaceBelow: Components.Schemas.Dimension?
            /// The spacing mode for the paragraph.
            ///
            /// - Remark: Generated from `#/components/schemas/ParagraphStyle/spacingMode`.
            @frozen public enum SpacingModePayload: String, Codable, Hashable, Sendable, CaseIterable {
                case spacingModeUnspecified = "SPACING_MODE_UNSPECIFIED"
                case neverCollapse = "NEVER_COLLAPSE"
                case collapseLists = "COLLAPSE_LISTS"
            }
            /// The spacing mode for the paragraph.
            ///
            /// - Remark: Generated from `#/components/schemas/ParagraphStyle/spacingMode`.
            public var spacingMode: Components.Schemas.ParagraphStyle.SpacingModePayload?
            /// Creates a new `ParagraphStyle`.
            ///
            /// - Parameters:
            ///   - alignment: The text alignment for this paragraph.
            ///   - direction: The text direction of this paragraph. If unset, the value defaults to LEFT_TO_RIGHT since text direction is not inherited.
            ///   - indentEnd:
            ///   - indentFirstLine:
            ///   - indentStart:
            ///   - lineSpacing: The amount of space between lines, as a percentage of normal, where normal is represented as 100.0. If unset, the value is inherited from the parent.
            ///   - spaceAbove:
            ///   - spaceBelow:
            ///   - spacingMode: The spacing mode for the paragraph.
            public init(
                alignment: Components.Schemas.ParagraphStyle.AlignmentPayload? = nil,
                direction: Components.Schemas.ParagraphStyle.DirectionPayload? = nil,
                indentEnd: Components.Schemas.Dimension? = nil,
                indentFirstLine: Components.Schemas.Dimension? = nil,
                indentStart: Components.Schemas.Dimension? = nil,
                lineSpacing: Swift.Float? = nil,
                spaceAbove: Components.Schemas.Dimension? = nil,
                spaceBelow: Components.Schemas.Dimension? = nil,
                spacingMode: Components.Schemas.ParagraphStyle.SpacingModePayload? = nil
            ) {
                self.alignment = alignment
                self.direction = direction
                self.indentEnd = indentEnd
                self.indentFirstLine = indentFirstLine
                self.indentStart = indentStart
                self.lineSpacing = lineSpacing
                self.spaceAbove = spaceAbove
                self.spaceBelow = spaceBelow
                self.spacingMode = spacingMode
            }
            public enum CodingKeys: String, CodingKey {
                case alignment
                case direction
                case indentEnd
                case indentFirstLine
                case indentStart
                case lineSpacing
                case spaceAbove
                case spaceBelow
                case spacingMode
            }
        }
        /// The placeholder information that uniquely identifies a placeholder shape.
        ///
        /// - Remark: Generated from `#/components/schemas/Placeholder`.
        public struct Placeholder: Codable, Hashable, Sendable {
            /// The index of the placeholder. If the same placeholder types are present in the same page, they would have different index values.
            ///
            /// - Remark: Generated from `#/components/schemas/Placeholder/index`.
            public var index: Swift.Int32?
            /// The object ID of this shape's parent placeholder. If unset, the parent placeholder shape does not exist, so the shape does not inherit properties from any other shape.
            ///
            /// - Remark: Generated from `#/components/schemas/Placeholder/parentObjectId`.
            public var parentObjectId: Swift.String?
            /// The type of the placeholder.
            ///
            /// - Remark: Generated from `#/components/schemas/Placeholder/type`.
            @frozen public enum _TypePayload: String, Codable, Hashable, Sendable, CaseIterable {
                case none = "NONE"
                case body = "BODY"
                case chart = "CHART"
                case clipArt = "CLIP_ART"
                case centeredTitle = "CENTERED_TITLE"
                case diagram = "DIAGRAM"
                case dateAndTime = "DATE_AND_TIME"
                case footer = "FOOTER"
                case header = "HEADER"
                case media = "MEDIA"
                case object = "OBJECT"
                case picture = "PICTURE"
                case slideNumber = "SLIDE_NUMBER"
                case subtitle = "SUBTITLE"
                case table = "TABLE"
                case title = "TITLE"
                case slideImage = "SLIDE_IMAGE"
            }
            /// The type of the placeholder.
            ///
            /// - Remark: Generated from `#/components/schemas/Placeholder/type`.
            public var _type: Components.Schemas.Placeholder._TypePayload?
            /// Creates a new `Placeholder`.
            ///
            /// - Parameters:
            ///   - index: The index of the placeholder. If the same placeholder types are present in the same page, they would have different index values.
            ///   - parentObjectId: The object ID of this shape's parent placeholder. If unset, the parent placeholder shape does not exist, so the shape does not inherit properties from any other shape.
            ///   - _type: The type of the placeholder.
            public init(
                index: Swift.Int32? = nil,
                parentObjectId: Swift.String? = nil,
                _type: Components.Schemas.Placeholder._TypePayload? = nil
            ) {
                self.index = index
                self.parentObjectId = parentObjectId
                self._type = _type
            }
            public enum CodingKeys: String, CodingKey {
                case index
                case parentObjectId
                case _type = "type"
            }
        }
        /// A Google Slides presentation.
        ///
        /// - Remark: Generated from `#/components/schemas/Presentation`.
        public struct Presentation: Codable, Hashable, Sendable {
            /// The layouts in the presentation. A layout is a template that determines how content is arranged and styled on the slides that inherit from that layout.
            ///
            /// - Remark: Generated from `#/components/schemas/Presentation/layouts`.
            public var layouts: [Components.Schemas.Page]?
            /// The locale of the presentation, as an IETF BCP 47 language tag.
            ///
            /// - Remark: Generated from `#/components/schemas/Presentation/locale`.
            public var locale: Swift.String?
            /// The slide masters in the presentation. A slide master contains all common page elements and the common properties for a set of layouts. They serve three purposes: - Placeholder shapes on a master contain the default text styles and shape properties of all placeholder shapes on pages that use that master. - The master page properties define the common page properties inherited by its layouts. - Any other shapes on the master slide appear on all slides using that master, regardless of their layout.
            ///
            /// - Remark: Generated from `#/components/schemas/Presentation/masters`.
            public var masters: [Components.Schemas.Page]?
            /// - Remark: Generated from `#/components/schemas/Presentation/notesMaster`.
            public var notesMaster: Components.Schemas.Page?
            /// - Remark: Generated from `#/components/schemas/Presentation/pageSize`.
            public var pageSize: Components.Schemas.Size?
            /// The ID of the presentation.
            ///
            /// - Remark: Generated from `#/components/schemas/Presentation/presentationId`.
            public var presentationId: Swift.String?
            /// Output only. The revision ID of the presentation. Can be used in update requests to assert the presentation revision hasn't changed since the last read operation. Only populated if the user has edit access to the presentation. The revision ID is not a sequential number but a nebulous string. The format of the revision ID may change over time, so it should be treated opaquely. A returned revision ID is only guaranteed to be valid for 24 hours after it has been returned and cannot be shared across users. If the revision ID is unchanged between calls, then the presentation has not changed. Conversely, a changed ID (for the same presentation and user) usually means the presentation has been updated. However, a changed ID can also be due to internal factors such as ID format changes.
            ///
            /// - Remark: Generated from `#/components/schemas/Presentation/revisionId`.
            public var revisionId: Swift.String?
            /// The slides in the presentation. A slide inherits properties from a slide layout.
            ///
            /// - Remark: Generated from `#/components/schemas/Presentation/slides`.
            public var slides: [Components.Schemas.Page]?
            /// The title of the presentation.
            ///
            /// - Remark: Generated from `#/components/schemas/Presentation/title`.
            public var title: Swift.String?
            /// Creates a new `Presentation`.
            ///
            /// - Parameters:
            ///   - layouts: The layouts in the presentation. A layout is a template that determines how content is arranged and styled on the slides that inherit from that layout.
            ///   - locale: The locale of the presentation, as an IETF BCP 47 language tag.
            ///   - masters: The slide masters in the presentation. A slide master contains all common page elements and the common properties for a set of layouts. They serve three purposes: - Placeholder shapes on a master contain the default text styles and shape properties of all placeholder shapes on pages that use that master. - The master page properties define the common page properties inherited by its layouts. - Any other shapes on the master slide appear on all slides using that master, regardless of their layout.
            ///   - notesMaster:
            ///   - pageSize:
            ///   - presentationId: The ID of the presentation.
            ///   - revisionId: Output only. The revision ID of the presentation. Can be used in update requests to assert the presentation revision hasn't changed since the last read operation. Only populated if the user has edit access to the presentation. The revision ID is not a sequential number but a nebulous string. The format of the revision ID may change over time, so it should be treated opaquely. A returned revision ID is only guaranteed to be valid for 24 hours after it has been returned and cannot be shared across users. If the revision ID is unchanged between calls, then the presentation has not changed. Conversely, a changed ID (for the same presentation and user) usually means the presentation has been updated. However, a changed ID can also be due to internal factors such as ID format changes.
            ///   - slides: The slides in the presentation. A slide inherits properties from a slide layout.
            ///   - title: The title of the presentation.
            public init(
                layouts: [Components.Schemas.Page]? = nil,
                locale: Swift.String? = nil,
                masters: [Components.Schemas.Page]? = nil,
                notesMaster: Components.Schemas.Page? = nil,
                pageSize: Components.Schemas.Size? = nil,
                presentationId: Swift.String? = nil,
                revisionId: Swift.String? = nil,
                slides: [Components.Schemas.Page]? = nil,
                title: Swift.String? = nil
            ) {
                self.layouts = layouts
                self.locale = locale
                self.masters = masters
                self.notesMaster = notesMaster
                self.pageSize = pageSize
                self.presentationId = presentationId
                self.revisionId = revisionId
                self.slides = slides
                self.title = title
            }
            public enum CodingKeys: String, CodingKey {
                case layouts
                case locale
                case masters
                case notesMaster
                case pageSize
                case presentationId
                case revisionId
                case slides
                case title
            }
        }
        /// Specifies a contiguous range of an indexed collection, such as characters in text.
        ///
        /// - Remark: Generated from `#/components/schemas/Range`.
        public struct Range: Codable, Hashable, Sendable {
            /// The optional zero-based index of the end of the collection. Required for `FIXED_RANGE` ranges.
            ///
            /// - Remark: Generated from `#/components/schemas/Range/endIndex`.
            public var endIndex: Swift.Int32?
            /// The optional zero-based index of the beginning of the collection. Required for `FIXED_RANGE` and `FROM_START_INDEX` ranges.
            ///
            /// - Remark: Generated from `#/components/schemas/Range/startIndex`.
            public var startIndex: Swift.Int32?
            /// The type of range.
            ///
            /// - Remark: Generated from `#/components/schemas/Range/type`.
            @frozen public enum _TypePayload: String, Codable, Hashable, Sendable, CaseIterable {
                case rangeTypeUnspecified = "RANGE_TYPE_UNSPECIFIED"
                case fixedRange = "FIXED_RANGE"
                case fromStartIndex = "FROM_START_INDEX"
                case all = "ALL"
            }
            /// The type of range.
            ///
            /// - Remark: Generated from `#/components/schemas/Range/type`.
            public var _type: Components.Schemas.Range._TypePayload?
            /// Creates a new `Range`.
            ///
            /// - Parameters:
            ///   - endIndex: The optional zero-based index of the end of the collection. Required for `FIXED_RANGE` ranges.
            ///   - startIndex: The optional zero-based index of the beginning of the collection. Required for `FIXED_RANGE` and `FROM_START_INDEX` ranges.
            ///   - _type: The type of range.
            public init(
                endIndex: Swift.Int32? = nil,
                startIndex: Swift.Int32? = nil,
                _type: Components.Schemas.Range._TypePayload? = nil
            ) {
                self.endIndex = endIndex
                self.startIndex = startIndex
                self._type = _type
            }
            public enum CodingKeys: String, CodingKey {
                case endIndex
                case startIndex
                case _type = "type"
            }
        }
        /// A recolor effect applied on an image.
        ///
        /// - Remark: Generated from `#/components/schemas/Recolor`.
        public struct Recolor: Codable, Hashable, Sendable {
            /// The name of the recolor effect. The name is determined from the `recolor_stops` by matching the gradient against the colors in the page's current color scheme. This property is read-only.
            ///
            /// - Remark: Generated from `#/components/schemas/Recolor/name`.
            @frozen public enum NamePayload: String, Codable, Hashable, Sendable, CaseIterable {
                case none = "NONE"
                case light1 = "LIGHT1"
                case light2 = "LIGHT2"
                case light3 = "LIGHT3"
                case light4 = "LIGHT4"
                case light5 = "LIGHT5"
                case light6 = "LIGHT6"
                case light7 = "LIGHT7"
                case light8 = "LIGHT8"
                case light9 = "LIGHT9"
                case light10 = "LIGHT10"
                case dark1 = "DARK1"
                case dark2 = "DARK2"
                case dark3 = "DARK3"
                case dark4 = "DARK4"
                case dark5 = "DARK5"
                case dark6 = "DARK6"
                case dark7 = "DARK7"
                case dark8 = "DARK8"
                case dark9 = "DARK9"
                case dark10 = "DARK10"
                case grayscale = "GRAYSCALE"
                case negative = "NEGATIVE"
                case sepia = "SEPIA"
                case custom = "CUSTOM"
            }
            /// The name of the recolor effect. The name is determined from the `recolor_stops` by matching the gradient against the colors in the page's current color scheme. This property is read-only.
            ///
            /// - Remark: Generated from `#/components/schemas/Recolor/name`.
            public var name: Components.Schemas.Recolor.NamePayload?
            /// The recolor effect is represented by a gradient, which is a list of color stops. The colors in the gradient will replace the corresponding colors at the same position in the color palette and apply to the image. This property is read-only.
            ///
            /// - Remark: Generated from `#/components/schemas/Recolor/recolorStops`.
            public var recolorStops: [Components.Schemas.ColorStop]?
            /// Creates a new `Recolor`.
            ///
            /// - Parameters:
            ///   - name: The name of the recolor effect. The name is determined from the `recolor_stops` by matching the gradient against the colors in the page's current color scheme. This property is read-only.
            ///   - recolorStops: The recolor effect is represented by a gradient, which is a list of color stops. The colors in the gradient will replace the corresponding colors at the same position in the color palette and apply to the image. This property is read-only.
            public init(
                name: Components.Schemas.Recolor.NamePayload? = nil,
                recolorStops: [Components.Schemas.ColorStop]? = nil
            ) {
                self.name = name
                self.recolorStops = recolorStops
            }
            public enum CodingKeys: String, CodingKey {
                case name
                case recolorStops
            }
        }
        /// Refreshes an embedded Google Sheets chart by replacing it with the latest version of the chart from Google Sheets. NOTE: Refreshing charts requires at least one of the spreadsheets.readonly, spreadsheets, drive.readonly, or drive OAuth scopes.
        ///
        /// - Remark: Generated from `#/components/schemas/RefreshSheetsChartRequest`.
        public struct RefreshSheetsChartRequest: Codable, Hashable, Sendable {
            /// The object ID of the chart to refresh.
            ///
            /// - Remark: Generated from `#/components/schemas/RefreshSheetsChartRequest/objectId`.
            public var objectId: Swift.String?
            /// Creates a new `RefreshSheetsChartRequest`.
            ///
            /// - Parameters:
            ///   - objectId: The object ID of the chart to refresh.
            public init(objectId: Swift.String? = nil) {
                self.objectId = objectId
            }
            public enum CodingKeys: String, CodingKey {
                case objectId
            }
        }
        /// Replaces all shapes that match the given criteria with the provided image. The images replacing the shapes are rectangular after being inserted into the presentation and do not take on the forms of the shapes.
        ///
        /// - Remark: Generated from `#/components/schemas/ReplaceAllShapesWithImageRequest`.
        public struct ReplaceAllShapesWithImageRequest: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/ReplaceAllShapesWithImageRequest/containsText`.
            public var containsText: Components.Schemas.SubstringMatchCriteria?
            /// The image replace method. If you specify both a `replace_method` and an `image_replace_method`, the `image_replace_method` takes precedence. If you do not specify a value for `image_replace_method`, but specify a value for `replace_method`, then the specified `replace_method` value is used. If you do not specify either, then CENTER_INSIDE is used.
            ///
            /// - Remark: Generated from `#/components/schemas/ReplaceAllShapesWithImageRequest/imageReplaceMethod`.
            @frozen public enum ImageReplaceMethodPayload: String, Codable, Hashable, Sendable, CaseIterable {
                case imageReplaceMethodUnspecified = "IMAGE_REPLACE_METHOD_UNSPECIFIED"
                case centerInside = "CENTER_INSIDE"
                case centerCrop = "CENTER_CROP"
            }
            /// The image replace method. If you specify both a `replace_method` and an `image_replace_method`, the `image_replace_method` takes precedence. If you do not specify a value for `image_replace_method`, but specify a value for `replace_method`, then the specified `replace_method` value is used. If you do not specify either, then CENTER_INSIDE is used.
            ///
            /// - Remark: Generated from `#/components/schemas/ReplaceAllShapesWithImageRequest/imageReplaceMethod`.
            public var imageReplaceMethod: Components.Schemas.ReplaceAllShapesWithImageRequest.ImageReplaceMethodPayload?
            /// The image URL. The image is fetched once at insertion time and a copy is stored for display inside the presentation. Images must be less than 50MB in size, cannot exceed 25 megapixels, and must be in one of PNG, JPEG, or GIF format. The provided URL can be at most 2 kB in length. The URL itself is saved with the image, and exposed via the Image.source_url field.
            ///
            /// - Remark: Generated from `#/components/schemas/ReplaceAllShapesWithImageRequest/imageUrl`.
            public var imageUrl: Swift.String?
            /// If non-empty, limits the matches to page elements only on the given pages. Returns a 400 bad request error if given the page object ID of a notes page or a notes master, or if a page with that object ID doesn't exist in the presentation.
            ///
            /// - Remark: Generated from `#/components/schemas/ReplaceAllShapesWithImageRequest/pageObjectIds`.
            public var pageObjectIds: [Swift.String]?
            /// The replace method. *Deprecated*: use `image_replace_method` instead. If you specify both a `replace_method` and an `image_replace_method`, the `image_replace_method` takes precedence.
            ///
            /// - Remark: Generated from `#/components/schemas/ReplaceAllShapesWithImageRequest/replaceMethod`.
            @frozen public enum ReplaceMethodPayload: String, Codable, Hashable, Sendable, CaseIterable {
                case centerInside = "CENTER_INSIDE"
                case centerCrop = "CENTER_CROP"
            }
            /// The replace method. *Deprecated*: use `image_replace_method` instead. If you specify both a `replace_method` and an `image_replace_method`, the `image_replace_method` takes precedence.
            ///
            /// - Remark: Generated from `#/components/schemas/ReplaceAllShapesWithImageRequest/replaceMethod`.
            @available(*, deprecated)
            public var replaceMethod: Components.Schemas.ReplaceAllShapesWithImageRequest.ReplaceMethodPayload?
            /// Creates a new `ReplaceAllShapesWithImageRequest`.
            ///
            /// - Parameters:
            ///   - containsText:
            ///   - imageReplaceMethod: The image replace method. If you specify both a `replace_method` and an `image_replace_method`, the `image_replace_method` takes precedence. If you do not specify a value for `image_replace_method`, but specify a value for `replace_method`, then the specified `replace_method` value is used. If you do not specify either, then CENTER_INSIDE is used.
            ///   - imageUrl: The image URL. The image is fetched once at insertion time and a copy is stored for display inside the presentation. Images must be less than 50MB in size, cannot exceed 25 megapixels, and must be in one of PNG, JPEG, or GIF format. The provided URL can be at most 2 kB in length. The URL itself is saved with the image, and exposed via the Image.source_url field.
            ///   - pageObjectIds: If non-empty, limits the matches to page elements only on the given pages. Returns a 400 bad request error if given the page object ID of a notes page or a notes master, or if a page with that object ID doesn't exist in the presentation.
            ///   - replaceMethod: The replace method. *Deprecated*: use `image_replace_method` instead. If you specify both a `replace_method` and an `image_replace_method`, the `image_replace_method` takes precedence.
            public init(
                containsText: Components.Schemas.SubstringMatchCriteria? = nil,
                imageReplaceMethod: Components.Schemas.ReplaceAllShapesWithImageRequest.ImageReplaceMethodPayload? = nil,
                imageUrl: Swift.String? = nil,
                pageObjectIds: [Swift.String]? = nil,
                replaceMethod: Components.Schemas.ReplaceAllShapesWithImageRequest.ReplaceMethodPayload? = nil
            ) {
                self.containsText = containsText
                self.imageReplaceMethod = imageReplaceMethod
                self.imageUrl = imageUrl
                self.pageObjectIds = pageObjectIds
                self.replaceMethod = replaceMethod
            }
            public enum CodingKeys: String, CodingKey {
                case containsText
                case imageReplaceMethod
                case imageUrl
                case pageObjectIds
                case replaceMethod
            }
        }
        /// The result of replacing shapes with an image.
        ///
        /// - Remark: Generated from `#/components/schemas/ReplaceAllShapesWithImageResponse`.
        public struct ReplaceAllShapesWithImageResponse: Codable, Hashable, Sendable {
            /// The number of shapes replaced with images.
            ///
            /// - Remark: Generated from `#/components/schemas/ReplaceAllShapesWithImageResponse/occurrencesChanged`.
            public var occurrencesChanged: Swift.Int32?
            /// Creates a new `ReplaceAllShapesWithImageResponse`.
            ///
            /// - Parameters:
            ///   - occurrencesChanged: The number of shapes replaced with images.
            public init(occurrencesChanged: Swift.Int32? = nil) {
                self.occurrencesChanged = occurrencesChanged
            }
            public enum CodingKeys: String, CodingKey {
                case occurrencesChanged
            }
        }
        /// Replaces all shapes that match the given criteria with the provided Google Sheets chart. The chart will be scaled and centered to fit within the bounds of the original shape. NOTE: Replacing shapes with a chart requires at least one of the spreadsheets.readonly, spreadsheets, drive.readonly, or drive OAuth scopes.
        ///
        /// - Remark: Generated from `#/components/schemas/ReplaceAllShapesWithSheetsChartRequest`.
        public struct ReplaceAllShapesWithSheetsChartRequest: Codable, Hashable, Sendable {
            /// The ID of the specific chart in the Google Sheets spreadsheet.
            ///
            /// - Remark: Generated from `#/components/schemas/ReplaceAllShapesWithSheetsChartRequest/chartId`.
            public var chartId: Swift.Int32?
            /// - Remark: Generated from `#/components/schemas/ReplaceAllShapesWithSheetsChartRequest/containsText`.
            public var containsText: Components.Schemas.SubstringMatchCriteria?
            /// The mode with which the chart is linked to the source spreadsheet. When not specified, the chart will be an image that is not linked.
            ///
            /// - Remark: Generated from `#/components/schemas/ReplaceAllShapesWithSheetsChartRequest/linkingMode`.
            @frozen public enum LinkingModePayload: String, Codable, Hashable, Sendable, CaseIterable {
                case notLinkedImage = "NOT_LINKED_IMAGE"
                case linked = "LINKED"
            }
            /// The mode with which the chart is linked to the source spreadsheet. When not specified, the chart will be an image that is not linked.
            ///
            /// - Remark: Generated from `#/components/schemas/ReplaceAllShapesWithSheetsChartRequest/linkingMode`.
            public var linkingMode: Components.Schemas.ReplaceAllShapesWithSheetsChartRequest.LinkingModePayload?
            /// If non-empty, limits the matches to page elements only on the given pages. Returns a 400 bad request error if given the page object ID of a notes page or a notes master, or if a page with that object ID doesn't exist in the presentation.
            ///
            /// - Remark: Generated from `#/components/schemas/ReplaceAllShapesWithSheetsChartRequest/pageObjectIds`.
            public var pageObjectIds: [Swift.String]?
            /// The ID of the Google Sheets spreadsheet that contains the chart.
            ///
            /// - Remark: Generated from `#/components/schemas/ReplaceAllShapesWithSheetsChartRequest/spreadsheetId`.
            public var spreadsheetId: Swift.String?
            /// Creates a new `ReplaceAllShapesWithSheetsChartRequest`.
            ///
            /// - Parameters:
            ///   - chartId: The ID of the specific chart in the Google Sheets spreadsheet.
            ///   - containsText:
            ///   - linkingMode: The mode with which the chart is linked to the source spreadsheet. When not specified, the chart will be an image that is not linked.
            ///   - pageObjectIds: If non-empty, limits the matches to page elements only on the given pages. Returns a 400 bad request error if given the page object ID of a notes page or a notes master, or if a page with that object ID doesn't exist in the presentation.
            ///   - spreadsheetId: The ID of the Google Sheets spreadsheet that contains the chart.
            public init(
                chartId: Swift.Int32? = nil,
                containsText: Components.Schemas.SubstringMatchCriteria? = nil,
                linkingMode: Components.Schemas.ReplaceAllShapesWithSheetsChartRequest.LinkingModePayload? = nil,
                pageObjectIds: [Swift.String]? = nil,
                spreadsheetId: Swift.String? = nil
            ) {
                self.chartId = chartId
                self.containsText = containsText
                self.linkingMode = linkingMode
                self.pageObjectIds = pageObjectIds
                self.spreadsheetId = spreadsheetId
            }
            public enum CodingKeys: String, CodingKey {
                case chartId
                case containsText
                case linkingMode
                case pageObjectIds
                case spreadsheetId
            }
        }
        /// The result of replacing shapes with a Google Sheets chart.
        ///
        /// - Remark: Generated from `#/components/schemas/ReplaceAllShapesWithSheetsChartResponse`.
        public struct ReplaceAllShapesWithSheetsChartResponse: Codable, Hashable, Sendable {
            /// The number of shapes replaced with charts.
            ///
            /// - Remark: Generated from `#/components/schemas/ReplaceAllShapesWithSheetsChartResponse/occurrencesChanged`.
            public var occurrencesChanged: Swift.Int32?
            /// Creates a new `ReplaceAllShapesWithSheetsChartResponse`.
            ///
            /// - Parameters:
            ///   - occurrencesChanged: The number of shapes replaced with charts.
            public init(occurrencesChanged: Swift.Int32? = nil) {
                self.occurrencesChanged = occurrencesChanged
            }
            public enum CodingKeys: String, CodingKey {
                case occurrencesChanged
            }
        }
        /// Replaces all instances of text matching a criteria with replace text.
        ///
        /// - Remark: Generated from `#/components/schemas/ReplaceAllTextRequest`.
        public struct ReplaceAllTextRequest: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/ReplaceAllTextRequest/containsText`.
            public var containsText: Components.Schemas.SubstringMatchCriteria?
            /// If non-empty, limits the matches to page elements only on the given pages. Returns a 400 bad request error if given the page object ID of a notes master, or if a page with that object ID doesn't exist in the presentation.
            ///
            /// - Remark: Generated from `#/components/schemas/ReplaceAllTextRequest/pageObjectIds`.
            public var pageObjectIds: [Swift.String]?
            /// The text that will replace the matched text.
            ///
            /// - Remark: Generated from `#/components/schemas/ReplaceAllTextRequest/replaceText`.
            public var replaceText: Swift.String?
            /// Creates a new `ReplaceAllTextRequest`.
            ///
            /// - Parameters:
            ///   - containsText:
            ///   - pageObjectIds: If non-empty, limits the matches to page elements only on the given pages. Returns a 400 bad request error if given the page object ID of a notes master, or if a page with that object ID doesn't exist in the presentation.
            ///   - replaceText: The text that will replace the matched text.
            public init(
                containsText: Components.Schemas.SubstringMatchCriteria? = nil,
                pageObjectIds: [Swift.String]? = nil,
                replaceText: Swift.String? = nil
            ) {
                self.containsText = containsText
                self.pageObjectIds = pageObjectIds
                self.replaceText = replaceText
            }
            public enum CodingKeys: String, CodingKey {
                case containsText
                case pageObjectIds
                case replaceText
            }
        }
        /// The result of replacing text.
        ///
        /// - Remark: Generated from `#/components/schemas/ReplaceAllTextResponse`.
        public struct ReplaceAllTextResponse: Codable, Hashable, Sendable {
            /// The number of occurrences changed by replacing all text.
            ///
            /// - Remark: Generated from `#/components/schemas/ReplaceAllTextResponse/occurrencesChanged`.
            public var occurrencesChanged: Swift.Int32?
            /// Creates a new `ReplaceAllTextResponse`.
            ///
            /// - Parameters:
            ///   - occurrencesChanged: The number of occurrences changed by replacing all text.
            public init(occurrencesChanged: Swift.Int32? = nil) {
                self.occurrencesChanged = occurrencesChanged
            }
            public enum CodingKeys: String, CodingKey {
                case occurrencesChanged
            }
        }
        /// Replaces an existing image with a new image. Replacing an image removes some image effects from the existing image.
        ///
        /// - Remark: Generated from `#/components/schemas/ReplaceImageRequest`.
        public struct ReplaceImageRequest: Codable, Hashable, Sendable {
            /// The ID of the existing image that will be replaced. The ID can be retrieved from the response of a get request.
            ///
            /// - Remark: Generated from `#/components/schemas/ReplaceImageRequest/imageObjectId`.
            public var imageObjectId: Swift.String?
            /// The replacement method.
            ///
            /// - Remark: Generated from `#/components/schemas/ReplaceImageRequest/imageReplaceMethod`.
            @frozen public enum ImageReplaceMethodPayload: String, Codable, Hashable, Sendable, CaseIterable {
                case imageReplaceMethodUnspecified = "IMAGE_REPLACE_METHOD_UNSPECIFIED"
                case centerInside = "CENTER_INSIDE"
                case centerCrop = "CENTER_CROP"
            }
            /// The replacement method.
            ///
            /// - Remark: Generated from `#/components/schemas/ReplaceImageRequest/imageReplaceMethod`.
            public var imageReplaceMethod: Components.Schemas.ReplaceImageRequest.ImageReplaceMethodPayload?
            /// The image URL. The image is fetched once at insertion time and a copy is stored for display inside the presentation. Images must be less than 50MB, cannot exceed 25 megapixels, and must be in PNG, JPEG, or GIF format. The provided URL can't surpass 2 KB in length. The URL is saved with the image, and exposed through the Image.source_url field.
            ///
            /// - Remark: Generated from `#/components/schemas/ReplaceImageRequest/url`.
            public var url: Swift.String?
            /// Creates a new `ReplaceImageRequest`.
            ///
            /// - Parameters:
            ///   - imageObjectId: The ID of the existing image that will be replaced. The ID can be retrieved from the response of a get request.
            ///   - imageReplaceMethod: The replacement method.
            ///   - url: The image URL. The image is fetched once at insertion time and a copy is stored for display inside the presentation. Images must be less than 50MB, cannot exceed 25 megapixels, and must be in PNG, JPEG, or GIF format. The provided URL can't surpass 2 KB in length. The URL is saved with the image, and exposed through the Image.source_url field.
            public init(
                imageObjectId: Swift.String? = nil,
                imageReplaceMethod: Components.Schemas.ReplaceImageRequest.ImageReplaceMethodPayload? = nil,
                url: Swift.String? = nil
            ) {
                self.imageObjectId = imageObjectId
                self.imageReplaceMethod = imageReplaceMethod
                self.url = url
            }
            public enum CodingKeys: String, CodingKey {
                case imageObjectId
                case imageReplaceMethod
                case url
            }
        }
        /// A single kind of update to apply to a presentation.
        ///
        /// - Remark: Generated from `#/components/schemas/Request`.
        public struct Request: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/Request/createImage`.
            public var createImage: Components.Schemas.CreateImageRequest?
            /// - Remark: Generated from `#/components/schemas/Request/createLine`.
            public var createLine: Components.Schemas.CreateLineRequest?
            /// - Remark: Generated from `#/components/schemas/Request/createParagraphBullets`.
            public var createParagraphBullets: Components.Schemas.CreateParagraphBulletsRequest?
            /// - Remark: Generated from `#/components/schemas/Request/createShape`.
            public var createShape: Components.Schemas.CreateShapeRequest?
            /// - Remark: Generated from `#/components/schemas/Request/createSheetsChart`.
            public var createSheetsChart: Components.Schemas.CreateSheetsChartRequest?
            /// - Remark: Generated from `#/components/schemas/Request/createSlide`.
            public var createSlide: Components.Schemas.CreateSlideRequest?
            /// - Remark: Generated from `#/components/schemas/Request/createTable`.
            public var createTable: Components.Schemas.CreateTableRequest?
            /// - Remark: Generated from `#/components/schemas/Request/createVideo`.
            public var createVideo: Components.Schemas.CreateVideoRequest?
            /// - Remark: Generated from `#/components/schemas/Request/deleteObject`.
            public var deleteObject: Components.Schemas.DeleteObjectRequest?
            /// - Remark: Generated from `#/components/schemas/Request/deleteParagraphBullets`.
            public var deleteParagraphBullets: Components.Schemas.DeleteParagraphBulletsRequest?
            /// - Remark: Generated from `#/components/schemas/Request/deleteTableColumn`.
            public var deleteTableColumn: Components.Schemas.DeleteTableColumnRequest?
            /// - Remark: Generated from `#/components/schemas/Request/deleteTableRow`.
            public var deleteTableRow: Components.Schemas.DeleteTableRowRequest?
            /// - Remark: Generated from `#/components/schemas/Request/deleteText`.
            public var deleteText: Components.Schemas.DeleteTextRequest?
            /// - Remark: Generated from `#/components/schemas/Request/duplicateObject`.
            public var duplicateObject: Components.Schemas.DuplicateObjectRequest?
            /// - Remark: Generated from `#/components/schemas/Request/groupObjects`.
            public var groupObjects: Components.Schemas.GroupObjectsRequest?
            /// - Remark: Generated from `#/components/schemas/Request/insertTableColumns`.
            public var insertTableColumns: Components.Schemas.InsertTableColumnsRequest?
            /// - Remark: Generated from `#/components/schemas/Request/insertTableRows`.
            public var insertTableRows: Components.Schemas.InsertTableRowsRequest?
            /// - Remark: Generated from `#/components/schemas/Request/insertText`.
            public var insertText: Components.Schemas.InsertTextRequest?
            /// - Remark: Generated from `#/components/schemas/Request/mergeTableCells`.
            public var mergeTableCells: Components.Schemas.MergeTableCellsRequest?
            /// - Remark: Generated from `#/components/schemas/Request/refreshSheetsChart`.
            public var refreshSheetsChart: Components.Schemas.RefreshSheetsChartRequest?
            /// - Remark: Generated from `#/components/schemas/Request/replaceAllShapesWithImage`.
            public var replaceAllShapesWithImage: Components.Schemas.ReplaceAllShapesWithImageRequest?
            /// - Remark: Generated from `#/components/schemas/Request/replaceAllShapesWithSheetsChart`.
            public var replaceAllShapesWithSheetsChart: Components.Schemas.ReplaceAllShapesWithSheetsChartRequest?
            /// - Remark: Generated from `#/components/schemas/Request/replaceAllText`.
            public var replaceAllText: Components.Schemas.ReplaceAllTextRequest?
            /// - Remark: Generated from `#/components/schemas/Request/replaceImage`.
            public var replaceImage: Components.Schemas.ReplaceImageRequest?
            /// - Remark: Generated from `#/components/schemas/Request/rerouteLine`.
            public var rerouteLine: Components.Schemas.RerouteLineRequest?
            /// - Remark: Generated from `#/components/schemas/Request/ungroupObjects`.
            public var ungroupObjects: Components.Schemas.UngroupObjectsRequest?
            /// - Remark: Generated from `#/components/schemas/Request/unmergeTableCells`.
            public var unmergeTableCells: Components.Schemas.UnmergeTableCellsRequest?
            /// - Remark: Generated from `#/components/schemas/Request/updateImageProperties`.
            public var updateImageProperties: Components.Schemas.UpdateImagePropertiesRequest?
            /// - Remark: Generated from `#/components/schemas/Request/updateLineCategory`.
            public var updateLineCategory: Components.Schemas.UpdateLineCategoryRequest?
            /// - Remark: Generated from `#/components/schemas/Request/updateLineProperties`.
            public var updateLineProperties: Components.Schemas.UpdateLinePropertiesRequest?
            /// - Remark: Generated from `#/components/schemas/Request/updatePageElementAltText`.
            public var updatePageElementAltText: Components.Schemas.UpdatePageElementAltTextRequest?
            /// - Remark: Generated from `#/components/schemas/Request/updatePageElementTransform`.
            public var updatePageElementTransform: Components.Schemas.UpdatePageElementTransformRequest?
            /// - Remark: Generated from `#/components/schemas/Request/updatePageElementsZOrder`.
            public var updatePageElementsZOrder: Components.Schemas.UpdatePageElementsZOrderRequest?
            /// - Remark: Generated from `#/components/schemas/Request/updatePageProperties`.
            public var updatePageProperties: Components.Schemas.UpdatePagePropertiesRequest?
            /// - Remark: Generated from `#/components/schemas/Request/updateParagraphStyle`.
            public var updateParagraphStyle: Components.Schemas.UpdateParagraphStyleRequest?
            /// - Remark: Generated from `#/components/schemas/Request/updateShapeProperties`.
            public var updateShapeProperties: Components.Schemas.UpdateShapePropertiesRequest?
            /// - Remark: Generated from `#/components/schemas/Request/updateSlideProperties`.
            public var updateSlideProperties: Components.Schemas.UpdateSlidePropertiesRequest?
            /// - Remark: Generated from `#/components/schemas/Request/updateSlidesPosition`.
            public var updateSlidesPosition: Components.Schemas.UpdateSlidesPositionRequest?
            /// - Remark: Generated from `#/components/schemas/Request/updateTableBorderProperties`.
            public var updateTableBorderProperties: Components.Schemas.UpdateTableBorderPropertiesRequest?
            /// - Remark: Generated from `#/components/schemas/Request/updateTableCellProperties`.
            public var updateTableCellProperties: Components.Schemas.UpdateTableCellPropertiesRequest?
            /// - Remark: Generated from `#/components/schemas/Request/updateTableColumnProperties`.
            public var updateTableColumnProperties: Components.Schemas.UpdateTableColumnPropertiesRequest?
            /// - Remark: Generated from `#/components/schemas/Request/updateTableRowProperties`.
            public var updateTableRowProperties: Components.Schemas.UpdateTableRowPropertiesRequest?
            /// - Remark: Generated from `#/components/schemas/Request/updateTextStyle`.
            public var updateTextStyle: Components.Schemas.UpdateTextStyleRequest?
            /// - Remark: Generated from `#/components/schemas/Request/updateVideoProperties`.
            public var updateVideoProperties: Components.Schemas.UpdateVideoPropertiesRequest?
            /// Creates a new `Request`.
            ///
            /// - Parameters:
            ///   - createImage:
            ///   - createLine:
            ///   - createParagraphBullets:
            ///   - createShape:
            ///   - createSheetsChart:
            ///   - createSlide:
            ///   - createTable:
            ///   - createVideo:
            ///   - deleteObject:
            ///   - deleteParagraphBullets:
            ///   - deleteTableColumn:
            ///   - deleteTableRow:
            ///   - deleteText:
            ///   - duplicateObject:
            ///   - groupObjects:
            ///   - insertTableColumns:
            ///   - insertTableRows:
            ///   - insertText:
            ///   - mergeTableCells:
            ///   - refreshSheetsChart:
            ///   - replaceAllShapesWithImage:
            ///   - replaceAllShapesWithSheetsChart:
            ///   - replaceAllText:
            ///   - replaceImage:
            ///   - rerouteLine:
            ///   - ungroupObjects:
            ///   - unmergeTableCells:
            ///   - updateImageProperties:
            ///   - updateLineCategory:
            ///   - updateLineProperties:
            ///   - updatePageElementAltText:
            ///   - updatePageElementTransform:
            ///   - updatePageElementsZOrder:
            ///   - updatePageProperties:
            ///   - updateParagraphStyle:
            ///   - updateShapeProperties:
            ///   - updateSlideProperties:
            ///   - updateSlidesPosition:
            ///   - updateTableBorderProperties:
            ///   - updateTableCellProperties:
            ///   - updateTableColumnProperties:
            ///   - updateTableRowProperties:
            ///   - updateTextStyle:
            ///   - updateVideoProperties:
            public init(
                createImage: Components.Schemas.CreateImageRequest? = nil,
                createLine: Components.Schemas.CreateLineRequest? = nil,
                createParagraphBullets: Components.Schemas.CreateParagraphBulletsRequest? = nil,
                createShape: Components.Schemas.CreateShapeRequest? = nil,
                createSheetsChart: Components.Schemas.CreateSheetsChartRequest? = nil,
                createSlide: Components.Schemas.CreateSlideRequest? = nil,
                createTable: Components.Schemas.CreateTableRequest? = nil,
                createVideo: Components.Schemas.CreateVideoRequest? = nil,
                deleteObject: Components.Schemas.DeleteObjectRequest? = nil,
                deleteParagraphBullets: Components.Schemas.DeleteParagraphBulletsRequest? = nil,
                deleteTableColumn: Components.Schemas.DeleteTableColumnRequest? = nil,
                deleteTableRow: Components.Schemas.DeleteTableRowRequest? = nil,
                deleteText: Components.Schemas.DeleteTextRequest? = nil,
                duplicateObject: Components.Schemas.DuplicateObjectRequest? = nil,
                groupObjects: Components.Schemas.GroupObjectsRequest? = nil,
                insertTableColumns: Components.Schemas.InsertTableColumnsRequest? = nil,
                insertTableRows: Components.Schemas.InsertTableRowsRequest? = nil,
                insertText: Components.Schemas.InsertTextRequest? = nil,
                mergeTableCells: Components.Schemas.MergeTableCellsRequest? = nil,
                refreshSheetsChart: Components.Schemas.RefreshSheetsChartRequest? = nil,
                replaceAllShapesWithImage: Components.Schemas.ReplaceAllShapesWithImageRequest? = nil,
                replaceAllShapesWithSheetsChart: Components.Schemas.ReplaceAllShapesWithSheetsChartRequest? = nil,
                replaceAllText: Components.Schemas.ReplaceAllTextRequest? = nil,
                replaceImage: Components.Schemas.ReplaceImageRequest? = nil,
                rerouteLine: Components.Schemas.RerouteLineRequest? = nil,
                ungroupObjects: Components.Schemas.UngroupObjectsRequest? = nil,
                unmergeTableCells: Components.Schemas.UnmergeTableCellsRequest? = nil,
                updateImageProperties: Components.Schemas.UpdateImagePropertiesRequest? = nil,
                updateLineCategory: Components.Schemas.UpdateLineCategoryRequest? = nil,
                updateLineProperties: Components.Schemas.UpdateLinePropertiesRequest? = nil,
                updatePageElementAltText: Components.Schemas.UpdatePageElementAltTextRequest? = nil,
                updatePageElementTransform: Components.Schemas.UpdatePageElementTransformRequest? = nil,
                updatePageElementsZOrder: Components.Schemas.UpdatePageElementsZOrderRequest? = nil,
                updatePageProperties: Components.Schemas.UpdatePagePropertiesRequest? = nil,
                updateParagraphStyle: Components.Schemas.UpdateParagraphStyleRequest? = nil,
                updateShapeProperties: Components.Schemas.UpdateShapePropertiesRequest? = nil,
                updateSlideProperties: Components.Schemas.UpdateSlidePropertiesRequest? = nil,
                updateSlidesPosition: Components.Schemas.UpdateSlidesPositionRequest? = nil,
                updateTableBorderProperties: Components.Schemas.UpdateTableBorderPropertiesRequest? = nil,
                updateTableCellProperties: Components.Schemas.UpdateTableCellPropertiesRequest? = nil,
                updateTableColumnProperties: Components.Schemas.UpdateTableColumnPropertiesRequest? = nil,
                updateTableRowProperties: Components.Schemas.UpdateTableRowPropertiesRequest? = nil,
                updateTextStyle: Components.Schemas.UpdateTextStyleRequest? = nil,
                updateVideoProperties: Components.Schemas.UpdateVideoPropertiesRequest? = nil
            ) {
                self.createImage = createImage
                self.createLine = createLine
                self.createParagraphBullets = createParagraphBullets
                self.createShape = createShape
                self.createSheetsChart = createSheetsChart
                self.createSlide = createSlide
                self.createTable = createTable
                self.createVideo = createVideo
                self.deleteObject = deleteObject
                self.deleteParagraphBullets = deleteParagraphBullets
                self.deleteTableColumn = deleteTableColumn
                self.deleteTableRow = deleteTableRow
                self.deleteText = deleteText
                self.duplicateObject = duplicateObject
                self.groupObjects = groupObjects
                self.insertTableColumns = insertTableColumns
                self.insertTableRows = insertTableRows
                self.insertText = insertText
                self.mergeTableCells = mergeTableCells
                self.refreshSheetsChart = refreshSheetsChart
                self.replaceAllShapesWithImage = replaceAllShapesWithImage
                self.replaceAllShapesWithSheetsChart = replaceAllShapesWithSheetsChart
                self.replaceAllText = replaceAllText
                self.replaceImage = replaceImage
                self.rerouteLine = rerouteLine
                self.ungroupObjects = ungroupObjects
                self.unmergeTableCells = unmergeTableCells
                self.updateImageProperties = updateImageProperties
                self.updateLineCategory = updateLineCategory
                self.updateLineProperties = updateLineProperties
                self.updatePageElementAltText = updatePageElementAltText
                self.updatePageElementTransform = updatePageElementTransform
                self.updatePageElementsZOrder = updatePageElementsZOrder
                self.updatePageProperties = updatePageProperties
                self.updateParagraphStyle = updateParagraphStyle
                self.updateShapeProperties = updateShapeProperties
                self.updateSlideProperties = updateSlideProperties
                self.updateSlidesPosition = updateSlidesPosition
                self.updateTableBorderProperties = updateTableBorderProperties
                self.updateTableCellProperties = updateTableCellProperties
                self.updateTableColumnProperties = updateTableColumnProperties
                self.updateTableRowProperties = updateTableRowProperties
                self.updateTextStyle = updateTextStyle
                self.updateVideoProperties = updateVideoProperties
            }
            public enum CodingKeys: String, CodingKey {
                case createImage
                case createLine
                case createParagraphBullets
                case createShape
                case createSheetsChart
                case createSlide
                case createTable
                case createVideo
                case deleteObject
                case deleteParagraphBullets
                case deleteTableColumn
                case deleteTableRow
                case deleteText
                case duplicateObject
                case groupObjects
                case insertTableColumns
                case insertTableRows
                case insertText
                case mergeTableCells
                case refreshSheetsChart
                case replaceAllShapesWithImage
                case replaceAllShapesWithSheetsChart
                case replaceAllText
                case replaceImage
                case rerouteLine
                case ungroupObjects
                case unmergeTableCells
                case updateImageProperties
                case updateLineCategory
                case updateLineProperties
                case updatePageElementAltText
                case updatePageElementTransform
                case updatePageElementsZOrder
                case updatePageProperties
                case updateParagraphStyle
                case updateShapeProperties
                case updateSlideProperties
                case updateSlidesPosition
                case updateTableBorderProperties
                case updateTableCellProperties
                case updateTableColumnProperties
                case updateTableRowProperties
                case updateTextStyle
                case updateVideoProperties
            }
        }
        /// Reroutes a line such that it's connected at the two closest connection sites on the connected page elements.
        ///
        /// - Remark: Generated from `#/components/schemas/RerouteLineRequest`.
        public struct RerouteLineRequest: Codable, Hashable, Sendable {
            /// The object ID of the line to reroute. Only a line with a category indicating it is a "connector" can be rerouted. The start and end connections of the line must be on different page elements.
            ///
            /// - Remark: Generated from `#/components/schemas/RerouteLineRequest/objectId`.
            public var objectId: Swift.String?
            /// Creates a new `RerouteLineRequest`.
            ///
            /// - Parameters:
            ///   - objectId: The object ID of the line to reroute. Only a line with a category indicating it is a "connector" can be rerouted. The start and end connections of the line must be on different page elements.
            public init(objectId: Swift.String? = nil) {
                self.objectId = objectId
            }
            public enum CodingKeys: String, CodingKey {
                case objectId
            }
        }
        /// A single response from an update.
        ///
        /// - Remark: Generated from `#/components/schemas/Response`.
        public struct Response: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/Response/createImage`.
            public var createImage: Components.Schemas.CreateImageResponse?
            /// - Remark: Generated from `#/components/schemas/Response/createLine`.
            public var createLine: Components.Schemas.CreateLineResponse?
            /// - Remark: Generated from `#/components/schemas/Response/createShape`.
            public var createShape: Components.Schemas.CreateShapeResponse?
            /// - Remark: Generated from `#/components/schemas/Response/createSheetsChart`.
            public var createSheetsChart: Components.Schemas.CreateSheetsChartResponse?
            /// - Remark: Generated from `#/components/schemas/Response/createSlide`.
            public var createSlide: Components.Schemas.CreateSlideResponse?
            /// - Remark: Generated from `#/components/schemas/Response/createTable`.
            public var createTable: Components.Schemas.CreateTableResponse?
            /// - Remark: Generated from `#/components/schemas/Response/createVideo`.
            public var createVideo: Components.Schemas.CreateVideoResponse?
            /// - Remark: Generated from `#/components/schemas/Response/duplicateObject`.
            public var duplicateObject: Components.Schemas.DuplicateObjectResponse?
            /// - Remark: Generated from `#/components/schemas/Response/groupObjects`.
            public var groupObjects: Components.Schemas.GroupObjectsResponse?
            /// - Remark: Generated from `#/components/schemas/Response/replaceAllShapesWithImage`.
            public var replaceAllShapesWithImage: Components.Schemas.ReplaceAllShapesWithImageResponse?
            /// - Remark: Generated from `#/components/schemas/Response/replaceAllShapesWithSheetsChart`.
            public var replaceAllShapesWithSheetsChart: Components.Schemas.ReplaceAllShapesWithSheetsChartResponse?
            /// - Remark: Generated from `#/components/schemas/Response/replaceAllText`.
            public var replaceAllText: Components.Schemas.ReplaceAllTextResponse?
            /// Creates a new `Response`.
            ///
            /// - Parameters:
            ///   - createImage:
            ///   - createLine:
            ///   - createShape:
            ///   - createSheetsChart:
            ///   - createSlide:
            ///   - createTable:
            ///   - createVideo:
            ///   - duplicateObject:
            ///   - groupObjects:
            ///   - replaceAllShapesWithImage:
            ///   - replaceAllShapesWithSheetsChart:
            ///   - replaceAllText:
            public init(
                createImage: Components.Schemas.CreateImageResponse? = nil,
                createLine: Components.Schemas.CreateLineResponse? = nil,
                createShape: Components.Schemas.CreateShapeResponse? = nil,
                createSheetsChart: Components.Schemas.CreateSheetsChartResponse? = nil,
                createSlide: Components.Schemas.CreateSlideResponse? = nil,
                createTable: Components.Schemas.CreateTableResponse? = nil,
                createVideo: Components.Schemas.CreateVideoResponse? = nil,
                duplicateObject: Components.Schemas.DuplicateObjectResponse? = nil,
                groupObjects: Components.Schemas.GroupObjectsResponse? = nil,
                replaceAllShapesWithImage: Components.Schemas.ReplaceAllShapesWithImageResponse? = nil,
                replaceAllShapesWithSheetsChart: Components.Schemas.ReplaceAllShapesWithSheetsChartResponse? = nil,
                replaceAllText: Components.Schemas.ReplaceAllTextResponse? = nil
            ) {
                self.createImage = createImage
                self.createLine = createLine
                self.createShape = createShape
                self.createSheetsChart = createSheetsChart
                self.createSlide = createSlide
                self.createTable = createTable
                self.createVideo = createVideo
                self.duplicateObject = duplicateObject
                self.groupObjects = groupObjects
                self.replaceAllShapesWithImage = replaceAllShapesWithImage
                self.replaceAllShapesWithSheetsChart = replaceAllShapesWithSheetsChart
                self.replaceAllText = replaceAllText
            }
            public enum CodingKeys: String, CodingKey {
                case createImage
                case createLine
                case createShape
                case createSheetsChart
                case createSlide
                case createTable
                case createVideo
                case duplicateObject
                case groupObjects
                case replaceAllShapesWithImage
                case replaceAllShapesWithSheetsChart
                case replaceAllText
            }
        }
        /// An RGB color.
        ///
        /// - Remark: Generated from `#/components/schemas/RgbColor`.
        public struct RgbColor: Codable, Hashable, Sendable {
            /// The blue component of the color, from 0.0 to 1.0.
            ///
            /// - Remark: Generated from `#/components/schemas/RgbColor/blue`.
            public var blue: Swift.Float?
            /// The green component of the color, from 0.0 to 1.0.
            ///
            /// - Remark: Generated from `#/components/schemas/RgbColor/green`.
            public var green: Swift.Float?
            /// The red component of the color, from 0.0 to 1.0.
            ///
            /// - Remark: Generated from `#/components/schemas/RgbColor/red`.
            public var red: Swift.Float?
            /// Creates a new `RgbColor`.
            ///
            /// - Parameters:
            ///   - blue: The blue component of the color, from 0.0 to 1.0.
            ///   - green: The green component of the color, from 0.0 to 1.0.
            ///   - red: The red component of the color, from 0.0 to 1.0.
            public init(
                blue: Swift.Float? = nil,
                green: Swift.Float? = nil,
                red: Swift.Float? = nil
            ) {
                self.blue = blue
                self.green = green
                self.red = red
            }
            public enum CodingKeys: String, CodingKey {
                case blue
                case green
                case red
            }
        }
        /// The shadow properties of a page element. If these fields are unset, they may be inherited from a parent placeholder if it exists. If there is no parent, the fields will default to the value used for new page elements created in the Slides editor, which may depend on the page element kind.
        ///
        /// - Remark: Generated from `#/components/schemas/Shadow`.
        public struct Shadow: Codable, Hashable, Sendable {
            /// The alignment point of the shadow, that sets the origin for translate, scale and skew of the shadow. This property is read-only.
            ///
            /// - Remark: Generated from `#/components/schemas/Shadow/alignment`.
            @frozen public enum AlignmentPayload: String, Codable, Hashable, Sendable, CaseIterable {
                case rectanglePositionUnspecified = "RECTANGLE_POSITION_UNSPECIFIED"
                case topLeft = "TOP_LEFT"
                case topCenter = "TOP_CENTER"
                case topRight = "TOP_RIGHT"
                case leftCenter = "LEFT_CENTER"
                case center = "CENTER"
                case rightCenter = "RIGHT_CENTER"
                case bottomLeft = "BOTTOM_LEFT"
                case bottomCenter = "BOTTOM_CENTER"
                case bottomRight = "BOTTOM_RIGHT"
            }
            /// The alignment point of the shadow, that sets the origin for translate, scale and skew of the shadow. This property is read-only.
            ///
            /// - Remark: Generated from `#/components/schemas/Shadow/alignment`.
            public var alignment: Components.Schemas.Shadow.AlignmentPayload?
            /// The alpha of the shadow's color, from 0.0 to 1.0.
            ///
            /// - Remark: Generated from `#/components/schemas/Shadow/alpha`.
            public var alpha: Swift.Float?
            /// - Remark: Generated from `#/components/schemas/Shadow/blurRadius`.
            public var blurRadius: Components.Schemas.Dimension?
            /// - Remark: Generated from `#/components/schemas/Shadow/color`.
            public var color: Components.Schemas.OpaqueColor?
            /// The shadow property state. Updating the shadow on a page element will implicitly update this field to `RENDERED`, unless another value is specified in the same request. To have no shadow on a page element, set this field to `NOT_RENDERED`. In this case, any other shadow fields set in the same request will be ignored.
            ///
            /// - Remark: Generated from `#/components/schemas/Shadow/propertyState`.
            @frozen public enum PropertyStatePayload: String, Codable, Hashable, Sendable, CaseIterable {
                case rendered = "RENDERED"
                case notRendered = "NOT_RENDERED"
                case inherit = "INHERIT"
            }
            /// The shadow property state. Updating the shadow on a page element will implicitly update this field to `RENDERED`, unless another value is specified in the same request. To have no shadow on a page element, set this field to `NOT_RENDERED`. In this case, any other shadow fields set in the same request will be ignored.
            ///
            /// - Remark: Generated from `#/components/schemas/Shadow/propertyState`.
            public var propertyState: Components.Schemas.Shadow.PropertyStatePayload?
            /// Whether the shadow should rotate with the shape. This property is read-only.
            ///
            /// - Remark: Generated from `#/components/schemas/Shadow/rotateWithShape`.
            public var rotateWithShape: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/Shadow/transform`.
            public var transform: Components.Schemas.AffineTransform?
            /// The type of the shadow. This property is read-only.
            ///
            /// - Remark: Generated from `#/components/schemas/Shadow/type`.
            @frozen public enum _TypePayload: String, Codable, Hashable, Sendable, CaseIterable {
                case shadowTypeUnspecified = "SHADOW_TYPE_UNSPECIFIED"
                case outer = "OUTER"
            }
            /// The type of the shadow. This property is read-only.
            ///
            /// - Remark: Generated from `#/components/schemas/Shadow/type`.
            public var _type: Components.Schemas.Shadow._TypePayload?
            /// Creates a new `Shadow`.
            ///
            /// - Parameters:
            ///   - alignment: The alignment point of the shadow, that sets the origin for translate, scale and skew of the shadow. This property is read-only.
            ///   - alpha: The alpha of the shadow's color, from 0.0 to 1.0.
            ///   - blurRadius:
            ///   - color:
            ///   - propertyState: The shadow property state. Updating the shadow on a page element will implicitly update this field to `RENDERED`, unless another value is specified in the same request. To have no shadow on a page element, set this field to `NOT_RENDERED`. In this case, any other shadow fields set in the same request will be ignored.
            ///   - rotateWithShape: Whether the shadow should rotate with the shape. This property is read-only.
            ///   - transform:
            ///   - _type: The type of the shadow. This property is read-only.
            public init(
                alignment: Components.Schemas.Shadow.AlignmentPayload? = nil,
                alpha: Swift.Float? = nil,
                blurRadius: Components.Schemas.Dimension? = nil,
                color: Components.Schemas.OpaqueColor? = nil,
                propertyState: Components.Schemas.Shadow.PropertyStatePayload? = nil,
                rotateWithShape: Swift.Bool? = nil,
                transform: Components.Schemas.AffineTransform? = nil,
                _type: Components.Schemas.Shadow._TypePayload? = nil
            ) {
                self.alignment = alignment
                self.alpha = alpha
                self.blurRadius = blurRadius
                self.color = color
                self.propertyState = propertyState
                self.rotateWithShape = rotateWithShape
                self.transform = transform
                self._type = _type
            }
            public enum CodingKeys: String, CodingKey {
                case alignment
                case alpha
                case blurRadius
                case color
                case propertyState
                case rotateWithShape
                case transform
                case _type = "type"
            }
        }
        /// A PageElement kind representing a generic shape that does not have a more specific classification.
        ///
        /// - Remark: Generated from `#/components/schemas/Shape`.
        public struct Shape: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/Shape/placeholder`.
            public var placeholder: Components.Schemas.Placeholder?
            /// - Remark: Generated from `#/components/schemas/Shape/shapeProperties`.
            public var shapeProperties: Components.Schemas.ShapeProperties?
            /// The type of the shape.
            ///
            /// - Remark: Generated from `#/components/schemas/Shape/shapeType`.
            @frozen public enum ShapeTypePayload: String, Codable, Hashable, Sendable, CaseIterable {
                case typeUnspecified = "TYPE_UNSPECIFIED"
                case textBox = "TEXT_BOX"
                case rectangle = "RECTANGLE"
                case roundRectangle = "ROUND_RECTANGLE"
                case ellipse = "ELLIPSE"
                case arc = "ARC"
                case bentArrow = "BENT_ARROW"
                case bentUpArrow = "BENT_UP_ARROW"
                case bevel = "BEVEL"
                case blockArc = "BLOCK_ARC"
                case bracePair = "BRACE_PAIR"
                case bracketPair = "BRACKET_PAIR"
                case can = "CAN"
                case chevron = "CHEVRON"
                case chord = "CHORD"
                case cloud = "CLOUD"
                case corner = "CORNER"
                case cube = "CUBE"
                case curvedDownArrow = "CURVED_DOWN_ARROW"
                case curvedLeftArrow = "CURVED_LEFT_ARROW"
                case curvedRightArrow = "CURVED_RIGHT_ARROW"
                case curvedUpArrow = "CURVED_UP_ARROW"
                case decagon = "DECAGON"
                case diagonalStripe = "DIAGONAL_STRIPE"
                case diamond = "DIAMOND"
                case dodecagon = "DODECAGON"
                case donut = "DONUT"
                case doubleWave = "DOUBLE_WAVE"
                case downArrow = "DOWN_ARROW"
                case downArrowCallout = "DOWN_ARROW_CALLOUT"
                case foldedCorner = "FOLDED_CORNER"
                case frame = "FRAME"
                case halfFrame = "HALF_FRAME"
                case heart = "HEART"
                case heptagon = "HEPTAGON"
                case hexagon = "HEXAGON"
                case homePlate = "HOME_PLATE"
                case horizontalScroll = "HORIZONTAL_SCROLL"
                case irregularSeal1 = "IRREGULAR_SEAL_1"
                case irregularSeal2 = "IRREGULAR_SEAL_2"
                case leftArrow = "LEFT_ARROW"
                case leftArrowCallout = "LEFT_ARROW_CALLOUT"
                case leftBrace = "LEFT_BRACE"
                case leftBracket = "LEFT_BRACKET"
                case leftRightArrow = "LEFT_RIGHT_ARROW"
                case leftRightArrowCallout = "LEFT_RIGHT_ARROW_CALLOUT"
                case leftRightUpArrow = "LEFT_RIGHT_UP_ARROW"
                case leftUpArrow = "LEFT_UP_ARROW"
                case lightningBolt = "LIGHTNING_BOLT"
                case mathDivide = "MATH_DIVIDE"
                case mathEqual = "MATH_EQUAL"
                case mathMinus = "MATH_MINUS"
                case mathMultiply = "MATH_MULTIPLY"
                case mathNotEqual = "MATH_NOT_EQUAL"
                case mathPlus = "MATH_PLUS"
                case moon = "MOON"
                case noSmoking = "NO_SMOKING"
                case notchedRightArrow = "NOTCHED_RIGHT_ARROW"
                case octagon = "OCTAGON"
                case parallelogram = "PARALLELOGRAM"
                case pentagon = "PENTAGON"
                case pie = "PIE"
                case plaque = "PLAQUE"
                case plus = "PLUS"
                case quadArrow = "QUAD_ARROW"
                case quadArrowCallout = "QUAD_ARROW_CALLOUT"
                case ribbon = "RIBBON"
                case ribbon2 = "RIBBON_2"
                case rightArrow = "RIGHT_ARROW"
                case rightArrowCallout = "RIGHT_ARROW_CALLOUT"
                case rightBrace = "RIGHT_BRACE"
                case rightBracket = "RIGHT_BRACKET"
                case round1Rectangle = "ROUND_1_RECTANGLE"
                case round2DiagonalRectangle = "ROUND_2_DIAGONAL_RECTANGLE"
                case round2SameRectangle = "ROUND_2_SAME_RECTANGLE"
                case rightTriangle = "RIGHT_TRIANGLE"
                case smileyFace = "SMILEY_FACE"
                case snip1Rectangle = "SNIP_1_RECTANGLE"
                case snip2DiagonalRectangle = "SNIP_2_DIAGONAL_RECTANGLE"
                case snip2SameRectangle = "SNIP_2_SAME_RECTANGLE"
                case snipRoundRectangle = "SNIP_ROUND_RECTANGLE"
                case star10 = "STAR_10"
                case star12 = "STAR_12"
                case star16 = "STAR_16"
                case star24 = "STAR_24"
                case star32 = "STAR_32"
                case star4 = "STAR_4"
                case star5 = "STAR_5"
                case star6 = "STAR_6"
                case star7 = "STAR_7"
                case star8 = "STAR_8"
                case stripedRightArrow = "STRIPED_RIGHT_ARROW"
                case sun = "SUN"
                case trapezoid = "TRAPEZOID"
                case triangle = "TRIANGLE"
                case upArrow = "UP_ARROW"
                case upArrowCallout = "UP_ARROW_CALLOUT"
                case upDownArrow = "UP_DOWN_ARROW"
                case uturnArrow = "UTURN_ARROW"
                case verticalScroll = "VERTICAL_SCROLL"
                case wave = "WAVE"
                case wedgeEllipseCallout = "WEDGE_ELLIPSE_CALLOUT"
                case wedgeRectangleCallout = "WEDGE_RECTANGLE_CALLOUT"
                case wedgeRoundRectangleCallout = "WEDGE_ROUND_RECTANGLE_CALLOUT"
                case flowChartAlternateProcess = "FLOW_CHART_ALTERNATE_PROCESS"
                case flowChartCollate = "FLOW_CHART_COLLATE"
                case flowChartConnector = "FLOW_CHART_CONNECTOR"
                case flowChartDecision = "FLOW_CHART_DECISION"
                case flowChartDelay = "FLOW_CHART_DELAY"
                case flowChartDisplay = "FLOW_CHART_DISPLAY"
                case flowChartDocument = "FLOW_CHART_DOCUMENT"
                case flowChartExtract = "FLOW_CHART_EXTRACT"
                case flowChartInputOutput = "FLOW_CHART_INPUT_OUTPUT"
                case flowChartInternalStorage = "FLOW_CHART_INTERNAL_STORAGE"
                case flowChartMagneticDisk = "FLOW_CHART_MAGNETIC_DISK"
                case flowChartMagneticDrum = "FLOW_CHART_MAGNETIC_DRUM"
                case flowChartMagneticTape = "FLOW_CHART_MAGNETIC_TAPE"
                case flowChartManualInput = "FLOW_CHART_MANUAL_INPUT"
                case flowChartManualOperation = "FLOW_CHART_MANUAL_OPERATION"
                case flowChartMerge = "FLOW_CHART_MERGE"
                case flowChartMultidocument = "FLOW_CHART_MULTIDOCUMENT"
                case flowChartOfflineStorage = "FLOW_CHART_OFFLINE_STORAGE"
                case flowChartOffpageConnector = "FLOW_CHART_OFFPAGE_CONNECTOR"
                case flowChartOnlineStorage = "FLOW_CHART_ONLINE_STORAGE"
                case flowChartOr = "FLOW_CHART_OR"
                case flowChartPredefinedProcess = "FLOW_CHART_PREDEFINED_PROCESS"
                case flowChartPreparation = "FLOW_CHART_PREPARATION"
                case flowChartProcess = "FLOW_CHART_PROCESS"
                case flowChartPunchedCard = "FLOW_CHART_PUNCHED_CARD"
                case flowChartPunchedTape = "FLOW_CHART_PUNCHED_TAPE"
                case flowChartSort = "FLOW_CHART_SORT"
                case flowChartSummingJunction = "FLOW_CHART_SUMMING_JUNCTION"
                case flowChartTerminator = "FLOW_CHART_TERMINATOR"
                case arrowEast = "ARROW_EAST"
                case arrowNorthEast = "ARROW_NORTH_EAST"
                case arrowNorth = "ARROW_NORTH"
                case speech = "SPEECH"
                case starburst = "STARBURST"
                case teardrop = "TEARDROP"
                case ellipseRibbon = "ELLIPSE_RIBBON"
                case ellipseRibbon2 = "ELLIPSE_RIBBON_2"
                case cloudCallout = "CLOUD_CALLOUT"
                case custom = "CUSTOM"
            }
            /// The type of the shape.
            ///
            /// - Remark: Generated from `#/components/schemas/Shape/shapeType`.
            public var shapeType: Components.Schemas.Shape.ShapeTypePayload?
            /// - Remark: Generated from `#/components/schemas/Shape/text`.
            public var text: Components.Schemas.TextContent?
            /// Creates a new `Shape`.
            ///
            /// - Parameters:
            ///   - placeholder:
            ///   - shapeProperties:
            ///   - shapeType: The type of the shape.
            ///   - text:
            public init(
                placeholder: Components.Schemas.Placeholder? = nil,
                shapeProperties: Components.Schemas.ShapeProperties? = nil,
                shapeType: Components.Schemas.Shape.ShapeTypePayload? = nil,
                text: Components.Schemas.TextContent? = nil
            ) {
                self.placeholder = placeholder
                self.shapeProperties = shapeProperties
                self.shapeType = shapeType
                self.text = text
            }
            public enum CodingKeys: String, CodingKey {
                case placeholder
                case shapeProperties
                case shapeType
                case text
            }
        }
        /// The shape background fill.
        ///
        /// - Remark: Generated from `#/components/schemas/ShapeBackgroundFill`.
        public struct ShapeBackgroundFill: Codable, Hashable, Sendable {
            /// The background fill property state. Updating the fill on a shape will implicitly update this field to `RENDERED`, unless another value is specified in the same request. To have no fill on a shape, set this field to `NOT_RENDERED`. In this case, any other fill fields set in the same request will be ignored.
            ///
            /// - Remark: Generated from `#/components/schemas/ShapeBackgroundFill/propertyState`.
            @frozen public enum PropertyStatePayload: String, Codable, Hashable, Sendable, CaseIterable {
                case rendered = "RENDERED"
                case notRendered = "NOT_RENDERED"
                case inherit = "INHERIT"
            }
            /// The background fill property state. Updating the fill on a shape will implicitly update this field to `RENDERED`, unless another value is specified in the same request. To have no fill on a shape, set this field to `NOT_RENDERED`. In this case, any other fill fields set in the same request will be ignored.
            ///
            /// - Remark: Generated from `#/components/schemas/ShapeBackgroundFill/propertyState`.
            public var propertyState: Components.Schemas.ShapeBackgroundFill.PropertyStatePayload?
            /// - Remark: Generated from `#/components/schemas/ShapeBackgroundFill/solidFill`.
            public var solidFill: Components.Schemas.SolidFill?
            /// Creates a new `ShapeBackgroundFill`.
            ///
            /// - Parameters:
            ///   - propertyState: The background fill property state. Updating the fill on a shape will implicitly update this field to `RENDERED`, unless another value is specified in the same request. To have no fill on a shape, set this field to `NOT_RENDERED`. In this case, any other fill fields set in the same request will be ignored.
            ///   - solidFill:
            public init(
                propertyState: Components.Schemas.ShapeBackgroundFill.PropertyStatePayload? = nil,
                solidFill: Components.Schemas.SolidFill? = nil
            ) {
                self.propertyState = propertyState
                self.solidFill = solidFill
            }
            public enum CodingKeys: String, CodingKey {
                case propertyState
                case solidFill
            }
        }
        /// The properties of a Shape. If the shape is a placeholder shape as determined by the placeholder field, then these properties may be inherited from a parent placeholder shape. Determining the rendered value of the property depends on the corresponding property_state field value. Any text autofit settings on the shape are automatically deactivated by requests that can impact how text fits in the shape.
        ///
        /// - Remark: Generated from `#/components/schemas/ShapeProperties`.
        public struct ShapeProperties: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/ShapeProperties/autofit`.
            public var autofit: Components.Schemas.Autofit?
            /// The alignment of the content in the shape. If unspecified, the alignment is inherited from a parent placeholder if it exists. If the shape has no parent, the default alignment matches the alignment for new shapes created in the Slides editor.
            ///
            /// - Remark: Generated from `#/components/schemas/ShapeProperties/contentAlignment`.
            @frozen public enum ContentAlignmentPayload: String, Codable, Hashable, Sendable, CaseIterable {
                case contentAlignmentUnspecified = "CONTENT_ALIGNMENT_UNSPECIFIED"
                case contentAlignmentUnsupported = "CONTENT_ALIGNMENT_UNSUPPORTED"
                case top = "TOP"
                case middle = "MIDDLE"
                case bottom = "BOTTOM"
            }
            /// The alignment of the content in the shape. If unspecified, the alignment is inherited from a parent placeholder if it exists. If the shape has no parent, the default alignment matches the alignment for new shapes created in the Slides editor.
            ///
            /// - Remark: Generated from `#/components/schemas/ShapeProperties/contentAlignment`.
            public var contentAlignment: Components.Schemas.ShapeProperties.ContentAlignmentPayload?
            /// - Remark: Generated from `#/components/schemas/ShapeProperties/link`.
            public var link: Components.Schemas.Link?
            /// - Remark: Generated from `#/components/schemas/ShapeProperties/outline`.
            public var outline: Components.Schemas.Outline?
            /// - Remark: Generated from `#/components/schemas/ShapeProperties/shadow`.
            public var shadow: Components.Schemas.Shadow?
            /// - Remark: Generated from `#/components/schemas/ShapeProperties/shapeBackgroundFill`.
            public var shapeBackgroundFill: Components.Schemas.ShapeBackgroundFill?
            /// Creates a new `ShapeProperties`.
            ///
            /// - Parameters:
            ///   - autofit:
            ///   - contentAlignment: The alignment of the content in the shape. If unspecified, the alignment is inherited from a parent placeholder if it exists. If the shape has no parent, the default alignment matches the alignment for new shapes created in the Slides editor.
            ///   - link:
            ///   - outline:
            ///   - shadow:
            ///   - shapeBackgroundFill:
            public init(
                autofit: Components.Schemas.Autofit? = nil,
                contentAlignment: Components.Schemas.ShapeProperties.ContentAlignmentPayload? = nil,
                link: Components.Schemas.Link? = nil,
                outline: Components.Schemas.Outline? = nil,
                shadow: Components.Schemas.Shadow? = nil,
                shapeBackgroundFill: Components.Schemas.ShapeBackgroundFill? = nil
            ) {
                self.autofit = autofit
                self.contentAlignment = contentAlignment
                self.link = link
                self.outline = outline
                self.shadow = shadow
                self.shapeBackgroundFill = shapeBackgroundFill
            }
            public enum CodingKeys: String, CodingKey {
                case autofit
                case contentAlignment
                case link
                case outline
                case shadow
                case shapeBackgroundFill
            }
        }
        /// A PageElement kind representing a linked chart embedded from Google Sheets.
        ///
        /// - Remark: Generated from `#/components/schemas/SheetsChart`.
        public struct SheetsChart: Codable, Hashable, Sendable {
            /// The ID of the specific chart in the Google Sheets spreadsheet that is embedded.
            ///
            /// - Remark: Generated from `#/components/schemas/SheetsChart/chartId`.
            public var chartId: Swift.Int32?
            /// The URL of an image of the embedded chart, with a default lifetime of 30 minutes. This URL is tagged with the account of the requester. Anyone with the URL effectively accesses the image as the original requester. Access to the image may be lost if the presentation's sharing settings change.
            ///
            /// - Remark: Generated from `#/components/schemas/SheetsChart/contentUrl`.
            public var contentUrl: Swift.String?
            /// - Remark: Generated from `#/components/schemas/SheetsChart/sheetsChartProperties`.
            public var sheetsChartProperties: Components.Schemas.SheetsChartProperties?
            /// The ID of the Google Sheets spreadsheet that contains the source chart.
            ///
            /// - Remark: Generated from `#/components/schemas/SheetsChart/spreadsheetId`.
            public var spreadsheetId: Swift.String?
            /// Creates a new `SheetsChart`.
            ///
            /// - Parameters:
            ///   - chartId: The ID of the specific chart in the Google Sheets spreadsheet that is embedded.
            ///   - contentUrl: The URL of an image of the embedded chart, with a default lifetime of 30 minutes. This URL is tagged with the account of the requester. Anyone with the URL effectively accesses the image as the original requester. Access to the image may be lost if the presentation's sharing settings change.
            ///   - sheetsChartProperties:
            ///   - spreadsheetId: The ID of the Google Sheets spreadsheet that contains the source chart.
            public init(
                chartId: Swift.Int32? = nil,
                contentUrl: Swift.String? = nil,
                sheetsChartProperties: Components.Schemas.SheetsChartProperties? = nil,
                spreadsheetId: Swift.String? = nil
            ) {
                self.chartId = chartId
                self.contentUrl = contentUrl
                self.sheetsChartProperties = sheetsChartProperties
                self.spreadsheetId = spreadsheetId
            }
            public enum CodingKeys: String, CodingKey {
                case chartId
                case contentUrl
                case sheetsChartProperties
                case spreadsheetId
            }
        }
        /// The properties of the SheetsChart.
        ///
        /// - Remark: Generated from `#/components/schemas/SheetsChartProperties`.
        public struct SheetsChartProperties: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/SheetsChartProperties/chartImageProperties`.
            public var chartImageProperties: Components.Schemas.ImageProperties?
            /// Creates a new `SheetsChartProperties`.
            ///
            /// - Parameters:
            ///   - chartImageProperties:
            public init(chartImageProperties: Components.Schemas.ImageProperties? = nil) {
                self.chartImageProperties = chartImageProperties
            }
            public enum CodingKeys: String, CodingKey {
                case chartImageProperties
            }
        }
        /// A width and height.
        ///
        /// - Remark: Generated from `#/components/schemas/Size`.
        public struct Size: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/Size/height`.
            public var height: Components.Schemas.Dimension?
            /// - Remark: Generated from `#/components/schemas/Size/width`.
            public var width: Components.Schemas.Dimension?
            /// Creates a new `Size`.
            ///
            /// - Parameters:
            ///   - height:
            ///   - width:
            public init(
                height: Components.Schemas.Dimension? = nil,
                width: Components.Schemas.Dimension? = nil
            ) {
                self.height = height
                self.width = width
            }
            public enum CodingKeys: String, CodingKey {
                case height
                case width
            }
        }
        /// The properties of Page that are only relevant for pages with page_type SLIDE.
        ///
        /// - Remark: Generated from `#/components/schemas/SlideProperties`.
        public struct SlideProperties: Codable, Hashable, Sendable {
            /// Whether the slide is skipped in the presentation mode. Defaults to false.
            ///
            /// - Remark: Generated from `#/components/schemas/SlideProperties/isSkipped`.
            public var isSkipped: Swift.Bool? {
                get  {
                    self.storage.value.isSkipped
                }
                _modify {
                    yield &self.storage.value.isSkipped
                }
            }
            /// The object ID of the layout that this slide is based on. This property is read-only.
            ///
            /// - Remark: Generated from `#/components/schemas/SlideProperties/layoutObjectId`.
            public var layoutObjectId: Swift.String? {
                get  {
                    self.storage.value.layoutObjectId
                }
                _modify {
                    yield &self.storage.value.layoutObjectId
                }
            }
            /// The object ID of the master that this slide is based on. This property is read-only.
            ///
            /// - Remark: Generated from `#/components/schemas/SlideProperties/masterObjectId`.
            public var masterObjectId: Swift.String? {
                get  {
                    self.storage.value.masterObjectId
                }
                _modify {
                    yield &self.storage.value.masterObjectId
                }
            }
            /// - Remark: Generated from `#/components/schemas/SlideProperties/notesPage`.
            public var notesPage: Components.Schemas.Page? {
                get  {
                    self.storage.value.notesPage
                }
                _modify {
                    yield &self.storage.value.notesPage
                }
            }
            /// Creates a new `SlideProperties`.
            ///
            /// - Parameters:
            ///   - isSkipped: Whether the slide is skipped in the presentation mode. Defaults to false.
            ///   - layoutObjectId: The object ID of the layout that this slide is based on. This property is read-only.
            ///   - masterObjectId: The object ID of the master that this slide is based on. This property is read-only.
            ///   - notesPage:
            public init(
                isSkipped: Swift.Bool? = nil,
                layoutObjectId: Swift.String? = nil,
                masterObjectId: Swift.String? = nil,
                notesPage: Components.Schemas.Page? = nil
            ) {
                self.storage = .init(value: .init(
                    isSkipped: isSkipped,
                    layoutObjectId: layoutObjectId,
                    masterObjectId: masterObjectId,
                    notesPage: notesPage
                ))
            }
            public enum CodingKeys: String, CodingKey {
                case isSkipped
                case layoutObjectId
                case masterObjectId
                case notesPage
            }
            public init(from decoder: any Decoder) throws {
                self.storage = try .init(from: decoder)
            }
            public func encode(to encoder: any Encoder) throws {
                try self.storage.encode(to: encoder)
            }
            /// Internal reference storage to allow type recursion.
            private var storage: OpenAPIRuntime.CopyOnWriteBox<Storage>
            private struct Storage: Codable, Hashable, Sendable {
                /// Whether the slide is skipped in the presentation mode. Defaults to false.
                ///
                /// - Remark: Generated from `#/components/schemas/SlideProperties/isSkipped`.
                var isSkipped: Swift.Bool?
                /// The object ID of the layout that this slide is based on. This property is read-only.
                ///
                /// - Remark: Generated from `#/components/schemas/SlideProperties/layoutObjectId`.
                var layoutObjectId: Swift.String?
                /// The object ID of the master that this slide is based on. This property is read-only.
                ///
                /// - Remark: Generated from `#/components/schemas/SlideProperties/masterObjectId`.
                var masterObjectId: Swift.String?
                /// - Remark: Generated from `#/components/schemas/SlideProperties/notesPage`.
                var notesPage: Components.Schemas.Page?
                init(
                    isSkipped: Swift.Bool? = nil,
                    layoutObjectId: Swift.String? = nil,
                    masterObjectId: Swift.String? = nil,
                    notesPage: Components.Schemas.Page? = nil
                ) {
                    self.isSkipped = isSkipped
                    self.layoutObjectId = layoutObjectId
                    self.masterObjectId = masterObjectId
                    self.notesPage = notesPage
                }
                typealias CodingKeys = Components.Schemas.SlideProperties.CodingKeys
            }
        }
        /// A solid color fill. The page or page element is filled entirely with the specified color value. If any field is unset, its value may be inherited from a parent placeholder if it exists.
        ///
        /// - Remark: Generated from `#/components/schemas/SolidFill`.
        public struct SolidFill: Codable, Hashable, Sendable {
            /// The fraction of this `color` that should be applied to the pixel. That is, the final pixel color is defined by the equation: pixel color = alpha * (color) + (1.0 - alpha) * (background color) This means that a value of 1.0 corresponds to a solid color, whereas a value of 0.0 corresponds to a completely transparent color.
            ///
            /// - Remark: Generated from `#/components/schemas/SolidFill/alpha`.
            public var alpha: Swift.Float?
            /// - Remark: Generated from `#/components/schemas/SolidFill/color`.
            public var color: Components.Schemas.OpaqueColor?
            /// Creates a new `SolidFill`.
            ///
            /// - Parameters:
            ///   - alpha: The fraction of this `color` that should be applied to the pixel. That is, the final pixel color is defined by the equation: pixel color = alpha * (color) + (1.0 - alpha) * (background color) This means that a value of 1.0 corresponds to a solid color, whereas a value of 0.0 corresponds to a completely transparent color.
            ///   - color:
            public init(
                alpha: Swift.Float? = nil,
                color: Components.Schemas.OpaqueColor? = nil
            ) {
                self.alpha = alpha
                self.color = color
            }
            public enum CodingKeys: String, CodingKey {
                case alpha
                case color
            }
        }
        /// The stretched picture fill. The page or page element is filled entirely with the specified picture. The picture is stretched to fit its container.
        ///
        /// - Remark: Generated from `#/components/schemas/StretchedPictureFill`.
        public struct StretchedPictureFill: Codable, Hashable, Sendable {
            /// Reading the content_url: An URL to a picture with a default lifetime of 30 minutes. This URL is tagged with the account of the requester. Anyone with the URL effectively accesses the picture as the original requester. Access to the picture may be lost if the presentation's sharing settings change. Writing the content_url: The picture is fetched once at insertion time and a copy is stored for display inside the presentation. Pictures must be less than 50MB in size, cannot exceed 25 megapixels, and must be in one of PNG, JPEG, or GIF format. The provided URL can be at most 2 kB in length.
            ///
            /// - Remark: Generated from `#/components/schemas/StretchedPictureFill/contentUrl`.
            public var contentUrl: Swift.String?
            /// - Remark: Generated from `#/components/schemas/StretchedPictureFill/size`.
            public var size: Components.Schemas.Size?
            /// Creates a new `StretchedPictureFill`.
            ///
            /// - Parameters:
            ///   - contentUrl: Reading the content_url: An URL to a picture with a default lifetime of 30 minutes. This URL is tagged with the account of the requester. Anyone with the URL effectively accesses the picture as the original requester. Access to the picture may be lost if the presentation's sharing settings change. Writing the content_url: The picture is fetched once at insertion time and a copy is stored for display inside the presentation. Pictures must be less than 50MB in size, cannot exceed 25 megapixels, and must be in one of PNG, JPEG, or GIF format. The provided URL can be at most 2 kB in length.
            ///   - size:
            public init(
                contentUrl: Swift.String? = nil,
                size: Components.Schemas.Size? = nil
            ) {
                self.contentUrl = contentUrl
                self.size = size
            }
            public enum CodingKeys: String, CodingKey {
                case contentUrl
                case size
            }
        }
        /// A criteria that matches a specific string of text in a shape or table.
        ///
        /// - Remark: Generated from `#/components/schemas/SubstringMatchCriteria`.
        public struct SubstringMatchCriteria: Codable, Hashable, Sendable {
            /// Indicates whether the search should respect case: - `True`: the search is case sensitive. - `False`: the search is case insensitive.
            ///
            /// - Remark: Generated from `#/components/schemas/SubstringMatchCriteria/matchCase`.
            public var matchCase: Swift.Bool?
            /// The text to search for in the shape or table.
            ///
            /// - Remark: Generated from `#/components/schemas/SubstringMatchCriteria/text`.
            public var text: Swift.String?
            /// Creates a new `SubstringMatchCriteria`.
            ///
            /// - Parameters:
            ///   - matchCase: Indicates whether the search should respect case: - `True`: the search is case sensitive. - `False`: the search is case insensitive.
            ///   - text: The text to search for in the shape or table.
            public init(
                matchCase: Swift.Bool? = nil,
                text: Swift.String? = nil
            ) {
                self.matchCase = matchCase
                self.text = text
            }
            public enum CodingKeys: String, CodingKey {
                case matchCase
                case text
            }
        }
        /// A PageElement kind representing a table.
        ///
        /// - Remark: Generated from `#/components/schemas/Table`.
        public struct Table: Codable, Hashable, Sendable {
            /// Number of columns in the table.
            ///
            /// - Remark: Generated from `#/components/schemas/Table/columns`.
            public var columns: Swift.Int32?
            /// Properties of horizontal cell borders. A table's horizontal cell borders are represented as a grid. The grid has one more row than the number of rows in the table and the same number of columns as the table. For example, if the table is 3 x 3, its horizontal borders will be represented as a grid with 4 rows and 3 columns.
            ///
            /// - Remark: Generated from `#/components/schemas/Table/horizontalBorderRows`.
            public var horizontalBorderRows: [Components.Schemas.TableBorderRow]?
            /// Number of rows in the table.
            ///
            /// - Remark: Generated from `#/components/schemas/Table/rows`.
            public var rows: Swift.Int32?
            /// Properties of each column.
            ///
            /// - Remark: Generated from `#/components/schemas/Table/tableColumns`.
            public var tableColumns: [Components.Schemas.TableColumnProperties]?
            /// Properties and contents of each row. Cells that span multiple rows are contained in only one of these rows and have a row_span greater than 1.
            ///
            /// - Remark: Generated from `#/components/schemas/Table/tableRows`.
            public var tableRows: [Components.Schemas.TableRow]?
            /// Properties of vertical cell borders. A table's vertical cell borders are represented as a grid. The grid has the same number of rows as the table and one more column than the number of columns in the table. For example, if the table is 3 x 3, its vertical borders will be represented as a grid with 3 rows and 4 columns.
            ///
            /// - Remark: Generated from `#/components/schemas/Table/verticalBorderRows`.
            public var verticalBorderRows: [Components.Schemas.TableBorderRow]?
            /// Creates a new `Table`.
            ///
            /// - Parameters:
            ///   - columns: Number of columns in the table.
            ///   - horizontalBorderRows: Properties of horizontal cell borders. A table's horizontal cell borders are represented as a grid. The grid has one more row than the number of rows in the table and the same number of columns as the table. For example, if the table is 3 x 3, its horizontal borders will be represented as a grid with 4 rows and 3 columns.
            ///   - rows: Number of rows in the table.
            ///   - tableColumns: Properties of each column.
            ///   - tableRows: Properties and contents of each row. Cells that span multiple rows are contained in only one of these rows and have a row_span greater than 1.
            ///   - verticalBorderRows: Properties of vertical cell borders. A table's vertical cell borders are represented as a grid. The grid has the same number of rows as the table and one more column than the number of columns in the table. For example, if the table is 3 x 3, its vertical borders will be represented as a grid with 3 rows and 4 columns.
            public init(
                columns: Swift.Int32? = nil,
                horizontalBorderRows: [Components.Schemas.TableBorderRow]? = nil,
                rows: Swift.Int32? = nil,
                tableColumns: [Components.Schemas.TableColumnProperties]? = nil,
                tableRows: [Components.Schemas.TableRow]? = nil,
                verticalBorderRows: [Components.Schemas.TableBorderRow]? = nil
            ) {
                self.columns = columns
                self.horizontalBorderRows = horizontalBorderRows
                self.rows = rows
                self.tableColumns = tableColumns
                self.tableRows = tableRows
                self.verticalBorderRows = verticalBorderRows
            }
            public enum CodingKeys: String, CodingKey {
                case columns
                case horizontalBorderRows
                case rows
                case tableColumns
                case tableRows
                case verticalBorderRows
            }
        }
        /// The properties of each border cell.
        ///
        /// - Remark: Generated from `#/components/schemas/TableBorderCell`.
        public struct TableBorderCell: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/TableBorderCell/location`.
            public var location: Components.Schemas.TableCellLocation?
            /// - Remark: Generated from `#/components/schemas/TableBorderCell/tableBorderProperties`.
            public var tableBorderProperties: Components.Schemas.TableBorderProperties?
            /// Creates a new `TableBorderCell`.
            ///
            /// - Parameters:
            ///   - location:
            ///   - tableBorderProperties:
            public init(
                location: Components.Schemas.TableCellLocation? = nil,
                tableBorderProperties: Components.Schemas.TableBorderProperties? = nil
            ) {
                self.location = location
                self.tableBorderProperties = tableBorderProperties
            }
            public enum CodingKeys: String, CodingKey {
                case location
                case tableBorderProperties
            }
        }
        /// The fill of the border.
        ///
        /// - Remark: Generated from `#/components/schemas/TableBorderFill`.
        public struct TableBorderFill: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/TableBorderFill/solidFill`.
            public var solidFill: Components.Schemas.SolidFill?
            /// Creates a new `TableBorderFill`.
            ///
            /// - Parameters:
            ///   - solidFill:
            public init(solidFill: Components.Schemas.SolidFill? = nil) {
                self.solidFill = solidFill
            }
            public enum CodingKeys: String, CodingKey {
                case solidFill
            }
        }
        /// The border styling properties of the TableBorderCell.
        ///
        /// - Remark: Generated from `#/components/schemas/TableBorderProperties`.
        public struct TableBorderProperties: Codable, Hashable, Sendable {
            /// The dash style of the border.
            ///
            /// - Remark: Generated from `#/components/schemas/TableBorderProperties/dashStyle`.
            @frozen public enum DashStylePayload: String, Codable, Hashable, Sendable, CaseIterable {
                case dashStyleUnspecified = "DASH_STYLE_UNSPECIFIED"
                case solid = "SOLID"
                case dot = "DOT"
                case dash = "DASH"
                case dashDot = "DASH_DOT"
                case longDash = "LONG_DASH"
                case longDashDot = "LONG_DASH_DOT"
            }
            /// The dash style of the border.
            ///
            /// - Remark: Generated from `#/components/schemas/TableBorderProperties/dashStyle`.
            public var dashStyle: Components.Schemas.TableBorderProperties.DashStylePayload?
            /// - Remark: Generated from `#/components/schemas/TableBorderProperties/tableBorderFill`.
            public var tableBorderFill: Components.Schemas.TableBorderFill?
            /// - Remark: Generated from `#/components/schemas/TableBorderProperties/weight`.
            public var weight: Components.Schemas.Dimension?
            /// Creates a new `TableBorderProperties`.
            ///
            /// - Parameters:
            ///   - dashStyle: The dash style of the border.
            ///   - tableBorderFill:
            ///   - weight:
            public init(
                dashStyle: Components.Schemas.TableBorderProperties.DashStylePayload? = nil,
                tableBorderFill: Components.Schemas.TableBorderFill? = nil,
                weight: Components.Schemas.Dimension? = nil
            ) {
                self.dashStyle = dashStyle
                self.tableBorderFill = tableBorderFill
                self.weight = weight
            }
            public enum CodingKeys: String, CodingKey {
                case dashStyle
                case tableBorderFill
                case weight
            }
        }
        /// Contents of each border row in a table.
        ///
        /// - Remark: Generated from `#/components/schemas/TableBorderRow`.
        public struct TableBorderRow: Codable, Hashable, Sendable {
            /// Properties of each border cell. When a border's adjacent table cells are merged, it is not included in the response.
            ///
            /// - Remark: Generated from `#/components/schemas/TableBorderRow/tableBorderCells`.
            public var tableBorderCells: [Components.Schemas.TableBorderCell]?
            /// Creates a new `TableBorderRow`.
            ///
            /// - Parameters:
            ///   - tableBorderCells: Properties of each border cell. When a border's adjacent table cells are merged, it is not included in the response.
            public init(tableBorderCells: [Components.Schemas.TableBorderCell]? = nil) {
                self.tableBorderCells = tableBorderCells
            }
            public enum CodingKeys: String, CodingKey {
                case tableBorderCells
            }
        }
        /// Properties and contents of each table cell.
        ///
        /// - Remark: Generated from `#/components/schemas/TableCell`.
        public struct TableCell: Codable, Hashable, Sendable {
            /// Column span of the cell.
            ///
            /// - Remark: Generated from `#/components/schemas/TableCell/columnSpan`.
            public var columnSpan: Swift.Int32?
            /// - Remark: Generated from `#/components/schemas/TableCell/location`.
            public var location: Components.Schemas.TableCellLocation?
            /// Row span of the cell.
            ///
            /// - Remark: Generated from `#/components/schemas/TableCell/rowSpan`.
            public var rowSpan: Swift.Int32?
            /// - Remark: Generated from `#/components/schemas/TableCell/tableCellProperties`.
            public var tableCellProperties: Components.Schemas.TableCellProperties?
            /// - Remark: Generated from `#/components/schemas/TableCell/text`.
            public var text: Components.Schemas.TextContent?
            /// Creates a new `TableCell`.
            ///
            /// - Parameters:
            ///   - columnSpan: Column span of the cell.
            ///   - location:
            ///   - rowSpan: Row span of the cell.
            ///   - tableCellProperties:
            ///   - text:
            public init(
                columnSpan: Swift.Int32? = nil,
                location: Components.Schemas.TableCellLocation? = nil,
                rowSpan: Swift.Int32? = nil,
                tableCellProperties: Components.Schemas.TableCellProperties? = nil,
                text: Components.Schemas.TextContent? = nil
            ) {
                self.columnSpan = columnSpan
                self.location = location
                self.rowSpan = rowSpan
                self.tableCellProperties = tableCellProperties
                self.text = text
            }
            public enum CodingKeys: String, CodingKey {
                case columnSpan
                case location
                case rowSpan
                case tableCellProperties
                case text
            }
        }
        /// The table cell background fill.
        ///
        /// - Remark: Generated from `#/components/schemas/TableCellBackgroundFill`.
        public struct TableCellBackgroundFill: Codable, Hashable, Sendable {
            /// The background fill property state. Updating the fill on a table cell will implicitly update this field to `RENDERED`, unless another value is specified in the same request. To have no fill on a table cell, set this field to `NOT_RENDERED`. In this case, any other fill fields set in the same request will be ignored.
            ///
            /// - Remark: Generated from `#/components/schemas/TableCellBackgroundFill/propertyState`.
            @frozen public enum PropertyStatePayload: String, Codable, Hashable, Sendable, CaseIterable {
                case rendered = "RENDERED"
                case notRendered = "NOT_RENDERED"
                case inherit = "INHERIT"
            }
            /// The background fill property state. Updating the fill on a table cell will implicitly update this field to `RENDERED`, unless another value is specified in the same request. To have no fill on a table cell, set this field to `NOT_RENDERED`. In this case, any other fill fields set in the same request will be ignored.
            ///
            /// - Remark: Generated from `#/components/schemas/TableCellBackgroundFill/propertyState`.
            public var propertyState: Components.Schemas.TableCellBackgroundFill.PropertyStatePayload?
            /// - Remark: Generated from `#/components/schemas/TableCellBackgroundFill/solidFill`.
            public var solidFill: Components.Schemas.SolidFill?
            /// Creates a new `TableCellBackgroundFill`.
            ///
            /// - Parameters:
            ///   - propertyState: The background fill property state. Updating the fill on a table cell will implicitly update this field to `RENDERED`, unless another value is specified in the same request. To have no fill on a table cell, set this field to `NOT_RENDERED`. In this case, any other fill fields set in the same request will be ignored.
            ///   - solidFill:
            public init(
                propertyState: Components.Schemas.TableCellBackgroundFill.PropertyStatePayload? = nil,
                solidFill: Components.Schemas.SolidFill? = nil
            ) {
                self.propertyState = propertyState
                self.solidFill = solidFill
            }
            public enum CodingKeys: String, CodingKey {
                case propertyState
                case solidFill
            }
        }
        /// A location of a single table cell within a table.
        ///
        /// - Remark: Generated from `#/components/schemas/TableCellLocation`.
        public struct TableCellLocation: Codable, Hashable, Sendable {
            /// The 0-based column index.
            ///
            /// - Remark: Generated from `#/components/schemas/TableCellLocation/columnIndex`.
            public var columnIndex: Swift.Int32?
            /// The 0-based row index.
            ///
            /// - Remark: Generated from `#/components/schemas/TableCellLocation/rowIndex`.
            public var rowIndex: Swift.Int32?
            /// Creates a new `TableCellLocation`.
            ///
            /// - Parameters:
            ///   - columnIndex: The 0-based column index.
            ///   - rowIndex: The 0-based row index.
            public init(
                columnIndex: Swift.Int32? = nil,
                rowIndex: Swift.Int32? = nil
            ) {
                self.columnIndex = columnIndex
                self.rowIndex = rowIndex
            }
            public enum CodingKeys: String, CodingKey {
                case columnIndex
                case rowIndex
            }
        }
        /// The properties of the TableCell.
        ///
        /// - Remark: Generated from `#/components/schemas/TableCellProperties`.
        public struct TableCellProperties: Codable, Hashable, Sendable {
            /// The alignment of the content in the table cell. The default alignment matches the alignment for newly created table cells in the Slides editor.
            ///
            /// - Remark: Generated from `#/components/schemas/TableCellProperties/contentAlignment`.
            @frozen public enum ContentAlignmentPayload: String, Codable, Hashable, Sendable, CaseIterable {
                case contentAlignmentUnspecified = "CONTENT_ALIGNMENT_UNSPECIFIED"
                case contentAlignmentUnsupported = "CONTENT_ALIGNMENT_UNSUPPORTED"
                case top = "TOP"
                case middle = "MIDDLE"
                case bottom = "BOTTOM"
            }
            /// The alignment of the content in the table cell. The default alignment matches the alignment for newly created table cells in the Slides editor.
            ///
            /// - Remark: Generated from `#/components/schemas/TableCellProperties/contentAlignment`.
            public var contentAlignment: Components.Schemas.TableCellProperties.ContentAlignmentPayload?
            /// - Remark: Generated from `#/components/schemas/TableCellProperties/tableCellBackgroundFill`.
            public var tableCellBackgroundFill: Components.Schemas.TableCellBackgroundFill?
            /// Creates a new `TableCellProperties`.
            ///
            /// - Parameters:
            ///   - contentAlignment: The alignment of the content in the table cell. The default alignment matches the alignment for newly created table cells in the Slides editor.
            ///   - tableCellBackgroundFill:
            public init(
                contentAlignment: Components.Schemas.TableCellProperties.ContentAlignmentPayload? = nil,
                tableCellBackgroundFill: Components.Schemas.TableCellBackgroundFill? = nil
            ) {
                self.contentAlignment = contentAlignment
                self.tableCellBackgroundFill = tableCellBackgroundFill
            }
            public enum CodingKeys: String, CodingKey {
                case contentAlignment
                case tableCellBackgroundFill
            }
        }
        /// Properties of each column in a table.
        ///
        /// - Remark: Generated from `#/components/schemas/TableColumnProperties`.
        public struct TableColumnProperties: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/TableColumnProperties/columnWidth`.
            public var columnWidth: Components.Schemas.Dimension?
            /// Creates a new `TableColumnProperties`.
            ///
            /// - Parameters:
            ///   - columnWidth:
            public init(columnWidth: Components.Schemas.Dimension? = nil) {
                self.columnWidth = columnWidth
            }
            public enum CodingKeys: String, CodingKey {
                case columnWidth
            }
        }
        /// A table range represents a reference to a subset of a table. It's important to note that the cells specified by a table range do not necessarily form a rectangle. For example, let's say we have a 3 x 3 table where all the cells of the last row are merged together. The table looks like this: [ ] A table range with location = (0, 0), row span = 3 and column span = 2 specifies the following cells: x x [ x x x ]
        ///
        /// - Remark: Generated from `#/components/schemas/TableRange`.
        public struct TableRange: Codable, Hashable, Sendable {
            /// The column span of the table range.
            ///
            /// - Remark: Generated from `#/components/schemas/TableRange/columnSpan`.
            public var columnSpan: Swift.Int32?
            /// - Remark: Generated from `#/components/schemas/TableRange/location`.
            public var location: Components.Schemas.TableCellLocation?
            /// The row span of the table range.
            ///
            /// - Remark: Generated from `#/components/schemas/TableRange/rowSpan`.
            public var rowSpan: Swift.Int32?
            /// Creates a new `TableRange`.
            ///
            /// - Parameters:
            ///   - columnSpan: The column span of the table range.
            ///   - location:
            ///   - rowSpan: The row span of the table range.
            public init(
                columnSpan: Swift.Int32? = nil,
                location: Components.Schemas.TableCellLocation? = nil,
                rowSpan: Swift.Int32? = nil
            ) {
                self.columnSpan = columnSpan
                self.location = location
                self.rowSpan = rowSpan
            }
            public enum CodingKeys: String, CodingKey {
                case columnSpan
                case location
                case rowSpan
            }
        }
        /// Properties and contents of each row in a table.
        ///
        /// - Remark: Generated from `#/components/schemas/TableRow`.
        public struct TableRow: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/TableRow/rowHeight`.
            public var rowHeight: Components.Schemas.Dimension?
            /// Properties and contents of each cell. Cells that span multiple columns are represented only once with a column_span greater than 1. As a result, the length of this collection does not always match the number of columns of the entire table.
            ///
            /// - Remark: Generated from `#/components/schemas/TableRow/tableCells`.
            public var tableCells: [Components.Schemas.TableCell]?
            /// - Remark: Generated from `#/components/schemas/TableRow/tableRowProperties`.
            public var tableRowProperties: Components.Schemas.TableRowProperties?
            /// Creates a new `TableRow`.
            ///
            /// - Parameters:
            ///   - rowHeight:
            ///   - tableCells: Properties and contents of each cell. Cells that span multiple columns are represented only once with a column_span greater than 1. As a result, the length of this collection does not always match the number of columns of the entire table.
            ///   - tableRowProperties:
            public init(
                rowHeight: Components.Schemas.Dimension? = nil,
                tableCells: [Components.Schemas.TableCell]? = nil,
                tableRowProperties: Components.Schemas.TableRowProperties? = nil
            ) {
                self.rowHeight = rowHeight
                self.tableCells = tableCells
                self.tableRowProperties = tableRowProperties
            }
            public enum CodingKeys: String, CodingKey {
                case rowHeight
                case tableCells
                case tableRowProperties
            }
        }
        /// Properties of each row in a table.
        ///
        /// - Remark: Generated from `#/components/schemas/TableRowProperties`.
        public struct TableRowProperties: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/TableRowProperties/minRowHeight`.
            public var minRowHeight: Components.Schemas.Dimension?
            /// Creates a new `TableRowProperties`.
            ///
            /// - Parameters:
            ///   - minRowHeight:
            public init(minRowHeight: Components.Schemas.Dimension? = nil) {
                self.minRowHeight = minRowHeight
            }
            public enum CodingKeys: String, CodingKey {
                case minRowHeight
            }
        }
        /// The general text content. The text must reside in a compatible shape (e.g. text box or rectangle) or a table cell in a page.
        ///
        /// - Remark: Generated from `#/components/schemas/TextContent`.
        public struct TextContent: Codable, Hashable, Sendable {
            /// The bulleted lists contained in this text, keyed by list ID.
            ///
            /// - Remark: Generated from `#/components/schemas/TextContent/lists`.
            public struct ListsPayload: Codable, Hashable, Sendable {
                /// A container of undocumented properties.
                public var additionalProperties: [String: Components.Schemas.List]
                /// Creates a new `ListsPayload`.
                ///
                /// - Parameters:
                ///   - additionalProperties: A container of undocumented properties.
                public init(additionalProperties: [String: Components.Schemas.List] = .init()) {
                    self.additionalProperties = additionalProperties
                }
                public init(from decoder: any Decoder) throws {
                    additionalProperties = try decoder.decodeAdditionalProperties(knownKeys: [])
                }
                public func encode(to encoder: any Encoder) throws {
                    try encoder.encodeAdditionalProperties(additionalProperties)
                }
            }
            /// The bulleted lists contained in this text, keyed by list ID.
            ///
            /// - Remark: Generated from `#/components/schemas/TextContent/lists`.
            public var lists: Components.Schemas.TextContent.ListsPayload?
            /// The text contents broken down into its component parts, including styling information. This property is read-only.
            ///
            /// - Remark: Generated from `#/components/schemas/TextContent/textElements`.
            public var textElements: [Components.Schemas.TextElement]?
            /// Creates a new `TextContent`.
            ///
            /// - Parameters:
            ///   - lists: The bulleted lists contained in this text, keyed by list ID.
            ///   - textElements: The text contents broken down into its component parts, including styling information. This property is read-only.
            public init(
                lists: Components.Schemas.TextContent.ListsPayload? = nil,
                textElements: [Components.Schemas.TextElement]? = nil
            ) {
                self.lists = lists
                self.textElements = textElements
            }
            public enum CodingKeys: String, CodingKey {
                case lists
                case textElements
            }
        }
        /// A TextElement describes the content of a range of indices in the text content of a Shape or TableCell.
        ///
        /// - Remark: Generated from `#/components/schemas/TextElement`.
        public struct TextElement: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/TextElement/autoText`.
            public var autoText: Components.Schemas.AutoText?
            /// The zero-based end index of this text element, exclusive, in Unicode code units.
            ///
            /// - Remark: Generated from `#/components/schemas/TextElement/endIndex`.
            public var endIndex: Swift.Int32?
            /// - Remark: Generated from `#/components/schemas/TextElement/paragraphMarker`.
            public var paragraphMarker: Components.Schemas.ParagraphMarker?
            /// The zero-based start index of this text element, in Unicode code units.
            ///
            /// - Remark: Generated from `#/components/schemas/TextElement/startIndex`.
            public var startIndex: Swift.Int32?
            /// - Remark: Generated from `#/components/schemas/TextElement/textRun`.
            public var textRun: Components.Schemas.TextRun?
            /// Creates a new `TextElement`.
            ///
            /// - Parameters:
            ///   - autoText:
            ///   - endIndex: The zero-based end index of this text element, exclusive, in Unicode code units.
            ///   - paragraphMarker:
            ///   - startIndex: The zero-based start index of this text element, in Unicode code units.
            ///   - textRun:
            public init(
                autoText: Components.Schemas.AutoText? = nil,
                endIndex: Swift.Int32? = nil,
                paragraphMarker: Components.Schemas.ParagraphMarker? = nil,
                startIndex: Swift.Int32? = nil,
                textRun: Components.Schemas.TextRun? = nil
            ) {
                self.autoText = autoText
                self.endIndex = endIndex
                self.paragraphMarker = paragraphMarker
                self.startIndex = startIndex
                self.textRun = textRun
            }
            public enum CodingKeys: String, CodingKey {
                case autoText
                case endIndex
                case paragraphMarker
                case startIndex
                case textRun
            }
        }
        /// A TextElement kind that represents a run of text that all has the same styling.
        ///
        /// - Remark: Generated from `#/components/schemas/TextRun`.
        public struct TextRun: Codable, Hashable, Sendable {
            /// The text of this run.
            ///
            /// - Remark: Generated from `#/components/schemas/TextRun/content`.
            public var content: Swift.String?
            /// - Remark: Generated from `#/components/schemas/TextRun/style`.
            public var style: Components.Schemas.TextStyle?
            /// Creates a new `TextRun`.
            ///
            /// - Parameters:
            ///   - content: The text of this run.
            ///   - style:
            public init(
                content: Swift.String? = nil,
                style: Components.Schemas.TextStyle? = nil
            ) {
                self.content = content
                self.style = style
            }
            public enum CodingKeys: String, CodingKey {
                case content
                case style
            }
        }
        /// Represents the styling that can be applied to a TextRun. If this text is contained in a shape with a parent placeholder, then these text styles may be inherited from the parent. Which text styles are inherited depend on the nesting level of lists: * A text run in a paragraph that is not in a list will inherit its text style from the the newline character in the paragraph at the 0 nesting level of the list inside the parent placeholder. * A text run in a paragraph that is in a list will inherit its text style from the newline character in the paragraph at its corresponding nesting level of the list inside the parent placeholder. Inherited text styles are represented as unset fields in this message. If text is contained in a shape without a parent placeholder, unsetting these fields will revert the style to a value matching the defaults in the Slides editor.
        ///
        /// - Remark: Generated from `#/components/schemas/TextStyle`.
        public struct TextStyle: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/TextStyle/backgroundColor`.
            public var backgroundColor: Components.Schemas.OptionalColor?
            /// The text's vertical offset from its normal position. Text with `SUPERSCRIPT` or `SUBSCRIPT` baseline offsets is automatically rendered in a smaller font size, computed based on the `font_size` field. The `font_size` itself is not affected by changes in this field.
            ///
            /// - Remark: Generated from `#/components/schemas/TextStyle/baselineOffset`.
            @frozen public enum BaselineOffsetPayload: String, Codable, Hashable, Sendable, CaseIterable {
                case baselineOffsetUnspecified = "BASELINE_OFFSET_UNSPECIFIED"
                case none = "NONE"
                case superscript = "SUPERSCRIPT"
                case _subscript = "SUBSCRIPT"
            }
            /// The text's vertical offset from its normal position. Text with `SUPERSCRIPT` or `SUBSCRIPT` baseline offsets is automatically rendered in a smaller font size, computed based on the `font_size` field. The `font_size` itself is not affected by changes in this field.
            ///
            /// - Remark: Generated from `#/components/schemas/TextStyle/baselineOffset`.
            public var baselineOffset: Components.Schemas.TextStyle.BaselineOffsetPayload?
            /// Whether or not the text is rendered as bold.
            ///
            /// - Remark: Generated from `#/components/schemas/TextStyle/bold`.
            public var bold: Swift.Bool?
            /// The font family of the text. The font family can be any font from the Font menu in Slides or from [Google Fonts] (https://fonts.google.com/). If the font name is unrecognized, the text is rendered in `Arial`. Some fonts can affect the weight of the text. If an update request specifies values for both `font_family` and `bold`, the explicitly-set `bold` value is used.
            ///
            /// - Remark: Generated from `#/components/schemas/TextStyle/fontFamily`.
            public var fontFamily: Swift.String?
            /// - Remark: Generated from `#/components/schemas/TextStyle/fontSize`.
            public var fontSize: Components.Schemas.Dimension?
            /// - Remark: Generated from `#/components/schemas/TextStyle/foregroundColor`.
            public var foregroundColor: Components.Schemas.OptionalColor?
            /// Whether or not the text is italicized.
            ///
            /// - Remark: Generated from `#/components/schemas/TextStyle/italic`.
            public var italic: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/TextStyle/link`.
            public var link: Components.Schemas.Link?
            /// Whether or not the text is in small capital letters.
            ///
            /// - Remark: Generated from `#/components/schemas/TextStyle/smallCaps`.
            public var smallCaps: Swift.Bool?
            /// Whether or not the text is struck through.
            ///
            /// - Remark: Generated from `#/components/schemas/TextStyle/strikethrough`.
            public var strikethrough: Swift.Bool?
            /// Whether or not the text is underlined.
            ///
            /// - Remark: Generated from `#/components/schemas/TextStyle/underline`.
            public var underline: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/TextStyle/weightedFontFamily`.
            public var weightedFontFamily: Components.Schemas.WeightedFontFamily?
            /// Creates a new `TextStyle`.
            ///
            /// - Parameters:
            ///   - backgroundColor:
            ///   - baselineOffset: The text's vertical offset from its normal position. Text with `SUPERSCRIPT` or `SUBSCRIPT` baseline offsets is automatically rendered in a smaller font size, computed based on the `font_size` field. The `font_size` itself is not affected by changes in this field.
            ///   - bold: Whether or not the text is rendered as bold.
            ///   - fontFamily: The font family of the text. The font family can be any font from the Font menu in Slides or from [Google Fonts] (https://fonts.google.com/). If the font name is unrecognized, the text is rendered in `Arial`. Some fonts can affect the weight of the text. If an update request specifies values for both `font_family` and `bold`, the explicitly-set `bold` value is used.
            ///   - fontSize:
            ///   - foregroundColor:
            ///   - italic: Whether or not the text is italicized.
            ///   - link:
            ///   - smallCaps: Whether or not the text is in small capital letters.
            ///   - strikethrough: Whether or not the text is struck through.
            ///   - underline: Whether or not the text is underlined.
            ///   - weightedFontFamily:
            public init(
                backgroundColor: Components.Schemas.OptionalColor? = nil,
                baselineOffset: Components.Schemas.TextStyle.BaselineOffsetPayload? = nil,
                bold: Swift.Bool? = nil,
                fontFamily: Swift.String? = nil,
                fontSize: Components.Schemas.Dimension? = nil,
                foregroundColor: Components.Schemas.OptionalColor? = nil,
                italic: Swift.Bool? = nil,
                link: Components.Schemas.Link? = nil,
                smallCaps: Swift.Bool? = nil,
                strikethrough: Swift.Bool? = nil,
                underline: Swift.Bool? = nil,
                weightedFontFamily: Components.Schemas.WeightedFontFamily? = nil
            ) {
                self.backgroundColor = backgroundColor
                self.baselineOffset = baselineOffset
                self.bold = bold
                self.fontFamily = fontFamily
                self.fontSize = fontSize
                self.foregroundColor = foregroundColor
                self.italic = italic
                self.link = link
                self.smallCaps = smallCaps
                self.strikethrough = strikethrough
                self.underline = underline
                self.weightedFontFamily = weightedFontFamily
            }
            public enum CodingKeys: String, CodingKey {
                case backgroundColor
                case baselineOffset
                case bold
                case fontFamily
                case fontSize
                case foregroundColor
                case italic
                case link
                case smallCaps
                case strikethrough
                case underline
                case weightedFontFamily
            }
        }
        /// A pair mapping a theme color type to the concrete color it represents.
        ///
        /// - Remark: Generated from `#/components/schemas/ThemeColorPair`.
        public struct ThemeColorPair: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/ThemeColorPair/color`.
            public var color: Components.Schemas.RgbColor?
            /// The type of the theme color.
            ///
            /// - Remark: Generated from `#/components/schemas/ThemeColorPair/type`.
            @frozen public enum _TypePayload: String, Codable, Hashable, Sendable, CaseIterable {
                case themeColorTypeUnspecified = "THEME_COLOR_TYPE_UNSPECIFIED"
                case dark1 = "DARK1"
                case light1 = "LIGHT1"
                case dark2 = "DARK2"
                case light2 = "LIGHT2"
                case accent1 = "ACCENT1"
                case accent2 = "ACCENT2"
                case accent3 = "ACCENT3"
                case accent4 = "ACCENT4"
                case accent5 = "ACCENT5"
                case accent6 = "ACCENT6"
                case hyperlink = "HYPERLINK"
                case followedHyperlink = "FOLLOWED_HYPERLINK"
                case text1 = "TEXT1"
                case background1 = "BACKGROUND1"
                case text2 = "TEXT2"
                case background2 = "BACKGROUND2"
            }
            /// The type of the theme color.
            ///
            /// - Remark: Generated from `#/components/schemas/ThemeColorPair/type`.
            public var _type: Components.Schemas.ThemeColorPair._TypePayload?
            /// Creates a new `ThemeColorPair`.
            ///
            /// - Parameters:
            ///   - color:
            ///   - _type: The type of the theme color.
            public init(
                color: Components.Schemas.RgbColor? = nil,
                _type: Components.Schemas.ThemeColorPair._TypePayload? = nil
            ) {
                self.color = color
                self._type = _type
            }
            public enum CodingKeys: String, CodingKey {
                case color
                case _type = "type"
            }
        }
        /// The thumbnail of a page.
        ///
        /// - Remark: Generated from `#/components/schemas/Thumbnail`.
        public struct Thumbnail: Codable, Hashable, Sendable {
            /// The content URL of the thumbnail image. The URL to the image has a default lifetime of 30 minutes. This URL is tagged with the account of the requester. Anyone with the URL effectively accesses the image as the original requester. Access to the image may be lost if the presentation's sharing settings change. The mime type of the thumbnail image is the same as specified in the `GetPageThumbnailRequest`.
            ///
            /// - Remark: Generated from `#/components/schemas/Thumbnail/contentUrl`.
            public var contentUrl: Swift.String?
            /// The positive height in pixels of the thumbnail image.
            ///
            /// - Remark: Generated from `#/components/schemas/Thumbnail/height`.
            public var height: Swift.Int32?
            /// The positive width in pixels of the thumbnail image.
            ///
            /// - Remark: Generated from `#/components/schemas/Thumbnail/width`.
            public var width: Swift.Int32?
            /// Creates a new `Thumbnail`.
            ///
            /// - Parameters:
            ///   - contentUrl: The content URL of the thumbnail image. The URL to the image has a default lifetime of 30 minutes. This URL is tagged with the account of the requester. Anyone with the URL effectively accesses the image as the original requester. Access to the image may be lost if the presentation's sharing settings change. The mime type of the thumbnail image is the same as specified in the `GetPageThumbnailRequest`.
            ///   - height: The positive height in pixels of the thumbnail image.
            ///   - width: The positive width in pixels of the thumbnail image.
            public init(
                contentUrl: Swift.String? = nil,
                height: Swift.Int32? = nil,
                width: Swift.Int32? = nil
            ) {
                self.contentUrl = contentUrl
                self.height = height
                self.width = width
            }
            public enum CodingKeys: String, CodingKey {
                case contentUrl
                case height
                case width
            }
        }
        /// Ungroups objects, such as groups.
        ///
        /// - Remark: Generated from `#/components/schemas/UngroupObjectsRequest`.
        public struct UngroupObjectsRequest: Codable, Hashable, Sendable {
            /// The object IDs of the objects to ungroup. Only groups that are not inside other groups can be ungrouped. All the groups should be on the same page. The group itself is deleted. The visual sizes and positions of all the children are preserved.
            ///
            /// - Remark: Generated from `#/components/schemas/UngroupObjectsRequest/objectIds`.
            public var objectIds: [Swift.String]?
            /// Creates a new `UngroupObjectsRequest`.
            ///
            /// - Parameters:
            ///   - objectIds: The object IDs of the objects to ungroup. Only groups that are not inside other groups can be ungrouped. All the groups should be on the same page. The group itself is deleted. The visual sizes and positions of all the children are preserved.
            public init(objectIds: [Swift.String]? = nil) {
                self.objectIds = objectIds
            }
            public enum CodingKeys: String, CodingKey {
                case objectIds
            }
        }
        /// Unmerges cells in a Table.
        ///
        /// - Remark: Generated from `#/components/schemas/UnmergeTableCellsRequest`.
        public struct UnmergeTableCellsRequest: Codable, Hashable, Sendable {
            /// The object ID of the table.
            ///
            /// - Remark: Generated from `#/components/schemas/UnmergeTableCellsRequest/objectId`.
            public var objectId: Swift.String?
            /// - Remark: Generated from `#/components/schemas/UnmergeTableCellsRequest/tableRange`.
            public var tableRange: Components.Schemas.TableRange?
            /// Creates a new `UnmergeTableCellsRequest`.
            ///
            /// - Parameters:
            ///   - objectId: The object ID of the table.
            ///   - tableRange:
            public init(
                objectId: Swift.String? = nil,
                tableRange: Components.Schemas.TableRange? = nil
            ) {
                self.objectId = objectId
                self.tableRange = tableRange
            }
            public enum CodingKeys: String, CodingKey {
                case objectId
                case tableRange
            }
        }
        /// Update the properties of an Image.
        ///
        /// - Remark: Generated from `#/components/schemas/UpdateImagePropertiesRequest`.
        public struct UpdateImagePropertiesRequest: Codable, Hashable, Sendable {
            /// The fields that should be updated. At least one field must be specified. The root `imageProperties` is implied and should not be specified. A single `"*"` can be used as short-hand for listing every field. For example to update the image outline color, set `fields` to `"outline.outlineFill.solidFill.color"`. To reset a property to its default value, include its field name in the field mask but leave the field itself unset.
            ///
            /// - Remark: Generated from `#/components/schemas/UpdateImagePropertiesRequest/fields`.
            public var fields: Swift.String?
            /// - Remark: Generated from `#/components/schemas/UpdateImagePropertiesRequest/imageProperties`.
            public var imageProperties: Components.Schemas.ImageProperties?
            /// The object ID of the image the updates are applied to.
            ///
            /// - Remark: Generated from `#/components/schemas/UpdateImagePropertiesRequest/objectId`.
            public var objectId: Swift.String?
            /// Creates a new `UpdateImagePropertiesRequest`.
            ///
            /// - Parameters:
            ///   - fields: The fields that should be updated. At least one field must be specified. The root `imageProperties` is implied and should not be specified. A single `"*"` can be used as short-hand for listing every field. For example to update the image outline color, set `fields` to `"outline.outlineFill.solidFill.color"`. To reset a property to its default value, include its field name in the field mask but leave the field itself unset.
            ///   - imageProperties:
            ///   - objectId: The object ID of the image the updates are applied to.
            public init(
                fields: Swift.String? = nil,
                imageProperties: Components.Schemas.ImageProperties? = nil,
                objectId: Swift.String? = nil
            ) {
                self.fields = fields
                self.imageProperties = imageProperties
                self.objectId = objectId
            }
            public enum CodingKeys: String, CodingKey {
                case fields
                case imageProperties
                case objectId
            }
        }
        /// Updates the category of a line.
        ///
        /// - Remark: Generated from `#/components/schemas/UpdateLineCategoryRequest`.
        public struct UpdateLineCategoryRequest: Codable, Hashable, Sendable {
            /// The line category to update to. The exact line type is determined based on the category to update to and how it's routed to connect to other page elements.
            ///
            /// - Remark: Generated from `#/components/schemas/UpdateLineCategoryRequest/lineCategory`.
            @frozen public enum LineCategoryPayload: String, Codable, Hashable, Sendable, CaseIterable {
                case lineCategoryUnspecified = "LINE_CATEGORY_UNSPECIFIED"
                case straight = "STRAIGHT"
                case bent = "BENT"
                case curved = "CURVED"
            }
            /// The line category to update to. The exact line type is determined based on the category to update to and how it's routed to connect to other page elements.
            ///
            /// - Remark: Generated from `#/components/schemas/UpdateLineCategoryRequest/lineCategory`.
            public var lineCategory: Components.Schemas.UpdateLineCategoryRequest.LineCategoryPayload?
            /// The object ID of the line the update is applied to. Only a line with a category indicating it is a "connector" can be updated. The line may be rerouted after updating its category.
            ///
            /// - Remark: Generated from `#/components/schemas/UpdateLineCategoryRequest/objectId`.
            public var objectId: Swift.String?
            /// Creates a new `UpdateLineCategoryRequest`.
            ///
            /// - Parameters:
            ///   - lineCategory: The line category to update to. The exact line type is determined based on the category to update to and how it's routed to connect to other page elements.
            ///   - objectId: The object ID of the line the update is applied to. Only a line with a category indicating it is a "connector" can be updated. The line may be rerouted after updating its category.
            public init(
                lineCategory: Components.Schemas.UpdateLineCategoryRequest.LineCategoryPayload? = nil,
                objectId: Swift.String? = nil
            ) {
                self.lineCategory = lineCategory
                self.objectId = objectId
            }
            public enum CodingKeys: String, CodingKey {
                case lineCategory
                case objectId
            }
        }
        /// Updates the properties of a Line.
        ///
        /// - Remark: Generated from `#/components/schemas/UpdateLinePropertiesRequest`.
        public struct UpdateLinePropertiesRequest: Codable, Hashable, Sendable {
            /// The fields that should be updated. At least one field must be specified. The root `lineProperties` is implied and should not be specified. A single `"*"` can be used as short-hand for listing every field. For example to update the line solid fill color, set `fields` to `"lineFill.solidFill.color"`. To reset a property to its default value, include its field name in the field mask but leave the field itself unset.
            ///
            /// - Remark: Generated from `#/components/schemas/UpdateLinePropertiesRequest/fields`.
            public var fields: Swift.String?
            /// - Remark: Generated from `#/components/schemas/UpdateLinePropertiesRequest/lineProperties`.
            public var lineProperties: Components.Schemas.LineProperties?
            /// The object ID of the line the update is applied to.
            ///
            /// - Remark: Generated from `#/components/schemas/UpdateLinePropertiesRequest/objectId`.
            public var objectId: Swift.String?
            /// Creates a new `UpdateLinePropertiesRequest`.
            ///
            /// - Parameters:
            ///   - fields: The fields that should be updated. At least one field must be specified. The root `lineProperties` is implied and should not be specified. A single `"*"` can be used as short-hand for listing every field. For example to update the line solid fill color, set `fields` to `"lineFill.solidFill.color"`. To reset a property to its default value, include its field name in the field mask but leave the field itself unset.
            ///   - lineProperties:
            ///   - objectId: The object ID of the line the update is applied to.
            public init(
                fields: Swift.String? = nil,
                lineProperties: Components.Schemas.LineProperties? = nil,
                objectId: Swift.String? = nil
            ) {
                self.fields = fields
                self.lineProperties = lineProperties
                self.objectId = objectId
            }
            public enum CodingKeys: String, CodingKey {
                case fields
                case lineProperties
                case objectId
            }
        }
        /// Updates the alt text title and/or description of a page element.
        ///
        /// - Remark: Generated from `#/components/schemas/UpdatePageElementAltTextRequest`.
        public struct UpdatePageElementAltTextRequest: Codable, Hashable, Sendable {
            /// The updated alt text description of the page element. If unset the existing value will be maintained. The description is exposed to screen readers and other accessibility interfaces. Only use human readable values related to the content of the page element.
            ///
            /// - Remark: Generated from `#/components/schemas/UpdatePageElementAltTextRequest/description`.
            public var description: Swift.String?
            /// The object ID of the page element the updates are applied to.
            ///
            /// - Remark: Generated from `#/components/schemas/UpdatePageElementAltTextRequest/objectId`.
            public var objectId: Swift.String?
            /// The updated alt text title of the page element. If unset the existing value will be maintained. The title is exposed to screen readers and other accessibility interfaces. Only use human readable values related to the content of the page element.
            ///
            /// - Remark: Generated from `#/components/schemas/UpdatePageElementAltTextRequest/title`.
            public var title: Swift.String?
            /// Creates a new `UpdatePageElementAltTextRequest`.
            ///
            /// - Parameters:
            ///   - description: The updated alt text description of the page element. If unset the existing value will be maintained. The description is exposed to screen readers and other accessibility interfaces. Only use human readable values related to the content of the page element.
            ///   - objectId: The object ID of the page element the updates are applied to.
            ///   - title: The updated alt text title of the page element. If unset the existing value will be maintained. The title is exposed to screen readers and other accessibility interfaces. Only use human readable values related to the content of the page element.
            public init(
                description: Swift.String? = nil,
                objectId: Swift.String? = nil,
                title: Swift.String? = nil
            ) {
                self.description = description
                self.objectId = objectId
                self.title = title
            }
            public enum CodingKeys: String, CodingKey {
                case description
                case objectId
                case title
            }
        }
        /// Updates the transform of a page element. Updating the transform of a group will change the absolute transform of the page elements in that group, which can change their visual appearance. See the documentation for PageElement.transform for more details.
        ///
        /// - Remark: Generated from `#/components/schemas/UpdatePageElementTransformRequest`.
        public struct UpdatePageElementTransformRequest: Codable, Hashable, Sendable {
            /// The apply mode of the transform update.
            ///
            /// - Remark: Generated from `#/components/schemas/UpdatePageElementTransformRequest/applyMode`.
            @frozen public enum ApplyModePayload: String, Codable, Hashable, Sendable, CaseIterable {
                case applyModeUnspecified = "APPLY_MODE_UNSPECIFIED"
                case relative = "RELATIVE"
                case absolute = "ABSOLUTE"
            }
            /// The apply mode of the transform update.
            ///
            /// - Remark: Generated from `#/components/schemas/UpdatePageElementTransformRequest/applyMode`.
            public var applyMode: Components.Schemas.UpdatePageElementTransformRequest.ApplyModePayload?
            /// The object ID of the page element to update.
            ///
            /// - Remark: Generated from `#/components/schemas/UpdatePageElementTransformRequest/objectId`.
            public var objectId: Swift.String?
            /// - Remark: Generated from `#/components/schemas/UpdatePageElementTransformRequest/transform`.
            public var transform: Components.Schemas.AffineTransform?
            /// Creates a new `UpdatePageElementTransformRequest`.
            ///
            /// - Parameters:
            ///   - applyMode: The apply mode of the transform update.
            ///   - objectId: The object ID of the page element to update.
            ///   - transform:
            public init(
                applyMode: Components.Schemas.UpdatePageElementTransformRequest.ApplyModePayload? = nil,
                objectId: Swift.String? = nil,
                transform: Components.Schemas.AffineTransform? = nil
            ) {
                self.applyMode = applyMode
                self.objectId = objectId
                self.transform = transform
            }
            public enum CodingKeys: String, CodingKey {
                case applyMode
                case objectId
                case transform
            }
        }
        /// Updates the Z-order of page elements. Z-order is an ordering of the elements on the page from back to front. The page element in the front may cover the elements that are behind it.
        ///
        /// - Remark: Generated from `#/components/schemas/UpdatePageElementsZOrderRequest`.
        public struct UpdatePageElementsZOrderRequest: Codable, Hashable, Sendable {
            /// The Z-order operation to apply on the page elements. When applying the operation on multiple page elements, the relative Z-orders within these page elements before the operation is maintained.
            ///
            /// - Remark: Generated from `#/components/schemas/UpdatePageElementsZOrderRequest/operation`.
            @frozen public enum OperationPayload: String, Codable, Hashable, Sendable, CaseIterable {
                case zOrderOperationUnspecified = "Z_ORDER_OPERATION_UNSPECIFIED"
                case bringToFront = "BRING_TO_FRONT"
                case bringForward = "BRING_FORWARD"
                case sendBackward = "SEND_BACKWARD"
                case sendToBack = "SEND_TO_BACK"
            }
            /// The Z-order operation to apply on the page elements. When applying the operation on multiple page elements, the relative Z-orders within these page elements before the operation is maintained.
            ///
            /// - Remark: Generated from `#/components/schemas/UpdatePageElementsZOrderRequest/operation`.
            public var operation: Components.Schemas.UpdatePageElementsZOrderRequest.OperationPayload?
            /// The object IDs of the page elements to update. All the page elements must be on the same page and must not be grouped.
            ///
            /// - Remark: Generated from `#/components/schemas/UpdatePageElementsZOrderRequest/pageElementObjectIds`.
            public var pageElementObjectIds: [Swift.String]?
            /// Creates a new `UpdatePageElementsZOrderRequest`.
            ///
            /// - Parameters:
            ///   - operation: The Z-order operation to apply on the page elements. When applying the operation on multiple page elements, the relative Z-orders within these page elements before the operation is maintained.
            ///   - pageElementObjectIds: The object IDs of the page elements to update. All the page elements must be on the same page and must not be grouped.
            public init(
                operation: Components.Schemas.UpdatePageElementsZOrderRequest.OperationPayload? = nil,
                pageElementObjectIds: [Swift.String]? = nil
            ) {
                self.operation = operation
                self.pageElementObjectIds = pageElementObjectIds
            }
            public enum CodingKeys: String, CodingKey {
                case operation
                case pageElementObjectIds
            }
        }
        /// Updates the properties of a Page.
        ///
        /// - Remark: Generated from `#/components/schemas/UpdatePagePropertiesRequest`.
        public struct UpdatePagePropertiesRequest: Codable, Hashable, Sendable {
            /// The fields that should be updated. At least one field must be specified. The root `pageProperties` is implied and should not be specified. A single `"*"` can be used as short-hand for listing every field. For example to update the page background solid fill color, set `fields` to `"pageBackgroundFill.solidFill.color"`. To reset a property to its default value, include its field name in the field mask but leave the field itself unset.
            ///
            /// - Remark: Generated from `#/components/schemas/UpdatePagePropertiesRequest/fields`.
            public var fields: Swift.String?
            /// The object ID of the page the update is applied to.
            ///
            /// - Remark: Generated from `#/components/schemas/UpdatePagePropertiesRequest/objectId`.
            public var objectId: Swift.String?
            /// - Remark: Generated from `#/components/schemas/UpdatePagePropertiesRequest/pageProperties`.
            public var pageProperties: Components.Schemas.PageProperties?
            /// Creates a new `UpdatePagePropertiesRequest`.
            ///
            /// - Parameters:
            ///   - fields: The fields that should be updated. At least one field must be specified. The root `pageProperties` is implied and should not be specified. A single `"*"` can be used as short-hand for listing every field. For example to update the page background solid fill color, set `fields` to `"pageBackgroundFill.solidFill.color"`. To reset a property to its default value, include its field name in the field mask but leave the field itself unset.
            ///   - objectId: The object ID of the page the update is applied to.
            ///   - pageProperties:
            public init(
                fields: Swift.String? = nil,
                objectId: Swift.String? = nil,
                pageProperties: Components.Schemas.PageProperties? = nil
            ) {
                self.fields = fields
                self.objectId = objectId
                self.pageProperties = pageProperties
            }
            public enum CodingKeys: String, CodingKey {
                case fields
                case objectId
                case pageProperties
            }
        }
        /// Updates the styling for all of the paragraphs within a Shape or Table that overlap with the given text index range.
        ///
        /// - Remark: Generated from `#/components/schemas/UpdateParagraphStyleRequest`.
        public struct UpdateParagraphStyleRequest: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/UpdateParagraphStyleRequest/cellLocation`.
            public var cellLocation: Components.Schemas.TableCellLocation?
            /// The fields that should be updated. At least one field must be specified. The root `style` is implied and should not be specified. A single `"*"` can be used as short-hand for listing every field. For example, to update the paragraph alignment, set `fields` to `"alignment"`. To reset a property to its default value, include its field name in the field mask but leave the field itself unset.
            ///
            /// - Remark: Generated from `#/components/schemas/UpdateParagraphStyleRequest/fields`.
            public var fields: Swift.String?
            /// The object ID of the shape or table with the text to be styled.
            ///
            /// - Remark: Generated from `#/components/schemas/UpdateParagraphStyleRequest/objectId`.
            public var objectId: Swift.String?
            /// - Remark: Generated from `#/components/schemas/UpdateParagraphStyleRequest/style`.
            public var style: Components.Schemas.ParagraphStyle?
            /// - Remark: Generated from `#/components/schemas/UpdateParagraphStyleRequest/textRange`.
            public var textRange: Components.Schemas.Range?
            /// Creates a new `UpdateParagraphStyleRequest`.
            ///
            /// - Parameters:
            ///   - cellLocation:
            ///   - fields: The fields that should be updated. At least one field must be specified. The root `style` is implied and should not be specified. A single `"*"` can be used as short-hand for listing every field. For example, to update the paragraph alignment, set `fields` to `"alignment"`. To reset a property to its default value, include its field name in the field mask but leave the field itself unset.
            ///   - objectId: The object ID of the shape or table with the text to be styled.
            ///   - style:
            ///   - textRange:
            public init(
                cellLocation: Components.Schemas.TableCellLocation? = nil,
                fields: Swift.String? = nil,
                objectId: Swift.String? = nil,
                style: Components.Schemas.ParagraphStyle? = nil,
                textRange: Components.Schemas.Range? = nil
            ) {
                self.cellLocation = cellLocation
                self.fields = fields
                self.objectId = objectId
                self.style = style
                self.textRange = textRange
            }
            public enum CodingKeys: String, CodingKey {
                case cellLocation
                case fields
                case objectId
                case style
                case textRange
            }
        }
        /// Update the properties of a Shape.
        ///
        /// - Remark: Generated from `#/components/schemas/UpdateShapePropertiesRequest`.
        public struct UpdateShapePropertiesRequest: Codable, Hashable, Sendable {
            /// The fields that should be updated. At least one field must be specified. The root `shapeProperties` is implied and should not be specified. A single `"*"` can be used as short-hand for listing every field. For example to update the shape background solid fill color, set `fields` to `"shapeBackgroundFill.solidFill.color"`. To reset a property to its default value, include its field name in the field mask but leave the field itself unset.
            ///
            /// - Remark: Generated from `#/components/schemas/UpdateShapePropertiesRequest/fields`.
            public var fields: Swift.String?
            /// The object ID of the shape the updates are applied to.
            ///
            /// - Remark: Generated from `#/components/schemas/UpdateShapePropertiesRequest/objectId`.
            public var objectId: Swift.String?
            /// - Remark: Generated from `#/components/schemas/UpdateShapePropertiesRequest/shapeProperties`.
            public var shapeProperties: Components.Schemas.ShapeProperties?
            /// Creates a new `UpdateShapePropertiesRequest`.
            ///
            /// - Parameters:
            ///   - fields: The fields that should be updated. At least one field must be specified. The root `shapeProperties` is implied and should not be specified. A single `"*"` can be used as short-hand for listing every field. For example to update the shape background solid fill color, set `fields` to `"shapeBackgroundFill.solidFill.color"`. To reset a property to its default value, include its field name in the field mask but leave the field itself unset.
            ///   - objectId: The object ID of the shape the updates are applied to.
            ///   - shapeProperties:
            public init(
                fields: Swift.String? = nil,
                objectId: Swift.String? = nil,
                shapeProperties: Components.Schemas.ShapeProperties? = nil
            ) {
                self.fields = fields
                self.objectId = objectId
                self.shapeProperties = shapeProperties
            }
            public enum CodingKeys: String, CodingKey {
                case fields
                case objectId
                case shapeProperties
            }
        }
        /// Updates the properties of a Slide.
        ///
        /// - Remark: Generated from `#/components/schemas/UpdateSlidePropertiesRequest`.
        public struct UpdateSlidePropertiesRequest: Codable, Hashable, Sendable {
            /// The fields that should be updated. At least one field must be specified. The root 'slideProperties' is implied and should not be specified. A single `"*"` can be used as short-hand for listing every field. For example to update whether a slide is skipped, set `fields` to `"isSkipped"`. To reset a property to its default value, include its field name in the field mask but leave the field itself unset.
            ///
            /// - Remark: Generated from `#/components/schemas/UpdateSlidePropertiesRequest/fields`.
            public var fields: Swift.String?
            /// The object ID of the slide the update is applied to.
            ///
            /// - Remark: Generated from `#/components/schemas/UpdateSlidePropertiesRequest/objectId`.
            public var objectId: Swift.String?
            /// - Remark: Generated from `#/components/schemas/UpdateSlidePropertiesRequest/slideProperties`.
            public var slideProperties: Components.Schemas.SlideProperties?
            /// Creates a new `UpdateSlidePropertiesRequest`.
            ///
            /// - Parameters:
            ///   - fields: The fields that should be updated. At least one field must be specified. The root 'slideProperties' is implied and should not be specified. A single `"*"` can be used as short-hand for listing every field. For example to update whether a slide is skipped, set `fields` to `"isSkipped"`. To reset a property to its default value, include its field name in the field mask but leave the field itself unset.
            ///   - objectId: The object ID of the slide the update is applied to.
            ///   - slideProperties:
            public init(
                fields: Swift.String? = nil,
                objectId: Swift.String? = nil,
                slideProperties: Components.Schemas.SlideProperties? = nil
            ) {
                self.fields = fields
                self.objectId = objectId
                self.slideProperties = slideProperties
            }
            public enum CodingKeys: String, CodingKey {
                case fields
                case objectId
                case slideProperties
            }
        }
        /// Updates the position of slides in the presentation.
        ///
        /// - Remark: Generated from `#/components/schemas/UpdateSlidesPositionRequest`.
        public struct UpdateSlidesPositionRequest: Codable, Hashable, Sendable {
            /// The index where the slides should be inserted, based on the slide arrangement before the move takes place. Must be between zero and the number of slides in the presentation, inclusive.
            ///
            /// - Remark: Generated from `#/components/schemas/UpdateSlidesPositionRequest/insertionIndex`.
            public var insertionIndex: Swift.Int32?
            /// The IDs of the slides in the presentation that should be moved. The slides in this list must be in existing presentation order, without duplicates.
            ///
            /// - Remark: Generated from `#/components/schemas/UpdateSlidesPositionRequest/slideObjectIds`.
            public var slideObjectIds: [Swift.String]?
            /// Creates a new `UpdateSlidesPositionRequest`.
            ///
            /// - Parameters:
            ///   - insertionIndex: The index where the slides should be inserted, based on the slide arrangement before the move takes place. Must be between zero and the number of slides in the presentation, inclusive.
            ///   - slideObjectIds: The IDs of the slides in the presentation that should be moved. The slides in this list must be in existing presentation order, without duplicates.
            public init(
                insertionIndex: Swift.Int32? = nil,
                slideObjectIds: [Swift.String]? = nil
            ) {
                self.insertionIndex = insertionIndex
                self.slideObjectIds = slideObjectIds
            }
            public enum CodingKeys: String, CodingKey {
                case insertionIndex
                case slideObjectIds
            }
        }
        /// Updates the properties of the table borders in a Table.
        ///
        /// - Remark: Generated from `#/components/schemas/UpdateTableBorderPropertiesRequest`.
        public struct UpdateTableBorderPropertiesRequest: Codable, Hashable, Sendable {
            /// The border position in the table range the updates should apply to. If a border position is not specified, the updates will apply to all borders in the table range.
            ///
            /// - Remark: Generated from `#/components/schemas/UpdateTableBorderPropertiesRequest/borderPosition`.
            @frozen public enum BorderPositionPayload: String, Codable, Hashable, Sendable, CaseIterable {
                case all = "ALL"
                case bottom = "BOTTOM"
                case inner = "INNER"
                case innerHorizontal = "INNER_HORIZONTAL"
                case innerVertical = "INNER_VERTICAL"
                case left = "LEFT"
                case outer = "OUTER"
                case right = "RIGHT"
                case top = "TOP"
            }
            /// The border position in the table range the updates should apply to. If a border position is not specified, the updates will apply to all borders in the table range.
            ///
            /// - Remark: Generated from `#/components/schemas/UpdateTableBorderPropertiesRequest/borderPosition`.
            public var borderPosition: Components.Schemas.UpdateTableBorderPropertiesRequest.BorderPositionPayload?
            /// The fields that should be updated. At least one field must be specified. The root `tableBorderProperties` is implied and should not be specified. A single `"*"` can be used as short-hand for listing every field. For example to update the table border solid fill color, set `fields` to `"tableBorderFill.solidFill.color"`. To reset a property to its default value, include its field name in the field mask but leave the field itself unset.
            ///
            /// - Remark: Generated from `#/components/schemas/UpdateTableBorderPropertiesRequest/fields`.
            public var fields: Swift.String?
            /// The object ID of the table.
            ///
            /// - Remark: Generated from `#/components/schemas/UpdateTableBorderPropertiesRequest/objectId`.
            public var objectId: Swift.String?
            /// - Remark: Generated from `#/components/schemas/UpdateTableBorderPropertiesRequest/tableBorderProperties`.
            public var tableBorderProperties: Components.Schemas.TableBorderProperties?
            /// - Remark: Generated from `#/components/schemas/UpdateTableBorderPropertiesRequest/tableRange`.
            public var tableRange: Components.Schemas.TableRange?
            /// Creates a new `UpdateTableBorderPropertiesRequest`.
            ///
            /// - Parameters:
            ///   - borderPosition: The border position in the table range the updates should apply to. If a border position is not specified, the updates will apply to all borders in the table range.
            ///   - fields: The fields that should be updated. At least one field must be specified. The root `tableBorderProperties` is implied and should not be specified. A single `"*"` can be used as short-hand for listing every field. For example to update the table border solid fill color, set `fields` to `"tableBorderFill.solidFill.color"`. To reset a property to its default value, include its field name in the field mask but leave the field itself unset.
            ///   - objectId: The object ID of the table.
            ///   - tableBorderProperties:
            ///   - tableRange:
            public init(
                borderPosition: Components.Schemas.UpdateTableBorderPropertiesRequest.BorderPositionPayload? = nil,
                fields: Swift.String? = nil,
                objectId: Swift.String? = nil,
                tableBorderProperties: Components.Schemas.TableBorderProperties? = nil,
                tableRange: Components.Schemas.TableRange? = nil
            ) {
                self.borderPosition = borderPosition
                self.fields = fields
                self.objectId = objectId
                self.tableBorderProperties = tableBorderProperties
                self.tableRange = tableRange
            }
            public enum CodingKeys: String, CodingKey {
                case borderPosition
                case fields
                case objectId
                case tableBorderProperties
                case tableRange
            }
        }
        /// Update the properties of a TableCell.
        ///
        /// - Remark: Generated from `#/components/schemas/UpdateTableCellPropertiesRequest`.
        public struct UpdateTableCellPropertiesRequest: Codable, Hashable, Sendable {
            /// The fields that should be updated. At least one field must be specified. The root `tableCellProperties` is implied and should not be specified. A single `"*"` can be used as short-hand for listing every field. For example to update the table cell background solid fill color, set `fields` to `"tableCellBackgroundFill.solidFill.color"`. To reset a property to its default value, include its field name in the field mask but leave the field itself unset.
            ///
            /// - Remark: Generated from `#/components/schemas/UpdateTableCellPropertiesRequest/fields`.
            public var fields: Swift.String?
            /// The object ID of the table.
            ///
            /// - Remark: Generated from `#/components/schemas/UpdateTableCellPropertiesRequest/objectId`.
            public var objectId: Swift.String?
            /// - Remark: Generated from `#/components/schemas/UpdateTableCellPropertiesRequest/tableCellProperties`.
            public var tableCellProperties: Components.Schemas.TableCellProperties?
            /// - Remark: Generated from `#/components/schemas/UpdateTableCellPropertiesRequest/tableRange`.
            public var tableRange: Components.Schemas.TableRange?
            /// Creates a new `UpdateTableCellPropertiesRequest`.
            ///
            /// - Parameters:
            ///   - fields: The fields that should be updated. At least one field must be specified. The root `tableCellProperties` is implied and should not be specified. A single `"*"` can be used as short-hand for listing every field. For example to update the table cell background solid fill color, set `fields` to `"tableCellBackgroundFill.solidFill.color"`. To reset a property to its default value, include its field name in the field mask but leave the field itself unset.
            ///   - objectId: The object ID of the table.
            ///   - tableCellProperties:
            ///   - tableRange:
            public init(
                fields: Swift.String? = nil,
                objectId: Swift.String? = nil,
                tableCellProperties: Components.Schemas.TableCellProperties? = nil,
                tableRange: Components.Schemas.TableRange? = nil
            ) {
                self.fields = fields
                self.objectId = objectId
                self.tableCellProperties = tableCellProperties
                self.tableRange = tableRange
            }
            public enum CodingKeys: String, CodingKey {
                case fields
                case objectId
                case tableCellProperties
                case tableRange
            }
        }
        /// Updates the properties of a Table column.
        ///
        /// - Remark: Generated from `#/components/schemas/UpdateTableColumnPropertiesRequest`.
        public struct UpdateTableColumnPropertiesRequest: Codable, Hashable, Sendable {
            /// The list of zero-based indices specifying which columns to update. If no indices are provided, all columns in the table will be updated.
            ///
            /// - Remark: Generated from `#/components/schemas/UpdateTableColumnPropertiesRequest/columnIndices`.
            public var columnIndices: [Swift.Int32]?
            /// The fields that should be updated. At least one field must be specified. The root `tableColumnProperties` is implied and should not be specified. A single `"*"` can be used as short-hand for listing every field. For example to update the column width, set `fields` to `"column_width"`. If '"column_width"' is included in the field mask but the property is left unset, the column width will default to 406,400 EMU (32 points).
            ///
            /// - Remark: Generated from `#/components/schemas/UpdateTableColumnPropertiesRequest/fields`.
            public var fields: Swift.String?
            /// The object ID of the table.
            ///
            /// - Remark: Generated from `#/components/schemas/UpdateTableColumnPropertiesRequest/objectId`.
            public var objectId: Swift.String?
            /// - Remark: Generated from `#/components/schemas/UpdateTableColumnPropertiesRequest/tableColumnProperties`.
            public var tableColumnProperties: Components.Schemas.TableColumnProperties?
            /// Creates a new `UpdateTableColumnPropertiesRequest`.
            ///
            /// - Parameters:
            ///   - columnIndices: The list of zero-based indices specifying which columns to update. If no indices are provided, all columns in the table will be updated.
            ///   - fields: The fields that should be updated. At least one field must be specified. The root `tableColumnProperties` is implied and should not be specified. A single `"*"` can be used as short-hand for listing every field. For example to update the column width, set `fields` to `"column_width"`. If '"column_width"' is included in the field mask but the property is left unset, the column width will default to 406,400 EMU (32 points).
            ///   - objectId: The object ID of the table.
            ///   - tableColumnProperties:
            public init(
                columnIndices: [Swift.Int32]? = nil,
                fields: Swift.String? = nil,
                objectId: Swift.String? = nil,
                tableColumnProperties: Components.Schemas.TableColumnProperties? = nil
            ) {
                self.columnIndices = columnIndices
                self.fields = fields
                self.objectId = objectId
                self.tableColumnProperties = tableColumnProperties
            }
            public enum CodingKeys: String, CodingKey {
                case columnIndices
                case fields
                case objectId
                case tableColumnProperties
            }
        }
        /// Updates the properties of a Table row.
        ///
        /// - Remark: Generated from `#/components/schemas/UpdateTableRowPropertiesRequest`.
        public struct UpdateTableRowPropertiesRequest: Codable, Hashable, Sendable {
            /// The fields that should be updated. At least one field must be specified. The root `tableRowProperties` is implied and should not be specified. A single `"*"` can be used as short-hand for listing every field. For example to update the minimum row height, set `fields` to `"min_row_height"`. If '"min_row_height"' is included in the field mask but the property is left unset, the minimum row height will default to 0.
            ///
            /// - Remark: Generated from `#/components/schemas/UpdateTableRowPropertiesRequest/fields`.
            public var fields: Swift.String?
            /// The object ID of the table.
            ///
            /// - Remark: Generated from `#/components/schemas/UpdateTableRowPropertiesRequest/objectId`.
            public var objectId: Swift.String?
            /// The list of zero-based indices specifying which rows to update. If no indices are provided, all rows in the table will be updated.
            ///
            /// - Remark: Generated from `#/components/schemas/UpdateTableRowPropertiesRequest/rowIndices`.
            public var rowIndices: [Swift.Int32]?
            /// - Remark: Generated from `#/components/schemas/UpdateTableRowPropertiesRequest/tableRowProperties`.
            public var tableRowProperties: Components.Schemas.TableRowProperties?
            /// Creates a new `UpdateTableRowPropertiesRequest`.
            ///
            /// - Parameters:
            ///   - fields: The fields that should be updated. At least one field must be specified. The root `tableRowProperties` is implied and should not be specified. A single `"*"` can be used as short-hand for listing every field. For example to update the minimum row height, set `fields` to `"min_row_height"`. If '"min_row_height"' is included in the field mask but the property is left unset, the minimum row height will default to 0.
            ///   - objectId: The object ID of the table.
            ///   - rowIndices: The list of zero-based indices specifying which rows to update. If no indices are provided, all rows in the table will be updated.
            ///   - tableRowProperties:
            public init(
                fields: Swift.String? = nil,
                objectId: Swift.String? = nil,
                rowIndices: [Swift.Int32]? = nil,
                tableRowProperties: Components.Schemas.TableRowProperties? = nil
            ) {
                self.fields = fields
                self.objectId = objectId
                self.rowIndices = rowIndices
                self.tableRowProperties = tableRowProperties
            }
            public enum CodingKeys: String, CodingKey {
                case fields
                case objectId
                case rowIndices
                case tableRowProperties
            }
        }
        /// Update the styling of text in a Shape or Table.
        ///
        /// - Remark: Generated from `#/components/schemas/UpdateTextStyleRequest`.
        public struct UpdateTextStyleRequest: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/UpdateTextStyleRequest/cellLocation`.
            public var cellLocation: Components.Schemas.TableCellLocation?
            /// The fields that should be updated. At least one field must be specified. The root `style` is implied and should not be specified. A single `"*"` can be used as short-hand for listing every field. For example, to update the text style to bold, set `fields` to `"bold"`. To reset a property to its default value, include its field name in the field mask but leave the field itself unset.
            ///
            /// - Remark: Generated from `#/components/schemas/UpdateTextStyleRequest/fields`.
            public var fields: Swift.String?
            /// The object ID of the shape or table with the text to be styled.
            ///
            /// - Remark: Generated from `#/components/schemas/UpdateTextStyleRequest/objectId`.
            public var objectId: Swift.String?
            /// - Remark: Generated from `#/components/schemas/UpdateTextStyleRequest/style`.
            public var style: Components.Schemas.TextStyle?
            /// - Remark: Generated from `#/components/schemas/UpdateTextStyleRequest/textRange`.
            public var textRange: Components.Schemas.Range?
            /// Creates a new `UpdateTextStyleRequest`.
            ///
            /// - Parameters:
            ///   - cellLocation:
            ///   - fields: The fields that should be updated. At least one field must be specified. The root `style` is implied and should not be specified. A single `"*"` can be used as short-hand for listing every field. For example, to update the text style to bold, set `fields` to `"bold"`. To reset a property to its default value, include its field name in the field mask but leave the field itself unset.
            ///   - objectId: The object ID of the shape or table with the text to be styled.
            ///   - style:
            ///   - textRange:
            public init(
                cellLocation: Components.Schemas.TableCellLocation? = nil,
                fields: Swift.String? = nil,
                objectId: Swift.String? = nil,
                style: Components.Schemas.TextStyle? = nil,
                textRange: Components.Schemas.Range? = nil
            ) {
                self.cellLocation = cellLocation
                self.fields = fields
                self.objectId = objectId
                self.style = style
                self.textRange = textRange
            }
            public enum CodingKeys: String, CodingKey {
                case cellLocation
                case fields
                case objectId
                case style
                case textRange
            }
        }
        /// Update the properties of a Video.
        ///
        /// - Remark: Generated from `#/components/schemas/UpdateVideoPropertiesRequest`.
        public struct UpdateVideoPropertiesRequest: Codable, Hashable, Sendable {
            /// The fields that should be updated. At least one field must be specified. The root `videoProperties` is implied and should not be specified. A single `"*"` can be used as short-hand for listing every field. For example to update the video outline color, set `fields` to `"outline.outlineFill.solidFill.color"`. To reset a property to its default value, include its field name in the field mask but leave the field itself unset.
            ///
            /// - Remark: Generated from `#/components/schemas/UpdateVideoPropertiesRequest/fields`.
            public var fields: Swift.String?
            /// The object ID of the video the updates are applied to.
            ///
            /// - Remark: Generated from `#/components/schemas/UpdateVideoPropertiesRequest/objectId`.
            public var objectId: Swift.String?
            /// - Remark: Generated from `#/components/schemas/UpdateVideoPropertiesRequest/videoProperties`.
            public var videoProperties: Components.Schemas.VideoProperties?
            /// Creates a new `UpdateVideoPropertiesRequest`.
            ///
            /// - Parameters:
            ///   - fields: The fields that should be updated. At least one field must be specified. The root `videoProperties` is implied and should not be specified. A single `"*"` can be used as short-hand for listing every field. For example to update the video outline color, set `fields` to `"outline.outlineFill.solidFill.color"`. To reset a property to its default value, include its field name in the field mask but leave the field itself unset.
            ///   - objectId: The object ID of the video the updates are applied to.
            ///   - videoProperties:
            public init(
                fields: Swift.String? = nil,
                objectId: Swift.String? = nil,
                videoProperties: Components.Schemas.VideoProperties? = nil
            ) {
                self.fields = fields
                self.objectId = objectId
                self.videoProperties = videoProperties
            }
            public enum CodingKeys: String, CodingKey {
                case fields
                case objectId
                case videoProperties
            }
        }
        /// A PageElement kind representing a video.
        ///
        /// - Remark: Generated from `#/components/schemas/Video`.
        public struct Video: Codable, Hashable, Sendable {
            /// The video source's unique identifier for this video.
            ///
            /// - Remark: Generated from `#/components/schemas/Video/id`.
            public var id: Swift.String?
            /// The video source.
            ///
            /// - Remark: Generated from `#/components/schemas/Video/source`.
            @frozen public enum SourcePayload: String, Codable, Hashable, Sendable, CaseIterable {
                case sourceUnspecified = "SOURCE_UNSPECIFIED"
                case youtube = "YOUTUBE"
                case drive = "DRIVE"
            }
            /// The video source.
            ///
            /// - Remark: Generated from `#/components/schemas/Video/source`.
            public var source: Components.Schemas.Video.SourcePayload?
            /// An URL to a video. The URL is valid as long as the source video exists and sharing settings do not change.
            ///
            /// - Remark: Generated from `#/components/schemas/Video/url`.
            public var url: Swift.String?
            /// - Remark: Generated from `#/components/schemas/Video/videoProperties`.
            public var videoProperties: Components.Schemas.VideoProperties?
            /// Creates a new `Video`.
            ///
            /// - Parameters:
            ///   - id: The video source's unique identifier for this video.
            ///   - source: The video source.
            ///   - url: An URL to a video. The URL is valid as long as the source video exists and sharing settings do not change.
            ///   - videoProperties:
            public init(
                id: Swift.String? = nil,
                source: Components.Schemas.Video.SourcePayload? = nil,
                url: Swift.String? = nil,
                videoProperties: Components.Schemas.VideoProperties? = nil
            ) {
                self.id = id
                self.source = source
                self.url = url
                self.videoProperties = videoProperties
            }
            public enum CodingKeys: String, CodingKey {
                case id
                case source
                case url
                case videoProperties
            }
        }
        /// The properties of the Video.
        ///
        /// - Remark: Generated from `#/components/schemas/VideoProperties`.
        public struct VideoProperties: Codable, Hashable, Sendable {
            /// Whether to enable video autoplay when the page is displayed in present mode. Defaults to false.
            ///
            /// - Remark: Generated from `#/components/schemas/VideoProperties/autoPlay`.
            public var autoPlay: Swift.Bool?
            /// The time at which to end playback, measured in seconds from the beginning of the video. If set, the end time should be after the start time. If not set or if you set this to a value that exceeds the video's length, the video will be played until its end.
            ///
            /// - Remark: Generated from `#/components/schemas/VideoProperties/end`.
            public var end: Swift.Int?
            /// Whether to mute the audio during video playback. Defaults to false.
            ///
            /// - Remark: Generated from `#/components/schemas/VideoProperties/mute`.
            public var mute: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/VideoProperties/outline`.
            public var outline: Components.Schemas.Outline?
            /// The time at which to start playback, measured in seconds from the beginning of the video. If set, the start time should be before the end time. If you set this to a value that exceeds the video's length in seconds, the video will be played from the last second. If not set, the video will be played from the beginning.
            ///
            /// - Remark: Generated from `#/components/schemas/VideoProperties/start`.
            public var start: Swift.Int?
            /// Creates a new `VideoProperties`.
            ///
            /// - Parameters:
            ///   - autoPlay: Whether to enable video autoplay when the page is displayed in present mode. Defaults to false.
            ///   - end: The time at which to end playback, measured in seconds from the beginning of the video. If set, the end time should be after the start time. If not set or if you set this to a value that exceeds the video's length, the video will be played until its end.
            ///   - mute: Whether to mute the audio during video playback. Defaults to false.
            ///   - outline:
            ///   - start: The time at which to start playback, measured in seconds from the beginning of the video. If set, the start time should be before the end time. If you set this to a value that exceeds the video's length in seconds, the video will be played from the last second. If not set, the video will be played from the beginning.
            public init(
                autoPlay: Swift.Bool? = nil,
                end: Swift.Int? = nil,
                mute: Swift.Bool? = nil,
                outline: Components.Schemas.Outline? = nil,
                start: Swift.Int? = nil
            ) {
                self.autoPlay = autoPlay
                self.end = end
                self.mute = mute
                self.outline = outline
                self.start = start
            }
            public enum CodingKeys: String, CodingKey {
                case autoPlay
                case end
                case mute
                case outline
                case start
            }
        }
        /// Represents a font family and weight used to style a TextRun.
        ///
        /// - Remark: Generated from `#/components/schemas/WeightedFontFamily`.
        public struct WeightedFontFamily: Codable, Hashable, Sendable {
            /// The font family of the text. The font family can be any font from the Font menu in Slides or from [Google Fonts] (https://fonts.google.com/). If the font name is unrecognized, the text is rendered in `Arial`.
            ///
            /// - Remark: Generated from `#/components/schemas/WeightedFontFamily/fontFamily`.
            public var fontFamily: Swift.String?
            /// The rendered weight of the text. This field can have any value that is a multiple of `100` between `100` and `900`, inclusive. This range corresponds to the numerical values described in the CSS 2.1 Specification, [section 15.6](https://www.w3.org/TR/CSS21/fonts.html#font-boldness), with non-numerical values disallowed. Weights greater than or equal to `700` are considered bold, and weights less than `700`are not bold. The default value is `400` ("normal").
            ///
            /// - Remark: Generated from `#/components/schemas/WeightedFontFamily/weight`.
            public var weight: Swift.Int32?
            /// Creates a new `WeightedFontFamily`.
            ///
            /// - Parameters:
            ///   - fontFamily: The font family of the text. The font family can be any font from the Font menu in Slides or from [Google Fonts] (https://fonts.google.com/). If the font name is unrecognized, the text is rendered in `Arial`.
            ///   - weight: The rendered weight of the text. This field can have any value that is a multiple of `100` between `100` and `900`, inclusive. This range corresponds to the numerical values described in the CSS 2.1 Specification, [section 15.6](https://www.w3.org/TR/CSS21/fonts.html#font-boldness), with non-numerical values disallowed. Weights greater than or equal to `700` are considered bold, and weights less than `700`are not bold. The default value is `400` ("normal").
            public init(
                fontFamily: Swift.String? = nil,
                weight: Swift.Int32? = nil
            ) {
                self.fontFamily = fontFamily
                self.weight = weight
            }
            public enum CodingKeys: String, CodingKey {
                case fontFamily
                case weight
            }
        }
        /// A PageElement kind representing word art.
        ///
        /// - Remark: Generated from `#/components/schemas/WordArt`.
        public struct WordArt: Codable, Hashable, Sendable {
            /// The text rendered as word art.
            ///
            /// - Remark: Generated from `#/components/schemas/WordArt/renderedText`.
            public var renderedText: Swift.String?
            /// Creates a new `WordArt`.
            ///
            /// - Parameters:
            ///   - renderedText: The text rendered as word art.
            public init(renderedText: Swift.String? = nil) {
                self.renderedText = renderedText
            }
            public enum CodingKeys: String, CodingKey {
                case renderedText
            }
        }
        /// Provides control over how write requests are executed.
        ///
        /// - Remark: Generated from `#/components/schemas/WriteControl`.
        public struct WriteControl: Codable, Hashable, Sendable {
            /// The revision ID of the presentation required for the write request. If specified and the required revision ID doesn't match the presentation's current revision ID, the request is not processed and returns a 400 bad request error. When a required revision ID is returned in a response, it indicates the revision ID of the document after the request was applied.
            ///
            /// - Remark: Generated from `#/components/schemas/WriteControl/requiredRevisionId`.
            public var requiredRevisionId: Swift.String?
            /// Creates a new `WriteControl`.
            ///
            /// - Parameters:
            ///   - requiredRevisionId: The revision ID of the presentation required for the write request. If specified and the required revision ID doesn't match the presentation's current revision ID, the request is not processed and returns a 400 bad request error. When a required revision ID is returned in a response, it indicates the revision ID of the document after the request was applied.
            public init(requiredRevisionId: Swift.String? = nil) {
                self.requiredRevisionId = requiredRevisionId
            }
            public enum CodingKeys: String, CodingKey {
                case requiredRevisionId
            }
        }
    }
    /// Types generated from the `#/components/parameters` section of the OpenAPI document.
    public enum Parameters {
        /// V1 error format.
        ///
        /// - Remark: Generated from `#/components/parameters/_.xgafv`.
        @frozen public enum __period_xgafv: String, Codable, Hashable, Sendable, CaseIterable {
            case _1 = "1"
            case _2 = "2"
        }
        /// OAuth access token.
        ///
        /// - Remark: Generated from `#/components/parameters/access_token`.
        public typealias AccessToken = Swift.String
        /// Data format for response.
        ///
        /// - Remark: Generated from `#/components/parameters/alt`.
        @frozen public enum Alt: String, Codable, Hashable, Sendable, CaseIterable {
            case json = "json"
            case media = "media"
            case proto = "proto"
        }
        /// JSONP
        ///
        /// - Remark: Generated from `#/components/parameters/callback`.
        public typealias Callback = Swift.String
        /// Selector specifying which fields to include in a partial response.
        ///
        /// - Remark: Generated from `#/components/parameters/fields`.
        public typealias Fields = Swift.String
        /// API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
        ///
        /// - Remark: Generated from `#/components/parameters/key`.
        public typealias Key = Swift.String
        /// OAuth 2.0 token for the current user.
        ///
        /// - Remark: Generated from `#/components/parameters/oauth_token`.
        public typealias OauthToken = Swift.String
        /// Returns response with indentations and line breaks.
        ///
        /// - Remark: Generated from `#/components/parameters/prettyPrint`.
        public typealias PrettyPrint = Swift.Bool
        /// Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
        ///
        /// - Remark: Generated from `#/components/parameters/quotaUser`.
        public typealias QuotaUser = Swift.String
        /// Legacy upload protocol for media (e.g. "media", "multipart").
        ///
        /// - Remark: Generated from `#/components/parameters/uploadType`.
        public typealias UploadType = Swift.String
        /// Upload protocol for media (e.g. "raw", "multipart").
        ///
        /// - Remark: Generated from `#/components/parameters/upload_protocol`.
        public typealias UploadProtocol = Swift.String
    }
    /// Types generated from the `#/components/requestBodies` section of the OpenAPI document.
    public enum RequestBodies {}
    /// Types generated from the `#/components/responses` section of the OpenAPI document.
    public enum Responses {}
    /// Types generated from the `#/components/headers` section of the OpenAPI document.
    public enum Headers {}
}

/// API operations, with input and output types, generated from `#/paths` in the OpenAPI document.
public enum Operations {
    /// Creates a blank presentation using the title given in the request. If a `presentationId` is provided, it is used as the ID of the new presentation. Otherwise, a new ID is generated. Other fields in the request, including any provided content, are ignored. Returns the created presentation.
    ///
    /// - Remark: HTTP `POST /v1/presentations`.
    /// - Remark: Generated from `#/paths//v1/presentations/post(slides.presentations.create)`.
    public enum Slides_presentations_create {
        public static let id: Swift.String = "slides.presentations.create"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/v1/presentations/POST/query`.
            public struct Query: Sendable, Hashable {
                /// - Remark: Generated from `#/components/parameters/_.xgafv`.
                @frozen public enum __period_xgafv: String, Codable, Hashable, Sendable, CaseIterable {
                    case _1 = "1"
                    case _2 = "2"
                }
                /// V1 error format.
                ///
                /// - Remark: Generated from `#/paths/v1/presentations/POST/query/$.xgafv`.
                public var _dollar__xgafv: Components.Parameters.__period_xgafv?
                /// OAuth access token.
                ///
                /// - Remark: Generated from `#/paths/v1/presentations/POST/query/access_token`.
                public var accessToken: Components.Parameters.AccessToken?
                /// - Remark: Generated from `#/components/parameters/alt`.
                @frozen public enum Alt: String, Codable, Hashable, Sendable, CaseIterable {
                    case json = "json"
                    case media = "media"
                    case proto = "proto"
                }
                /// Data format for response.
                ///
                /// - Remark: Generated from `#/paths/v1/presentations/POST/query/alt`.
                public var alt: Components.Parameters.Alt?
                /// JSONP
                ///
                /// - Remark: Generated from `#/paths/v1/presentations/POST/query/callback`.
                public var callback: Components.Parameters.Callback?
                /// Selector specifying which fields to include in a partial response.
                ///
                /// - Remark: Generated from `#/paths/v1/presentations/POST/query/fields`.
                public var fields: Components.Parameters.Fields?
                /// API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
                ///
                /// - Remark: Generated from `#/paths/v1/presentations/POST/query/key`.
                public var key: Components.Parameters.Key?
                /// OAuth 2.0 token for the current user.
                ///
                /// - Remark: Generated from `#/paths/v1/presentations/POST/query/oauth_token`.
                public var oauthToken: Components.Parameters.OauthToken?
                /// Returns response with indentations and line breaks.
                ///
                /// - Remark: Generated from `#/paths/v1/presentations/POST/query/prettyPrint`.
                public var prettyPrint: Components.Parameters.PrettyPrint?
                /// Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
                ///
                /// - Remark: Generated from `#/paths/v1/presentations/POST/query/quotaUser`.
                public var quotaUser: Components.Parameters.QuotaUser?
                /// Upload protocol for media (e.g. "raw", "multipart").
                ///
                /// - Remark: Generated from `#/paths/v1/presentations/POST/query/upload_protocol`.
                public var uploadProtocol: Components.Parameters.UploadProtocol?
                /// Legacy upload protocol for media (e.g. "media", "multipart").
                ///
                /// - Remark: Generated from `#/paths/v1/presentations/POST/query/uploadType`.
                public var uploadType: Components.Parameters.UploadType?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - _dollar__xgafv: V1 error format.
                ///   - accessToken: OAuth access token.
                ///   - alt: Data format for response.
                ///   - callback: JSONP
                ///   - fields: Selector specifying which fields to include in a partial response.
                ///   - key: API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
                ///   - oauthToken: OAuth 2.0 token for the current user.
                ///   - prettyPrint: Returns response with indentations and line breaks.
                ///   - quotaUser: Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
                ///   - uploadProtocol: Upload protocol for media (e.g. "raw", "multipart").
                ///   - uploadType: Legacy upload protocol for media (e.g. "media", "multipart").
                public init(
                    _dollar__xgafv: Components.Parameters.__period_xgafv? = nil,
                    accessToken: Components.Parameters.AccessToken? = nil,
                    alt: Components.Parameters.Alt? = nil,
                    callback: Components.Parameters.Callback? = nil,
                    fields: Components.Parameters.Fields? = nil,
                    key: Components.Parameters.Key? = nil,
                    oauthToken: Components.Parameters.OauthToken? = nil,
                    prettyPrint: Components.Parameters.PrettyPrint? = nil,
                    quotaUser: Components.Parameters.QuotaUser? = nil,
                    uploadProtocol: Components.Parameters.UploadProtocol? = nil,
                    uploadType: Components.Parameters.UploadType? = nil
                ) {
                    self._dollar__xgafv = _dollar__xgafv
                    self.accessToken = accessToken
                    self.alt = alt
                    self.callback = callback
                    self.fields = fields
                    self.key = key
                    self.oauthToken = oauthToken
                    self.prettyPrint = prettyPrint
                    self.quotaUser = quotaUser
                    self.uploadProtocol = uploadProtocol
                    self.uploadType = uploadType
                }
            }
            public var query: Operations.Slides_presentations_create.Input.Query
            /// - Remark: Generated from `#/paths/v1/presentations/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.Slides_presentations_create.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.Slides_presentations_create.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.Slides_presentations_create.Input.Headers
            /// - Remark: Generated from `#/paths/v1/presentations/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/v1/presentations/POST/requestBody/content/application\/json`.
                case json(Components.Schemas.Presentation)
            }
            public var body: Operations.Slides_presentations_create.Input.Body?
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - query:
            ///   - headers:
            ///   - body:
            public init(
                query: Operations.Slides_presentations_create.Input.Query = .init(),
                headers: Operations.Slides_presentations_create.Input.Headers = .init(),
                body: Operations.Slides_presentations_create.Input.Body? = nil
            ) {
                self.query = query
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/v1/presentations/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/v1/presentations/POST/responses/200/content/application\/json`.
                    case json(Components.Schemas.Presentation)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.Presentation {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.Slides_presentations_create.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.Slides_presentations_create.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Successful response
            ///
            /// - Remark: Generated from `#/paths//v1/presentations/post(slides.presentations.create)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.Slides_presentations_create.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.Slides_presentations_create.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Gets the latest version of the specified presentation.
    ///
    /// - Remark: HTTP `GET /v1/presentations/{presentationId}`.
    /// - Remark: Generated from `#/paths//v1/presentations/{presentationId}/get(slides.presentations.get)`.
    public enum Slides_presentations_get {
        public static let id: Swift.String = "slides.presentations.get"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/v1/presentations/{presentationId}/GET/path`.
            public struct Path: Sendable, Hashable {
                /// The ID of the presentation to retrieve.
                ///
                /// - Remark: Generated from `#/paths/v1/presentations/{presentationId}/GET/path/presentationId`.
                public var presentationId: Swift.String
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - presentationId: The ID of the presentation to retrieve.
                public init(presentationId: Swift.String) {
                    self.presentationId = presentationId
                }
            }
            public var path: Operations.Slides_presentations_get.Input.Path
            /// - Remark: Generated from `#/paths/v1/presentations/{presentationId}/GET/query`.
            public struct Query: Sendable, Hashable {
                /// - Remark: Generated from `#/components/parameters/_.xgafv`.
                @frozen public enum __period_xgafv: String, Codable, Hashable, Sendable, CaseIterable {
                    case _1 = "1"
                    case _2 = "2"
                }
                /// V1 error format.
                ///
                /// - Remark: Generated from `#/paths/v1/presentations/{presentationId}/GET/query/$.xgafv`.
                public var _dollar__xgafv: Components.Parameters.__period_xgafv?
                /// OAuth access token.
                ///
                /// - Remark: Generated from `#/paths/v1/presentations/{presentationId}/GET/query/access_token`.
                public var accessToken: Components.Parameters.AccessToken?
                /// - Remark: Generated from `#/components/parameters/alt`.
                @frozen public enum Alt: String, Codable, Hashable, Sendable, CaseIterable {
                    case json = "json"
                    case media = "media"
                    case proto = "proto"
                }
                /// Data format for response.
                ///
                /// - Remark: Generated from `#/paths/v1/presentations/{presentationId}/GET/query/alt`.
                public var alt: Components.Parameters.Alt?
                /// JSONP
                ///
                /// - Remark: Generated from `#/paths/v1/presentations/{presentationId}/GET/query/callback`.
                public var callback: Components.Parameters.Callback?
                /// Selector specifying which fields to include in a partial response.
                ///
                /// - Remark: Generated from `#/paths/v1/presentations/{presentationId}/GET/query/fields`.
                public var fields: Components.Parameters.Fields?
                /// API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
                ///
                /// - Remark: Generated from `#/paths/v1/presentations/{presentationId}/GET/query/key`.
                public var key: Components.Parameters.Key?
                /// OAuth 2.0 token for the current user.
                ///
                /// - Remark: Generated from `#/paths/v1/presentations/{presentationId}/GET/query/oauth_token`.
                public var oauthToken: Components.Parameters.OauthToken?
                /// Returns response with indentations and line breaks.
                ///
                /// - Remark: Generated from `#/paths/v1/presentations/{presentationId}/GET/query/prettyPrint`.
                public var prettyPrint: Components.Parameters.PrettyPrint?
                /// Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
                ///
                /// - Remark: Generated from `#/paths/v1/presentations/{presentationId}/GET/query/quotaUser`.
                public var quotaUser: Components.Parameters.QuotaUser?
                /// Upload protocol for media (e.g. "raw", "multipart").
                ///
                /// - Remark: Generated from `#/paths/v1/presentations/{presentationId}/GET/query/upload_protocol`.
                public var uploadProtocol: Components.Parameters.UploadProtocol?
                /// Legacy upload protocol for media (e.g. "media", "multipart").
                ///
                /// - Remark: Generated from `#/paths/v1/presentations/{presentationId}/GET/query/uploadType`.
                public var uploadType: Components.Parameters.UploadType?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - _dollar__xgafv: V1 error format.
                ///   - accessToken: OAuth access token.
                ///   - alt: Data format for response.
                ///   - callback: JSONP
                ///   - fields: Selector specifying which fields to include in a partial response.
                ///   - key: API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
                ///   - oauthToken: OAuth 2.0 token for the current user.
                ///   - prettyPrint: Returns response with indentations and line breaks.
                ///   - quotaUser: Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
                ///   - uploadProtocol: Upload protocol for media (e.g. "raw", "multipart").
                ///   - uploadType: Legacy upload protocol for media (e.g. "media", "multipart").
                public init(
                    _dollar__xgafv: Components.Parameters.__period_xgafv? = nil,
                    accessToken: Components.Parameters.AccessToken? = nil,
                    alt: Components.Parameters.Alt? = nil,
                    callback: Components.Parameters.Callback? = nil,
                    fields: Components.Parameters.Fields? = nil,
                    key: Components.Parameters.Key? = nil,
                    oauthToken: Components.Parameters.OauthToken? = nil,
                    prettyPrint: Components.Parameters.PrettyPrint? = nil,
                    quotaUser: Components.Parameters.QuotaUser? = nil,
                    uploadProtocol: Components.Parameters.UploadProtocol? = nil,
                    uploadType: Components.Parameters.UploadType? = nil
                ) {
                    self._dollar__xgafv = _dollar__xgafv
                    self.accessToken = accessToken
                    self.alt = alt
                    self.callback = callback
                    self.fields = fields
                    self.key = key
                    self.oauthToken = oauthToken
                    self.prettyPrint = prettyPrint
                    self.quotaUser = quotaUser
                    self.uploadProtocol = uploadProtocol
                    self.uploadType = uploadType
                }
            }
            public var query: Operations.Slides_presentations_get.Input.Query
            /// - Remark: Generated from `#/paths/v1/presentations/{presentationId}/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.Slides_presentations_get.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.Slides_presentations_get.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.Slides_presentations_get.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - query:
            ///   - headers:
            public init(
                path: Operations.Slides_presentations_get.Input.Path,
                query: Operations.Slides_presentations_get.Input.Query = .init(),
                headers: Operations.Slides_presentations_get.Input.Headers = .init()
            ) {
                self.path = path
                self.query = query
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/v1/presentations/{presentationId}/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/v1/presentations/{presentationId}/GET/responses/200/content/application\/json`.
                    case json(Components.Schemas.Presentation)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.Presentation {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.Slides_presentations_get.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.Slides_presentations_get.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Successful response
            ///
            /// - Remark: Generated from `#/paths//v1/presentations/{presentationId}/get(slides.presentations.get)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.Slides_presentations_get.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.Slides_presentations_get.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Gets the latest version of the specified page in the presentation.
    ///
    /// - Remark: HTTP `GET /v1/presentations/{presentationId}/pages/{pageObjectId}`.
    /// - Remark: Generated from `#/paths//v1/presentations/{presentationId}/pages/{pageObjectId}/get(slides.presentations.pages.get)`.
    public enum Slides_presentations_pages_get {
        public static let id: Swift.String = "slides.presentations.pages.get"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/v1/presentations/{presentationId}/pages/{pageObjectId}/GET/path`.
            public struct Path: Sendable, Hashable {
                /// The ID of the presentation to retrieve.
                ///
                /// - Remark: Generated from `#/paths/v1/presentations/{presentationId}/pages/{pageObjectId}/GET/path/presentationId`.
                public var presentationId: Swift.String
                /// The object ID of the page to retrieve.
                ///
                /// - Remark: Generated from `#/paths/v1/presentations/{presentationId}/pages/{pageObjectId}/GET/path/pageObjectId`.
                public var pageObjectId: Swift.String
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - presentationId: The ID of the presentation to retrieve.
                ///   - pageObjectId: The object ID of the page to retrieve.
                public init(
                    presentationId: Swift.String,
                    pageObjectId: Swift.String
                ) {
                    self.presentationId = presentationId
                    self.pageObjectId = pageObjectId
                }
            }
            public var path: Operations.Slides_presentations_pages_get.Input.Path
            /// - Remark: Generated from `#/paths/v1/presentations/{presentationId}/pages/{pageObjectId}/GET/query`.
            public struct Query: Sendable, Hashable {
                /// - Remark: Generated from `#/components/parameters/_.xgafv`.
                @frozen public enum __period_xgafv: String, Codable, Hashable, Sendable, CaseIterable {
                    case _1 = "1"
                    case _2 = "2"
                }
                /// V1 error format.
                ///
                /// - Remark: Generated from `#/paths/v1/presentations/{presentationId}/pages/{pageObjectId}/GET/query/$.xgafv`.
                public var _dollar__xgafv: Components.Parameters.__period_xgafv?
                /// OAuth access token.
                ///
                /// - Remark: Generated from `#/paths/v1/presentations/{presentationId}/pages/{pageObjectId}/GET/query/access_token`.
                public var accessToken: Components.Parameters.AccessToken?
                /// - Remark: Generated from `#/components/parameters/alt`.
                @frozen public enum Alt: String, Codable, Hashable, Sendable, CaseIterable {
                    case json = "json"
                    case media = "media"
                    case proto = "proto"
                }
                /// Data format for response.
                ///
                /// - Remark: Generated from `#/paths/v1/presentations/{presentationId}/pages/{pageObjectId}/GET/query/alt`.
                public var alt: Components.Parameters.Alt?
                /// JSONP
                ///
                /// - Remark: Generated from `#/paths/v1/presentations/{presentationId}/pages/{pageObjectId}/GET/query/callback`.
                public var callback: Components.Parameters.Callback?
                /// Selector specifying which fields to include in a partial response.
                ///
                /// - Remark: Generated from `#/paths/v1/presentations/{presentationId}/pages/{pageObjectId}/GET/query/fields`.
                public var fields: Components.Parameters.Fields?
                /// API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
                ///
                /// - Remark: Generated from `#/paths/v1/presentations/{presentationId}/pages/{pageObjectId}/GET/query/key`.
                public var key: Components.Parameters.Key?
                /// OAuth 2.0 token for the current user.
                ///
                /// - Remark: Generated from `#/paths/v1/presentations/{presentationId}/pages/{pageObjectId}/GET/query/oauth_token`.
                public var oauthToken: Components.Parameters.OauthToken?
                /// Returns response with indentations and line breaks.
                ///
                /// - Remark: Generated from `#/paths/v1/presentations/{presentationId}/pages/{pageObjectId}/GET/query/prettyPrint`.
                public var prettyPrint: Components.Parameters.PrettyPrint?
                /// Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
                ///
                /// - Remark: Generated from `#/paths/v1/presentations/{presentationId}/pages/{pageObjectId}/GET/query/quotaUser`.
                public var quotaUser: Components.Parameters.QuotaUser?
                /// Upload protocol for media (e.g. "raw", "multipart").
                ///
                /// - Remark: Generated from `#/paths/v1/presentations/{presentationId}/pages/{pageObjectId}/GET/query/upload_protocol`.
                public var uploadProtocol: Components.Parameters.UploadProtocol?
                /// Legacy upload protocol for media (e.g. "media", "multipart").
                ///
                /// - Remark: Generated from `#/paths/v1/presentations/{presentationId}/pages/{pageObjectId}/GET/query/uploadType`.
                public var uploadType: Components.Parameters.UploadType?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - _dollar__xgafv: V1 error format.
                ///   - accessToken: OAuth access token.
                ///   - alt: Data format for response.
                ///   - callback: JSONP
                ///   - fields: Selector specifying which fields to include in a partial response.
                ///   - key: API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
                ///   - oauthToken: OAuth 2.0 token for the current user.
                ///   - prettyPrint: Returns response with indentations and line breaks.
                ///   - quotaUser: Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
                ///   - uploadProtocol: Upload protocol for media (e.g. "raw", "multipart").
                ///   - uploadType: Legacy upload protocol for media (e.g. "media", "multipart").
                public init(
                    _dollar__xgafv: Components.Parameters.__period_xgafv? = nil,
                    accessToken: Components.Parameters.AccessToken? = nil,
                    alt: Components.Parameters.Alt? = nil,
                    callback: Components.Parameters.Callback? = nil,
                    fields: Components.Parameters.Fields? = nil,
                    key: Components.Parameters.Key? = nil,
                    oauthToken: Components.Parameters.OauthToken? = nil,
                    prettyPrint: Components.Parameters.PrettyPrint? = nil,
                    quotaUser: Components.Parameters.QuotaUser? = nil,
                    uploadProtocol: Components.Parameters.UploadProtocol? = nil,
                    uploadType: Components.Parameters.UploadType? = nil
                ) {
                    self._dollar__xgafv = _dollar__xgafv
                    self.accessToken = accessToken
                    self.alt = alt
                    self.callback = callback
                    self.fields = fields
                    self.key = key
                    self.oauthToken = oauthToken
                    self.prettyPrint = prettyPrint
                    self.quotaUser = quotaUser
                    self.uploadProtocol = uploadProtocol
                    self.uploadType = uploadType
                }
            }
            public var query: Operations.Slides_presentations_pages_get.Input.Query
            /// - Remark: Generated from `#/paths/v1/presentations/{presentationId}/pages/{pageObjectId}/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.Slides_presentations_pages_get.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.Slides_presentations_pages_get.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.Slides_presentations_pages_get.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - query:
            ///   - headers:
            public init(
                path: Operations.Slides_presentations_pages_get.Input.Path,
                query: Operations.Slides_presentations_pages_get.Input.Query = .init(),
                headers: Operations.Slides_presentations_pages_get.Input.Headers = .init()
            ) {
                self.path = path
                self.query = query
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/v1/presentations/{presentationId}/pages/{pageObjectId}/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/v1/presentations/{presentationId}/pages/{pageObjectId}/GET/responses/200/content/application\/json`.
                    case json(Components.Schemas.Page)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.Page {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.Slides_presentations_pages_get.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.Slides_presentations_pages_get.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Successful response
            ///
            /// - Remark: Generated from `#/paths//v1/presentations/{presentationId}/pages/{pageObjectId}/get(slides.presentations.pages.get)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.Slides_presentations_pages_get.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.Slides_presentations_pages_get.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Generates a thumbnail of the latest version of the specified page in the presentation and returns a URL to the thumbnail image. This request counts as an [expensive read request](/slides/limits) for quota purposes.
    ///
    /// - Remark: HTTP `GET /v1/presentations/{presentationId}/pages/{pageObjectId}/thumbnail`.
    /// - Remark: Generated from `#/paths//v1/presentations/{presentationId}/pages/{pageObjectId}/thumbnail/get(slides.presentations.pages.getThumbnail)`.
    public enum Slides_presentations_pages_getThumbnail {
        public static let id: Swift.String = "slides.presentations.pages.getThumbnail"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/v1/presentations/{presentationId}/pages/{pageObjectId}/thumbnail/GET/path`.
            public struct Path: Sendable, Hashable {
                /// The ID of the presentation to retrieve.
                ///
                /// - Remark: Generated from `#/paths/v1/presentations/{presentationId}/pages/{pageObjectId}/thumbnail/GET/path/presentationId`.
                public var presentationId: Swift.String
                /// The object ID of the page whose thumbnail to retrieve.
                ///
                /// - Remark: Generated from `#/paths/v1/presentations/{presentationId}/pages/{pageObjectId}/thumbnail/GET/path/pageObjectId`.
                public var pageObjectId: Swift.String
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - presentationId: The ID of the presentation to retrieve.
                ///   - pageObjectId: The object ID of the page whose thumbnail to retrieve.
                public init(
                    presentationId: Swift.String,
                    pageObjectId: Swift.String
                ) {
                    self.presentationId = presentationId
                    self.pageObjectId = pageObjectId
                }
            }
            public var path: Operations.Slides_presentations_pages_getThumbnail.Input.Path
            /// - Remark: Generated from `#/paths/v1/presentations/{presentationId}/pages/{pageObjectId}/thumbnail/GET/query`.
            public struct Query: Sendable, Hashable {
                /// - Remark: Generated from `#/components/parameters/_.xgafv`.
                @frozen public enum __period_xgafv: String, Codable, Hashable, Sendable, CaseIterable {
                    case _1 = "1"
                    case _2 = "2"
                }
                /// V1 error format.
                ///
                /// - Remark: Generated from `#/paths/v1/presentations/{presentationId}/pages/{pageObjectId}/thumbnail/GET/query/$.xgafv`.
                public var _dollar__xgafv: Components.Parameters.__period_xgafv?
                /// OAuth access token.
                ///
                /// - Remark: Generated from `#/paths/v1/presentations/{presentationId}/pages/{pageObjectId}/thumbnail/GET/query/access_token`.
                public var accessToken: Components.Parameters.AccessToken?
                /// - Remark: Generated from `#/components/parameters/alt`.
                @frozen public enum Alt: String, Codable, Hashable, Sendable, CaseIterable {
                    case json = "json"
                    case media = "media"
                    case proto = "proto"
                }
                /// Data format for response.
                ///
                /// - Remark: Generated from `#/paths/v1/presentations/{presentationId}/pages/{pageObjectId}/thumbnail/GET/query/alt`.
                public var alt: Components.Parameters.Alt?
                /// JSONP
                ///
                /// - Remark: Generated from `#/paths/v1/presentations/{presentationId}/pages/{pageObjectId}/thumbnail/GET/query/callback`.
                public var callback: Components.Parameters.Callback?
                /// Selector specifying which fields to include in a partial response.
                ///
                /// - Remark: Generated from `#/paths/v1/presentations/{presentationId}/pages/{pageObjectId}/thumbnail/GET/query/fields`.
                public var fields: Components.Parameters.Fields?
                /// API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
                ///
                /// - Remark: Generated from `#/paths/v1/presentations/{presentationId}/pages/{pageObjectId}/thumbnail/GET/query/key`.
                public var key: Components.Parameters.Key?
                /// OAuth 2.0 token for the current user.
                ///
                /// - Remark: Generated from `#/paths/v1/presentations/{presentationId}/pages/{pageObjectId}/thumbnail/GET/query/oauth_token`.
                public var oauthToken: Components.Parameters.OauthToken?
                /// Returns response with indentations and line breaks.
                ///
                /// - Remark: Generated from `#/paths/v1/presentations/{presentationId}/pages/{pageObjectId}/thumbnail/GET/query/prettyPrint`.
                public var prettyPrint: Components.Parameters.PrettyPrint?
                /// Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
                ///
                /// - Remark: Generated from `#/paths/v1/presentations/{presentationId}/pages/{pageObjectId}/thumbnail/GET/query/quotaUser`.
                public var quotaUser: Components.Parameters.QuotaUser?
                /// Upload protocol for media (e.g. "raw", "multipart").
                ///
                /// - Remark: Generated from `#/paths/v1/presentations/{presentationId}/pages/{pageObjectId}/thumbnail/GET/query/upload_protocol`.
                public var uploadProtocol: Components.Parameters.UploadProtocol?
                /// Legacy upload protocol for media (e.g. "media", "multipart").
                ///
                /// - Remark: Generated from `#/paths/v1/presentations/{presentationId}/pages/{pageObjectId}/thumbnail/GET/query/uploadType`.
                public var uploadType: Components.Parameters.UploadType?
                /// - Remark: Generated from `#/paths/v1/presentations/{presentationId}/pages/{pageObjectId}/thumbnail/GET/query/thumbnailProperties.mimeType`.
                @frozen public enum ThumbnailProperties_mimeTypePayload: String, Codable, Hashable, Sendable, CaseIterable {
                    case png = "PNG"
                }
                /// The optional mime type of the thumbnail image. If you don't specify the mime type, the mime type defaults to PNG.
                ///
                /// - Remark: Generated from `#/paths/v1/presentations/{presentationId}/pages/{pageObjectId}/thumbnail/GET/query/thumbnailProperties.mimeType`.
                public var thumbnailProperties_mimeType: Operations.Slides_presentations_pages_getThumbnail.Input.Query.ThumbnailProperties_mimeTypePayload?
                /// - Remark: Generated from `#/paths/v1/presentations/{presentationId}/pages/{pageObjectId}/thumbnail/GET/query/thumbnailProperties.thumbnailSize`.
                @frozen public enum ThumbnailProperties_thumbnailSizePayload: String, Codable, Hashable, Sendable, CaseIterable {
                    case thumbnailSizeUnspecified = "THUMBNAIL_SIZE_UNSPECIFIED"
                    case large = "LARGE"
                    case medium = "MEDIUM"
                    case small = "SMALL"
                }
                /// The optional thumbnail image size. If you don't specify the size, the server chooses a default size of the image.
                ///
                /// - Remark: Generated from `#/paths/v1/presentations/{presentationId}/pages/{pageObjectId}/thumbnail/GET/query/thumbnailProperties.thumbnailSize`.
                public var thumbnailProperties_thumbnailSize: Operations.Slides_presentations_pages_getThumbnail.Input.Query.ThumbnailProperties_thumbnailSizePayload?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - _dollar__xgafv: V1 error format.
                ///   - accessToken: OAuth access token.
                ///   - alt: Data format for response.
                ///   - callback: JSONP
                ///   - fields: Selector specifying which fields to include in a partial response.
                ///   - key: API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
                ///   - oauthToken: OAuth 2.0 token for the current user.
                ///   - prettyPrint: Returns response with indentations and line breaks.
                ///   - quotaUser: Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
                ///   - uploadProtocol: Upload protocol for media (e.g. "raw", "multipart").
                ///   - uploadType: Legacy upload protocol for media (e.g. "media", "multipart").
                ///   - thumbnailProperties_mimeType: The optional mime type of the thumbnail image. If you don't specify the mime type, the mime type defaults to PNG.
                ///   - thumbnailProperties_thumbnailSize: The optional thumbnail image size. If you don't specify the size, the server chooses a default size of the image.
                public init(
                    _dollar__xgafv: Components.Parameters.__period_xgafv? = nil,
                    accessToken: Components.Parameters.AccessToken? = nil,
                    alt: Components.Parameters.Alt? = nil,
                    callback: Components.Parameters.Callback? = nil,
                    fields: Components.Parameters.Fields? = nil,
                    key: Components.Parameters.Key? = nil,
                    oauthToken: Components.Parameters.OauthToken? = nil,
                    prettyPrint: Components.Parameters.PrettyPrint? = nil,
                    quotaUser: Components.Parameters.QuotaUser? = nil,
                    uploadProtocol: Components.Parameters.UploadProtocol? = nil,
                    uploadType: Components.Parameters.UploadType? = nil,
                    thumbnailProperties_mimeType: Operations.Slides_presentations_pages_getThumbnail.Input.Query.ThumbnailProperties_mimeTypePayload? = nil,
                    thumbnailProperties_thumbnailSize: Operations.Slides_presentations_pages_getThumbnail.Input.Query.ThumbnailProperties_thumbnailSizePayload? = nil
                ) {
                    self._dollar__xgafv = _dollar__xgafv
                    self.accessToken = accessToken
                    self.alt = alt
                    self.callback = callback
                    self.fields = fields
                    self.key = key
                    self.oauthToken = oauthToken
                    self.prettyPrint = prettyPrint
                    self.quotaUser = quotaUser
                    self.uploadProtocol = uploadProtocol
                    self.uploadType = uploadType
                    self.thumbnailProperties_mimeType = thumbnailProperties_mimeType
                    self.thumbnailProperties_thumbnailSize = thumbnailProperties_thumbnailSize
                }
            }
            public var query: Operations.Slides_presentations_pages_getThumbnail.Input.Query
            /// - Remark: Generated from `#/paths/v1/presentations/{presentationId}/pages/{pageObjectId}/thumbnail/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.Slides_presentations_pages_getThumbnail.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.Slides_presentations_pages_getThumbnail.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.Slides_presentations_pages_getThumbnail.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - query:
            ///   - headers:
            public init(
                path: Operations.Slides_presentations_pages_getThumbnail.Input.Path,
                query: Operations.Slides_presentations_pages_getThumbnail.Input.Query = .init(),
                headers: Operations.Slides_presentations_pages_getThumbnail.Input.Headers = .init()
            ) {
                self.path = path
                self.query = query
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/v1/presentations/{presentationId}/pages/{pageObjectId}/thumbnail/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/v1/presentations/{presentationId}/pages/{pageObjectId}/thumbnail/GET/responses/200/content/application\/json`.
                    case json(Components.Schemas.Thumbnail)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.Thumbnail {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.Slides_presentations_pages_getThumbnail.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.Slides_presentations_pages_getThumbnail.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Successful response
            ///
            /// - Remark: Generated from `#/paths//v1/presentations/{presentationId}/pages/{pageObjectId}/thumbnail/get(slides.presentations.pages.getThumbnail)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.Slides_presentations_pages_getThumbnail.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.Slides_presentations_pages_getThumbnail.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Applies one or more updates to the presentation. Each request is validated before being applied. If any request is not valid, then the entire request will fail and nothing will be applied. Some requests have replies to give you some information about how they are applied. Other requests do not need to return information; these each return an empty reply. The order of replies matches that of the requests. For example, suppose you call batchUpdate with four updates, and only the third one returns information. The response would have two empty replies: the reply to the third request, and another empty reply, in that order. Because other users may be editing the presentation, the presentation might not exactly reflect your changes: your changes may be altered with respect to collaborator changes. If there are no collaborators, the presentation should reflect your changes. In any case, the updates in your request are guaranteed to be applied together atomically.
    ///
    /// - Remark: HTTP `POST /v1/presentations/{presentationId}:batchUpdate`.
    /// - Remark: Generated from `#/paths//v1/presentations/{presentationId}:batchUpdate/post(slides.presentations.batchUpdate)`.
    public enum Slides_presentations_batchUpdate {
        public static let id: Swift.String = "slides.presentations.batchUpdate"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/v1/presentations/{presentationId}:batchUpdate/POST/path`.
            public struct Path: Sendable, Hashable {
                /// The presentation to apply the updates to.
                ///
                /// - Remark: Generated from `#/paths/v1/presentations/{presentationId}:batchUpdate/POST/path/presentationId`.
                public var presentationId: Swift.String
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - presentationId: The presentation to apply the updates to.
                public init(presentationId: Swift.String) {
                    self.presentationId = presentationId
                }
            }
            public var path: Operations.Slides_presentations_batchUpdate.Input.Path
            /// - Remark: Generated from `#/paths/v1/presentations/{presentationId}:batchUpdate/POST/query`.
            public struct Query: Sendable, Hashable {
                /// - Remark: Generated from `#/components/parameters/_.xgafv`.
                @frozen public enum __period_xgafv: String, Codable, Hashable, Sendable, CaseIterable {
                    case _1 = "1"
                    case _2 = "2"
                }
                /// V1 error format.
                ///
                /// - Remark: Generated from `#/paths/v1/presentations/{presentationId}:batchUpdate/POST/query/$.xgafv`.
                public var _dollar__xgafv: Components.Parameters.__period_xgafv?
                /// OAuth access token.
                ///
                /// - Remark: Generated from `#/paths/v1/presentations/{presentationId}:batchUpdate/POST/query/access_token`.
                public var accessToken: Components.Parameters.AccessToken?
                /// - Remark: Generated from `#/components/parameters/alt`.
                @frozen public enum Alt: String, Codable, Hashable, Sendable, CaseIterable {
                    case json = "json"
                    case media = "media"
                    case proto = "proto"
                }
                /// Data format for response.
                ///
                /// - Remark: Generated from `#/paths/v1/presentations/{presentationId}:batchUpdate/POST/query/alt`.
                public var alt: Components.Parameters.Alt?
                /// JSONP
                ///
                /// - Remark: Generated from `#/paths/v1/presentations/{presentationId}:batchUpdate/POST/query/callback`.
                public var callback: Components.Parameters.Callback?
                /// Selector specifying which fields to include in a partial response.
                ///
                /// - Remark: Generated from `#/paths/v1/presentations/{presentationId}:batchUpdate/POST/query/fields`.
                public var fields: Components.Parameters.Fields?
                /// API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
                ///
                /// - Remark: Generated from `#/paths/v1/presentations/{presentationId}:batchUpdate/POST/query/key`.
                public var key: Components.Parameters.Key?
                /// OAuth 2.0 token for the current user.
                ///
                /// - Remark: Generated from `#/paths/v1/presentations/{presentationId}:batchUpdate/POST/query/oauth_token`.
                public var oauthToken: Components.Parameters.OauthToken?
                /// Returns response with indentations and line breaks.
                ///
                /// - Remark: Generated from `#/paths/v1/presentations/{presentationId}:batchUpdate/POST/query/prettyPrint`.
                public var prettyPrint: Components.Parameters.PrettyPrint?
                /// Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
                ///
                /// - Remark: Generated from `#/paths/v1/presentations/{presentationId}:batchUpdate/POST/query/quotaUser`.
                public var quotaUser: Components.Parameters.QuotaUser?
                /// Upload protocol for media (e.g. "raw", "multipart").
                ///
                /// - Remark: Generated from `#/paths/v1/presentations/{presentationId}:batchUpdate/POST/query/upload_protocol`.
                public var uploadProtocol: Components.Parameters.UploadProtocol?
                /// Legacy upload protocol for media (e.g. "media", "multipart").
                ///
                /// - Remark: Generated from `#/paths/v1/presentations/{presentationId}:batchUpdate/POST/query/uploadType`.
                public var uploadType: Components.Parameters.UploadType?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - _dollar__xgafv: V1 error format.
                ///   - accessToken: OAuth access token.
                ///   - alt: Data format for response.
                ///   - callback: JSONP
                ///   - fields: Selector specifying which fields to include in a partial response.
                ///   - key: API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
                ///   - oauthToken: OAuth 2.0 token for the current user.
                ///   - prettyPrint: Returns response with indentations and line breaks.
                ///   - quotaUser: Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
                ///   - uploadProtocol: Upload protocol for media (e.g. "raw", "multipart").
                ///   - uploadType: Legacy upload protocol for media (e.g. "media", "multipart").
                public init(
                    _dollar__xgafv: Components.Parameters.__period_xgafv? = nil,
                    accessToken: Components.Parameters.AccessToken? = nil,
                    alt: Components.Parameters.Alt? = nil,
                    callback: Components.Parameters.Callback? = nil,
                    fields: Components.Parameters.Fields? = nil,
                    key: Components.Parameters.Key? = nil,
                    oauthToken: Components.Parameters.OauthToken? = nil,
                    prettyPrint: Components.Parameters.PrettyPrint? = nil,
                    quotaUser: Components.Parameters.QuotaUser? = nil,
                    uploadProtocol: Components.Parameters.UploadProtocol? = nil,
                    uploadType: Components.Parameters.UploadType? = nil
                ) {
                    self._dollar__xgafv = _dollar__xgafv
                    self.accessToken = accessToken
                    self.alt = alt
                    self.callback = callback
                    self.fields = fields
                    self.key = key
                    self.oauthToken = oauthToken
                    self.prettyPrint = prettyPrint
                    self.quotaUser = quotaUser
                    self.uploadProtocol = uploadProtocol
                    self.uploadType = uploadType
                }
            }
            public var query: Operations.Slides_presentations_batchUpdate.Input.Query
            /// - Remark: Generated from `#/paths/v1/presentations/{presentationId}:batchUpdate/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.Slides_presentations_batchUpdate.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.Slides_presentations_batchUpdate.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.Slides_presentations_batchUpdate.Input.Headers
            /// - Remark: Generated from `#/paths/v1/presentations/{presentationId}:batchUpdate/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/v1/presentations/{presentationId}:batchUpdate/POST/requestBody/content/application\/json`.
                case json(Components.Schemas.BatchUpdatePresentationRequest)
            }
            public var body: Operations.Slides_presentations_batchUpdate.Input.Body?
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - query:
            ///   - headers:
            ///   - body:
            public init(
                path: Operations.Slides_presentations_batchUpdate.Input.Path,
                query: Operations.Slides_presentations_batchUpdate.Input.Query = .init(),
                headers: Operations.Slides_presentations_batchUpdate.Input.Headers = .init(),
                body: Operations.Slides_presentations_batchUpdate.Input.Body? = nil
            ) {
                self.path = path
                self.query = query
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/v1/presentations/{presentationId}:batchUpdate/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/v1/presentations/{presentationId}:batchUpdate/POST/responses/200/content/application\/json`.
                    case json(Components.Schemas.BatchUpdatePresentationResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.BatchUpdatePresentationResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.Slides_presentations_batchUpdate.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.Slides_presentations_batchUpdate.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Successful response
            ///
            /// - Remark: Generated from `#/paths//v1/presentations/{presentationId}:batchUpdate/post(slides.presentations.batchUpdate)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.Slides_presentations_batchUpdate.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.Slides_presentations_batchUpdate.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
}
